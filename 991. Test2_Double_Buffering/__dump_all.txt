
.\rom_0x08003000.elf:     file format elf32-littlearm
.\rom_0x08003000.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08003000

Program Header:
0x70000001 off    0x0000fa60 vaddr 0x0800fa60 paddr 0x0800fa60 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x00011078 memsz 0x00011078 flags r-x
    LOAD off    0x00018000 vaddr 0x20000000 paddr 0x08011078 align 2**15
         filesz 0x00000594 memsz 0x00000750 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ca60  08003000  08003000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800fa60  0800fa60  0000fa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00001610  0800fa68  0800fa68  0000fa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000594  20000000  08011078  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000001bc  20000594  0801160c  00018594  2**2
                  ALLOC
  5 .debug_info   00008983  00000000  00000000  00018594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001826  00000000  00000000  00020f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001c0  00000000  00000000  00022740  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002753  00000000  00000000  00022900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001423  00000000  00000000  00025053  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000030  00000000  00000000  00026476  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 00000031  00000000  00000000  000264a6  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001710  00000000  00000000  000264d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003eb8  00000000  00000000  00027be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000028e0  00000000  00000000  0002baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08003000 l    d  .text	00000000 .text
0800fa60 l    d  .ARM.exidx	00000000 .ARM.exidx
0800fa68 l    d  .rodata	00000000 .rodata
20000000 l    d  .data	00000000 .data
20000594 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 crt0.o
20004fff l       *ABS*	00000000 RAM_END
20004c00 l       *ABS*	00000000 PSP_BASE
20004c00 l       *ABS*	00000000 MSP_LIMIT
20005000 l       *ABS*	00000000 MSP_BASE
00000400 l       *ABS*	00000000 MSP_SIZE
08003179 l       .text	00000000 _PSR
0800313a l       .text	00000000 _loop
0800316c l       .text	00000000 fmt
0800317d l       .text	00000000 _r0
08003181 l       .text	00000000 _r1
08003185 l       .text	00000000 _r2
08003189 l       .text	00000000 _r3
0800318d l       .text	00000000 _r4
08003191 l       .text	00000000 _r5
08003195 l       .text	00000000 _r6
08003199 l       .text	00000000 _r7
0800319d l       .text	00000000 _r8
080031a1 l       .text	00000000 _r9
080031a5 l       .text	00000000 _r10
080031a9 l       .text	00000000 _r11
080031ad l       .text	00000000 _r12
080031b1 l       .text	00000000 _PSP
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 core_cm3.c
00000000 l    df *ABS*	00000000 graphics.c
0800fa68 l       .rodata	00000000 .LANCHOR0
00000000 l    df *ABS*	00000000 jog_key.c
00000000 l    df *ABS*	00000000 key.c
00000000 l    df *ABS*	00000000 lcd.c
20000594 l       .bss	00000000 .LANCHOR0
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
200005a4 l       .bss	00000000 .LANCHOR0
20000004 l       .data	00000000 .LANCHOR1
20000004 l     O .data	00000004 player_x
20000008 l     O .data	00000004 player_y
2000000c l     O .data	00000004 player_life
200005a4 l     O .bss	00000078 bullets
2000061c l     O .bss	00000064 enemies
20000680 l     O .bss	00000050 items
200006d0 l     O .bss	00000004 bomb_item
200006d4 l     O .bss	00000004 up_item
200006d8 l     O .bss	00000004 speed_item
200006dc l     O .bss	00000001 game_state
200006e0 l     O .bss	00000004 fire_delay.5235
200006e4 l     O .bss	00000004 spawn_timer.5237
200006e8 l     O .bss	00000004 item_spawn_timer.5238
200006ec l     O .bss	00000004 enemy_fire_timer.5239
00000000 l    df *ABS*	00000000 runtime.c
200006f0 l       .bss	00000000 .LANCHOR0
200006f0 l     O .bss	00000004 heap.4848
00000000 l    df *ABS*	00000000 stm32f10x_it.c
08008d0c l     F .text	00000038 Stack_Dump
200006f4 l       .bss	00000000 .LANCHOR1
08010a70 l       .rodata	00000000 .LANCHOR0
08010a70 l     O .rodata	00000020 Stack_reg
08010a90 l     O .rodata	00000020 EXTI9_5_LUT.4985
08010ab0 l     O .rodata	00000010 EXTI15_10_LUT.5040
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	000000f0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
20000108 l       .data	00000000 .LANCHOR0
2000070c l       .bss	00000000 .LANCHOR1
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
08010bc8 l       .rodata	00000000 .LANCHOR0
08010bc8 l     O .rodata	00000010 blanks.6752
08010bd8 l     O .rodata	00000010 zeroes.6753
00000000 l    df *ABS*	00000000 dtoa.c
0800b490 l     F .text	0000014a quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 locale.c
20000518 l       .data	00000000 .LANCHOR0
20000518 l     O .data	00000020 lc_ctype_charset
2000053c l     O .data	00000020 lc_message_charset
2000055c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08010be8 l       .rodata	00000000 .LANCHOR0
08010be8 l     O .rodata	0000000c p05.5301
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
08010d10 l       .rodata	00000000 .LANCHOR0
08010d10 l     O .rodata	00000010 blanks.6696
08010d20 l     O .rodata	00000010 zeroes.6697
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _udivsi3.o
0800e7d0 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 
08008f64 g     F .text	00000006 EXTI2_IRQHandler
08003294 g     F .text	00000006 __set_PRIMASK
0800d1d4 g     F .text	00000034 _mprec_log10
0800d250 g     F .text	0000005e __any_on
08010cc0 g     O .rodata	00000028 __mprec_tinytens
0800f2b4 g     F .text	00000012 .hidden __aeabi_dcmple
0800d2b0 g     F .text	0000001a cleanup_glue
0800f3dc g     F .text	00000030 .hidden __gnu_uldivmod_helper
08003c08 g     F .text	0000004e Key_Poll_Init
0800f1f0 g     F .text	0000007a .hidden __cmpdf2
08008ef4 g     F .text	00000010 DebugMon_Handler
08007860 g     F .text	00000430 Collision_Update
0800f1f0 g     F .text	0000007a .hidden __eqdf2
20000000 g     O .data	00000002 BACK_COLOR
0800f40c g     F .text	00000352 .hidden __divdi3
0800ed60 g     F .text	0000005a .hidden __floatdidf
080099fc g     F .text	0000001a vsprintf
08009064 g     F .text	00000006 TIM1_CC_IRQHandler
08008d88 g     F .text	0000012a HardFault_Handler
0800c7a4 g     F .text	00000052 _setlocale_r
0800fa70 g     O .rodata	00001000 eng8x16
08003a64 g     F .text	00000034 Jog_Get_Pressed
08009fac g     F .text	00000002 __malloc_unlock
080042cc g     F .text	0000005e Lcd_Write_RAM_Prepare
20000708 g     O .bss	00000004 USART1_rx_data
0800329c g     F .text	00000006 __get_FAULTMASK
08008f14 g     F .text	0000000e SysTick_Handler
080077bc g     F .text	00000034 Use_Bomb
080032bc g     F .text	00000004 __REV
08008f2c g     F .text	00000006 PVD_IRQHandler
0800e274 g     F .text	000000ce memmove
08003e88 g     F .text	00000062 Lcd_Reset
08008f04 g     F .text	00000010 PendSV_Handler
08008d78 g     F .text	00000010 NMI_Handler
0800c978 g     F .text	0000006c _Balloc
08008f6c g     F .text	00000032 EXTI3_IRQHandler
0800f1e0 g     F .text	0000008a .hidden __gtdf2
080032f8 g     F .text	00000006 __STREXW
080032e0 g     F .text	00000006 __LDREXW
2000074c g     O .bss	00000004 errno
0800f27c g     F .text	00000010 .hidden __aeabi_cdcmple
200005a0 g     O .bss	00000002 POINT_COLOR
080091d0 g     F .text	0000000c SysTick_Get_Load_Time
08008838 g     F .text	00000490 Main
080074dc g     F .text	000001d6 Bullet_Draw
08003eec g     F .text	00000052 Lcd_WR_REG
0800c8d0 g     F .text	000000a6 memcpy
0800f26c g     F .text	00000020 .hidden __aeabi_cdrcmple
08006df4 g     F .text	0000001c LED_Display
08004b20 g     F .text	00000006 Lcd_Clr_Screen
08009fd8 g     F .text	000014b4 _svfprintf_r
0800ecf0 g     F .text	00000022 .hidden __floatsidf
0800f1e8 g     F .text	00000082 .hidden __ltdf2
08008fe8 g     F .text	00000006 USB_HP_CAN_TX_IRQHandler
08003f40 g     F .text	00000052 Lcd_WR_DATA
08008f54 g     F .text	00000006 EXTI0_IRQHandler
08006e24 g     F .text	00000012 LED_All_Off
080090b0 g     F .text	00000006 I2C2_EV_IRQHandler
200006f4 g     O .bss	00000004 SysTick_Flag
0800f380 g     F .text	00000000 .hidden __aeabi_uldivmod
0800d3a4 g     F .text	00000050 __fpclassifyd
0800d174 g     F .text	0000005e __ratio
080032c8 g     F .text	00000006 __RBIT
20000000 g       .data	00000000 __RW_BASE__
08009a18 g     F .text	00000010 malloc
0800e7d0 g     F .text	0000025c .hidden __udivsi3
08010bf8 g     O .rodata	000000c8 __mprec_tens
08008ed4 g     F .text	00000010 UsageFault_Handler
080032a4 g     F .text	00000006 __set_FAULTMASK
0800c7f8 g     F .text	0000000a __locale_charset
0800f340 g     F .text	00000040 .hidden __fixunsdfsi
08008fe0 g     F .text	00000006 ADC1_2_IRQHandler
2000070c g     O .bss	00000004 __malloc_top_pad
20000538 g     O .data	00000004 __mb_cur_max
0800ecd0 g     F .text	0000001e .hidden __aeabi_ui2d
0800c81c g     F .text	00000008 _localeconv_r
080034fc g     F .text	0000022c Lcd_Puts
0800cbd4 g     F .text	00000012 __i2b
08004690 g     F .text	000000b8 Lcd_Fill
080090c0 g     F .text	00000006 SPI1_IRQHandler
08009000 g     F .text	00000006 CAN_SCE_IRQHandler
0800ea4c g     F .text	00000000 .hidden __aeabi_drsub
08009fb0 g     F .text	00000026 _sbrk_r
08007358 g     F .text	0000007a Fire_Bullet
08008f34 g     F .text	00000006 TAMPER_IRQHandler
08006dc4 g     F .text	0000002e LED_Init
0800f2a0 g     F .text	00000012 .hidden __aeabi_dcmplt
080031ec g     F .text	00000070 Clock_Init
20000738 g     O .bss	00000004 __malloc_max_sbrked_mem
0800ed14 g     F .text	0000003a .hidden __extendsfdf2
0800f010 g     F .text	000001d0 .hidden __aeabi_ddiv
0800ea58 g     F .text	00000276 .hidden __adddf3
20000594 g       .data	00000000 __RW_LIMIT__
080094d8 g     F .text	00000060 Uart1_Printf
0800d00c g     F .text	000000ac __b2d
08007c90 g     F .text	00000764 Game_Update
0800edbc g     F .text	00000254 .hidden __aeabi_dmul
080032ac g     F .text	00000006 __get_CONTROL
08010bc4 g     O .rodata	00000004 _global_impure_ptr
0800e3e4 g     F .text	000003ea _realloc_r
08003980 g     F .text	0000007c Jog_Poll_Init
0800f760 g     F .text	00000300 .hidden __udivdi3
08008fc0 g     F .text	00000006 DMA1_Channel4_IRQHandler
08010ce8 g     O .rodata	00000028 __mprec_bigtens
080076b4 g     F .text	0000006e Game_Init
0800caa8 g     F .text	00000098 __s2b
0800ecd0 g     F .text	0000001e .hidden __floatunsidf
08008cc8 g     F .text	00000044 _sbrk
0800ce98 g     F .text	00000042 __mcmp
08007214 g     F .text	00000102 Enemy_Draw
08009538 g     F .text	00000016 Uart1_Get_Pressed
08006a04 g     F .text	000003c0 Lcd_Put_Pixel
080099ac g     F .text	0000001a strtol
080087a4 g     F .text	0000004a Start_Screen
080096c0 g     F .text	00000042 Uart1_RX_Interrupt_Enable
080090f0 g     F .text	00000006 USART3_IRQHandler
08006ea8 g     F .text	00000020 Item_Init
08008f3c g     F .text	00000006 RTC_IRQHandler
0800325c g     F .text	00000008 __get_PSP
08003c98 g     F .text	0000008a Key_ISR_Enable
08003264 g     F .text	00000006 __set_PSP
08008fd8 g     F .text	00000006 DMA1_Channel7_IRQHandler
0800d2cc g     F .text	000000d6 _reclaim_reent
0800cb40 g     F .text	0000003c __hi0bits
0800f2f0 g     F .text	0000004e .hidden __fixdfsi
08004b28 g     F .text	000000b4 Lcd_Draw_Box
08007758 g     F .text	00000062 Draw_HUD
08003f94 g     F .text	00000336 Lcd_Set_Display_Mode
0800907c g     F .text	00000022 TIM4_IRQHandler
0800ea58 g     F .text	00000276 .hidden __aeabi_dadd
0800f1e8 g     F .text	00000082 .hidden __ledf2
08006fd0 g     F .text	00000198 Enemy_Update
08008ff8 g     F .text	00000006 CAN_RX1_IRQHandler
0800cd28 g     F .text	000000b8 __pow5mult
0800ed50 g     F .text	0000006a .hidden __aeabi_ul2d
20000748 g     O .bss	00000004 __nlocale_changed
00000000  w      *UND*	00000000 __sf_fake_stderr
080031b8 g     F .text	00000000 _HardFault_Handler
080090a0 g     F .text	00000006 I2C1_EV_IRQHandler
080030ec g     F .text	00000000 __start
080032d0 g     F .text	00000008 __LDREXB
08003d68 g     F .text	000000a2 Lcd_Write_Reg
08009710 g     F .text	00000008 _atoi_r
0800f2dc g     F .text	00000012 .hidden __aeabi_dcmpgt
08008fd0 g     F .text	00000006 DMA1_Channel6_IRQHandler
0800c840 g     F .text	00000090 memchr
0800c60c g     F .text	00000198 _free_r
08009074 g     F .text	00000006 TIM3_IRQHandler
08008f4c g     F .text	00000006 RCC_IRQHandler
0800c804 g     F .text	0000000c __locale_mb_cur_max
08003b10 g     F .text	000000f8 Jog_ISR_Enable
0800432c g     F .text	00000364 Lcd_Set_Windows
0800f2c8 g     F .text	00000012 .hidden __aeabi_dcmpge
0800905c g     F .text	00000006 TIM1_TRG_COM_IRQHandler
08008fa8 g     F .text	00000006 DMA1_Channel1_IRQHandler
0800328c g     F .text	00000006 __get_PRIMASK
20000744 g     O .bss	00000004 __mlocale_changed
0800ea54 g     F .text	0000027a .hidden __aeabi_dsub
20000510 g     O .data	00000004 __malloc_sbrk_base
00000594 g       *ABS*	00000000 __RW_SIZE__
0800ed50 g     F .text	0000006a .hidden __floatundidf
08009774 g     F .text	0000009c rand
080083f4 g     F .text	000003b0 Game_Draw
0800cde0 g     F .text	000000b6 __lshift
0800d630 g     F .text	00000104 __ssprint_r
080090f8 g     F .text	00000046 EXTI15_10_IRQHandler
08003728 g     F .text	00000256 Lcd_Printf
20000704 g     O .bss	00000004 USART1_rx_ready
08011078 g       *ABS*	00000000 __RW_LOAD_ADDR__
08009198 g     F .text	0000001c SysTick_Run
080032c4 g     F .text	00000004 __REVSH
0800cbe8 g     F .text	00000140 __multiply
20000710 g     O .bss	00000028 __malloc_current_mallinfo
0800d0b8 g     F .text	000000ba __d2b
08003c6c g     F .text	00000014 Key_Wait_Key_Released
08003e0c g     F .text	0000007a Lcd_Write_Data_16Bit
0800ecf0 g     F .text	00000022 .hidden __aeabi_i2d
08006f44 g     F .text	0000008c Spawn_Item
08003000 g       .text	00000000 __RO_BASE__
0800ea48  w    F .text	00000002 .hidden __aeabi_ldiv0
08009008 g     F .text	00000044 EXTI9_5_IRQHandler
0800f010 g     F .text	000001d0 .hidden __divdf3
0800d208 g     F .text	00000046 __copybits
20000108 g     O .data	00000408 __malloc_av_
0800edbc g     F .text	00000254 .hidden __muldf3
08009fa8 g     F .text	00000002 __malloc_lock
0800e210 g     F .text	00000062 _calloc_r
080091f0 g     F .text	000000f4 TIM2_Delay
080090c8 g     F .text	00000006 SPI2_IRQHandler
00000000  w      *UND*	00000000 __sf_fake_stdin
08008ff0 g     F .text	00000006 USB_LP_CAN_RX0_IRQHandler
0800e344 g     F .text	0000009e memset
08008eb4 g     F .text	00000010 MemManage_Handler
08006e88 g     F .text	00000020 Enemy_Init
2000073c g     O .bss	00000004 __malloc_max_total_mem
08009718 g     F .text	0000005a srand
2000074c g       .bss	00000000 __ZI_LIMIT__
08006e38 g     F .text	00000030 System_Init
0800e7d0 g     F .text	00000000 .hidden __aeabi_uidiv
08008ee4 g     F .text	00000010 SVC_Handler
08009150 g     F .text	00000048 SysTick_OS_Tick
08003a98 g     F .text	0000003c Jog_Wait_Key_Pressed
08003300 g     F .text	000001fa Lcd_Eng_Putch
08009870 g     F .text	0000013c _strtol_r
080032b4 g     F .text	00000006 __set_CONTROL
0800b5dc g     F .text	00000f8a _dtoa_r
08009a38 g     F .text	0000056e _malloc_r
0800ed60 g     F .text	0000005a .hidden __aeabi_l2d
08009494 g     F .text	00000042 Uart1_Send_String
08009458 g     F .text	0000003a Uart1_Send_Byte
08003c58 g     F .text	00000012 Key_Get_Pressed
08007318 g     F .text	00000040 Item_Draw
08006e10 g     F .text	00000012 LED_All_On
08008fc8 g     F .text	00000006 DMA1_Channel5_IRQHandler
08008fa0 g     F .text	00000006 EXTI4_IRQHandler
200006f8 g     O .bss	00000004 Jog_key_in
0800c568 g     F .text	000000a2 _malloc_trim_r
0800d3f4 g     F .text	00000000 strcmp
0800326c g     F .text	00000008 __get_MSP
08011078 g       .rodata	00000000 __RO_LIMIT__
0800f1f0 g     F .text	0000007a .hidden __nedf2
20000740 g     O .bss	00000004 _PathLocale
20000594 g     O .bss	0000000c lcddev
08004748 g     F .text	00000342 Lcd_Set_Cursor
080099c8 g     F .text	00000032 _vsprintf_r
08008fb8 g     F .text	00000006 DMA1_Channel3_IRQHandler
0800c824 g     F .text	00000012 setlocale
08007168 g     F .text	000000ac Item_Update
080032c0 g     F .text	00000004 __REV16
20000014 g     O .data	00000004 _impure_ptr
08009054 g     F .text	00000006 TIM1_UP_IRQHandler
0800c818 g     F .text	00000004 __locale_cjk_lang
20000700 g     O .bss	00000004 TIM4_expired
0800d734 g     F .text	00000adc _svfiprintf_r
000001bc g       *ABS*	00000000 __ZI_SIZE__
08008f24 g     F .text	00000006 WWDG_IRQHandler
08003274 g     F .text	00000006 __set_MSP
0800cfc8 g     F .text	00000042 __ulp
080039fc g     F .text	00000066 Jog_Get_Pressed_Calm
080091b4 g     F .text	0000000e SysTick_Stop
08004bdc g     F .text	00001e26 Lcd_Init
08006e68 g     F .text	00000020 Bullet_Init
0800906c g     F .text	00000006 TIM2_IRQHandler
080073d4 g     F .text	00000106 Bullet_Update
080077f0 g     F .text	00000070 Fire_Enemy_Bullet
08003d24 g     F .text	00000042 Lcd_GPIO_Init
0800f340 g     F .text	00000040 .hidden __aeabi_d2uiz
20000594 g       .bss	00000000 __ZI_BASE__
0800c838 g     F .text	00000008 localeconv
0800904c g     F .text	00000006 TIM1_BRK_IRQHandler
0800ea2c g     F .text	0000001a .hidden __aeabi_uidivmod
08008f5c g     F .text	00000006 EXTI1_IRQHandler
08003284 g     F .text	00000006 __set_BASEPRI
0800f28c g     F .text	00000012 .hidden __aeabi_dcmpeq
08003c80 g     F .text	00000016 Key_Wait_Key_Pressed
080093a0 g     F .text	000000b8 Uart1_Init
08006ec8 g     F .text	0000007a Spawn_Enemy
08009140 g     F .text	00000006 RTCAlarm_IRQHandler
080087f0 g     F .text	00000048 Game_Over_Screen
080090e8 g     F .text	00000006 USART2_IRQHandler
20000514 g     O .data	00000004 __malloc_trim_threshold
0800c810 g     F .text	00000008 __locale_msgcharset
080032f0 g     F .text	00000008 __STREXH
0800cedc g     F .text	000000ea __mdiff
0800f2f0 g     F .text	0000004e .hidden __aeabi_d2iz
20000010 g     O .data	00000004 __ctype_ptr__
080032d8 g     F .text	00000008 __LDREXH
080090b8 g     F .text	00000006 I2C2_ER_IRQHandler
08008fb0 g     F .text	00000006 DMA1_Channel2_IRQHandler
00000000  w      *UND*	00000000 __sf_fake_stdout
08009708 g     F .text	00000008 atoi
08010ac0 g     O .rodata	00000101 _ctype_
0800ea48  w    F .text	00000002 .hidden __aeabi_idiv0
08009568 g     F .text	0000009c Uart1_Get_String
08007724 g     F .text	00000032 Check_Collision
08008f44 g     F .text	00000006 FLASH_IRQHandler
08004a8c g     F .text	00000094 Lcd_Draw_Back_Color
08008ec4 g     F .text	00000010 BusFault_Handler
080090d0 g     F .text	00000016 USART1_IRQHandler
080091c4 g     F .text	0000000c SysTick_Get_Time
08009810 g     F .text	0000005e strlen
080092e4 g     F .text	000000b6 TIM4_Repeat_Interrupt_Enable
0800327c g     F .text	00000006 __get_BASEPRI
0800f27c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0800f1e0 g     F .text	0000008a .hidden __gedf2
08009550 g     F .text	00000018 Uart1_Get_Char
0800f3ac g     F .text	00000030 .hidden __gnu_ldivmod_helper
080090a8 g     F .text	00000006 I2C1_ER_IRQHandler
0800ed14 g     F .text	0000003a .hidden __aeabi_f2d
08003ad4 g     F .text	0000003c Jog_Wait_Key_Released
080032e8 g     F .text	00000008 __STREXB
0800ea54 g     F .text	0000027a .hidden __subdf3
08003126 g     F .text	00000000 _Print_Reg
0800cb7c g     F .text	00000056 __lo0bits
200006fc g     O .bss	00000004 Jog_key
08008d44 g     F .text	00000032 Invalid_ISR
08009604 g     F .text	000000ba Uart1_Get_Int_Num
080091dc g     F .text	00000010 SysTick_Check_Timeout
08009148 g     F .text	00000006 USBWakeUp_IRQHandler
08009a28 g     F .text	00000010 free
0800ca1c g     F .text	0000008c __multadd
0800c9e4 g     F .text	00000036 _Bfree



Disassembly of section .text:

08003000 <__RO_BASE__>:
 8003000:	20005000 	andcs	r5, r0, r0
 8003004:	080030ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, ip, sp}
 8003008:	00000000 	andeq	r0, r0, r0
 800300c:	080031b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, sp}
	...
 800303c:	08008f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, pc}
 8003040:	08008f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, pc}
 8003044:	08008f2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, fp, pc}
 8003048:	08008f35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, fp, pc}
 800304c:	08008f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, pc}
 8003050:	08008f45 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, fp, pc}
 8003054:	08008f4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, pc}
 8003058:	08008f55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, pc}
 800305c:	08008f5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, pc}
 8003060:	08008f65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, pc}
 8003064:	08008f6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, fp, pc}
 8003068:	08008fa1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, fp, pc}
 800306c:	08008fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, pc}
 8003070:	08008fb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp, pc}
 8003074:	08008fb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, fp, pc}
 8003078:	08008fc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, fp, pc}
 800307c:	08008fc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, fp, pc}
 8003080:	08008fd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sl, fp, pc}
 8003084:	08008fd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, fp, pc}
 8003088:	08008fe1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, fp, pc}
	...
 800309c:	08009009 	stmdaeq	r0, {r0, r3, ip, pc}
 80030a0:	0800904d 	stmdaeq	r0, {r0, r2, r3, r6, ip, pc}
 80030a4:	08009055 	stmdaeq	r0, {r0, r2, r4, r6, ip, pc}
 80030a8:	0800905d 	stmdaeq	r0, {r0, r2, r3, r4, r6, ip, pc}
 80030ac:	08009065 	stmdaeq	r0, {r0, r2, r5, r6, ip, pc}
 80030b0:	0800906d 	stmdaeq	r0, {r0, r2, r3, r5, r6, ip, pc}
 80030b4:	08009075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, pc}
 80030b8:	0800907d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, ip, pc}
 80030bc:	080090a1 	stmdaeq	r0, {r0, r5, r7, ip, pc}
 80030c0:	080090a9 	stmdaeq	r0, {r0, r3, r5, r7, ip, pc}
 80030c4:	080090b1 	stmdaeq	r0, {r0, r4, r5, r7, ip, pc}
 80030c8:	080090b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, ip, pc}
 80030cc:	080090c1 	stmdaeq	r0, {r0, r6, r7, ip, pc}
 80030d0:	080090c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, pc}
 80030d4:	080090d1 	stmdaeq	r0, {r0, r4, r6, r7, ip, pc}
 80030d8:	080090e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, ip, pc}
 80030dc:	080090f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, pc}
 80030e0:	080090f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, ip, pc}
 80030e4:	08009141 	stmdaeq	r0, {r0, r6, r8, ip, pc}
 80030e8:	08009149 	stmdaeq	r0, {r0, r3, r6, r8, ip, pc}

080030ec <__start>:
	.extern __RO_LIMIT__
	.extern __RW_BASE__
	.extern __ZI_BASE__
	.extern __ZI_LIMIT__

	ldr		r0, =__RO_LIMIT__
 80030ec:	4837      	ldr	r0, [pc, #220]	; (80031cc <_HardFault_Handler+0x14>)
	ldr		r1, =__RW_BASE__
 80030ee:	4938      	ldr	r1, [pc, #224]	; (80031d0 <_HardFault_Handler+0x18>)
	ldr		r3, =__ZI_BASE__
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <_HardFault_Handler+0x1c>)

	cmp		r0, r1
 80030f2:	4288      	cmp	r0, r1
	beq		2f
 80030f4:	d006      	beq.n	8003104 <__start+0x18>

1:
	cmp		r1, r3
 80030f6:	4299      	cmp	r1, r3
	ittt	lo
 80030f8:	bf3e      	ittt	cc
	ldrlo	r2, [r0], #4
 80030fa:	f850 2b04 	ldrcc.w	r2, [r0], #4
	strlo	r2, [r1], #4
 80030fe:	f841 2b04 	strcc.w	r2, [r1], #4
	blo		1b
 8003102:	e7f8      	bcc.n	80030f6 <__start+0xa>

2:
	ldr		r1, =__ZI_LIMIT__
 8003104:	4934      	ldr	r1, [pc, #208]	; (80031d8 <_HardFault_Handler+0x20>)
	mov		r2, #0x0
 8003106:	f04f 0200 	mov.w	r2, #0
3:
	cmp		r3, r1
 800310a:	428b      	cmp	r3, r1
	itt		lo
 800310c:	bf3c      	itt	cc
	strlo	r2, [r3], #4
 800310e:	f843 2b04 	strcc.w	r2, [r3], #4
	blo		3b
 8003112:	e7fa      	bcc.n	800310a <__start+0x1e>
	.equ PSP_BASE,	(MSP_LIMIT)
	.equ MSP_BASE,	(RAM_END + 1)
	.equ MSP_SIZE,	(1*1024)
	.equ MSP_LIMIT,	(MSP_BASE - MSP_SIZE)

	ldr		r0, =PSP_BASE
 8003114:	4831      	ldr	r0, [pc, #196]	; (80031dc <_HardFault_Handler+0x24>)
	msr		psp, r0
 8003116:	f380 8809 	msr	PSP, r0
	ldr		r0, =(0x1<<1)|(0x0<<0)
 800311a:	4831      	ldr	r0, [pc, #196]	; (80031e0 <_HardFault_Handler+0x28>)
	msr		control, r0
 800311c:	f380 8814 	msr	CONTROL, r0

	bl		Main
 8003120:	f005 fb8a 	bl	8008838 <Main>

	b		.
 8003124:	e7fe      	b.n	8003124 <__start+0x38>

08003126 <_Print_Reg>:
    .extern	Uart1_Printf

    .global _Print_Reg
  	.type 	_Print_Reg, %function
_Print_Reg:
    PUSH	{r0-r12,lr}
 8003126:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    MRS     r1, PSR
 800312a:	f3ef 8103 	mrs	r1, PSR
    PUSH    {r0, r1}
 800312e:	b403      	push	{r0, r1}

    MOV     r6, #14
 8003130:	f04f 060e 	mov.w	r6, #14
    MOV     r4, #4
 8003134:	f04f 0404 	mov.w	r4, #4
    LDR     r5, =_PSR
 8003138:	4d2a      	ldr	r5, [pc, #168]	; (80031e4 <_HardFault_Handler+0x2c>)

0800313a <_loop>:
_loop:
    LDR     r0, =fmt
 800313a:	482b      	ldr	r0, [pc, #172]	; (80031e8 <_HardFault_Handler+0x30>)
    MOV     r1, r5
 800313c:	4629      	mov	r1, r5
    LDR     r2, [sp, r4]
 800313e:	f85d 2004 	ldr.w	r2, [sp, r4]
    BL      Uart1_Printf
 8003142:	f006 f9c9 	bl	80094d8 <Uart1_Printf>

    ADD     r4, r4, #4
 8003146:	f104 0404 	add.w	r4, r4, #4
    ADD     r5, r5, #4
 800314a:	f105 0504 	add.w	r5, r5, #4
    SUBS    r6, r6, #1
 800314e:	3e01      	subs	r6, #1
    BGT     _loop
 8003150:	dcf3      	bgt.n	800313a <_loop>

    LDR     r0, =fmt
 8003152:	4825      	ldr	r0, [pc, #148]	; (80031e8 <_HardFault_Handler+0x30>)
    MOV     r1, r5
 8003154:	4629      	mov	r1, r5
    MRS     r2, psp
 8003156:	f3ef 8209 	mrs	r2, PSP
    BL      Uart1_Printf
 800315a:	f006 f9bd 	bl	80094d8 <Uart1_Printf>

    POP     {r0, r1}
 800315e:	bc03      	pop	{r0, r1}
	MSR     APSR_nzcvq, r1
 8003160:	f381 8800 	msr	CPSR_f, r1
	MSR     IEPSR, r1
 8003164:	f381 8807 	msr	IEPSR, r1
    POP		{r0-r12, pc}
 8003168:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0800316c <fmt>:
 800316c:	3a207325 	bcc	881fe08 <__RW_LOAD_ADDR__+0x80ed90>
 8003170:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 8003174:	0a58382e 	beq	9611234 <__RW_LOAD_ADDR__+0x16001bc>
	...

08003179 <_PSR>:
 8003179:	00525350 	subseq	r5, r2, r0, asr r3

0800317d <_r0>:
 800317d:	00303052 	eorseq	r3, r0, r2, asr r0

08003181 <_r1>:
 8003181:	00313052 	eorseq	r3, r1, r2, asr r0

08003185 <_r2>:
 8003185:	00323052 	eorseq	r3, r2, r2, asr r0

08003189 <_r3>:
 8003189:	00333052 	eorseq	r3, r3, r2, asr r0

0800318d <_r4>:
 800318d:	00343052 	eorseq	r3, r4, r2, asr r0

08003191 <_r5>:
 8003191:	00353052 	eorseq	r3, r5, r2, asr r0

08003195 <_r6>:
 8003195:	00363052 	eorseq	r3, r6, r2, asr r0

08003199 <_r7>:
 8003199:	00373052 	eorseq	r3, r7, r2, asr r0

0800319d <_r8>:
 800319d:	00383052 	eorseq	r3, r8, r2, asr r0

080031a1 <_r9>:
 80031a1:	00393052 	eorseq	r3, r9, r2, asr r0

080031a5 <_r10>:
 80031a5:	00303152 	eorseq	r3, r0, r2, asr r1

080031a9 <_r11>:
 80031a9:	00313152 	eorseq	r3, r1, r2, asr r1

080031ad <_r12>:
 80031ad:	00323152 	eorseq	r3, r2, r2, asr r1

080031b1 <_PSP>:
 80031b1:	00505350 	subseq	r5, r0, r0, asr r3
 80031b5:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000

080031b8 <_HardFault_Handler>:

    .global _HardFault_Handler
  	.type 	_HardFault_Handler, %function
_HardFault_Handler:

	PUSH	{r0, lr}
 80031b8:	b501      	push	{r0, lr}
	BL    	_Print_Reg
 80031ba:	f7ff ffb4 	bl	8003126 <_Print_Reg>
	ADD   	r0, sp, #8
 80031be:	a802      	add	r0, sp, #8
	LDR   	r1, [sp, #4]
 80031c0:	9901      	ldr	r1, [sp, #4]
	MRS   	r2, psp
 80031c2:	f3ef 8209 	mrs	r2, PSP
	BL    	HardFault_Handler
 80031c6:	f005 fddf 	bl	8008d88 <HardFault_Handler>
	POP	 	{r0, pc}
 80031ca:	bd01      	pop	{r0, pc}
	.extern __RO_LIMIT__
	.extern __RW_BASE__
	.extern __ZI_BASE__
	.extern __ZI_LIMIT__

	ldr		r0, =__RO_LIMIT__
 80031cc:	08011078 	stmdaeq	r1, {r3, r4, r5, r6, ip}
	ldr		r1, =__RW_BASE__
 80031d0:	20000000 	andcs	r0, r0, r0
	ldr		r3, =__ZI_BASE__
 80031d4:	20000594 	mulcs	r0, r4, r5
	ldrlo	r2, [r0], #4
	strlo	r2, [r1], #4
	blo		1b

2:
	ldr		r1, =__ZI_LIMIT__
 80031d8:	2000074c 	andcs	r0, r0, ip, asr #14
	.equ PSP_BASE,	(MSP_LIMIT)
	.equ MSP_BASE,	(RAM_END + 1)
	.equ MSP_SIZE,	(1*1024)
	.equ MSP_LIMIT,	(MSP_BASE - MSP_SIZE)

	ldr		r0, =PSP_BASE
 80031dc:	20004c00 	andcs	r4, r0, r0, lsl #24
	msr		psp, r0
	ldr		r0, =(0x1<<1)|(0x0<<0)
 80031e0:	00000002 	andeq	r0, r0, r2
    MRS     r1, PSR
    PUSH    {r0, r1}

    MOV     r6, #14
    MOV     r4, #4
    LDR     r5, =_PSR
 80031e4:	08003179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, ip, sp}
_loop:
    LDR     r0, =fmt
 80031e8:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}

080031ec <Clock_Init>:
#include "device_driver.h"

void Clock_Init(void)
{
	RCC->CR = 0x1;
 80031ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

	RCC->APB2ENR |= (1<<2);
 80031f8:	699a      	ldr	r2, [r3, #24]

	Macro_Set_Bit(RCC->CR, 16);
	while(!Macro_Check_Bit_Set(RCC->CR, 17));
 80031fa:	4619      	mov	r1, r3

void Clock_Init(void)
{
	RCC->CR = 0x1;

	RCC->APB2ENR |= (1<<2);
 80031fc:	f042 0204 	orr.w	r2, r2, #4
 8003200:	619a      	str	r2, [r3, #24]

	Macro_Set_Bit(RCC->CR, 16);
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003208:	601a      	str	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 17));
 800320a:	680a      	ldr	r2, [r1, #0]
 800320c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003210:	0390      	lsls	r0, r2, #14
 8003212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003216:	d5f8      	bpl.n	800320a <Clock_Init+0x1e>

	RCC->CFGR = ((9-2)<<18)|(0<<17)|(1<<16)|(0<<11)|(4<<8)|(0<<4)|(0<<0);
 8003218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800321c:	f2c0 021d 	movt	r2, #29
 8003220:	605a      	str	r2, [r3, #4]

	Macro_Set_Bit(RCC->CR, 24);
 8003222:	681a      	ldr	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 25));
 8003224:	4619      	mov	r1, r3
	Macro_Set_Bit(RCC->CR, 16);
	while(!Macro_Check_Bit_Set(RCC->CR, 17));

	RCC->CFGR = ((9-2)<<18)|(0<<17)|(1<<16)|(0<<11)|(4<<8)|(0<<4)|(0<<0);

	Macro_Set_Bit(RCC->CR, 24);
 8003226:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800322a:	601a      	str	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 25));
 800322c:	680a      	ldr	r2, [r1, #0]
 800322e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003232:	0192      	lsls	r2, r2, #6
 8003234:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003238:	d5f8      	bpl.n	800322c <Clock_Init+0x40>

	Macro_Write_Block(FLASH->ACR, 0x3, 0x2, 0);
 800323a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800323e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	f021 0103 	bic.w	r1, r1, #3
 8003248:	f041 0102 	orr.w	r1, r1, #2
 800324c:	6011      	str	r1, [r2, #0]
	Macro_Write_Block(RCC->CFGR, 0x3, 0x2, 0);
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	f022 0203 	bic.w	r2, r2, #3
 8003254:	f042 0202 	orr.w	r2, r2, #2
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	4770      	bx	lr

0800325c <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
 800325c:	f3ef 8009 	mrs	r0, PSP
 8003260:	4600      	mov	r0, r0
 8003262:	4770      	bx	lr

08003264 <__set_PSP>:
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
 8003264:	f380 8809 	msr	PSP, r0
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
 800326c:	f3ef 8008 	mrs	r0, MSP
 8003270:	4600      	mov	r0, r0
 8003272:	4770      	bx	lr

08003274 <__set_MSP>:
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
 8003274:	f380 8808 	msr	MSP, r0
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800327c:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  return(result);
}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop

08003284 <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 8003284:	f380 8811 	msr	BASEPRI, r0
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800328c:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop

08003294 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 8003294:	f380 8810 	msr	PRIMASK, r0
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 800329c:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 80032a4:	f380 8813 	msr	FAULTMASK, r0
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop

080032ac <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80032ac:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 80032b4:	f380 8814 	msr	CONTROL, r0
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop

080032bc <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	ba00      	rev	r0, r0
  return(result);
}
 80032be:	4770      	bx	lr

080032c0 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	ba40      	rev16	r0, r0
  return(result);
}
 80032c2:	4770      	bx	lr

080032c4 <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	bac0      	revsh	r0, r0
  return(result);
}
 80032c6:	4770      	bx	lr

080032c8 <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 80032d0:	e8d0 0f4f 	ldrexb	r0, [r0]
   return(result);
}
 80032d4:	b2c0      	uxtb	r0, r0
 80032d6:	4770      	bx	lr

080032d8 <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 80032d8:	e8d0 0f5f 	ldrexh	r0, [r0]
   return(result);
}
 80032dc:	b280      	uxth	r0, r0
 80032de:	4770      	bx	lr

080032e0 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 80032e0:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 80032e8:	e8c1 0f43 	strexb	r3, r0, [r1]
 80032ec:	4618      	mov	r0, r3
   return(result);
}
 80032ee:	4770      	bx	lr

080032f0 <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 80032f0:	e8c1 0f53 	strexh	r3, r0, [r1]
 80032f4:	4618      	mov	r0, r3
   return(result);
}
 80032f6:	4770      	bx	lr

080032f8 <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 80032f8:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <Lcd_Eng_Putch>:

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 8003304:	f64f 2468 	movw	r4, #64104	; 0xfa68
 8003308:	f6c0 0400 	movt	r4, #2048	; 0x800

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 800330c:	b093      	sub	sp, #76	; 0x4c
 800330e:	4680      	mov	r8, r0
 8003310:	4689      	mov	r9, r1
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	6861      	ldr	r1, [r4, #4]
 8003316:	ae08      	add	r6, sp, #32
 8003318:	c603      	stmia	r6!, {r0, r1}

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 800331a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800331c:	4694      	mov	ip, r2
 800331e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8003322:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8003326:	469a      	mov	sl, r3
 8003328:	6869      	ldr	r1, [r5, #4]
 800332a:	68aa      	ldr	r2, [r5, #8]
 800332c:	68eb      	ldr	r3, [r5, #12]
 800332e:	ac0a      	add	r4, sp, #40	; 0x28
 8003330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003332:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8003334:	6928      	ldr	r0, [r5, #16]
 8003336:	6969      	ldr	r1, [r5, #20]
 8003338:	69aa      	ldr	r2, [r5, #24]
 800333a:	69eb      	ldr	r3, [r5, #28]
 800333c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800333e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003340:	1e78      	subs	r0, r7, #1
 8003342:	4242      	negs	r2, r0
 8003344:	4142      	adcs	r2, r0
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003346:	1ebc      	subs	r4, r7, #2
 8003348:	4267      	negs	r7, r4
 800334a:	4167      	adcs	r7, r4
 800334c:	1e75      	subs	r5, r6, #1
 800334e:	4269      	negs	r1, r5
 8003350:	4169      	adcs	r1, r5
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003352:	3e02      	subs	r6, #2
 8003354:	4273      	negs	r3, r6
 8003356:	4173      	adcs	r3, r6
 8003358:	fa1f f989 	uxth.w	r9, r9
 800335c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003360:	fa1f f888 	uxth.w	r8, r8
 8003364:	ea02 0601 	and.w	r6, r2, r1
 8003368:	401a      	ands	r2, r3
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 800336a:	403b      	ands	r3, r7
 800336c:	f8cd 800c 	str.w	r8, [sp, #12]
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003370:	4039      	ands	r1, r7
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003372:	9306      	str	r3, [sp, #24]
 8003374:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003378:	2300      	movs	r3, #0
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 800337a:	fa1f fa8a 	uxth.w	sl, sl
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 800337e:	fa1f f98c 	uxth.w	r9, ip
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003382:	9101      	str	r1, [sp, #4]
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003384:	9204      	str	r2, [sp, #16]
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003386:	9302      	str	r3, [sp, #8]
 8003388:	9a02      	ldr	r2, [sp, #8]
 800338a:	9f07      	ldr	r7, [sp, #28]
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 800338c:	f108 0301 	add.w	r3, r8, #1
 8003390:	b29b      	uxth	r3, r3
 8003392:	4417      	add	r7, r2
 8003394:	b2bf      	uxth	r7, r7
 8003396:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800339a:	9305      	str	r3, [sp, #20]
 800339c:	ab0a      	add	r3, sp, #40	; 0x28
 800339e:	5c9d      	ldrb	r5, [r3, r2]
 80033a0:	463b      	mov	r3, r7
 80033a2:	2400      	movs	r4, #0
 80033a4:	465f      	mov	r7, fp
 80033a6:	469b      	mov	fp, r3
 80033a8:	e010      	b.n	80033cc <Lcd_Eng_Putch+0xcc>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d152      	bne.n	8003454 <Lcd_Eng_Putch+0x154>
				else if( (zx==2)&&(zy==1) )
 80033ae:	9b01      	ldr	r3, [sp, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d157      	bne.n	8003464 <Lcd_Eng_Putch+0x164>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80033b4:	9b04      	ldr	r3, [sp, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d177      	bne.n	80034aa <Lcd_Eng_Putch+0x1aa>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80033ba:	9b06      	ldr	r3, [sp, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8088 	bne.w	80034d2 <Lcd_Eng_Putch+0x1d2>
 80033c2:	3401      	adds	r4, #1
 80033c4:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 80033c6:	2c08      	cmp	r4, #8
 80033c8:	b29f      	uxth	r7, r3
 80033ca:	d02f      	beq.n	800342c <Lcd_Eng_Putch+0x12c>
		{
			if(temp[ys]&bitmask[xs])
 80033cc:	ab08      	add	r3, sp, #32
 80033ce:	5d1a      	ldrb	r2, [r3, r4]
 80033d0:	4215      	tst	r5, r2
 80033d2:	d1ea      	bne.n	80033aa <Lcd_Eng_Putch+0xaa>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80033d4:	2e00      	cmp	r6, #0
 80033d6:	d135      	bne.n	8003444 <Lcd_Eng_Putch+0x144>
				else if( (zx==2)&&(zy==1) )
 80033d8:	9b01      	ldr	r3, [sp, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d14e      	bne.n	800347c <Lcd_Eng_Putch+0x17c>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 80033de:	9b04      	ldr	r3, [sp, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <Lcd_Eng_Putch+0x194>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 80033e4:	9b06      	ldr	r3, [sp, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0eb      	beq.n	80033c2 <Lcd_Eng_Putch+0xc2>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 80033ea:	4638      	mov	r0, r7
 80033ec:	9905      	ldr	r1, [sp, #20]
 80033ee:	4652      	mov	r2, sl
 80033f0:	f003 fb08 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 80033f4:	f107 0c01 	add.w	ip, r7, #1
 80033f8:	fa1f fc8c 	uxth.w	ip, ip
 80033fc:	4660      	mov	r0, ip
 80033fe:	4641      	mov	r1, r8
 8003400:	4652      	mov	r2, sl
 8003402:	f8cd c000 	str.w	ip, [sp]
 8003406:	f003 fafd 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 800340a:	4638      	mov	r0, r7
 800340c:	4641      	mov	r1, r8
 800340e:	4652      	mov	r2, sl
 8003410:	f003 faf8 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 8003414:	f8dd c000 	ldr.w	ip, [sp]
 8003418:	9905      	ldr	r1, [sp, #20]
 800341a:	4660      	mov	r0, ip
 800341c:	4652      	mov	r2, sl
 800341e:	3401      	adds	r4, #1
 8003420:	f003 faf0 	bl	8006a04 <Lcd_Put_Pixel>
 8003424:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 8003426:	2c08      	cmp	r4, #8
 8003428:	b29f      	uxth	r7, r3
 800342a:	d1cf      	bne.n	80033cc <Lcd_Eng_Putch+0xcc>
 800342c:	9b02      	ldr	r3, [sp, #8]
 800342e:	f108 0802 	add.w	r8, r8, #2
 8003432:	3301      	adds	r3, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 8003434:	2b10      	cmp	r3, #16
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	fa1f f888 	uxth.w	r8, r8
 800343c:	d1a4      	bne.n	8003388 <Lcd_Eng_Putch+0x88>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
				}   	
			}
		}
	}
}
 800343e:	b013      	add	sp, #76	; 0x4c
 8003440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	9803      	ldr	r0, [sp, #12]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 8003446:	4659      	mov	r1, fp
 8003448:	4420      	add	r0, r4
 800344a:	b280      	uxth	r0, r0
 800344c:	4652      	mov	r2, sl
 800344e:	f003 fad9 	bl	8006a04 <Lcd_Put_Pixel>
 8003452:	e7b6      	b.n	80033c2 <Lcd_Eng_Putch+0xc2>
 8003454:	9803      	ldr	r0, [sp, #12]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 8003456:	4659      	mov	r1, fp
 8003458:	4420      	add	r0, r4
 800345a:	b280      	uxth	r0, r0
 800345c:	464a      	mov	r2, r9
 800345e:	f003 fad1 	bl	8006a04 <Lcd_Put_Pixel>
 8003462:	e7ae      	b.n	80033c2 <Lcd_Eng_Putch+0xc2>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 8003464:	4638      	mov	r0, r7
 8003466:	4659      	mov	r1, fp
 8003468:	464a      	mov	r2, r9
 800346a:	f003 facb 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 800346e:	1c78      	adds	r0, r7, #1
 8003470:	b280      	uxth	r0, r0
 8003472:	4659      	mov	r1, fp
 8003474:	464a      	mov	r2, r9
 8003476:	f003 fac5 	bl	8006a04 <Lcd_Put_Pixel>
 800347a:	e7a2      	b.n	80033c2 <Lcd_Eng_Putch+0xc2>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 800347c:	4638      	mov	r0, r7
 800347e:	4659      	mov	r1, fp
 8003480:	4652      	mov	r2, sl
 8003482:	f003 fabf 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 8003486:	1c78      	adds	r0, r7, #1
 8003488:	b280      	uxth	r0, r0
 800348a:	4659      	mov	r1, fp
 800348c:	4652      	mov	r2, sl
 800348e:	f003 fab9 	bl	8006a04 <Lcd_Put_Pixel>
 8003492:	e796      	b.n	80033c2 <Lcd_Eng_Putch+0xc2>
 8003494:	f8dd c00c 	ldr.w	ip, [sp, #12]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 8003498:	4641      	mov	r1, r8
 800349a:	44a4      	add	ip, r4
 800349c:	fa1f fc8c 	uxth.w	ip, ip
 80034a0:	4660      	mov	r0, ip
 80034a2:	4652      	mov	r2, sl
 80034a4:	f8cd c000 	str.w	ip, [sp]
 80034a8:	e7b2      	b.n	8003410 <Lcd_Eng_Putch+0x110>
 80034aa:	f8dd c00c 	ldr.w	ip, [sp, #12]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 80034ae:	4641      	mov	r1, r8
 80034b0:	44a4      	add	ip, r4
 80034b2:	fa1f fc8c 	uxth.w	ip, ip
 80034b6:	4660      	mov	r0, ip
 80034b8:	464a      	mov	r2, r9
 80034ba:	f8cd c000 	str.w	ip, [sp]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80034be:	f003 faa1 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 80034c2:	f8dd c000 	ldr.w	ip, [sp]
 80034c6:	9905      	ldr	r1, [sp, #20]
 80034c8:	4660      	mov	r0, ip
 80034ca:	464a      	mov	r2, r9
 80034cc:	f003 fa9a 	bl	8006a04 <Lcd_Put_Pixel>
 80034d0:	e777      	b.n	80033c2 <Lcd_Eng_Putch+0xc2>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 80034d2:	4638      	mov	r0, r7
 80034d4:	9905      	ldr	r1, [sp, #20]
 80034d6:	464a      	mov	r2, r9
 80034d8:	f003 fa94 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 80034dc:	f107 0c01 	add.w	ip, r7, #1
 80034e0:	fa1f fc8c 	uxth.w	ip, ip
 80034e4:	4660      	mov	r0, ip
 80034e6:	4641      	mov	r1, r8
 80034e8:	464a      	mov	r2, r9
 80034ea:	f8cd c000 	str.w	ip, [sp]
 80034ee:	f003 fa89 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80034f2:	4638      	mov	r0, r7
 80034f4:	4641      	mov	r1, r8
 80034f6:	464a      	mov	r2, r9
 80034f8:	e7e1      	b.n	80034be <Lcd_Eng_Putch+0x1be>
 80034fa:	bf00      	nop

080034fc <Lcd_Puts>:
		}
	}
}

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
 80034fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003500:	b097      	sub	sp, #92	; 0x5c
 8003502:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8003504:	9009      	str	r0, [sp, #36]	; 0x24
     unsigned data;
   
     while(*str)
 8003506:	7825      	ldrb	r5, [r4, #0]
		}
	}
}

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
 8003508:	9821      	ldr	r0, [sp, #132]	; 0x84
 800350a:	9f22      	ldr	r7, [sp, #136]	; 0x88
     unsigned data;
   
     while(*str)
 800350c:	2d00      	cmp	r5, #0
 800350e:	f000 80ad 	beq.w	800366c <Lcd_Puts+0x170>
 8003512:	f1b0 0901 	subs.w	r9, r0, #1
 8003516:	f1d9 0b00 	rsbs	fp, r9, #0
 800351a:	eb5b 0b09 	adcs.w	fp, fp, r9
 800351e:	f1b7 0a01 	subs.w	sl, r7, #1
 8003522:	f1da 0800 	rsbs	r8, sl, #0
 8003526:	eb58 080a 	adcs.w	r8, r8, sl
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800352a:	1ebe      	subs	r6, r7, #2
 800352c:	4277      	negs	r7, r6
 800352e:	4177      	adcs	r7, r6
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003530:	f1b0 0902 	subs.w	r9, r0, #2
 8003534:	f1d9 0c00 	rsbs	ip, r9, #0
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 8003538:	fa1f fa82 	uxth.w	sl, r2
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800353c:	ea0b 0207 	and.w	r2, fp, r7
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003540:	eb5c 0c09 	adcs.w	ip, ip, r9
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003544:	9204      	str	r2, [sp, #16]
 8003546:	f64f 2268 	movw	r2, #64104	; 0xfa68
 800354a:	b289      	uxth	r1, r1
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 800354c:	fa1f f983 	uxth.w	r9, r3
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003550:	ea0c 0707 	and.w	r7, ip, r7
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003554:	ea0c 0308 	and.w	r3, ip, r8
 8003558:	00c0      	lsls	r0, r0, #3
 800355a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800355e:	940a      	str	r4, [sp, #40]	; 0x28
 8003560:	9107      	str	r1, [sp, #28]
 8003562:	ea0b 0608 	and.w	r6, fp, r8
 8003566:	9301      	str	r3, [sp, #4]
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003568:	9706      	str	r7, [sp, #24]
 800356a:	900b      	str	r0, [sp, #44]	; 0x2c
 800356c:	9208      	str	r2, [sp, #32]
void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 800356e:	9b08      	ldr	r3, [sp, #32]
 8003570:	ac0e      	add	r4, sp, #56	; 0x38
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 800357a:	ab0c      	add	r3, sp, #48	; 0x30
 800357c:	c303      	stmia	r3!, {r0, r1}
 800357e:	f855 0f08 	ldr.w	r0, [r5, #8]!
 8003582:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003586:	6869      	ldr	r1, [r5, #4]
 8003588:	68aa      	ldr	r2, [r5, #8]
 800358a:	68eb      	ldr	r3, [r5, #12]
 800358c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800358e:	69eb      	ldr	r3, [r5, #28]
 8003590:	6928      	ldr	r0, [r5, #16]
 8003592:	6969      	ldr	r1, [r5, #20]
 8003594:	69aa      	ldr	r2, [r5, #24]
 8003596:	2500      	movs	r5, #0
 8003598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359c:	9502      	str	r5, [sp, #8]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	9303      	str	r3, [sp, #12]
 80035a2:	9f07      	ldr	r7, [sp, #28]
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 80035a4:	f108 0301 	add.w	r3, r8, #1
 80035a8:	442f      	add	r7, r5
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b2bf      	uxth	r7, r7
 80035ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80035b2:	9305      	str	r3, [sp, #20]
 80035b4:	aa0e      	add	r2, sp, #56	; 0x38
 80035b6:	463b      	mov	r3, r7
 80035b8:	5d55      	ldrb	r5, [r2, r5]
 80035ba:	465f      	mov	r7, fp
 80035bc:	2400      	movs	r4, #0
 80035be:	469b      	mov	fp, r3
 80035c0:	e011      	b.n	80035e6 <Lcd_Puts+0xea>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80035c2:	2e00      	cmp	r6, #0
 80035c4:	d15d      	bne.n	8003682 <Lcd_Puts+0x186>
				else if( (zx==2)&&(zy==1) )
 80035c6:	9a01      	ldr	r2, [sp, #4]
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	d162      	bne.n	8003692 <Lcd_Puts+0x196>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80035cc:	9b04      	ldr	r3, [sp, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 8082 	bne.w	80036d8 <Lcd_Puts+0x1dc>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80035d4:	9a06      	ldr	r2, [sp, #24]
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	f040 8092 	bne.w	8003700 <Lcd_Puts+0x204>
 80035dc:	3401      	adds	r4, #1
 80035de:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 80035e0:	2c08      	cmp	r4, #8
 80035e2:	b29f      	uxth	r7, r3
 80035e4:	d02f      	beq.n	8003646 <Lcd_Puts+0x14a>
		{
			if(temp[ys]&bitmask[xs])
 80035e6:	ab0c      	add	r3, sp, #48	; 0x30
 80035e8:	5d1a      	ldrb	r2, [r3, r4]
 80035ea:	4215      	tst	r5, r2
 80035ec:	d1e9      	bne.n	80035c2 <Lcd_Puts+0xc6>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80035ee:	2e00      	cmp	r6, #0
 80035f0:	d13f      	bne.n	8003672 <Lcd_Puts+0x176>
				else if( (zx==2)&&(zy==1) )
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d158      	bne.n	80036aa <Lcd_Puts+0x1ae>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 80035f8:	9a04      	ldr	r2, [sp, #16]
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d161      	bne.n	80036c2 <Lcd_Puts+0x1c6>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 80035fe:	9b06      	ldr	r3, [sp, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0eb      	beq.n	80035dc <Lcd_Puts+0xe0>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003604:	4638      	mov	r0, r7
 8003606:	9905      	ldr	r1, [sp, #20]
 8003608:	464a      	mov	r2, r9
 800360a:	f003 f9fb 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 800360e:	f107 0c01 	add.w	ip, r7, #1
 8003612:	fa1f fc8c 	uxth.w	ip, ip
 8003616:	4660      	mov	r0, ip
 8003618:	4641      	mov	r1, r8
 800361a:	464a      	mov	r2, r9
 800361c:	f8cd c000 	str.w	ip, [sp]
 8003620:	f003 f9f0 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 8003624:	4638      	mov	r0, r7
 8003626:	4641      	mov	r1, r8
 8003628:	464a      	mov	r2, r9
 800362a:	f003 f9eb 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 800362e:	f8dd c000 	ldr.w	ip, [sp]
 8003632:	9905      	ldr	r1, [sp, #20]
 8003634:	4660      	mov	r0, ip
 8003636:	464a      	mov	r2, r9
 8003638:	3401      	adds	r4, #1
 800363a:	f003 f9e3 	bl	8006a04 <Lcd_Put_Pixel>
 800363e:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 8003640:	2c08      	cmp	r4, #8
 8003642:	b29f      	uxth	r7, r3
 8003644:	d1cf      	bne.n	80035e6 <Lcd_Puts+0xea>
 8003646:	9d02      	ldr	r5, [sp, #8]
 8003648:	f108 0802 	add.w	r8, r8, #2
 800364c:	3501      	adds	r5, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 800364e:	2d10      	cmp	r5, #16
 8003650:	9502      	str	r5, [sp, #8]
 8003652:	fa1f f888 	uxth.w	r8, r8
 8003656:	d1a4      	bne.n	80035a2 <Lcd_Puts+0xa6>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 800365a:	9a09      	ldr	r2, [sp, #36]	; 0x24

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 800365c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8003660:	930a      	str	r3, [sp, #40]	; 0x28
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 8003662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003664:	441a      	add	r2, r3
 8003666:	9209      	str	r2, [sp, #36]	; 0x24

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003668:	2d00      	cmp	r5, #0
 800366a:	d180      	bne.n	800356e <Lcd_Puts+0x72>
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
     } 
} 
 800366c:	b017      	add	sp, #92	; 0x5c
 800366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003672:	9803      	ldr	r0, [sp, #12]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 8003674:	4659      	mov	r1, fp
 8003676:	4420      	add	r0, r4
 8003678:	b280      	uxth	r0, r0
 800367a:	464a      	mov	r2, r9
 800367c:	f003 f9c2 	bl	8006a04 <Lcd_Put_Pixel>
 8003680:	e7ac      	b.n	80035dc <Lcd_Puts+0xe0>
 8003682:	9803      	ldr	r0, [sp, #12]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 8003684:	4659      	mov	r1, fp
 8003686:	4420      	add	r0, r4
 8003688:	b280      	uxth	r0, r0
 800368a:	4652      	mov	r2, sl
 800368c:	f003 f9ba 	bl	8006a04 <Lcd_Put_Pixel>
 8003690:	e7a4      	b.n	80035dc <Lcd_Puts+0xe0>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 8003692:	4638      	mov	r0, r7
 8003694:	4659      	mov	r1, fp
 8003696:	4652      	mov	r2, sl
 8003698:	f003 f9b4 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 800369c:	1c78      	adds	r0, r7, #1
 800369e:	b280      	uxth	r0, r0
 80036a0:	4659      	mov	r1, fp
 80036a2:	4652      	mov	r2, sl
 80036a4:	f003 f9ae 	bl	8006a04 <Lcd_Put_Pixel>
 80036a8:	e798      	b.n	80035dc <Lcd_Puts+0xe0>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 80036aa:	4638      	mov	r0, r7
 80036ac:	4659      	mov	r1, fp
 80036ae:	464a      	mov	r2, r9
 80036b0:	f003 f9a8 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 80036b4:	1c78      	adds	r0, r7, #1
 80036b6:	b280      	uxth	r0, r0
 80036b8:	4659      	mov	r1, fp
 80036ba:	464a      	mov	r2, r9
 80036bc:	f003 f9a2 	bl	8006a04 <Lcd_Put_Pixel>
 80036c0:	e78c      	b.n	80035dc <Lcd_Puts+0xe0>
 80036c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 80036c6:	4641      	mov	r1, r8
 80036c8:	44a4      	add	ip, r4
 80036ca:	fa1f fc8c 	uxth.w	ip, ip
 80036ce:	4660      	mov	r0, ip
 80036d0:	464a      	mov	r2, r9
 80036d2:	f8cd c000 	str.w	ip, [sp]
 80036d6:	e7a8      	b.n	800362a <Lcd_Puts+0x12e>
 80036d8:	f8dd c00c 	ldr.w	ip, [sp, #12]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 80036dc:	4641      	mov	r1, r8
 80036de:	44a4      	add	ip, r4
 80036e0:	fa1f fc8c 	uxth.w	ip, ip
 80036e4:	4660      	mov	r0, ip
 80036e6:	4652      	mov	r2, sl
 80036e8:	f8cd c000 	str.w	ip, [sp]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80036ec:	f003 f98a 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 80036f0:	f8dd c000 	ldr.w	ip, [sp]
 80036f4:	9905      	ldr	r1, [sp, #20]
 80036f6:	4660      	mov	r0, ip
 80036f8:	4652      	mov	r2, sl
 80036fa:	f003 f983 	bl	8006a04 <Lcd_Put_Pixel>
 80036fe:	e76d      	b.n	80035dc <Lcd_Puts+0xe0>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 8003700:	4638      	mov	r0, r7
 8003702:	9905      	ldr	r1, [sp, #20]
 8003704:	4652      	mov	r2, sl
 8003706:	f003 f97d 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 800370a:	f107 0c01 	add.w	ip, r7, #1
 800370e:	fa1f fc8c 	uxth.w	ip, ip
 8003712:	4660      	mov	r0, ip
 8003714:	4641      	mov	r1, r8
 8003716:	4652      	mov	r2, sl
 8003718:	f8cd c000 	str.w	ip, [sp]
 800371c:	f003 f972 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 8003720:	4638      	mov	r0, r7
 8003722:	4641      	mov	r1, r8
 8003724:	4652      	mov	r2, sl
 8003726:	e7e1      	b.n	80036ec <Lcd_Puts+0x1f0>

08003728 <Lcd_Printf>:
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	b0db      	sub	sp, #364	; 0x16c
	va_list ap;
	char string[256];

	va_start(ap,fmt);
 800372e:	ac67      	add	r4, sp, #412	; 0x19c
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 8003730:	900b      	str	r0, [sp, #44]	; 0x2c
 8003732:	4689      	mov	r9, r1
 8003734:	4690      	mov	r8, r2
	va_list ap;
	char string[256];

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
 8003736:	a81a      	add	r0, sp, #104	; 0x68
 8003738:	4622      	mov	r2, r4
 800373a:	9966      	ldr	r1, [sp, #408]	; 0x198
void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
	va_list ap;
	char string[256];

	va_start(ap,fmt);
 800373c:	940f      	str	r4, [sp, #60]	; 0x3c
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 800373e:	469a      	mov	sl, r3
 8003740:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8003744:	9c65      	ldr	r4, [sp, #404]	; 0x194
	va_list ap;
	char string[256];

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
 8003746:	f006 f959 	bl	80099fc <vsprintf>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 800374a:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 800374e:	2d00      	cmp	r5, #0
 8003750:	f000 80b5 	beq.w	80038be <Lcd_Printf+0x196>
 8003754:	f1bb 0301 	subs.w	r3, fp, #1
 8003758:	f1d3 0c00 	rsbs	ip, r3, #0
 800375c:	eb5c 0c03 	adcs.w	ip, ip, r3
 8003760:	1e62      	subs	r2, r4, #1
 8003762:	4257      	negs	r7, r2
 8003764:	4157      	adcs	r7, r2
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003766:	1ea1      	subs	r1, r4, #2
 8003768:	4248      	negs	r0, r1
 800376a:	4148      	adcs	r0, r1
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 800376c:	f1bb 0602 	subs.w	r6, fp, #2
 8003770:	4274      	negs	r4, r6
 8003772:	ab1a      	add	r3, sp, #104	; 0x68
 8003774:	4174      	adcs	r4, r6
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003776:	fa1f fa8a 	uxth.w	sl, sl
 800377a:	930c      	str	r3, [sp, #48]	; 0x30
 800377c:	f64f 2368 	movw	r3, #64104	; 0xfa68
 8003780:	fa1f f989 	uxth.w	r9, r9
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003784:	ea0c 0200 	and.w	r2, ip, r0
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003788:	f8cd a00c 	str.w	sl, [sp, #12]
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 800378c:	4020      	ands	r0, r4
 800378e:	ea0c 0a07 	and.w	sl, ip, r7
 8003792:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003796:	4027      	ands	r7, r4
 8003798:	f6c0 0300 	movt	r3, #2048	; 0x800
 800379c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80037a0:	9702      	str	r7, [sp, #8]
 80037a2:	ae10      	add	r6, sp, #64	; 0x40
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 80037a4:	fa1f f988 	uxth.w	r9, r8
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80037a8:	9206      	str	r2, [sp, #24]
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80037aa:	9008      	str	r0, [sp, #32]
 80037ac:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80037b0:	930a      	str	r3, [sp, #40]	; 0x28
 80037b2:	4657      	mov	r7, sl
void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 80037b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037b6:	4633      	mov	r3, r6
 80037b8:	6810      	ldr	r0, [r2, #0]
 80037ba:	6851      	ldr	r1, [r2, #4]
 80037bc:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 80037c0:	c303      	stmia	r3!, {r0, r1}
 80037c2:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80037c6:	ac12      	add	r4, sp, #72	; 0x48
 80037c8:	6869      	ldr	r1, [r5, #4]
 80037ca:	68aa      	ldr	r2, [r5, #8]
 80037cc:	68eb      	ldr	r3, [r5, #12]
 80037ce:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80037d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d4:	69eb      	ldr	r3, [r5, #28]
 80037d6:	6928      	ldr	r0, [r5, #16]
 80037d8:	6969      	ldr	r1, [r5, #20]
 80037da:	69aa      	ldr	r2, [r5, #24]
 80037dc:	2500      	movs	r5, #0
 80037de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037e2:	9504      	str	r5, [sp, #16]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	9305      	str	r3, [sp, #20]
 80037e8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 80037ec:	f10a 0301 	add.w	r3, sl, #1
 80037f0:	44a8      	add	r8, r5
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	fa1f f888 	uxth.w	r8, r8
 80037f8:	f8dd b014 	ldr.w	fp, [sp, #20]
 80037fc:	9307      	str	r3, [sp, #28]
 80037fe:	aa12      	add	r2, sp, #72	; 0x48
 8003800:	4643      	mov	r3, r8
 8003802:	5d55      	ldrb	r5, [r2, r5]
 8003804:	46d8      	mov	r8, fp
 8003806:	2400      	movs	r4, #0
 8003808:	469b      	mov	fp, r3
 800380a:	e013      	b.n	8003834 <Lcd_Printf+0x10c>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 800380c:	2f00      	cmp	r7, #0
 800380e:	d161      	bne.n	80038d4 <Lcd_Printf+0x1ac>
				else if( (zx==2)&&(zy==1) )
 8003810:	9a02      	ldr	r2, [sp, #8]
 8003812:	2a00      	cmp	r2, #0
 8003814:	d166      	bne.n	80038e4 <Lcd_Printf+0x1bc>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003816:	9b06      	ldr	r3, [sp, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 8088 	bne.w	800392e <Lcd_Printf+0x206>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 800381e:	9a08      	ldr	r2, [sp, #32]
 8003820:	2a00      	cmp	r2, #0
 8003822:	f040 8098 	bne.w	8003956 <Lcd_Printf+0x22e>
 8003826:	3401      	adds	r4, #1
 8003828:	f108 0302 	add.w	r3, r8, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 800382c:	2c08      	cmp	r4, #8
 800382e:	fa1f f883 	uxth.w	r8, r3
 8003832:	d030      	beq.n	8003896 <Lcd_Printf+0x16e>
		{
			if(temp[ys]&bitmask[xs])
 8003834:	5d32      	ldrb	r2, [r6, r4]
 8003836:	4215      	tst	r5, r2
 8003838:	d1e8      	bne.n	800380c <Lcd_Printf+0xe4>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 800383a:	2f00      	cmp	r7, #0
 800383c:	d142      	bne.n	80038c4 <Lcd_Printf+0x19c>
				else if( (zx==2)&&(zy==1) )
 800383e:	9b02      	ldr	r3, [sp, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d15c      	bne.n	80038fe <Lcd_Printf+0x1d6>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 8003844:	9a06      	ldr	r2, [sp, #24]
 8003846:	2a00      	cmp	r2, #0
 8003848:	d166      	bne.n	8003918 <Lcd_Printf+0x1f0>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 800384a:	9b08      	ldr	r3, [sp, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ea      	beq.n	8003826 <Lcd_Printf+0xfe>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003850:	4640      	mov	r0, r8
 8003852:	9907      	ldr	r1, [sp, #28]
 8003854:	9a03      	ldr	r2, [sp, #12]
 8003856:	f003 f8d5 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 800385a:	f108 0c01 	add.w	ip, r8, #1
 800385e:	fa1f fc8c 	uxth.w	ip, ip
 8003862:	4660      	mov	r0, ip
 8003864:	4651      	mov	r1, sl
 8003866:	9a03      	ldr	r2, [sp, #12]
 8003868:	f8cd c004 	str.w	ip, [sp, #4]
 800386c:	f003 f8ca 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 8003870:	9a03      	ldr	r2, [sp, #12]
 8003872:	4640      	mov	r0, r8
 8003874:	4651      	mov	r1, sl
 8003876:	f003 f8c5 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 800387a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800387e:	9907      	ldr	r1, [sp, #28]
 8003880:	4660      	mov	r0, ip
 8003882:	9a03      	ldr	r2, [sp, #12]
 8003884:	3401      	adds	r4, #1
 8003886:	f003 f8bd 	bl	8006a04 <Lcd_Put_Pixel>
 800388a:	f108 0302 	add.w	r3, r8, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 800388e:	2c08      	cmp	r4, #8
 8003890:	fa1f f883 	uxth.w	r8, r3
 8003894:	d1ce      	bne.n	8003834 <Lcd_Printf+0x10c>
 8003896:	9d04      	ldr	r5, [sp, #16]
 8003898:	f10a 0a02 	add.w	sl, sl, #2
 800389c:	3501      	adds	r5, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 800389e:	2d10      	cmp	r5, #16
 80038a0:	9504      	str	r5, [sp, #16]
 80038a2:	fa1f fa8a 	uxth.w	sl, sl
 80038a6:	d19f      	bne.n	80037e8 <Lcd_Printf+0xc0>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 80038aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038ac:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80038b0:	930c      	str	r3, [sp, #48]	; 0x30
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 80038b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038b4:	441a      	add	r2, r3
 80038b6:	920b      	str	r2, [sp, #44]	; 0x2c

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038b8:	2d00      	cmp	r5, #0
 80038ba:	f47f af7b 	bne.w	80037b4 <Lcd_Printf+0x8c>

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
	Lcd_Puts(x, y, color, bkcolor, string, zx, zy);
	va_end(ap);
}
 80038be:	b05b      	add	sp, #364	; 0x16c
 80038c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c4:	9805      	ldr	r0, [sp, #20]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80038c6:	4659      	mov	r1, fp
 80038c8:	4420      	add	r0, r4
 80038ca:	b280      	uxth	r0, r0
 80038cc:	9a03      	ldr	r2, [sp, #12]
 80038ce:	f003 f899 	bl	8006a04 <Lcd_Put_Pixel>
 80038d2:	e7a8      	b.n	8003826 <Lcd_Printf+0xfe>
 80038d4:	9805      	ldr	r0, [sp, #20]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80038d6:	4659      	mov	r1, fp
 80038d8:	4420      	add	r0, r4
 80038da:	b280      	uxth	r0, r0
 80038dc:	464a      	mov	r2, r9
 80038de:	f003 f891 	bl	8006a04 <Lcd_Put_Pixel>
 80038e2:	e7a0      	b.n	8003826 <Lcd_Printf+0xfe>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 80038e4:	4640      	mov	r0, r8
 80038e6:	4659      	mov	r1, fp
 80038e8:	464a      	mov	r2, r9
 80038ea:	f003 f88b 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 80038ee:	f108 0001 	add.w	r0, r8, #1
 80038f2:	b280      	uxth	r0, r0
 80038f4:	4659      	mov	r1, fp
 80038f6:	464a      	mov	r2, r9
 80038f8:	f003 f884 	bl	8006a04 <Lcd_Put_Pixel>
 80038fc:	e793      	b.n	8003826 <Lcd_Printf+0xfe>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 80038fe:	4640      	mov	r0, r8
 8003900:	4659      	mov	r1, fp
 8003902:	9a03      	ldr	r2, [sp, #12]
 8003904:	f003 f87e 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 8003908:	f108 0001 	add.w	r0, r8, #1
 800390c:	b280      	uxth	r0, r0
 800390e:	4659      	mov	r1, fp
 8003910:	9a03      	ldr	r2, [sp, #12]
 8003912:	f003 f877 	bl	8006a04 <Lcd_Put_Pixel>
 8003916:	e786      	b.n	8003826 <Lcd_Printf+0xfe>
 8003918:	f8dd c014 	ldr.w	ip, [sp, #20]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 800391c:	4651      	mov	r1, sl
 800391e:	44a4      	add	ip, r4
 8003920:	fa1f fc8c 	uxth.w	ip, ip
 8003924:	4660      	mov	r0, ip
 8003926:	9a03      	ldr	r2, [sp, #12]
 8003928:	f8cd c004 	str.w	ip, [sp, #4]
 800392c:	e7a3      	b.n	8003876 <Lcd_Printf+0x14e>
 800392e:	f8dd c014 	ldr.w	ip, [sp, #20]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 8003932:	4651      	mov	r1, sl
 8003934:	44a4      	add	ip, r4
 8003936:	fa1f fc8c 	uxth.w	ip, ip
 800393a:	4660      	mov	r0, ip
 800393c:	464a      	mov	r2, r9
 800393e:	f8cd c004 	str.w	ip, [sp, #4]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 8003942:	f003 f85f 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 8003946:	f8dd c004 	ldr.w	ip, [sp, #4]
 800394a:	9907      	ldr	r1, [sp, #28]
 800394c:	4660      	mov	r0, ip
 800394e:	464a      	mov	r2, r9
 8003950:	f003 f858 	bl	8006a04 <Lcd_Put_Pixel>
 8003954:	e767      	b.n	8003826 <Lcd_Printf+0xfe>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 8003956:	4640      	mov	r0, r8
 8003958:	9907      	ldr	r1, [sp, #28]
 800395a:	464a      	mov	r2, r9
 800395c:	f003 f852 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 8003960:	f108 0c01 	add.w	ip, r8, #1
 8003964:	fa1f fc8c 	uxth.w	ip, ip
 8003968:	4660      	mov	r0, ip
 800396a:	4651      	mov	r1, sl
 800396c:	464a      	mov	r2, r9
 800396e:	f8cd c004 	str.w	ip, [sp, #4]
 8003972:	f003 f847 	bl	8006a04 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 8003976:	4640      	mov	r0, r8
 8003978:	4651      	mov	r1, sl
 800397a:	464a      	mov	r2, r9
 800397c:	e7e1      	b.n	8003942 <Lcd_Printf+0x21a>
 800397e:	bf00      	nop

08003980 <Jog_Poll_Init>:
// PB6
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
 8003980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003984:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003988:	6999      	ldr	r1, [r3, #24]
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 800398a:	2200      	movs	r2, #0
// PB6
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
 800398c:	f041 0101 	orr.w	r1, r1, #1
 8003990:	6199      	str	r1, [r3, #24]
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable
 8003992:	6999      	ldr	r1, [r3, #24]

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 8003994:	f2c4 0201 	movt	r2, #16385	; 0x4001
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable
 8003998:	f041 010c 	orr.w	r1, r1, #12
 800399c:	6199      	str	r1, [r3, #24]

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 800399e:	6851      	ldr	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 80039a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 80039a4:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80039a8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80039ac:	6051      	str	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 80039ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80039b2:	6819      	ldr	r1, [r3, #0]
	Macro_Set_Bit(GPIOB->ODR, 3);

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 80039b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 80039bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80039c0:	6019      	str	r1, [r3, #0]
	Macro_Set_Bit(GPIOB->ODR, 3);
 80039c2:	68d9      	ldr	r1, [r3, #12]

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
	Macro_Set_Bit(GPIOB->ODR, 3);
 80039c8:	f041 0108 	orr.w	r1, r1, #8
 80039cc:	60d9      	str	r1, [r3, #12]

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80039d4:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 80039d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80039dc:	6019      	str	r1, [r3, #0]
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);
 80039de:	68d9      	ldr	r1, [r3, #12]
 80039e0:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 80039e4:	60d9      	str	r1, [r3, #12]

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039e6:	6853      	ldr	r3, [r2, #4]
 80039e8:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80039ec:	f043 6308 	orr.w	r3, r3, #142606336	; 0x8800000
 80039f0:	6053      	str	r3, [r2, #4]
	Macro_Set_Area(GPIOA->ODR, 0x3, 13);
 80039f2:	68d3      	ldr	r3, [r2, #12]
 80039f4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80039f8:	60d3      	str	r3, [r2, #12]
 80039fa:	4770      	bx	lr

080039fc <Jog_Get_Pressed_Calm>:

	return key;
}

int Jog_Get_Pressed_Calm(void)
{
 80039fc:	b470      	push	{r4, r5, r6}
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 80039fe:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a02:	f44f 6600 	mov.w	r6, #2048	; 0x800
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a06:	f2c4 0201 	movt	r2, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a0a:	f2c4 0601 	movt	r6, #16385	; 0x4001
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a0e:	6893      	ldr	r3, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a10:	6890      	ldr	r0, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a12:	68b1      	ldr	r1, [r6, #8]
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a14:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a16:	43c9      	mvns	r1, r1
 8003a18:	f3c1 3141 	ubfx	r1, r1, #13, #2
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a1c:	f083 0308 	eor.w	r3, r3, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a20:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a24:	0109      	lsls	r1, r1, #4
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a26:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a2a:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a2e:	4318      	orrs	r0, r3
 8003a30:	f242 7310 	movw	r3, #10000	; 0x2710
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a34:	6894      	ldr	r4, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a36:	6891      	ldr	r1, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a38:	68b5      	ldr	r5, [r6, #8]
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a3a:	43c9      	mvns	r1, r1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a3c:	43ed      	mvns	r5, r5
 8003a3e:	f3c5 3541 	ubfx	r5, r5, #13, #2
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a42:	f084 0408 	eor.w	r4, r4, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a46:	f3c1 1142 	ubfx	r1, r1, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a4a:	012d      	lsls	r5, r5, #4
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a4c:	f3c4 04c0 	ubfx	r4, r4, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a50:	ea45 0141 	orr.w	r1, r5, r1, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a54:	4321      	orrs	r1, r4
	{
		k = Key_Check_Input();

		for(i=0; i<N; i++)
		{
			if(k != Key_Check_Input())
 8003a56:	4288      	cmp	r0, r1
 8003a58:	d1d9      	bne.n	8003a0e <Jog_Get_Pressed_Calm+0x12>

	for(;;)
	{
		k = Key_Check_Input();

		for(i=0; i<N; i++)
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	d1ea      	bne.n	8003a34 <Jog_Get_Pressed_Calm+0x38>

		if(i == N) break;
	}

	return k;
}
 8003a5e:	bc70      	pop	{r4, r5, r6}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop

08003a64 <Jog_Get_Pressed>:

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a68:	f44f 6200 	mov.w	r2, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a70:	f2c4 0201 	movt	r2, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a74:	6899      	ldr	r1, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a76:	6898      	ldr	r0, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a78:	6892      	ldr	r2, [r2, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a7a:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a7c:	43d2      	mvns	r2, r2
 8003a7e:	f3c2 3241 	ubfx	r2, r2, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a82:	f081 0308 	eor.w	r3, r1, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a86:	0112      	lsls	r2, r2, #4
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a88:	f3c0 1042 	ubfx	r0, r0, #5, #3

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a90:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
	return key;
}
 8003a94:	4318      	orrs	r0, r3
 8003a96:	4770      	bx	lr

08003a98 <Jog_Wait_Key_Pressed>:

int Jog_Wait_Key_Pressed(void)
{
 8003a98:	b410      	push	{r4}

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a9a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a9e:	f44f 6400 	mov.w	r4, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003aa2:	f2c4 0201 	movt	r2, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aa6:	f2c4 0401 	movt	r4, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003aaa:	6893      	ldr	r3, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003aac:	6890      	ldr	r0, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aae:	68a1      	ldr	r1, [r4, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ab0:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ab2:	43c9      	mvns	r1, r1
 8003ab4:	f3c1 3141 	ubfx	r1, r1, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ab8:	f083 0308 	eor.w	r3, r3, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003abc:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ac0:	0109      	lsls	r1, r1, #4

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ac2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ac6:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}

int Jog_Wait_Key_Pressed(void)
{
	int key = 0;
	while(!(key = Jog_Get_Pressed()));
 8003aca:	4318      	orrs	r0, r3
 8003acc:	d0ed      	beq.n	8003aaa <Jog_Wait_Key_Pressed+0x12>
	return key;
}
 8003ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <Jog_Wait_Key_Released>:

void Jog_Wait_Key_Released(void)
{
 8003ad4:	b410      	push	{r4}

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ada:	f44f 6400 	mov.w	r4, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ade:	f2c4 0301 	movt	r3, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ae2:	f2c4 0401 	movt	r4, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ae6:	689a      	ldr	r2, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ae8:	6898      	ldr	r0, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aea:	68a1      	ldr	r1, [r4, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003aec:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aee:	43c9      	mvns	r1, r1
 8003af0:	f3c1 3141 	ubfx	r1, r1, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003af4:	f082 0208 	eor.w	r2, r2, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003af8:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003afc:	0109      	lsls	r1, r1, #4

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003afe:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003b02:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	return key;
}

void Jog_Wait_Key_Released(void)
{
	while(Jog_Get_Pressed());
 8003b06:	430a      	orrs	r2, r1
 8003b08:	d1ed      	bne.n	8003ae6 <Jog_Wait_Key_Released+0x12>
}
 8003b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <Jog_ISR_Enable>:

void Jog_ISR_Enable(int en)
{
 8003b10:	b470      	push	{r4, r5, r6}
    if(en)
 8003b12:	b9f0      	cbnz	r0, 8003b52 <Jog_ISR_Enable+0x42>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003b14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003b18:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003b1c:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003b20:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b24:	f44f 7180 	mov.w	r1, #256	; 0x100
    else
    {
    	NVIC_EnableIRQ(EXTI3_IRQn);
    	NVIC_EnableIRQ(EXTI9_5_IRQn);
    	NVIC_EnableIRQ(EXTI15_10_IRQn);
    	Macro_Clear_Bit(RCC->APB2ENR,3);
 8003b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b2c:	6014      	str	r4, [r2, #0]
 8003b2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b32:	6010      	str	r0, [r2, #0]
 8003b34:	6051      	str	r1, [r2, #4]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	619a      	str	r2, [r3, #24]
		Macro_Clear_Bit(RCC->APB2ENR,2);
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	f022 0204 	bic.w	r2, r2, #4
 8003b44:	619a      	str	r2, [r3, #24]
		Macro_Clear_Bit(RCC->APB2ENR,0);
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	619a      	str	r2, [r3, #24]
    }
}
 8003b4e:	bc70      	pop	{r4, r5, r6}
 8003b50:	4770      	bx	lr

void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
 8003b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b5a:	6993      	ldr	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b5c:	2100      	movs	r1, #0

void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
 8003b5e:	f043 0308 	orr.w	r3, r3, #8
 8003b62:	6193      	str	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,2);
 8003b64:	6993      	ldr	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b66:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6193      	str	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,0);
 8003b70:	6990      	ldr	r0, [r2, #24]

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);
 8003b76:	f040 0001 	orr.w	r0, r0, #1
 8003b7a:	6190      	str	r0, [r2, #24]

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b7c:	688a      	ldr	r2, [r1, #8]
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003b7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b82:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8a:	608a      	str	r2, [r1, #8]
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
 8003b8c:	68c8      	ldr	r0, [r1, #12]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003b8e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003b92:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8003b96:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8003b9a:	f440 5088 	orr.w	r0, r0, #4352	; 0x1100
 8003b9e:	f040 0010 	orr.w	r0, r0, #16
 8003ba2:	60c8      	str	r0, [r1, #12]
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA
 8003ba4:	6948      	ldr	r0, [r1, #20]
 8003ba6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003baa:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
 8003bae:	6148      	str	r0, [r1, #20]

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003bb0:	68d9      	ldr	r1, [r3, #12]
 8003bb2:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003bb6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8003bba:	60d9      	str	r1, [r3, #12]
        Macro_Set_Area(EXTI->FTSR,0x7,5);
 8003bbc:	68d9      	ldr	r1, [r3, #12]
        Macro_Set_Bit(EXTI->FTSR,3);

        EXTI->PR = (0x1<<3)|(0x7<<5)|(0x3<<13);
 8003bbe:	f246 05e8 	movw	r5, #24808	; 0x60e8
        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
        Macro_Set_Area(EXTI->FTSR,0x7,5);
 8003bc2:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 8003bc6:	60d9      	str	r1, [r3, #12]
        Macro_Set_Bit(EXTI->FTSR,3);
 8003bc8:	68de      	ldr	r6, [r3, #12]
 8003bca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003bce:	f046 0608 	orr.w	r6, r6, #8
 8003bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd6:	60de      	str	r6, [r3, #12]

        EXTI->PR = (0x1<<3)|(0x7<<5)|(0x3<<13);
 8003bd8:	615d      	str	r5, [r3, #20]
 8003bda:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 8003bde:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 8003be2:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184

        NVIC_ClearPendingIRQ(EXTI3_IRQn);
        NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
        NVIC_ClearPendingIRQ(EXTI15_10_IRQn);

        Macro_Set_Area(EXTI->IMR,0x7,5);
 8003be6:	681d      	ldr	r5, [r3, #0]
 8003be8:	f045 05e0 	orr.w	r5, r5, #224	; 0xe0
 8003bec:	601d      	str	r5, [r3, #0]
        Macro_Set_Area(EXTI->IMR,0x3,13);
 8003bee:	681d      	ldr	r5, [r3, #0]
 8003bf0:	f445 45c0 	orr.w	r5, r5, #24576	; 0x6000
 8003bf4:	601d      	str	r5, [r3, #0]
        Macro_Set_Bit(EXTI->IMR,3);
 8003bf6:	681d      	ldr	r5, [r3, #0]
 8003bf8:	f045 0508 	orr.w	r5, r5, #8
 8003bfc:	601d      	str	r5, [r3, #0]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003bfe:	6014      	str	r4, [r2, #0]
 8003c00:	6010      	str	r0, [r2, #0]
 8003c02:	6051      	str	r1, [r2, #4]
    	NVIC_EnableIRQ(EXTI15_10_IRQn);
    	Macro_Clear_Bit(RCC->APB2ENR,3);
		Macro_Clear_Bit(RCC->APB2ENR,2);
		Macro_Clear_Bit(RCC->APB2ENR,0);
    }
}
 8003c04:	bc70      	pop	{r4, r5, r6}
 8003c06:	4770      	bx	lr

08003c08 <Key_Poll_Init>:
#include "device_driver.h"

void Key_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8003c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c10:	6999      	ldr	r1, [r3, #24]
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
 8003c12:	f44f 6240 	mov.w	r2, #3072	; 0xc00
#include "device_driver.h"

void Key_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8003c16:	f041 0108 	orr.w	r1, r1, #8
 8003c1a:	6199      	str	r1, [r3, #24]
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
 8003c1c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c20:	6811      	ldr	r1, [r2, #0]

	// GPIOA 클럭 Enable (이미 되어있다고 가정)
	GPIOA->CRH &= ~(0xF << (4*(13-8))); // PA13 clear
 8003c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
#include "device_driver.h"

void Key_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
 8003c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003c2a:	f041 4188 	orr.w	r1, r1, #1140850688	; 0x44000000
 8003c2e:	6011      	str	r1, [r2, #0]

	// GPIOA 클럭 Enable (이미 되어있다고 가정)
	GPIOA->CRH &= ~(0xF << (4*(13-8))); // PA13 clear
 8003c30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c3a:	605a      	str	r2, [r3, #4]
	GPIOA->CRH |=  (0x4 << (4*(13-8))); // PA13 Input floating
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c42:	605a      	str	r2, [r3, #4]

	GPIOA->CRH &= ~(0xF << (4*(14-8))); // PA14 clear
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c4a:	605a      	str	r2, [r3, #4]
	GPIOA->CRH |=  (0x4 << (4*(14-8))); // PA14 Input floating
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <Key_Get_Pressed>:

}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c60:	6898      	ldr	r0, [r3, #8]
 8003c62:	43c0      	mvns	r0, r0
}
 8003c64:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop

08003c6c <Key_Wait_Key_Released>:

}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c6c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003c70:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c74:	6893      	ldr	r3, [r2, #8]
 8003c76:	43db      	mvns	r3, r3
}

void Key_Wait_Key_Released(void)
{
	while(Key_Get_Pressed());
 8003c78:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8003c7c:	d1fa      	bne.n	8003c74 <Key_Wait_Key_Released+0x8>
}
 8003c7e:	4770      	bx	lr

08003c80 <Key_Wait_Key_Pressed>:

}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c88:	6898      	ldr	r0, [r3, #8]
 8003c8a:	43c0      	mvns	r0, r0
 8003c8c:	f3c0 1081 	ubfx	r0, r0, #6, #2
	int k;

	do
	{
		k = Key_Get_Pressed();
	}while(!k);
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d0f9      	beq.n	8003c88 <Key_Wait_Key_Pressed+0x8>

	return k;
}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <Key_ISR_Enable>:

void Key_ISR_Enable(int en)
{
 8003c98:	b410      	push	{r4}
	if(en)
 8003c9a:	b950      	cbnz	r0, 8003cb2 <Key_ISR_Enable+0x1a>
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003c9c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003ca0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003ca4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	else
	{
		NVIC_DisableIRQ((IRQn_Type)23);
	}
}
 8003cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb0:	4770      	bx	lr

void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
 8003cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cba:	699a      	ldr	r2, [r3, #24]
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003cbc:	f44f 6140 	mov.w	r1, #3072	; 0xc00

void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
 8003cc0:	f042 0208 	orr.w	r2, r2, #8
 8003cc4:	619a      	str	r2, [r3, #24]
		Macro_Set_Bit(RCC->APB2ENR,0);
 8003cc6:	699a      	ldr	r2, [r3, #24]

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003cc8:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);
 8003ccc:	f042 0201 	orr.w	r2, r2, #1
 8003cd0:	619a      	str	r2, [r3, #24]

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003cd2:	680b      	ldr	r3, [r1, #0]
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003cd4:	2200      	movs	r2, #0
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003cd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cda:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8003cde:	600b      	str	r3, [r1, #0]
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003ce0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003ce4:	68d1      	ldr	r1, [r2, #12]
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003cea:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8003cee:	f441 5188 	orr.w	r1, r1, #4352	; 0x1100
 8003cf2:	60d1      	str	r1, [r2, #12]
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003cf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cf8:	68d9      	ldr	r1, [r3, #12]
		Macro_Write_Block(EXTI->IMR,0x3,0x3,6);

		EXTI->PR = (0x3<<6);
 8003cfa:	20c0      	movs	r0, #192	; 0xc0
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003cfc:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003d00:	60d9      	str	r1, [r3, #12]
		Macro_Write_Block(EXTI->IMR,0x3,0x3,6);
 8003d02:	681c      	ldr	r4, [r3, #0]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003d04:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003d08:	4304      	orrs	r4, r0
 8003d0a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003d0e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003d12:	601c      	str	r4, [r3, #0]

		EXTI->PR = (0x3<<6);
 8003d14:	6158      	str	r0, [r3, #20]
 8003d16:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003d1a:	6011      	str	r1, [r2, #0]

	else
	{
		NVIC_DisableIRQ((IRQn_Type)23);
	}
}
 8003d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <Lcd_GPIO_Init>:
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8003d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d28:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d2c:	6811      	ldr	r1, [r2, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003d2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8003d32:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8003d36:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8003d3a:	6011      	str	r1, [r2, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8003d3c:	6851      	ldr	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003d3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8003d42:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8003d46:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8003d4a:	6051      	str	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003d52:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003d56:	601a      	str	r2, [r3, #0]
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d5e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop

08003d68 <Lcd_Write_Reg>:
}

void Lcd_Write_Reg(unsigned char Lcd_Reg, unsigned short Lcd_RegValue)
{
 8003d68:	b410      	push	{r4}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d72:	68dc      	ldr	r4, [r3, #12]
   Lcd_RS_DATA();
 8003d74:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003d78:	f024 0410 	bic.w	r4, r4, #16
 8003d7c:	60dc      	str	r4, [r3, #12]
   Lcd_RS_DATA();
 8003d7e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d82:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003d84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003d88:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003d8c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8003d90:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003d92:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003d94:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003d96:	8913      	ldrh	r3, [r2, #8]
 8003d98:	079b      	lsls	r3, r3, #30
 8003d9a:	d5fc      	bpl.n	8003d96 <Lcd_Write_Reg+0x2e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003d9c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8003da0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003da4:	8902      	ldrh	r2, [r0, #8]
 8003da6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003daa:	0614      	lsls	r4, r2, #24
 8003dac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003db0:	d4f8      	bmi.n	8003da4 <Lcd_Write_Reg+0x3c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003dba:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003dbc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003dc0:	f044 0410 	orr.w	r4, r4, #16
 8003dc4:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003dc6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8003dc8:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003dcc:	f024 0410 	bic.w	r4, r4, #16
 8003dd0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8003dd2:	68c2      	ldr	r2, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003dd4:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	60c2      	str	r2, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003ddc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003dde:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003de0:	8913      	ldrh	r3, [r2, #8]
 8003de2:	0799      	lsls	r1, r3, #30
 8003de4:	d5fc      	bpl.n	8003de0 <Lcd_Write_Reg+0x78>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003de6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003dea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003dee:	8913      	ldrh	r3, [r2, #8]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	d4fc      	bmi.n	8003dee <Lcd_Write_Reg+0x86>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8003df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003df8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	f042 0210 	orr.w	r2, r2, #16
 8003e02:	60da      	str	r2, [r3, #12]

void Lcd_Write_Reg(unsigned char Lcd_Reg, unsigned short Lcd_RegValue)
{
	Lcd_WR_REG(Lcd_Reg);
	Lcd_WR_DATA(Lcd_RegValue);
}
 8003e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop

08003e0c <Lcd_Write_Data_16Bit>:

void Lcd_Write_Data_16Bit(unsigned short Data)
{
 8003e0c:	b410      	push	{r4}
   Lcd_CS_EN();
 8003e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e12:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e16:	68d1      	ldr	r1, [r2, #12]
   Lcd_RS_REG();
 8003e18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8003e1c:	f021 0110 	bic.w	r1, r1, #16
 8003e20:	60d1      	str	r1, [r2, #12]
   Lcd_RS_REG();
 8003e22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e26:	68da      	ldr	r2, [r3, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e28:	f44f 5140 	mov.w	r1, #12288	; 0x3000
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8003e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e30:	f2c4 0101 	movt	r1, #16385	; 0x4001

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
 8003e34:	0a04      	lsrs	r4, r0, #8
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8003e36:	60da      	str	r2, [r3, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e38:	460a      	mov	r2, r1
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e3a:	818c      	strh	r4, [r1, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e3c:	8913      	ldrh	r3, [r2, #8]
 8003e3e:	079b      	lsls	r3, r3, #30
 8003e40:	d5fc      	bpl.n	8003e3c <Lcd_Write_Data_16Bit+0x30>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003e42:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003e46:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003e4a:	890a      	ldrh	r2, [r1, #8]
 8003e4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e50:	0614      	lsls	r4, r2, #24
 8003e52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e56:	d4f8      	bmi.n	8003e4a <Lcd_Write_Data_16Bit+0x3e>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e58:	b2c0      	uxtb	r0, r0
 8003e5a:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e5c:	891a      	ldrh	r2, [r3, #8]
 8003e5e:	0790      	lsls	r0, r2, #30
 8003e60:	d5fc      	bpl.n	8003e5c <Lcd_Write_Data_16Bit+0x50>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003e62:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003e66:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e6a:	8913      	ldrh	r3, [r2, #8]
 8003e6c:	0619      	lsls	r1, r3, #24
 8003e6e:	d4fc      	bmi.n	8003e6a <Lcd_Write_Data_16Bit+0x5e>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8003e70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	f042 0210 	orr.w	r2, r2, #16
 8003e7e:	60da      	str	r2, [r3, #12]
}
 8003e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <Lcd_Reset>:
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8003e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e90:	68d9      	ldr	r1, [r3, #12]

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
 8003e92:	b082      	sub	sp, #8


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e94:	2200      	movs	r2, #0
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8003e96:	f021 0110 	bic.w	r1, r1, #16
 8003e9a:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e9c:	9200      	str	r2, [sp, #0]
 8003e9e:	9b00      	ldr	r3, [sp, #0]
 8003ea0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003ea4:	f2c0 0206 	movt	r2, #6
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	dc05      	bgt.n	8003eb8 <Lcd_Reset+0x30>
 8003eac:	9b00      	ldr	r3, [sp, #0]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	9b00      	ldr	r3, [sp, #0]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	ddf9      	ble.n	8003eac <Lcd_Reset+0x24>

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8003eb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ebc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ec0:	68d9      	ldr	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003ec2:	2200      	movs	r2, #0

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8003ec4:	f041 0110 	orr.w	r1, r1, #16
 8003ec8:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003eca:	9201      	str	r2, [sp, #4]
 8003ecc:	9b01      	ldr	r3, [sp, #4]
 8003ece:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003ed2:	f2c0 0203 	movt	r2, #3
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	dc05      	bgt.n	8003ee6 <Lcd_Reset+0x5e>
 8003eda:	9b01      	ldr	r3, [sp, #4]
 8003edc:	3301      	adds	r3, #1
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	9b01      	ldr	r3, [sp, #4]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	ddf9      	ble.n	8003eda <Lcd_Reset+0x52>
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
	_Delay(50);
}
 8003ee6:	b002      	add	sp, #8
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <Lcd_WR_REG>:

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ef0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ef4:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 8003ef6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003efa:	f021 0110 	bic.w	r1, r1, #16
 8003efe:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8003f00:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f04:	68d1      	ldr	r1, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003f0e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003f12:	60d1      	str	r1, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f14:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f16:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f18:	8913      	ldrh	r3, [r2, #8]
 8003f1a:	0798      	lsls	r0, r3, #30
 8003f1c:	d5fc      	bpl.n	8003f18 <Lcd_WR_REG+0x2c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003f1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f26:	8913      	ldrh	r3, [r2, #8]
 8003f28:	0619      	lsls	r1, r3, #24
 8003f2a:	d4fc      	bmi.n	8003f26 <Lcd_WR_REG+0x3a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	f042 0210 	orr.w	r2, r2, #16
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <Lcd_WR_DATA>:
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f48:	68d9      	ldr	r1, [r3, #12]
	Lcd_RS_REG();
 8003f4a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003f4e:	f021 0110 	bic.w	r1, r1, #16
 8003f52:	60d9      	str	r1, [r3, #12]
	Lcd_RS_REG();
 8003f54:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f58:	68d1      	ldr	r1, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003f62:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003f66:	60d1      	str	r1, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f68:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f6a:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f6c:	8913      	ldrh	r3, [r2, #8]
 8003f6e:	0799      	lsls	r1, r3, #30
 8003f70:	d5fc      	bpl.n	8003f6c <Lcd_WR_DATA+0x2c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003f72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f76:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f7a:	8913      	ldrh	r3, [r2, #8]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	d4fc      	bmi.n	8003f7a <Lcd_WR_DATA+0x3a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8003f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	f042 0210 	orr.w	r2, r2, #16
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop

08003f94 <Lcd_Set_Display_Mode>:
}

void Lcd_Set_Display_Mode(int mode)
{
	lcddev.dir = mode;
 8003f94:	f240 5394 	movw	r3, #1428	; 0x594
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
}

void Lcd_Set_Display_Mode(int mode)
{
 8003f98:	b410      	push	{r4}
	lcddev.dir = mode;
 8003f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
	lcddev.setxcmd=0x2A;
 8003f9e:	242a      	movs	r4, #42	; 0x2a
	lcddev.setycmd=0x2B;
 8003fa0:	212b      	movs	r1, #43	; 0x2b
	lcddev.wramcmd=0x2C;
 8003fa2:	222c      	movs	r2, #44	; 0x2c
	Lcd_CS_DIS();
}

void Lcd_Set_Display_Mode(int mode)
{
	lcddev.dir = mode;
 8003fa4:	7118      	strb	r0, [r3, #4]
	lcddev.setxcmd=0x2A;
 8003fa6:	811c      	strh	r4, [r3, #8]
	lcddev.setycmd=0x2B;
 8003fa8:	8159      	strh	r1, [r3, #10]
	lcddev.wramcmd=0x2C;
 8003faa:	80da      	strh	r2, [r3, #6]

	switch(mode)
 8003fac:	2804      	cmp	r0, #4
 8003fae:	d859      	bhi.n	8004064 <Lcd_Set_Display_Mode+0xd0>
 8003fb0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003fb4:	00f3005b 	rscseq	r0, r3, fp, asr r0
 8003fb8:	013f00a7 	teqeq	pc, r7, lsr #1
 8003fbc:	f44f0005 	vst4.8	{d16-d19}, [pc], r5
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
 8003fc0:	70a0      	strb	r0, [r4, #2]
			lcddev.height=Lcd_W;
 8003fc2:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003fc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 8003fc8:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
 8003fca:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003fcc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003fd0:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 8003fd2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8003fdc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003fe0:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003fe2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fe6:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003fea:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003fee:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003ff0:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003ff2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003ff4:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003ff6:	8913      	ldrh	r3, [r2, #8]
 8003ff8:	0799      	lsls	r1, r3, #30
 8003ffa:	d5fc      	bpl.n	8003ff6 <Lcd_Set_Display_Mode+0x62>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003ffc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004000:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004004:	890a      	ldrh	r2, [r1, #8]
 8004006:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800400a:	0612      	lsls	r2, r2, #24
 800400c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004010:	d4f8      	bmi.n	8004004 <Lcd_Set_Display_Mode+0x70>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004016:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800401a:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800401c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004020:	f040 0010 	orr.w	r0, r0, #16
 8004024:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004026:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 8004028:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800402c:	f020 0010 	bic.w	r0, r0, #16
 8004030:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 8004032:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004034:	20e8      	movs	r0, #232	; 0xe8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800403c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800403e:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004040:	8913      	ldrh	r3, [r2, #8]
 8004042:	079c      	lsls	r4, r3, #30
 8004044:	d5fc      	bpl.n	8004040 <Lcd_Set_Display_Mode+0xac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004046:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800404a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800404e:	8913      	ldrh	r3, [r2, #8]
 8004050:	0618      	lsls	r0, r3, #24
 8004052:	d4fc      	bmi.n	800404e <Lcd_Set_Display_Mode+0xba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004058:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	f042 0210 	orr.w	r2, r2, #16
 8004062:	60da      	str	r2, [r3, #12]
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		default:
			break;
	}
}
 8004064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004068:	4770      	bx	lr
	lcddev.wramcmd=0x2C;

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
 800406a:	20f0      	movs	r0, #240	; 0xf0
			lcddev.height=Lcd_H;
 800406c:	f44f 72a0 	mov.w	r2, #320	; 0x140
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004070:	f44f 6100 	mov.w	r1, #2048	; 0x800

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
 8004074:	805a      	strh	r2, [r3, #2]
	lcddev.wramcmd=0x2C;

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
 8004076:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004078:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800407c:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 800407e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004088:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800408c:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800408e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004092:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004096:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800409a:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800409c:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800409e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040a0:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80040a2:	8913      	ldrh	r3, [r2, #8]
 80040a4:	0799      	lsls	r1, r3, #30
 80040a6:	d5fc      	bpl.n	80040a2 <Lcd_Set_Display_Mode+0x10e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80040a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80040ac:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80040b0:	890a      	ldrh	r2, [r1, #8]
 80040b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040b6:	0612      	lsls	r2, r2, #24
 80040b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80040bc:	d4f8      	bmi.n	80040b0 <Lcd_Set_Display_Mode+0x11c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80040be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040c6:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80040c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80040cc:	f040 0010 	orr.w	r0, r0, #16
 80040d0:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80040d2:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 80040d4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80040d8:	f020 0010 	bic.w	r0, r0, #16
 80040dc:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 80040de:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040e0:	2008      	movs	r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80040e8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040ea:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80040ec:	8913      	ldrh	r3, [r2, #8]
 80040ee:	079c      	lsls	r4, r3, #30
 80040f0:	d5fc      	bpl.n	80040ec <Lcd_Set_Display_Mode+0x158>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80040f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80040f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040fa:	8913      	ldrh	r3, [r2, #8]
 80040fc:	0618      	lsls	r0, r3, #24
 80040fe:	d4fc      	bmi.n	80040fa <Lcd_Set_Display_Mode+0x166>
 8004100:	e7a8      	b.n	8004054 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
 8004102:	20f0      	movs	r0, #240	; 0xf0
			lcddev.height=Lcd_H;
 8004104:	f44f 72a0 	mov.w	r2, #320	; 0x140
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004108:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
 800410c:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
 800410e:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004110:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004114:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 8004116:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800411a:	f023 0310 	bic.w	r3, r3, #16
 800411e:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004120:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004124:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800412a:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800412e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004132:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004134:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004136:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004138:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800413a:	8913      	ldrh	r3, [r2, #8]
 800413c:	0799      	lsls	r1, r3, #30
 800413e:	d5fc      	bpl.n	800413a <Lcd_Set_Display_Mode+0x1a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004140:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004144:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004148:	890a      	ldrh	r2, [r1, #8]
 800414a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800414e:	0612      	lsls	r2, r2, #24
 8004150:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004154:	d4f8      	bmi.n	8004148 <Lcd_Set_Display_Mode+0x1b4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800415a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800415e:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004160:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004164:	f040 0010 	orr.w	r0, r0, #16
 8004168:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800416a:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 800416c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004170:	f020 0010 	bic.w	r0, r0, #16
 8004174:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 8004176:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004178:	20c8      	movs	r0, #200	; 0xc8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004180:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004182:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004184:	8913      	ldrh	r3, [r2, #8]
 8004186:	079c      	lsls	r4, r3, #30
 8004188:	d5fc      	bpl.n	8004184 <Lcd_Set_Display_Mode+0x1f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800418a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800418e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004192:	8913      	ldrh	r3, [r2, #8]
 8004194:	0618      	lsls	r0, r3, #24
 8004196:	d4fc      	bmi.n	8004192 <Lcd_Set_Display_Mode+0x1fe>
 8004198:	e75c      	b.n	8004054 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
 800419a:	f44f 70a0 	mov.w	r0, #320	; 0x140
			lcddev.height=Lcd_W;
 800419e:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80041a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 80041a4:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
 80041a6:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80041a8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80041ac:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 80041ae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 80041b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041bc:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80041c6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041ca:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80041cc:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80041ce:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041d0:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80041d2:	8913      	ldrh	r3, [r2, #8]
 80041d4:	0799      	lsls	r1, r3, #30
 80041d6:	d5fc      	bpl.n	80041d2 <Lcd_Set_Display_Mode+0x23e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80041d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80041dc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80041e0:	890a      	ldrh	r2, [r1, #8]
 80041e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041e6:	0612      	lsls	r2, r2, #24
 80041e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80041ec:	d4f8      	bmi.n	80041e0 <Lcd_Set_Display_Mode+0x24c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80041ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041f6:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80041f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80041fc:	f040 0010 	orr.w	r0, r0, #16
 8004200:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004202:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 8004204:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004208:	f020 0010 	bic.w	r0, r0, #16
 800420c:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 800420e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004210:	2068      	movs	r0, #104	; 0x68
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004216:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004218:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800421a:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800421c:	8913      	ldrh	r3, [r2, #8]
 800421e:	079c      	lsls	r4, r3, #30
 8004220:	d5fc      	bpl.n	800421c <Lcd_Set_Display_Mode+0x288>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004222:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004226:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800422a:	8913      	ldrh	r3, [r2, #8]
 800422c:	0618      	lsls	r0, r3, #24
 800422e:	d4fc      	bmi.n	800422a <Lcd_Set_Display_Mode+0x296>
 8004230:	e710      	b.n	8004054 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
 8004232:	f44f 70a0 	mov.w	r0, #320	; 0x140
			lcddev.height=Lcd_W;
 8004236:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004238:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 800423c:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
 800423e:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004240:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004244:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 8004246:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800424a:	f023 0310 	bic.w	r3, r3, #16
 800424e:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004250:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004254:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004256:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800425a:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800425e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004262:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004264:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004266:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004268:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800426a:	8913      	ldrh	r3, [r2, #8]
 800426c:	0799      	lsls	r1, r3, #30
 800426e:	d5fc      	bpl.n	800426a <Lcd_Set_Display_Mode+0x2d6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004270:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004274:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004278:	890a      	ldrh	r2, [r1, #8]
 800427a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800427e:	0612      	lsls	r2, r2, #24
 8004280:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004284:	d4f8      	bmi.n	8004278 <Lcd_Set_Display_Mode+0x2e4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800428a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800428e:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004290:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004294:	f040 0010 	orr.w	r0, r0, #16
 8004298:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800429a:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 800429c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80042a0:	f020 0010 	bic.w	r0, r0, #16
 80042a4:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 80042a6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80042a8:	20a8      	movs	r0, #168	; 0xa8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80042b0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80042b2:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80042b4:	8913      	ldrh	r3, [r2, #8]
 80042b6:	079c      	lsls	r4, r3, #30
 80042b8:	d5fc      	bpl.n	80042b4 <Lcd_Set_Display_Mode+0x320>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80042ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80042be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042c2:	8913      	ldrh	r3, [r2, #8]
 80042c4:	0618      	lsls	r0, r3, #24
 80042c6:	d4fc      	bmi.n	80042c2 <Lcd_Set_Display_Mode+0x32e>
 80042c8:	e6c4      	b.n	8004054 <Lcd_Set_Display_Mode+0xc0>
 80042ca:	bf00      	nop

080042cc <Lcd_Write_RAM_Prepare>:
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042d4:	68d8      	ldr	r0, [r3, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042d6:	f240 5194 	movw	r1, #1428	; 0x594
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042da:	f020 0010 	bic.w	r0, r0, #16
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042de:	f2c2 0100 	movt	r1, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042e2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042e6:	88c9      	ldrh	r1, [r1, #6]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042ec:	60d8      	str	r0, [r3, #12]
   Lcd_RS_DATA();
 80042ee:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80042f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042f8:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042fa:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80042fe:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004300:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004302:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004304:	8913      	ldrh	r3, [r2, #8]
 8004306:	079b      	lsls	r3, r3, #30
 8004308:	d5fc      	bpl.n	8004304 <Lcd_Write_RAM_Prepare+0x38>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800430a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800430e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004312:	8913      	ldrh	r3, [r2, #8]
 8004314:	0618      	lsls	r0, r3, #24
 8004316:	d4fc      	bmi.n	8004312 <Lcd_Write_RAM_Prepare+0x46>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800431c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	f042 0210 	orr.w	r2, r2, #16
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop

0800432c <Lcd_Set_Windows>:
{
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
 800432c:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800432e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004332:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004336:	68ee      	ldr	r6, [r5, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004338:	f240 5494 	movw	r4, #1428	; 0x594
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800433c:	f026 0c10 	bic.w	ip, r6, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004340:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004344:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004348:	8927      	ldrh	r7, [r4, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800434a:	f2c4 0601 	movt	r6, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800434e:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_RS_DATA();
 8004352:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004356:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 800435a:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800435e:	b2ff      	uxtb	r7, r7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004360:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
 8004364:	f8c6 c00c 	str.w	ip, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004368:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800436a:	81af      	strh	r7, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800436c:	8935      	ldrh	r5, [r6, #8]
 800436e:	07af      	lsls	r7, r5, #30
 8004370:	d5fc      	bpl.n	800436c <Lcd_Set_Windows+0x40>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004372:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 8004376:	f2c4 0701 	movt	r7, #16385	; 0x4001
 800437a:	893e      	ldrh	r6, [r7, #8]
 800437c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004380:	0636      	lsls	r6, r6, #24
 8004382:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004386:	d4f8      	bmi.n	800437a <Lcd_Set_Windows+0x4e>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004388:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800438c:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004390:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004394:	f44f 6740 	mov.w	r7, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004398:	f04c 0c10 	orr.w	ip, ip, #16
 800439c:	f8c6 c00c 	str.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043a0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Lcd_RS_REG();
 80043a4:	f2c4 0701 	movt	r7, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043a8:	f02c 0c10 	bic.w	ip, ip, #16
 80043ac:	f8c6 c00c 	str.w	ip, [r6, #12]
	Lcd_RS_REG();
 80043b0:	68fe      	ldr	r6, [r7, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 80043b2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80043b6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80043ba:	60fe      	str	r6, [r7, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80043bc:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80043be:	f8a5 c00c 	strh.w	ip, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80043c2:	8935      	ldrh	r5, [r6, #8]
 80043c4:	07af      	lsls	r7, r5, #30
 80043c6:	d5fc      	bpl.n	80043c2 <Lcd_Set_Windows+0x96>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80043c8:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 80043cc:	f2c4 0701 	movt	r7, #16385	; 0x4001
 80043d0:	893e      	ldrh	r6, [r7, #8]
 80043d2:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80043d6:	0636      	lsls	r6, r6, #24
 80043d8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80043dc:	d4f8      	bmi.n	80043d0 <Lcd_Set_Windows+0xa4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80043de:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80043e2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80043e6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80043ea:	f44f 6740 	mov.w	r7, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80043ee:	f04c 0c10 	orr.w	ip, ip, #16
 80043f2:	f8c6 c00c 	str.w	ip, [r6, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043f6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Lcd_RS_REG();
 80043fa:	f2c4 0701 	movt	r7, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043fe:	f02c 0c10 	bic.w	ip, ip, #16
 8004402:	f8c6 c00c 	str.w	ip, [r6, #12]
	Lcd_RS_REG();
 8004406:	68fe      	ldr	r6, [r7, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004408:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800440a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 800440e:	60fe      	str	r6, [r7, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004410:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004412:	81a8      	strh	r0, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004414:	8930      	ldrh	r0, [r6, #8]
 8004416:	0780      	lsls	r0, r0, #30
 8004418:	d5fc      	bpl.n	8004414 <Lcd_Set_Windows+0xe8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800441a:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 800441e:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004422:	8935      	ldrh	r5, [r6, #8]
 8004424:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004428:	062f      	lsls	r7, r5, #24
 800442a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800442e:	d4f8      	bmi.n	8004422 <Lcd_Set_Windows+0xf6>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004430:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004434:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004438:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800443a:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800443e:	f047 0710 	orr.w	r7, r7, #16
 8004442:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004444:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8004446:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800444a:	f027 0710 	bic.w	r7, r7, #16
 800444e:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8004450:	68f5      	ldr	r5, [r6, #12]
void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
 8004452:	0a17      	lsrs	r7, r2, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004454:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004458:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800445a:	4605      	mov	r5, r0
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800445c:	8187      	strh	r7, [r0, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800445e:	8928      	ldrh	r0, [r5, #8]
 8004460:	0786      	lsls	r6, r0, #30
 8004462:	d5fc      	bpl.n	800445e <Lcd_Set_Windows+0x132>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004464:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004468:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800446c:	8935      	ldrh	r5, [r6, #8]
 800446e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004472:	062d      	lsls	r5, r5, #24
 8004474:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004478:	d4f8      	bmi.n	800446c <Lcd_Set_Windows+0x140>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800447a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800447e:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004482:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004484:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004488:	f047 0710 	orr.w	r7, r7, #16
 800448c:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800448e:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8004490:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004494:	f027 0710 	bic.w	r7, r7, #16
 8004498:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 800449a:	68f5      	ldr	r5, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800449c:	b2d2      	uxtb	r2, r2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800449e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80044a2:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044a4:	4605      	mov	r5, r0
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80044a6:	8182      	strh	r2, [r0, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044a8:	892a      	ldrh	r2, [r5, #8]
 80044aa:	0797      	lsls	r7, r2, #30
 80044ac:	d5fc      	bpl.n	80044a8 <Lcd_Set_Windows+0x17c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80044ae:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80044b2:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80044b6:	8928      	ldrh	r0, [r5, #8]
 80044b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80044bc:	0606      	lsls	r6, r0, #24
 80044be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80044c2:	d4f8      	bmi.n	80044b6 <Lcd_Set_Windows+0x18a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80044c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044c8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044cc:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80044ce:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80044d2:	f046 0610 	orr.w	r6, r6, #16
 80044d6:	60c6      	str	r6, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80044d8:	68c7      	ldr	r7, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 80044da:	8966      	ldrh	r6, [r4, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80044dc:	f027 0710 	bic.w	r7, r7, #16
 80044e0:	60c7      	str	r7, [r0, #12]
   Lcd_RS_DATA();
 80044e2:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80044e6:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80044e8:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80044ea:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80044ee:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044f0:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80044f2:	8196      	strh	r6, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044f4:	8902      	ldrh	r2, [r0, #8]
 80044f6:	0795      	lsls	r5, r2, #30
 80044f8:	d5fc      	bpl.n	80044f4 <Lcd_Set_Windows+0x1c8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80044fa:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80044fe:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004502:	8928      	ldrh	r0, [r5, #8]
 8004504:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004508:	0600      	lsls	r0, r0, #24
 800450a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800450e:	d4f8      	bmi.n	8004502 <Lcd_Set_Windows+0x1d6>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004510:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004514:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004518:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800451a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800451e:	f046 0610 	orr.w	r6, r6, #16
 8004522:	60c6      	str	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004524:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8004526:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800452a:	f026 0610 	bic.w	r6, r6, #16
 800452e:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8004530:	68e8      	ldr	r0, [r5, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8004532:	0a0e      	lsrs	r6, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004534:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004538:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800453a:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800453c:	8196      	strh	r6, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800453e:	8902      	ldrh	r2, [r0, #8]
 8004540:	0797      	lsls	r7, r2, #30
 8004542:	d5fc      	bpl.n	800453e <Lcd_Set_Windows+0x212>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004544:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004548:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800454c:	8928      	ldrh	r0, [r5, #8]
 800454e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004552:	0606      	lsls	r6, r0, #24
 8004554:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004558:	d4f8      	bmi.n	800454c <Lcd_Set_Windows+0x220>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800455a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800455e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004562:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004564:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004568:	f046 0610 	orr.w	r6, r6, #16
 800456c:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800456e:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8004570:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004574:	f026 0610 	bic.w	r6, r6, #16
 8004578:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 800457a:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800457c:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800457e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004582:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004584:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004586:	8191      	strh	r1, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004588:	8902      	ldrh	r2, [r0, #8]
 800458a:	0795      	lsls	r5, r2, #30
 800458c:	d5fc      	bpl.n	8004588 <Lcd_Set_Windows+0x25c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800458e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004592:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004596:	8901      	ldrh	r1, [r0, #8]
 8004598:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800459c:	0609      	lsls	r1, r1, #24
 800459e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80045a2:	d4f8      	bmi.n	8004596 <Lcd_Set_Windows+0x26a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045a8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80045ac:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80045ae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045b2:	f045 0510 	orr.w	r5, r5, #16
 80045b6:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80045b8:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80045ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80045be:	f025 0510 	bic.w	r5, r5, #16
 80045c2:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80045c4:	68c1      	ldr	r1, [r0, #12]
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
	Lcd_WR_DATA(0xFF&y1);
	Lcd_WR_DATA(y2>>8);
 80045c6:	0a1d      	lsrs	r5, r3, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80045c8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80045cc:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80045ce:	4611      	mov	r1, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80045d0:	8195      	strh	r5, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80045d2:	890a      	ldrh	r2, [r1, #8]
 80045d4:	0792      	lsls	r2, r2, #30
 80045d6:	d5fc      	bpl.n	80045d2 <Lcd_Set_Windows+0x2a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80045d8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80045dc:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045e0:	8901      	ldrh	r1, [r0, #8]
 80045e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80045e6:	060f      	lsls	r7, r1, #24
 80045e8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80045ec:	d4f8      	bmi.n	80045e0 <Lcd_Set_Windows+0x2b4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80045f6:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80045f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045fc:	f045 0510 	orr.w	r5, r5, #16
 8004600:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004602:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8004604:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004608:	f025 0510 	bic.w	r5, r5, #16
 800460c:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800460e:	68c1      	ldr	r1, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004610:	b2db      	uxtb	r3, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004612:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004616:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004618:	4611      	mov	r1, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800461a:	8193      	strh	r3, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800461c:	890b      	ldrh	r3, [r1, #8]
 800461e:	079e      	lsls	r6, r3, #30
 8004620:	d5fc      	bpl.n	800461c <Lcd_Set_Windows+0x2f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004622:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004626:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800462a:	890a      	ldrh	r2, [r1, #8]
 800462c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004630:	0615      	lsls	r5, r2, #24
 8004632:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004636:	d4f8      	bmi.n	800462a <Lcd_Set_Windows+0x2fe>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800463c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004640:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004642:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004646:	f040 0010 	orr.w	r0, r0, #16
 800464a:	60d0      	str	r0, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800464c:	68d5      	ldr	r5, [r2, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 800464e:	88e0      	ldrh	r0, [r4, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004650:	f025 0410 	bic.w	r4, r5, #16
 8004654:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004656:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800465a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800465c:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800465e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004662:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004664:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004666:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004668:	8913      	ldrh	r3, [r2, #8]
 800466a:	0798      	lsls	r0, r3, #30
 800466c:	d5fc      	bpl.n	8004668 <Lcd_Set_Windows+0x33c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800466e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004672:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004676:	8913      	ldrh	r3, [r2, #8]
 8004678:	0619      	lsls	r1, r3, #24
 800467a:	d4fc      	bmi.n	8004676 <Lcd_Set_Windows+0x34a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800467c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004680:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	f042 0210 	orr.w	r2, r2, #16
 800468a:	60da      	str	r2, [r3, #12]
	Lcd_WR_DATA(0xFF&y1);
	Lcd_WR_DATA(y2>>8);
	Lcd_WR_DATA(0xFF&y2);

	Lcd_Write_RAM_Prepare();
}
 800468c:	bcf0      	pop	{r4, r5, r6, r7}
 800468e:	4770      	bx	lr

08004690 <Lcd_Fill>:
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;
 8004694:	1a5e      	subs	r6, r3, r1
 8004696:	3601      	adds	r6, #1
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
 8004698:	1a15      	subs	r5, r2, r0
	unsigned short height = ey - sy + 1;
 800469a:	b2b6      	uxth	r6, r6
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
 800469c:	3501      	adds	r5, #1
 800469e:	b2ad      	uxth	r5, r5
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
 80046a0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);
 80046a4:	f7ff fe42 	bl	800432c <Lcd_Set_Windows>

	for(i = 0; i < height; i++)
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	d03d      	beq.n	8004728 <Lcd_Fill+0x98>
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 80046ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
   Lcd_RS_REG();
 80046b0:	f44f 6740 	mov.w	r7, #3072	; 0xc00
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 80046b8:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_RS_REG();
 80046bc:	f2c4 0701 	movt	r7, #16385	; 0x4001
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80046c4:	ea4f 2814 	mov.w	r8, r4, lsr #8
 80046c8:	fa5f fc84 	uxtb.w	ip, r4
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
 80046cc:	f04f 0900 	mov.w	r9, #0
	{
		for(j = 0; j < width; j++)
 80046d0:	b325      	cbz	r5, 800471c <Lcd_Fill+0x8c>
 80046d2:	2400      	movs	r4, #0
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 80046d4:	68c2      	ldr	r2, [r0, #12]
 80046d6:	f022 0210 	bic.w	r2, r2, #16
 80046da:	60c2      	str	r2, [r0, #12]
   Lcd_RS_REG();
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	60fa      	str	r2, [r7, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046e4:	f8a3 800c 	strh.w	r8, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80046e8:	891a      	ldrh	r2, [r3, #8]
 80046ea:	0792      	lsls	r2, r2, #30
 80046ec:	d5fc      	bpl.n	80046e8 <Lcd_Fill+0x58>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80046ee:	8919      	ldrh	r1, [r3, #8]
 80046f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80046f4:	0609      	lsls	r1, r1, #24
 80046f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80046fa:	d4f8      	bmi.n	80046ee <Lcd_Fill+0x5e>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046fc:	f8a2 c00c 	strh.w	ip, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004700:	891a      	ldrh	r2, [r3, #8]
 8004702:	0791      	lsls	r1, r2, #30
 8004704:	d5fc      	bpl.n	8004700 <Lcd_Fill+0x70>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004706:	891a      	ldrh	r2, [r3, #8]
 8004708:	0612      	lsls	r2, r2, #24
 800470a:	d4fc      	bmi.n	8004706 <Lcd_Fill+0x76>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 800470c:	68c2      	ldr	r2, [r0, #12]

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 800470e:	3401      	adds	r4, #1
 8004710:	b2a4      	uxth	r4, r4
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8004712:	f042 0210 	orr.w	r2, r2, #16

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 8004716:	42a5      	cmp	r5, r4
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8004718:	60c2      	str	r2, [r0, #12]

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 800471a:	d1db      	bne.n	80046d4 <Lcd_Fill+0x44>
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
 800471c:	f109 0901 	add.w	r9, r9, #1
 8004720:	fa1f f989 	uxth.w	r9, r9
 8004724:	454e      	cmp	r6, r9
 8004726:	d1d3      	bne.n	80046d0 <Lcd_Fill+0x40>
		{
			Lcd_Write_Data_16Bit(color);
		}
	}

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
 8004728:	f240 5394 	movw	r3, #1428	; 0x594
 800472c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	885b      	ldrh	r3, [r3, #2]
 8004734:	3a01      	subs	r2, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	2000      	movs	r0, #0
 800473a:	b292      	uxth	r2, r2
 800473c:	b29b      	uxth	r3, r3
 800473e:	4601      	mov	r1, r0
}
 8004740:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		{
			Lcd_Write_Data_16Bit(color);
		}
	}

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
 8004744:	f7ff bdf2 	b.w	800432c <Lcd_Set_Windows>

08004748 <Lcd_Set_Cursor>:

	Lcd_Write_RAM_Prepare();
}

void Lcd_Set_Cursor(unsigned short x, unsigned short y)
{
 8004748:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800474a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800474e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004752:	68de      	ldr	r6, [r3, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004754:	f240 5294 	movw	r2, #1428	; 0x594
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004758:	f026 0610 	bic.w	r6, r6, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 800475c:	f2c2 0200 	movt	r2, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004760:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004764:	8915      	ldrh	r5, [r2, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004766:	f2c4 0401 	movt	r4, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800476a:	60de      	str	r6, [r3, #12]
   Lcd_RS_DATA();
 800476c:	68e6      	ldr	r6, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800476e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004772:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004776:	b2ed      	uxtb	r5, r5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004778:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 800477c:	60e6      	str	r6, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800477e:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004780:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004782:	8923      	ldrh	r3, [r4, #8]
 8004784:	079d      	lsls	r5, r3, #30
 8004786:	d5fc      	bpl.n	8004782 <Lcd_Set_Cursor+0x3a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004788:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 800478c:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004790:	892c      	ldrh	r4, [r5, #8]
 8004792:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004796:	0624      	lsls	r4, r4, #24
 8004798:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800479c:	d4f8      	bmi.n	8004790 <Lcd_Set_Cursor+0x48>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800479e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80047a2:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80047a6:	68e6      	ldr	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80047a8:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80047ac:	f046 0610 	orr.w	r6, r6, #16
 80047b0:	60e6      	str	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80047b2:	68e6      	ldr	r6, [r4, #12]
	Lcd_RS_REG();
 80047b4:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80047b8:	f026 0610 	bic.w	r6, r6, #16
 80047bc:	60e6      	str	r6, [r4, #12]
	Lcd_RS_REG();
 80047be:	68ec      	ldr	r4, [r5, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 80047c0:	0a06      	lsrs	r6, r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80047c2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80047c6:	60ec      	str	r4, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80047c8:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80047ca:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80047cc:	8923      	ldrh	r3, [r4, #8]
 80047ce:	079b      	lsls	r3, r3, #30
 80047d0:	d5fc      	bpl.n	80047cc <Lcd_Set_Cursor+0x84>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80047d2:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80047d6:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80047da:	892c      	ldrh	r4, [r5, #8]
 80047dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047e0:	0627      	lsls	r7, r4, #24
 80047e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047e6:	d4f8      	bmi.n	80047da <Lcd_Set_Cursor+0x92>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80047e8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80047ec:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80047f0:	68e7      	ldr	r7, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80047f2:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80047f6:	f047 0710 	orr.w	r7, r7, #16
 80047fa:	60e7      	str	r7, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80047fc:	68e7      	ldr	r7, [r4, #12]
	Lcd_RS_REG();
 80047fe:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004802:	f027 0710 	bic.w	r7, r7, #16
 8004806:	60e7      	str	r7, [r4, #12]
	Lcd_RS_REG();
 8004808:	68ec      	ldr	r4, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800480a:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800480c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8004810:	60ec      	str	r4, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004812:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004814:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004816:	8923      	ldrh	r3, [r4, #8]
 8004818:	079d      	lsls	r5, r3, #30
 800481a:	d5fc      	bpl.n	8004816 <Lcd_Set_Cursor+0xce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800481c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004820:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004824:	892c      	ldrh	r4, [r5, #8]
 8004826:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800482a:	0624      	lsls	r4, r4, #24
 800482c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004830:	d4f8      	bmi.n	8004824 <Lcd_Set_Cursor+0xdc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004832:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004836:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800483a:	68e7      	ldr	r7, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800483c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004840:	f047 0710 	orr.w	r7, r7, #16
 8004844:	60e7      	str	r7, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004846:	68e7      	ldr	r7, [r4, #12]
	Lcd_RS_REG();
 8004848:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800484c:	f027 0710 	bic.w	r7, r7, #16
 8004850:	60e7      	str	r7, [r4, #12]
	Lcd_RS_REG();
 8004852:	68ef      	ldr	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004854:	461c      	mov	r4, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004856:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 800485a:	60ef      	str	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800485c:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800485e:	8923      	ldrh	r3, [r4, #8]
 8004860:	079b      	lsls	r3, r3, #30
 8004862:	d5fc      	bpl.n	800485e <Lcd_Set_Cursor+0x116>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004864:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004868:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800486c:	892c      	ldrh	r4, [r5, #8]
 800486e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004872:	0627      	lsls	r7, r4, #24
 8004874:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004878:	d4f8      	bmi.n	800486c <Lcd_Set_Cursor+0x124>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800487a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800487e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004882:	68e6      	ldr	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004884:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004888:	f046 0610 	orr.w	r6, r6, #16
 800488c:	60e6      	str	r6, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800488e:	68e6      	ldr	r6, [r4, #12]
	Lcd_RS_REG();
 8004890:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004894:	f026 0610 	bic.w	r6, r6, #16
 8004898:	60e6      	str	r6, [r4, #12]
	Lcd_RS_REG();
 800489a:	68ee      	ldr	r6, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800489c:	461c      	mov	r4, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800489e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80048a2:	60ee      	str	r6, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80048a4:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80048a6:	8923      	ldrh	r3, [r4, #8]
 80048a8:	079e      	lsls	r6, r3, #30
 80048aa:	d5fc      	bpl.n	80048a6 <Lcd_Set_Cursor+0x15e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80048ac:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80048b0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80048b4:	8920      	ldrh	r0, [r4, #8]
 80048b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80048ba:	0605      	lsls	r5, r0, #24
 80048bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048c0:	d4f8      	bmi.n	80048b4 <Lcd_Set_Cursor+0x16c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80048c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048c6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80048ca:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80048cc:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80048d0:	f045 0510 	orr.w	r5, r5, #16
 80048d4:	60c5      	str	r5, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80048d6:	68c6      	ldr	r6, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 80048d8:	8955      	ldrh	r5, [r2, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80048da:	f026 0610 	bic.w	r6, r6, #16
 80048de:	60c6      	str	r6, [r0, #12]
   Lcd_RS_DATA();
 80048e0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80048e4:	68e0      	ldr	r0, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80048e6:	b2ed      	uxtb	r5, r5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80048e8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80048ec:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80048ee:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80048f0:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80048f2:	8903      	ldrh	r3, [r0, #8]
 80048f4:	079c      	lsls	r4, r3, #30
 80048f6:	d5fc      	bpl.n	80048f2 <Lcd_Set_Cursor+0x1aa>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80048f8:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80048fc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004900:	8920      	ldrh	r0, [r4, #8]
 8004902:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004906:	0600      	lsls	r0, r0, #24
 8004908:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800490c:	d4f8      	bmi.n	8004900 <Lcd_Set_Cursor+0x1b8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800490e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004912:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004916:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004918:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800491c:	f045 0510 	orr.w	r5, r5, #16
 8004920:	60c5      	str	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004922:	68c5      	ldr	r5, [r0, #12]
	Lcd_RS_REG();
 8004924:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004928:	f025 0510 	bic.w	r5, r5, #16
 800492c:	60c5      	str	r5, [r0, #12]
	Lcd_RS_REG();
 800492e:	68e0      	ldr	r0, [r4, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8004930:	0a0d      	lsrs	r5, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004932:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004936:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004938:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800493a:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800493c:	8903      	ldrh	r3, [r0, #8]
 800493e:	079f      	lsls	r7, r3, #30
 8004940:	d5fc      	bpl.n	800493c <Lcd_Set_Cursor+0x1f4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004942:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8004946:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800494a:	8920      	ldrh	r0, [r4, #8]
 800494c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004950:	0606      	lsls	r6, r0, #24
 8004952:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004956:	d4f8      	bmi.n	800494a <Lcd_Set_Cursor+0x202>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800495c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004960:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004962:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004966:	f046 0610 	orr.w	r6, r6, #16
 800496a:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800496c:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 800496e:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004972:	f026 0610 	bic.w	r6, r6, #16
 8004976:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8004978:	68e0      	ldr	r0, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800497a:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800497c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004980:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004982:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004984:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004986:	8903      	ldrh	r3, [r0, #8]
 8004988:	079c      	lsls	r4, r3, #30
 800498a:	d5fc      	bpl.n	8004986 <Lcd_Set_Cursor+0x23e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800498c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8004990:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004994:	8920      	ldrh	r0, [r4, #8]
 8004996:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800499a:	0600      	lsls	r0, r0, #24
 800499c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049a0:	d4f8      	bmi.n	8004994 <Lcd_Set_Cursor+0x24c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049a6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80049aa:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80049ac:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049b0:	f046 0610 	orr.w	r6, r6, #16
 80049b4:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80049b6:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 80049b8:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80049bc:	f026 0610 	bic.w	r6, r6, #16
 80049c0:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 80049c2:	68e6      	ldr	r6, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80049c4:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80049c6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80049ca:	60e6      	str	r6, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80049cc:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80049ce:	8903      	ldrh	r3, [r0, #8]
 80049d0:	079f      	lsls	r7, r3, #30
 80049d2:	d5fc      	bpl.n	80049ce <Lcd_Set_Cursor+0x286>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80049d4:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80049d8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80049dc:	8920      	ldrh	r0, [r4, #8]
 80049de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049e2:	0606      	lsls	r6, r0, #24
 80049e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049e8:	d4f8      	bmi.n	80049dc <Lcd_Set_Cursor+0x294>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049ee:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80049f2:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80049f4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049f8:	f045 0510 	orr.w	r5, r5, #16
 80049fc:	60c5      	str	r5, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80049fe:	68c5      	ldr	r5, [r0, #12]
	Lcd_RS_REG();
 8004a00:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004a04:	f025 0510 	bic.w	r5, r5, #16
 8004a08:	60c5      	str	r5, [r0, #12]
	Lcd_RS_REG();
 8004a0a:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a0c:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004a0e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004a12:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004a14:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a16:	8903      	ldrh	r3, [r0, #8]
 8004a18:	079d      	lsls	r5, r3, #30
 8004a1a:	d5fc      	bpl.n	8004a16 <Lcd_Set_Cursor+0x2ce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004a1c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004a20:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004a24:	8901      	ldrh	r1, [r0, #8]
 8004a26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004a2a:	060c      	lsls	r4, r1, #24
 8004a2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a30:	d4f8      	bmi.n	8004a24 <Lcd_Set_Cursor+0x2dc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a36:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004a3a:	68cc      	ldr	r4, [r1, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004a3c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004a40:	f044 0410 	orr.w	r4, r4, #16
 8004a44:	60cc      	str	r4, [r1, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004a46:	68cd      	ldr	r5, [r1, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 8004a48:	88d4      	ldrh	r4, [r2, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004a4a:	f025 0210 	bic.w	r2, r5, #16
 8004a4e:	60ca      	str	r2, [r1, #12]
   Lcd_RS_DATA();
 8004a50:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004a54:	68c2      	ldr	r2, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004a56:	b2e1      	uxtb	r1, r4
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004a58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a5c:	60c2      	str	r2, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a5e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004a60:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a62:	8913      	ldrh	r3, [r2, #8]
 8004a64:	0798      	lsls	r0, r3, #30
 8004a66:	d5fc      	bpl.n	8004a62 <Lcd_Set_Cursor+0x31a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004a68:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004a6c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004a70:	8913      	ldrh	r3, [r2, #8]
 8004a72:	0619      	lsls	r1, r3, #24
 8004a74:	d4fc      	bmi.n	8004a70 <Lcd_Set_Cursor+0x328>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	f042 0210 	orr.w	r2, r2, #16
 8004a84:	60da      	str	r2, [r3, #12]
}

void Lcd_Set_Cursor(unsigned short x, unsigned short y)
{
	Lcd_Set_Windows(x,y,x,y);
}
 8004a86:	bcf0      	pop	{r4, r5, r6, r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop

08004a8c <Lcd_Draw_Back_Color>:

void Lcd_Draw_Back_Color(unsigned short Color)
{
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);
 8004a8e:	f240 5794 	movw	r7, #1428	; 0x594
 8004a92:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8004a96:	883a      	ldrh	r2, [r7, #0]
 8004a98:	887b      	ldrh	r3, [r7, #2]
{
	Lcd_Set_Windows(x,y,x,y);
}

void Lcd_Draw_Back_Color(unsigned short Color)
{
 8004a9a:	4605      	mov	r5, r0
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	b292      	uxth	r2, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f7ff fc40 	bl	800432c <Lcd_Set_Windows>

	Lcd_CS_EN();
 8004aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ab4:	68d1      	ldr	r1, [r2, #12]
	Lcd_RS_REG();
 8004ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
 8004aba:	f021 0110 	bic.w	r1, r1, #16
 8004abe:	60d1      	str	r1, [r2, #12]
	Lcd_RS_REG();
 8004ac0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ac4:	68da      	ldr	r2, [r3, #12]
}

void Lcd_Draw_Back_Color(unsigned short Color)
{
	unsigned int i;
	unsigned char c0 = Color >> 8;
 8004ac6:	0a2e      	lsrs	r6, r5, #8
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	60da      	str	r2, [r3, #12]

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	883c      	ldrh	r4, [r7, #0]
 8004ad2:	b2ed      	uxtb	r5, r5
 8004ad4:	fb04 f403 	mul.w	r4, r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ad8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004adc:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	b1a4      	cbz	r4, 8004b0e <Lcd_Draw_Back_Color+0x82>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ae4:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ae6:	891a      	ldrh	r2, [r3, #8]
 8004ae8:	0797      	lsls	r7, r2, #30
 8004aea:	d5fc      	bpl.n	8004ae6 <Lcd_Draw_Back_Color+0x5a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004aec:	8919      	ldrh	r1, [r3, #8]
 8004aee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004af2:	0609      	lsls	r1, r1, #24
 8004af4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004af8:	d4f8      	bmi.n	8004aec <Lcd_Draw_Back_Color+0x60>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004afa:	8195      	strh	r5, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004afc:	891a      	ldrh	r2, [r3, #8]
 8004afe:	0792      	lsls	r2, r2, #30
 8004b00:	d5fc      	bpl.n	8004afc <Lcd_Draw_Back_Color+0x70>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004b02:	891a      	ldrh	r2, [r3, #8]
 8004b04:	0617      	lsls	r7, r2, #24
 8004b06:	d4fc      	bmi.n	8004b02 <Lcd_Draw_Back_Color+0x76>
	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004b08:	3001      	adds	r0, #1
 8004b0a:	42a0      	cmp	r0, r4
 8004b0c:	d1ea      	bne.n	8004ae4 <Lcd_Draw_Back_Color+0x58>
	{
		_SPI1_Write_Byte(c0);
		_SPI1_Write_Byte(c1);
	}

	Lcd_CS_DIS();
 8004b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	f042 0210 	orr.w	r2, r2, #16
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b20 <Lcd_Clr_Screen>:
}

void Lcd_Clr_Screen(void)
{
	Lcd_Draw_Back_Color(BLACK);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7ff bfb3 	b.w	8004a8c <Lcd_Draw_Back_Color>
 8004b26:	bf00      	nop

08004b28 <Lcd_Draw_Box>:
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
 8004b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;
	int xe,ye;
	xe = xs+w-1;
	ye = ys+h-1;
 8004b2c:	440b      	add	r3, r1
{
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;
	int xe,ye;
	xe = xs+w-1;
 8004b2e:	4402      	add	r2, r0
 8004b30:	3a01      	subs	r2, #1
	ye = ys+h-1;
 8004b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8004b36:	f240 133f 	movw	r3, #319	; 0x13f
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	bfb4      	ite	lt
 8004b3e:	4617      	movlt	r7, r2
 8004b40:	461f      	movge	r7, r3
 8004b42:	f1b8 0fef 	cmp.w	r8, #239	; 0xef
 8004b46:	bfa8      	it	ge
 8004b48:	f04f 08ef 	movge.w	r8, #239	; 0xef
{
	Lcd_Draw_Back_Color(BLACK);
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
 8004b4c:	4606      	mov	r6, r0
 8004b4e:	460c      	mov	r4, r1
	xe = xs+w-1;
	ye = ys+h-1;
	if(xe >= 320) xe=319;
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);
 8004b50:	b2ba      	uxth	r2, r7
 8004b52:	fa1f f388 	uxth.w	r3, r8
 8004b56:	b280      	uxth	r0, r0
 8004b58:	b289      	uxth	r1, r1
{
	Lcd_Draw_Back_Color(BLACK);
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
 8004b5a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	xe = xs+w-1;
	ye = ys+h-1;
	if(xe >= 320) xe=319;
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);
 8004b5e:	f7ff fbe5 	bl	800432c <Lcd_Set_Windows>

	Lcd_CS_EN();
 8004b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b66:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004b6a:	68d1      	ldr	r1, [r2, #12]
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b6c:	ebc4 0408 	rsb	r4, r4, r8
	if(xe >= 320) xe=319;
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
 8004b70:	f021 0110 	bic.w	r1, r1, #16
	Lcd_RS_REG();
 8004b74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b78:	f2c4 0301 	movt	r3, #16385	; 0x4001

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b7c:	1bbe      	subs	r6, r7, r6
	if(xe >= 320) xe=319;
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
 8004b7e:	60d1      	str	r1, [r2, #12]
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b80:	3401      	adds	r4, #1
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004b82:	68da      	ldr	r2, [r3, #12]

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b84:	fb06 4404 	mla	r4, r6, r4, r4
	if(ye >= 240) ye=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8c:	60da      	str	r2, [r3, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
	unsigned int i;
	unsigned char c0 = Color >> 8;
 8004b92:	0a2e      	lsrs	r6, r5, #8
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004b98:	b2ed      	uxtb	r5, r5
	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	b1a4      	cbz	r4, 8004bc8 <Lcd_Draw_Box+0xa0>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b9e:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ba0:	891a      	ldrh	r2, [r3, #8]
 8004ba2:	0792      	lsls	r2, r2, #30
 8004ba4:	d5fc      	bpl.n	8004ba0 <Lcd_Draw_Box+0x78>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004ba6:	8919      	ldrh	r1, [r3, #8]
 8004ba8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004bac:	060f      	lsls	r7, r1, #24
 8004bae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004bb2:	d4f8      	bmi.n	8004ba6 <Lcd_Draw_Box+0x7e>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004bb4:	8195      	strh	r5, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004bb6:	891a      	ldrh	r2, [r3, #8]
 8004bb8:	0791      	lsls	r1, r2, #30
 8004bba:	d5fc      	bpl.n	8004bb6 <Lcd_Draw_Box+0x8e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004bbc:	891a      	ldrh	r2, [r3, #8]
 8004bbe:	0612      	lsls	r2, r2, #24
 8004bc0:	d4fc      	bmi.n	8004bbc <Lcd_Draw_Box+0x94>
	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	42a0      	cmp	r0, r4
 8004bc6:	d1ea      	bne.n	8004b9e <Lcd_Draw_Box+0x76>
	{
		_SPI1_Write_Byte(c0);
		_SPI1_Write_Byte(c1);
	}

	Lcd_CS_DIS();
 8004bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	f042 0210 	orr.w	r2, r2, #16
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bdc <Lcd_Init>:
}

void Lcd_Init(int mode)
{  
 8004bdc:	b530      	push	{r4, r5, lr}
unsigned short  POINT_COLOR = 0x0000;
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
 8004bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004be2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004be6:	6991      	ldr	r1, [r2, #24]
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
unsigned short  POINT_COLOR = 0x0000;
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
 8004bec:	f041 0104 	orr.w	r1, r1, #4
 8004bf0:	6191      	str	r1, [r2, #24]
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004bf2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004bf6:	6819      	ldr	r1, [r3, #0]
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004bf8:	f44f 5440 	mov.w	r4, #12288	; 0x3000
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004bfc:	b289      	uxth	r1, r1
 8004bfe:	f041 4134 	orr.w	r1, r1, #3019898880	; 0xb4000000
 8004c02:	f441 0133 	orr.w	r1, r1, #11730944	; 0xb30000
 8004c06:	6019      	str	r1, [r3, #0]
	Macro_Set_Bit(GPIOA->ODR, 4);
 8004c08:	68d9      	ldr	r1, [r3, #12]

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004c0a:	f2c4 0401 	movt	r4, #16385	; 0x4001

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);
 8004c0e:	f041 0110 	orr.w	r1, r1, #16
 8004c12:	60d9      	str	r1, [r3, #12]

	Macro_Set_Bit(RCC->APB2ENR, 12);
 8004c14:	6995      	ldr	r5, [r2, #24]
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004c16:	f44f 7141 	mov.w	r1, #772	; 0x304
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
 8004c1a:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8004c1e:	6195      	str	r5, [r2, #24]
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004c20:	8021      	strh	r1, [r4, #0]
	Macro_Set_Bit(SPI1->CR1, 6);
 8004c22:	8822      	ldrh	r2, [r4, #0]
void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c24:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
	Macro_Set_Bit(SPI1->CR1, 6);
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2e:	8022      	strh	r2, [r4, #0]
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8004c30:	681a      	ldr	r2, [r3, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c32:	f2c4 0101 	movt	r1, #16385	; 0x4001
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8004c36:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004c3a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004c3e:	601a      	str	r2, [r3, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8004c40:	685a      	ldr	r2, [r3, #4]

	Lcd_CS_DIS();
}

void Lcd_Init(int mode)
{  
 8004c42:	b085      	sub	sp, #20
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8004c44:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8004c48:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004c4c:	605a      	str	r2, [r3, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c4e:	680d      	ldr	r5, [r1, #0]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c50:	2400      	movs	r4, #0
void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c52:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
 8004c56:	f445 3540 	orr.w	r5, r5, #196608	; 0x30000
 8004c5a:	600d      	str	r5, [r1, #0]
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8004c5c:	684d      	ldr	r5, [r1, #4]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c5e:	f643 72ff 	movw	r2, #16383	; 0x3fff
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8004c62:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8004c66:	f045 0530 	orr.w	r5, r5, #48	; 0x30
 8004c6a:	604d      	str	r5, [r1, #4]

void Lcd_Init(int mode)
{  
	_SPI1_Init();
	Lcd_GPIO_Init();
	Lcd_LED_OFF();
 8004c6c:	68dd      	ldr	r5, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c6e:	f2c0 0206 	movt	r2, #6

void Lcd_Init(int mode)
{  
	_SPI1_Init();
	Lcd_GPIO_Init();
	Lcd_LED_OFF();
 8004c72:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004c76:	60dd      	str	r5, [r3, #12]
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8004c78:	68cb      	ldr	r3, [r1, #12]
 8004c7a:	f023 0310 	bic.w	r3, r3, #16
 8004c7e:	60cb      	str	r3, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c80:	9403      	str	r4, [sp, #12]
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	dc05      	bgt.n	8004c94 <Lcd_Init+0xb8>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	ddf9      	ble.n	8004c88 <Lcd_Init+0xac>

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8004c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004c9c:	68d9      	ldr	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c9e:	2200      	movs	r2, #0

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8004ca0:	f041 0110 	orr.w	r1, r1, #16
 8004ca4:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004ca6:	9202      	str	r2, [sp, #8]
 8004ca8:	9b02      	ldr	r3, [sp, #8]
 8004caa:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004cae:	f2c0 0203 	movt	r2, #3
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	dc05      	bgt.n	8004cc2 <Lcd_Init+0xe6>
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	9302      	str	r3, [sp, #8]
 8004cbc:	9b02      	ldr	r3, [sp, #8]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	ddf9      	ble.n	8004cb6 <Lcd_Init+0xda>
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004cca:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 8004ccc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004cd0:	f021 0110 	bic.w	r1, r1, #16
 8004cd4:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8004cd6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004cda:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004cdc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ce0:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004ce4:	f424 7400 	bic.w	r4, r4, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ce8:	21cf      	movs	r1, #207	; 0xcf
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004cea:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004cec:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004cee:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004cf0:	8913      	ldrh	r3, [r2, #8]
 8004cf2:	079b      	lsls	r3, r3, #30
 8004cf4:	d5fc      	bpl.n	8004cf0 <Lcd_Init+0x114>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004cf6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004cfa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004cfe:	890a      	ldrh	r2, [r1, #8]
 8004d00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d04:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	d1f5      	bne.n	8004cfe <Lcd_Init+0x122>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d16:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004d1a:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d1c:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004d20:	f045 0510 	orr.w	r5, r5, #16
 8004d24:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d26:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8004d28:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d2c:	f025 0510 	bic.w	r5, r5, #16
 8004d30:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8004d32:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d34:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d36:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004d3a:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d3c:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d3e:	890b      	ldrh	r3, [r1, #8]
 8004d40:	079d      	lsls	r5, r3, #30
 8004d42:	d5fc      	bpl.n	8004d3e <Lcd_Init+0x162>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004d44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d48:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004d4c:	890a      	ldrh	r2, [r1, #8]
 8004d4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d52:	0614      	lsls	r4, r2, #24
 8004d54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004d58:	d4f8      	bmi.n	8004d4c <Lcd_Init+0x170>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d5e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004d62:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d68:	f044 0410 	orr.w	r4, r4, #16
 8004d6c:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d6e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004d70:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d74:	f024 0410 	bic.w	r4, r4, #16
 8004d78:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004d7a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d7c:	24d9      	movs	r4, #217	; 0xd9
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d84:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d86:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d88:	8913      	ldrh	r3, [r2, #8]
 8004d8a:	0799      	lsls	r1, r3, #30
 8004d8c:	d5fc      	bpl.n	8004d88 <Lcd_Init+0x1ac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004d8e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d92:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004d96:	890a      	ldrh	r2, [r1, #8]
 8004d98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d9c:	0612      	lsls	r2, r2, #24
 8004d9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004da2:	d4f8      	bmi.n	8004d96 <Lcd_Init+0x1ba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004dac:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004dae:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004db2:	f044 0410 	orr.w	r4, r4, #16
 8004db6:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004db8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004dba:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004dbe:	f024 0410 	bic.w	r4, r4, #16
 8004dc2:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004dc4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004dc6:	2430      	movs	r4, #48	; 0x30
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004dce:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004dd0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004dd2:	8913      	ldrh	r3, [r2, #8]
 8004dd4:	079d      	lsls	r5, r3, #30
 8004dd6:	d5fc      	bpl.n	8004dd2 <Lcd_Init+0x1f6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004dd8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ddc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004de0:	890a      	ldrh	r2, [r1, #8]
 8004de2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004de6:	0614      	lsls	r4, r2, #24
 8004de8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004dec:	d4f8      	bmi.n	8004de0 <Lcd_Init+0x204>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004dee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004df6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004df8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004dfc:	f044 0410 	orr.w	r4, r4, #16
 8004e00:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004e02:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8004e04:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004e08:	f024 0410 	bic.w	r4, r4, #16
 8004e0c:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004e0e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e10:	24ed      	movs	r4, #237	; 0xed
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004e12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e16:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e18:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e1a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e1c:	8913      	ldrh	r3, [r2, #8]
 8004e1e:	0799      	lsls	r1, r3, #30
 8004e20:	d5fc      	bpl.n	8004e1c <Lcd_Init+0x240>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004e22:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e26:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004e2a:	890a      	ldrh	r2, [r1, #8]
 8004e2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e30:	0612      	lsls	r2, r2, #24
 8004e32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e36:	d4f8      	bmi.n	8004e2a <Lcd_Init+0x24e>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004e40:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e42:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004e46:	f044 0410 	orr.w	r4, r4, #16
 8004e4a:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e4c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004e4e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e52:	f024 0410 	bic.w	r4, r4, #16
 8004e56:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004e58:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e5a:	2464      	movs	r4, #100	; 0x64
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e60:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e62:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e64:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e66:	8913      	ldrh	r3, [r2, #8]
 8004e68:	079d      	lsls	r5, r3, #30
 8004e6a:	d5fc      	bpl.n	8004e66 <Lcd_Init+0x28a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004e6c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e70:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004e74:	890a      	ldrh	r2, [r1, #8]
 8004e76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e7a:	0614      	lsls	r4, r2, #24
 8004e7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e80:	d4f8      	bmi.n	8004e74 <Lcd_Init+0x298>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e86:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004e8a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004e90:	f044 0410 	orr.w	r4, r4, #16
 8004e94:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e96:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004e98:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e9c:	f024 0410 	bic.w	r4, r4, #16
 8004ea0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004ea2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ea4:	2403      	movs	r4, #3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004eac:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004eae:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004eb0:	8913      	ldrh	r3, [r2, #8]
 8004eb2:	0799      	lsls	r1, r3, #30
 8004eb4:	d5fc      	bpl.n	8004eb0 <Lcd_Init+0x2d4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004eb6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004eba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004ebe:	890a      	ldrh	r2, [r1, #8]
 8004ec0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ec4:	0612      	lsls	r2, r2, #24
 8004ec6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004eca:	d4f8      	bmi.n	8004ebe <Lcd_Init+0x2e2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ed4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ed6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004eda:	f044 0410 	orr.w	r4, r4, #16
 8004ede:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004ee0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004ee2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004ee6:	f024 0410 	bic.w	r4, r4, #16
 8004eea:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004eec:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004eee:	2412      	movs	r4, #18
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ef6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ef8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004efa:	8913      	ldrh	r3, [r2, #8]
 8004efc:	079d      	lsls	r5, r3, #30
 8004efe:	d5fc      	bpl.n	8004efa <Lcd_Init+0x31e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004f00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f04:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f08:	890a      	ldrh	r2, [r1, #8]
 8004f0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f0e:	0614      	lsls	r4, r2, #24
 8004f10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f14:	d4f8      	bmi.n	8004f08 <Lcd_Init+0x32c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f1a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004f1e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004f20:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f24:	f044 0410 	orr.w	r4, r4, #16
 8004f28:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004f2a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004f2c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004f30:	f024 0410 	bic.w	r4, r4, #16
 8004f34:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004f36:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f38:	2481      	movs	r4, #129	; 0x81
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f40:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f42:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f44:	8913      	ldrh	r3, [r2, #8]
 8004f46:	0799      	lsls	r1, r3, #30
 8004f48:	d5fc      	bpl.n	8004f44 <Lcd_Init+0x368>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004f4a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f4e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f52:	890a      	ldrh	r2, [r1, #8]
 8004f54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f58:	0612      	lsls	r2, r2, #24
 8004f5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f5e:	d4f8      	bmi.n	8004f52 <Lcd_Init+0x376>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f64:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004f68:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004f6a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f6e:	f044 0410 	orr.w	r4, r4, #16
 8004f72:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004f74:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8004f76:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004f7a:	f024 0410 	bic.w	r4, r4, #16
 8004f7e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004f80:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f82:	24e8      	movs	r4, #232	; 0xe8
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f88:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f8a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f8c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f8e:	8913      	ldrh	r3, [r2, #8]
 8004f90:	079d      	lsls	r5, r3, #30
 8004f92:	d5fc      	bpl.n	8004f8e <Lcd_Init+0x3b2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004f94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f98:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f9c:	890a      	ldrh	r2, [r1, #8]
 8004f9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fa2:	0614      	lsls	r4, r2, #24
 8004fa4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004fa8:	d4f8      	bmi.n	8004f9c <Lcd_Init+0x3c0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004fb2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004fb4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004fb8:	f044 0410 	orr.w	r4, r4, #16
 8004fbc:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004fbe:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004fc0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004fc4:	f024 0410 	bic.w	r4, r4, #16
 8004fc8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004fca:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004fcc:	2485      	movs	r4, #133	; 0x85
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004fd4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004fd6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004fd8:	8913      	ldrh	r3, [r2, #8]
 8004fda:	0799      	lsls	r1, r3, #30
 8004fdc:	d5fc      	bpl.n	8004fd8 <Lcd_Init+0x3fc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004fde:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004fe2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004fe6:	890a      	ldrh	r2, [r1, #8]
 8004fe8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fec:	0612      	lsls	r2, r2, #24
 8004fee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ff2:	d4f8      	bmi.n	8004fe6 <Lcd_Init+0x40a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ff8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ffc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ffe:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005002:	f044 0410 	orr.w	r4, r4, #16
 8005006:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005008:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800500a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800500e:	f024 0410 	bic.w	r4, r4, #16
 8005012:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005014:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005016:	2410      	movs	r4, #16
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800501e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005020:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005022:	8913      	ldrh	r3, [r2, #8]
 8005024:	079d      	lsls	r5, r3, #30
 8005026:	d5fc      	bpl.n	8005022 <Lcd_Init+0x446>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005028:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800502c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005030:	890a      	ldrh	r2, [r1, #8]
 8005032:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005036:	0614      	lsls	r4, r2, #24
 8005038:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800503c:	d4f8      	bmi.n	8005030 <Lcd_Init+0x454>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800503e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005042:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005046:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005048:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800504c:	f044 0410 	orr.w	r4, r4, #16
 8005050:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005052:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005054:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005058:	f024 0410 	bic.w	r4, r4, #16
 800505c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800505e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005060:	247a      	movs	r4, #122	; 0x7a
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005068:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800506a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800506c:	8913      	ldrh	r3, [r2, #8]
 800506e:	0799      	lsls	r1, r3, #30
 8005070:	d5fc      	bpl.n	800506c <Lcd_Init+0x490>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005072:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005076:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800507a:	890a      	ldrh	r2, [r1, #8]
 800507c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005080:	0612      	lsls	r2, r2, #24
 8005082:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005086:	d4f8      	bmi.n	800507a <Lcd_Init+0x49e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800508c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005090:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005092:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005096:	f044 0410 	orr.w	r4, r4, #16
 800509a:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800509c:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800509e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80050a2:	f024 0410 	bic.w	r4, r4, #16
 80050a6:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80050a8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050aa:	24cb      	movs	r4, #203	; 0xcb
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80050ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050b0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80050b2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050b4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80050b6:	8913      	ldrh	r3, [r2, #8]
 80050b8:	079d      	lsls	r5, r3, #30
 80050ba:	d5fc      	bpl.n	80050b6 <Lcd_Init+0x4da>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80050bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050c0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80050c4:	890a      	ldrh	r2, [r1, #8]
 80050c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050ca:	0614      	lsls	r4, r2, #24
 80050cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050d0:	d4f8      	bmi.n	80050c4 <Lcd_Init+0x4e8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80050d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80050da:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80050dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80050e0:	f044 0410 	orr.w	r4, r4, #16
 80050e4:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80050e6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80050e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80050ec:	f024 0410 	bic.w	r4, r4, #16
 80050f0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80050f2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050f4:	2439      	movs	r4, #57	; 0x39
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80050fc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050fe:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005100:	8913      	ldrh	r3, [r2, #8]
 8005102:	0799      	lsls	r1, r3, #30
 8005104:	d5fc      	bpl.n	8005100 <Lcd_Init+0x524>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005106:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800510a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800510e:	890a      	ldrh	r2, [r1, #8]
 8005110:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005114:	0612      	lsls	r2, r2, #24
 8005116:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800511a:	d4f8      	bmi.n	800510e <Lcd_Init+0x532>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800511c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005120:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005124:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005126:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800512a:	f044 0410 	orr.w	r4, r4, #16
 800512e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005130:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005132:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005136:	f024 0410 	bic.w	r4, r4, #16
 800513a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800513c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800513e:	242c      	movs	r4, #44	; 0x2c
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005146:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005148:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800514a:	8913      	ldrh	r3, [r2, #8]
 800514c:	079b      	lsls	r3, r3, #30
 800514e:	d5fc      	bpl.n	800514a <Lcd_Init+0x56e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005150:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005154:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005158:	890a      	ldrh	r2, [r1, #8]
 800515a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800515e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005162:	b292      	uxth	r2, r2
 8005164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005168:	2a00      	cmp	r2, #0
 800516a:	d1f5      	bne.n	8005158 <Lcd_Init+0x57c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800516c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005170:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005174:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005176:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800517a:	f045 0510 	orr.w	r5, r5, #16
 800517e:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005180:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005182:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005186:	f025 0510 	bic.w	r5, r5, #16
 800518a:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800518c:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800518e:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005190:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005194:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005196:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005198:	890b      	ldrh	r3, [r1, #8]
 800519a:	079d      	lsls	r5, r3, #30
 800519c:	d5fc      	bpl.n	8005198 <Lcd_Init+0x5bc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800519e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80051a2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80051a6:	890a      	ldrh	r2, [r1, #8]
 80051a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80051ac:	0614      	lsls	r4, r2, #24
 80051ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051b2:	d4f8      	bmi.n	80051a6 <Lcd_Init+0x5ca>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80051b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80051bc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80051be:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80051c2:	f044 0410 	orr.w	r4, r4, #16
 80051c6:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80051c8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80051ca:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80051ce:	f024 0410 	bic.w	r4, r4, #16
 80051d2:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80051d4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051d6:	2434      	movs	r4, #52	; 0x34
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80051d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051dc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80051de:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051e0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80051e2:	8913      	ldrh	r3, [r2, #8]
 80051e4:	0799      	lsls	r1, r3, #30
 80051e6:	d5fc      	bpl.n	80051e2 <Lcd_Init+0x606>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80051e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80051ec:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80051f0:	890a      	ldrh	r2, [r1, #8]
 80051f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80051f6:	0612      	lsls	r2, r2, #24
 80051f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051fc:	d4f8      	bmi.n	80051f0 <Lcd_Init+0x614>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80051fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005202:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005206:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005208:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800520c:	f044 0410 	orr.w	r4, r4, #16
 8005210:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005212:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005214:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005218:	f024 0410 	bic.w	r4, r4, #16
 800521c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800521e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005220:	2402      	movs	r4, #2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005226:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005228:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800522a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800522c:	8913      	ldrh	r3, [r2, #8]
 800522e:	079d      	lsls	r5, r3, #30
 8005230:	d5fc      	bpl.n	800522c <Lcd_Init+0x650>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005232:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005236:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800523a:	890a      	ldrh	r2, [r1, #8]
 800523c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005240:	0614      	lsls	r4, r2, #24
 8005242:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005246:	d4f8      	bmi.n	800523a <Lcd_Init+0x65e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800524c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005250:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005252:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005256:	f044 0410 	orr.w	r4, r4, #16
 800525a:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800525c:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800525e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005262:	f024 0410 	bic.w	r4, r4, #16
 8005266:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005268:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800526a:	24f7      	movs	r4, #247	; 0xf7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800526c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005270:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005272:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005274:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005276:	8913      	ldrh	r3, [r2, #8]
 8005278:	0799      	lsls	r1, r3, #30
 800527a:	d5fc      	bpl.n	8005276 <Lcd_Init+0x69a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800527c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005280:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005284:	890a      	ldrh	r2, [r1, #8]
 8005286:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800528a:	0612      	lsls	r2, r2, #24
 800528c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005290:	d4f8      	bmi.n	8005284 <Lcd_Init+0x6a8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005296:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800529a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800529c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80052a0:	f044 0410 	orr.w	r4, r4, #16
 80052a4:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80052a6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80052a8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80052ac:	f024 0410 	bic.w	r4, r4, #16
 80052b0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80052b2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80052b4:	2420      	movs	r4, #32
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80052b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ba:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80052bc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80052be:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80052c0:	8913      	ldrh	r3, [r2, #8]
 80052c2:	079d      	lsls	r5, r3, #30
 80052c4:	d5fc      	bpl.n	80052c0 <Lcd_Init+0x6e4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80052c6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80052ca:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80052ce:	890a      	ldrh	r2, [r1, #8]
 80052d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052d4:	0614      	lsls	r4, r2, #24
 80052d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052da:	d4f8      	bmi.n	80052ce <Lcd_Init+0x6f2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80052dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80052e4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80052e6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80052ea:	f044 0410 	orr.w	r4, r4, #16
 80052ee:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80052f0:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80052f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80052f6:	f024 0410 	bic.w	r4, r4, #16
 80052fa:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80052fc:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80052fe:	24ea      	movs	r4, #234	; 0xea
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005304:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005306:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005308:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800530a:	8913      	ldrh	r3, [r2, #8]
 800530c:	0799      	lsls	r1, r3, #30
 800530e:	d5fc      	bpl.n	800530a <Lcd_Init+0x72e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005310:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005314:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005318:	890a      	ldrh	r2, [r1, #8]
 800531a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800531e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005322:	b292      	uxth	r2, r2
 8005324:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005328:	2a00      	cmp	r2, #0
 800532a:	d1f5      	bne.n	8005318 <Lcd_Init+0x73c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800532c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005330:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005334:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005336:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800533a:	f045 0510 	orr.w	r5, r5, #16
 800533e:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005340:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005342:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005346:	f025 0510 	bic.w	r5, r5, #16
 800534a:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800534c:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800534e:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005350:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005354:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005356:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005358:	890b      	ldrh	r3, [r1, #8]
 800535a:	079b      	lsls	r3, r3, #30
 800535c:	d5fc      	bpl.n	8005358 <Lcd_Init+0x77c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800535e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005362:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005366:	890a      	ldrh	r2, [r1, #8]
 8005368:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800536c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005370:	b292      	uxth	r2, r2
 8005372:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005376:	2a00      	cmp	r2, #0
 8005378:	d1f5      	bne.n	8005366 <Lcd_Init+0x78a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800537a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005382:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005384:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005388:	f045 0510 	orr.w	r5, r5, #16
 800538c:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800538e:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005390:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005394:	f025 0510 	bic.w	r5, r5, #16
 8005398:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800539a:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800539c:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800539e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80053a2:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80053a4:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80053a6:	890b      	ldrh	r3, [r1, #8]
 80053a8:	079d      	lsls	r5, r3, #30
 80053aa:	d5fc      	bpl.n	80053a6 <Lcd_Init+0x7ca>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80053ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80053b0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80053b4:	890a      	ldrh	r2, [r1, #8]
 80053b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80053ba:	0614      	lsls	r4, r2, #24
 80053bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053c0:	d4f8      	bmi.n	80053b4 <Lcd_Init+0x7d8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80053c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80053ca:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80053cc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80053d0:	f044 0410 	orr.w	r4, r4, #16
 80053d4:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80053d6:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80053d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80053dc:	f024 0410 	bic.w	r4, r4, #16
 80053e0:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80053e2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80053e4:	24c0      	movs	r4, #192	; 0xc0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80053e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053ea:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80053ec:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80053ee:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80053f0:	8913      	ldrh	r3, [r2, #8]
 80053f2:	0799      	lsls	r1, r3, #30
 80053f4:	d5fc      	bpl.n	80053f0 <Lcd_Init+0x814>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80053f6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80053fa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80053fe:	890a      	ldrh	r2, [r1, #8]
 8005400:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005404:	0612      	lsls	r2, r2, #24
 8005406:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800540a:	d4f8      	bmi.n	80053fe <Lcd_Init+0x822>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800540c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005410:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005414:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005416:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800541a:	f044 0410 	orr.w	r4, r4, #16
 800541e:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005420:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005422:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005426:	f024 0410 	bic.w	r4, r4, #16
 800542a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800542c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800542e:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005436:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005438:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800543a:	8913      	ldrh	r3, [r2, #8]
 800543c:	079d      	lsls	r5, r3, #30
 800543e:	d5fc      	bpl.n	800543a <Lcd_Init+0x85e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005440:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005444:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005448:	890a      	ldrh	r2, [r1, #8]
 800544a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800544e:	0614      	lsls	r4, r2, #24
 8005450:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005454:	d4f8      	bmi.n	8005448 <Lcd_Init+0x86c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800545e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005460:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005464:	f044 0410 	orr.w	r4, r4, #16
 8005468:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800546a:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800546c:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005470:	f024 0410 	bic.w	r4, r4, #16
 8005474:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005476:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005478:	24c1      	movs	r4, #193	; 0xc1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800547a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800547e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005480:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005482:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005484:	8913      	ldrh	r3, [r2, #8]
 8005486:	0799      	lsls	r1, r3, #30
 8005488:	d5fc      	bpl.n	8005484 <Lcd_Init+0x8a8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800548a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800548e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005492:	890a      	ldrh	r2, [r1, #8]
 8005494:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005498:	0612      	lsls	r2, r2, #24
 800549a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800549e:	d4f8      	bmi.n	8005492 <Lcd_Init+0x8b6>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80054a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80054a8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80054aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80054ae:	f044 0410 	orr.w	r4, r4, #16
 80054b2:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80054b4:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80054b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80054ba:	f024 0410 	bic.w	r4, r4, #16
 80054be:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80054c0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80054c2:	2412      	movs	r4, #18
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80054ca:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80054cc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80054ce:	8913      	ldrh	r3, [r2, #8]
 80054d0:	079d      	lsls	r5, r3, #30
 80054d2:	d5fc      	bpl.n	80054ce <Lcd_Init+0x8f2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80054d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80054d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80054dc:	890a      	ldrh	r2, [r1, #8]
 80054de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054e2:	0614      	lsls	r4, r2, #24
 80054e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054e8:	d4f8      	bmi.n	80054dc <Lcd_Init+0x900>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80054ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80054f2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80054f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80054f8:	f044 0410 	orr.w	r4, r4, #16
 80054fc:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80054fe:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005500:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005504:	f024 0410 	bic.w	r4, r4, #16
 8005508:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800550a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800550c:	24c5      	movs	r4, #197	; 0xc5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800550e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005512:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005514:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005516:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005518:	8913      	ldrh	r3, [r2, #8]
 800551a:	0799      	lsls	r1, r3, #30
 800551c:	d5fc      	bpl.n	8005518 <Lcd_Init+0x93c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800551e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005522:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005526:	890a      	ldrh	r2, [r1, #8]
 8005528:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800552c:	0612      	lsls	r2, r2, #24
 800552e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005532:	d4f8      	bmi.n	8005526 <Lcd_Init+0x94a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005538:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800553c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800553e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005542:	f044 0410 	orr.w	r4, r4, #16
 8005546:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005548:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800554a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800554e:	f024 0410 	bic.w	r4, r4, #16
 8005552:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005554:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005556:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800555e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005560:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005562:	8913      	ldrh	r3, [r2, #8]
 8005564:	079d      	lsls	r5, r3, #30
 8005566:	d5fc      	bpl.n	8005562 <Lcd_Init+0x986>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005568:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800556c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005570:	890a      	ldrh	r2, [r1, #8]
 8005572:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005576:	0614      	lsls	r4, r2, #24
 8005578:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800557c:	d4f8      	bmi.n	8005570 <Lcd_Init+0x994>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800557e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005582:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005586:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005588:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800558c:	f044 0410 	orr.w	r4, r4, #16
 8005590:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005592:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005594:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005598:	f024 0410 	bic.w	r4, r4, #16
 800559c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800559e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055a0:	2426      	movs	r4, #38	; 0x26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055a8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055aa:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055ac:	8913      	ldrh	r3, [r2, #8]
 80055ae:	0799      	lsls	r1, r3, #30
 80055b0:	d5fc      	bpl.n	80055ac <Lcd_Init+0x9d0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80055b2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80055b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80055ba:	890a      	ldrh	r2, [r1, #8]
 80055bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055c0:	0612      	lsls	r2, r2, #24
 80055c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055c6:	d4f8      	bmi.n	80055ba <Lcd_Init+0x9de>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80055c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80055d0:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80055d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80055d6:	f044 0410 	orr.w	r4, r4, #16
 80055da:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80055dc:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80055de:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80055e2:	f024 0410 	bic.w	r4, r4, #16
 80055e6:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80055e8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055ea:	24c7      	movs	r4, #199	; 0xc7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80055ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055f0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055f2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055f4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055f6:	8913      	ldrh	r3, [r2, #8]
 80055f8:	079d      	lsls	r5, r3, #30
 80055fa:	d5fc      	bpl.n	80055f6 <Lcd_Init+0xa1a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80055fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005600:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005604:	890a      	ldrh	r2, [r1, #8]
 8005606:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800560a:	0614      	lsls	r4, r2, #24
 800560c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005610:	d4f8      	bmi.n	8005604 <Lcd_Init+0xa28>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005616:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800561a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800561c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005620:	f044 0410 	orr.w	r4, r4, #16
 8005624:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005626:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005628:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800562c:	f024 0410 	bic.w	r4, r4, #16
 8005630:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005632:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005634:	24b7      	movs	r4, #183	; 0xb7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800563c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800563e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005640:	8913      	ldrh	r3, [r2, #8]
 8005642:	0799      	lsls	r1, r3, #30
 8005644:	d5fc      	bpl.n	8005640 <Lcd_Init+0xa64>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005646:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800564a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800564e:	890a      	ldrh	r2, [r1, #8]
 8005650:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005654:	0612      	lsls	r2, r2, #24
 8005656:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800565a:	d4f8      	bmi.n	800564e <Lcd_Init+0xa72>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800565c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005660:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005664:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005666:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800566a:	f044 0410 	orr.w	r4, r4, #16
 800566e:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005670:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005672:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005676:	f024 0410 	bic.w	r4, r4, #16
 800567a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800567c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800567e:	24b8      	movs	r4, #184	; 0xb8
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005684:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005686:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005688:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800568a:	8913      	ldrh	r3, [r2, #8]
 800568c:	079d      	lsls	r5, r3, #30
 800568e:	d5fc      	bpl.n	800568a <Lcd_Init+0xaae>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005690:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005694:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005698:	890a      	ldrh	r2, [r1, #8]
 800569a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800569e:	0614      	lsls	r4, r2, #24
 80056a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80056a4:	d4f8      	bmi.n	8005698 <Lcd_Init+0xabc>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80056a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056aa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80056ae:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80056b0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80056b4:	f044 0410 	orr.w	r4, r4, #16
 80056b8:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80056ba:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80056bc:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80056c0:	f024 0410 	bic.w	r4, r4, #16
 80056c4:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80056c6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80056c8:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80056ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ce:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056d0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80056d2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056d4:	8913      	ldrh	r3, [r2, #8]
 80056d6:	0799      	lsls	r1, r3, #30
 80056d8:	d5fc      	bpl.n	80056d4 <Lcd_Init+0xaf8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80056da:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056de:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80056e2:	890a      	ldrh	r2, [r1, #8]
 80056e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80056e8:	0612      	lsls	r2, r2, #24
 80056ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80056ee:	d4f8      	bmi.n	80056e2 <Lcd_Init+0xb06>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80056f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80056f8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80056fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80056fe:	f044 0410 	orr.w	r4, r4, #16
 8005702:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005704:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005706:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800570a:	f024 0410 	bic.w	r4, r4, #16
 800570e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005710:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005712:	24ba      	movs	r4, #186	; 0xba
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005714:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005718:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800571a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800571c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800571e:	8913      	ldrh	r3, [r2, #8]
 8005720:	079d      	lsls	r5, r3, #30
 8005722:	d5fc      	bpl.n	800571e <Lcd_Init+0xb42>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005724:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005728:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800572c:	890a      	ldrh	r2, [r1, #8]
 800572e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005732:	0614      	lsls	r4, r2, #24
 8005734:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005738:	d4f8      	bmi.n	800572c <Lcd_Init+0xb50>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800573a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800573e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005742:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005744:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005748:	f044 0410 	orr.w	r4, r4, #16
 800574c:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800574e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005750:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005754:	f024 0410 	bic.w	r4, r4, #16
 8005758:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800575a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800575c:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800575e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005762:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005764:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005766:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005768:	8913      	ldrh	r3, [r2, #8]
 800576a:	0799      	lsls	r1, r3, #30
 800576c:	d5fc      	bpl.n	8005768 <Lcd_Init+0xb8c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800576e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005772:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005776:	890a      	ldrh	r2, [r1, #8]
 8005778:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800577c:	0612      	lsls	r2, r2, #24
 800577e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005782:	d4f8      	bmi.n	8005776 <Lcd_Init+0xb9a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005788:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800578c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800578e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005792:	f044 0410 	orr.w	r4, r4, #16
 8005796:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005798:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800579a:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800579e:	f024 0410 	bic.w	r4, r4, #16
 80057a2:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80057a4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057a6:	24bb      	movs	r4, #187	; 0xbb
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80057a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057ac:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057ae:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057b0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057b2:	8913      	ldrh	r3, [r2, #8]
 80057b4:	079d      	lsls	r5, r3, #30
 80057b6:	d5fc      	bpl.n	80057b2 <Lcd_Init+0xbd6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80057b8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80057bc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80057c0:	890a      	ldrh	r2, [r1, #8]
 80057c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80057c6:	0614      	lsls	r4, r2, #24
 80057c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80057cc:	d4f8      	bmi.n	80057c0 <Lcd_Init+0xbe4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80057ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80057d6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80057d8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80057dc:	f044 0410 	orr.w	r4, r4, #16
 80057e0:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80057e2:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80057e4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80057e8:	f024 0410 	bic.w	r4, r4, #16
 80057ec:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80057ee:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057f0:	24ff      	movs	r4, #255	; 0xff
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057f8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057fa:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057fc:	8913      	ldrh	r3, [r2, #8]
 80057fe:	0799      	lsls	r1, r3, #30
 8005800:	d5fc      	bpl.n	80057fc <Lcd_Init+0xc20>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005802:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005806:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800580a:	890a      	ldrh	r2, [r1, #8]
 800580c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005810:	0612      	lsls	r2, r2, #24
 8005812:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005816:	d4f8      	bmi.n	800580a <Lcd_Init+0xc2e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800581c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005820:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005822:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005826:	f044 0410 	orr.w	r4, r4, #16
 800582a:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800582c:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800582e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005832:	f024 0410 	bic.w	r4, r4, #16
 8005836:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005838:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800583a:	24be      	movs	r4, #190	; 0xbe
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800583c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005840:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005842:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005844:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005846:	8913      	ldrh	r3, [r2, #8]
 8005848:	079d      	lsls	r5, r3, #30
 800584a:	d5fc      	bpl.n	8005846 <Lcd_Init+0xc6a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800584c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005850:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005854:	890a      	ldrh	r2, [r1, #8]
 8005856:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800585a:	0614      	lsls	r4, r2, #24
 800585c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005860:	d4f8      	bmi.n	8005854 <Lcd_Init+0xc78>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005866:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800586a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800586c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005870:	f044 0410 	orr.w	r4, r4, #16
 8005874:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005876:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005878:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800587c:	f024 0410 	bic.w	r4, r4, #16
 8005880:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005882:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005884:	24ff      	movs	r4, #255	; 0xff
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800588c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800588e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005890:	8913      	ldrh	r3, [r2, #8]
 8005892:	0799      	lsls	r1, r3, #30
 8005894:	d5fc      	bpl.n	8005890 <Lcd_Init+0xcb4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005896:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800589a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800589e:	890a      	ldrh	r2, [r1, #8]
 80058a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058a4:	0612      	lsls	r2, r2, #24
 80058a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80058aa:	d4f8      	bmi.n	800589e <Lcd_Init+0xcc2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80058ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80058b4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80058b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80058ba:	f044 0410 	orr.w	r4, r4, #16
 80058be:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80058c0:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80058c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80058c6:	f024 0410 	bic.w	r4, r4, #16
 80058ca:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80058cc:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058ce:	2436      	movs	r4, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80058d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058d4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058d6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058d8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058da:	8913      	ldrh	r3, [r2, #8]
 80058dc:	079d      	lsls	r5, r3, #30
 80058de:	d5fc      	bpl.n	80058da <Lcd_Init+0xcfe>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80058e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80058e4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80058e8:	890a      	ldrh	r2, [r1, #8]
 80058ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058ee:	0614      	lsls	r4, r2, #24
 80058f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80058f4:	d4f8      	bmi.n	80058e8 <Lcd_Init+0xd0c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80058f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058fa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80058fe:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005900:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005904:	f044 0410 	orr.w	r4, r4, #16
 8005908:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800590a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800590c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005910:	f024 0410 	bic.w	r4, r4, #16
 8005914:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005916:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005918:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800591a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005920:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005922:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005924:	8913      	ldrh	r3, [r2, #8]
 8005926:	0799      	lsls	r1, r3, #30
 8005928:	d5fc      	bpl.n	8005924 <Lcd_Init+0xd48>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800592a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800592e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005932:	890a      	ldrh	r2, [r1, #8]
 8005934:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005938:	0612      	lsls	r2, r2, #24
 800593a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800593e:	d4f8      	bmi.n	8005932 <Lcd_Init+0xd56>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005944:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005948:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800594a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800594e:	f044 0410 	orr.w	r4, r4, #16
 8005952:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005954:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005956:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800595a:	f024 0410 	bic.w	r4, r4, #16
 800595e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005960:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005962:	243a      	movs	r4, #58	; 0x3a
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005968:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800596a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800596c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800596e:	8913      	ldrh	r3, [r2, #8]
 8005970:	079d      	lsls	r5, r3, #30
 8005972:	d5fc      	bpl.n	800596e <Lcd_Init+0xd92>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005974:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005978:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800597c:	890a      	ldrh	r2, [r1, #8]
 800597e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005982:	0614      	lsls	r4, r2, #24
 8005984:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005988:	d4f8      	bmi.n	800597c <Lcd_Init+0xda0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800598a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800598e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005992:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005994:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005998:	f044 0410 	orr.w	r4, r4, #16
 800599c:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800599e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80059a0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80059a4:	f024 0410 	bic.w	r4, r4, #16
 80059a8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80059aa:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80059ac:	2455      	movs	r4, #85	; 0x55
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80059b4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80059b6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80059b8:	8913      	ldrh	r3, [r2, #8]
 80059ba:	0799      	lsls	r1, r3, #30
 80059bc:	d5fc      	bpl.n	80059b8 <Lcd_Init+0xddc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80059be:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80059c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80059c6:	890a      	ldrh	r2, [r1, #8]
 80059c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80059cc:	0612      	lsls	r2, r2, #24
 80059ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80059d2:	d4f8      	bmi.n	80059c6 <Lcd_Init+0xdea>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80059d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80059dc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80059de:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80059e2:	f044 0410 	orr.w	r4, r4, #16
 80059e6:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80059e8:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80059ea:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80059ee:	f024 0410 	bic.w	r4, r4, #16
 80059f2:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80059f4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80059f6:	24b1      	movs	r4, #177	; 0xb1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80059f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059fc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80059fe:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a00:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a02:	8913      	ldrh	r3, [r2, #8]
 8005a04:	079d      	lsls	r5, r3, #30
 8005a06:	d5fc      	bpl.n	8005a02 <Lcd_Init+0xe26>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005a08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a0c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a10:	890a      	ldrh	r2, [r1, #8]
 8005a12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a16:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005a1a:	b292      	uxth	r2, r2
 8005a1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	d1f5      	bne.n	8005a10 <Lcd_Init+0xe34>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a28:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a2c:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a2e:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005a32:	f045 0510 	orr.w	r5, r5, #16
 8005a36:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a38:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005a3a:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a3e:	f025 0510 	bic.w	r5, r5, #16
 8005a42:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005a44:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a46:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a48:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005a4c:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a4e:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a50:	890b      	ldrh	r3, [r1, #8]
 8005a52:	079c      	lsls	r4, r3, #30
 8005a54:	d5fc      	bpl.n	8005a50 <Lcd_Init+0xe74>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005a56:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a5a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a5e:	890a      	ldrh	r2, [r1, #8]
 8005a60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a64:	0612      	lsls	r2, r2, #24
 8005a66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a6a:	d4f8      	bmi.n	8005a5e <Lcd_Init+0xe82>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a70:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005a74:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a76:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a7a:	f044 0410 	orr.w	r4, r4, #16
 8005a7e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a80:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005a82:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a86:	f024 0410 	bic.w	r4, r4, #16
 8005a8a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005a8c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a8e:	241a      	movs	r4, #26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a94:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a96:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a98:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a9a:	8913      	ldrh	r3, [r2, #8]
 8005a9c:	079d      	lsls	r5, r3, #30
 8005a9e:	d5fc      	bpl.n	8005a9a <Lcd_Init+0xebe>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005aa0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005aa4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005aa8:	890a      	ldrh	r2, [r1, #8]
 8005aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005aae:	0614      	lsls	r4, r2, #24
 8005ab0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ab4:	d4f8      	bmi.n	8005aa8 <Lcd_Init+0xecc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aba:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005abe:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005ac0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ac4:	f044 0410 	orr.w	r4, r4, #16
 8005ac8:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005aca:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005acc:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005ad0:	f024 0410 	bic.w	r4, r4, #16
 8005ad4:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005ad6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ad8:	24b6      	movs	r4, #182	; 0xb6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005ada:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ade:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ae0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ae2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ae4:	8913      	ldrh	r3, [r2, #8]
 8005ae6:	0799      	lsls	r1, r3, #30
 8005ae8:	d5fc      	bpl.n	8005ae4 <Lcd_Init+0xf08>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005aea:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005aee:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005af2:	890a      	ldrh	r2, [r1, #8]
 8005af4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005af8:	0612      	lsls	r2, r2, #24
 8005afa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005afe:	d4f8      	bmi.n	8005af2 <Lcd_Init+0xf16>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b04:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b08:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b0a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005b0e:	f044 0410 	orr.w	r4, r4, #16
 8005b12:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b14:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005b16:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b1a:	f024 0410 	bic.w	r4, r4, #16
 8005b1e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005b20:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b22:	240a      	movs	r4, #10
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b2a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b2c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b2e:	8913      	ldrh	r3, [r2, #8]
 8005b30:	079d      	lsls	r5, r3, #30
 8005b32:	d5fc      	bpl.n	8005b2e <Lcd_Init+0xf52>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005b34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005b38:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005b3c:	890a      	ldrh	r2, [r1, #8]
 8005b3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b42:	0614      	lsls	r4, r2, #24
 8005b44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b48:	d4f8      	bmi.n	8005b3c <Lcd_Init+0xf60>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b4e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b52:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b54:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b58:	f044 0410 	orr.w	r4, r4, #16
 8005b5c:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b5e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005b60:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b64:	f024 0410 	bic.w	r4, r4, #16
 8005b68:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005b6a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b6c:	24a2      	movs	r4, #162	; 0xa2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b72:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b74:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b76:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b78:	8913      	ldrh	r3, [r2, #8]
 8005b7a:	0799      	lsls	r1, r3, #30
 8005b7c:	d5fc      	bpl.n	8005b78 <Lcd_Init+0xf9c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005b7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005b82:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005b86:	890a      	ldrh	r2, [r1, #8]
 8005b88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b8c:	0612      	lsls	r2, r2, #24
 8005b8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b92:	d4f8      	bmi.n	8005b86 <Lcd_Init+0xfaa>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b98:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b9c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005b9e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ba2:	f044 0410 	orr.w	r4, r4, #16
 8005ba6:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005ba8:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005baa:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005bae:	f024 0410 	bic.w	r4, r4, #16
 8005bb2:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005bb4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005bb6:	24f2      	movs	r4, #242	; 0xf2
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bbc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005bbe:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005bc0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005bc2:	8913      	ldrh	r3, [r2, #8]
 8005bc4:	079d      	lsls	r5, r3, #30
 8005bc6:	d5fc      	bpl.n	8005bc2 <Lcd_Init+0xfe6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005bc8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005bcc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005bd0:	890a      	ldrh	r2, [r1, #8]
 8005bd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005bd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005be0:	2a00      	cmp	r2, #0
 8005be2:	d1f5      	bne.n	8005bd0 <Lcd_Init+0xff4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005be8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005bec:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005bee:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005bf2:	f045 0510 	orr.w	r5, r5, #16
 8005bf6:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005bf8:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005bfa:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005bfe:	f025 0510 	bic.w	r5, r5, #16
 8005c02:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005c04:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c06:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005c08:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005c0c:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c0e:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c10:	890b      	ldrh	r3, [r1, #8]
 8005c12:	079c      	lsls	r4, r3, #30
 8005c14:	d5fc      	bpl.n	8005c10 <Lcd_Init+0x1034>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005c16:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005c1a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005c1e:	890a      	ldrh	r2, [r1, #8]
 8005c20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005c24:	0612      	lsls	r2, r2, #24
 8005c26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c2a:	d4f8      	bmi.n	8005c1e <Lcd_Init+0x1042>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c30:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c34:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005c36:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005c3a:	f044 0410 	orr.w	r4, r4, #16
 8005c3e:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005c40:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005c42:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005c46:	f024 0410 	bic.w	r4, r4, #16
 8005c4a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005c4c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c4e:	2426      	movs	r4, #38	; 0x26
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005c50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c54:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c56:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c58:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c5a:	8913      	ldrh	r3, [r2, #8]
 8005c5c:	079d      	lsls	r5, r3, #30
 8005c5e:	d5fc      	bpl.n	8005c5a <Lcd_Init+0x107e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005c60:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005c64:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005c68:	890a      	ldrh	r2, [r1, #8]
 8005c6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005c6e:	0614      	lsls	r4, r2, #24
 8005c70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c74:	d4f8      	bmi.n	8005c68 <Lcd_Init+0x108c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c7a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c7e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005c80:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005c84:	f044 0410 	orr.w	r4, r4, #16
 8005c88:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005c8a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005c8c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005c90:	f024 0410 	bic.w	r4, r4, #16
 8005c94:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005c96:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c98:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ca0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ca2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ca4:	8913      	ldrh	r3, [r2, #8]
 8005ca6:	0799      	lsls	r1, r3, #30
 8005ca8:	d5fc      	bpl.n	8005ca4 <Lcd_Init+0x10c8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005caa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005cae:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005cb2:	890a      	ldrh	r2, [r1, #8]
 8005cb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005cb8:	0612      	lsls	r2, r2, #24
 8005cba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005cbe:	d4f8      	bmi.n	8005cb2 <Lcd_Init+0x10d6>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cc4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005cc8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005cca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005cce:	f044 0410 	orr.w	r4, r4, #16
 8005cd2:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005cd4:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005cd6:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005cda:	f024 0410 	bic.w	r4, r4, #16
 8005cde:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005ce0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ce2:	24e0      	movs	r4, #224	; 0xe0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ce8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005cea:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005cec:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005cee:	8913      	ldrh	r3, [r2, #8]
 8005cf0:	079d      	lsls	r5, r3, #30
 8005cf2:	d5fc      	bpl.n	8005cee <Lcd_Init+0x1112>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005cf4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005cf8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005cfc:	890a      	ldrh	r2, [r1, #8]
 8005cfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d02:	0614      	lsls	r4, r2, #24
 8005d04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d08:	d4f8      	bmi.n	8005cfc <Lcd_Init+0x1120>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d0e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005d12:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d14:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005d18:	f044 0410 	orr.w	r4, r4, #16
 8005d1c:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d1e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005d20:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d24:	f024 0410 	bic.w	r4, r4, #16
 8005d28:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005d2a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d2c:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d32:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d34:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d36:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d38:	8913      	ldrh	r3, [r2, #8]
 8005d3a:	0799      	lsls	r1, r3, #30
 8005d3c:	d5fc      	bpl.n	8005d38 <Lcd_Init+0x115c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005d3e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005d42:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005d46:	890a      	ldrh	r2, [r1, #8]
 8005d48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d4c:	0612      	lsls	r2, r2, #24
 8005d4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d52:	d4f8      	bmi.n	8005d46 <Lcd_Init+0x116a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d58:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005d5c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d5e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d62:	f044 0410 	orr.w	r4, r4, #16
 8005d66:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d68:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005d6a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d6e:	f024 0410 	bic.w	r4, r4, #16
 8005d72:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005d74:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d76:	241d      	movs	r4, #29
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d7c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d7e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d80:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d82:	8913      	ldrh	r3, [r2, #8]
 8005d84:	079d      	lsls	r5, r3, #30
 8005d86:	d5fc      	bpl.n	8005d82 <Lcd_Init+0x11a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005d88:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005d8c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005d90:	890a      	ldrh	r2, [r1, #8]
 8005d92:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d96:	0614      	lsls	r4, r2, #24
 8005d98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d9c:	d4f8      	bmi.n	8005d90 <Lcd_Init+0x11b4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005da2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005da6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005da8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005dac:	f044 0410 	orr.w	r4, r4, #16
 8005db0:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005db2:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005db4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005db8:	f024 0410 	bic.w	r4, r4, #16
 8005dbc:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005dbe:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005dc0:	241a      	movs	r4, #26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005dc8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005dca:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005dcc:	8913      	ldrh	r3, [r2, #8]
 8005dce:	0799      	lsls	r1, r3, #30
 8005dd0:	d5fc      	bpl.n	8005dcc <Lcd_Init+0x11f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005dd2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005dd6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005dda:	890a      	ldrh	r2, [r1, #8]
 8005ddc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005de0:	0612      	lsls	r2, r2, #24
 8005de2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005de6:	d4f8      	bmi.n	8005dda <Lcd_Init+0x11fe>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005df0:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005df2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005df6:	f044 0410 	orr.w	r4, r4, #16
 8005dfa:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005dfc:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005dfe:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e02:	f024 0410 	bic.w	r4, r4, #16
 8005e06:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005e08:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e0a:	240a      	movs	r4, #10
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e10:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e12:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e14:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e16:	8913      	ldrh	r3, [r2, #8]
 8005e18:	079d      	lsls	r5, r3, #30
 8005e1a:	d5fc      	bpl.n	8005e16 <Lcd_Init+0x123a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005e1c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005e20:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005e24:	890a      	ldrh	r2, [r1, #8]
 8005e26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005e2a:	0614      	lsls	r4, r2, #24
 8005e2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e30:	d4f8      	bmi.n	8005e24 <Lcd_Init+0x1248>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005e3a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e3c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e40:	f044 0410 	orr.w	r4, r4, #16
 8005e44:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e46:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005e48:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e4c:	f024 0410 	bic.w	r4, r4, #16
 8005e50:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005e52:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e54:	240d      	movs	r4, #13
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e5c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e5e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e60:	8913      	ldrh	r3, [r2, #8]
 8005e62:	0799      	lsls	r1, r3, #30
 8005e64:	d5fc      	bpl.n	8005e60 <Lcd_Init+0x1284>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005e66:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005e6a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005e6e:	890a      	ldrh	r2, [r1, #8]
 8005e70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005e74:	0612      	lsls	r2, r2, #24
 8005e76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e7a:	d4f8      	bmi.n	8005e6e <Lcd_Init+0x1292>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005e84:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e86:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e8a:	f044 0410 	orr.w	r4, r4, #16
 8005e8e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e90:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005e92:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e96:	f024 0410 	bic.w	r4, r4, #16
 8005e9a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005e9c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e9e:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ea6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ea8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005eaa:	8913      	ldrh	r3, [r2, #8]
 8005eac:	079d      	lsls	r5, r3, #30
 8005eae:	d5fc      	bpl.n	8005eaa <Lcd_Init+0x12ce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005eb0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005eb4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005eb8:	890a      	ldrh	r2, [r1, #8]
 8005eba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005ebe:	0614      	lsls	r4, r2, #24
 8005ec0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ec4:	d4f8      	bmi.n	8005eb8 <Lcd_Init+0x12dc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eca:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005ece:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ed0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ed4:	f044 0410 	orr.w	r4, r4, #16
 8005ed8:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005eda:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005edc:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005ee0:	f024 0410 	bic.w	r4, r4, #16
 8005ee4:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005ee6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ee8:	2449      	movs	r4, #73	; 0x49
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eee:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ef0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ef2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ef4:	8913      	ldrh	r3, [r2, #8]
 8005ef6:	0799      	lsls	r1, r3, #30
 8005ef8:	d5fc      	bpl.n	8005ef4 <Lcd_Init+0x1318>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005efa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005efe:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005f02:	890a      	ldrh	r2, [r1, #8]
 8005f04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f08:	0612      	lsls	r2, r2, #24
 8005f0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f0e:	d4f8      	bmi.n	8005f02 <Lcd_Init+0x1326>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f14:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005f18:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f1a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f1e:	f044 0410 	orr.w	r4, r4, #16
 8005f22:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f24:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005f26:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f2a:	f024 0410 	bic.w	r4, r4, #16
 8005f2e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005f30:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f32:	2466      	movs	r4, #102	; 0x66
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f38:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f3a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f3c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f3e:	8913      	ldrh	r3, [r2, #8]
 8005f40:	079d      	lsls	r5, r3, #30
 8005f42:	d5fc      	bpl.n	8005f3e <Lcd_Init+0x1362>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005f44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005f48:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005f4c:	890a      	ldrh	r2, [r1, #8]
 8005f4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f52:	0614      	lsls	r4, r2, #24
 8005f54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f58:	d4f8      	bmi.n	8005f4c <Lcd_Init+0x1370>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005f62:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f68:	f044 0410 	orr.w	r4, r4, #16
 8005f6c:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f6e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005f70:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f74:	f024 0410 	bic.w	r4, r4, #16
 8005f78:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005f7a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f7c:	243b      	movs	r4, #59	; 0x3b
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f82:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f84:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f86:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f88:	8913      	ldrh	r3, [r2, #8]
 8005f8a:	0799      	lsls	r1, r3, #30
 8005f8c:	d5fc      	bpl.n	8005f88 <Lcd_Init+0x13ac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005f8e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005f92:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005f96:	890a      	ldrh	r2, [r1, #8]
 8005f98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f9c:	0612      	lsls	r2, r2, #24
 8005f9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005fa2:	d4f8      	bmi.n	8005f96 <Lcd_Init+0x13ba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005fac:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005fae:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005fb2:	f044 0410 	orr.w	r4, r4, #16
 8005fb6:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005fb8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005fba:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005fbe:	f024 0410 	bic.w	r4, r4, #16
 8005fc2:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005fc4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005fc6:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005fce:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005fd0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005fd2:	8913      	ldrh	r3, [r2, #8]
 8005fd4:	079d      	lsls	r5, r3, #30
 8005fd6:	d5fc      	bpl.n	8005fd2 <Lcd_Init+0x13f6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005fd8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005fdc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005fe0:	890a      	ldrh	r2, [r1, #8]
 8005fe2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005fe6:	0614      	lsls	r4, r2, #24
 8005fe8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005fec:	d4f8      	bmi.n	8005fe0 <Lcd_Init+0x1404>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005ff6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ff8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ffc:	f044 0410 	orr.w	r4, r4, #16
 8006000:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006002:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006004:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006008:	f024 0410 	bic.w	r4, r4, #16
 800600c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800600e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006010:	2411      	movs	r4, #17
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006018:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800601a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800601c:	8913      	ldrh	r3, [r2, #8]
 800601e:	0799      	lsls	r1, r3, #30
 8006020:	d5fc      	bpl.n	800601c <Lcd_Init+0x1440>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006022:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006026:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800602a:	890a      	ldrh	r2, [r1, #8]
 800602c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006030:	0612      	lsls	r2, r2, #24
 8006032:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006036:	d4f8      	bmi.n	800602a <Lcd_Init+0x144e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006040:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006042:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006046:	f044 0410 	orr.w	r4, r4, #16
 800604a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800604c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800604e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006052:	f024 0410 	bic.w	r4, r4, #16
 8006056:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006058:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800605a:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800605c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006060:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006062:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006064:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006066:	8913      	ldrh	r3, [r2, #8]
 8006068:	079d      	lsls	r5, r3, #30
 800606a:	d5fc      	bpl.n	8006066 <Lcd_Init+0x148a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800606c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006070:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006074:	890a      	ldrh	r2, [r1, #8]
 8006076:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800607a:	0614      	lsls	r4, r2, #24
 800607c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006080:	d4f8      	bmi.n	8006074 <Lcd_Init+0x1498>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006086:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800608a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800608c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006090:	f044 0410 	orr.w	r4, r4, #16
 8006094:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006096:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006098:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800609c:	f024 0410 	bic.w	r4, r4, #16
 80060a0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80060a2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060a4:	2409      	movs	r4, #9
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060aa:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060ac:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060ae:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060b0:	8913      	ldrh	r3, [r2, #8]
 80060b2:	0799      	lsls	r1, r3, #30
 80060b4:	d5fc      	bpl.n	80060b0 <Lcd_Init+0x14d4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80060b6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80060ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80060be:	890a      	ldrh	r2, [r1, #8]
 80060c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80060c4:	0612      	lsls	r2, r2, #24
 80060c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060ca:	d4f8      	bmi.n	80060be <Lcd_Init+0x14e2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060d4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060d6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060da:	f044 0410 	orr.w	r4, r4, #16
 80060de:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80060e0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80060e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80060e6:	f024 0410 	bic.w	r4, r4, #16
 80060ea:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80060ec:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060ee:	2405      	movs	r4, #5
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060f6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060f8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060fa:	8913      	ldrh	r3, [r2, #8]
 80060fc:	079d      	lsls	r5, r3, #30
 80060fe:	d5fc      	bpl.n	80060fa <Lcd_Init+0x151e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006100:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006104:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006108:	890a      	ldrh	r2, [r1, #8]
 800610a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800610e:	0614      	lsls	r4, r2, #24
 8006110:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006114:	d4f8      	bmi.n	8006108 <Lcd_Init+0x152c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800611e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006120:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006124:	f044 0410 	orr.w	r4, r4, #16
 8006128:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800612a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800612c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006130:	f024 0410 	bic.w	r4, r4, #16
 8006134:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006136:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006138:	2404      	movs	r4, #4
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800613a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006140:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006142:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006144:	8913      	ldrh	r3, [r2, #8]
 8006146:	0799      	lsls	r1, r3, #30
 8006148:	d5fc      	bpl.n	8006144 <Lcd_Init+0x1568>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800614a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800614e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006152:	890a      	ldrh	r2, [r1, #8]
 8006154:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006158:	0612      	lsls	r2, r2, #24
 800615a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800615e:	d4f8      	bmi.n	8006152 <Lcd_Init+0x1576>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006164:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006168:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800616a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800616e:	f044 0410 	orr.w	r4, r4, #16
 8006172:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006174:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8006176:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800617a:	f024 0410 	bic.w	r4, r4, #16
 800617e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8006180:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006182:	24e1      	movs	r4, #225	; 0xe1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006188:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800618a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800618c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800618e:	8913      	ldrh	r3, [r2, #8]
 8006190:	079b      	lsls	r3, r3, #30
 8006192:	d5fc      	bpl.n	800618e <Lcd_Init+0x15b2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006194:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006198:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800619c:	890a      	ldrh	r2, [r1, #8]
 800619e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80061a6:	b292      	uxth	r2, r2
 80061a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80061ac:	2a00      	cmp	r2, #0
 80061ae:	d1f5      	bne.n	800619c <Lcd_Init+0x15c0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80061b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061b4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80061b8:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80061ba:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80061be:	f045 0510 	orr.w	r5, r5, #16
 80061c2:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80061c4:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80061c6:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80061ca:	f025 0510 	bic.w	r5, r5, #16
 80061ce:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80061d0:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061d2:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80061d4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80061d8:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80061da:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061dc:	890b      	ldrh	r3, [r1, #8]
 80061de:	079d      	lsls	r5, r3, #30
 80061e0:	d5fc      	bpl.n	80061dc <Lcd_Init+0x1600>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80061e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80061e6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80061ea:	890a      	ldrh	r2, [r1, #8]
 80061ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061f0:	0614      	lsls	r4, r2, #24
 80061f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80061f6:	d4f8      	bmi.n	80061ea <Lcd_Init+0x160e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80061f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006200:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006202:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006206:	f044 0410 	orr.w	r4, r4, #16
 800620a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800620c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800620e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006212:	f024 0410 	bic.w	r4, r4, #16
 8006216:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006218:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800621a:	2418      	movs	r4, #24
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800621c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006220:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006222:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006224:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006226:	8913      	ldrh	r3, [r2, #8]
 8006228:	0799      	lsls	r1, r3, #30
 800622a:	d5fc      	bpl.n	8006226 <Lcd_Init+0x164a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800622c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006230:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006234:	890a      	ldrh	r2, [r1, #8]
 8006236:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800623a:	0612      	lsls	r2, r2, #24
 800623c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006240:	d4f8      	bmi.n	8006234 <Lcd_Init+0x1658>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006246:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800624a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800624c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006250:	f044 0410 	orr.w	r4, r4, #16
 8006254:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006256:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006258:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800625c:	f024 0410 	bic.w	r4, r4, #16
 8006260:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006262:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006264:	241d      	movs	r4, #29
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800626a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800626c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800626e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006270:	8913      	ldrh	r3, [r2, #8]
 8006272:	079d      	lsls	r5, r3, #30
 8006274:	d5fc      	bpl.n	8006270 <Lcd_Init+0x1694>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006276:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800627a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800627e:	890a      	ldrh	r2, [r1, #8]
 8006280:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006284:	0614      	lsls	r4, r2, #24
 8006286:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800628a:	d4f8      	bmi.n	800627e <Lcd_Init+0x16a2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800628c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006290:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006294:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006296:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800629a:	f044 0410 	orr.w	r4, r4, #16
 800629e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062a0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80062a2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062a6:	f024 0410 	bic.w	r4, r4, #16
 80062aa:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80062ac:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80062ae:	2402      	movs	r4, #2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80062b6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80062b8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80062ba:	8913      	ldrh	r3, [r2, #8]
 80062bc:	0799      	lsls	r1, r3, #30
 80062be:	d5fc      	bpl.n	80062ba <Lcd_Init+0x16de>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80062c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80062c4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80062c8:	890a      	ldrh	r2, [r1, #8]
 80062ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80062ce:	0612      	lsls	r2, r2, #24
 80062d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062d4:	d4f8      	bmi.n	80062c8 <Lcd_Init+0x16ec>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80062d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062da:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80062de:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062e0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80062e4:	f044 0410 	orr.w	r4, r4, #16
 80062e8:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062ea:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80062ec:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062f0:	f024 0410 	bic.w	r4, r4, #16
 80062f4:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80062f6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80062f8:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fe:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006300:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006302:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006304:	8913      	ldrh	r3, [r2, #8]
 8006306:	079d      	lsls	r5, r3, #30
 8006308:	d5fc      	bpl.n	8006304 <Lcd_Init+0x1728>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800630a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800630e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006312:	890a      	ldrh	r2, [r1, #8]
 8006314:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006318:	0614      	lsls	r4, r2, #24
 800631a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800631e:	d4f8      	bmi.n	8006312 <Lcd_Init+0x1736>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006324:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006328:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800632a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800632e:	f044 0410 	orr.w	r4, r4, #16
 8006332:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006334:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006336:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800633a:	f024 0410 	bic.w	r4, r4, #16
 800633e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006340:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006342:	2404      	movs	r4, #4
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006348:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800634a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800634c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800634e:	8913      	ldrh	r3, [r2, #8]
 8006350:	0799      	lsls	r1, r3, #30
 8006352:	d5fc      	bpl.n	800634e <Lcd_Init+0x1772>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006354:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006358:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800635c:	890a      	ldrh	r2, [r1, #8]
 800635e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006362:	0612      	lsls	r2, r2, #24
 8006364:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006368:	d4f8      	bmi.n	800635c <Lcd_Init+0x1780>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800636a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800636e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006372:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006374:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006378:	f044 0410 	orr.w	r4, r4, #16
 800637c:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800637e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006380:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006384:	f024 0410 	bic.w	r4, r4, #16
 8006388:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800638a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800638c:	2436      	movs	r4, #54	; 0x36
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006394:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006396:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006398:	8913      	ldrh	r3, [r2, #8]
 800639a:	079d      	lsls	r5, r3, #30
 800639c:	d5fc      	bpl.n	8006398 <Lcd_Init+0x17bc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800639e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80063a2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80063a6:	890a      	ldrh	r2, [r1, #8]
 80063a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80063ac:	0614      	lsls	r4, r2, #24
 80063ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80063b2:	d4f8      	bmi.n	80063a6 <Lcd_Init+0x17ca>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80063b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80063bc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80063be:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80063c2:	f044 0410 	orr.w	r4, r4, #16
 80063c6:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80063c8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80063ca:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80063ce:	f024 0410 	bic.w	r4, r4, #16
 80063d2:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80063d4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063d6:	2413      	movs	r4, #19
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80063d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063dc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80063de:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063e0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80063e2:	8913      	ldrh	r3, [r2, #8]
 80063e4:	0799      	lsls	r1, r3, #30
 80063e6:	d5fc      	bpl.n	80063e2 <Lcd_Init+0x1806>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80063e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80063ec:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80063f0:	890a      	ldrh	r2, [r1, #8]
 80063f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80063f6:	0612      	lsls	r2, r2, #24
 80063f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80063fc:	d4f8      	bmi.n	80063f0 <Lcd_Init+0x1814>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80063fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006402:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006406:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006408:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800640c:	f044 0410 	orr.w	r4, r4, #16
 8006410:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006412:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006414:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006418:	f024 0410 	bic.w	r4, r4, #16
 800641c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800641e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006420:	244c      	movs	r4, #76	; 0x4c
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006426:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006428:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800642a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800642c:	8913      	ldrh	r3, [r2, #8]
 800642e:	079d      	lsls	r5, r3, #30
 8006430:	d5fc      	bpl.n	800642c <Lcd_Init+0x1850>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006432:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006436:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800643a:	890a      	ldrh	r2, [r1, #8]
 800643c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006440:	0614      	lsls	r4, r2, #24
 8006442:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006446:	d4f8      	bmi.n	800643a <Lcd_Init+0x185e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006450:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006452:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006456:	f044 0410 	orr.w	r4, r4, #16
 800645a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800645c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800645e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006462:	f024 0410 	bic.w	r4, r4, #16
 8006466:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006468:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800646a:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006472:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006474:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006476:	8913      	ldrh	r3, [r2, #8]
 8006478:	0799      	lsls	r1, r3, #30
 800647a:	d5fc      	bpl.n	8006476 <Lcd_Init+0x189a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800647c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006480:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006484:	890a      	ldrh	r2, [r1, #8]
 8006486:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800648a:	0612      	lsls	r2, r2, #24
 800648c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006490:	d4f8      	bmi.n	8006484 <Lcd_Init+0x18a8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006496:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800649a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800649c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064a0:	f044 0410 	orr.w	r4, r4, #16
 80064a4:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064a6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80064a8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064ac:	f024 0410 	bic.w	r4, r4, #16
 80064b0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80064b2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80064b4:	2413      	movs	r4, #19
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80064b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ba:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80064bc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80064be:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80064c0:	8913      	ldrh	r3, [r2, #8]
 80064c2:	079d      	lsls	r5, r3, #30
 80064c4:	d5fc      	bpl.n	80064c0 <Lcd_Init+0x18e4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80064c6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80064ca:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80064ce:	890a      	ldrh	r2, [r1, #8]
 80064d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064d4:	0614      	lsls	r4, r2, #24
 80064d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064da:	d4f8      	bmi.n	80064ce <Lcd_Init+0x18f2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80064e4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80064e6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064ea:	f044 0410 	orr.w	r4, r4, #16
 80064ee:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064f0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80064f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064f6:	f024 0410 	bic.w	r4, r4, #16
 80064fa:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80064fc:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80064fe:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006506:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006508:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800650a:	8913      	ldrh	r3, [r2, #8]
 800650c:	0799      	lsls	r1, r3, #30
 800650e:	d5fc      	bpl.n	800650a <Lcd_Init+0x192e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006510:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006514:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006518:	890a      	ldrh	r2, [r1, #8]
 800651a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800651e:	0612      	lsls	r2, r2, #24
 8006520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006524:	d4f8      	bmi.n	8006518 <Lcd_Init+0x193c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800652a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800652e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006530:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006534:	f044 0410 	orr.w	r4, r4, #16
 8006538:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800653a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800653c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006540:	f024 0410 	bic.w	r4, r4, #16
 8006544:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006546:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006548:	242e      	movs	r4, #46	; 0x2e
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800654a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006550:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006552:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006554:	8913      	ldrh	r3, [r2, #8]
 8006556:	079d      	lsls	r5, r3, #30
 8006558:	d5fc      	bpl.n	8006554 <Lcd_Init+0x1978>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800655a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800655e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006562:	890a      	ldrh	r2, [r1, #8]
 8006564:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006568:	0614      	lsls	r4, r2, #24
 800656a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800656e:	d4f8      	bmi.n	8006562 <Lcd_Init+0x1986>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006574:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006578:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800657a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800657e:	f044 0410 	orr.w	r4, r4, #16
 8006582:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006584:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006586:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800658a:	f024 0410 	bic.w	r4, r4, #16
 800658e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006590:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006592:	242f      	movs	r4, #47	; 0x2f
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006598:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800659a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800659c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800659e:	8913      	ldrh	r3, [r2, #8]
 80065a0:	0799      	lsls	r1, r3, #30
 80065a2:	d5fc      	bpl.n	800659e <Lcd_Init+0x19c2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80065a4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80065a8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80065ac:	890a      	ldrh	r2, [r1, #8]
 80065ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80065b2:	0612      	lsls	r2, r2, #24
 80065b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80065b8:	d4f8      	bmi.n	80065ac <Lcd_Init+0x19d0>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80065ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80065c2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80065c4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80065c8:	f044 0410 	orr.w	r4, r4, #16
 80065cc:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80065ce:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80065d0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80065d4:	f024 0410 	bic.w	r4, r4, #16
 80065d8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80065da:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80065dc:	2405      	movs	r4, #5
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80065e4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80065e6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80065e8:	8913      	ldrh	r3, [r2, #8]
 80065ea:	079d      	lsls	r5, r3, #30
 80065ec:	d5fc      	bpl.n	80065e8 <Lcd_Init+0x1a0c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80065ee:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80065f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80065f6:	890a      	ldrh	r2, [r1, #8]
 80065f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80065fc:	0614      	lsls	r4, r2, #24
 80065fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006602:	d4f8      	bmi.n	80065f6 <Lcd_Init+0x1a1a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006608:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800660c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800660e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006612:	f044 0410 	orr.w	r4, r4, #16
 8006616:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006618:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800661a:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800661e:	f024 0410 	bic.w	r4, r4, #16
 8006622:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8006624:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006626:	242b      	movs	r4, #43	; 0x2b
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800662c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800662e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006630:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006632:	8913      	ldrh	r3, [r2, #8]
 8006634:	0799      	lsls	r1, r3, #30
 8006636:	d5fc      	bpl.n	8006632 <Lcd_Init+0x1a56>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006638:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800663c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006640:	890a      	ldrh	r2, [r1, #8]
 8006642:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006646:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800664a:	b292      	uxth	r2, r2
 800664c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006650:	2a00      	cmp	r2, #0
 8006652:	d1f5      	bne.n	8006640 <Lcd_Init+0x1a64>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006658:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800665c:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800665e:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006662:	f045 0510 	orr.w	r5, r5, #16
 8006666:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006668:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 800666a:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800666e:	f025 0510 	bic.w	r5, r5, #16
 8006672:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8006674:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006676:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006678:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 800667c:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800667e:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006680:	890b      	ldrh	r3, [r1, #8]
 8006682:	079b      	lsls	r3, r3, #30
 8006684:	d5fc      	bpl.n	8006680 <Lcd_Init+0x1aa4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006686:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800668a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800668e:	890a      	ldrh	r2, [r1, #8]
 8006690:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006694:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006698:	b292      	uxth	r2, r2
 800669a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800669e:	2a00      	cmp	r2, #0
 80066a0:	d1f5      	bne.n	800668e <Lcd_Init+0x1ab2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066a6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80066aa:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80066ac:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066b0:	f045 0510 	orr.w	r5, r5, #16
 80066b4:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80066b6:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80066b8:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80066bc:	f025 0510 	bic.w	r5, r5, #16
 80066c0:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80066c2:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80066c4:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80066c6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80066ca:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80066cc:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80066ce:	890b      	ldrh	r3, [r1, #8]
 80066d0:	079d      	lsls	r5, r3, #30
 80066d2:	d5fc      	bpl.n	80066ce <Lcd_Init+0x1af2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80066d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80066d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80066dc:	890a      	ldrh	r2, [r1, #8]
 80066de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80066e2:	0614      	lsls	r4, r2, #24
 80066e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80066e8:	d4f8      	bmi.n	80066dc <Lcd_Init+0x1b00>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80066f2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80066f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066f8:	f044 0410 	orr.w	r4, r4, #16
 80066fc:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80066fe:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006700:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006704:	f024 0410 	bic.w	r4, r4, #16
 8006708:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800670a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800670c:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800670e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006712:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006714:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006716:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006718:	8913      	ldrh	r3, [r2, #8]
 800671a:	0799      	lsls	r1, r3, #30
 800671c:	d5fc      	bpl.n	8006718 <Lcd_Init+0x1b3c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800671e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006722:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006726:	890a      	ldrh	r2, [r1, #8]
 8006728:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800672c:	0612      	lsls	r2, r2, #24
 800672e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006732:	d4f8      	bmi.n	8006726 <Lcd_Init+0x1b4a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006738:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800673c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800673e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006742:	f044 0410 	orr.w	r4, r4, #16
 8006746:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006748:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800674a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800674e:	f024 0410 	bic.w	r4, r4, #16
 8006752:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006754:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006756:	243f      	movs	r4, #63	; 0x3f
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800675e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006760:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006762:	8913      	ldrh	r3, [r2, #8]
 8006764:	079d      	lsls	r5, r3, #30
 8006766:	d5fc      	bpl.n	8006762 <Lcd_Init+0x1b86>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006768:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800676c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006770:	890a      	ldrh	r2, [r1, #8]
 8006772:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006776:	0614      	lsls	r4, r2, #24
 8006778:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800677c:	d4f8      	bmi.n	8006770 <Lcd_Init+0x1b94>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800677e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006782:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006786:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006788:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800678c:	f044 0410 	orr.w	r4, r4, #16
 8006790:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006792:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8006794:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006798:	f024 0410 	bic.w	r4, r4, #16
 800679c:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800679e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80067a0:	242a      	movs	r4, #42	; 0x2a
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80067a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067a6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067a8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80067aa:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067ac:	8913      	ldrh	r3, [r2, #8]
 80067ae:	0799      	lsls	r1, r3, #30
 80067b0:	d5fc      	bpl.n	80067ac <Lcd_Init+0x1bd0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80067b2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80067b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80067ba:	890a      	ldrh	r2, [r1, #8]
 80067bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80067c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80067c4:	b292      	uxth	r2, r2
 80067c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80067ca:	2a00      	cmp	r2, #0
 80067cc:	d1f5      	bne.n	80067ba <Lcd_Init+0x1bde>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80067ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067d2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80067d6:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80067d8:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80067dc:	f045 0510 	orr.w	r5, r5, #16
 80067e0:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80067e2:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80067e4:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80067e8:	f025 0510 	bic.w	r5, r5, #16
 80067ec:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80067ee:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067f0:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80067f2:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80067f6:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80067f8:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067fa:	890b      	ldrh	r3, [r1, #8]
 80067fc:	079b      	lsls	r3, r3, #30
 80067fe:	d5fc      	bpl.n	80067fa <Lcd_Init+0x1c1e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006800:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006804:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006808:	890a      	ldrh	r2, [r1, #8]
 800680a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800680e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006812:	b292      	uxth	r2, r2
 8006814:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006818:	2a00      	cmp	r2, #0
 800681a:	d1f5      	bne.n	8006808 <Lcd_Init+0x1c2c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800681c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006820:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006824:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006826:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800682a:	f045 0510 	orr.w	r5, r5, #16
 800682e:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006830:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8006832:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006836:	f025 0510 	bic.w	r5, r5, #16
 800683a:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800683c:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800683e:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006840:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006844:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006846:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006848:	890b      	ldrh	r3, [r1, #8]
 800684a:	079d      	lsls	r5, r3, #30
 800684c:	d5fc      	bpl.n	8006848 <Lcd_Init+0x1c6c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800684e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006852:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006856:	890a      	ldrh	r2, [r1, #8]
 8006858:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800685c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006860:	b292      	uxth	r2, r2
 8006862:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006866:	2a00      	cmp	r2, #0
 8006868:	d1f5      	bne.n	8006856 <Lcd_Init+0x1c7a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800686a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800686e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006872:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006874:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006878:	f045 0510 	orr.w	r5, r5, #16
 800687c:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800687e:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8006880:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006884:	f025 0510 	bic.w	r5, r5, #16
 8006888:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800688a:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800688c:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800688e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006892:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006894:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006896:	890b      	ldrh	r3, [r1, #8]
 8006898:	079c      	lsls	r4, r3, #30
 800689a:	d5fc      	bpl.n	8006896 <Lcd_Init+0x1cba>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800689c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80068a0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80068a4:	890a      	ldrh	r2, [r1, #8]
 80068a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80068aa:	0612      	lsls	r2, r2, #24
 80068ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80068b0:	d4f8      	bmi.n	80068a4 <Lcd_Init+0x1cc8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80068b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80068ba:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80068bc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80068c0:	f044 0410 	orr.w	r4, r4, #16
 80068c4:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80068c6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80068c8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80068cc:	f024 0410 	bic.w	r4, r4, #16
 80068d0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80068d2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068d4:	24ef      	movs	r4, #239	; 0xef
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80068d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068da:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068dc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068de:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068e0:	8913      	ldrh	r3, [r2, #8]
 80068e2:	079b      	lsls	r3, r3, #30
 80068e4:	d5fc      	bpl.n	80068e0 <Lcd_Init+0x1d04>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80068e6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80068ea:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80068ee:	890a      	ldrh	r2, [r1, #8]
 80068f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80068f4:	0615      	lsls	r5, r2, #24
 80068f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80068fa:	d4f8      	bmi.n	80068ee <Lcd_Init+0x1d12>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80068fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006900:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006904:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006906:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800690a:	f044 0410 	orr.w	r4, r4, #16
 800690e:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006910:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8006912:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006916:	f024 0410 	bic.w	r4, r4, #16
 800691a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800691c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800691e:	2411      	movs	r4, #17
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006924:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006926:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006928:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800692a:	8913      	ldrh	r3, [r2, #8]
 800692c:	079c      	lsls	r4, r3, #30
 800692e:	d5fc      	bpl.n	800692a <Lcd_Init+0x1d4e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006930:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006934:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006938:	8913      	ldrh	r3, [r2, #8]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f9      	bne.n	8006938 <Lcd_Init+0x1d5c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006944:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006948:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800694c:	68cc      	ldr	r4, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 800694e:	f647 72ff 	movw	r2, #32767	; 0x7fff
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006952:	f044 0410 	orr.w	r4, r4, #16
 8006956:	60cc      	str	r4, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	f2c0 0207 	movt	r2, #7
 8006960:	4293      	cmp	r3, r2
 8006962:	dc05      	bgt.n	8006970 <Lcd_Init+0x1d94>
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	9b00      	ldr	r3, [sp, #0]
 800696c:	4293      	cmp	r3, r2
 800696e:	ddf9      	ble.n	8006964 <Lcd_Init+0x1d88>
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006974:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006978:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 800697a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800697e:	f021 0110 	bic.w	r1, r1, #16
 8006982:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8006984:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006988:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800698a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800698e:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006992:	f424 7400 	bic.w	r4, r4, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006996:	2129      	movs	r1, #41	; 0x29
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006998:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800699a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800699c:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800699e:	8913      	ldrh	r3, [r2, #8]
 80069a0:	0799      	lsls	r1, r3, #30
 80069a2:	d5fc      	bpl.n	800699e <Lcd_Init+0x1dc2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80069a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80069a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069ac:	891c      	ldrh	r4, [r3, #8]
 80069ae:	f004 0480 	and.w	r4, r4, #128	; 0x80
 80069b2:	b2a4      	uxth	r4, r4
 80069b4:	2c00      	cmp	r4, #0
 80069b6:	d1f9      	bne.n	80069ac <Lcd_Init+0x1dd0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80069b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	f042 0210 	orr.w	r2, r2, #16
 80069c6:	60da      	str	r2, [r3, #12]
	Lcd_WR_REG(0x11); //Exit Sleep
	_Delay(120);

	Lcd_WR_REG(0x29); //display on

	Lcd_Set_Display_Mode(mode);
 80069c8:	f7fd fae4 	bl	8003f94 <Lcd_Set_Display_Mode>
	Lcd_CS_DIS();
}

void Lcd_Clr_Screen(void)
{
	Lcd_Draw_Back_Color(BLACK);
 80069cc:	4620      	mov	r0, r4
 80069ce:	f7fe f85d 	bl	8004a8c <Lcd_Draw_Back_Color>


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 80069d2:	9401      	str	r4, [sp, #4]
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80069da:	f2c0 0212 	movt	r2, #18
 80069de:	4293      	cmp	r3, r2
 80069e0:	dc05      	bgt.n	80069ee <Lcd_Init+0x1e12>
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	3301      	adds	r3, #1
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	4293      	cmp	r3, r2
 80069ec:	ddf9      	ble.n	80069e2 <Lcd_Init+0x1e06>
	Lcd_Set_Display_Mode(mode);

	Lcd_Clr_Screen();
	_Delay(300);

	Lcd_LED_ON();
 80069ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069fc:	60da      	str	r2, [r3, #12]
}
 80069fe:	b005      	add	sp, #20
 8006a00:	bd30      	pop	{r4, r5, pc}
 8006a02:	bf00      	nop

08006a04 <Lcd_Put_Pixel>:

void Lcd_Put_Pixel(unsigned short x, unsigned short y, unsigned short color)
{
 8006a04:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a0e:	68df      	ldr	r7, [r3, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8006a10:	f240 5494 	movw	r4, #1428	; 0x594
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006a14:	f027 0710 	bic.w	r7, r7, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8006a18:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006a1c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8006a20:	8926      	ldrh	r6, [r4, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006a22:	f2c4 0501 	movt	r5, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006a26:	60df      	str	r7, [r3, #12]
   Lcd_RS_DATA();
 8006a28:	68ef      	ldr	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006a2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a32:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006a34:	f427 7700 	bic.w	r7, r7, #512	; 0x200
 8006a38:	60ef      	str	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a3a:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006a3c:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a3e:	892b      	ldrh	r3, [r5, #8]
 8006a40:	079b      	lsls	r3, r3, #30
 8006a42:	d5fc      	bpl.n	8006a3e <Lcd_Put_Pixel+0x3a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006a44:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006a48:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006a4c:	8935      	ldrh	r5, [r6, #8]
 8006a4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a52:	062f      	lsls	r7, r5, #24
 8006a54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a58:	d4f8      	bmi.n	8006a4c <Lcd_Put_Pixel+0x48>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006a5a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006a5e:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006a62:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006a64:	f44f 6640 	mov.w	r6, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006a68:	f047 0710 	orr.w	r7, r7, #16
 8006a6c:	60ef      	str	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a6e:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8006a70:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a74:	f027 0710 	bic.w	r7, r7, #16
 8006a78:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8006a7a:	68f5      	ldr	r5, [r6, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 8006a7c:	0a07      	lsrs	r7, r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006a7e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006a82:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a84:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006a86:	819f      	strh	r7, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a88:	892b      	ldrh	r3, [r5, #8]
 8006a8a:	079e      	lsls	r6, r3, #30
 8006a8c:	d5fc      	bpl.n	8006a88 <Lcd_Put_Pixel+0x84>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006a8e:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006a92:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006a96:	8935      	ldrh	r5, [r6, #8]
 8006a98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a9c:	062d      	lsls	r5, r5, #24
 8006a9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006aa2:	d4f8      	bmi.n	8006a96 <Lcd_Put_Pixel+0x92>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006aa4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006aa8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006aac:	f8d5 c00c 	ldr.w	ip, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006ab0:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006ab4:	f04c 0c10 	orr.w	ip, ip, #16
 8006ab8:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006abc:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006ac0:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006ac4:	f02c 0c10 	bic.w	ip, ip, #16
 8006ac8:	f8c5 c00c 	str.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006acc:	68f5      	ldr	r5, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006ace:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006ad0:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006ad4:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006ad6:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006ad8:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006ada:	892b      	ldrh	r3, [r5, #8]
 8006adc:	079e      	lsls	r6, r3, #30
 8006ade:	d5fc      	bpl.n	8006ada <Lcd_Put_Pixel+0xd6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006ae0:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006ae4:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006ae8:	8935      	ldrh	r5, [r6, #8]
 8006aea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006aee:	062d      	lsls	r5, r5, #24
 8006af0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006af4:	d4f8      	bmi.n	8006ae8 <Lcd_Put_Pixel+0xe4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006af6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006afa:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006afe:	f8d5 c00c 	ldr.w	ip, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b02:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b06:	f04c 0c10 	orr.w	ip, ip, #16
 8006b0a:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b0e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006b12:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b16:	f02c 0c10 	bic.w	ip, ip, #16
 8006b1a:	f8c5 c00c 	str.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006b1e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b22:	461d      	mov	r5, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b24:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8006b28:	f8c6 c00c 	str.w	ip, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b2c:	819f      	strh	r7, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b2e:	892b      	ldrh	r3, [r5, #8]
 8006b30:	079e      	lsls	r6, r3, #30
 8006b32:	d5fc      	bpl.n	8006b2e <Lcd_Put_Pixel+0x12a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006b34:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006b38:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006b3c:	8935      	ldrh	r5, [r6, #8]
 8006b3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b42:	062d      	lsls	r5, r5, #24
 8006b44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006b48:	d4f8      	bmi.n	8006b3c <Lcd_Put_Pixel+0x138>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b4a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006b4e:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006b52:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b54:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b58:	f047 0710 	orr.w	r7, r7, #16
 8006b5c:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b5e:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8006b60:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b64:	f027 0710 	bic.w	r7, r7, #16
 8006b68:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8006b6a:	68f7      	ldr	r7, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b6c:	461d      	mov	r5, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b6e:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8006b72:	60f7      	str	r7, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b74:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b76:	892b      	ldrh	r3, [r5, #8]
 8006b78:	079f      	lsls	r7, r3, #30
 8006b7a:	d5fc      	bpl.n	8006b76 <Lcd_Put_Pixel+0x172>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006b7c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006b80:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006b84:	8928      	ldrh	r0, [r5, #8]
 8006b86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b8a:	0606      	lsls	r6, r0, #24
 8006b8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006b90:	d4f8      	bmi.n	8006b84 <Lcd_Put_Pixel+0x180>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b92:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b96:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006b9a:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006b9c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006ba0:	f046 0610 	orr.w	r6, r6, #16
 8006ba4:	60c6      	str	r6, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006ba6:	68c7      	ldr	r7, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 8006ba8:	8966      	ldrh	r6, [r4, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006baa:	f027 0710 	bic.w	r7, r7, #16
 8006bae:	60c7      	str	r7, [r0, #12]
   Lcd_RS_DATA();
 8006bb0:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006bb4:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006bb6:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006bb8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8006bbc:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006bbe:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006bc0:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006bc2:	8903      	ldrh	r3, [r0, #8]
 8006bc4:	079d      	lsls	r5, r3, #30
 8006bc6:	d5fc      	bpl.n	8006bc2 <Lcd_Put_Pixel+0x1be>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006bc8:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006bcc:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006bd0:	8928      	ldrh	r0, [r5, #8]
 8006bd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006bd6:	0600      	lsls	r0, r0, #24
 8006bd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006bdc:	d4f8      	bmi.n	8006bd0 <Lcd_Put_Pixel+0x1cc>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006bde:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006be2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006be6:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006be8:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006bec:	f046 0610 	orr.w	r6, r6, #16
 8006bf0:	60c6      	str	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006bf2:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8006bf4:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006bf8:	f026 0610 	bic.w	r6, r6, #16
 8006bfc:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8006bfe:	68e8      	ldr	r0, [r5, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8006c00:	0a0e      	lsrs	r6, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c02:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8006c06:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c08:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c0a:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c0c:	8903      	ldrh	r3, [r0, #8]
 8006c0e:	079b      	lsls	r3, r3, #30
 8006c10:	d5fc      	bpl.n	8006c0c <Lcd_Put_Pixel+0x208>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006c12:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006c16:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006c1a:	8928      	ldrh	r0, [r5, #8]
 8006c1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006c20:	0607      	lsls	r7, r0, #24
 8006c22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c26:	d4f8      	bmi.n	8006c1a <Lcd_Put_Pixel+0x216>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c2c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006c30:	68c7      	ldr	r7, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c32:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c36:	f047 0710 	orr.w	r7, r7, #16
 8006c3a:	60c7      	str	r7, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c3c:	68c7      	ldr	r7, [r0, #12]
	Lcd_RS_REG();
 8006c3e:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c42:	f027 0710 	bic.w	r7, r7, #16
 8006c46:	60c7      	str	r7, [r0, #12]
	Lcd_RS_REG();
 8006c48:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c4a:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c4c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8006c50:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c52:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c54:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c56:	8903      	ldrh	r3, [r0, #8]
 8006c58:	079d      	lsls	r5, r3, #30
 8006c5a:	d5fc      	bpl.n	8006c56 <Lcd_Put_Pixel+0x252>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006c5c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006c60:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006c64:	8928      	ldrh	r0, [r5, #8]
 8006c66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006c6a:	0600      	lsls	r0, r0, #24
 8006c6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c70:	d4f8      	bmi.n	8006c64 <Lcd_Put_Pixel+0x260>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c76:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006c7a:	68c7      	ldr	r7, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c7c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c80:	f047 0710 	orr.w	r7, r7, #16
 8006c84:	60c7      	str	r7, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c86:	68c7      	ldr	r7, [r0, #12]
	Lcd_RS_REG();
 8006c88:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c8c:	f027 0710 	bic.w	r7, r7, #16
 8006c90:	60c7      	str	r7, [r0, #12]
	Lcd_RS_REG();
 8006c92:	68ef      	ldr	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c94:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c96:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8006c9a:	60ef      	str	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c9c:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c9e:	8903      	ldrh	r3, [r0, #8]
 8006ca0:	079f      	lsls	r7, r3, #30
 8006ca2:	d5fc      	bpl.n	8006c9e <Lcd_Put_Pixel+0x29a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006ca4:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006ca8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006cac:	8928      	ldrh	r0, [r5, #8]
 8006cae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cb2:	0606      	lsls	r6, r0, #24
 8006cb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006cb8:	d4f8      	bmi.n	8006cac <Lcd_Put_Pixel+0x2a8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006cba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006cbe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006cc2:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006cc4:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006cc8:	f046 0610 	orr.w	r6, r6, #16
 8006ccc:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006cce:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8006cd0:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006cd4:	f026 0610 	bic.w	r6, r6, #16
 8006cd8:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8006cda:	68ee      	ldr	r6, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006cdc:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006cde:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 8006ce2:	60ee      	str	r6, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006ce4:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006ce6:	8903      	ldrh	r3, [r0, #8]
 8006ce8:	079d      	lsls	r5, r3, #30
 8006cea:	d5fc      	bpl.n	8006ce6 <Lcd_Put_Pixel+0x2e2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006cec:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006cf0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006cf4:	8901      	ldrh	r1, [r0, #8]
 8006cf6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cfa:	0609      	lsls	r1, r1, #24
 8006cfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d00:	d4f8      	bmi.n	8006cf4 <Lcd_Put_Pixel+0x2f0>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006d02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d06:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006d0a:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006d0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006d10:	f045 0510 	orr.w	r5, r5, #16
 8006d14:	60cd      	str	r5, [r1, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006d16:	68cd      	ldr	r5, [r1, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 8006d18:	88e4      	ldrh	r4, [r4, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006d1a:	f025 0510 	bic.w	r5, r5, #16
 8006d1e:	60cd      	str	r5, [r1, #12]
   Lcd_RS_DATA();
 8006d20:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006d24:	68c1      	ldr	r1, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d26:	b2e4      	uxtb	r4, r4
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006d28:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006d2c:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d2e:	4619      	mov	r1, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d30:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d32:	890b      	ldrh	r3, [r1, #8]
 8006d34:	079f      	lsls	r7, r3, #30
 8006d36:	d5fc      	bpl.n	8006d32 <Lcd_Put_Pixel+0x32e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006d38:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006d3c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006d40:	8901      	ldrh	r1, [r0, #8]
 8006d42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d46:	060e      	lsls	r6, r1, #24
 8006d48:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d4c:	d4f8      	bmi.n	8006d40 <Lcd_Put_Pixel+0x33c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d52:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006d56:	68cc      	ldr	r4, [r1, #12]
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8006d58:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006d5c:	f044 0410 	orr.w	r4, r4, #16
 8006d60:	60cc      	str	r4, [r1, #12]
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8006d62:	68cc      	ldr	r4, [r1, #12]
   Lcd_RS_REG();
 8006d64:	f2c4 0001 	movt	r0, #16385	; 0x4001
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8006d68:	f024 0410 	bic.w	r4, r4, #16
 8006d6c:	60cc      	str	r4, [r1, #12]
   Lcd_RS_REG();
 8006d6e:	68c1      	ldr	r1, [r0, #12]
   _SPI1_Write_Byte(Data>>8);
 8006d70:	0a14      	lsrs	r4, r2, #8
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8006d72:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006d76:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d78:	4619      	mov	r1, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d7a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d7c:	890b      	ldrh	r3, [r1, #8]
 8006d7e:	079d      	lsls	r5, r3, #30
 8006d80:	d5fc      	bpl.n	8006d7c <Lcd_Put_Pixel+0x378>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006d82:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006d86:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006d8a:	8901      	ldrh	r1, [r0, #8]
 8006d8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d90:	060c      	lsls	r4, r1, #24
 8006d92:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d96:	d4f8      	bmi.n	8006d8a <Lcd_Put_Pixel+0x386>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d9c:	891a      	ldrh	r2, [r3, #8]
 8006d9e:	0790      	lsls	r0, r2, #30
 8006da0:	d5fc      	bpl.n	8006d9c <Lcd_Put_Pixel+0x398>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006da2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006da6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006daa:	8913      	ldrh	r3, [r2, #8]
 8006dac:	0619      	lsls	r1, r3, #24
 8006dae:	d4fc      	bmi.n	8006daa <Lcd_Put_Pixel+0x3a6>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8006db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006db4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	f042 0210 	orr.w	r2, r2, #16
 8006dbe:	60da      	str	r2, [r3, #12]

void Lcd_Put_Pixel(unsigned short x, unsigned short y, unsigned short color)
{
	Lcd_Set_Cursor(x,y);
	Lcd_Write_Data_16Bit(color);
}
 8006dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8006dc2:	4770      	bx	lr

08006dc4 <LED_Init>:
#include "device_driver.h"

void LED_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8006dc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006dcc:	6991      	ldr	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRH, 0xff, 0x66, 0);
 8006dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
#include "device_driver.h"

void LED_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8006dd2:	f041 0108 	orr.w	r1, r1, #8
 8006dd6:	6191      	str	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRH, 0xff, 0x66, 0);
 8006dd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006de2:	f042 0266 	orr.w	r2, r2, #102	; 0x66
 8006de6:	605a      	str	r2, [r3, #4]
	Macro_Set_Area(GPIOB->ODR, 0x3, 8);
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006dee:	60da      	str	r2, [r3, #12]
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop

08006df4 <LED_Display>:
}

void LED_Display(unsigned int num)
{
	Macro_Write_Block(GPIOB->ODR, 0x3, (~num & 3), 8);
 8006df4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006df8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	43c0      	mvns	r0, r0
 8006e00:	f000 0003 	and.w	r0, r0, #3
 8006e04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	4770      	bx	lr

08006e10 <LED_All_On>:
}

void LED_All_On(void)
{
	Macro_Clear_Area(GPIOB->ODR, 0x3, 8);
 8006e10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e1e:	60da      	str	r2, [r3, #12]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop

08006e24 <LED_All_Off>:
}

void LED_All_Off(void)
{
	Macro_Set_Area(GPIOB->ODR, 0x3, 8);
 8006e24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop

08006e38 <System_Init>:
static BULLET bullets[BULLET_MAX];
static ENEMY enemies[ENEMY_MAX];
static ITEM items[ITEM_MAX];

void System_Init(void)
{
 8006e38:	b508      	push	{r3, lr}
    Clock_Init();
 8006e3a:	f7fc f9d7 	bl	80031ec <Clock_Init>
    LED_Init();
 8006e3e:	f7ff ffc1 	bl	8006dc4 <LED_Init>
    Key_Poll_Init();
 8006e42:	f7fc fee1 	bl	8003c08 <Key_Poll_Init>
    Uart1_Init(115200);
 8006e46:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8006e4a:	f002 faa9 	bl	80093a0 <Uart1_Init>

    SCB->VTOR = 0x08003000;
 8006e4e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006e52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006e56:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006e5a:	f6c0 0200 	movt	r2, #2048	; 0x800
    SCB->SHCSR = 7<<16;
 8006e5e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    Clock_Init();
    LED_Init();
    Key_Poll_Init();
    Uart1_Init(115200);

    SCB->VTOR = 0x08003000;
 8006e62:	609a      	str	r2, [r3, #8]
    SCB->SHCSR = 7<<16;
 8006e64:	6259      	str	r1, [r3, #36]	; 0x24
 8006e66:	bd08      	pop	{r3, pc}

08006e68 <Bullet_Init>:

void Bullet_Init(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        bullets[i].active = 0;
 8006e68:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8006e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	615a      	str	r2, [r3, #20]
 8006e76:	621a      	str	r2, [r3, #32]
 8006e78:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e82:	669a      	str	r2, [r3, #104]	; 0x68
 8006e84:	675a      	str	r2, [r3, #116]	; 0x74
 8006e86:	4770      	bx	lr

08006e88 <Enemy_Init>:

void Enemy_Init(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        enemies[i].active = 0;
 8006e88:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8006e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006e96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006e9a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006e9e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006ea2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006ea6:	4770      	bx	lr

08006ea8 <Item_Init>:

void Item_Init(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        items[i].active = 0;
 8006ea8:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8006eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006eb6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006eba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8006ebe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8006ec2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8006ec6:	4770      	bx	lr

08006ec8 <Spawn_Enemy>:
    }
}

void Spawn_Enemy(void)
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
 8006eca:	f240 54a4 	movw	r4, #1444	; 0x5a4
 8006ece:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006ed2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006ed6:	b373      	cbz	r3, 8006f36 <Spawn_Enemy+0x6e>
 8006ed8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006edc:	b36b      	cbz	r3, 8006f3a <Spawn_Enemy+0x72>
 8006ede:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006ee2:	b363      	cbz	r3, 8006f3e <Spawn_Enemy+0x76>
 8006ee4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006ee8:	b123      	cbz	r3, 8006ef4 <Spawn_Enemy+0x2c>
 8006eea:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 8006eee:	2504      	movs	r5, #4
    {
        if (!enemies[i].active)
 8006ef0:	b10b      	cbz	r3, 8006ef6 <Spawn_Enemy+0x2e>
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 8006ef4:	2503      	movs	r5, #3
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
 8006ef6:	f002 fc3d 	bl	8009774 <rand>
 8006efa:	f248 13b5 	movw	r3, #33205	; 0x81b5
 8006efe:	f6c1 334e 	movt	r3, #6990	; 0x1b4e
 8006f02:	fb83 2300 	smull	r2, r3, r3, r0
 8006f06:	17c2      	asrs	r2, r0, #31
 8006f08:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8006f0c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f10:	fb02 0013 	mls	r0, r2, r3, r0
 8006f14:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006f18:	eb04 0485 	add.w	r4, r4, r5, lsl #2
            enemies[i].y = 0;
 8006f1c:	2300      	movs	r3, #0
            enemies[i].stop_timer = ENEMY_STOP_TIME;
 8006f1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
            enemies[i].moving_down = 0;
            enemies[i].active = 1;
 8006f22:	2201      	movs	r2, #1
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
 8006f24:	67a0      	str	r0, [r4, #120]	; 0x78
            enemies[i].y = 0;
            enemies[i].stop_timer = ENEMY_STOP_TIME;
 8006f26:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
            enemies[i].moving_down = 0;
            enemies[i].active = 1;
 8006f2a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
            enemies[i].y = 0;
 8006f2e:	67e3      	str	r3, [r4, #124]	; 0x7c
            enemies[i].stop_timer = ENEMY_STOP_TIME;
            enemies[i].moving_down = 0;
 8006f30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8006f34:	bd38      	pop	{r3, r4, r5, pc}
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 8006f36:	461d      	mov	r5, r3
 8006f38:	e7dd      	b.n	8006ef6 <Spawn_Enemy+0x2e>
 8006f3a:	2501      	movs	r5, #1
 8006f3c:	e7db      	b.n	8006ef6 <Spawn_Enemy+0x2e>
 8006f3e:	2502      	movs	r5, #2
 8006f40:	e7d9      	b.n	8006ef6 <Spawn_Enemy+0x2e>
 8006f42:	bf00      	nop

08006f44 <Spawn_Item>:
        }
    }
}

void Spawn_Item(void)
{
 8006f44:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (!items[i].active)
 8006f46:	f240 54a4 	movw	r4, #1444	; 0x5a4
 8006f4a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8006f4e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8006f52:	b3bb      	cbz	r3, 8006fc4 <Spawn_Item+0x80>
 8006f54:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006f58:	b3b3      	cbz	r3, 8006fc8 <Spawn_Item+0x84>
 8006f5a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006f5e:	b3ab      	cbz	r3, 8006fcc <Spawn_Item+0x88>
 8006f60:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006f64:	b123      	cbz	r3, 8006f70 <Spawn_Item+0x2c>
 8006f66:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8006f6a:	2504      	movs	r5, #4
    {
        if (!items[i].active)
 8006f6c:	b10b      	cbz	r3, 8006f72 <Spawn_Item+0x2e>
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8006f70:	2503      	movs	r5, #3
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
 8006f72:	f002 fbff 	bl	8009774 <rand>
 8006f76:	f240 12a7 	movw	r2, #423	; 0x1a7
 8006f7a:	f6c1 226d 	movt	r2, #6765	; 0x1a6d
 8006f7e:	fb82 3200 	smull	r3, r2, r2, r0
 8006f82:	17c3      	asrs	r3, r0, #31
 8006f84:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 8006f88:	f44f 739b 	mov.w	r3, #310	; 0x136
 8006f8c:	fb03 0012 	mls	r0, r3, r2, r0
 8006f90:	eb04 1405 	add.w	r4, r4, r5, lsl #4
            items[i].y = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
 8006f9a:	f8c4 00dc 	str.w	r0, [r4, #220]	; 0xdc
            items[i].y = 0;
            items[i].type = (ITEM_TYPE)(rand() % 3);
 8006f9e:	f002 fbe9 	bl	8009774 <rand>
 8006fa2:	f245 5356 	movw	r3, #21846	; 0x5556
 8006fa6:	f2c5 5355 	movt	r3, #21845	; 0x5555
 8006faa:	fb83 2300 	smull	r2, r3, r3, r0
 8006fae:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8006fb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006fb6:	1ac0      	subs	r0, r0, r3
            items[i].active = 1;
 8006fb8:	2201      	movs	r2, #1
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
            items[i].y = 0;
            items[i].type = (ITEM_TYPE)(rand() % 3);
 8006fba:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
            items[i].active = 1;
 8006fbe:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8006fc4:	461d      	mov	r5, r3
 8006fc6:	e7d4      	b.n	8006f72 <Spawn_Item+0x2e>
 8006fc8:	2501      	movs	r5, #1
 8006fca:	e7d2      	b.n	8006f72 <Spawn_Item+0x2e>
 8006fcc:	2502      	movs	r5, #2
 8006fce:	e7d0      	b.n	8006f72 <Spawn_Item+0x2e>

08006fd0 <Enemy_Update>:
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8006fd0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8006fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006fdc:	b14a      	cbz	r2, 8006ff2 <Enemy_Update+0x22>
        {
            if (!enemies[i].moving_down)
 8006fde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d17b      	bne.n	80070de <Enemy_Update+0x10e>
            {
                if (enemies[i].y < LCDH / 3)
 8006fe6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006fe8:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8006fea:	bfdc      	itt	le
 8006fec:	3201      	addle	r2, #1
 8006fee:	67da      	strle	r2, [r3, #124]	; 0x7c
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8006ff0:	dc7e      	bgt.n	80070f0 <Enemy_Update+0x120>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8006ff2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006ff6:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8006ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006ffe:	b159      	cbz	r1, 8007018 <Enemy_Update+0x48>
        {
            if (!enemies[i].moving_down)
 8007000:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8007004:	2900      	cmp	r1, #0
 8007006:	d15f      	bne.n	80070c8 <Enemy_Update+0xf8>
            {
                if (enemies[i].y < LCDH / 3)
 8007008:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800700c:	294f      	cmp	r1, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 800700e:	bfdc      	itt	le
 8007010:	3101      	addle	r1, #1
 8007012:	f8c2 1090 	strle.w	r1, [r2, #144]	; 0x90
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007016:	dc77      	bgt.n	8007108 <Enemy_Update+0x138>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007018:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800701c:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007020:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007024:	b159      	cbz	r1, 800703e <Enemy_Update+0x6e>
        {
            if (!enemies[i].moving_down)
 8007026:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800702a:	2900      	cmp	r1, #0
 800702c:	d141      	bne.n	80070b2 <Enemy_Update+0xe2>
            {
                if (enemies[i].y < LCDH / 3)
 800702e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8007032:	294f      	cmp	r1, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007034:	bfdc      	itt	le
 8007036:	3101      	addle	r1, #1
 8007038:	f8c2 10a4 	strle.w	r1, [r2, #164]	; 0xa4
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 800703c:	dc70      	bgt.n	8007120 <Enemy_Update+0x150>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 800703e:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8007042:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007046:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800704a:	b151      	cbz	r1, 8007062 <Enemy_Update+0x92>
        {
            if (!enemies[i].moving_down)
 800704c:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8007050:	bb21      	cbnz	r1, 800709c <Enemy_Update+0xcc>
            {
                if (enemies[i].y < LCDH / 3)
 8007052:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 8007056:	294f      	cmp	r1, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007058:	bfdc      	itt	le
 800705a:	3101      	addle	r1, #1
 800705c:	f8c2 10b8 	strle.w	r1, [r2, #184]	; 0xb8
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007060:	dc6a      	bgt.n	8007138 <Enemy_Update+0x168>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007062:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8007066:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800706e:	b1a2      	cbz	r2, 800709a <Enemy_Update+0xca>
        {
            if (!enemies[i].moving_down)
 8007070:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007074:	b93a      	cbnz	r2, 8007086 <Enemy_Update+0xb6>
            {
                if (enemies[i].y < LCDH / 3)
 8007076:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800707a:	2a4f      	cmp	r2, #79	; 0x4f
 800707c:	dc68      	bgt.n	8007150 <Enemy_Update+0x180>
                {
                    enemies[i].y += ENEMY_SPEED;
 800707e:	3201      	adds	r2, #1
 8007080:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8007084:	4770      	bx	lr
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8007086:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800708a:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 800708c:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 800708e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 8007092:	bfc4      	itt	gt
 8007094:	2200      	movgt	r2, #0
 8007096:	f8c3 20d0 	strgt.w	r2, [r3, #208]	; 0xd0
 800709a:	4770      	bx	lr
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 800709c:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 80070a0:	3101      	adds	r1, #1
                if (enemies[i].y > Y_MAX)
 80070a2:	29ef      	cmp	r1, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070a4:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 80070a8:	bfc4      	itt	gt
 80070aa:	2100      	movgt	r1, #0
 80070ac:	f8c2 10bc 	strgt.w	r1, [r2, #188]	; 0xbc
 80070b0:	e7d7      	b.n	8007062 <Enemy_Update+0x92>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070b2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80070b6:	3101      	adds	r1, #1
                if (enemies[i].y > Y_MAX)
 80070b8:	29ef      	cmp	r1, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070ba:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 80070be:	bfc4      	itt	gt
 80070c0:	2100      	movgt	r1, #0
 80070c2:	f8c2 10a8 	strgt.w	r1, [r2, #168]	; 0xa8
 80070c6:	e7ba      	b.n	800703e <Enemy_Update+0x6e>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070c8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80070cc:	3101      	adds	r1, #1
                if (enemies[i].y > Y_MAX)
 80070ce:	29ef      	cmp	r1, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070d0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 80070d4:	bfc4      	itt	gt
 80070d6:	2100      	movgt	r1, #0
 80070d8:	f8c2 1094 	strgt.w	r1, [r2, #148]	; 0x94
 80070dc:	e79c      	b.n	8007018 <Enemy_Update+0x48>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070de:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070e0:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 80070e2:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80070e4:	67da      	str	r2, [r3, #124]	; 0x7c
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 80070e6:	bfc4      	itt	gt
 80070e8:	2200      	movgt	r2, #0
 80070ea:	f8c3 2080 	strgt.w	r2, [r3, #128]	; 0x80
 80070ee:	e780      	b.n	8006ff2 <Enemy_Update+0x22>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 80070f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80070f4:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 80070f6:	bfd5      	itete	le
 80070f8:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 80070fa:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 80070fe:	f8c3 2088 	strle.w	r2, [r3, #136]	; 0x88
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8007102:	f8c3 2084 	strgt.w	r2, [r3, #132]	; 0x84
 8007106:	e774      	b.n	8006ff2 <Enemy_Update+0x22>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8007108:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
 800710c:	2900      	cmp	r1, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 800710e:	bfd5      	itete	le
 8007110:	2101      	movle	r1, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8007112:	f101 31ff 	addgt.w	r1, r1, #4294967295
                    else
                        enemies[i].moving_down = 1;
 8007116:	f8c2 109c 	strle.w	r1, [r2, #156]	; 0x9c
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 800711a:	f8c2 1098 	strgt.w	r1, [r2, #152]	; 0x98
 800711e:	e77b      	b.n	8007018 <Enemy_Update+0x48>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8007120:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8007124:	2900      	cmp	r1, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 8007126:	bfd5      	itete	le
 8007128:	2101      	movle	r1, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 800712a:	f101 31ff 	addgt.w	r1, r1, #4294967295
                    else
                        enemies[i].moving_down = 1;
 800712e:	f8c2 10b0 	strle.w	r1, [r2, #176]	; 0xb0
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8007132:	f8c2 10ac 	strgt.w	r1, [r2, #172]	; 0xac
 8007136:	e782      	b.n	800703e <Enemy_Update+0x6e>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8007138:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 800713c:	2900      	cmp	r1, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 800713e:	bfd5      	itete	le
 8007140:	2101      	movle	r1, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8007142:	f101 31ff 	addgt.w	r1, r1, #4294967295
                    else
                        enemies[i].moving_down = 1;
 8007146:	f8c2 10c4 	strle.w	r1, [r2, #196]	; 0xc4
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 800714a:	f8c2 10c0 	strgt.w	r1, [r2, #192]	; 0xc0
 800714e:	e788      	b.n	8007062 <Enemy_Update+0x92>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8007150:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007154:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
 8007156:	bfcb      	itete	gt
 8007158:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 800715c:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 800715e:	f8c3 20d4 	strgt.w	r2, [r3, #212]	; 0xd4
                    else
                        enemies[i].moving_down = 1;
 8007162:	f8c3 20d8 	strle.w	r2, [r3, #216]	; 0xd8
 8007166:	4770      	bx	lr

08007168 <Item_Update>:

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007168:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800716c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007170:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8007174:	b14a      	cbz	r2, 800718a <Item_Update+0x22>
        {
            items[i].y += ITEM_SPEED;
 8007176:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800717a:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 800717c:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 800717e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 8007182:	bfc4      	itt	gt
 8007184:	2200      	movgt	r2, #0
 8007186:	f8c3 20e4 	strgt.w	r2, [r3, #228]	; 0xe4

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 800718a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800718e:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007192:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007196:	b149      	cbz	r1, 80071ac <Item_Update+0x44>
        {
            items[i].y += ITEM_SPEED;
 8007198:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 800719c:	3102      	adds	r1, #2
            if (items[i].y > Y_MAX)
 800719e:	29ef      	cmp	r1, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 80071a0:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 80071a4:	bfc4      	itt	gt
 80071a6:	2100      	movgt	r1, #0
 80071a8:	f8c2 10f4 	strgt.w	r1, [r2, #244]	; 0xf4

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 80071ac:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 80071b0:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80071b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80071b8:	b149      	cbz	r1, 80071ce <Item_Update+0x66>
        {
            items[i].y += ITEM_SPEED;
 80071ba:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 80071be:	3102      	adds	r1, #2
            if (items[i].y > Y_MAX)
 80071c0:	29ef      	cmp	r1, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 80071c2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 80071c6:	bfc4      	itt	gt
 80071c8:	2100      	movgt	r1, #0
 80071ca:	f8c2 1104 	strgt.w	r1, [r2, #260]	; 0x104

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 80071ce:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 80071d2:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80071d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80071da:	b149      	cbz	r1, 80071f0 <Item_Update+0x88>
        {
            items[i].y += ITEM_SPEED;
 80071dc:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
 80071e0:	3102      	adds	r1, #2
            if (items[i].y > Y_MAX)
 80071e2:	29ef      	cmp	r1, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 80071e4:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 80071e8:	bfc4      	itt	gt
 80071ea:	2100      	movgt	r1, #0
 80071ec:	f8c2 1114 	strgt.w	r1, [r2, #276]	; 0x114

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 80071f0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80071f4:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80071f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80071fc:	b14a      	cbz	r2, 8007212 <Item_Update+0xaa>
        {
            items[i].y += ITEM_SPEED;
 80071fe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8007202:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8007204:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8007206:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 800720a:	bfc4      	itt	gt
 800720c:	2200      	movgt	r2, #0
 800720e:	f8c3 2124 	strgt.w	r2, [r3, #292]	; 0x124
 8007212:	4770      	bx	lr

08007214 <Enemy_Draw>:
        }
    }
}

void Enemy_Draw(void)
{
 8007214:	b510      	push	{r4, lr}
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007216:	f240 54a4 	movw	r4, #1444	; 0x5a4
 800721a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800721e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        }
    }
}

void Enemy_Draw(void)
{
 8007222:	b082      	sub	sp, #8
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007224:	bb03      	cbnz	r3, 8007268 <Enemy_Draw+0x54>
 8007226:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800722a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800722e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007232:	bb52      	cbnz	r2, 800728a <Enemy_Draw+0x76>
 8007234:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8007238:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800723c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007240:	2a00      	cmp	r2, #0
 8007242:	d135      	bne.n	80072b0 <Enemy_Draw+0x9c>
 8007244:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8007248:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800724c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007250:	2a00      	cmp	r2, #0
 8007252:	d140      	bne.n	80072d6 <Enemy_Draw+0xc2>
 8007254:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8007258:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800725c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007260:	2a00      	cmp	r2, #0
 8007262:	d14b      	bne.n	80072fc <Enemy_Draw+0xe8>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
        }
    }
}
 8007264:	b002      	add	sp, #8
 8007266:	bd10      	pop	{r4, pc}
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8007268:	2210      	movs	r2, #16
 800726a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007272:	4613      	mov	r3, r2
 8007274:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007276:	f7fd fc57 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 800727a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800727e:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007282:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007286:	2a00      	cmp	r2, #0
 8007288:	d0d4      	beq.n	8007234 <Enemy_Draw+0x20>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 800728a:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 800728e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8007292:	2210      	movs	r2, #16
 8007294:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	f7fd fc44 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80072a0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 80072a4:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80072a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d0c9      	beq.n	8007244 <Enemy_Draw+0x30>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 80072b0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80072b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80072b8:	2210      	movs	r2, #16
 80072ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	f7fd fc31 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80072c6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 80072ca:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80072ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	d0be      	beq.n	8007254 <Enemy_Draw+0x40>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 80072d6:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80072da:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80072de:	2210      	movs	r2, #16
 80072e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	4613      	mov	r3, r2
 80072e8:	f7fd fc1e 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80072ec:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 80072f0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80072f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	d0b3      	beq.n	8007264 <Enemy_Draw+0x50>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 80072fc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8007300:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8007304:	2210      	movs	r2, #16
 8007306:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	f7fd fc0b 	bl	8004b28 <Lcd_Draw_Box>
        }
    }
}
 8007312:	b002      	add	sp, #8
 8007314:	bd10      	pop	{r4, pc}
 8007316:	bf00      	nop

08007318 <Item_Draw>:

void Item_Draw(void)
{
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4c0e      	ldr	r4, [pc, #56]	; (8007354 <Item_Draw+0x3c>)
 800731c:	b082      	sub	sp, #8
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 800731e:	f64f 76e0 	movw	r6, #65504	; 0xffe0
 8007322:	f104 0550 	add.w	r5, r4, #80	; 0x50

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	b17b      	cbz	r3, 800734a <Item_Draw+0x32>
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 800732a:	7922      	ldrb	r2, [r4, #4]
 800732c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007330:	b122      	cbz	r2, 800733c <Item_Draw+0x24>
 8007332:	2a01      	cmp	r2, #1
 8007334:	bf0c      	ite	eq
 8007336:	4633      	moveq	r3, r6
 8007338:	f44f 63fc 	movne.w	r3, #2016	; 0x7e0
            Lcd_Draw_Box(items[i].x, items[i].y, 10, 10, item_color);
 800733c:	220a      	movs	r2, #10
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	e914 0003 	ldmdb	r4, {r0, r1}
 8007344:	4613      	mov	r3, r2
 8007346:	f7fd fbef 	bl	8004b28 <Lcd_Draw_Box>
 800734a:	3410      	adds	r4, #16
    }
}

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 800734c:	42ac      	cmp	r4, r5
 800734e:	d1ea      	bne.n	8007326 <Item_Draw+0xe>
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
            Lcd_Draw_Box(items[i].x, items[i].y, 10, 10, item_color);
        }
    }
}
 8007350:	b002      	add	sp, #8
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	20000688 	andcs	r0, r0, r8, lsl #13

08007358 <Fire_Bullet>:

void Fire_Bullet(void)
{
 8007358:	b430      	push	{r4, r5}
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 800735a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	b1a2      	cbz	r2, 8007390 <Fire_Bullet+0x38>
 8007366:	695a      	ldr	r2, [r3, #20]
 8007368:	b31a      	cbz	r2, 80073b2 <Fire_Bullet+0x5a>
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	b31a      	cbz	r2, 80073b6 <Fire_Bullet+0x5e>
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	b31a      	cbz	r2, 80073ba <Fire_Bullet+0x62>
 8007372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007374:	b31a      	cbz	r2, 80073be <Fire_Bullet+0x66>
 8007376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007378:	b31a      	cbz	r2, 80073c2 <Fire_Bullet+0x6a>
 800737a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800737c:	b31a      	cbz	r2, 80073c6 <Fire_Bullet+0x6e>
 800737e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007380:	b31a      	cbz	r2, 80073ca <Fire_Bullet+0x72>
 8007382:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007384:	b11a      	cbz	r2, 800738e <Fire_Bullet+0x36>
 8007386:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007388:	b30a      	cbz	r2, 80073ce <Fire_Bullet+0x76>
            bullets[i].y = player_y;
            bullets[i].active = 1;
            break;
        }
    }
}
 800738a:	bc30      	pop	{r4, r5}
 800738c:	4770      	bx	lr
    }
}

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
 800738e:	2208      	movs	r2, #8
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 8007390:	f240 0104 	movw	r1, #4
 8007394:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007398:	680d      	ldr	r5, [r1, #0]
 800739a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            bullets[i].y = player_y;
 800739e:	684c      	ldr	r4, [r1, #4]
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 80073a0:	0092      	lsls	r2, r2, #2
 80073a2:	3506      	adds	r5, #6
 80073a4:	1899      	adds	r1, r3, r2
            bullets[i].y = player_y;
            bullets[i].active = 1;
 80073a6:	2001      	movs	r0, #1
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 80073a8:	509d      	str	r5, [r3, r2]
            bullets[i].y = player_y;
 80073aa:	604c      	str	r4, [r1, #4]
            bullets[i].active = 1;
 80073ac:	6088      	str	r0, [r1, #8]
            break;
        }
    }
}
 80073ae:	bc30      	pop	{r4, r5}
 80073b0:	4770      	bx	lr
    }
}

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
 80073b2:	2201      	movs	r2, #1
 80073b4:	e7ec      	b.n	8007390 <Fire_Bullet+0x38>
 80073b6:	2202      	movs	r2, #2
 80073b8:	e7ea      	b.n	8007390 <Fire_Bullet+0x38>
 80073ba:	2203      	movs	r2, #3
 80073bc:	e7e8      	b.n	8007390 <Fire_Bullet+0x38>
 80073be:	2204      	movs	r2, #4
 80073c0:	e7e6      	b.n	8007390 <Fire_Bullet+0x38>
 80073c2:	2205      	movs	r2, #5
 80073c4:	e7e4      	b.n	8007390 <Fire_Bullet+0x38>
 80073c6:	2206      	movs	r2, #6
 80073c8:	e7e2      	b.n	8007390 <Fire_Bullet+0x38>
 80073ca:	2207      	movs	r2, #7
 80073cc:	e7e0      	b.n	8007390 <Fire_Bullet+0x38>
 80073ce:	2209      	movs	r2, #9
 80073d0:	e7de      	b.n	8007390 <Fire_Bullet+0x38>
 80073d2:	bf00      	nop

080073d4 <Bullet_Update>:

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80073d4:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80073d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	b132      	cbz	r2, 80073ee <Bullet_Update+0x1a>
        {
            bullets[i].y -= BULLET_SPEED;
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 80073e4:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 80073e6:	605a      	str	r2, [r3, #4]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 80073e8:	bfbc      	itt	lt
 80073ea:	2200      	movlt	r2, #0
 80073ec:	609a      	strlt	r2, [r3, #8]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80073ee:	6959      	ldr	r1, [r3, #20]
 80073f0:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80073f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80073f8:	b131      	cbz	r1, 8007408 <Bullet_Update+0x34>
        {
            bullets[i].y -= BULLET_SPEED;
 80073fa:	6911      	ldr	r1, [r2, #16]
 80073fc:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 80073fe:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007400:	6111      	str	r1, [r2, #16]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007402:	bfbc      	itt	lt
 8007404:	2100      	movlt	r1, #0
 8007406:	6151      	strlt	r1, [r2, #20]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007408:	6a19      	ldr	r1, [r3, #32]
 800740a:	f240 52a4 	movw	r2, #1444	; 0x5a4
 800740e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007412:	b131      	cbz	r1, 8007422 <Bullet_Update+0x4e>
        {
            bullets[i].y -= BULLET_SPEED;
 8007414:	69d1      	ldr	r1, [r2, #28]
 8007416:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 8007418:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 800741a:	61d1      	str	r1, [r2, #28]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 800741c:	bfbc      	itt	lt
 800741e:	2100      	movlt	r1, #0
 8007420:	6211      	strlt	r1, [r2, #32]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007422:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007424:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007428:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800742c:	b131      	cbz	r1, 800743c <Bullet_Update+0x68>
        {
            bullets[i].y -= BULLET_SPEED;
 800742e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007430:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 8007432:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007434:	6291      	str	r1, [r2, #40]	; 0x28
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007436:	bfbc      	itt	lt
 8007438:	2100      	movlt	r1, #0
 800743a:	62d1      	strlt	r1, [r2, #44]	; 0x2c

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800743c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800743e:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007442:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007446:	b131      	cbz	r1, 8007456 <Bullet_Update+0x82>
        {
            bullets[i].y -= BULLET_SPEED;
 8007448:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800744a:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 800744c:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 800744e:	6351      	str	r1, [r2, #52]	; 0x34
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007450:	bfbc      	itt	lt
 8007452:	2100      	movlt	r1, #0
 8007454:	6391      	strlt	r1, [r2, #56]	; 0x38

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007456:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007458:	f240 52a4 	movw	r2, #1444	; 0x5a4
 800745c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007460:	b131      	cbz	r1, 8007470 <Bullet_Update+0x9c>
        {
            bullets[i].y -= BULLET_SPEED;
 8007462:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8007464:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 8007466:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007468:	6411      	str	r1, [r2, #64]	; 0x40
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 800746a:	bfbc      	itt	lt
 800746c:	2100      	movlt	r1, #0
 800746e:	6451      	strlt	r1, [r2, #68]	; 0x44

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007470:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007472:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007476:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800747a:	b131      	cbz	r1, 800748a <Bullet_Update+0xb6>
        {
            bullets[i].y -= BULLET_SPEED;
 800747c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800747e:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 8007480:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007482:	64d1      	str	r1, [r2, #76]	; 0x4c
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007484:	bfbc      	itt	lt
 8007486:	2100      	movlt	r1, #0
 8007488:	6511      	strlt	r1, [r2, #80]	; 0x50

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800748a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800748c:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007490:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007494:	b131      	cbz	r1, 80074a4 <Bullet_Update+0xd0>
        {
            bullets[i].y -= BULLET_SPEED;
 8007496:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8007498:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 800749a:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 800749c:	6591      	str	r1, [r2, #88]	; 0x58
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 800749e:	bfbc      	itt	lt
 80074a0:	2100      	movlt	r1, #0
 80074a2:	65d1      	strlt	r1, [r2, #92]	; 0x5c

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80074a4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80074a6:	f240 52a4 	movw	r2, #1444	; 0x5a4
 80074aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80074ae:	b131      	cbz	r1, 80074be <Bullet_Update+0xea>
        {
            bullets[i].y -= BULLET_SPEED;
 80074b0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80074b2:	390a      	subs	r1, #10
            if (bullets[i].y < Y_MIN)
 80074b4:	2900      	cmp	r1, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 80074b6:	6651      	str	r1, [r2, #100]	; 0x64
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 80074b8:	bfbc      	itt	lt
 80074ba:	2100      	movlt	r1, #0
 80074bc:	6691      	strlt	r1, [r2, #104]	; 0x68

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80074be:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80074c0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80074c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074c8:	b132      	cbz	r2, 80074d8 <Bullet_Update+0x104>
        {
            bullets[i].y -= BULLET_SPEED;
 80074ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074cc:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 80074ce:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 80074d0:	671a      	str	r2, [r3, #112]	; 0x70
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 80074d2:	bfbc      	itt	lt
 80074d4:	2200      	movlt	r2, #0
 80074d6:	675a      	strlt	r2, [r3, #116]	; 0x74
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop

080074dc <Bullet_Draw>:
        }
    }
}

void Bullet_Draw(void)
{
 80074dc:	b510      	push	{r4, lr}
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80074de:	f240 54a4 	movw	r4, #1444	; 0x5a4
 80074e2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80074e6:	68a3      	ldr	r3, [r4, #8]
        }
    }
}

void Bullet_Draw(void)
{
 80074e8:	b082      	sub	sp, #8
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d143      	bne.n	8007576 <Bullet_Draw+0x9a>
 80074ee:	6962      	ldr	r2, [r4, #20]
 80074f0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80074f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074f8:	2a00      	cmp	r2, #0
 80074fa:	d14c      	bne.n	8007596 <Bullet_Draw+0xba>
 80074fc:	6a22      	ldr	r2, [r4, #32]
 80074fe:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007506:	2a00      	cmp	r2, #0
 8007508:	d155      	bne.n	80075b6 <Bullet_Draw+0xda>
 800750a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800750c:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007514:	2a00      	cmp	r2, #0
 8007516:	d15e      	bne.n	80075d6 <Bullet_Draw+0xfa>
 8007518:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800751a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800751e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007522:	2a00      	cmp	r2, #0
 8007524:	d167      	bne.n	80075f6 <Bullet_Draw+0x11a>
 8007526:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007528:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800752c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007530:	2a00      	cmp	r2, #0
 8007532:	d170      	bne.n	8007616 <Bullet_Draw+0x13a>
 8007534:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007536:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800753a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800753e:	2a00      	cmp	r2, #0
 8007540:	d179      	bne.n	8007636 <Bullet_Draw+0x15a>
 8007542:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007544:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007548:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800754c:	2a00      	cmp	r2, #0
 800754e:	f040 8083 	bne.w	8007658 <Bullet_Draw+0x17c>
 8007552:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007554:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800755c:	2a00      	cmp	r2, #0
 800755e:	f040 808c 	bne.w	800767a <Bullet_Draw+0x19e>
 8007562:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007564:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800756c:	2a00      	cmp	r2, #0
 800756e:	f040 8095 	bne.w	800769c <Bullet_Draw+0x1c0>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
        }
    }
}
 8007572:	b002      	add	sp, #8
 8007574:	bd10      	pop	{r4, pc}
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8007576:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2204      	movs	r2, #4
 800757e:	2308      	movs	r3, #8
 8007580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007584:	f7fd fad0 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007588:	6962      	ldr	r2, [r4, #20]
 800758a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800758e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007592:	2a00      	cmp	r2, #0
 8007594:	d0b2      	beq.n	80074fc <Bullet_Draw+0x20>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8007596:	68d8      	ldr	r0, [r3, #12]
 8007598:	6919      	ldr	r1, [r3, #16]
 800759a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2204      	movs	r2, #4
 80075a2:	2308      	movs	r3, #8
 80075a4:	f7fd fac0 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80075a8:	6a22      	ldr	r2, [r4, #32]
 80075aa:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80075ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075b2:	2a00      	cmp	r2, #0
 80075b4:	d0a9      	beq.n	800750a <Bullet_Draw+0x2e>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80075b6:	6998      	ldr	r0, [r3, #24]
 80075b8:	69d9      	ldr	r1, [r3, #28]
 80075ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	2204      	movs	r2, #4
 80075c2:	2308      	movs	r3, #8
 80075c4:	f7fd fab0 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80075c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80075ca:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80075ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d0a0      	beq.n	8007518 <Bullet_Draw+0x3c>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80075d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80075da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2204      	movs	r2, #4
 80075e2:	2308      	movs	r3, #8
 80075e4:	f7fd faa0 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80075e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80075ea:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80075ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d097      	beq.n	8007526 <Bullet_Draw+0x4a>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80075f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2204      	movs	r2, #4
 8007602:	2308      	movs	r3, #8
 8007604:	f7fd fa90 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007608:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800760a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800760e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007612:	2a00      	cmp	r2, #0
 8007614:	d08e      	beq.n	8007534 <Bullet_Draw+0x58>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8007616:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007618:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800761a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	2204      	movs	r2, #4
 8007622:	2308      	movs	r3, #8
 8007624:	f7fd fa80 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007628:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800762a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800762e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007632:	2a00      	cmp	r2, #0
 8007634:	d085      	beq.n	8007542 <Bullet_Draw+0x66>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8007636:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007638:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800763a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	2204      	movs	r2, #4
 8007642:	2308      	movs	r3, #8
 8007644:	f7fd fa70 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007648:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800764a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800764e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007652:	2a00      	cmp	r2, #0
 8007654:	f43f af7d 	beq.w	8007552 <Bullet_Draw+0x76>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8007658:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800765a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800765c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	2204      	movs	r2, #4
 8007664:	2308      	movs	r3, #8
 8007666:	f7fd fa5f 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800766a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800766c:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007670:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007674:	2a00      	cmp	r2, #0
 8007676:	f43f af74 	beq.w	8007562 <Bullet_Draw+0x86>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 800767a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800767c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800767e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2204      	movs	r2, #4
 8007686:	2308      	movs	r3, #8
 8007688:	f7fd fa4e 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800768c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800768e:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007692:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007696:	2a00      	cmp	r2, #0
 8007698:	f43f af6b 	beq.w	8007572 <Bullet_Draw+0x96>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 800769c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800769e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80076a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	2204      	movs	r2, #4
 80076a8:	2308      	movs	r3, #8
 80076aa:	f7fd fa3d 	bl	8004b28 <Lcd_Draw_Box>
        }
    }
}
 80076ae:	b002      	add	sp, #8
 80076b0:	bd10      	pop	{r4, pc}
 80076b2:	bf00      	nop

080076b4 <Game_Init>:

void Game_Init(void)
{
 80076b4:	b538      	push	{r3, r4, r5, lr}
    player_life = 3;
 80076b6:	f240 0304 	movw	r3, #4
    bomb_item = 0;
 80076ba:	f240 54a4 	movw	r4, #1444	; 0x5a4
 80076be:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80076c2:	2500      	movs	r5, #0
    }
}

void Game_Init(void)
{
    player_life = 3;
 80076c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80076c8:	2003      	movs	r0, #3
    bomb_item = 0;
    up_item = 0;
    speed_item = 0;
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
 80076ca:	2198      	movs	r1, #152	; 0x98
    player_y = LCDH - PLAYER_SIZE_Y - 10;
 80076cc:	22d6      	movs	r2, #214	; 0xd6
    }
}

void Game_Init(void)
{
    player_life = 3;
 80076ce:	6098      	str	r0, [r3, #8]
    bomb_item = 0;
    up_item = 0;
    speed_item = 0;
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
    player_y = LCDH - PLAYER_SIZE_Y - 10;
 80076d0:	e883 0006 	stmia.w	r3, {r1, r2}
}

void Game_Init(void)
{
    player_life = 3;
    bomb_item = 0;
 80076d4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
    up_item = 0;
 80076d8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    speed_item = 0;
 80076dc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
    player_y = LCDH - PLAYER_SIZE_Y - 10;
    Lcd_Clr_Screen();
 80076e0:	f7fd fa1e 	bl	8004b20 <Lcd_Clr_Screen>

void Bullet_Init(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        bullets[i].active = 0;
 80076e4:	60a5      	str	r5, [r4, #8]
 80076e6:	6165      	str	r5, [r4, #20]
 80076e8:	6225      	str	r5, [r4, #32]
 80076ea:	62e5      	str	r5, [r4, #44]	; 0x2c
 80076ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80076ee:	6465      	str	r5, [r4, #68]	; 0x44
 80076f0:	6525      	str	r5, [r4, #80]	; 0x50
 80076f2:	65e5      	str	r5, [r4, #92]	; 0x5c
 80076f4:	66a5      	str	r5, [r4, #104]	; 0x68
 80076f6:	6765      	str	r5, [r4, #116]	; 0x74

void Enemy_Init(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        enemies[i].active = 0;
 80076f8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80076fc:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8007700:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8007704:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 8007708:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0

void Item_Init(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        items[i].active = 0;
 800770c:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
 8007710:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8007714:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 8007718:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800771c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8007720:	bd38      	pop	{r3, r4, r5, pc}
 8007722:	bf00      	nop

08007724 <Check_Collision>:
    Enemy_Init();
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
 8007724:	b470      	push	{r4, r5, r6}
 8007726:	9c03      	ldr	r4, [sp, #12]
 8007728:	9d05      	ldr	r5, [sp, #20]
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 800772a:	4425      	add	r5, r4
 800772c:	4285      	cmp	r5, r0
 800772e:	dd02      	ble.n	8007736 <Check_Collision+0x12>
 8007730:	4410      	add	r0, r2
 8007732:	4284      	cmp	r4, r0
 8007734:	db02      	blt.n	800773c <Check_Collision+0x18>
}
 8007736:	bc70      	pop	{r4, r5, r6}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007738:	2000      	movs	r0, #0
}
 800773a:	4770      	bx	lr
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 800773c:	9a04      	ldr	r2, [sp, #16]
 800773e:	9806      	ldr	r0, [sp, #24]
 8007740:	4402      	add	r2, r0
 8007742:	428a      	cmp	r2, r1
 8007744:	ddf7      	ble.n	8007736 <Check_Collision+0x12>
 8007746:	18c8      	adds	r0, r1, r3
 8007748:	9b04      	ldr	r3, [sp, #16]
}
 800774a:	bc70      	pop	{r4, r5, r6}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 800774c:	4283      	cmp	r3, r0
 800774e:	bfac      	ite	ge
 8007750:	2000      	movge	r0, #0
 8007752:	2001      	movlt	r0, #1
}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <Draw_HUD>:

void Draw_HUD(void)
{
 8007758:	b510      	push	{r4, lr}
    Lcd_Printf(200, 220, WHITE, BLACK, 1, 1, "B:%d U:%d S:%d", bomb_item, up_item, speed_item);
 800775a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800775e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007762:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8007766:	f640 5330 	movw	r3, #3376	; 0xd30
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
}

void Draw_HUD(void)
{
 800776a:	b086      	sub	sp, #24
    Lcd_Printf(200, 220, WHITE, BLACK, 1, 1, "B:%d U:%d S:%d", bomb_item, up_item, speed_item);
 800776c:	2401      	movs	r4, #1
 800776e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007772:	c807      	ldmia	r0, {r0, r1, r2}
 8007774:	9302      	str	r3, [sp, #8]
 8007776:	9003      	str	r0, [sp, #12]
 8007778:	9104      	str	r1, [sp, #16]
 800777a:	9205      	str	r2, [sp, #20]
 800777c:	9400      	str	r4, [sp, #0]
 800777e:	9401      	str	r4, [sp, #4]
 8007780:	20c8      	movs	r0, #200	; 0xc8
 8007782:	21dc      	movs	r1, #220	; 0xdc
 8007784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007788:	2300      	movs	r3, #0
 800778a:	f7fb ffcd 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(0, 220, WHITE, BLACK, 1, 1, "LIFE:%d", player_life);
 800778e:	f240 0304 	movw	r3, #4
 8007792:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	f640 5340 	movw	r3, #3392	; 0xd40
 800779c:	2000      	movs	r0, #0
 800779e:	f6c0 0301 	movt	r3, #2049	; 0x801
 80077a2:	9203      	str	r2, [sp, #12]
 80077a4:	9302      	str	r3, [sp, #8]
 80077a6:	9400      	str	r4, [sp, #0]
 80077a8:	9401      	str	r4, [sp, #4]
 80077aa:	4603      	mov	r3, r0
 80077ac:	21dc      	movs	r1, #220	; 0xdc
 80077ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077b2:	f7fb ffb9 	bl	8003728 <Lcd_Printf>
}
 80077b6:	b006      	add	sp, #24
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop

080077bc <Use_Bomb>:

void Use_Bomb(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
        enemies[i].active = 0;
 80077bc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80077c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80077ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80077ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80077d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80077d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    for (i = 0; i < BULLET_MAX; i++)
        bullets[i].active = 0;
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	615a      	str	r2, [r3, #20]
 80077de:	621a      	str	r2, [r3, #32]
 80077e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
 80077e4:	645a      	str	r2, [r3, #68]	; 0x44
 80077e6:	651a      	str	r2, [r3, #80]	; 0x50
 80077e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80077ea:	669a      	str	r2, [r3, #104]	; 0x68
 80077ec:	675a      	str	r2, [r3, #116]	; 0x74
 80077ee:	4770      	bx	lr

080077f0 <Fire_Enemy_Bullet>:
}

void Fire_Enemy_Bullet(int ex, int ey)
{
 80077f0:	b430      	push	{r4, r5}
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 80077f2:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80077f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	b1a2      	cbz	r2, 8007828 <Fire_Enemy_Bullet+0x38>
 80077fe:	695a      	ldr	r2, [r3, #20]
 8007800:	b1f2      	cbz	r2, 8007840 <Fire_Enemy_Bullet+0x50>
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	b1f2      	cbz	r2, 8007844 <Fire_Enemy_Bullet+0x54>
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	b1f2      	cbz	r2, 8007848 <Fire_Enemy_Bullet+0x58>
 800780a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780c:	b1f2      	cbz	r2, 800784c <Fire_Enemy_Bullet+0x5c>
 800780e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007810:	b1f2      	cbz	r2, 8007850 <Fire_Enemy_Bullet+0x60>
 8007812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007814:	b1f2      	cbz	r2, 8007854 <Fire_Enemy_Bullet+0x64>
 8007816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007818:	b1f2      	cbz	r2, 8007858 <Fire_Enemy_Bullet+0x68>
 800781a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800781c:	b11a      	cbz	r2, 8007826 <Fire_Enemy_Bullet+0x36>
 800781e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007820:	b1e2      	cbz	r2, 800785c <Fire_Enemy_Bullet+0x6c>
            bullets[i].y = ey + 16;
            bullets[i].active = 1;
            break;
        }
    }
}
 8007822:	bc30      	pop	{r4, r5}
 8007824:	4770      	bx	lr
}

void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
 8007826:	2208      	movs	r2, #8
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
 8007828:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800782c:	0092      	lsls	r2, r2, #2
 800782e:	189c      	adds	r4, r3, r2
            bullets[i].y = ey + 16;
            bullets[i].active = 1;
 8007830:	2501      	movs	r5, #1
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
 8007832:	3006      	adds	r0, #6
            bullets[i].y = ey + 16;
 8007834:	3110      	adds	r1, #16
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
 8007836:	5098      	str	r0, [r3, r2]
            bullets[i].y = ey + 16;
 8007838:	6061      	str	r1, [r4, #4]
            bullets[i].active = 1;
 800783a:	60a5      	str	r5, [r4, #8]
            break;
        }
    }
}
 800783c:	bc30      	pop	{r4, r5}
 800783e:	4770      	bx	lr
}

void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
 8007840:	2201      	movs	r2, #1
 8007842:	e7f1      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 8007844:	2202      	movs	r2, #2
 8007846:	e7ef      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 8007848:	2203      	movs	r2, #3
 800784a:	e7ed      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 800784c:	2204      	movs	r2, #4
 800784e:	e7eb      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 8007850:	2205      	movs	r2, #5
 8007852:	e7e9      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 8007854:	2206      	movs	r2, #6
 8007856:	e7e7      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 8007858:	2207      	movs	r2, #7
 800785a:	e7e5      	b.n	8007828 <Fire_Enemy_Bullet+0x38>
 800785c:	2209      	movs	r2, #9
 800785e:	e7e3      	b.n	8007828 <Fire_Enemy_Bullet+0x38>

08007860 <Collision_Update>:
        }
    }
}

void Collision_Update(void)
{
 8007860:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007864:	f240 52a4 	movw	r2, #1444	; 0x5a4
 8007868:	f2c2 0200 	movt	r2, #8192	; 0x2000
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800786c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
        }
    }
}

void Collision_Update(void)
{
 800786e:	b096      	sub	sp, #88	; 0x58
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007870:	6f90      	ldr	r0, [r2, #120]	; 0x78
 8007872:	930c      	str	r3, [sp, #48]	; 0x30
 8007874:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8007878:	9006      	str	r0, [sp, #24]
 800787a:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
 800787e:	f8d2 5090 	ldr.w	r5, [r2, #144]	; 0x90
 8007882:	9309      	str	r3, [sp, #36]	; 0x24
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007886:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800788a:	900e      	str	r0, [sp, #56]	; 0x38
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 800788c:	9806      	ldr	r0, [sp, #24]
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800788e:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
 8007892:	950d      	str	r5, [sp, #52]	; 0x34
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007894:	3310      	adds	r3, #16
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007896:	9407      	str	r4, [sp, #28]
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007898:	3010      	adds	r0, #16
 800789a:	9311      	str	r3, [sp, #68]	; 0x44
 800789c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800789e:	f8d2 c080 	ldr.w	ip, [r2, #128]	; 0x80
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 80078a2:	f8d2 40b8 	ldr.w	r4, [r2, #184]	; 0xb8
 80078a6:	f8d2 50c8 	ldr.w	r5, [r2, #200]	; 0xc8
 80078aa:	9608      	str	r6, [sp, #32]
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80078ac:	9003      	str	r0, [sp, #12]
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 80078ae:	f8d2 60cc 	ldr.w	r6, [r2, #204]	; 0xcc
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80078b2:	9807      	ldr	r0, [sp, #28]
 80078b4:	3310      	adds	r3, #16
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 80078b6:	940f      	str	r4, [sp, #60]	; 0x3c
 80078b8:	950a      	str	r5, [sp, #40]	; 0x28
 80078ba:	9610      	str	r6, [sp, #64]	; 0x40
 80078bc:	f8d2 50bc 	ldr.w	r5, [r2, #188]	; 0xbc
 80078c0:	f8d2 60a8 	ldr.w	r6, [r2, #168]	; 0xa8
 80078c4:	f8d2 b094 	ldr.w	fp, [r2, #148]	; 0x94
 80078c8:	f8d2 40d0 	ldr.w	r4, [r2, #208]	; 0xd0
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80078cc:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80078d0:	f100 0910 	add.w	r9, r0, #16
 80078d4:	9312      	str	r3, [sp, #72]	; 0x48
 80078d6:	9808      	ldr	r0, [sp, #32]
 80078d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078da:	f100 0810 	add.w	r8, r0, #16
 80078de:	3310      	adds	r3, #16
 80078e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e6:	3010      	adds	r0, #16
 80078e8:	3310      	adds	r3, #16
 80078ea:	9004      	str	r0, [sp, #16]
 80078ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078ee:	9314      	str	r3, [sp, #80]	; 0x50
 80078f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f2:	3010      	adds	r0, #16
 80078f4:	3310      	adds	r3, #16
 80078f6:	9005      	str	r0, [sp, #20]
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 80078f8:	4630      	mov	r0, r6
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80078fa:	4611      	mov	r1, r2
 80078fc:	9315      	str	r3, [sp, #84]	; 0x54
 80078fe:	4617      	mov	r7, r2
 8007900:	f102 0308 	add.w	r3, r2, #8
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 8007904:	f8cd c004 	str.w	ip, [sp, #4]
 8007908:	3280      	adds	r2, #128	; 0x80
 800790a:	462e      	mov	r6, r5
 800790c:	4684      	mov	ip, r0
{
    int i, j;

    for (i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800790e:	68b8      	ldr	r0, [r7, #8]
 8007910:	2800      	cmp	r0, #0
 8007912:	d05b      	beq.n	80079cc <Collision_Update+0x16c>
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007914:	9d01      	ldr	r5, [sp, #4]
 8007916:	b185      	cbz	r5, 800793a <Collision_Update+0xda>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007918:	f8dd a00c 	ldr.w	sl, [sp, #12]
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800791c:	e913 0021 	ldmdb	r3, {r0, r5}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007920:	4550      	cmp	r0, sl
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007922:	9502      	str	r5, [sp, #8]
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007924:	da09      	bge.n	800793a <Collision_Update+0xda>
 8007926:	f100 0a04 	add.w	sl, r0, #4
 800792a:	9806      	ldr	r0, [sp, #24]
 800792c:	4550      	cmp	r0, sl
 800792e:	da04      	bge.n	800793a <Collision_Update+0xda>
 8007930:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8007934:	4555      	cmp	r5, sl
 8007936:	f2c0 8135 	blt.w	8007ba4 <Collision_Update+0x344>
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800793a:	f1bb 0f00 	cmp.w	fp, #0
 800793e:	d00b      	beq.n	8007958 <Collision_Update+0xf8>
 8007940:	e913 0401 	ldmdb	r3, {r0, sl}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007944:	4548      	cmp	r0, r9
 8007946:	da07      	bge.n	8007958 <Collision_Update+0xf8>
 8007948:	9d07      	ldr	r5, [sp, #28]
 800794a:	3004      	adds	r0, #4
 800794c:	4285      	cmp	r5, r0
 800794e:	da03      	bge.n	8007958 <Collision_Update+0xf8>
 8007950:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007952:	4582      	cmp	sl, r0
 8007954:	f2c0 811c 	blt.w	8007b90 <Collision_Update+0x330>
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007958:	f1bc 0f00 	cmp.w	ip, #0
 800795c:	d00b      	beq.n	8007976 <Collision_Update+0x116>
 800795e:	e913 0401 	ldmdb	r3, {r0, sl}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007962:	4540      	cmp	r0, r8
 8007964:	da07      	bge.n	8007976 <Collision_Update+0x116>
 8007966:	9d08      	ldr	r5, [sp, #32]
 8007968:	3004      	adds	r0, #4
 800796a:	4285      	cmp	r5, r0
 800796c:	da03      	bge.n	8007976 <Collision_Update+0x116>
 800796e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007970:	4582      	cmp	sl, r0
 8007972:	f2c0 8103 	blt.w	8007b7c <Collision_Update+0x31c>
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007976:	b186      	cbz	r6, 800799a <Collision_Update+0x13a>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007978:	f8dd a010 	ldr.w	sl, [sp, #16]
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800797c:	e913 0021 	ldmdb	r3, {r0, r5}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007980:	4550      	cmp	r0, sl
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 8007982:	9502      	str	r5, [sp, #8]
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007984:	da09      	bge.n	800799a <Collision_Update+0x13a>
 8007986:	f100 0a04 	add.w	sl, r0, #4
 800798a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800798c:	4550      	cmp	r0, sl
 800798e:	da04      	bge.n	800799a <Collision_Update+0x13a>
 8007990:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8007994:	4555      	cmp	r5, sl
 8007996:	f2c0 80e9 	blt.w	8007b6c <Collision_Update+0x30c>
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 800799a:	b1bc      	cbz	r4, 80079cc <Collision_Update+0x16c>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 800799c:	f8dd a014 	ldr.w	sl, [sp, #20]
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 80079a0:	e913 0021 	ldmdb	r3, {r0, r5}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80079a4:	4550      	cmp	r0, sl
    {
        if (bullets[i].active)
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
 80079a6:	9502      	str	r5, [sp, #8]
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 80079a8:	da10      	bge.n	80079cc <Collision_Update+0x16c>
 80079aa:	f100 0a04 	add.w	sl, r0, #4
 80079ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079b0:	4550      	cmp	r0, sl
 80079b2:	da0b      	bge.n	80079cc <Collision_Update+0x16c>
 80079b4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80079b8:	4555      	cmp	r5, sl
 80079ba:	da07      	bge.n	80079cc <Collision_Update+0x16c>
 80079bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079be:	f105 0a08 	add.w	sl, r5, #8
 80079c2:	4550      	cmp	r0, sl
 80079c4:	da02      	bge.n	80079cc <Collision_Update+0x16c>
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 80079c6:	2000      	movs	r0, #0
 80079c8:	60b8      	str	r0, [r7, #8]
                    enemies[j].active = 0;
 80079ca:	4604      	mov	r4, r0
 80079cc:	330c      	adds	r3, #12

void Collision_Update(void)
{
    int i, j;

    for (i = 0; i < BULLET_MAX; i++)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	f107 070c 	add.w	r7, r7, #12
 80079d4:	d19b      	bne.n	800790e <Collision_Update+0xae>
 80079d6:	4bad      	ldr	r3, [pc, #692]	; (8007c8c <Collision_Update+0x42c>)
 80079d8:	4635      	mov	r5, r6
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	4666      	mov	r6, ip
        }
    }

    for (i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, items[i].x, items[i].y, 10, 10))
 80079de:	f240 0004 	movw	r0, #4
 80079e2:	f8d1 3134 	ldr.w	r3, [r1, #308]	; 0x134
 80079e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80079ea:	f8c1 60a8 	str.w	r6, [r1, #168]	; 0xa8
 80079ee:	f8c1 40d0 	str.w	r4, [r1, #208]	; 0xd0
 80079f2:	9e05      	ldr	r6, [sp, #20]
 80079f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80079f6:	e890 0180 	ldmia.w	r0, {r7, r8}
 80079fa:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
 80079fe:	f8d1 c12c 	ldr.w	ip, [r1, #300]	; 0x12c
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007a02:	f108 0510 	add.w	r5, r8, #16
 8007a06:	f8d1 9130 	ldr.w	r9, [r1, #304]	; 0x130
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	9504      	str	r5, [sp, #16]
 8007a0e:	f8c1 b094 	str.w	fp, [r1, #148]	; 0x94
 8007a12:	f8c1 4080 	str.w	r4, [r1, #128]	; 0x80
 8007a16:	f107 0a10 	add.w	sl, r7, #16
 8007a1a:	f106 0550 	add.w	r5, r6, #80	; 0x50
                bomb_item++;
            else if (items[i].type == ITEM_UP && up_item < 5)
                up_item++;
            else if (items[i].type == ITEM_SPEED && speed_item < 3)
                speed_item++;
            items[i].active = 0;
 8007a1e:	4633      	mov	r3, r6
        }
    }

    for (i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, items[i].x, items[i].y, 10, 10))
 8007a20:	689c      	ldr	r4, [r3, #8]
 8007a22:	b1cc      	cbz	r4, 8007a58 <Collision_Update+0x1f8>
 8007a24:	e893 0810 	ldmia.w	r3, {r4, fp}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007a28:	f104 060a 	add.w	r6, r4, #10
 8007a2c:	42b7      	cmp	r7, r6
 8007a2e:	da13      	bge.n	8007a58 <Collision_Update+0x1f8>
 8007a30:	4554      	cmp	r4, sl
 8007a32:	da11      	bge.n	8007a58 <Collision_Update+0x1f8>
 8007a34:	f10b 040a 	add.w	r4, fp, #10
 8007a38:	45a0      	cmp	r8, r4
 8007a3a:	da0d      	bge.n	8007a58 <Collision_Update+0x1f8>
 8007a3c:	9c04      	ldr	r4, [sp, #16]
 8007a3e:	45a3      	cmp	fp, r4
 8007a40:	da0a      	bge.n	8007a58 <Collision_Update+0x1f8>

    for (i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, items[i].x, items[i].y, 10, 10))
        {
            if (items[i].type == ITEM_BOMB && bomb_item < 3)
 8007a42:	7b1c      	ldrb	r4, [r3, #12]
 8007a44:	2c00      	cmp	r4, #0
 8007a46:	f040 810f 	bne.w	8007c68 <Collision_Update+0x408>
 8007a4a:	f1bc 0f02 	cmp.w	ip, #2
                bomb_item++;
 8007a4e:	bf98      	it	ls
 8007a50:	f10c 0c01 	addls.w	ip, ip, #1
            else if (items[i].type == ITEM_UP && up_item < 5)
                up_item++;
            else if (items[i].type == ITEM_SPEED && speed_item < 3)
                speed_item++;
            items[i].active = 0;
 8007a54:	2400      	movs	r4, #0
 8007a56:	609c      	str	r4, [r3, #8]
 8007a58:	3310      	adds	r3, #16
                }
            }
        }
    }

    for (i = 0; i < ITEM_MAX; i++)
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	d1e0      	bne.n	8007a20 <Collision_Update+0x1c0>
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007a5e:	e890 0028 	ldmia.w	r0, {r3, r5}
 8007a62:	9e03      	ldr	r6, [sp, #12]
 8007a64:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
 8007a68:	f240 58a4 	movw	r8, #1444	; 0x5a4
 8007a6c:	f8c1 c12c 	str.w	ip, [r1, #300]	; 0x12c
 8007a70:	f8c1 6134 	str.w	r6, [r1, #308]	; 0x134
 8007a74:	f8c1 9130 	str.w	r9, [r1, #304]	; 0x130
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007a78:	f103 0610 	add.w	r6, r3, #16
 8007a7c:	f105 0c10 	add.w	ip, r5, #16
 8007a80:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8007a84:	6887      	ldr	r7, [r0, #8]
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007a86:	b144      	cbz	r4, 8007a9a <Collision_Update+0x23a>
 8007a88:	f8d8 4078 	ldr.w	r4, [r8, #120]	; 0x78
 8007a8c:	f8d8 a07c 	ldr.w	sl, [r8, #124]	; 0x7c
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007a90:	f104 0910 	add.w	r9, r4, #16
 8007a94:	454b      	cmp	r3, r9
 8007a96:	f2c0 80d4 	blt.w	8007c42 <Collision_Update+0x3e2>
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007a9a:	f8d1 4094 	ldr.w	r4, [r1, #148]	; 0x94
 8007a9e:	f240 58a4 	movw	r8, #1444	; 0x5a4
 8007aa2:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8007aa6:	b144      	cbz	r4, 8007aba <Collision_Update+0x25a>
 8007aa8:	f8d8 408c 	ldr.w	r4, [r8, #140]	; 0x8c
 8007aac:	f8d8 a090 	ldr.w	sl, [r8, #144]	; 0x90
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007ab0:	f104 0910 	add.w	r9, r4, #16
 8007ab4:	454b      	cmp	r3, r9
 8007ab6:	f2c0 80b1 	blt.w	8007c1c <Collision_Update+0x3bc>
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007aba:	f8d1 40a8 	ldr.w	r4, [r1, #168]	; 0xa8
 8007abe:	f240 58a4 	movw	r8, #1444	; 0x5a4
 8007ac2:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8007ac6:	b144      	cbz	r4, 8007ada <Collision_Update+0x27a>
 8007ac8:	f8d8 40a0 	ldr.w	r4, [r8, #160]	; 0xa0
 8007acc:	f8d8 a0a4 	ldr.w	sl, [r8, #164]	; 0xa4
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007ad0:	f104 0910 	add.w	r9, r4, #16
 8007ad4:	454b      	cmp	r3, r9
 8007ad6:	f2c0 808e 	blt.w	8007bf6 <Collision_Update+0x396>
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007ada:	f8d1 40bc 	ldr.w	r4, [r1, #188]	; 0xbc
 8007ade:	f240 58a4 	movw	r8, #1444	; 0x5a4
 8007ae2:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8007ae6:	b13c      	cbz	r4, 8007af8 <Collision_Update+0x298>
 8007ae8:	f8d8 40b4 	ldr.w	r4, [r8, #180]	; 0xb4
 8007aec:	f8d8 a0b8 	ldr.w	sl, [r8, #184]	; 0xb8
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007af0:	f104 0910 	add.w	r9, r4, #16
 8007af4:	454b      	cmp	r3, r9
 8007af6:	db6f      	blt.n	8007bd8 <Collision_Update+0x378>
        }
    }

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
 8007af8:	f8d1 40d0 	ldr.w	r4, [r1, #208]	; 0xd0
 8007afc:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8007b00:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007b04:	b13c      	cbz	r4, 8007b16 <Collision_Update+0x2b6>
 8007b06:	f8d1 40c8 	ldr.w	r4, [r1, #200]	; 0xc8
 8007b0a:	f8d1 90cc 	ldr.w	r9, [r1, #204]	; 0xcc
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b0e:	f104 0810 	add.w	r8, r4, #16
 8007b12:	4543      	cmp	r3, r8
 8007b14:	db51      	blt.n	8007bba <Collision_Update+0x35a>

    for (i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            if (Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, bullets[i].x, bullets[i].y, 4, 8))
 8007b16:	e890 0140 	ldmia.w	r0, {r6, r8}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b1a:	f240 51a4 	movw	r1, #1444	; 0x5a4
 8007b1e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007b22:	f101 0308 	add.w	r3, r1, #8
 8007b26:	f106 0c10 	add.w	ip, r6, #16
 8007b2a:	f108 0910 	add.w	r9, r8, #16
    {
        if (bullets[i].active)
        {
            if (Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, bullets[i].x, bullets[i].y, 4, 8))
            {
                bullets[i].active = 0;
 8007b2e:	f04f 0a00 	mov.w	sl, #0
        }
    }

    for (i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007b32:	688c      	ldr	r4, [r1, #8]
 8007b34:	b184      	cbz	r4, 8007b58 <Collision_Update+0x2f8>
        {
            if (Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, bullets[i].x, bullets[i].y, 4, 8))
 8007b36:	e913 0810 	ldmdb	r3, {r4, fp}
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b3a:	1d25      	adds	r5, r4, #4
 8007b3c:	42ae      	cmp	r6, r5
 8007b3e:	da0b      	bge.n	8007b58 <Collision_Update+0x2f8>
 8007b40:	4564      	cmp	r4, ip
 8007b42:	f10b 0508 	add.w	r5, fp, #8
 8007b46:	da07      	bge.n	8007b58 <Collision_Update+0x2f8>
 8007b48:	45a8      	cmp	r8, r5
 8007b4a:	da05      	bge.n	8007b58 <Collision_Update+0x2f8>
 8007b4c:	45cb      	cmp	fp, r9
 8007b4e:	da03      	bge.n	8007b58 <Collision_Update+0x2f8>
    {
        if (bullets[i].active)
        {
            if (Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, bullets[i].x, bullets[i].y, 4, 8))
            {
                bullets[i].active = 0;
 8007b50:	f8c1 a008 	str.w	sl, [r1, #8]
                if (player_life > 0)
 8007b54:	b107      	cbz	r7, 8007b58 <Collision_Update+0x2f8>
                    player_life--;
 8007b56:	3f01      	subs	r7, #1
 8007b58:	330c      	adds	r3, #12
            if (player_life > 0)
                player_life--;
        }
    }

    for (i = 0; i < BULLET_MAX; i++)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	f101 010c 	add.w	r1, r1, #12
 8007b60:	d1e7      	bne.n	8007b32 <Collision_Update+0x2d2>
 8007b62:	6087      	str	r7, [r0, #8]
                if (player_life > 0)
                    player_life--;
            }
        }
    }
}
 8007b64:	b016      	add	sp, #88	; 0x58
 8007b66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b6a:	4770      	bx	lr
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007b6e:	f105 0a08 	add.w	sl, r5, #8
 8007b72:	4550      	cmp	r0, sl
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 8007b74:	bfbc      	itt	lt
 8007b76:	2600      	movlt	r6, #0
 8007b78:	60be      	strlt	r6, [r7, #8]
 8007b7a:	e70e      	b.n	800799a <Collision_Update+0x13a>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007b7e:	f10a 0a08 	add.w	sl, sl, #8
 8007b82:	4555      	cmp	r5, sl
 8007b84:	f6bf aef7 	bge.w	8007976 <Collision_Update+0x116>
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 8007b88:	2500      	movs	r5, #0
 8007b8a:	60bd      	str	r5, [r7, #8]
                    enemies[j].active = 0;
 8007b8c:	46ac      	mov	ip, r5
 8007b8e:	e6f2      	b.n	8007976 <Collision_Update+0x116>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007b90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007b92:	f10a 0a08 	add.w	sl, sl, #8
 8007b96:	4555      	cmp	r5, sl
 8007b98:	f6bf aede 	bge.w	8007958 <Collision_Update+0xf8>
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	60b8      	str	r0, [r7, #8]
                    enemies[j].active = 0;
 8007ba0:	4683      	mov	fp, r0
 8007ba2:	e6d9      	b.n	8007958 <Collision_Update+0xf8>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007ba4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ba6:	f105 0a08 	add.w	sl, r5, #8
 8007baa:	4550      	cmp	r0, sl
 8007bac:	f6bf aec5 	bge.w	800793a <Collision_Update+0xda>
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
                    enemies[j].active = 0;
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	900b      	str	r0, [sp, #44]	; 0x2c
        {
            for (j = 0; j < ENEMY_MAX; j++)
            {
                if (enemies[j].active && Check_Collision(bullets[i].x, bullets[i].y, 4, 8, enemies[j].x, enemies[j].y, 16, 16))
                {
                    bullets[i].active = 0;
 8007bb4:	60b8      	str	r0, [r7, #8]
 8007bb6:	9001      	str	r0, [sp, #4]
 8007bb8:	e6bf      	b.n	800793a <Collision_Update+0xda>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007bba:	42b4      	cmp	r4, r6
 8007bbc:	daab      	bge.n	8007b16 <Collision_Update+0x2b6>
 8007bbe:	f109 0310 	add.w	r3, r9, #16
 8007bc2:	429d      	cmp	r5, r3
 8007bc4:	daa7      	bge.n	8007b16 <Collision_Update+0x2b6>
 8007bc6:	45e1      	cmp	r9, ip
 8007bc8:	daa5      	bge.n	8007b16 <Collision_Update+0x2b6>

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
        {
            enemies[i].active = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
            if (player_life > 0)
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	d0a0      	beq.n	8007b16 <Collision_Update+0x2b6>
                player_life--;
 8007bd4:	3f01      	subs	r7, #1
 8007bd6:	e79e      	b.n	8007b16 <Collision_Update+0x2b6>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007bd8:	42a6      	cmp	r6, r4
 8007bda:	dd8d      	ble.n	8007af8 <Collision_Update+0x298>
 8007bdc:	f10a 0410 	add.w	r4, sl, #16
 8007be0:	42a5      	cmp	r5, r4
 8007be2:	da89      	bge.n	8007af8 <Collision_Update+0x298>
 8007be4:	45d4      	cmp	ip, sl
 8007be6:	dd87      	ble.n	8007af8 <Collision_Update+0x298>

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
        {
            enemies[i].active = 0;
 8007be8:	2400      	movs	r4, #0
 8007bea:	f8c8 40bc 	str.w	r4, [r8, #188]	; 0xbc
            if (player_life > 0)
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	d082      	beq.n	8007af8 <Collision_Update+0x298>
                player_life--;
 8007bf2:	3f01      	subs	r7, #1
 8007bf4:	e780      	b.n	8007af8 <Collision_Update+0x298>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	f77f af6f 	ble.w	8007ada <Collision_Update+0x27a>
 8007bfc:	f10a 0410 	add.w	r4, sl, #16
 8007c00:	42a5      	cmp	r5, r4
 8007c02:	f6bf af6a 	bge.w	8007ada <Collision_Update+0x27a>
 8007c06:	45d4      	cmp	ip, sl
 8007c08:	f77f af67 	ble.w	8007ada <Collision_Update+0x27a>

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
        {
            enemies[i].active = 0;
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	f8c8 40a8 	str.w	r4, [r8, #168]	; 0xa8
            if (player_life > 0)
 8007c12:	2f00      	cmp	r7, #0
 8007c14:	f43f af61 	beq.w	8007ada <Collision_Update+0x27a>
                player_life--;
 8007c18:	3f01      	subs	r7, #1
 8007c1a:	e75e      	b.n	8007ada <Collision_Update+0x27a>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007c1c:	42a6      	cmp	r6, r4
 8007c1e:	f77f af4c 	ble.w	8007aba <Collision_Update+0x25a>
 8007c22:	f10a 0410 	add.w	r4, sl, #16
 8007c26:	42a5      	cmp	r5, r4
 8007c28:	f6bf af47 	bge.w	8007aba <Collision_Update+0x25a>
 8007c2c:	45d4      	cmp	ip, sl
 8007c2e:	f77f af44 	ble.w	8007aba <Collision_Update+0x25a>

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
        {
            enemies[i].active = 0;
 8007c32:	2400      	movs	r4, #0
 8007c34:	f8c8 4094 	str.w	r4, [r8, #148]	; 0x94
            if (player_life > 0)
 8007c38:	2f00      	cmp	r7, #0
 8007c3a:	f43f af3e 	beq.w	8007aba <Collision_Update+0x25a>
                player_life--;
 8007c3e:	3f01      	subs	r7, #1
 8007c40:	e73b      	b.n	8007aba <Collision_Update+0x25a>
    Item_Init();
}

int Check_Collision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2)
{
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	f77f af29 	ble.w	8007a9a <Collision_Update+0x23a>
 8007c48:	f10a 0410 	add.w	r4, sl, #16
 8007c4c:	42ac      	cmp	r4, r5
 8007c4e:	f77f af24 	ble.w	8007a9a <Collision_Update+0x23a>
 8007c52:	45d4      	cmp	ip, sl
 8007c54:	f77f af21 	ble.w	8007a9a <Collision_Update+0x23a>

    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, enemies[i].x, enemies[i].y, 16, 16))
        {
            enemies[i].active = 0;
 8007c58:	2400      	movs	r4, #0
 8007c5a:	f8c8 4080 	str.w	r4, [r8, #128]	; 0x80
            if (player_life > 0)
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	f43f af1b 	beq.w	8007a9a <Collision_Update+0x23a>
                player_life--;
 8007c64:	3f01      	subs	r7, #1
 8007c66:	e718      	b.n	8007a9a <Collision_Update+0x23a>
    {
        if (items[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, items[i].x, items[i].y, 10, 10))
        {
            if (items[i].type == ITEM_BOMB && bomb_item < 3)
                bomb_item++;
            else if (items[i].type == ITEM_UP && up_item < 5)
 8007c68:	2c01      	cmp	r4, #1
 8007c6a:	d008      	beq.n	8007c7e <Collision_Update+0x41e>
                up_item++;
            else if (items[i].type == ITEM_SPEED && speed_item < 3)
 8007c6c:	2c02      	cmp	r4, #2
 8007c6e:	f47f aef1 	bne.w	8007a54 <Collision_Update+0x1f4>
 8007c72:	9e03      	ldr	r6, [sp, #12]
 8007c74:	2e02      	cmp	r6, #2
                speed_item++;
 8007c76:	bf9c      	itt	ls
 8007c78:	3601      	addls	r6, #1
 8007c7a:	9603      	strls	r6, [sp, #12]
 8007c7c:	e6ea      	b.n	8007a54 <Collision_Update+0x1f4>
    {
        if (items[i].active && Check_Collision(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, items[i].x, items[i].y, 10, 10))
        {
            if (items[i].type == ITEM_BOMB && bomb_item < 3)
                bomb_item++;
            else if (items[i].type == ITEM_UP && up_item < 5)
 8007c7e:	f1b9 0f04 	cmp.w	r9, #4
                up_item++;
 8007c82:	bf98      	it	ls
 8007c84:	f109 0901 	addls.w	r9, r9, #1
 8007c88:	e6e4      	b.n	8007a54 <Collision_Update+0x1f4>
 8007c8a:	bf00      	nop
 8007c8c:	20000680 	andcs	r0, r0, r0, lsl #13

08007c90 <Game_Update>:
        }
    }
}

void Game_Update(void)
{
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static int move_speed = PLAYER_SPEED;
    static int spawn_timer = 0;
    static int item_spawn_timer = 0;
    static int enemy_fire_timer = 0;

    if (player_life == 0)
 8007c92:	f240 0104 	movw	r1, #4
 8007c96:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8007c9a:	688b      	ldr	r3, [r1, #8]
    {
        game_state = STATE_GAMEOVER;
 8007c9c:	f240 54a4 	movw	r4, #1444	; 0x5a4
 8007ca0:	f2c2 0400 	movt	r4, #8192	; 0x2000
    static int move_speed = PLAYER_SPEED;
    static int spawn_timer = 0;
    static int item_spawn_timer = 0;
    static int enemy_fire_timer = 0;

    if (player_life == 0)
 8007ca4:	b913      	cbnz	r3, 8007cac <Game_Update+0x1c>
    {
        game_state = STATE_GAMEOVER;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
    }

    move_speed = (speed_item > 0) ? (PLAYER_SPEED + 2) : PLAYER_SPEED;

    if (Jog_key_in)
 8007cac:	f240 63f8 	movw	r3, #1784	; 0x6f8
 8007cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    if (player_life == 0)
    {
        game_state = STATE_GAMEOVER;
    }

    move_speed = (speed_item > 0) ? (PLAYER_SPEED + 2) : PLAYER_SPEED;
 8007cb4:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134

    if (Jog_key_in)
 8007cb8:	681a      	ldr	r2, [r3, #0]
    if (player_life == 0)
    {
        game_state = STATE_GAMEOVER;
    }

    move_speed = (speed_item > 0) ? (PLAYER_SPEED + 2) : PLAYER_SPEED;
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	bf0c      	ite	eq
 8007cbe:	2005      	moveq	r0, #5
 8007cc0:	2007      	movne	r0, #7

    if (Jog_key_in)
 8007cc2:	b1ba      	cbz	r2, 8007cf4 <Game_Update+0x64>
    {
        Jog_key_in = 0;
 8007cc4:	2600      	movs	r6, #0
        switch (Jog_key)
 8007cc6:	f240 62fc 	movw	r2, #1788	; 0x6fc

    move_speed = (speed_item > 0) ? (PLAYER_SPEED + 2) : PLAYER_SPEED;

    if (Jog_key_in)
    {
        Jog_key_in = 0;
 8007cca:	601e      	str	r6, [r3, #0]
        switch (Jog_key)
 8007ccc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007cd0:	6813      	ldr	r3, [r2, #0]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d80e      	bhi.n	8007cf4 <Game_Update+0x64>
 8007cd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007cda:	02f20004 	rscseq	r0, r2, #4
 8007cde:	030702fc 	movweq	r0, #29436	; 0x72fc
        {
            case 0: if (player_y > Y_MIN) player_y -= move_speed; break;
 8007ce2:	684a      	ldr	r2, [r1, #4]
 8007ce4:	f240 0304 	movw	r3, #4
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007cee:	dd01      	ble.n	8007cf4 <Game_Update+0x64>
 8007cf0:	1a12      	subs	r2, r2, r0
 8007cf2:	605a      	str	r2, [r3, #4]
            case 2: if (player_x > X_MIN) player_x -= move_speed; break;
            case 3: if (player_x + PLAYER_SIZE_X < X_MAX) player_x += move_speed; break;
        }
    }

    if (fire_delay > 0) fire_delay--;
 8007cf4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8007cf8:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007cfc:	2a00      	cmp	r2, #0

    int fire_interval = (speed_item > 0) ? 5 : 10;
    int bullets_to_fire = (up_item > 0) ? (1 + up_item) : 1;
 8007cfe:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
            case 2: if (player_x > X_MIN) player_x -= move_speed; break;
            case 3: if (player_x + PLAYER_SIZE_X < X_MAX) player_x += move_speed; break;
        }
    }

    if (fire_delay > 0) fire_delay--;
 8007d02:	bfc8      	it	gt
 8007d04:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8007d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d0c:	bfc8      	it	gt
 8007d0e:	f8c3 213c 	strgt.w	r2, [r3, #316]	; 0x13c

    int fire_interval = (speed_item > 0) ? 5 : 10;
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	bf0c      	ite	eq
 8007d16:	250a      	moveq	r5, #10
 8007d18:	2505      	movne	r5, #5
    int bullets_to_fire = (up_item > 0) ? (1 + up_item) : 1;
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f000 81eb 	beq.w	80080f6 <Game_Update+0x466>
 8007d20:	3001      	adds	r0, #1

    if ((GPIOA->IDR & (1 << SW0_PIN)) == 0 && fire_delay == 0)
 8007d22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	049b      	lsls	r3, r3, #18
 8007d2e:	d439      	bmi.n	8007da4 <Game_Update+0x114>
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	d137      	bne.n	8007da4 <Game_Update+0x114>
    {
        int i;
        for (i = 0; i < bullets_to_fire; i++)
 8007d34:	2800      	cmp	r0, #0
 8007d36:	dd33      	ble.n	8007da0 <Game_Update+0x110>
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 8007d38:	680f      	ldr	r7, [r1, #0]

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 8007d3a:	f240 53a4 	movw	r3, #1444	; 0x5a4
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
            bullets[i].y = player_y;
 8007d3e:	684e      	ldr	r6, [r1, #4]
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 8007d40:	3706      	adds	r7, #6

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 8007d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    }
}

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
 8007d46:	f04f 0e01 	mov.w	lr, #1
    {
        if (!bullets[i].active)
 8007d4a:	68a1      	ldr	r1, [r4, #8]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	f000 8222 	beq.w	8008196 <Game_Update+0x506>
 8007d52:	6959      	ldr	r1, [r3, #20]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	f000 82d2 	beq.w	80082fe <Game_Update+0x66e>
 8007d5a:	6a19      	ldr	r1, [r3, #32]
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	f000 82d0 	beq.w	8008302 <Game_Update+0x672>
 8007d62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d64:	2900      	cmp	r1, #0
 8007d66:	f000 82ce 	beq.w	8008306 <Game_Update+0x676>
 8007d6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	f000 82cc 	beq.w	800830a <Game_Update+0x67a>
 8007d72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007d74:	2900      	cmp	r1, #0
 8007d76:	f000 82ca 	beq.w	800830e <Game_Update+0x67e>
 8007d7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	f000 82c8 	beq.w	8008312 <Game_Update+0x682>
 8007d82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8007d84:	2900      	cmp	r1, #0
 8007d86:	f000 82c6 	beq.w	8008316 <Game_Update+0x686>
 8007d8a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	f000 82c4 	beq.w	800831a <Game_Update+0x68a>
 8007d92:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8007d94:	2900      	cmp	r1, #0
 8007d96:	f000 81fd 	beq.w	8008194 <Game_Update+0x504>
    int bullets_to_fire = (up_item > 0) ? (1 + up_item) : 1;

    if ((GPIOA->IDR & (1 << SW0_PIN)) == 0 && fire_delay == 0)
    {
        int i;
        for (i = 0; i < bullets_to_fire; i++)
 8007d9a:	3201      	adds	r2, #1
 8007d9c:	4282      	cmp	r2, r0
 8007d9e:	d1d4      	bne.n	8007d4a <Game_Update+0xba>
        {
            Fire_Bullet();
        }
        fire_delay = fire_interval;
 8007da0:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    }

    if ((GPIOA->IDR & (1 << 14)) == 0 && bomb_item > 0)
 8007da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007da8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	f412 4280 	ands.w	r2, r2, #16384	; 0x4000
 8007db2:	d108      	bne.n	8007dc6 <Game_Update+0x136>
 8007db4:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8007db8:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	f040 81cf 	bne.w	8008164 <Game_Update+0x4d4>

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007dc6:	68a2      	ldr	r2, [r4, #8]
 8007dc8:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dd0:	b132      	cbz	r2, 8007de0 <Game_Update+0x150>
        {
            bullets[i].y -= BULLET_SPEED;
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007dd6:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007dd8:	605a      	str	r2, [r3, #4]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007dda:	bfbc      	itt	lt
 8007ddc:	2200      	movlt	r2, #0
 8007dde:	609a      	strlt	r2, [r3, #8]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007de0:	6962      	ldr	r2, [r4, #20]
 8007de2:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007dea:	b132      	cbz	r2, 8007dfa <Game_Update+0x16a>
        {
            bullets[i].y -= BULLET_SPEED;
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007df0:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007df2:	611a      	str	r2, [r3, #16]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007df4:	bfbc      	itt	lt
 8007df6:	2200      	movlt	r2, #0
 8007df8:	615a      	strlt	r2, [r3, #20]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007dfa:	6a22      	ldr	r2, [r4, #32]
 8007dfc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e04:	b132      	cbz	r2, 8007e14 <Game_Update+0x184>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e0a:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e0c:	61da      	str	r2, [r3, #28]
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e0e:	bfbc      	itt	lt
 8007e10:	2200      	movlt	r2, #0
 8007e12:	621a      	strlt	r2, [r3, #32]

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e16:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e1e:	b132      	cbz	r2, 8007e2e <Game_Update+0x19e>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e22:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e24:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e28:	bfbc      	itt	lt
 8007e2a:	2200      	movlt	r2, #0
 8007e2c:	62da      	strlt	r2, [r3, #44]	; 0x2c

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007e30:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e38:	b132      	cbz	r2, 8007e48 <Game_Update+0x1b8>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e3c:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e3e:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e42:	bfbc      	itt	lt
 8007e44:	2200      	movlt	r2, #0
 8007e46:	639a      	strlt	r2, [r3, #56]	; 0x38

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e48:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007e4a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e52:	b132      	cbz	r2, 8007e62 <Game_Update+0x1d2>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e56:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e58:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e5a:	641a      	str	r2, [r3, #64]	; 0x40
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e5c:	bfbc      	itt	lt
 8007e5e:	2200      	movlt	r2, #0
 8007e60:	645a      	strlt	r2, [r3, #68]	; 0x44

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007e64:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e6c:	b132      	cbz	r2, 8007e7c <Game_Update+0x1ec>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e70:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e72:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e74:	64da      	str	r2, [r3, #76]	; 0x4c
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e76:	bfbc      	itt	lt
 8007e78:	2200      	movlt	r2, #0
 8007e7a:	651a      	strlt	r2, [r3, #80]	; 0x50

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e7c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007e7e:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e86:	b132      	cbz	r2, 8007e96 <Game_Update+0x206>
        {
            bullets[i].y -= BULLET_SPEED;
 8007e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e8a:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007e8c:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007e8e:	659a      	str	r2, [r3, #88]	; 0x58
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007e90:	bfbc      	itt	lt
 8007e92:	2200      	movlt	r2, #0
 8007e94:	65da      	strlt	r2, [r3, #92]	; 0x5c

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007e96:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007e98:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ea0:	b132      	cbz	r2, 8007eb0 <Game_Update+0x220>
        {
            bullets[i].y -= BULLET_SPEED;
 8007ea2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ea4:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007ea6:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007ea8:	665a      	str	r2, [r3, #100]	; 0x64
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007eaa:	bfbc      	itt	lt
 8007eac:	2200      	movlt	r2, #0
 8007eae:	669a      	strlt	r2, [r3, #104]	; 0x68

void Bullet_Update(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8007eb0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007eb2:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007eba:	b132      	cbz	r2, 8007eca <Game_Update+0x23a>
        {
            bullets[i].y -= BULLET_SPEED;
 8007ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ebe:	3a0a      	subs	r2, #10
            if (bullets[i].y < Y_MIN)
 8007ec0:	2a00      	cmp	r2, #0
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            bullets[i].y -= BULLET_SPEED;
 8007ec2:	671a      	str	r2, [r3, #112]	; 0x70
            if (bullets[i].y < Y_MIN)
            {
                bullets[i].active = 0;
 8007ec4:	bfbc      	itt	lt
 8007ec6:	2200      	movlt	r2, #0
 8007ec8:	675a      	strlt	r2, [r3, #116]	; 0x74
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007eca:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007ece:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007ed6:	b15a      	cbz	r2, 8007ef0 <Game_Update+0x260>
        {
            if (!enemies[i].moving_down)
 8007ed8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	f040 8138 	bne.w	8008152 <Game_Update+0x4c2>
            {
                if (enemies[i].y < LCDH / 3)
 8007ee2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ee4:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007ee6:	bfdc      	itt	le
 8007ee8:	3201      	addle	r2, #1
 8007eea:	67da      	strle	r2, [r3, #124]	; 0x7c
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007eec:	f300 81ab 	bgt.w	8008246 <Game_Update+0x5b6>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007ef0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8007ef4:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007efc:	b16a      	cbz	r2, 8007f1a <Game_Update+0x28a>
        {
            if (!enemies[i].moving_down)
 8007efe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	f040 811a 	bne.w	800813c <Game_Update+0x4ac>
            {
                if (enemies[i].y < LCDH / 3)
 8007f08:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f0c:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007f0e:	bfdc      	itt	le
 8007f10:	3201      	addle	r2, #1
 8007f12:	f8c3 2090 	strle.w	r2, [r3, #144]	; 0x90
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007f16:	f300 81a2 	bgt.w	800825e <Game_Update+0x5ce>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007f1a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8007f1e:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f26:	b16a      	cbz	r2, 8007f44 <Game_Update+0x2b4>
        {
            if (!enemies[i].moving_down)
 8007f28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007f2c:	2a00      	cmp	r2, #0
 8007f2e:	f040 80fa 	bne.w	8008126 <Game_Update+0x496>
            {
                if (enemies[i].y < LCDH / 3)
 8007f32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007f36:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007f38:	bfdc      	itt	le
 8007f3a:	3201      	addle	r2, #1
 8007f3c:	f8c3 20a4 	strle.w	r2, [r3, #164]	; 0xa4
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007f40:	f300 8199 	bgt.w	8008276 <Game_Update+0x5e6>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007f44:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 8007f48:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f50:	b16a      	cbz	r2, 8007f6e <Game_Update+0x2de>
        {
            if (!enemies[i].moving_down)
 8007f52:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	f040 80da 	bne.w	8008110 <Game_Update+0x480>
            {
                if (enemies[i].y < LCDH / 3)
 8007f5c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8007f60:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007f62:	bfdc      	itt	le
 8007f64:	3201      	addle	r2, #1
 8007f66:	f8c3 20b8 	strle.w	r2, [r3, #184]	; 0xb8
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007f6a:	f300 8190 	bgt.w	800828e <Game_Update+0x5fe>
void Enemy_Update(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8007f6e:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8007f72:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007f7a:	b16a      	cbz	r2, 8007f98 <Game_Update+0x308>
        {
            if (!enemies[i].moving_down)
 8007f7c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	f040 80ba 	bne.w	80080fa <Game_Update+0x46a>
            {
                if (enemies[i].y < LCDH / 3)
 8007f86:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8007f8a:	2a4f      	cmp	r2, #79	; 0x4f
                {
                    enemies[i].y += ENEMY_SPEED;
 8007f8c:	bfdc      	itt	le
 8007f8e:	3201      	addle	r2, #1
 8007f90:	f8c3 20cc 	strle.w	r2, [r3, #204]	; 0xcc
    {
        if (enemies[i].active)
        {
            if (!enemies[i].moving_down)
            {
                if (enemies[i].y < LCDH / 3)
 8007f94:	f300 8187 	bgt.w	80082a6 <Game_Update+0x616>

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007f98:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8007f9c:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fa4:	b14a      	cbz	r2, 8007fba <Game_Update+0x32a>
        {
            items[i].y += ITEM_SPEED;
 8007fa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007faa:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8007fac:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8007fae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 8007fb2:	bfc4      	itt	gt
 8007fb4:	2200      	movgt	r2, #0
 8007fb6:	f8c3 20e4 	strgt.w	r2, [r3, #228]	; 0xe4

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007fba:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
 8007fbe:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fc6:	b14a      	cbz	r2, 8007fdc <Game_Update+0x34c>
        {
            items[i].y += ITEM_SPEED;
 8007fc8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007fcc:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8007fce:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8007fd0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 8007fd4:	bfc4      	itt	gt
 8007fd6:	2200      	movgt	r2, #0
 8007fd8:	f8c3 20f4 	strgt.w	r2, [r3, #244]	; 0xf4

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007fdc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8007fe0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8007fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fe8:	b14a      	cbz	r2, 8007ffe <Game_Update+0x36e>
        {
            items[i].y += ITEM_SPEED;
 8007fea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007fee:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8007ff0:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8007ff2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 8007ff6:	bfc4      	itt	gt
 8007ff8:	2200      	movgt	r2, #0
 8007ffa:	f8c3 2104 	strgt.w	r2, [r3, #260]	; 0x104

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8007ffe:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
 8008002:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800800a:	b14a      	cbz	r2, 8008020 <Game_Update+0x390>
        {
            items[i].y += ITEM_SPEED;
 800800c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008010:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8008012:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8008014:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 8008018:	bfc4      	itt	gt
 800801a:	2200      	movgt	r2, #0
 800801c:	f8c3 2114 	strgt.w	r2, [r3, #276]	; 0x114

void Item_Update(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8008020:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8008024:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800802c:	b14a      	cbz	r2, 8008042 <Game_Update+0x3b2>
        {
            items[i].y += ITEM_SPEED;
 800802e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8008032:	3202      	adds	r2, #2
            if (items[i].y > Y_MAX)
 8008034:	2aef      	cmp	r2, #239	; 0xef
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            items[i].y += ITEM_SPEED;
 8008036:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            if (items[i].y > Y_MAX)
                items[i].active = 0;
 800803a:	bfc4      	itt	gt
 800803c:	2200      	movgt	r2, #0
 800803e:	f8c3 2124 	strgt.w	r2, [r3, #292]	; 0x124
    }

    Bullet_Update();
    Enemy_Update();
    Item_Update();
    Collision_Update();
 8008042:	f7ff fc0d 	bl	8007860 <Collision_Update>

    spawn_timer++;
 8008046:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    item_spawn_timer++;
    enemy_fire_timer++;
 800804a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
    item_spawn_timer++;
 800804e:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
    Bullet_Update();
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
 8008052:	3201      	adds	r2, #1
    item_spawn_timer++;
    enemy_fire_timer++;
 8008054:	1c58      	adds	r0, r3, #1
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
    item_spawn_timer++;
 8008056:	3101      	adds	r1, #1
    Bullet_Update();
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
 8008058:	f240 53a4 	movw	r3, #1444	; 0x5a4
    item_spawn_timer++;
    enemy_fire_timer++;

    if (spawn_timer > SPAWN_INTERVAL)
 800805c:	2a14      	cmp	r2, #20
    Bullet_Update();
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
 800805e:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
    item_spawn_timer++;
 8008062:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
    enemy_fire_timer++;
 8008066:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    Bullet_Update();
    Enemy_Update();
    Item_Update();
    Collision_Update();

    spawn_timer++;
 800806a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    item_spawn_timer++;
    enemy_fire_timer++;

    if (spawn_timer > SPAWN_INTERVAL)
 800806e:	f300 80cd 	bgt.w	800820c <Game_Update+0x57c>
    {
        Spawn_Enemy();
        spawn_timer = 0;
    }

    if (item_spawn_timer > 300)
 8008072:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 8008076:	f300 80a7 	bgt.w	80081c8 <Game_Update+0x538>
    {
        Spawn_Item();
        item_spawn_timer = 0;
    }

    if (enemy_fire_timer > 50)
 800807a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800807e:	2b32      	cmp	r3, #50	; 0x32
 8008080:	dd38      	ble.n	80080f4 <Game_Update+0x464>
 8008082:	4bbe      	ldr	r3, [pc, #760]	; (800837c <Game_Update+0x6ec>)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
            bullets[i].y = ey + 16;
            bullets[i].active = 1;
 8008084:	2601      	movs	r6, #1
 8008086:	f103 0064 	add.w	r0, r3, #100	; 0x64
void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 800808a:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
    if (enemy_fire_timer > 50)
    {
        int i;
        for (i = 0; i < ENEMY_MAX; i++)
        {
            if (enemies[i].active)
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	b351      	cbz	r1, 80080e8 <Game_Update+0x458>
void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 8008092:	68a1      	ldr	r1, [r4, #8]
        int i;
        for (i = 0; i < ENEMY_MAX; i++)
        {
            if (enemies[i].active)
            {
                Fire_Enemy_Bullet(enemies[i].x, enemies[i].y);
 8008094:	f853 7c08 	ldr.w	r7, [r3, #-8]
 8008098:	f853 5c04 	ldr.w	r5, [r3, #-4]
void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
 800809c:	2900      	cmp	r1, #0
 800809e:	f000 8086 	beq.w	80081ae <Game_Update+0x51e>
 80080a2:	6951      	ldr	r1, [r2, #20]
 80080a4:	2900      	cmp	r1, #0
 80080a6:	f000 813a 	beq.w	800831e <Game_Update+0x68e>
 80080aa:	6a11      	ldr	r1, [r2, #32]
 80080ac:	2900      	cmp	r1, #0
 80080ae:	f000 8138 	beq.w	8008322 <Game_Update+0x692>
 80080b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80080b4:	2900      	cmp	r1, #0
 80080b6:	f000 8136 	beq.w	8008326 <Game_Update+0x696>
 80080ba:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80080bc:	2900      	cmp	r1, #0
 80080be:	f000 8134 	beq.w	800832a <Game_Update+0x69a>
 80080c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80080c4:	2900      	cmp	r1, #0
 80080c6:	f000 8132 	beq.w	800832e <Game_Update+0x69e>
 80080ca:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80080cc:	2900      	cmp	r1, #0
 80080ce:	f000 8130 	beq.w	8008332 <Game_Update+0x6a2>
 80080d2:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80080d4:	2900      	cmp	r1, #0
 80080d6:	f000 817d 	beq.w	80083d4 <Game_Update+0x744>
 80080da:	6e91      	ldr	r1, [r2, #104]	; 0x68
 80080dc:	2900      	cmp	r1, #0
 80080de:	d065      	beq.n	80081ac <Game_Update+0x51c>
 80080e0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80080e2:	2900      	cmp	r1, #0
 80080e4:	f000 8178 	beq.w	80083d8 <Game_Update+0x748>
 80080e8:	3314      	adds	r3, #20
    }

    if (enemy_fire_timer > 50)
    {
        int i;
        for (i = 0; i < ENEMY_MAX; i++)
 80080ea:	4283      	cmp	r3, r0
 80080ec:	d1cf      	bne.n	800808e <Game_Update+0x3fe>
            if (enemies[i].active)
            {
                Fire_Enemy_Bullet(enemies[i].x, enemies[i].y);
            }
        }
        enemy_fire_timer = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 80080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    if (fire_delay > 0) fire_delay--;

    int fire_interval = (speed_item > 0) ? 5 : 10;
    int bullets_to_fire = (up_item > 0) ? (1 + up_item) : 1;
 80080f6:	2001      	movs	r0, #1
 80080f8:	e613      	b.n	8007d22 <Game_Update+0x92>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 80080fa:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80080fe:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 8008100:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008102:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 8008106:	bfc4      	itt	gt
 8008108:	2200      	movgt	r2, #0
 800810a:	f8c3 20d0 	strgt.w	r2, [r3, #208]	; 0xd0
 800810e:	e743      	b.n	8007f98 <Game_Update+0x308>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008110:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008114:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 8008116:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008118:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 800811c:	bfc4      	itt	gt
 800811e:	2200      	movgt	r2, #0
 8008120:	f8c3 20bc 	strgt.w	r2, [r3, #188]	; 0xbc
 8008124:	e723      	b.n	8007f6e <Game_Update+0x2de>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008126:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800812a:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 800812c:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 800812e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 8008132:	bfc4      	itt	gt
 8008134:	2200      	movgt	r2, #0
 8008136:	f8c3 20a8 	strgt.w	r2, [r3, #168]	; 0xa8
 800813a:	e703      	b.n	8007f44 <Game_Update+0x2b4>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 800813c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008140:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 8008142:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 8008148:	bfc4      	itt	gt
 800814a:	2200      	movgt	r2, #0
 800814c:	f8c3 2094 	strgt.w	r2, [r3, #148]	; 0x94
 8008150:	e6e3      	b.n	8007f1a <Game_Update+0x28a>
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008152:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008154:	3201      	adds	r2, #1
                if (enemies[i].y > Y_MAX)
 8008156:	2aef      	cmp	r2, #239	; 0xef
                        enemies[i].moving_down = 1;
                }
            }
            else
            {
                enemies[i].y += ENEMY_SPEED;
 8008158:	67da      	str	r2, [r3, #124]	; 0x7c
                if (enemies[i].y > Y_MAX)
                    enemies[i].active = 0;
 800815a:	bfc4      	itt	gt
 800815c:	2200      	movgt	r2, #0
 800815e:	f8c3 2080 	strgt.w	r2, [r3, #128]	; 0x80
 8008162:	e6c5      	b.n	8007ef0 <Game_Update+0x260>
        fire_delay = fire_interval;
    }

    if ((GPIOA->IDR & (1 << 14)) == 0 && bomb_item > 0)
    {
        bomb_item--;
 8008164:	3901      	subs	r1, #1
 8008166:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c

void Use_Bomb(void)
{
    int i;
    for (i = 0; i < ENEMY_MAX; i++)
        enemies[i].active = 0;
 800816a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800816e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008172:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8008176:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800817a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    for (i = 0; i < BULLET_MAX; i++)
        bullets[i].active = 0;
 800817e:	609a      	str	r2, [r3, #8]
 8008180:	615a      	str	r2, [r3, #20]
 8008182:	621a      	str	r2, [r3, #32]
 8008184:	62da      	str	r2, [r3, #44]	; 0x2c
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
 8008188:	645a      	str	r2, [r3, #68]	; 0x44
 800818a:	651a      	str	r2, [r3, #80]	; 0x50
 800818c:	65da      	str	r2, [r3, #92]	; 0x5c
 800818e:	669a      	str	r2, [r3, #104]	; 0x68
 8008190:	675a      	str	r2, [r3, #116]	; 0x74
 8008192:	e618      	b.n	8007dc6 <Game_Update+0x136>
    }
}

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
 8008194:	2109      	movs	r1, #9
    {
        if (!bullets[i].active)
        {
            bullets[i].x = player_x + PLAYER_SIZE_X/2 - 2;
 8008196:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800819a:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 800819e:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
            bullets[i].y = player_y;
 80081a2:	f8cc 6004 	str.w	r6, [ip, #4]
            bullets[i].active = 1;
 80081a6:	f8cc e008 	str.w	lr, [ip, #8]
 80081aa:	e5f6      	b.n	8007d9a <Game_Update+0x10a>
}

void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
 80081ac:	2108      	movs	r1, #8
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
 80081ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80081b2:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
 80081b6:	3706      	adds	r7, #6
            bullets[i].y = ey + 16;
 80081b8:	3510      	adds	r5, #16
    int i;
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
 80081ba:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
            bullets[i].y = ey + 16;
            bullets[i].active = 1;
 80081be:	f8cc 6008 	str.w	r6, [ip, #8]
    for (i = 0; i < BULLET_MAX; i++)
    {
        if (!bullets[i].active)
        {
            bullets[i].x = ex + 6;
            bullets[i].y = ey + 16;
 80081c2:	f8cc 5004 	str.w	r5, [ip, #4]
 80081c6:	e78f      	b.n	80080e8 <Game_Update+0x458>

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (!items[i].active)
 80081c8:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80081cc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80081d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	f000 8101 	beq.w	80083dc <Game_Update+0x74c>
 80081da:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80081de:	2a00      	cmp	r2, #0
 80081e0:	f000 8100 	beq.w	80083e4 <Game_Update+0x754>
 80081e4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	f000 80fd 	beq.w	80083e8 <Game_Update+0x758>
 80081ee:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	f000 80c4 	beq.w	8008380 <Game_Update+0x6f0>
 80081f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 80081fc:	2504      	movs	r5, #4
    {
        if (!items[i].active)
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80bf 	beq.w	8008382 <Game_Update+0x6f2>
    }

    if (item_spawn_timer > 300)
    {
        Spawn_Item();
        item_spawn_timer = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 800820a:	e736      	b.n	800807a <Game_Update+0x3ea>

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
 800820c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008210:	2a00      	cmp	r2, #0
 8008212:	f000 80e5 	beq.w	80083e0 <Game_Update+0x750>
 8008216:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800821a:	2a00      	cmp	r2, #0
 800821c:	f000 80e8 	beq.w	80083f0 <Game_Update+0x760>
 8008220:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8008224:	2a00      	cmp	r2, #0
 8008226:	f000 80e1 	beq.w	80083ec <Game_Update+0x75c>
 800822a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800822e:	2a00      	cmp	r2, #0
 8008230:	f000 8081 	beq.w	8008336 <Game_Update+0x6a6>
 8008234:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 8008238:	2504      	movs	r5, #4
    {
        if (!enemies[i].active)
 800823a:	2b00      	cmp	r3, #0
 800823c:	d07c      	beq.n	8008338 <Game_Update+0x6a8>
    enemy_fire_timer++;

    if (spawn_timer > SPAWN_INTERVAL)
    {
        Spawn_Enemy();
        spawn_timer = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8008244:	e715      	b.n	8008072 <Game_Update+0x3e2>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8008246:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800824a:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 800824c:	bfd5      	itete	le
 800824e:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008250:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 8008254:	f8c3 2088 	strle.w	r2, [r3, #136]	; 0x88
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008258:	f8c3 2084 	strgt.w	r2, [r3, #132]	; 0x84
 800825c:	e648      	b.n	8007ef0 <Game_Update+0x260>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 800825e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8008262:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 8008264:	bfd5      	itete	le
 8008266:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008268:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 800826c:	f8c3 209c 	strle.w	r2, [r3, #156]	; 0x9c
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008270:	f8c3 2098 	strgt.w	r2, [r3, #152]	; 0x98
 8008274:	e651      	b.n	8007f1a <Game_Update+0x28a>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 8008276:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800827a:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 800827c:	bfd5      	itete	le
 800827e:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008280:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 8008284:	f8c3 20b0 	strle.w	r2, [r3, #176]	; 0xb0
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008288:	f8c3 20ac 	strgt.w	r2, [r3, #172]	; 0xac
 800828c:	e65a      	b.n	8007f44 <Game_Update+0x2b4>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 800828e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008292:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
                    else
                        enemies[i].moving_down = 1;
 8008294:	bfd5      	itete	le
 8008296:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 8008298:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 800829c:	f8c3 20c4 	strle.w	r2, [r3, #196]	; 0xc4
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 80082a0:	f8c3 20c0 	strgt.w	r2, [r3, #192]	; 0xc0
 80082a4:	e663      	b.n	8007f6e <Game_Update+0x2de>
                {
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
 80082a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80082aa:	2a00      	cmp	r2, #0
                        enemies[i].stop_timer--;
 80082ac:	bfcb      	itete	gt
 80082ae:	f102 32ff 	addgt.w	r2, r2, #4294967295
                    else
                        enemies[i].moving_down = 1;
 80082b2:	2201      	movle	r2, #1
                    enemies[i].y += ENEMY_SPEED;
                }
                else
                {
                    if (enemies[i].stop_timer > 0)
                        enemies[i].stop_timer--;
 80082b4:	f8c3 20d4 	strgt.w	r2, [r3, #212]	; 0xd4
                    else
                        enemies[i].moving_down = 1;
 80082b8:	f8c3 20d8 	strle.w	r2, [r3, #216]	; 0xd8
 80082bc:	e66c      	b.n	8007f98 <Game_Update+0x308>
    {
        Jog_key_in = 0;
        switch (Jog_key)
        {
            case 0: if (player_y > Y_MIN) player_y -= move_speed; break;
            case 1: if (player_y + PLAYER_SIZE_Y < Y_MAX) player_y += move_speed; break;
 80082be:	684a      	ldr	r2, [r1, #4]
 80082c0:	f240 0304 	movw	r3, #4
 80082c4:	2ade      	cmp	r2, #222	; 0xde
 80082c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082ca:	bfdc      	itt	le
 80082cc:	1812      	addle	r2, r2, r0
 80082ce:	605a      	strle	r2, [r3, #4]
 80082d0:	e510      	b.n	8007cf4 <Game_Update+0x64>
            case 2: if (player_x > X_MIN) player_x -= move_speed; break;
 80082d2:	680a      	ldr	r2, [r1, #0]
 80082d4:	f240 0304 	movw	r3, #4
 80082d8:	2a00      	cmp	r2, #0
 80082da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082de:	f77f ad09 	ble.w	8007cf4 <Game_Update+0x64>
 80082e2:	1a12      	subs	r2, r2, r0
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e505      	b.n	8007cf4 <Game_Update+0x64>
            case 3: if (player_x + PLAYER_SIZE_X < X_MAX) player_x += move_speed; break;
 80082e8:	680a      	ldr	r2, [r1, #0]
 80082ea:	f240 0304 	movw	r3, #4
 80082ee:	f5b2 7f97 	cmp.w	r2, #302	; 0x12e
 80082f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082f6:	bfdc      	itt	le
 80082f8:	1812      	addle	r2, r2, r0
 80082fa:	601a      	strle	r2, [r3, #0]
 80082fc:	e4fa      	b.n	8007cf4 <Game_Update+0x64>
    }
}

void Fire_Bullet(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
 80082fe:	2101      	movs	r1, #1
 8008300:	e749      	b.n	8008196 <Game_Update+0x506>
 8008302:	2102      	movs	r1, #2
 8008304:	e747      	b.n	8008196 <Game_Update+0x506>
 8008306:	2103      	movs	r1, #3
 8008308:	e745      	b.n	8008196 <Game_Update+0x506>
 800830a:	2104      	movs	r1, #4
 800830c:	e743      	b.n	8008196 <Game_Update+0x506>
 800830e:	2105      	movs	r1, #5
 8008310:	e741      	b.n	8008196 <Game_Update+0x506>
 8008312:	2106      	movs	r1, #6
 8008314:	e73f      	b.n	8008196 <Game_Update+0x506>
 8008316:	2107      	movs	r1, #7
 8008318:	e73d      	b.n	8008196 <Game_Update+0x506>
 800831a:	2108      	movs	r1, #8
 800831c:	e73b      	b.n	8008196 <Game_Update+0x506>
}

void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
 800831e:	2101      	movs	r1, #1
 8008320:	e745      	b.n	80081ae <Game_Update+0x51e>
 8008322:	2102      	movs	r1, #2
 8008324:	e743      	b.n	80081ae <Game_Update+0x51e>
 8008326:	2103      	movs	r1, #3
 8008328:	e741      	b.n	80081ae <Game_Update+0x51e>
 800832a:	2104      	movs	r1, #4
 800832c:	e73f      	b.n	80081ae <Game_Update+0x51e>
 800832e:	2105      	movs	r1, #5
 8008330:	e73d      	b.n	80081ae <Game_Update+0x51e>
 8008332:	2106      	movs	r1, #6
 8008334:	e73b      	b.n	80081ae <Game_Update+0x51e>
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 8008336:	2503      	movs	r5, #3
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
 8008338:	f001 fa1c 	bl	8009774 <rand>
 800833c:	f248 13b5 	movw	r3, #33205	; 0x81b5
 8008340:	f6c1 334e 	movt	r3, #6990	; 0x1b4e
 8008344:	fb83 2300 	smull	r2, r3, r3, r0
 8008348:	17c2      	asrs	r2, r0, #31
 800834a:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 800834e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008352:	fb02 0013 	mls	r0, r2, r3, r0
 8008356:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800835a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
            enemies[i].y = 0;
            enemies[i].stop_timer = ENEMY_STOP_TIME;
            enemies[i].moving_down = 0;
            enemies[i].active = 1;
 800835e:	2101      	movs	r1, #1
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
            enemies[i].y = 0;
 8008360:	2200      	movs	r2, #0
            enemies[i].stop_timer = ENEMY_STOP_TIME;
 8008362:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
            enemies[i].moving_down = 0;
            enemies[i].active = 1;
 8008366:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
 800836a:	6798      	str	r0, [r3, #120]	; 0x78
            enemies[i].y = 0;
            enemies[i].stop_timer = ENEMY_STOP_TIME;
 800836c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
        {
            enemies[i].x = (rand() % (LCDW - 20));
            enemies[i].y = 0;
 8008370:	67da      	str	r2, [r3, #124]	; 0x7c
            enemies[i].stop_timer = ENEMY_STOP_TIME;
            enemies[i].moving_down = 0;
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008376:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 800837a:	e760      	b.n	800823e <Game_Update+0x5ae>
 800837c:	20000624 	andcs	r0, r0, r4, lsr #12
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8008380:	2503      	movs	r5, #3
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
 8008382:	f001 f9f7 	bl	8009774 <rand>
 8008386:	f240 13a7 	movw	r3, #423	; 0x1a7
 800838a:	f6c1 236d 	movt	r3, #6765	; 0x1a6d
 800838e:	fb83 2300 	smull	r2, r3, r3, r0
 8008392:	17c2      	asrs	r2, r0, #31
 8008394:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8008398:	f44f 729b 	mov.w	r2, #310	; 0x136
 800839c:	fb02 0013 	mls	r0, r2, r3, r0
 80083a0:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            items[i].y = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
 80083aa:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
            items[i].y = 0;
            items[i].type = (ITEM_TYPE)(rand() % 3);
 80083ae:	f001 f9e1 	bl	8009774 <rand>
 80083b2:	f245 5356 	movw	r3, #21846	; 0x5556
 80083b6:	f2c5 5355 	movt	r3, #21845	; 0x5555
 80083ba:	fb83 2300 	smull	r2, r3, r3, r0
 80083be:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80083c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80083c6:	1ac0      	subs	r0, r0, r3
            items[i].active = 1;
 80083c8:	2301      	movs	r3, #1
    {
        if (!items[i].active)
        {
            items[i].x = (rand() % (LCDW - 10));
            items[i].y = 0;
            items[i].type = (ITEM_TYPE)(rand() % 3);
 80083ca:	f885 00e8 	strb.w	r0, [r5, #232]	; 0xe8
            items[i].active = 1;
 80083ce:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
 80083d2:	e717      	b.n	8008204 <Game_Update+0x574>
}

void Fire_Enemy_Bullet(int ex, int ey)
{
    int i;
    for (i = 0; i < BULLET_MAX; i++)
 80083d4:	2107      	movs	r1, #7
 80083d6:	e6ea      	b.n	80081ae <Game_Update+0x51e>
 80083d8:	2109      	movs	r1, #9
 80083da:	e6e8      	b.n	80081ae <Game_Update+0x51e>

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (!items[i].active)
 80083dc:	4615      	mov	r5, r2
 80083de:	e7d0      	b.n	8008382 <Game_Update+0x6f2>

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (!enemies[i].active)
 80083e0:	4615      	mov	r5, r2
 80083e2:	e7a9      	b.n	8008338 <Game_Update+0x6a8>
    }
}

void Spawn_Item(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 80083e4:	2501      	movs	r5, #1
 80083e6:	e7cc      	b.n	8008382 <Game_Update+0x6f2>
 80083e8:	2502      	movs	r5, #2
 80083ea:	e7ca      	b.n	8008382 <Game_Update+0x6f2>
    }
}

void Spawn_Enemy(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
 80083ec:	2502      	movs	r5, #2
 80083ee:	e7a3      	b.n	8008338 <Game_Update+0x6a8>
 80083f0:	2501      	movs	r5, #1
 80083f2:	e7a1      	b.n	8008338 <Game_Update+0x6a8>

080083f4 <Game_Draw>:
        enemy_fire_timer = 0;
    }
}

void Game_Draw(void)
{
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Lcd_Clr_Screen();
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
 80083f8:	f240 0704 	movw	r7, #4
        enemy_fire_timer = 0;
    }
}

void Game_Draw(void)
{
 80083fc:	b086      	sub	sp, #24
    Lcd_Clr_Screen();
 80083fe:	f7fc fb8f 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
 8008402:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8008406:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800840a:	2210      	movs	r2, #16

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800840c:	f240 55a4 	movw	r5, #1444	; 0x5a4
}

void Game_Draw(void)
{
    Lcd_Clr_Screen();
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
 8008410:	e897 0003 	ldmia.w	r7, {r0, r1}

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008414:	f2c2 0500 	movt	r5, #8192	; 0x2000
}

void Game_Draw(void)
{
    Lcd_Clr_Screen();
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	f7fc fb84 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008420:	68ab      	ldr	r3, [r5, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 80b7 	bne.w	8008596 <Game_Draw+0x1a2>
 8008428:	696a      	ldr	r2, [r5, #20]
 800842a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800842e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008432:	2a00      	cmp	r2, #0
 8008434:	f040 80c0 	bne.w	80085b8 <Game_Draw+0x1c4>
 8008438:	6a2a      	ldr	r2, [r5, #32]
 800843a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800843e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008442:	2a00      	cmp	r2, #0
 8008444:	f040 80c9 	bne.w	80085da <Game_Draw+0x1e6>
 8008448:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800844a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800844e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008452:	2a00      	cmp	r2, #0
 8008454:	f040 80d2 	bne.w	80085fc <Game_Draw+0x208>
 8008458:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800845a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800845e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008462:	2a00      	cmp	r2, #0
 8008464:	f040 80db 	bne.w	800861e <Game_Draw+0x22a>
 8008468:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800846a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800846e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008472:	2a00      	cmp	r2, #0
 8008474:	f040 80e4 	bne.w	8008640 <Game_Draw+0x24c>
 8008478:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800847a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800847e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008482:	2a00      	cmp	r2, #0
 8008484:	f040 80ed 	bne.w	8008662 <Game_Draw+0x26e>
 8008488:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800848a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800848e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008492:	2a00      	cmp	r2, #0
 8008494:	f040 80f6 	bne.w	8008684 <Game_Draw+0x290>
 8008498:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800849a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800849e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	f040 80ff 	bne.w	80086a6 <Game_Draw+0x2b2>
 80084a8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80084aa:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80084ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	f040 8108 	bne.w	80086c8 <Game_Draw+0x2d4>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80084b8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 80084bc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80084c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084c4:	2a00      	cmp	r2, #0
 80084c6:	f040 8111 	bne.w	80086ec <Game_Draw+0x2f8>
 80084ca:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 80084ce:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80084d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	f040 811a 	bne.w	8008710 <Game_Draw+0x31c>
 80084dc:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 80084e0:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80084e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	f040 8125 	bne.w	8008738 <Game_Draw+0x344>
 80084ee:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 80084f2:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80084f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	f040 8130 	bne.w	8008760 <Game_Draw+0x36c>
 8008500:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 8008504:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800850c:	2a00      	cmp	r2, #0
 800850e:	f040 813b 	bne.w	8008788 <Game_Draw+0x394>
 8008512:	4ca3      	ldr	r4, [pc, #652]	; (80087a0 <Game_Draw+0x3ac>)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 8008514:	f64f 78e0 	movw	r8, #65504	; 0xffe0
 8008518:	f104 0650 	add.w	r6, r4, #80	; 0x50

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	b17b      	cbz	r3, 8008540 <Game_Draw+0x14c>
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 8008520:	7922      	ldrb	r2, [r4, #4]
 8008522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008526:	b122      	cbz	r2, 8008532 <Game_Draw+0x13e>
 8008528:	2a01      	cmp	r2, #1
 800852a:	bf0c      	ite	eq
 800852c:	4643      	moveq	r3, r8
 800852e:	f44f 63fc 	movne.w	r3, #2016	; 0x7e0
            Lcd_Draw_Box(items[i].x, items[i].y, 10, 10, item_color);
 8008532:	220a      	movs	r2, #10
 8008534:	e914 0003 	ldmdb	r4, {r0, r1}
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	4613      	mov	r3, r2
 800853c:	f7fc faf4 	bl	8004b28 <Lcd_Draw_Box>
 8008540:	3410      	adds	r4, #16
    }
}

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8008542:	42b4      	cmp	r4, r6
 8008544:	d1ea      	bne.n	800851c <Game_Draw+0x128>
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
}

void Draw_HUD(void)
{
    Lcd_Printf(200, 220, WHITE, BLACK, 1, 1, "B:%d U:%d S:%d", bomb_item, up_item, speed_item);
 8008546:	f640 5330 	movw	r3, #3376	; 0xd30
 800854a:	2401      	movs	r4, #1
 800854c:	f505 7096 	add.w	r0, r5, #300	; 0x12c
 8008550:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008554:	c807      	ldmia	r0, {r0, r1, r2}
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	9003      	str	r0, [sp, #12]
 800855a:	9104      	str	r1, [sp, #16]
 800855c:	9205      	str	r2, [sp, #20]
 800855e:	9400      	str	r4, [sp, #0]
 8008560:	9401      	str	r4, [sp, #4]
 8008562:	20c8      	movs	r0, #200	; 0xc8
 8008564:	21dc      	movs	r1, #220	; 0xdc
 8008566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800856a:	2300      	movs	r3, #0
 800856c:	f7fb f8dc 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(0, 220, WHITE, BLACK, 1, 1, "LIFE:%d", player_life);
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	f640 5340 	movw	r3, #3392	; 0xd40
 8008576:	2000      	movs	r0, #0
 8008578:	f6c0 0301 	movt	r3, #2049	; 0x801
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	9302      	str	r3, [sp, #8]
 8008580:	9400      	str	r4, [sp, #0]
 8008582:	9401      	str	r4, [sp, #4]
 8008584:	4603      	mov	r3, r0
 8008586:	21dc      	movs	r1, #220	; 0xdc
 8008588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800858c:	f7fb f8cc 	bl	8003728 <Lcd_Printf>
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
    Bullet_Draw();
    Enemy_Draw();
    Item_Draw();
    Draw_HUD();
}
 8008590:	b006      	add	sp, #24
 8008592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2204      	movs	r2, #4
 800859e:	2308      	movs	r3, #8
 80085a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80085a4:	f7fc fac0 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80085a8:	696a      	ldr	r2, [r5, #20]
 80085aa:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80085ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	f43f af40 	beq.w	8008438 <Game_Draw+0x44>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80085b8:	68d8      	ldr	r0, [r3, #12]
 80085ba:	6919      	ldr	r1, [r3, #16]
 80085bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	2204      	movs	r2, #4
 80085c4:	2308      	movs	r3, #8
 80085c6:	f7fc faaf 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80085ca:	6a2a      	ldr	r2, [r5, #32]
 80085cc:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80085d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	f43f af37 	beq.w	8008448 <Game_Draw+0x54>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80085da:	6998      	ldr	r0, [r3, #24]
 80085dc:	69d9      	ldr	r1, [r3, #28]
 80085de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2204      	movs	r2, #4
 80085e6:	2308      	movs	r3, #8
 80085e8:	f7fc fa9e 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80085ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80085ee:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80085f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	f43f af2e 	beq.w	8008458 <Game_Draw+0x64>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80085fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008600:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	2204      	movs	r2, #4
 8008608:	2308      	movs	r3, #8
 800860a:	f7fc fa8d 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 800860e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008610:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008618:	2a00      	cmp	r2, #0
 800861a:	f43f af25 	beq.w	8008468 <Game_Draw+0x74>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 800861e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008622:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	2204      	movs	r2, #4
 800862a:	2308      	movs	r3, #8
 800862c:	f7fc fa7c 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008630:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8008632:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008636:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800863a:	2a00      	cmp	r2, #0
 800863c:	f43f af1c 	beq.w	8008478 <Game_Draw+0x84>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008640:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008642:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008644:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	2204      	movs	r2, #4
 800864c:	2308      	movs	r3, #8
 800864e:	f7fc fa6b 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008652:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008654:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008658:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800865c:	2a00      	cmp	r2, #0
 800865e:	f43f af13 	beq.w	8008488 <Game_Draw+0x94>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008662:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008664:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008666:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2204      	movs	r2, #4
 800866e:	2308      	movs	r3, #8
 8008670:	f7fc fa5a 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008674:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8008676:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800867a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800867e:	2a00      	cmp	r2, #0
 8008680:	f43f af0a 	beq.w	8008498 <Game_Draw+0xa4>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008684:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008686:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008688:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	2204      	movs	r2, #4
 8008690:	2308      	movs	r3, #8
 8008692:	f7fc fa49 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008696:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8008698:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800869c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086a0:	2a00      	cmp	r2, #0
 80086a2:	f43f af01 	beq.w	80084a8 <Game_Draw+0xb4>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80086a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80086a8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80086aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2204      	movs	r2, #4
 80086b2:	2308      	movs	r3, #8
 80086b4:	f7fc fa38 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80086b8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80086ba:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80086be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	f43f aef8 	beq.w	80084b8 <Game_Draw+0xc4>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 80086c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80086ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80086cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2204      	movs	r2, #4
 80086d4:	2308      	movs	r3, #8
 80086d6:	f7fc fa27 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80086da:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
 80086de:	f240 53a4 	movw	r3, #1444	; 0x5a4
 80086e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	f43f aeef 	beq.w	80084ca <Game_Draw+0xd6>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 80086ec:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80086ee:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80086f0:	2210      	movs	r2, #16
 80086f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	f7fc fa15 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80086fe:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8008702:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008706:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800870a:	2a00      	cmp	r2, #0
 800870c:	f43f aee6 	beq.w	80084dc <Game_Draw+0xe8>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008710:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 8008714:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008718:	2210      	movs	r2, #16
 800871a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	f7fc fa01 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008726:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 800872a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800872e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008732:	2a00      	cmp	r2, #0
 8008734:	f43f aedb 	beq.w	80084ee <Game_Draw+0xfa>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008738:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800873c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8008740:	2210      	movs	r2, #16
 8008742:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	f7fc f9ed 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 800874e:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
 8008752:	f240 53a4 	movw	r3, #1444	; 0x5a4
 8008756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800875a:	2a00      	cmp	r2, #0
 800875c:	f43f aed0 	beq.w	8008500 <Game_Draw+0x10c>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008760:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8008764:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8008768:	2210      	movs	r2, #16
 800876a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4613      	mov	r3, r2
 8008772:	f7fc f9d9 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008776:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 800877a:	f240 53a4 	movw	r3, #1444	; 0x5a4
 800877e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008782:	2a00      	cmp	r2, #0
 8008784:	f43f aec5 	beq.w	8008512 <Game_Draw+0x11e>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008788:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800878c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8008790:	2210      	movs	r2, #16
 8008792:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	f7fc f9c5 	bl	8004b28 <Lcd_Draw_Box>
 800879e:	e6b8      	b.n	8008512 <Game_Draw+0x11e>
 80087a0:	20000688 	andcs	r0, r0, r8, lsl #13

080087a4 <Start_Screen>:
    Item_Draw();
    Draw_HUD();
}

void Start_Screen(void)
{
 80087a4:	b500      	push	{lr}
 80087a6:	b085      	sub	sp, #20
    Lcd_Clr_Screen();
 80087a8:	f7fc f9ba 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Printf(60, 100, WHITE, BLACK, 2, 2, "STREET FROG EX");
 80087ac:	f640 5348 	movw	r3, #3400	; 0xd48
 80087b0:	2202      	movs	r2, #2
 80087b2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80087b6:	9302      	str	r3, [sp, #8]
 80087b8:	9200      	str	r2, [sp, #0]
 80087ba:	9201      	str	r2, [sp, #4]
 80087bc:	203c      	movs	r0, #60	; 0x3c
 80087be:	2164      	movs	r1, #100	; 0x64
 80087c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087c4:	2300      	movs	r3, #0
 80087c6:	f7fa ffaf 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(80, 160, GREEN, BLACK, 1, 1, "Press any key to start");
 80087ca:	f640 5358 	movw	r3, #3416	; 0xd58
 80087ce:	2201      	movs	r2, #1
 80087d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80087d4:	9302      	str	r3, [sp, #8]
 80087d6:	9200      	str	r2, [sp, #0]
 80087d8:	9201      	str	r2, [sp, #4]
 80087da:	2050      	movs	r0, #80	; 0x50
 80087dc:	21a0      	movs	r1, #160	; 0xa0
 80087de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80087e2:	2300      	movs	r3, #0
 80087e4:	f7fa ffa0 	bl	8003728 <Lcd_Printf>
}
 80087e8:	b005      	add	sp, #20
 80087ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80087ee:	bf00      	nop

080087f0 <Game_Over_Screen>:

void Game_Over_Screen(void)
{
 80087f0:	b500      	push	{lr}
 80087f2:	b085      	sub	sp, #20
    Lcd_Clr_Screen();
 80087f4:	f7fc f994 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Printf(80, 100, RED, BLACK, 2, 2, "GAME OVER");
 80087f8:	f640 5370 	movw	r3, #3440	; 0xd70
 80087fc:	2202      	movs	r2, #2
 80087fe:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	9200      	str	r2, [sp, #0]
 8008806:	9201      	str	r2, [sp, #4]
 8008808:	2050      	movs	r0, #80	; 0x50
 800880a:	2164      	movs	r1, #100	; 0x64
 800880c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8008810:	2300      	movs	r3, #0
 8008812:	f7fa ff89 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(60, 160, BLUE, BLACK, 1, 1, "Press any key to retry");
 8008816:	f640 537c 	movw	r3, #3452	; 0xd7c
 800881a:	2201      	movs	r2, #1
 800881c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	9200      	str	r2, [sp, #0]
 8008824:	9201      	str	r2, [sp, #4]
 8008826:	203c      	movs	r0, #60	; 0x3c
 8008828:	21a0      	movs	r1, #160	; 0xa0
 800882a:	221f      	movs	r2, #31
 800882c:	2300      	movs	r3, #0
 800882e:	f7fa ff7b 	bl	8003728 <Lcd_Printf>
}
 8008832:	b005      	add	sp, #20
 8008834:	f85d fb04 	ldr.w	pc, [sp], #4

08008838 <Main>:

void Main(void)
{
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	b08d      	sub	sp, #52	; 0x34
    System_Init();
 800883e:	f7fe fafb 	bl	8006e38 <System_Init>
    Uart_Printf("Street Frog EX Shooter Start!\n");
 8008842:	f640 5094 	movw	r0, #3476	; 0xd94
 8008846:	f6c0 0001 	movt	r0, #2049	; 0x801
 800884a:	f000 fe45 	bl	80094d8 <Uart1_Printf>

    Lcd_Init(3);
 800884e:	2003      	movs	r0, #3
 8008850:	f7fc f9c4 	bl	8004bdc <Lcd_Init>
    Jog_Poll_Init();
 8008854:	f7fb f894 	bl	8003980 <Jog_Poll_Init>
    Jog_ISR_Enable(1);
 8008858:	2001      	movs	r0, #1
 800885a:	f7fb f959 	bl	8003b10 <Jog_ISR_Enable>
    Uart1_RX_Interrupt_Enable(1);
 800885e:	2001      	movs	r0, #1
 8008860:	f000 ff2e 	bl	80096c0 <Uart1_RX_Interrupt_Enable>
 8008864:	f640 5158 	movw	r1, #3416	; 0xd58
 8008868:	f640 5230 	movw	r2, #3376	; 0xd30
 800886c:	f640 5340 	movw	r3, #3392	; 0xd40
    SysTick_Run(1);
 8008870:	2001      	movs	r0, #1
 8008872:	9109      	str	r1, [sp, #36]	; 0x24
 8008874:	9207      	str	r2, [sp, #28]
 8008876:	f640 5170 	movw	r1, #3440	; 0xd70
 800887a:	f640 527c 	movw	r2, #3452	; 0xd7c
 800887e:	9308      	str	r3, [sp, #32]
 8008880:	910a      	str	r1, [sp, #40]	; 0x28
 8008882:	920b      	str	r2, [sp, #44]	; 0x2c
 8008884:	f000 fc88 	bl	8009198 <SysTick_Run>
 8008888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888a:	9807      	ldr	r0, [sp, #28]
 800888c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008890:	9908      	ldr	r1, [sp, #32]
 8008892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008894:	f240 5aa4 	movw	sl, #1444	; 0x5a4
 8008898:	9309      	str	r3, [sp, #36]	; 0x24
 800889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889c:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80088a0:	f240 69f8 	movw	r9, #1784	; 0x6f8
 80088a4:	f640 5b48 	movw	fp, #3400	; 0xd48
 80088a8:	f240 0704 	movw	r7, #4
 80088ac:	f6c0 0001 	movt	r0, #2049	; 0x801
 80088b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 80088b4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80088b8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80088bc:	f89a 4138 	ldrb.w	r4, [sl, #312]	; 0x138
 80088c0:	f2c2 0900 	movt	r9, #8192	; 0x2000

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 80088c4:	4655      	mov	r5, sl
 80088c6:	f50a 769a 	add.w	r6, sl, #308	; 0x134
 80088ca:	f6c0 0b01 	movt	fp, #2049	; 0x801
 80088ce:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80088d2:	9007      	str	r0, [sp, #28]
 80088d4:	9108      	str	r1, [sp, #32]
 80088d6:	920a      	str	r2, [sp, #40]	; 0x28
 80088d8:	930b      	str	r3, [sp, #44]	; 0x2c
    Uart1_RX_Interrupt_Enable(1);
    SysTick_Run(1);

    while (1)
    {
        switch (game_state)
 80088da:	2c01      	cmp	r4, #1
 80088dc:	d04e      	beq.n	800897c <Main+0x144>
 80088de:	d327      	bcc.n	8008930 <Main+0xf8>
 80088e0:	2c02      	cmp	r4, #2
 80088e2:	d1fa      	bne.n	80088da <Main+0xa2>
    Lcd_Printf(80, 160, GREEN, BLACK, 1, 1, "Press any key to start");
}

void Game_Over_Screen(void)
{
    Lcd_Clr_Screen();
 80088e4:	f7fc f91c 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Printf(80, 100, RED, BLACK, 2, 2, "GAME OVER");
 80088e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ea:	9400      	str	r4, [sp, #0]
 80088ec:	9401      	str	r4, [sp, #4]
 80088ee:	9202      	str	r2, [sp, #8]
 80088f0:	2050      	movs	r0, #80	; 0x50
 80088f2:	2164      	movs	r1, #100	; 0x64
 80088f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80088f8:	2300      	movs	r3, #0
 80088fa:	f7fa ff15 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(60, 160, BLUE, BLACK, 1, 1, "Press any key to retry");
 80088fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008900:	2301      	movs	r3, #1
 8008902:	9002      	str	r0, [sp, #8]
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	221f      	movs	r2, #31
 800890a:	2300      	movs	r3, #0
 800890c:	203c      	movs	r0, #60	; 0x3c
 800890e:	21a0      	movs	r1, #160	; 0xa0
 8008910:	f7fa ff0a 	bl	8003728 <Lcd_Printf>
            Game_Draw();
            break;

        case STATE_GAMEOVER:
            Game_Over_Screen();
            if (Jog_key_in)
 8008914:	f8d9 2000 	ldr.w	r2, [r9]
            {
                Jog_key_in = 0;
 8008918:	2300      	movs	r3, #0
                game_state = STATE_START;
 800891a:	461c      	mov	r4, r3
            Game_Draw();
            break;

        case STATE_GAMEOVER:
            Game_Over_Screen();
            if (Jog_key_in)
 800891c:	b352      	cbz	r2, 8008974 <Main+0x13c>
            {
                Jog_key_in = 0;
 800891e:	f240 61f8 	movw	r1, #1784	; 0x6f8
 8008922:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008926:	2b01      	cmp	r3, #1
 8008928:	600b      	str	r3, [r1, #0]
                game_state = STATE_START;
 800892a:	f88a 3138 	strb.w	r3, [sl, #312]	; 0x138
    Uart1_RX_Interrupt_Enable(1);
    SysTick_Run(1);

    while (1)
    {
        switch (game_state)
 800892e:	d2d7      	bcs.n	80088e0 <Main+0xa8>
    Draw_HUD();
}

void Start_Screen(void)
{
    Lcd_Clr_Screen();
 8008930:	f7fc f8f6 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Printf(60, 100, WHITE, BLACK, 2, 2, "STREET FROG EX");
 8008934:	2302      	movs	r3, #2
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	203c      	movs	r0, #60	; 0x3c
 800893c:	2164      	movs	r1, #100	; 0x64
 800893e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008942:	2300      	movs	r3, #0
 8008944:	f8cd b008 	str.w	fp, [sp, #8]
 8008948:	f7fa feee 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(80, 160, GREEN, BLACK, 1, 1, "Press any key to start");
 800894c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800894e:	f04f 0801 	mov.w	r8, #1
 8008952:	9002      	str	r0, [sp, #8]
 8008954:	2300      	movs	r3, #0
 8008956:	f8cd 8000 	str.w	r8, [sp]
 800895a:	f8cd 8004 	str.w	r8, [sp, #4]
 800895e:	2050      	movs	r0, #80	; 0x50
 8008960:	21a0      	movs	r1, #160	; 0xa0
 8008962:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8008966:	f7fa fedf 	bl	8003728 <Lcd_Printf>
    {
        switch (game_state)
        {
        case STATE_START:
            Start_Screen();
            if (Jog_key_in)
 800896a:	f8d9 3000 	ldr.w	r3, [r9]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 8095 	bne.w	8008a9e <Main+0x266>
 8008974:	f89a 4138 	ldrb.w	r4, [sl, #312]	; 0x138
    Uart1_RX_Interrupt_Enable(1);
    SysTick_Run(1);

    while (1)
    {
        switch (game_state)
 8008978:	2c01      	cmp	r4, #1
 800897a:	d1b0      	bne.n	80088de <Main+0xa6>
                TIM4_Repeat_Interrupt_Enable(1, TIMER_PERIOD*10);
            }
            break;

        case STATE_PLAY:
            Game_Update();
 800897c:	f7ff f988 	bl	8007c90 <Game_Update>
    }
}

void Game_Draw(void)
{
    Lcd_Clr_Screen();
 8008980:	f7fc f8ce 	bl	8004b20 <Lcd_Clr_Screen>
    Lcd_Draw_Box(player_x, player_y, PLAYER_SIZE_X, PLAYER_SIZE_Y, color[0]);
 8008984:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008988:	2210      	movs	r2, #16
 800898a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4613      	mov	r3, r2
 8008992:	f7fc f8c9 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008996:	f8da 3008 	ldr.w	r3, [sl, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f040 8188 	bne.w	8008cb0 <Main+0x478>
 80089a0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 80cb 	bne.w	8008b40 <Main+0x308>
 80089aa:	f8da 3020 	ldr.w	r3, [sl, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f040 80d4 	bne.w	8008b5c <Main+0x324>
 80089b4:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80dd 	bne.w	8008b78 <Main+0x340>
 80089be:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 80e6 	bne.w	8008b94 <Main+0x35c>
 80089c8:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 80ef 	bne.w	8008bb0 <Main+0x378>
 80089d2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 80f8 	bne.w	8008bcc <Main+0x394>
 80089dc:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f040 8101 	bne.w	8008be8 <Main+0x3b0>
 80089e6:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 810a 	bne.w	8008c04 <Main+0x3cc>
 80089f0:	f8da 3074 	ldr.w	r3, [sl, #116]	; 0x74
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8113 	bne.w	8008c20 <Main+0x3e8>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 80089fa:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 811c 	bne.w	8008c3c <Main+0x404>
 8008a04:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 8125 	bne.w	8008c58 <Main+0x420>
 8008a0e:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 8130 	bne.w	8008c78 <Main+0x440>
 8008a18:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 813b 	bne.w	8008c98 <Main+0x460>
 8008a22:	f8da 30d0 	ldr.w	r3, [sl, #208]	; 0xd0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d17e      	bne.n	8008b28 <Main+0x2f0>
 8008a2a:	4ca6      	ldr	r4, [pc, #664]	; (8008cc4 <Main+0x48c>)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 8008a2c:	f64f 78e0 	movw	r8, #65504	; 0xffe0

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        if (items[i].active)
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	b17b      	cbz	r3, 8008a54 <Main+0x21c>
        {
            unsigned short item_color = (items[i].type == ITEM_BOMB) ? RED : (items[i].type == ITEM_UP) ? YELLOW : GREEN;
 8008a34:	7922      	ldrb	r2, [r4, #4]
 8008a36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008a3a:	b122      	cbz	r2, 8008a46 <Main+0x20e>
 8008a3c:	2a01      	cmp	r2, #1
 8008a3e:	bf0c      	ite	eq
 8008a40:	4643      	moveq	r3, r8
 8008a42:	f44f 63fc 	movne.w	r3, #2016	; 0x7e0
            Lcd_Draw_Box(items[i].x, items[i].y, 10, 10, item_color);
 8008a46:	220a      	movs	r2, #10
 8008a48:	e914 0003 	ldmdb	r4, {r0, r1}
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	f7fc f86a 	bl	8004b28 <Lcd_Draw_Box>
 8008a54:	3410      	adds	r4, #16
    }
}

void Item_Draw(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
 8008a56:	42b4      	cmp	r4, r6
 8008a58:	d1ea      	bne.n	8008a30 <Main+0x1f8>
    return (x1 < x2 + w2) && (x1 + w1 > x2) && (y1 < y2 + h2) && (y1 + h1 > y2);
}

void Draw_HUD(void)
{
    Lcd_Printf(200, 220, WHITE, BLACK, 1, 1, "B:%d U:%d S:%d", bomb_item, up_item, speed_item);
 8008a5a:	9807      	ldr	r0, [sp, #28]
 8008a5c:	2401      	movs	r4, #1
 8008a5e:	f50a 7196 	add.w	r1, sl, #300	; 0x12c
 8008a62:	c90e      	ldmia	r1, {r1, r2, r3}
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	9103      	str	r1, [sp, #12]
 8008a68:	9204      	str	r2, [sp, #16]
 8008a6a:	9305      	str	r3, [sp, #20]
 8008a6c:	9400      	str	r4, [sp, #0]
 8008a6e:	9401      	str	r4, [sp, #4]
 8008a70:	20c8      	movs	r0, #200	; 0xc8
 8008a72:	21dc      	movs	r1, #220	; 0xdc
 8008a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f7fa fe55 	bl	8003728 <Lcd_Printf>
    Lcd_Printf(0, 220, WHITE, BLACK, 1, 1, "LIFE:%d", player_life);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	9908      	ldr	r1, [sp, #32]
 8008a82:	2000      	movs	r0, #0
 8008a84:	9400      	str	r4, [sp, #0]
 8008a86:	9401      	str	r4, [sp, #4]
 8008a88:	9102      	str	r1, [sp, #8]
 8008a8a:	9303      	str	r3, [sp, #12]
 8008a8c:	21dc      	movs	r1, #220	; 0xdc
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a94:	f7fa fe48 	bl	8003728 <Lcd_Printf>
 8008a98:	f89a 4138 	ldrb.w	r4, [sl, #312]	; 0x138
 8008a9c:	e71d      	b.n	80088da <Main+0xa2>
    }
}

void Game_Init(void)
{
    player_life = 3;
 8008a9e:	2303      	movs	r3, #3
        {
        case STATE_START:
            Start_Screen();
            if (Jog_key_in)
            {
                Jog_key_in = 0;
 8008aa0:	f240 61f8 	movw	r1, #1784	; 0x6f8
 8008aa4:	2400      	movs	r4, #0
{
    player_life = 3;
    bomb_item = 0;
    up_item = 0;
    speed_item = 0;
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
 8008aa6:	2298      	movs	r2, #152	; 0x98
        {
        case STATE_START:
            Start_Screen();
            if (Jog_key_in)
            {
                Jog_key_in = 0;
 8008aa8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    }
}

void Game_Init(void)
{
    player_life = 3;
 8008aac:	60bb      	str	r3, [r7, #8]
    bomb_item = 0;
    up_item = 0;
    speed_item = 0;
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
    player_y = LCDH - PLAYER_SIZE_Y - 10;
 8008aae:	23d6      	movs	r3, #214	; 0xd6
        {
        case STATE_START:
            Start_Screen();
            if (Jog_key_in)
            {
                Jog_key_in = 0;
 8008ab0:	600c      	str	r4, [r1, #0]
}

void Game_Init(void)
{
    player_life = 3;
    bomb_item = 0;
 8008ab2:	f8ca 412c 	str.w	r4, [sl, #300]	; 0x12c
    up_item = 0;
 8008ab6:	f8ca 4130 	str.w	r4, [sl, #304]	; 0x130
    speed_item = 0;
 8008aba:	f8ca 4134 	str.w	r4, [sl, #308]	; 0x134
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
    player_y = LCDH - PLAYER_SIZE_Y - 10;
 8008abe:	e887 000c 	stmia.w	r7, {r2, r3}
        case STATE_START:
            Start_Screen();
            if (Jog_key_in)
            {
                Jog_key_in = 0;
                game_state = STATE_PLAY;
 8008ac2:	f88a 8138 	strb.w	r8, [sl, #312]	; 0x138
    bomb_item = 0;
    up_item = 0;
    speed_item = 0;
    player_x = LCDW/2 - PLAYER_SIZE_X/2;
    player_y = LCDH - PLAYER_SIZE_Y - 10;
    Lcd_Clr_Screen();
 8008ac6:	f7fc f82b 	bl	8004b20 <Lcd_Clr_Screen>
            if (Jog_key_in)
            {
                Jog_key_in = 0;
                game_state = STATE_PLAY;
                Game_Init();
                TIM4_Repeat_Interrupt_Enable(1, TIMER_PERIOD*10);
 8008aca:	4640      	mov	r0, r8
 8008acc:	2164      	movs	r1, #100	; 0x64

void Bullet_Init(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        bullets[i].active = 0;
 8008ace:	f8ca 4008 	str.w	r4, [sl, #8]
 8008ad2:	f8ca 4014 	str.w	r4, [sl, #20]
 8008ad6:	f8ca 4020 	str.w	r4, [sl, #32]
 8008ada:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
 8008ade:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 8008ae2:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8008ae6:	f8ca 4050 	str.w	r4, [sl, #80]	; 0x50
 8008aea:	f8ca 405c 	str.w	r4, [sl, #92]	; 0x5c
 8008aee:	f8ca 4068 	str.w	r4, [sl, #104]	; 0x68
 8008af2:	f8ca 4074 	str.w	r4, [sl, #116]	; 0x74

void Enemy_Init(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        enemies[i].active = 0;
 8008af6:	f8ca 4080 	str.w	r4, [sl, #128]	; 0x80
 8008afa:	f8ca 4094 	str.w	r4, [sl, #148]	; 0x94
 8008afe:	f8ca 40a8 	str.w	r4, [sl, #168]	; 0xa8
 8008b02:	f8ca 40bc 	str.w	r4, [sl, #188]	; 0xbc
 8008b06:	f8ca 40d0 	str.w	r4, [sl, #208]	; 0xd0

void Item_Init(void)
{
    for (int i = 0; i < ITEM_MAX; i++)
    {
        items[i].active = 0;
 8008b0a:	f8ca 40e4 	str.w	r4, [sl, #228]	; 0xe4
 8008b0e:	f8ca 40f4 	str.w	r4, [sl, #244]	; 0xf4
 8008b12:	f8ca 4104 	str.w	r4, [sl, #260]	; 0x104
 8008b16:	f8ca 4114 	str.w	r4, [sl, #276]	; 0x114
 8008b1a:	f8ca 4124 	str.w	r4, [sl, #292]	; 0x124
            if (Jog_key_in)
            {
                Jog_key_in = 0;
                game_state = STATE_PLAY;
                Game_Init();
                TIM4_Repeat_Interrupt_Enable(1, TIMER_PERIOD*10);
 8008b1e:	f000 fbe1 	bl	80092e4 <TIM4_Repeat_Interrupt_Enable>
 8008b22:	f89a 4138 	ldrb.w	r4, [sl, #312]	; 0x138
 8008b26:	e6d8      	b.n	80088da <Main+0xa2>
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008b28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	f8d5 00c8 	ldr.w	r0, [r5, #200]	; 0xc8
 8008b32:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	f7fb fff5 	bl	8004b28 <Lcd_Draw_Box>
 8008b3e:	e774      	b.n	8008a2a <Main+0x1f2>
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008b40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b44:	68e8      	ldr	r0, [r5, #12]
 8008b46:	6929      	ldr	r1, [r5, #16]
 8008b48:	2204      	movs	r2, #4
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	f7fb ffeb 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008b52:	f8da 3020 	ldr.w	r3, [sl, #32]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f43f af2c 	beq.w	80089b4 <Main+0x17c>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008b5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b60:	69a8      	ldr	r0, [r5, #24]
 8008b62:	69e9      	ldr	r1, [r5, #28]
 8008b64:	2204      	movs	r2, #4
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2308      	movs	r3, #8
 8008b6a:	f7fb ffdd 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008b6e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f43f af23 	beq.w	80089be <Main+0x186>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008b78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b7c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008b7e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008b80:	2204      	movs	r2, #4
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2308      	movs	r3, #8
 8008b86:	f7fb ffcf 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008b8a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f43f af1a 	beq.w	80089c8 <Main+0x190>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008b94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b98:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8008b9a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f7fb ffc1 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008ba6:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f43f af11 	beq.w	80089d2 <Main+0x19a>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008bb0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008bb4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8008bb6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8008bb8:	2204      	movs	r2, #4
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f7fb ffb3 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008bc2:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f43f af08 	beq.w	80089dc <Main+0x1a4>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008bcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008bd0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8008bd2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f7fb ffa5 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008bde:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f43f aeff 	beq.w	80089e6 <Main+0x1ae>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008be8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008bec:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8008bee:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	f7fb ff97 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008bfa:	f8da 3068 	ldr.w	r3, [sl, #104]	; 0x68
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f43f aef6 	beq.w	80089f0 <Main+0x1b8>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008c04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008c08:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8008c0a:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	2308      	movs	r3, #8
 8008c12:	f7fb ff89 	bl	8004b28 <Lcd_Draw_Box>

void Bullet_Draw(void)
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
 8008c16:	f8da 3074 	ldr.w	r3, [sl, #116]	; 0x74
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f43f aeed 	beq.w	80089fa <Main+0x1c2>
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008c20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008c24:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8008c26:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8008c28:	2204      	movs	r2, #4
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	2308      	movs	r3, #8
 8008c2e:	f7fb ff7b 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008c32:	f8da 3080 	ldr.w	r3, [sl, #128]	; 0x80
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f43f aee4 	beq.w	8008a04 <Main+0x1cc>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008c3c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008c40:	2210      	movs	r2, #16
 8008c42:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8008c44:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	f7fb ff6d 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008c4e:	f8da 3094 	ldr.w	r3, [sl, #148]	; 0x94
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f43f aedb 	beq.w	8008a0e <Main+0x1d6>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008c58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008c5c:	2210      	movs	r2, #16
 8008c5e:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8008c62:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	f7fb ff5d 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008c6e:	f8da 30a8 	ldr.w	r3, [sl, #168]	; 0xa8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f43f aed0 	beq.w	8008a18 <Main+0x1e0>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008c78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
 8008c82:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	f7fb ff4d 	bl	8004b28 <Lcd_Draw_Box>

void Enemy_Draw(void)
{
    for (int i = 0; i < ENEMY_MAX; i++)
    {
        if (enemies[i].active)
 8008c8e:	f8da 30bc 	ldr.w	r3, [sl, #188]	; 0xbc
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f43f aec5 	beq.w	8008a22 <Main+0x1ea>
        {
            Lcd_Draw_Box(enemies[i].x, enemies[i].y, 16, 16, color[1]);
 8008c98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8008ca2:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	f7fb ff3d 	bl	8004b28 <Lcd_Draw_Box>
 8008cae:	e6b8      	b.n	8008a22 <Main+0x1ea>
{
    for (int i = 0; i < BULLET_MAX; i++)
    {
        if (bullets[i].active)
        {
            Lcd_Draw_Box(bullets[i].x, bullets[i].y, 4, 8, color[2]);
 8008cb0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008cb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cb8:	2204      	movs	r2, #4
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	f7fb ff33 	bl	8004b28 <Lcd_Draw_Box>
 8008cc2:	e66d      	b.n	80089a0 <Main+0x168>
 8008cc4:	20000688 	andcs	r0, r0, r8, lsl #13

08008cc8 <_sbrk>:
#include "device_driver.h"

char * _sbrk(int inc)
{
 8008cc8:	b410      	push	{r4}
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8008cca:	f240 63f0 	movw	r3, #1776	; 0x6f0
 8008cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008cd2:	6819      	ldr	r1, [r3, #0]
#include "device_driver.h"

char * _sbrk(int inc)
{
 8008cd4:	4602      	mov	r2, r0
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8008cd6:	b181      	cbz	r1, 8008cfa <_sbrk+0x32>
 8008cd8:	4c0b      	ldr	r4, [pc, #44]	; (8008d08 <_sbrk+0x40>)
 8008cda:	4608      	mov	r0, r1
 8008cdc:	f024 0107 	bic.w	r1, r4, #7

	prevHeap = heap;
	nextHeap = (char *)((((unsigned int)heap + inc) + 0x7) & ~0x7);
 8008ce0:	3207      	adds	r2, #7
 8008ce2:	4402      	add	r2, r0
 8008ce4:	f022 0207 	bic.w	r2, r2, #7

	if((unsigned int)nextHeap >= HEAP_LIMIT) return (char *)0;
 8008ce8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008cec:	428a      	cmp	r2, r1

	heap = nextHeap;
 8008cee:	bf34      	ite	cc
 8008cf0:	601a      	strcc	r2, [r3, #0]
	if(heap == (char *)0) heap = (char *)HEAP_BASE;

	prevHeap = heap;
	nextHeap = (char *)((((unsigned int)heap + inc) + 0x7) & ~0x7);

	if((unsigned int)nextHeap >= HEAP_LIMIT) return (char *)0;
 8008cf2:	2000      	movcs	r0, #0

	heap = nextHeap;
	return prevHeap;
}
 8008cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf8:	4770      	bx	lr
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8008cfa:	4903      	ldr	r1, [pc, #12]	; (8008d08 <_sbrk+0x40>)
 8008cfc:	f021 0107 	bic.w	r1, r1, #7
 8008d00:	6019      	str	r1, [r3, #0]
 8008d02:	4608      	mov	r0, r1
 8008d04:	e7ec      	b.n	8008ce0 <_sbrk+0x18>
 8008d06:	bf00      	nop
 8008d08:	20000753 	andcs	r0, r0, r3, asr r7

08008d0c <Stack_Dump>:
}

static char * const Stack_reg[] = {"R0","R1","R2","R3","R12","LR","RA","xPSR"};

static void Stack_Dump(const char * stack, unsigned int * sp)
{
 8008d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4d0b      	ldr	r5, [pc, #44]	; (8008d40 <Stack_Dump+0x34>)
}

static char * const Stack_reg[] = {"R0","R1","R2","R3","R12","LR","RA","xPSR"};

static void Stack_Dump(const char * stack, unsigned int * sp)
{
 8008d12:	b083      	sub	sp, #12
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8008d18:	461c      	mov	r4, r3
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
 8008d1a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8008d1e:	f640 50b4 	movw	r0, #3508	; 0xdb4
 8008d22:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8008d26:	9200      	str	r2, [sp, #0]
 8008d28:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4631      	mov	r1, r6

static void Stack_Dump(const char * stack, unsigned int * sp)
{
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8008d30:	3401      	adds	r4, #1
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
 8008d32:	f000 fbd1 	bl	80094d8 <Uart1_Printf>

static void Stack_Dump(const char * stack, unsigned int * sp)
{
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8008d36:	2c08      	cmp	r4, #8
 8008d38:	4623      	mov	r3, r4
 8008d3a:	d1ee      	bne.n	8008d1a <Stack_Dump+0xe>
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
	}
}
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d40:	08010a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp}

08008d44 <Invalid_ISR>:
/* Includes ------------------------------------------------------------------*/

#include "device_driver.h"

void Invalid_ISR(void)
{
 8008d44:	b508      	push	{r3, lr}
  Uart1_Printf("Invalid_Exception: %d!\n", Macro_Extract_Area(SCB->ICSR, 0x1ff, 0));
 8008d46:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 8008d4a:	f2ce 0400 	movt	r4, #57344	; 0xe000
 8008d4e:	6861      	ldr	r1, [r4, #4]
 8008d50:	f640 50c8 	movw	r0, #3528	; 0xdc8
 8008d54:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008d58:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008d5c:	f000 fbbc 	bl	80094d8 <Uart1_Printf>
  Uart1_Printf("Invalid_ISR: %d!\n", Macro_Extract_Area(SCB->ICSR, 0x1ff, 0) - 16);
 8008d60:	6861      	ldr	r1, [r4, #4]
 8008d62:	f640 50e0 	movw	r0, #3552	; 0xde0
 8008d66:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008d6a:	3910      	subs	r1, #16
 8008d6c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008d70:	f000 fbb2 	bl	80094d8 <Uart1_Printf>
 8008d74:	e7fe      	b.n	8008d74 <Invalid_ISR+0x30>
 8008d76:	bf00      	nop

08008d78 <NMI_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
	Uart1_Printf("NMI!\n");
 8008d78:	f640 50f4 	movw	r0, #3572	; 0xdf4
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
 8008d7c:	b508      	push	{r3, lr}
	Uart1_Printf("NMI!\n");
 8008d7e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008d82:	f000 fba9 	bl	80094d8 <Uart1_Printf>
 8008d86:	e7fe      	b.n	8008d86 <NMI_Handler+0xe>

08008d88 <HardFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008d88:	4604      	mov	r4, r0
	Uart1_Printf("Hard Fault!\n");
 8008d8a:	f640 50fc 	movw	r0, #3580	; 0xdfc
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008d8e:	b508      	push	{r3, lr}
	Uart1_Printf("Hard Fault!\n");
 8008d90:	f6c0 0001 	movt	r0, #2049	; 0x801
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008d94:	4616      	mov	r6, r2
 8008d96:	460d      	mov	r5, r1
	Uart1_Printf("Hard Fault!\n");
 8008d98:	f000 fb9e 	bl	80094d8 <Uart1_Printf>
	}
}

static void Fault_Report(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("LR(EXC_RETURN)=0x%.8X\n", lr);
 8008d9c:	f640 600c 	movw	r0, #3596	; 0xe0c
 8008da0:	4629      	mov	r1, r5
 8008da2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008da6:	f000 fb97 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("MSP=0x%.8X\n", msp);
 8008daa:	f640 6024 	movw	r0, #3620	; 0xe24
 8008dae:	4621      	mov	r1, r4
 8008db0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008db4:	f000 fb90 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("PSP=0x%.8X\n", psp);
 8008db8:	f640 6030 	movw	r0, #3632	; 0xe30
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008dc2:	f000 fb89 	bl	80094d8 <Uart1_Printf>

	switch((lr & (0xF<<28))|(lr & 0xF))
 8008dc6:	230f      	movs	r3, #15
 8008dc8:	f2cf 0300 	movt	r3, #61440	; 0xf000
 8008dcc:	2209      	movs	r2, #9
 8008dce:	402b      	ands	r3, r5
 8008dd0:	f2cf 0200 	movt	r2, #61440	; 0xf000
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d050      	beq.n	8008e7a <HardFault_Handler+0xf2>
 8008dd8:	220d      	movs	r2, #13
 8008dda:	f2cf 0200 	movt	r2, #61440	; 0xf000
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d059      	beq.n	8008e96 <HardFault_Handler+0x10e>
 8008de2:	2201      	movs	r2, #1
 8008de4:	f2cf 0200 	movt	r2, #61440	; 0xf000
 8008de8:	4293      	cmp	r3, r2
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
 8008dea:	bf04      	itt	eq
 8008dec:	f640 603c 	movweq	r0, #3644	; 0xe3c
 8008df0:	f6c0 0001 	movteq	r0, #2049	; 0x801
{
	Uart1_Printf("LR(EXC_RETURN)=0x%.8X\n", lr);
	Uart1_Printf("MSP=0x%.8X\n", msp);
	Uart1_Printf("PSP=0x%.8X\n", psp);

	switch((lr & (0xF<<28))|(lr & 0xF))
 8008df4:	d045      	beq.n	8008e82 <HardFault_Handler+0xfa>
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
		case 0xF0000009: Uart1_Printf("Exception occurs from thread mode with MSP\n"); Stack_Dump("MSP", msp); break;
		case 0xF000000d: Uart1_Printf("Exception occurs from thread mode with PSP\n"); Stack_Dump("PSP", psp); break;
		default: Uart1_Printf("Invalid exception return value => %#.8X\n", lr & 0xf); break;
 8008df6:	f640 60c0 	movw	r0, #3776	; 0xec0
 8008dfa:	f005 010f 	and.w	r1, r5, #15
 8008dfe:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e02:	f000 fb69 	bl	80094d8 <Uart1_Printf>
	}

	Uart1_Printf("SHCSR => %#.8X\n", SCB->SHCSR);
 8008e06:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 8008e0a:	f2ce 0400 	movt	r4, #57344	; 0xe000
 8008e0e:	f640 60ec 	movw	r0, #3820	; 0xeec
 8008e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008e14:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e18:	f000 fb5e 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("CFSR(Fault Reason) => %#.8X\n", SCB->CFSR);
 8008e1c:	f640 60fc 	movw	r0, #3836	; 0xefc
 8008e20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008e22:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e26:	f000 fb57 	bl	80094d8 <Uart1_Printf>
{
	Uart1_Printf("Hard Fault!\n");

	Fault_Report(msp, lr, psp);

	Uart1_Printf("MMFAR Valid => %d\n", Macro_Check_Bit_Set(SCB->CFSR, 7));
 8008e2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008e2c:	f640 701c 	movw	r0, #3868	; 0xf1c
 8008e30:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8008e34:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e38:	f000 fb4e 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("MMFAR => %#.8X\n", SCB->MMFAR);
 8008e3c:	f640 7030 	movw	r0, #3888	; 0xf30
 8008e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e42:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e46:	f000 fb47 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("BFAR Valid => %d\n", Macro_Check_Bit_Set(SCB->CFSR, 15));
 8008e4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008e4c:	f640 7040 	movw	r0, #3904	; 0xf40
 8008e50:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8008e54:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e58:	f000 fb3e 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("BFAR => %#.8X\n", SCB->BFAR);
 8008e5c:	f640 7054 	movw	r0, #3924	; 0xf54
 8008e60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e62:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e66:	f000 fb37 	bl	80094d8 <Uart1_Printf>
	Uart1_Printf("HFSR(Hard Fault Reason) => %#.8X\n", SCB->HFSR);
 8008e6a:	f640 7064 	movw	r0, #3940	; 0xf64
 8008e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008e70:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e74:	f000 fb30 	bl	80094d8 <Uart1_Printf>
 8008e78:	e7fe      	b.n	8008e78 <HardFault_Handler+0xf0>
	Uart1_Printf("PSP=0x%.8X\n", psp);

	switch((lr & (0xF<<28))|(lr & 0xF))
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
		case 0xF0000009: Uart1_Printf("Exception occurs from thread mode with MSP\n"); Stack_Dump("MSP", msp); break;
 8008e7a:	f640 6064 	movw	r0, #3684	; 0xe64
 8008e7e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e82:	f000 fb29 	bl	80094d8 <Uart1_Printf>
 8008e86:	f640 6060 	movw	r0, #3680	; 0xe60
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e90:	f7ff ff3c 	bl	8008d0c <Stack_Dump>
 8008e94:	e7b7      	b.n	8008e06 <HardFault_Handler+0x7e>
		case 0xF000000d: Uart1_Printf("Exception occurs from thread mode with PSP\n"); Stack_Dump("PSP", psp); break;
 8008e96:	f640 6090 	movw	r0, #3728	; 0xe90
 8008e9a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008e9e:	f000 fb1b 	bl	80094d8 <Uart1_Printf>
 8008ea2:	f640 60bc 	movw	r0, #3772	; 0xebc
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008eac:	f7ff ff2e 	bl	8008d0c <Stack_Dump>
 8008eb0:	e7a9      	b.n	8008e06 <HardFault_Handler+0x7e>
 8008eb2:	bf00      	nop

08008eb4 <MemManage_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Memory Management Fault!\n");
 8008eb4:	f640 7088 	movw	r0, #3976	; 0xf88
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008eb8:	b508      	push	{r3, lr}
	Uart1_Printf("Memory Management Fault!\n");
 8008eba:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008ebe:	f000 fb0b 	bl	80094d8 <Uart1_Printf>
 8008ec2:	e7fe      	b.n	8008ec2 <MemManage_Handler+0xe>

08008ec4 <BusFault_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Bus Fault!\n");
 8008ec4:	f640 70a4 	movw	r0, #4004	; 0xfa4
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008ec8:	b508      	push	{r3, lr}
	Uart1_Printf("Bus Fault!\n");
 8008eca:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008ece:	f000 fb03 	bl	80094d8 <Uart1_Printf>
 8008ed2:	e7fe      	b.n	8008ed2 <BusFault_Handler+0xe>

08008ed4 <UsageFault_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Usage Fault!\n");
 8008ed4:	f640 70b0 	movw	r0, #4016	; 0xfb0
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8008ed8:	b508      	push	{r3, lr}
	Uart1_Printf("Usage Fault!\n");
 8008eda:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008ede:	f000 fafb 	bl	80094d8 <Uart1_Printf>
 8008ee2:	e7fe      	b.n	8008ee2 <UsageFault_Handler+0xe>

08008ee4 <SVC_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
	Uart1_Printf("SVC Call\n");
 8008ee4:	f640 70c0 	movw	r0, #4032	; 0xfc0
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
 8008ee8:	b508      	push	{r3, lr}
	Uart1_Printf("SVC Call\n");
 8008eea:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008eee:	f000 faf3 	bl	80094d8 <Uart1_Printf>
 8008ef2:	e7fe      	b.n	8008ef2 <SVC_Handler+0xe>

08008ef4 <DebugMon_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
	Uart1_Printf("DebugMon Call\n");
 8008ef4:	f640 70cc 	movw	r0, #4044	; 0xfcc
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
 8008ef8:	b508      	push	{r3, lr}
	Uart1_Printf("DebugMon Call\n");
 8008efa:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008efe:	f000 faeb 	bl	80094d8 <Uart1_Printf>
 8008f02:	e7fe      	b.n	8008f02 <DebugMon_Handler+0xe>

08008f04 <PendSV_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
	Uart1_Printf("PendSV Call\n");
 8008f04:	f640 70dc 	movw	r0, #4060	; 0xfdc
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
 8008f08:	b508      	push	{r3, lr}
	Uart1_Printf("PendSV Call\n");
 8008f0a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008f0e:	f000 fae3 	bl	80094d8 <Uart1_Printf>
 8008f12:	e7fe      	b.n	8008f12 <PendSV_Handler+0xe>

08008f14 <SysTick_Handler>:
 *******************************************************************************/
volatile int SysTick_Flag = 0;

void SysTick_Handler(void)
{
	SysTick_Flag = 1;
 8008f14:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8008f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop

08008f24 <WWDG_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void WWDG_IRQHandler(void)
{
 8008f24:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f26:	f7ff ff0d 	bl	8008d44 <Invalid_ISR>
 8008f2a:	bf00      	nop

08008f2c <PVD_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PVD_IRQHandler(void)
{
 8008f2c:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f2e:	f7ff ff09 	bl	8008d44 <Invalid_ISR>
 8008f32:	bf00      	nop

08008f34 <TAMPER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8008f34:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f36:	f7ff ff05 	bl	8008d44 <Invalid_ISR>
 8008f3a:	bf00      	nop

08008f3c <RTC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RTC_IRQHandler(void)
{
 8008f3c:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f3e:	f7ff ff01 	bl	8008d44 <Invalid_ISR>
 8008f42:	bf00      	nop

08008f44 <FLASH_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void FLASH_IRQHandler(void)
{
 8008f44:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f46:	f7ff fefd 	bl	8008d44 <Invalid_ISR>
 8008f4a:	bf00      	nop

08008f4c <RCC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_IRQHandler(void)
{
 8008f4c:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f4e:	f7ff fef9 	bl	8008d44 <Invalid_ISR>
 8008f52:	bf00      	nop

08008f54 <EXTI0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8008f54:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f56:	f7ff fef5 	bl	8008d44 <Invalid_ISR>
 8008f5a:	bf00      	nop

08008f5c <EXTI1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8008f5c:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f5e:	f7ff fef1 	bl	8008d44 <Invalid_ISR>
 8008f62:	bf00      	nop

08008f64 <EXTI2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8008f64:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008f66:	f7ff feed 	bl	8008d44 <Invalid_ISR>
 8008f6a:	bf00      	nop

08008f6c <EXTI3_IRQHandler>:
 *******************************************************************************/
 volatile int Jog_key_in = 0;
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
 8008f6c:	b470      	push	{r4, r5, r6}
   // UP
   Jog_key_in = 1;
 8008f6e:	f240 63f4 	movw	r3, #1780	; 0x6f4
   Jog_key = 0;
   EXTI->PR = 0x1<<3;
 8008f72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8008f76:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
   // UP
   Jog_key_in = 1;
 8008f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f7e:	2601      	movs	r6, #1
   Jog_key = 0;
 8008f80:	2500      	movs	r5, #0
   EXTI->PR = 0x1<<3;
 8008f82:	2408      	movs	r4, #8
 8008f84:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8008f88:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8008f8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
   // UP
   Jog_key_in = 1;
 8008f90:	605e      	str	r6, [r3, #4]
   Jog_key = 0;
 8008f92:	609d      	str	r5, [r3, #8]
   EXTI->PR = 0x1<<3;
 8008f94:	614c      	str	r4, [r1, #20]
 8008f96:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
   NVIC_ClearPendingIRQ(EXTI3_IRQn);
 }
 8008f9a:	bc70      	pop	{r4, r5, r6}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <EXTI4_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8008fa0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fa2:	f7ff fecf 	bl	8008d44 <Invalid_ISR>
 8008fa6:	bf00      	nop

08008fa8 <DMA1_Channel1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8008fa8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008faa:	f7ff fecb 	bl	8008d44 <Invalid_ISR>
 8008fae:	bf00      	nop

08008fb0 <DMA1_Channel2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8008fb0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fb2:	f7ff fec7 	bl	8008d44 <Invalid_ISR>
 8008fb6:	bf00      	nop

08008fb8 <DMA1_Channel3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8008fb8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fba:	f7ff fec3 	bl	8008d44 <Invalid_ISR>
 8008fbe:	bf00      	nop

08008fc0 <DMA1_Channel4_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 8008fc0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fc2:	f7ff febf 	bl	8008d44 <Invalid_ISR>
 8008fc6:	bf00      	nop

08008fc8 <DMA1_Channel5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 8008fc8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fca:	f7ff febb 	bl	8008d44 <Invalid_ISR>
 8008fce:	bf00      	nop

08008fd0 <DMA1_Channel6_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 8008fd0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fd2:	f7ff feb7 	bl	8008d44 <Invalid_ISR>
 8008fd6:	bf00      	nop

08008fd8 <DMA1_Channel7_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 8008fd8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fda:	f7ff feb3 	bl	8008d44 <Invalid_ISR>
 8008fde:	bf00      	nop

08008fe0 <ADC1_2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void ADC1_2_IRQHandler(void)
{
 8008fe0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fe2:	f7ff feaf 	bl	8008d44 <Invalid_ISR>
 8008fe6:	bf00      	nop

08008fe8 <USB_HP_CAN_TX_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8008fe8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008fea:	f7ff feab 	bl	8008d44 <Invalid_ISR>
 8008fee:	bf00      	nop

08008ff0 <USB_LP_CAN_RX0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8008ff0:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008ff2:	f7ff fea7 	bl	8008d44 <Invalid_ISR>
 8008ff6:	bf00      	nop

08008ff8 <CAN_RX1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8008ff8:	b508      	push	{r3, lr}
  Invalid_ISR();
 8008ffa:	f7ff fea3 	bl	8008d44 <Invalid_ISR>
 8008ffe:	bf00      	nop

08009000 <CAN_SCE_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8009000:	b508      	push	{r3, lr}
  Invalid_ISR();
 8009002:	f7ff fe9f 	bl	8008d44 <Invalid_ISR>
 8009006:	bf00      	nop

08009008 <EXTI9_5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
 void EXTI9_5_IRQHandler(void)
 {
 8009008:	b470      	push	{r4, r5, r6}
   // RLD
   static int EXTI9_5_LUT[8] = {0,1,2,0,3,0,0,0};
   Jog_key = EXTI9_5_LUT[Macro_Extract_Area(EXTI->PR,0x7,5)];
 800900a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800900e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009012:	6951      	ldr	r1, [r2, #20]
 8009014:	f640 2370 	movw	r3, #2672	; 0xa70
 8009018:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800901c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009020:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009024:	6a1e      	ldr	r6, [r3, #32]
 8009026:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800902a:	f240 63f4 	movw	r3, #1780	; 0x6f4
 800902e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   Jog_key_in = 1;
 8009032:	2501      	movs	r5, #1
   EXTI->PR = 0x7<<5;
 8009034:	24e0      	movs	r4, #224	; 0xe0
 8009036:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800903a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 *******************************************************************************/
 void EXTI9_5_IRQHandler(void)
 {
   // RLD
   static int EXTI9_5_LUT[8] = {0,1,2,0,3,0,0,0};
   Jog_key = EXTI9_5_LUT[Macro_Extract_Area(EXTI->PR,0x7,5)];
 800903e:	609e      	str	r6, [r3, #8]
   Jog_key_in = 1;
 8009040:	605d      	str	r5, [r3, #4]
   EXTI->PR = 0x7<<5;
 8009042:	6154      	str	r4, [r2, #20]
 8009044:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 }
 8009048:	bc70      	pop	{r4, r5, r6}
 800904a:	4770      	bx	lr

0800904c <TIM1_BRK_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 800904c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800904e:	f7ff fe79 	bl	8008d44 <Invalid_ISR>
 8009052:	bf00      	nop

08009054 <TIM1_UP_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8009054:	b508      	push	{r3, lr}
  Invalid_ISR();
 8009056:	f7ff fe75 	bl	8008d44 <Invalid_ISR>
 800905a:	bf00      	nop

0800905c <TIM1_TRG_COM_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 800905c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800905e:	f7ff fe71 	bl	8008d44 <Invalid_ISR>
 8009062:	bf00      	nop

08009064 <TIM1_CC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8009064:	b508      	push	{r3, lr}
  Invalid_ISR();
 8009066:	f7ff fe6d 	bl	8008d44 <Invalid_ISR>
 800906a:	bf00      	nop

0800906c <TIM2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM2_IRQHandler(void)
{
 800906c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800906e:	f7ff fe69 	bl	8008d44 <Invalid_ISR>
 8009072:	bf00      	nop

08009074 <TIM3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM3_IRQHandler(void)
{
 8009074:	b508      	push	{r3, lr}
  Invalid_ISR();
 8009076:	f7ff fe65 	bl	8008d44 <Invalid_ISR>
 800907a:	bf00      	nop

0800907c <TIM4_IRQHandler>:
 *******************************************************************************/
 volatile int TIM4_expired = 0;

 void TIM4_IRQHandler(void)
 {
   TIM4_expired = 1;
 800907c:	f240 63f4 	movw	r3, #1780	; 0x6f4
 8009080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009084:	2101      	movs	r1, #1
   Macro_Clear_Bit(TIM4->SR, 0);
 8009086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 *******************************************************************************/
 volatile int TIM4_expired = 0;

 void TIM4_IRQHandler(void)
 {
   TIM4_expired = 1;
 800908a:	60d9      	str	r1, [r3, #12]
   Macro_Clear_Bit(TIM4->SR, 0);
 800908c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009090:	8a13      	ldrh	r3, [r2, #16]
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	041b      	lsls	r3, r3, #16
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	8213      	strh	r3, [r2, #16]
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop

080090a0 <I2C1_EV_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 80090a0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090a2:	f7ff fe4f 	bl	8008d44 <Invalid_ISR>
 80090a6:	bf00      	nop

080090a8 <I2C1_ER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 80090a8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090aa:	f7ff fe4b 	bl	8008d44 <Invalid_ISR>
 80090ae:	bf00      	nop

080090b0 <I2C2_EV_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 80090b0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090b2:	f7ff fe47 	bl	8008d44 <Invalid_ISR>
 80090b6:	bf00      	nop

080090b8 <I2C2_ER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 80090b8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090ba:	f7ff fe43 	bl	8008d44 <Invalid_ISR>
 80090be:	bf00      	nop

080090c0 <SPI1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SPI1_IRQHandler(void)
{
 80090c0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090c2:	f7ff fe3f 	bl	8008d44 <Invalid_ISR>
 80090c6:	bf00      	nop

080090c8 <SPI2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SPI2_IRQHandler(void)
{
 80090c8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090ca:	f7ff fe3b 	bl	8008d44 <Invalid_ISR>
 80090ce:	bf00      	nop

080090d0 <USART1_IRQHandler>:
 *******************************************************************************/
 volatile int USART1_rx_ready = 0;
 volatile int USART1_rx_data;
 
 void USART1_IRQHandler(void)
 {
 80090d0:	b510      	push	{r4, lr}
   USART1_rx_ready = 1;
 80090d2:	f240 64f4 	movw	r4, #1780	; 0x6f4
 80090d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80090da:	2301      	movs	r3, #1
 80090dc:	6123      	str	r3, [r4, #16]
   USART1_rx_data = Uart1_Get_Pressed();
 80090de:	f000 fa2b 	bl	8009538 <Uart1_Get_Pressed>
 80090e2:	6160      	str	r0, [r4, #20]
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	bf00      	nop

080090e8 <USART2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USART2_IRQHandler(void)
{
 80090e8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090ea:	f7ff fe2b 	bl	8008d44 <Invalid_ISR>
 80090ee:	bf00      	nop

080090f0 <USART3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USART3_IRQHandler(void)
{
 80090f0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80090f2:	f7ff fe27 	bl	8008d44 <Invalid_ISR>
 80090f6:	bf00      	nop

080090f8 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
 void EXTI15_10_IRQHandler(void)
 {
 80090f8:	b470      	push	{r4, r5, r6}
   // 10
   static int EXTI15_10_LUT[4] = {0,4,5,0};
   Jog_key = EXTI15_10_LUT[Macro_Extract_Area(EXTI->PR, 0x3, 13)];
 80090fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009102:	6951      	ldr	r1, [r2, #20]
 8009104:	f640 2370 	movw	r3, #2672	; 0xa70
 8009108:	f3c1 3141 	ubfx	r1, r1, #13, #2
 800910c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8009110:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009114:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8009116:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800911a:	f240 63f4 	movw	r3, #1780	; 0x6f4
 800911e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   Jog_key_in = 1;	
 8009122:	2501      	movs	r5, #1
   EXTI->PR = 0x3<<13;
 8009124:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
 8009128:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800912c:	f44f 7080 	mov.w	r0, #256	; 0x100
 *******************************************************************************/
 void EXTI15_10_IRQHandler(void)
 {
   // 10
   static int EXTI15_10_LUT[4] = {0,4,5,0};
   Jog_key = EXTI15_10_LUT[Macro_Extract_Area(EXTI->PR, 0x3, 13)];
 8009130:	609e      	str	r6, [r3, #8]
   Jog_key_in = 1;	
 8009132:	605d      	str	r5, [r3, #4]
   EXTI->PR = 0x3<<13;
 8009134:	6154      	str	r4, [r2, #20]
 8009136:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 }
 800913a:	bc70      	pop	{r4, r5, r6}
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop

08009140 <RTCAlarm_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8009140:	b508      	push	{r3, lr}
  Invalid_ISR();
 8009142:	f7ff fdff 	bl	8008d44 <Invalid_ISR>
 8009146:	bf00      	nop

08009148 <USBWakeUp_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8009148:	b508      	push	{r3, lr}
  Invalid_ISR();
 800914a:	f7ff fdfb 	bl	8008d44 <Invalid_ISR>
 800914e:	bf00      	nop

08009150 <SysTick_OS_Tick>:
#include "device_driver.h"

void SysTick_OS_Tick(unsigned int msec)
{
 8009150:	b510      	push	{r4, lr}
  SysTick->CTRL = (0<<2)+(1<<1)+(0<<0);
 8009152:	f24e 0410 	movw	r4, #57360	; 0xe010
 8009156:	f2ce 0400 	movt	r4, #57344	; 0xe000
 800915a:	2302      	movs	r3, #2
 800915c:	6023      	str	r3, [r4, #0]
  SysTick->LOAD = (unsigned int)((HCLK/(8.*1000.))*msec+0.5);
 800915e:	f005 fdb7 	bl	800ecd0 <__aeabi_ui2d>
 8009162:	a30b      	add	r3, pc, #44	; (adr r3, 8009190 <SysTick_OS_Tick+0x40>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f005 fe28 	bl	800edbc <__aeabi_dmul>
 800916c:	2300      	movs	r3, #0
 800916e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8009172:	2200      	movs	r2, #0
 8009174:	f005 fc70 	bl	800ea58 <__adddf3>
 8009178:	f006 f8e2 	bl	800f340 <__aeabi_d2uiz>
  SysTick->VAL = 0;
 800917c:	2300      	movs	r3, #0
#include "device_driver.h"

void SysTick_OS_Tick(unsigned int msec)
{
  SysTick->CTRL = (0<<2)+(1<<1)+(0<<0);
  SysTick->LOAD = (unsigned int)((HCLK/(8.*1000.))*msec+0.5);
 800917e:	6060      	str	r0, [r4, #4]
  SysTick->VAL = 0;
 8009180:	60a3      	str	r3, [r4, #8]
  Macro_Set_Bit(SysTick->CTRL, 0);
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd10      	pop	{r4, pc}
 800918c:	f3af 8000 	nop.w
 8009190:	00000000 	andeq	r0, r0, r0
 8009194:	40c19400 	sbcmi	r9, r1, r0, lsl #8

08009198 <SysTick_Run>:
}

void SysTick_Run(unsigned int msec)
{
	SysTick->LOAD = (int)(HCLK/8000. + 0.5) * msec;
 8009198:	f242 3328 	movw	r3, #9000	; 0x2328
 800919c:	fb03 f000 	mul.w	r0, r3, r0
 80091a0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80091a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
	SysTick->VAL = 0;
 80091a8:	2100      	movs	r1, #0
	SysTick->CTRL = (0<<2)|(0<<1)|(1<<0);
 80091aa:	2201      	movs	r2, #1
  Macro_Set_Bit(SysTick->CTRL, 0);
}

void SysTick_Run(unsigned int msec)
{
	SysTick->LOAD = (int)(HCLK/8000. + 0.5) * msec;
 80091ac:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
 80091ae:	6099      	str	r1, [r3, #8]
	SysTick->CTRL = (0<<2)|(0<<1)|(1<<0);
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	4770      	bx	lr

080091b4 <SysTick_Stop>:
}

void SysTick_Stop(void)
{
	SysTick->CTRL = 0;
 80091b4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80091b8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop

080091c4 <SysTick_Get_Time>:
}

unsigned int SysTick_Get_Time(void)
{
	return SysTick->VAL;
 80091c4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80091c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80091cc:	6898      	ldr	r0, [r3, #8]
}
 80091ce:	4770      	bx	lr

080091d0 <SysTick_Get_Load_Time>:

unsigned int SysTick_Get_Load_Time(void)
{
	return SysTick->LOAD;
 80091d0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80091d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80091d8:	6858      	ldr	r0, [r3, #4]
}
 80091da:	4770      	bx	lr

080091dc <SysTick_Check_Timeout>:

int SysTick_Check_Timeout(void)
{
	return Macro_Check_Bit_Set(SysTick->CTRL, 16);
 80091dc:	f24e 0310 	movw	r3, #57360	; 0xe010
 80091e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80091e4:	6818      	ldr	r0, [r3, #0]
}
 80091e6:	f3c0 4000 	ubfx	r0, r0, #16, #1
 80091ea:	4770      	bx	lr
 80091ec:	f3af 8000 	nop.w

080091f0 <TIM2_Delay>:
#define TIM2_FREQ			(1000000/TIM2_TICK) 	// Hz
#define TIME2_PLS_OF_1ms	(1000/TIM2_TICK)
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
 80091f0:	b470      	push	{r4, r5, r6}
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 80091f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091fa:	69de      	ldr	r6, [r3, #28]

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 80091fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM2->CR1 = (1<<4)|(1<<3);
 8009200:	2418      	movs	r4, #24
	TIM2->ARR = 0xffff;
 8009202:	f64f 71ff 	movw	r1, #65535	; 0xffff
void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 8009206:	f046 0601 	orr.w	r6, r6, #1

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 800920a:	f240 559f 	movw	r5, #1439	; 0x59f
void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 800920e:	61de      	str	r6, [r3, #28]

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 8009210:	8515      	strh	r5, [r2, #40]	; 0x28
	TIM2->CR1 = (1<<4)|(1<<3);
 8009212:	8014      	strh	r4, [r2, #0]
	TIM2->ARR = 0xffff;
 8009214:	8591      	strh	r1, [r2, #44]	; 0x2c
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;
 8009216:	2132      	movs	r1, #50	; 0x32
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 8009218:	8a93      	ldrh	r3, [r2, #20]
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;
 800921a:	fb01 f000 	mul.w	r0, r1, r0
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 800921e:	b29b      	uxth	r3, r3
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 8009220:	f248 0401 	movw	r4, #32769	; 0x8001
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 8009224:	f043 0301 	orr.w	r3, r3, #1
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 8009228:	f2c8 0400 	movt	r4, #32768	; 0x8000
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 800922c:	8293      	strh	r3, [r2, #20]
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 800922e:	fba4 1400 	umull	r1, r4, r4, r0

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);
 8009232:	8993      	ldrh	r3, [r2, #12]

	for(i=0; i<(t/0xffff); i++)
 8009234:	0be4      	lsrs	r4, r4, #15

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);
 8009236:	b29b      	uxth	r3, r3
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	8193      	strh	r3, [r2, #12]

	for(i=0; i<(t/0xffff); i++)
 800923e:	bf18      	it	ne
 8009240:	2100      	movne	r1, #0
 8009242:	d015      	beq.n	8009270 <TIM2_Delay+0x80>
	{
		Macro_Set_Bit(TIM2->EGR,0);
 8009244:	8a93      	ldrh	r3, [r2, #20]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	8293      	strh	r3, [r2, #20]
		Macro_Clear_Bit(TIM2->SR, 0);
 800924e:	8a13      	ldrh	r3, [r2, #16]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	041b      	lsls	r3, r3, #16
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	8213      	strh	r3, [r2, #16]
		Macro_Set_Bit(TIM2->CR1, 0);
 800925a:	8813      	ldrh	r3, [r2, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	8013      	strh	r3, [r2, #0]
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
 8009264:	8a13      	ldrh	r3, [r2, #16]
 8009266:	07dd      	lsls	r5, r3, #31
 8009268:	d5fc      	bpl.n	8009264 <TIM2_Delay+0x74>
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 800926a:	3101      	adds	r1, #1
 800926c:	42a1      	cmp	r1, r4
 800926e:	d1e9      	bne.n	8009244 <TIM2_Delay+0x54>
		Macro_Clear_Bit(TIM2->SR, 0);
		Macro_Set_Bit(TIM2->CR1, 0);
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
	}

	TIM2->ARR = t % 0xffff;
 8009270:	f248 0301 	movw	r3, #32769	; 0x8001
 8009274:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8009278:	fba3 2300 	umull	r2, r3, r3, r0
 800927c:	0bdb      	lsrs	r3, r3, #15
 800927e:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8009282:	1ac2      	subs	r2, r0, r3
 8009284:	b292      	uxth	r2, r2
 8009286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800928a:	859a      	strh	r2, [r3, #44]	; 0x2c
	Macro_Set_Bit(TIM2->EGR,0);
 800928c:	8a9a      	ldrh	r2, [r3, #20]
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));
 800928e:	4619      	mov	r1, r3
		Macro_Set_Bit(TIM2->CR1, 0);
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
	}

	TIM2->ARR = t % 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 8009290:	b292      	uxth	r2, r2
 8009292:	f042 0201 	orr.w	r2, r2, #1
 8009296:	829a      	strh	r2, [r3, #20]
	Macro_Clear_Bit(TIM2->SR, 0);
 8009298:	8a1a      	ldrh	r2, [r3, #16]
 800929a:	f022 0201 	bic.w	r2, r2, #1
 800929e:	0412      	lsls	r2, r2, #16
 80092a0:	0c12      	lsrs	r2, r2, #16
 80092a2:	821a      	strh	r2, [r3, #16]
	Macro_Set_Bit(TIM2->CR1, 0);
 80092a4:	881a      	ldrh	r2, [r3, #0]
 80092a6:	b292      	uxth	r2, r2
 80092a8:	f042 0201 	orr.w	r2, r2, #1
 80092ac:	801a      	strh	r2, [r3, #0]
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));
 80092ae:	8a0b      	ldrh	r3, [r1, #16]
 80092b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092b4:	07db      	lsls	r3, r3, #31
 80092b6:	d5fa      	bpl.n	80092ae <TIM2_Delay+0xbe>

	Macro_Clear_Bit(TIM2->CR1, 0);
 80092b8:	8813      	ldrh	r3, [r2, #0]
	Macro_Clear_Bit(TIM2->DIER, 0);
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 80092ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));

	Macro_Clear_Bit(TIM2->CR1, 0);
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	041b      	lsls	r3, r3, #16
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	8013      	strh	r3, [r2, #0]
	Macro_Clear_Bit(TIM2->DIER, 0);
 80092c8:	8993      	ldrh	r3, [r2, #12]
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 80092ca:	f2c4 0102 	movt	r1, #16386	; 0x4002
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));

	Macro_Clear_Bit(TIM2->CR1, 0);
	Macro_Clear_Bit(TIM2->DIER, 0);
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	041b      	lsls	r3, r3, #16
 80092d4:	0c1b      	lsrs	r3, r3, #16
 80092d6:	8193      	strh	r3, [r2, #12]
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 80092d8:	69cb      	ldr	r3, [r1, #28]
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	61cb      	str	r3, [r1, #28]
}
 80092e0:	bc70      	pop	{r4, r5, r6}
 80092e2:	4770      	bx	lr

080092e4 <TIM4_Repeat_Interrupt_Enable>:
#define TIM4_FREQ 	  (1000000/TIM4_TICK) 			// Hz
#define TIME4_PLS_OF_1ms  (1000/TIM4_TICK)
#define TIM4_MAX	  (0xffffu)

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
 80092e4:	b430      	push	{r4, r5}
  if(en)
 80092e6:	bb08      	cbnz	r0, 800932c <TIM4_Repeat_Interrupt_Enable+0x48>
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80092e8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80092ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80092f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  }

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
 80092f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
 80092fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009300:	881a      	ldrh	r2, [r3, #0]
    Macro_Clear_Bit(TIM4->DIER, 0);
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 8009302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  }

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
 8009306:	f022 0201 	bic.w	r2, r2, #1
 800930a:	0412      	lsls	r2, r2, #16
 800930c:	0c12      	lsrs	r2, r2, #16
 800930e:	801a      	strh	r2, [r3, #0]
    Macro_Clear_Bit(TIM4->DIER, 0);
 8009310:	899a      	ldrh	r2, [r3, #12]
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 8009312:	f2c4 0102 	movt	r1, #16386	; 0x4002

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
    Macro_Clear_Bit(TIM4->DIER, 0);
 8009316:	f022 0201 	bic.w	r2, r2, #1
 800931a:	0412      	lsls	r2, r2, #16
 800931c:	0c12      	lsrs	r2, r2, #16
 800931e:	819a      	strh	r2, [r3, #12]
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 8009320:	69cb      	ldr	r3, [r1, #28]
 8009322:	f023 0304 	bic.w	r3, r3, #4
 8009326:	61cb      	str	r3, [r1, #28]
  }
}
 8009328:	bc30      	pop	{r4, r5}
 800932a:	4770      	bx	lr

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 800932c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009330:	f2c4 0202 	movt	r2, #16386	; 0x4002

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 8009334:	eb01 0181 	add.w	r1, r1, r1, lsl #2

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 8009338:	69d5      	ldr	r5, [r2, #28]

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 800933a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800933e:	0049      	lsls	r1, r1, #1
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 8009340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009344:	f2c4 0300 	movt	r3, #16384	; 0x4000
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 8009348:	b289      	uxth	r1, r1

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 800934a:	f045 0504 	orr.w	r5, r5, #4

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 800934e:	2410      	movs	r4, #16
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
 8009350:	f240 509f 	movw	r0, #1439	; 0x59f

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 8009354:	61d5      	str	r5, [r2, #28]

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 8009356:	801c      	strh	r4, [r3, #0]
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
 8009358:	8518      	strh	r0, [r3, #40]	; 0x28
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 800935a:	8599      	strh	r1, [r3, #44]	; 0x2c

    Macro_Set_Bit(TIM4->EGR,0);
 800935c:	8a99      	ldrh	r1, [r3, #20]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800935e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8009362:	b289      	uxth	r1, r1
 8009364:	f041 0101 	orr.w	r1, r1, #1
 8009368:	8299      	strh	r1, [r3, #20]
    Macro_Set_Bit(TIM4->SR, 0);
 800936a:	8a18      	ldrh	r0, [r3, #16]
 800936c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009370:	b280      	uxth	r0, r0
 8009372:	f040 0001 	orr.w	r0, r0, #1
 8009376:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800937a:	8218      	strh	r0, [r3, #16]
 800937c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC_ClearPendingIRQ((IRQn_Type)30);
    Macro_Set_Bit(TIM4->DIER, 0);
 8009380:	8998      	ldrh	r0, [r3, #12]
 8009382:	b280      	uxth	r0, r0
 8009384:	f040 0001 	orr.w	r0, r0, #1
 8009388:	8198      	strh	r0, [r3, #12]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800938a:	6011      	str	r1, [r2, #0]
    NVIC_EnableIRQ((IRQn_Type)30);
    Macro_Set_Bit(TIM4->CR1, 0);
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	b292      	uxth	r2, r2
 8009390:	f042 0201 	orr.w	r2, r2, #1
 8009394:	801a      	strh	r2, [r3, #0]
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
    Macro_Clear_Bit(TIM4->DIER, 0);
    Macro_Clear_Bit(RCC->APB1ENR, 2);
  }
}
 8009396:	bc30      	pop	{r4, r5}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	0000      	movs	r0, r0
	...

080093a0 <Uart1_Init>:
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

void Uart1_Init(int baud)
{
 80093a0:	b570      	push	{r4, r5, r6, lr}
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
 80093a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093aa:	6991      	ldr	r1, [r2, #24]
  Macro_Set_Bit(RCC->APB2ENR, 14);
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 80093ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
{
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
 80093b0:	f041 0104 	orr.w	r1, r1, #4
 80093b4:	6191      	str	r1, [r2, #24]
  Macro_Set_Bit(RCC->APB2ENR, 14);
 80093b6:	6991      	ldr	r1, [r2, #24]
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 80093b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
  Macro_Set_Bit(RCC->APB2ENR, 14);
 80093bc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80093c0:	6191      	str	r1, [r2, #24]
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80093c8:	f442 620a 	orr.w	r2, r2, #2208	; 0x8a0
 80093cc:	605a      	str	r2, [r3, #4]
  Macro_Set_Bit(GPIOA->ODR, 10);
 80093ce:	68da      	ldr	r2, [r3, #12]
 80093d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093d4:	60da      	str	r2, [r3, #12]
  
  div = PCLK2/(16. * baud);
 80093d6:	f005 fc8b 	bl	800ecf0 <__aeabi_i2d>
 80093da:	2300      	movs	r3, #0
 80093dc:	2200      	movs	r2, #0
 80093de:	f2c4 0330 	movt	r3, #16432	; 0x4030
 80093e2:	f005 fceb 	bl	800edbc <__aeabi_dmul>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	a119      	add	r1, pc, #100	; (adr r1, 8009450 <Uart1_Init+0xb0>)
 80093ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093f0:	f005 fe0e 	bl	800f010 <__aeabi_ddiv>
 80093f4:	460d      	mov	r5, r1
 80093f6:	4604      	mov	r4, r0
  mant = (int)div;
 80093f8:	f005 ff7a 	bl	800f2f0 <__aeabi_d2iz>
 80093fc:	4606      	mov	r6, r0
  frac = (int)((div - mant) * 16. + 0.5);
 80093fe:	f005 fc67 	bl	800ecd0 <__aeabi_ui2d>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4620      	mov	r0, r4
 8009408:	4629      	mov	r1, r5
 800940a:	f005 fb23 	bl	800ea54 <__aeabi_dsub>
 800940e:	2300      	movs	r3, #0
 8009410:	2200      	movs	r2, #0
 8009412:	f2c4 0330 	movt	r3, #16432	; 0x4030
 8009416:	f005 fcd1 	bl	800edbc <__aeabi_dmul>
 800941a:	2300      	movs	r3, #0
 800941c:	2200      	movs	r2, #0
 800941e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8009422:	f005 fb19 	bl	800ea58 <__adddf3>
 8009426:	f005 ff63 	bl	800f2f0 <__aeabi_d2iz>
  mant += frac >> 4;
 800942a:	eb06 1610 	add.w	r6, r6, r0, lsr #4
  frac &= 0xf;
 800942e:	f000 000f 	and.w	r0, r0, #15

  USART1->BRR = (mant<<4)+(frac<<0);
 8009432:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8009436:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800943a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
  USART1->CR2 = 0<<12;
 800943e:	2200      	movs	r2, #0
  mant = (int)div;
  frac = (int)((div - mant) * 16. + 0.5);
  mant += frac >> 4;
  frac &= 0xf;

  USART1->BRR = (mant<<4)+(frac<<0);
 8009440:	b280      	uxth	r0, r0
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
 8009442:	f242 010c 	movw	r1, #8204	; 0x200c
  mant = (int)div;
  frac = (int)((div - mant) * 16. + 0.5);
  mant += frac >> 4;
  frac &= 0xf;

  USART1->BRR = (mant<<4)+(frac<<0);
 8009446:	8118      	strh	r0, [r3, #8]
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
 8009448:	8199      	strh	r1, [r3, #12]
  USART1->CR2 = 0<<12;
 800944a:	821a      	strh	r2, [r3, #16]
  USART1->CR3 = 0;
 800944c:	829a      	strh	r2, [r3, #20]
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	00000000 	andeq	r0, r0, r0
 8009454:	41912a88 	orrsmi	r2, r1, r8, lsl #21

08009458 <Uart1_Send_Byte>:
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 8009458:	280a      	cmp	r0, #10
 800945a:	d00c      	beq.n	8009476 <Uart1_Send_Byte+0x1e>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 800945c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8009460:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8009464:	880a      	ldrh	r2, [r1, #0]
 8009466:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800946a:	0612      	lsls	r2, r2, #24
 800946c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009470:	d5f8      	bpl.n	8009464 <Uart1_Send_Byte+0xc>
  USART1->DR = data;
 8009472:	8098      	strh	r0, [r3, #4]
 8009474:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8009476:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800947a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800947e:	880a      	ldrh	r2, [r1, #0]
 8009480:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009484:	0612      	lsls	r2, r2, #24
 8009486:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800948a:	d5f8      	bpl.n	800947e <Uart1_Send_Byte+0x26>
    USART1->DR = 0x0d;
 800948c:	220d      	movs	r2, #13
 800948e:	809a      	strh	r2, [r3, #4]
 8009490:	e7e4      	b.n	800945c <Uart1_Send_Byte+0x4>
 8009492:	bf00      	nop

08009494 <Uart1_Send_String>:
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
  USART1->DR = data;
}

void Uart1_Send_String(char *pt)
{
 8009494:	b430      	push	{r4, r5}
  while(*pt!=0)
 8009496:	7804      	ldrb	r4, [r0, #0]
 8009498:	b194      	cbz	r4, 80094c0 <Uart1_Send_String+0x2c>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 800949a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800949e:	f2c4 0101 	movt	r1, #16385	; 0x4001
    USART1->DR = 0x0d;
 80094a2:	250d      	movs	r5, #13
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 80094a4:	2c0a      	cmp	r4, #10
 80094a6:	d00d      	beq.n	80094c4 <Uart1_Send_String+0x30>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80094a8:	880a      	ldrh	r2, [r1, #0]
 80094aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80094ae:	0612      	lsls	r2, r2, #24
 80094b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80094b4:	d5f8      	bpl.n	80094a8 <Uart1_Send_String+0x14>
  USART1->DR = data;
 80094b6:	809c      	strh	r4, [r3, #4]
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 80094b8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80094bc:	2c00      	cmp	r4, #0
 80094be:	d1f1      	bne.n	80094a4 <Uart1_Send_String+0x10>
  {
    Uart1_Send_Byte(*pt++);
  }
}
 80094c0:	bc30      	pop	{r4, r5}
 80094c2:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80094c4:	880a      	ldrh	r2, [r1, #0]
 80094c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80094ca:	0612      	lsls	r2, r2, #24
 80094cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80094d0:	d5f8      	bpl.n	80094c4 <Uart1_Send_String+0x30>
    USART1->DR = 0x0d;
 80094d2:	809d      	strh	r5, [r3, #4]
 80094d4:	e7e8      	b.n	80094a8 <Uart1_Send_String+0x14>
 80094d6:	bf00      	nop

080094d8 <Uart1_Printf>:
    Uart1_Send_Byte(*pt++);
  }
}

void Uart1_Printf(char *fmt,...)
{
 80094d8:	b40f      	push	{r0, r1, r2, r3}
 80094da:	b530      	push	{r4, r5, lr}
 80094dc:	b0c3      	sub	sp, #268	; 0x10c
 80094de:	ab46      	add	r3, sp, #280	; 0x118
 80094e0:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  char string[256];
  
  va_start(ap,fmt);
  vsprintf(string,fmt,ap);
 80094e4:	a802      	add	r0, sp, #8
 80094e6:	461a      	mov	r2, r3
void Uart1_Printf(char *fmt,...)
{
  va_list ap;
  char string[256];
  
  va_start(ap,fmt);
 80094e8:	9301      	str	r3, [sp, #4]
  vsprintf(string,fmt,ap);
 80094ea:	f000 fa87 	bl	80099fc <vsprintf>
  USART1->DR = data;
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 80094ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80094f2:	b198      	cbz	r0, 800951c <Uart1_Printf+0x44>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80094f4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80094f8:	ac02      	add	r4, sp, #8
 80094fa:	f2c4 0101 	movt	r1, #16385	; 0x4001
    USART1->DR = 0x0d;
 80094fe:	250d      	movs	r5, #13
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 8009500:	280a      	cmp	r0, #10
 8009502:	d010      	beq.n	8009526 <Uart1_Printf+0x4e>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8009504:	880a      	ldrh	r2, [r1, #0]
 8009506:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800950a:	0612      	lsls	r2, r2, #24
 800950c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009510:	d5f8      	bpl.n	8009504 <Uart1_Printf+0x2c>
  USART1->DR = data;
 8009512:	8098      	strh	r0, [r3, #4]
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 8009514:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8009518:	2800      	cmp	r0, #0
 800951a:	d1f1      	bne.n	8009500 <Uart1_Printf+0x28>
  
  va_start(ap,fmt);
  vsprintf(string,fmt,ap);
  Uart1_Send_String(string);
  va_end(ap);
}
 800951c:	b043      	add	sp, #268	; 0x10c
 800951e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009522:	b004      	add	sp, #16
 8009524:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8009526:	880a      	ldrh	r2, [r1, #0]
 8009528:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800952c:	0612      	lsls	r2, r2, #24
 800952e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009532:	d5f8      	bpl.n	8009526 <Uart1_Printf+0x4e>
    USART1->DR = 0x0d;
 8009534:	809d      	strh	r5, [r3, #4]
 8009536:	e7e5      	b.n	8009504 <Uart1_Printf+0x2c>

08009538 <Uart1_Get_Pressed>:
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8009538:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800953c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8009540:	8818      	ldrh	r0, [r3, #0]
 8009542:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8009546:	b108      	cbz	r0, 800954c <Uart1_Get_Pressed+0x14>
	{
		return (char)USART1->DR;
 8009548:	8898      	ldrh	r0, [r3, #4]
 800954a:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return (char)0;
	}
}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop

08009550 <Uart1_Get_Char>:
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8009550:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009554:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009558:	8813      	ldrh	r3, [r2, #0]
 800955a:	0699      	lsls	r1, r3, #26
 800955c:	d5fc      	bpl.n	8009558 <Uart1_Get_Char+0x8>
	{
		return (char)USART1->DR;
 800955e:	8890      	ldrh	r0, [r2, #4]
 8009560:	b2c0      	uxtb	r0, r0
	char rx;

	do
	{
		rx = Uart1_Get_Pressed();
	}while(!rx);
 8009562:	2800      	cmp	r0, #0
 8009564:	d0f8      	beq.n	8009558 <Uart1_Get_Char+0x8>

	return rx;
}
 8009566:	4770      	bx	lr

08009568 <Uart1_Get_String>:

void Uart1_Get_String(char *string)
{
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 800956a:	f44f 5460 	mov.w	r4, #14336	; 0x3800

	return rx;
}

void Uart1_Get_String(char *string)
{
 800956e:	4607      	mov	r7, r0
	char *string2 = string;
	char c;

	while((c = Uart1_Get_Char())!='\r')
 8009570:	4606      	mov	r6, r0
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8009572:	f2c4 0401 	movt	r4, #16385	; 0x4001
void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
 8009576:	250d      	movs	r5, #13
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8009578:	8823      	ldrh	r3, [r4, #0]
 800957a:	069b      	lsls	r3, r3, #26
 800957c:	d5fc      	bpl.n	8009578 <Uart1_Get_String+0x10>
	{
		return (char)USART1->DR;
 800957e:	88a3      	ldrh	r3, [r4, #4]
 8009580:	b2db      	uxtb	r3, r3
	char rx;

	do
	{
		rx = Uart1_Get_Pressed();
	}while(!rx);
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f8      	beq.n	8009578 <Uart1_Get_String+0x10>
void Uart1_Get_String(char *string)
{
	char *string2 = string;
	char c;

	while((c = Uart1_Get_Char())!='\r')
 8009586:	2b0d      	cmp	r3, #13
 8009588:	d023      	beq.n	80095d2 <Uart1_Get_String+0x6a>
	{
		if(c=='\b')
 800958a:	2b08      	cmp	r3, #8
 800958c:	d109      	bne.n	80095a2 <Uart1_Get_String+0x3a>
		{
			if((int)string2 < (int)string)
 800958e:	42b7      	cmp	r7, r6
 8009590:	daf2      	bge.n	8009578 <Uart1_Get_String+0x10>
			{
				Uart1_Printf("\b \b");
 8009592:	f241 0010 	movw	r0, #4112	; 0x1010
 8009596:	f6c0 0001 	movt	r0, #2049	; 0x801
				string--;
 800959a:	3e01      	subs	r6, #1
	{
		if(c=='\b')
		{
			if((int)string2 < (int)string)
			{
				Uart1_Printf("\b \b");
 800959c:	f7ff ff9c 	bl	80094d8 <Uart1_Printf>
 80095a0:	e7ea      	b.n	8009578 <Uart1_Get_String+0x10>
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 80095a2:	2b0a      	cmp	r3, #10
			}
		}

		else
		{
			*string++ = c;
 80095a4:	7033      	strb	r3, [r6, #0]
 80095a6:	f106 0601 	add.w	r6, r6, #1
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 80095aa:	d009      	beq.n	80095c0 <Uart1_Get_String+0x58>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80095ac:	8821      	ldrh	r1, [r4, #0]
 80095ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80095b2:	0609      	lsls	r1, r1, #24
 80095b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80095b8:	d5f8      	bpl.n	80095ac <Uart1_Get_String+0x44>
  USART1->DR = data;
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8093      	strh	r3, [r2, #4]
 80095be:	e7db      	b.n	8009578 <Uart1_Get_String+0x10>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80095c0:	8821      	ldrh	r1, [r4, #0]
 80095c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80095c6:	0608      	lsls	r0, r1, #24
 80095c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80095cc:	d5f8      	bpl.n	80095c0 <Uart1_Get_String+0x58>
    USART1->DR = 0x0d;
 80095ce:	8095      	strh	r5, [r2, #4]
 80095d0:	e7ec      	b.n	80095ac <Uart1_Get_String+0x44>
			*string++ = c;
			Uart1_Send_Byte(c);
		}
	}

	*string='\0';
 80095d2:	2300      	movs	r3, #0

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80095d4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
			*string++ = c;
			Uart1_Send_Byte(c);
		}
	}

	*string='\0';
 80095d8:	7033      	strb	r3, [r6, #0]

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80095da:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80095de:	880a      	ldrh	r2, [r1, #0]
 80095e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80095e4:	0614      	lsls	r4, r2, #24
 80095e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80095ea:	d5f8      	bpl.n	80095de <Uart1_Get_String+0x76>
    USART1->DR = 0x0d;
 80095ec:	220d      	movs	r2, #13
 80095ee:	809a      	strh	r2, [r3, #4]
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80095f0:	8819      	ldrh	r1, [r3, #0]
 80095f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80095f6:	0608      	lsls	r0, r1, #24
 80095f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80095fc:	d5f8      	bpl.n	80095f0 <Uart1_Get_String+0x88>
  USART1->DR = data;
 80095fe:	230a      	movs	r3, #10
 8009600:	8093      	strh	r3, [r2, #4]
 8009602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009604 <Uart1_Get_Int_Num>:
	*string='\0';
	Uart1_Send_Byte('\n');
}

int Uart1_Get_Int_Num(void)
{
 8009604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009606:	b089      	sub	sp, #36	; 0x24
	int minus    = 0;
	int result   = 0;
	int lastIndex;
	int i;

	Uart1_Get_String(string);
 8009608:	4668      	mov	r0, sp
 800960a:	f7ff ffad 	bl	8009568 <Uart1_Get_String>

	if(string[0]=='-')
 800960e:	f89d 3000 	ldrb.w	r3, [sp]
 8009612:	2b2d      	cmp	r3, #45	; 0x2d
	{
		minus = 1;
		string++;
 8009614:	bf03      	ittte	eq
 8009616:	ad08      	addeq	r5, sp, #32
 8009618:	f815 3d1f 	ldrbeq.w	r3, [r5, #-31]!

	Uart1_Get_String(string);

	if(string[0]=='-')
	{
		minus = 1;
 800961c:	2601      	moveq	r6, #1
}

int Uart1_Get_Int_Num(void)
{
	char str[30];
	char *string = str;
 800961e:	466d      	movne	r5, sp
	int base     = 10;
	int minus    = 0;
 8009620:	bf18      	it	ne
 8009622:	2600      	movne	r6, #0
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 8009624:	2b30      	cmp	r3, #48	; 0x30
 8009626:	d037      	beq.n	8009698 <Uart1_Get_Int_Num+0x94>

int Uart1_Get_Int_Num(void)
{
	char str[30];
	char *string = str;
	int base     = 10;
 8009628:	240a      	movs	r4, #10
	{
		base    = 16;
		string += 2;
	}

	lastIndex = strlen(string) - 1;
 800962a:	4628      	mov	r0, r5
 800962c:	f000 f8f0 	bl	8009810 <strlen>
 8009630:	3801      	subs	r0, #1

	if(lastIndex<0) return -1;
 8009632:	2800      	cmp	r0, #0
	{
		base    = 16;
		string += 2;
	}

	lastIndex = strlen(string) - 1;
 8009634:	4607      	mov	r7, r0

	if(lastIndex<0) return -1;
 8009636:	db3f      	blt.n	80096b8 <Uart1_Get_Int_Num+0xb4>

	if(string[lastIndex]=='h' || string[lastIndex]=='H' )
 8009638:	5c2b      	ldrb	r3, [r5, r0]
 800963a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800963e:	2b48      	cmp	r3, #72	; 0x48
 8009640:	d024      	beq.n	800968c <Uart1_Get_Int_Num+0x88>
		base = 16;
		string[lastIndex] = 0;
		lastIndex--;
	}

	if(base==10)
 8009642:	2c0a      	cmp	r4, #10
 8009644:	d031      	beq.n	80096aa <Uart1_Get_Int_Num+0xa6>
 8009646:	f240 0210 	movw	r2, #16
 800964a:	f2c2 0200 	movt	r2, #8192	; 0x2000
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
	{
		base    = 16;
 800964e:	2300      	movs	r3, #0
 8009650:	f8d2 c000 	ldr.w	ip, [r2]
 8009654:	461c      	mov	r4, r3

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 8009656:	5cea      	ldrb	r2, [r5, r3]
 8009658:	eb0c 0102 	add.w	r1, ip, r2
 800965c:	7849      	ldrb	r1, [r1, #1]
				else result = (result<<4) + string[i] - 'a' + 10;
			}

			else
			{
				result = (result<<4) + string[i] - '0';
 800965e:	eb02 1004 	add.w	r0, r2, r4, lsl #4

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 8009662:	f011 0103 	ands.w	r1, r1, #3
				else result = (result<<4) + string[i] - 'a' + 10;
			}

			else
			{
				result = (result<<4) + string[i] - '0';
 8009666:	bf08      	it	eq
 8009668:	f1a0 0430 	subeq.w	r4, r0, #48	; 0x30

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 800966c:	d006      	beq.n	800967c <Uart1_Get_Int_Num+0x78>
			{
				if(isupper((int)string[i])) result = (result<<4) + string[i] - 'A' + 10;
 800966e:	2901      	cmp	r1, #1
 8009670:	bf0b      	itete	eq
 8009672:	4604      	moveq	r4, r0
				else result = (result<<4) + string[i] - 'a' + 10;
 8009674:	eb02 1404 	addne.w	r4, r2, r4, lsl #4
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
			{
				if(isupper((int)string[i])) result = (result<<4) + string[i] - 'A' + 10;
 8009678:	3c37      	subeq	r4, #55	; 0x37
				else result = (result<<4) + string[i] - 'a' + 10;
 800967a:	3c57      	subne	r4, #87	; 0x57
		result = minus ? (-1*result):result;
	}

	else
	{
		for(i=0;i<=lastIndex;i++)
 800967c:	3301      	adds	r3, #1
 800967e:	429f      	cmp	r7, r3
 8009680:	dae9      	bge.n	8009656 <Uart1_Get_Int_Num+0x52>
			{
				result = (result<<4) + string[i] - '0';
			}
		}

		result = minus ? (-1*result):result;
 8009682:	4260      	negs	r0, r4
 8009684:	b906      	cbnz	r6, 8009688 <Uart1_Get_Int_Num+0x84>
 8009686:	4620      	mov	r0, r4
	}

	return result;
}
 8009688:	b009      	add	sp, #36	; 0x24
 800968a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(lastIndex<0) return -1;

	if(string[lastIndex]=='h' || string[lastIndex]=='H' )
	{
		base = 16;
		string[lastIndex] = 0;
 800968c:	2400      	movs	r4, #0
 800968e:	542c      	strb	r4, [r5, r0]
		result = minus ? (-1*result):result;
	}

	else
	{
		for(i=0;i<=lastIndex;i++)
 8009690:	1e47      	subs	r7, r0, #1
 8009692:	2800      	cmp	r0, #0
 8009694:	d1d7      	bne.n	8009646 <Uart1_Get_Int_Num+0x42>
 8009696:	e7f4      	b.n	8009682 <Uart1_Get_Int_Num+0x7e>
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 8009698:	786b      	ldrb	r3, [r5, #1]
 800969a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800969e:	2b58      	cmp	r3, #88	; 0x58
	{
		base    = 16;
		string += 2;
 80096a0:	bf04      	itt	eq
 80096a2:	3502      	addeq	r5, #2
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
	{
		base    = 16;
 80096a4:	2410      	moveq	r4, #16
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 80096a6:	d0c0      	beq.n	800962a <Uart1_Get_Int_Num+0x26>
 80096a8:	e7be      	b.n	8009628 <Uart1_Get_Int_Num+0x24>
		lastIndex--;
	}

	if(base==10)
	{
		result = atoi(string);
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 f82c 	bl	8009708 <atoi>
		result = minus ? (-1*result):result;
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	d0e9      	beq.n	8009688 <Uart1_Get_Int_Num+0x84>
 80096b4:	4240      	negs	r0, r0
 80096b6:	e7e7      	b.n	8009688 <Uart1_Get_Int_Num+0x84>
		string += 2;
	}

	lastIndex = strlen(string) - 1;

	if(lastIndex<0) return -1;
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	e7e4      	b.n	8009688 <Uart1_Get_Int_Num+0x84>
 80096be:	bf00      	nop

080096c0 <Uart1_RX_Interrupt_Enable>:

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(USART1->CR1, 5);
 80096c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80096c4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	return result;
}

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
 80096c8:	b968      	cbnz	r0, 80096e6 <Uart1_RX_Interrupt_Enable+0x26>
		NVIC_EnableIRQ((IRQn_Type)37);
	}

	else
	{
		Macro_Clear_Bit(USART1->CR1, 5);
 80096ca:	8993      	ldrh	r3, [r2, #12]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80096cc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80096d0:	f023 0320 	bic.w	r3, r3, #32
 80096d4:	041b      	lsls	r3, r3, #16
 80096d6:	0c1b      	lsrs	r3, r3, #16
 80096d8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80096dc:	2020      	movs	r0, #32
 80096de:	8193      	strh	r3, [r2, #12]
 80096e0:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
 80096e4:	4770      	bx	lr

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(USART1->CR1, 5);
 80096e6:	8990      	ldrh	r0, [r2, #12]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80096e8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80096ec:	b280      	uxth	r0, r0
 80096ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80096f2:	2120      	movs	r1, #32
 80096f4:	f040 0020 	orr.w	r0, r0, #32
 80096f8:	8190      	strh	r0, [r2, #12]
 80096fa:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80096fe:	6059      	str	r1, [r3, #4]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w

08009708 <atoi>:
 8009708:	2100      	movs	r1, #0
 800970a:	220a      	movs	r2, #10
 800970c:	f000 b94e 	b.w	80099ac <strtol>

08009710 <_atoi_r>:
 8009710:	2200      	movs	r2, #0
 8009712:	230a      	movs	r3, #10
 8009714:	f000 b8ac 	b.w	8009870 <_strtol_r>

08009718 <srand>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	f240 0314 	movw	r3, #20
 800971e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009722:	4605      	mov	r5, r0
 8009724:	681c      	ldr	r4, [r3, #0]
 8009726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009728:	b119      	cbz	r1, 8009732 <srand+0x1a>
 800972a:	2300      	movs	r3, #0
 800972c:	610d      	str	r5, [r1, #16]
 800972e:	614b      	str	r3, [r1, #20]
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	2018      	movs	r0, #24
 8009734:	f000 f970 	bl	8009a18 <malloc>
 8009738:	f243 320e 	movw	r2, #13070	; 0x330e
 800973c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8009740:	4601      	mov	r1, r0
 8009742:	63a0      	str	r0, [r4, #56]	; 0x38
 8009744:	8002      	strh	r2, [r0, #0]
 8009746:	240b      	movs	r4, #11
 8009748:	8043      	strh	r3, [r0, #2]
 800974a:	f241 2234 	movw	r2, #4660	; 0x1234
 800974e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8009752:	8082      	strh	r2, [r0, #4]
 8009754:	80c3      	strh	r3, [r0, #6]
 8009756:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 800975a:	2305      	movs	r3, #5
 800975c:	8102      	strh	r2, [r0, #8]
 800975e:	8143      	strh	r3, [r0, #10]
 8009760:	2201      	movs	r2, #1
 8009762:	2300      	movs	r3, #0
 8009764:	8184      	strh	r4, [r0, #12]
 8009766:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	610d      	str	r5, [r1, #16]
 800976e:	614b      	str	r3, [r1, #20]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop

08009774 <rand>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	f240 0314 	movw	r3, #20
 800977a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800977e:	681c      	ldr	r4, [r3, #0]
 8009780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009782:	b1c1      	cbz	r1, 80097b6 <rand+0x42>
 8009784:	690a      	ldr	r2, [r1, #16]
 8009786:	f24f 402d 	movw	r0, #62509	; 0xf42d
 800978a:	694c      	ldr	r4, [r1, #20]
 800978c:	f6c5 0051 	movt	r0, #22609	; 0x5851
 8009790:	f647 732d 	movw	r3, #32557	; 0x7f2d
 8009794:	f6c4 4395 	movt	r3, #19605	; 0x4c95
 8009798:	fb00 f002 	mul.w	r0, r0, r2
 800979c:	fb03 0404 	mla	r4, r3, r4, r0
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	3201      	adds	r2, #1
 80097a6:	4423      	add	r3, r4
 80097a8:	f143 0300 	adc.w	r3, r3, #0
 80097ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80097b0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80097b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b6:	2018      	movs	r0, #24
 80097b8:	f243 350e 	movw	r5, #13070	; 0x330e
 80097bc:	f000 f92c 	bl	8009a18 <malloc>
 80097c0:	a311      	add	r3, pc, #68	; (adr r3, 8009808 <rand+0x94>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	270b      	movs	r7, #11
 80097c8:	4606      	mov	r6, r0
 80097ca:	f24f 402d 	movw	r0, #62509	; 0xf42d
 80097ce:	4631      	mov	r1, r6
 80097d0:	63a6      	str	r6, [r4, #56]	; 0x38
 80097d2:	f6c5 0051 	movt	r0, #22609	; 0x5851
 80097d6:	8035      	strh	r5, [r6, #0]
 80097d8:	f64a 34cd 	movw	r4, #43981	; 0xabcd
 80097dc:	f241 2534 	movw	r5, #4660	; 0x1234
 80097e0:	8074      	strh	r4, [r6, #2]
 80097e2:	f24e 646d 	movw	r4, #58989	; 0xe66d
 80097e6:	80b5      	strh	r5, [r6, #4]
 80097e8:	f64d 65ec 	movw	r5, #57068	; 0xdeec
 80097ec:	80f4      	strh	r4, [r6, #6]
 80097ee:	2405      	movs	r4, #5
 80097f0:	8135      	strh	r5, [r6, #8]
 80097f2:	2500      	movs	r5, #0
 80097f4:	8174      	strh	r4, [r6, #10]
 80097f6:	2401      	movs	r4, #1
 80097f8:	81b7      	strh	r7, [r6, #12]
 80097fa:	e9c6 4504 	strd	r4, r5, [r6, #16]
 80097fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8009802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009804:	f3af 8000 	nop.w
 8009808:	4c957f2e 	ldcmi	15, cr7, [r5], {46}	; 0x2e
 800980c:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

08009810 <strlen>:
 8009810:	f020 0103 	bic.w	r1, r0, #3
 8009814:	f010 0003 	ands.w	r0, r0, #3
 8009818:	f1c0 0000 	rsb	r0, r0, #0
 800981c:	f851 3b04 	ldr.w	r3, [r1], #4
 8009820:	f100 0c04 	add.w	ip, r0, #4
 8009824:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009828:	f06f 0200 	mvn.w	r2, #0
 800982c:	bf1c      	itt	ne
 800982e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8009832:	4313      	orrne	r3, r2
 8009834:	f04f 0c01 	mov.w	ip, #1
 8009838:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800983c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8009840:	eba3 020c 	sub.w	r2, r3, ip
 8009844:	ea22 0203 	bic.w	r2, r2, r3
 8009848:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800984c:	bf04      	itt	eq
 800984e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8009852:	3004      	addeq	r0, #4
 8009854:	d0f4      	beq.n	8009840 <strlen+0x30>
 8009856:	f013 0fff 	tst.w	r3, #255	; 0xff
 800985a:	bf1f      	itttt	ne
 800985c:	3001      	addne	r0, #1
 800985e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8009862:	3001      	addne	r0, #1
 8009864:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8009868:	bf18      	it	ne
 800986a:	3001      	addne	r0, #1
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <_strtol_r>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	f240 0410 	movw	r4, #16
 8009878:	b085      	sub	sp, #20
 800987a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800987e:	468c      	mov	ip, r1
 8009880:	4699      	mov	r9, r3
 8009882:	9003      	str	r0, [sp, #12]
 8009884:	4608      	mov	r0, r1
 8009886:	f8d4 8000 	ldr.w	r8, [r4]
 800988a:	e000      	b.n	800988e <_strtol_r+0x1e>
 800988c:	4620      	mov	r0, r4
 800988e:	4604      	mov	r4, r0
 8009890:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009894:	eb08 0305 	add.w	r3, r8, r5
 8009898:	7859      	ldrb	r1, [r3, #1]
 800989a:	f001 0108 	and.w	r1, r1, #8
 800989e:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d1f2      	bne.n	800988c <_strtol_r+0x1c>
 80098a6:	2d2d      	cmp	r5, #45	; 0x2d
 80098a8:	d076      	beq.n	8009998 <_strtol_r+0x128>
 80098aa:	2d2b      	cmp	r5, #43	; 0x2b
 80098ac:	bf04      	itt	eq
 80098ae:	1c84      	addeq	r4, r0, #2
 80098b0:	7845      	ldrbeq	r5, [r0, #1]
 80098b2:	f039 0110 	bics.w	r1, r9, #16
 80098b6:	d112      	bne.n	80098de <_strtol_r+0x6e>
 80098b8:	f1d9 0101 	rsbs	r1, r9, #1
 80098bc:	bf38      	it	cc
 80098be:	2100      	movcc	r1, #0
 80098c0:	2d30      	cmp	r5, #48	; 0x30
 80098c2:	d004      	beq.n	80098ce <_strtol_r+0x5e>
 80098c4:	b159      	cbz	r1, 80098de <_strtol_r+0x6e>
 80098c6:	f04f 090a 	mov.w	r9, #10
 80098ca:	46cb      	mov	fp, r9
 80098cc:	e008      	b.n	80098e0 <_strtol_r+0x70>
 80098ce:	7820      	ldrb	r0, [r4, #0]
 80098d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098d4:	2858      	cmp	r0, #88	; 0x58
 80098d6:	d063      	beq.n	80099a0 <_strtol_r+0x130>
 80098d8:	b109      	cbz	r1, 80098de <_strtol_r+0x6e>
 80098da:	f04f 0908 	mov.w	r9, #8
 80098de:	46cb      	mov	fp, r9
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	4659      	mov	r1, fp
 80098e4:	bf0c      	ite	eq
 80098e6:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
 80098ea:	f04f 4600 	movne.w	r6, #2147483648	; 0x80000000
 80098ee:	9200      	str	r2, [sp, #0]
 80098f0:	4630      	mov	r0, r6
 80098f2:	9302      	str	r3, [sp, #8]
 80098f4:	f8cd c004 	str.w	ip, [sp, #4]
 80098f8:	f005 f898 	bl	800ea2c <__aeabi_uidivmod>
 80098fc:	2700      	movs	r7, #0
 80098fe:	4630      	mov	r0, r6
 8009900:	468a      	mov	sl, r1
 8009902:	4659      	mov	r1, fp
 8009904:	f004 ff64 	bl	800e7d0 <__aeabi_uidiv>
 8009908:	4639      	mov	r1, r7
 800990a:	9b02      	ldr	r3, [sp, #8]
 800990c:	e89d 1004 	ldmia.w	sp, {r2, ip}
 8009910:	e00c      	b.n	800992c <_strtol_r+0xbc>
 8009912:	4555      	cmp	r5, sl
 8009914:	bfd4      	ite	le
 8009916:	2600      	movle	r6, #0
 8009918:	2601      	movgt	r6, #1
 800991a:	4281      	cmp	r1, r0
 800991c:	bf18      	it	ne
 800991e:	2600      	movne	r6, #0
 8009920:	b9ee      	cbnz	r6, 800995e <_strtol_r+0xee>
 8009922:	fb0b 5101 	mla	r1, fp, r1, r5
 8009926:	2701      	movs	r7, #1
 8009928:	f814 5b01 	ldrb.w	r5, [r4], #1
 800992c:	eb08 0605 	add.w	r6, r8, r5
 8009930:	7876      	ldrb	r6, [r6, #1]
 8009932:	f016 0f04 	tst.w	r6, #4
 8009936:	bf18      	it	ne
 8009938:	3d30      	subne	r5, #48	; 0x30
 800993a:	d107      	bne.n	800994c <_strtol_r+0xdc>
 800993c:	f016 0603 	ands.w	r6, r6, #3
 8009940:	d010      	beq.n	8009964 <_strtol_r+0xf4>
 8009942:	2e01      	cmp	r6, #1
 8009944:	bf14      	ite	ne
 8009946:	2657      	movne	r6, #87	; 0x57
 8009948:	2637      	moveq	r6, #55	; 0x37
 800994a:	1bad      	subs	r5, r5, r6
 800994c:	45a9      	cmp	r9, r5
 800994e:	dd09      	ble.n	8009964 <_strtol_r+0xf4>
 8009950:	4281      	cmp	r1, r0
 8009952:	bf94      	ite	ls
 8009954:	2600      	movls	r6, #0
 8009956:	2601      	movhi	r6, #1
 8009958:	ea56 77d7 	orrs.w	r7, r6, r7, lsr #31
 800995c:	d0d9      	beq.n	8009912 <_strtol_r+0xa2>
 800995e:	f04f 37ff 	mov.w	r7, #4294967295
 8009962:	e7e1      	b.n	8009928 <_strtol_r+0xb8>
 8009964:	1c78      	adds	r0, r7, #1
 8009966:	d008      	beq.n	800997a <_strtol_r+0x10a>
 8009968:	b9a3      	cbnz	r3, 8009994 <_strtol_r+0x124>
 800996a:	4608      	mov	r0, r1
 800996c:	b112      	cbz	r2, 8009974 <_strtol_r+0x104>
 800996e:	b97f      	cbnz	r7, 8009990 <_strtol_r+0x120>
 8009970:	4664      	mov	r4, ip
 8009972:	6014      	str	r4, [r2, #0]
 8009974:	b005      	add	sp, #20
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997a:	9903      	ldr	r1, [sp, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	bf0c      	ite	eq
 8009980:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009984:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8009988:	2322      	movs	r3, #34	; 0x22
 800998a:	600b      	str	r3, [r1, #0]
 800998c:	2a00      	cmp	r2, #0
 800998e:	d0f1      	beq.n	8009974 <_strtol_r+0x104>
 8009990:	3c01      	subs	r4, #1
 8009992:	e7ee      	b.n	8009972 <_strtol_r+0x102>
 8009994:	4249      	negs	r1, r1
 8009996:	e7e8      	b.n	800996a <_strtol_r+0xfa>
 8009998:	1c84      	adds	r4, r0, #2
 800999a:	7845      	ldrb	r5, [r0, #1]
 800999c:	2301      	movs	r3, #1
 800999e:	e788      	b.n	80098b2 <_strtol_r+0x42>
 80099a0:	f04f 0910 	mov.w	r9, #16
 80099a4:	7865      	ldrb	r5, [r4, #1]
 80099a6:	46cb      	mov	fp, r9
 80099a8:	3402      	adds	r4, #2
 80099aa:	e799      	b.n	80098e0 <_strtol_r+0x70>

080099ac <strtol>:
 80099ac:	b430      	push	{r4, r5}
 80099ae:	f240 0414 	movw	r4, #20
 80099b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80099b6:	460d      	mov	r5, r1
 80099b8:	4613      	mov	r3, r2
 80099ba:	4601      	mov	r1, r0
 80099bc:	462a      	mov	r2, r5
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	bc30      	pop	{r4, r5}
 80099c2:	f7ff bf55 	b.w	8009870 <_strtol_r>
 80099c6:	bf00      	nop

080099c8 <_vsprintf_r>:
 80099c8:	b530      	push	{r4, r5, lr}
 80099ca:	b09b      	sub	sp, #108	; 0x6c
 80099cc:	460c      	mov	r4, r1
 80099ce:	4669      	mov	r1, sp
 80099d0:	9400      	str	r4, [sp, #0]
 80099d2:	f44f 7502 	mov.w	r5, #520	; 0x208
 80099d6:	9404      	str	r4, [sp, #16]
 80099d8:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80099dc:	f8ad 500c 	strh.w	r5, [sp, #12]
 80099e0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80099e4:	9402      	str	r4, [sp, #8]
 80099e6:	9405      	str	r4, [sp, #20]
 80099e8:	f8ad 500e 	strh.w	r5, [sp, #14]
 80099ec:	f000 faf4 	bl	8009fd8 <_svfprintf_r>
 80099f0:	9b00      	ldr	r3, [sp, #0]
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	b01b      	add	sp, #108	; 0x6c
 80099f8:	bd30      	pop	{r4, r5, pc}
 80099fa:	bf00      	nop

080099fc <vsprintf>:
 80099fc:	b430      	push	{r4, r5}
 80099fe:	f240 0414 	movw	r4, #20
 8009a02:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009a06:	460d      	mov	r5, r1
 8009a08:	4613      	mov	r3, r2
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	bc30      	pop	{r4, r5}
 8009a12:	f7ff bfd9 	b.w	80099c8 <_vsprintf_r>
 8009a16:	bf00      	nop

08009a18 <malloc>:
 8009a18:	f240 0314 	movw	r3, #20
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	f000 b808 	b.w	8009a38 <_malloc_r>

08009a28 <free>:
 8009a28:	f240 0314 	movw	r3, #20
 8009a2c:	4601      	mov	r1, r0
 8009a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	f002 bdea 	b.w	800c60c <_free_r>

08009a38 <_malloc_r>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	f101 040b 	add.w	r4, r1, #11
 8009a40:	2c16      	cmp	r4, #22
 8009a42:	b083      	sub	sp, #12
 8009a44:	bf8e      	itee	hi
 8009a46:	f024 0407 	bichi.w	r4, r4, #7
 8009a4a:	2300      	movls	r3, #0
 8009a4c:	2410      	movls	r4, #16
 8009a4e:	4607      	mov	r7, r0
 8009a50:	bf88      	it	hi
 8009a52:	0fe3      	lsrhi	r3, r4, #31
 8009a54:	428c      	cmp	r4, r1
 8009a56:	bf2c      	ite	cs
 8009a58:	4619      	movcs	r1, r3
 8009a5a:	f043 0101 	orrcc.w	r1, r3, #1
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	f040 80ba 	bne.w	8009bd8 <_malloc_r+0x1a0>
 8009a64:	f000 faa0 	bl	8009fa8 <__malloc_lock>
 8009a68:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009a6c:	d220      	bcs.n	8009ab0 <_malloc_r+0x78>
 8009a6e:	f240 1608 	movw	r6, #264	; 0x108
 8009a72:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8009a76:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8009a7a:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 8009a7e:	68d3      	ldr	r3, [r2, #12]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	f000 81f7 	beq.w	8009e74 <_malloc_r+0x43c>
 8009a86:	6859      	ldr	r1, [r3, #4]
 8009a88:	f103 0808 	add.w	r8, r3, #8
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	4638      	mov	r0, r7
 8009a90:	f021 0403 	bic.w	r4, r1, #3
 8009a94:	6899      	ldr	r1, [r3, #8]
 8009a96:	4423      	add	r3, r4
 8009a98:	685c      	ldr	r4, [r3, #4]
 8009a9a:	60ca      	str	r2, [r1, #12]
 8009a9c:	f044 0401 	orr.w	r4, r4, #1
 8009aa0:	6091      	str	r1, [r2, #8]
 8009aa2:	605c      	str	r4, [r3, #4]
 8009aa4:	f000 fa82 	bl	8009fac <__malloc_unlock>
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	b003      	add	sp, #12
 8009aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 8009ab4:	bf04      	itt	eq
 8009ab6:	257e      	moveq	r5, #126	; 0x7e
 8009ab8:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 8009abc:	f040 8094 	bne.w	8009be8 <_malloc_r+0x1b0>
 8009ac0:	f240 1608 	movw	r6, #264	; 0x108
 8009ac4:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8009ac8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8009acc:	68eb      	ldr	r3, [r5, #12]
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	d106      	bne.n	8009ae0 <_malloc_r+0xa8>
 8009ad2:	e00d      	b.n	8009af0 <_malloc_r+0xb8>
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	f280 8164 	bge.w	8009da2 <_malloc_r+0x36a>
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	429d      	cmp	r5, r3
 8009ade:	d007      	beq.n	8009af0 <_malloc_r+0xb8>
 8009ae0:	6859      	ldr	r1, [r3, #4]
 8009ae2:	f021 0103 	bic.w	r1, r1, #3
 8009ae6:	1b0a      	subs	r2, r1, r4
 8009ae8:	2a0f      	cmp	r2, #15
 8009aea:	ddf3      	ble.n	8009ad4 <_malloc_r+0x9c>
 8009aec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009af0:	f10c 0c01 	add.w	ip, ip, #1
 8009af4:	f240 1208 	movw	r2, #264	; 0x108
 8009af8:	6933      	ldr	r3, [r6, #16]
 8009afa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009afe:	f102 0e08 	add.w	lr, r2, #8
 8009b02:	4573      	cmp	r3, lr
 8009b04:	bf08      	it	eq
 8009b06:	6851      	ldreq	r1, [r2, #4]
 8009b08:	d023      	beq.n	8009b52 <_malloc_r+0x11a>
 8009b0a:	6858      	ldr	r0, [r3, #4]
 8009b0c:	f020 0003 	bic.w	r0, r0, #3
 8009b10:	1b01      	subs	r1, r0, r4
 8009b12:	290f      	cmp	r1, #15
 8009b14:	f300 8192 	bgt.w	8009e3c <_malloc_r+0x404>
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	f8c2 e014 	str.w	lr, [r2, #20]
 8009b1e:	f8c2 e010 	str.w	lr, [r2, #16]
 8009b22:	da6c      	bge.n	8009bfe <_malloc_r+0x1c6>
 8009b24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009b28:	f080 8161 	bcs.w	8009dee <_malloc_r+0x3b6>
 8009b2c:	08c0      	lsrs	r0, r0, #3
 8009b2e:	f04f 0801 	mov.w	r8, #1
 8009b32:	6851      	ldr	r1, [r2, #4]
 8009b34:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
 8009b38:	1080      	asrs	r0, r0, #2
 8009b3a:	fa08 f800 	lsl.w	r8, r8, r0
 8009b3e:	ea48 0801 	orr.w	r8, r8, r1
 8009b42:	68a8      	ldr	r0, [r5, #8]
 8009b44:	4641      	mov	r1, r8
 8009b46:	60dd      	str	r5, [r3, #12]
 8009b48:	f8c2 8004 	str.w	r8, [r2, #4]
 8009b4c:	6098      	str	r0, [r3, #8]
 8009b4e:	60ab      	str	r3, [r5, #8]
 8009b50:	60c3      	str	r3, [r0, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8009b58:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5c:	428b      	cmp	r3, r1
 8009b5e:	d85c      	bhi.n	8009c1a <_malloc_r+0x1e2>
 8009b60:	4219      	tst	r1, r3
 8009b62:	d10b      	bne.n	8009b7c <_malloc_r+0x144>
 8009b64:	4093      	lsls	r3, r2
 8009b66:	f02c 0c03 	bic.w	ip, ip, #3
 8009b6a:	4219      	tst	r1, r3
 8009b6c:	f10c 0c04 	add.w	ip, ip, #4
 8009b70:	d104      	bne.n	8009b7c <_malloc_r+0x144>
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	f10c 0c04 	add.w	ip, ip, #4
 8009b78:	4219      	tst	r1, r3
 8009b7a:	d0fa      	beq.n	8009b72 <_malloc_r+0x13a>
 8009b7c:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 8009b80:	46e1      	mov	r9, ip
 8009b82:	4640      	mov	r0, r8
 8009b84:	68c2      	ldr	r2, [r0, #12]
 8009b86:	4290      	cmp	r0, r2
 8009b88:	d107      	bne.n	8009b9a <_malloc_r+0x162>
 8009b8a:	e16b      	b.n	8009e64 <_malloc_r+0x42c>
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	f280 817b 	bge.w	8009e88 <_malloc_r+0x450>
 8009b92:	68d2      	ldr	r2, [r2, #12]
 8009b94:	4290      	cmp	r0, r2
 8009b96:	f000 8165 	beq.w	8009e64 <_malloc_r+0x42c>
 8009b9a:	6855      	ldr	r5, [r2, #4]
 8009b9c:	f025 0503 	bic.w	r5, r5, #3
 8009ba0:	1b29      	subs	r1, r5, r4
 8009ba2:	290f      	cmp	r1, #15
 8009ba4:	ddf2      	ble.n	8009b8c <_malloc_r+0x154>
 8009ba6:	4690      	mov	r8, r2
 8009ba8:	68d5      	ldr	r5, [r2, #12]
 8009baa:	4638      	mov	r0, r7
 8009bac:	1913      	adds	r3, r2, r4
 8009bae:	f858 7f08 	ldr.w	r7, [r8, #8]!
 8009bb2:	f044 0c01 	orr.w	ip, r4, #1
 8009bb6:	f041 0401 	orr.w	r4, r1, #1
 8009bba:	f8c2 c004 	str.w	ip, [r2, #4]
 8009bbe:	60fd      	str	r5, [r7, #12]
 8009bc0:	60af      	str	r7, [r5, #8]
 8009bc2:	6173      	str	r3, [r6, #20]
 8009bc4:	6133      	str	r3, [r6, #16]
 8009bc6:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009bca:	f8c3 e008 	str.w	lr, [r3, #8]
 8009bce:	605c      	str	r4, [r3, #4]
 8009bd0:	5059      	str	r1, [r3, r1]
 8009bd2:	f000 f9eb 	bl	8009fac <__malloc_unlock>
 8009bd6:	e767      	b.n	8009aa8 <_malloc_r+0x70>
 8009bd8:	f04f 0800 	mov.w	r8, #0
 8009bdc:	230c      	movs	r3, #12
 8009bde:	6003      	str	r3, [r0, #0]
 8009be0:	4640      	mov	r0, r8
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	f1bc 0f04 	cmp.w	ip, #4
 8009bec:	f200 80eb 	bhi.w	8009dc6 <_malloc_r+0x38e>
 8009bf0:	ea4f 1c94 	mov.w	ip, r4, lsr #6
 8009bf4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8009bf8:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8009bfc:	e760      	b.n	8009ac0 <_malloc_r+0x88>
 8009bfe:	181a      	adds	r2, r3, r0
 8009c00:	f103 0808 	add.w	r8, r3, #8
 8009c04:	4638      	mov	r0, r7
 8009c06:	6853      	ldr	r3, [r2, #4]
 8009c08:	f043 0301 	orr.w	r3, r3, #1
 8009c0c:	6053      	str	r3, [r2, #4]
 8009c0e:	f000 f9cd 	bl	8009fac <__malloc_unlock>
 8009c12:	4640      	mov	r0, r8
 8009c14:	b003      	add	sp, #12
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	68b5      	ldr	r5, [r6, #8]
 8009c1c:	686b      	ldr	r3, [r5, #4]
 8009c1e:	f023 0a03 	bic.w	sl, r3, #3
 8009c22:	4554      	cmp	r4, sl
 8009c24:	d804      	bhi.n	8009c30 <_malloc_r+0x1f8>
 8009c26:	ebc4 030a 	rsb	r3, r4, sl
 8009c2a:	2b0f      	cmp	r3, #15
 8009c2c:	f300 80a8 	bgt.w	8009d80 <_malloc_r+0x348>
 8009c30:	f240 790c 	movw	r9, #1804	; 0x70c
 8009c34:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8009c38:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	3101      	adds	r1, #1
 8009c40:	eb05 020a 	add.w	r2, r5, sl
 8009c44:	f8d9 3000 	ldr.w	r3, [r9]
 8009c48:	9201      	str	r2, [sp, #4]
 8009c4a:	4423      	add	r3, r4
 8009c4c:	bf17      	itett	ne
 8009c4e:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 8009c52:	f103 0b10 	addeq.w	fp, r3, #16
 8009c56:	330f      	addne	r3, #15
 8009c58:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 8009c5c:	bf18      	it	ne
 8009c5e:	f023 0b0f 	bicne.w	fp, r3, #15
 8009c62:	4659      	mov	r1, fp
 8009c64:	f000 f9a4 	bl	8009fb0 <_sbrk_r>
 8009c68:	9a01      	ldr	r2, [sp, #4]
 8009c6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c6e:	4680      	mov	r8, r0
 8009c70:	f000 8120 	beq.w	8009eb4 <_malloc_r+0x47c>
 8009c74:	4282      	cmp	r2, r0
 8009c76:	f200 811a 	bhi.w	8009eae <_malloc_r+0x476>
 8009c7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009c7e:	4542      	cmp	r2, r8
 8009c80:	445b      	add	r3, fp
 8009c82:	f8c9 3004 	str.w	r3, [r9, #4]
 8009c86:	f000 8165 	beq.w	8009f54 <_malloc_r+0x51c>
 8009c8a:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8009c8e:	f240 1008 	movw	r0, #264	; 0x108
 8009c92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009c96:	3101      	adds	r1, #1
 8009c98:	bf17      	itett	ne
 8009c9a:	ebc2 0208 	rsbne	r2, r2, r8
 8009c9e:	f8c0 8408 	streq.w	r8, [r0, #1032]	; 0x408
 8009ca2:	189b      	addne	r3, r3, r2
 8009ca4:	f8c9 3004 	strne.w	r3, [r9, #4]
 8009ca8:	f018 0307 	ands.w	r3, r8, #7
 8009cac:	4638      	mov	r0, r7
 8009cae:	bf1f      	itttt	ne
 8009cb0:	f1c3 0208 	rsbne	r2, r3, #8
 8009cb4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8009cb8:	4490      	addne	r8, r2
 8009cba:	f103 0208 	addne.w	r2, r3, #8
 8009cbe:	eb08 030b 	add.w	r3, r8, fp
 8009cc2:	bf08      	it	eq
 8009cc4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8009cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ccc:	ebc3 0b02 	rsb	fp, r3, r2
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	f000 f96d 	bl	8009fb0 <_sbrk_r>
 8009cd6:	f240 720c 	movw	r2, #1804	; 0x70c
 8009cda:	f8c6 8008 	str.w	r8, [r6, #8]
 8009cde:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009ce8:	bf15      	itete	ne
 8009cea:	ebc8 0100 	rsbne	r1, r8, r0
 8009cee:	2101      	moveq	r1, #1
 8009cf0:	4459      	addne	r1, fp
 8009cf2:	f04f 0b00 	moveq.w	fp, #0
 8009cf6:	bf18      	it	ne
 8009cf8:	f041 0101 	orrne.w	r1, r1, #1
 8009cfc:	42b5      	cmp	r5, r6
 8009cfe:	445b      	add	r3, fp
 8009d00:	f8c8 1004 	str.w	r1, [r8, #4]
 8009d04:	f8c9 3004 	str.w	r3, [r9, #4]
 8009d08:	d018      	beq.n	8009d3c <_malloc_r+0x304>
 8009d0a:	f1ba 0f0f 	cmp.w	sl, #15
 8009d0e:	f240 8100 	bls.w	8009f12 <_malloc_r+0x4da>
 8009d12:	f1aa 000c 	sub.w	r0, sl, #12
 8009d16:	6869      	ldr	r1, [r5, #4]
 8009d18:	f020 0007 	bic.w	r0, r0, #7
 8009d1c:	f04f 0c05 	mov.w	ip, #5
 8009d20:	eb05 0e00 	add.w	lr, r5, r0
 8009d24:	280f      	cmp	r0, #15
 8009d26:	f001 0101 	and.w	r1, r1, #1
 8009d2a:	ea40 0101 	orr.w	r1, r0, r1
 8009d2e:	6069      	str	r1, [r5, #4]
 8009d30:	f8ce c004 	str.w	ip, [lr, #4]
 8009d34:	f8ce c008 	str.w	ip, [lr, #8]
 8009d38:	f200 8118 	bhi.w	8009f6c <_malloc_r+0x534>
 8009d3c:	f240 720c 	movw	r2, #1804	; 0x70c
 8009d40:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8009d44:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009d48:	68b5      	ldr	r5, [r6, #8]
 8009d4a:	428b      	cmp	r3, r1
 8009d4c:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 8009d50:	bf88      	it	hi
 8009d52:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8009d54:	f240 720c 	movw	r2, #1804	; 0x70c
 8009d58:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf88      	it	hi
 8009d60:	6313      	strhi	r3, [r2, #48]	; 0x30
 8009d62:	686a      	ldr	r2, [r5, #4]
 8009d64:	f022 0203 	bic.w	r2, r2, #3
 8009d68:	4294      	cmp	r4, r2
 8009d6a:	ebc4 0302 	rsb	r3, r4, r2
 8009d6e:	d801      	bhi.n	8009d74 <_malloc_r+0x33c>
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	dc05      	bgt.n	8009d80 <_malloc_r+0x348>
 8009d74:	4638      	mov	r0, r7
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	f000 f917 	bl	8009fac <__malloc_unlock>
 8009d7e:	e693      	b.n	8009aa8 <_malloc_r+0x70>
 8009d80:	192a      	adds	r2, r5, r4
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	4638      	mov	r0, r7
 8009d88:	f044 0401 	orr.w	r4, r4, #1
 8009d8c:	606c      	str	r4, [r5, #4]
 8009d8e:	f105 0808 	add.w	r8, r5, #8
 8009d92:	60b2      	str	r2, [r6, #8]
 8009d94:	6053      	str	r3, [r2, #4]
 8009d96:	f000 f909 	bl	8009fac <__malloc_unlock>
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	b003      	add	sp, #12
 8009d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da2:	4419      	add	r1, r3
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	689c      	ldr	r4, [r3, #8]
 8009da8:	4638      	mov	r0, r7
 8009daa:	684d      	ldr	r5, [r1, #4]
 8009dac:	f103 0808 	add.w	r8, r3, #8
 8009db0:	60e2      	str	r2, [r4, #12]
 8009db2:	f045 0501 	orr.w	r5, r5, #1
 8009db6:	6094      	str	r4, [r2, #8]
 8009db8:	604d      	str	r5, [r1, #4]
 8009dba:	f000 f8f7 	bl	8009fac <__malloc_unlock>
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	b003      	add	sp, #12
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	f1bc 0f14 	cmp.w	ip, #20
 8009dca:	bf9c      	itt	ls
 8009dcc:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8009dd0:	ea4f 054c 	movls.w	r5, ip, lsl #1
 8009dd4:	f67f ae74 	bls.w	8009ac0 <_malloc_r+0x88>
 8009dd8:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8009ddc:	f200 808f 	bhi.w	8009efe <_malloc_r+0x4c6>
 8009de0:	ea4f 3c14 	mov.w	ip, r4, lsr #12
 8009de4:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8009de8:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8009dec:	e668      	b.n	8009ac0 <_malloc_r+0x88>
 8009dee:	0a42      	lsrs	r2, r0, #9
 8009df0:	2a04      	cmp	r2, #4
 8009df2:	d958      	bls.n	8009ea6 <_malloc_r+0x46e>
 8009df4:	2a14      	cmp	r2, #20
 8009df6:	bf9c      	itt	ls
 8009df8:	f102 015b 	addls.w	r1, r2, #91	; 0x5b
 8009dfc:	004d      	lslls	r5, r1, #1
 8009dfe:	d905      	bls.n	8009e0c <_malloc_r+0x3d4>
 8009e00:	2a54      	cmp	r2, #84	; 0x54
 8009e02:	f200 80bc 	bhi.w	8009f7e <_malloc_r+0x546>
 8009e06:	0b01      	lsrs	r1, r0, #12
 8009e08:	316e      	adds	r1, #110	; 0x6e
 8009e0a:	004d      	lsls	r5, r1, #1
 8009e0c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8009e10:	f240 1808 	movw	r8, #264	; 0x108
 8009e14:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8009e18:	68aa      	ldr	r2, [r5, #8]
 8009e1a:	42aa      	cmp	r2, r5
 8009e1c:	d07f      	beq.n	8009f1e <_malloc_r+0x4e6>
 8009e1e:	6851      	ldr	r1, [r2, #4]
 8009e20:	f021 0103 	bic.w	r1, r1, #3
 8009e24:	4288      	cmp	r0, r1
 8009e26:	d202      	bcs.n	8009e2e <_malloc_r+0x3f6>
 8009e28:	6892      	ldr	r2, [r2, #8]
 8009e2a:	4295      	cmp	r5, r2
 8009e2c:	d1f7      	bne.n	8009e1e <_malloc_r+0x3e6>
 8009e2e:	68d0      	ldr	r0, [r2, #12]
 8009e30:	6871      	ldr	r1, [r6, #4]
 8009e32:	60d8      	str	r0, [r3, #12]
 8009e34:	609a      	str	r2, [r3, #8]
 8009e36:	6083      	str	r3, [r0, #8]
 8009e38:	60d3      	str	r3, [r2, #12]
 8009e3a:	e68a      	b.n	8009b52 <_malloc_r+0x11a>
 8009e3c:	191d      	adds	r5, r3, r4
 8009e3e:	f041 0601 	orr.w	r6, r1, #1
 8009e42:	f044 0401 	orr.w	r4, r4, #1
 8009e46:	4638      	mov	r0, r7
 8009e48:	605c      	str	r4, [r3, #4]
 8009e4a:	f103 0808 	add.w	r8, r3, #8
 8009e4e:	6155      	str	r5, [r2, #20]
 8009e50:	6115      	str	r5, [r2, #16]
 8009e52:	f8c5 e00c 	str.w	lr, [r5, #12]
 8009e56:	f8c5 e008 	str.w	lr, [r5, #8]
 8009e5a:	606e      	str	r6, [r5, #4]
 8009e5c:	5069      	str	r1, [r5, r1]
 8009e5e:	f000 f8a5 	bl	8009fac <__malloc_unlock>
 8009e62:	e621      	b.n	8009aa8 <_malloc_r+0x70>
 8009e64:	f109 0901 	add.w	r9, r9, #1
 8009e68:	3008      	adds	r0, #8
 8009e6a:	f019 0f03 	tst.w	r9, #3
 8009e6e:	f47f ae89 	bne.w	8009b84 <_malloc_r+0x14c>
 8009e72:	e028      	b.n	8009ec6 <_malloc_r+0x48e>
 8009e74:	f103 0208 	add.w	r2, r3, #8
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	bf08      	it	eq
 8009e7e:	f10c 0c02 	addeq.w	ip, ip, #2
 8009e82:	f43f ae37 	beq.w	8009af4 <_malloc_r+0xbc>
 8009e86:	e5fe      	b.n	8009a86 <_malloc_r+0x4e>
 8009e88:	4690      	mov	r8, r2
 8009e8a:	4415      	add	r5, r2
 8009e8c:	68d3      	ldr	r3, [r2, #12]
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f858 2f08 	ldr.w	r2, [r8, #8]!
 8009e94:	6869      	ldr	r1, [r5, #4]
 8009e96:	f041 0101 	orr.w	r1, r1, #1
 8009e9a:	6069      	str	r1, [r5, #4]
 8009e9c:	60d3      	str	r3, [r2, #12]
 8009e9e:	609a      	str	r2, [r3, #8]
 8009ea0:	f000 f884 	bl	8009fac <__malloc_unlock>
 8009ea4:	e600      	b.n	8009aa8 <_malloc_r+0x70>
 8009ea6:	0981      	lsrs	r1, r0, #6
 8009ea8:	3138      	adds	r1, #56	; 0x38
 8009eaa:	004d      	lsls	r5, r1, #1
 8009eac:	e7ae      	b.n	8009e0c <_malloc_r+0x3d4>
 8009eae:	42b5      	cmp	r5, r6
 8009eb0:	f43f aee3 	beq.w	8009c7a <_malloc_r+0x242>
 8009eb4:	68b5      	ldr	r5, [r6, #8]
 8009eb6:	686a      	ldr	r2, [r5, #4]
 8009eb8:	f022 0203 	bic.w	r2, r2, #3
 8009ebc:	e754      	b.n	8009d68 <_malloc_r+0x330>
 8009ebe:	f8d8 8000 	ldr.w	r8, [r8]
 8009ec2:	4590      	cmp	r8, r2
 8009ec4:	d16d      	bne.n	8009fa2 <_malloc_r+0x56a>
 8009ec6:	f01c 0f03 	tst.w	ip, #3
 8009eca:	f1a8 0208 	sub.w	r2, r8, #8
 8009ece:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ed2:	d1f4      	bne.n	8009ebe <_malloc_r+0x486>
 8009ed4:	6872      	ldr	r2, [r6, #4]
 8009ed6:	ea22 0203 	bic.w	r2, r2, r3
 8009eda:	6072      	str	r2, [r6, #4]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f63f ae9b 	bhi.w	8009c1a <_malloc_r+0x1e2>
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f43f ae98 	beq.w	8009c1a <_malloc_r+0x1e2>
 8009eea:	421a      	tst	r2, r3
 8009eec:	46cc      	mov	ip, r9
 8009eee:	f47f ae45 	bne.w	8009b7c <_malloc_r+0x144>
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	f10c 0c04 	add.w	ip, ip, #4
 8009ef8:	421a      	tst	r2, r3
 8009efa:	d0fa      	beq.n	8009ef2 <_malloc_r+0x4ba>
 8009efc:	e63e      	b.n	8009b7c <_malloc_r+0x144>
 8009efe:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 8009f02:	d818      	bhi.n	8009f36 <_malloc_r+0x4fe>
 8009f04:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
 8009f08:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8009f0c:	ea4f 054c 	mov.w	r5, ip, lsl #1
 8009f10:	e5d6      	b.n	8009ac0 <_malloc_r+0x88>
 8009f12:	2301      	movs	r3, #1
 8009f14:	4645      	mov	r5, r8
 8009f16:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	e724      	b.n	8009d68 <_malloc_r+0x330>
 8009f1e:	f04f 0901 	mov.w	r9, #1
 8009f22:	108d      	asrs	r5, r1, #2
 8009f24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f28:	4610      	mov	r0, r2
 8009f2a:	fa09 f505 	lsl.w	r5, r9, r5
 8009f2e:	4329      	orrs	r1, r5
 8009f30:	f8c8 1004 	str.w	r1, [r8, #4]
 8009f34:	e77d      	b.n	8009e32 <_malloc_r+0x3fa>
 8009f36:	f240 5354 	movw	r3, #1364	; 0x554
 8009f3a:	459c      	cmp	ip, r3
 8009f3c:	bf95      	itete	ls
 8009f3e:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 8009f42:	25fc      	movhi	r5, #252	; 0xfc
 8009f44:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 8009f48:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8009f4c:	bf98      	it	ls
 8009f4e:	ea4f 054c 	movls.w	r5, ip, lsl #1
 8009f52:	e5b5      	b.n	8009ac0 <_malloc_r+0x88>
 8009f54:	f3c2 010b 	ubfx	r1, r2, #0, #12
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	f47f ae96 	bne.w	8009c8a <_malloc_r+0x252>
 8009f5e:	68b2      	ldr	r2, [r6, #8]
 8009f60:	eb0b 010a 	add.w	r1, fp, sl
 8009f64:	f041 0101 	orr.w	r1, r1, #1
 8009f68:	6051      	str	r1, [r2, #4]
 8009f6a:	e6e7      	b.n	8009d3c <_malloc_r+0x304>
 8009f6c:	f105 0108 	add.w	r1, r5, #8
 8009f70:	4638      	mov	r0, r7
 8009f72:	9201      	str	r2, [sp, #4]
 8009f74:	f002 fb4a 	bl	800c60c <_free_r>
 8009f78:	9a01      	ldr	r2, [sp, #4]
 8009f7a:	6853      	ldr	r3, [r2, #4]
 8009f7c:	e6de      	b.n	8009d3c <_malloc_r+0x304>
 8009f7e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009f82:	d803      	bhi.n	8009f8c <_malloc_r+0x554>
 8009f84:	0bc1      	lsrs	r1, r0, #15
 8009f86:	3177      	adds	r1, #119	; 0x77
 8009f88:	004d      	lsls	r5, r1, #1
 8009f8a:	e73f      	b.n	8009e0c <_malloc_r+0x3d4>
 8009f8c:	f240 5154 	movw	r1, #1364	; 0x554
 8009f90:	428a      	cmp	r2, r1
 8009f92:	bf95      	itete	ls
 8009f94:	0c81      	lsrls	r1, r0, #18
 8009f96:	25fc      	movhi	r5, #252	; 0xfc
 8009f98:	317c      	addls	r1, #124	; 0x7c
 8009f9a:	217e      	movhi	r1, #126	; 0x7e
 8009f9c:	bf98      	it	ls
 8009f9e:	004d      	lslls	r5, r1, #1
 8009fa0:	e734      	b.n	8009e0c <_malloc_r+0x3d4>
 8009fa2:	6872      	ldr	r2, [r6, #4]
 8009fa4:	e79a      	b.n	8009edc <_malloc_r+0x4a4>
 8009fa6:	bf00      	nop

08009fa8 <__malloc_lock>:
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <__malloc_unlock>:
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop

08009fb0 <_sbrk_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	f240 744c 	movw	r4, #1868	; 0x74c
 8009fb6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009fba:	4605      	mov	r5, r0
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	f7fe fe81 	bl	8008cc8 <_sbrk>
 8009fc6:	1c43      	adds	r3, r0, #1
 8009fc8:	d000      	beq.n	8009fcc <_sbrk_r+0x1c>
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0fb      	beq.n	8009fca <_sbrk_r+0x1a>
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop

08009fd8 <_svfprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	b0c9      	sub	sp, #292	; 0x124
 8009fde:	4691      	mov	r9, r2
 8009fe0:	9314      	str	r3, [sp, #80]	; 0x50
 8009fe2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fe4:	900e      	str	r0, [sp, #56]	; 0x38
 8009fe6:	f002 fc19 	bl	800c81c <_localeconv_r>
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	901a      	str	r0, [sp, #104]	; 0x68
 8009fee:	f7ff fc0f 	bl	8009810 <strlen>
 8009ff2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	901d      	str	r0, [sp, #116]	; 0x74
 8009ff8:	0618      	lsls	r0, r3, #24
 8009ffa:	d503      	bpl.n	800a004 <_svfprintf_r+0x2c>
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f001 8079 	beq.w	800b0f6 <_svfprintf_r+0x111e>
 800a004:	f640 35c8 	movw	r5, #3016	; 0xbc8
 800a008:	ac38      	add	r4, sp, #224	; 0xe0
 800a00a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800a00e:	9515      	str	r5, [sp, #84]	; 0x54
 800a010:	f10d 05df 	add.w	r5, sp, #223	; 0xdf
 800a014:	9508      	str	r5, [sp, #32]
 800a016:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a018:	af38      	add	r7, sp, #224	; 0xe0
 800a01a:	9409      	str	r4, [sp, #36]	; 0x24
 800a01c:	f241 0458 	movw	r4, #4184	; 0x1058
 800a020:	f105 0610 	add.w	r6, r5, #16
 800a024:	9d08      	ldr	r5, [sp, #32]
 800a026:	2300      	movs	r3, #0
 800a028:	f6c0 0401 	movt	r4, #2049	; 0x801
 800a02c:	9311      	str	r3, [sp, #68]	; 0x44
 800a02e:	9417      	str	r4, [sp, #92]	; 0x5c
 800a030:	1b7c      	subs	r4, r7, r5
 800a032:	931b      	str	r3, [sp, #108]	; 0x6c
 800a034:	931c      	str	r3, [sp, #112]	; 0x70
 800a036:	9319      	str	r3, [sp, #100]	; 0x64
 800a038:	931e      	str	r3, [sp, #120]	; 0x78
 800a03a:	9312      	str	r3, [sp, #72]	; 0x48
 800a03c:	9421      	str	r4, [sp, #132]	; 0x84
 800a03e:	932d      	str	r3, [sp, #180]	; 0xb4
 800a040:	932c      	str	r3, [sp, #176]	; 0xb0
 800a042:	972b      	str	r7, [sp, #172]	; 0xac
 800a044:	f899 3000 	ldrb.w	r3, [r9]
 800a048:	2b25      	cmp	r3, #37	; 0x25
 800a04a:	bf18      	it	ne
 800a04c:	2b00      	cmpne	r3, #0
 800a04e:	f000 80b3 	beq.w	800a1b8 <_svfprintf_r+0x1e0>
 800a052:	f109 0201 	add.w	r2, r9, #1
 800a056:	4614      	mov	r4, r2
 800a058:	3201      	adds	r2, #1
 800a05a:	7823      	ldrb	r3, [r4, #0]
 800a05c:	2b25      	cmp	r3, #37	; 0x25
 800a05e:	bf18      	it	ne
 800a060:	2b00      	cmpne	r3, #0
 800a062:	d1f8      	bne.n	800a056 <_svfprintf_r+0x7e>
 800a064:	ebb4 0509 	subs.w	r5, r4, r9
 800a068:	d00f      	beq.n	800a08a <_svfprintf_r+0xb2>
 800a06a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a06c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a06e:	3301      	adds	r3, #1
 800a070:	f8c7 9000 	str.w	r9, [r7]
 800a074:	2b07      	cmp	r3, #7
 800a076:	607d      	str	r5, [r7, #4]
 800a078:	442a      	add	r2, r5
 800a07a:	932c      	str	r3, [sp, #176]	; 0xb0
 800a07c:	922d      	str	r2, [sp, #180]	; 0xb4
 800a07e:	bfd8      	it	le
 800a080:	3708      	addle	r7, #8
 800a082:	dc7f      	bgt.n	800a184 <_svfprintf_r+0x1ac>
 800a084:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a086:	4428      	add	r0, r5
 800a088:	9012      	str	r0, [sp, #72]	; 0x48
 800a08a:	7823      	ldrb	r3, [r4, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8081 	beq.w	800a194 <_svfprintf_r+0x1bc>
 800a092:	2300      	movs	r3, #0
 800a094:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800a098:	461a      	mov	r2, r3
 800a09a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a09c:	930a      	str	r3, [sp, #40]	; 0x28
 800a09e:	f104 0901 	add.w	r9, r4, #1
 800a0a2:	7863      	ldrb	r3, [r4, #1]
 800a0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0a8:	940c      	str	r4, [sp, #48]	; 0x30
 800a0aa:	f109 0901 	add.w	r9, r9, #1
 800a0ae:	f1a3 0120 	sub.w	r1, r3, #32
 800a0b2:	2958      	cmp	r1, #88	; 0x58
 800a0b4:	f200 840a 	bhi.w	800a8cc <_svfprintf_r+0x8f4>
 800a0b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a0bc:	0408038e 	streq	r0, [r8], #-910	; 0xfffffc72
 800a0c0:	03950408 	orrseq	r0, r5, #8, 8	; 0x8000000
 800a0c4:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0c8:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0cc:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0d0:	0348039c 	movteq	r0, #33692	; 0x839c
 800a0d4:	005d0408 	subseq	r0, sp, r8, lsl #8
 800a0d8:	04080235 	streq	r0, [r8], #-565	; 0xfffffdcb
 800a0dc:	03f603ef 	mvnseq	r0, #-1140850685	; 0xbc000003
 800a0e0:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 800a0e4:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 800a0e8:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 800a0ec:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 800a0f0:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0f4:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0f8:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a0fc:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a100:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a104:	0290026e 	addseq	r0, r0, #-536870906	; 0xe0000006
 800a108:	02900408 	addseq	r0, r0, #8, 8	; 0x8000000
 800a10c:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a110:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a114:	040802cd 	streq	r0, [r8], #-717	; 0xfffffd33
 800a118:	02d40408 	sbcseq	r0, r4, #8, 8	; 0x8000000
 800a11c:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a120:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a124:	02550408 	subseq	r0, r5, #8, 8	; 0x8000000
 800a128:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a12c:	040803bc 	streq	r0, [r8], #-956	; 0xfffffc44
 800a130:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a134:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a138:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a13c:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a140:	03a80408 			; <UNDEFINED> instruction: 0x03a80408
 800a144:	029003d7 	addseq	r0, r0, #1543503875	; 0x5c000003
 800a148:	02900290 	addseq	r0, r0, #144, 4
 800a14c:	03d70387 	bicseq	r0, r7, #469762050	; 0x1c000002
 800a150:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a154:	0408034c 	streq	r0, [r8], #-844	; 0xfffffcb4
 800a158:	0224035e 	eoreq	r0, r4, #2013265921	; 0x78000001
 800a15c:	02f00370 	rscseq	r0, r0, #112, 6	; 0xc0000001
 800a160:	02f70408 	rscseq	r0, r7, #8, 8	; 0x8000000
 800a164:	00800408 	addeq	r0, r0, r8, lsl #8
 800a168:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 800a16c:	9c130320 	ldcls	3, cr0, [r3], {32}
 800a170:	9314      	str	r3, [sp, #80]	; 0x50
 800a172:	4264      	negs	r4, r4
 800a174:	9413      	str	r4, [sp, #76]	; 0x4c
 800a176:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a178:	f045 0504 	orr.w	r5, r5, #4
 800a17c:	950a      	str	r5, [sp, #40]	; 0x28
 800a17e:	f899 3000 	ldrb.w	r3, [r9]
 800a182:	e792      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a184:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a186:	aa2b      	add	r2, sp, #172	; 0xac
 800a188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a18a:	f003 fa51 	bl	800d630 <__ssprint_r>
 800a18e:	b940      	cbnz	r0, 800a1a2 <_svfprintf_r+0x1ca>
 800a190:	af38      	add	r7, sp, #224	; 0xe0
 800a192:	e777      	b.n	800a084 <_svfprintf_r+0xac>
 800a194:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a196:	b123      	cbz	r3, 800a1a2 <_svfprintf_r+0x1ca>
 800a198:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a19a:	aa2b      	add	r2, sp, #172	; 0xac
 800a19c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a19e:	f003 fa47 	bl	800d630 <__ssprint_r>
 800a1a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a1a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a1ac:	bf18      	it	ne
 800a1ae:	f04f 30ff 	movne.w	r0, #4294967295
 800a1b2:	b049      	add	sp, #292	; 0x124
 800a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b8:	464c      	mov	r4, r9
 800a1ba:	e766      	b.n	800a08a <_svfprintf_r+0xb2>
 800a1bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1be:	9316      	str	r3, [sp, #88]	; 0x58
 800a1c0:	06a3      	lsls	r3, r4, #26
 800a1c2:	f140 81d9 	bpl.w	800a578 <_svfprintf_r+0x5a0>
 800a1c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	1dea      	adds	r2, r5, #7
 800a1cc:	f022 0207 	bic.w	r2, r2, #7
 800a1d0:	f102 0408 	add.w	r4, r2, #8
 800a1d4:	9414      	str	r4, [sp, #80]	; 0x50
 800a1d6:	e9d2 4500 	ldrd	r4, r5, [r2]
 800a1da:	f04f 0a00 	mov.w	sl, #0
 800a1de:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800a1e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1e8:	bfa2      	ittt	ge
 800a1ea:	990a      	ldrge	r1, [sp, #40]	; 0x28
 800a1ec:	f021 0180 	bicge.w	r1, r1, #128	; 0x80
 800a1f0:	910a      	strge	r1, [sp, #40]	; 0x28
 800a1f2:	ea54 0205 	orrs.w	r2, r4, r5
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2200      	moveq	r2, #0
 800a1fa:	2201      	movne	r2, #1
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bf18      	it	ne
 800a200:	f042 0201 	orrne.w	r2, r2, #1
 800a204:	2a00      	cmp	r2, #0
 800a206:	f000 83e5 	beq.w	800a9d4 <_svfprintf_r+0x9fc>
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	f000 8509 	beq.w	800ac22 <_svfprintf_r+0xc4a>
 800a210:	2b02      	cmp	r3, #2
 800a212:	f10d 02df 	add.w	r2, sp, #223	; 0xdf
 800a216:	f040 8159 	bne.w	800a4cc <_svfprintf_r+0x4f4>
 800a21a:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800a21e:	f004 010f 	and.w	r1, r4, #15
 800a222:	0923      	lsrs	r3, r4, #4
 800a224:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800a228:	0928      	lsrs	r0, r5, #4
 800a22a:	f81c 1001 	ldrb.w	r1, [ip, r1]
 800a22e:	461c      	mov	r4, r3
 800a230:	4605      	mov	r5, r0
 800a232:	4690      	mov	r8, r2
 800a234:	ea54 0005 	orrs.w	r0, r4, r5
 800a238:	f102 32ff 	add.w	r2, r2, #4294967295
 800a23c:	f888 1000 	strb.w	r1, [r8]
 800a240:	d1ed      	bne.n	800a21e <_svfprintf_r+0x246>
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	ebc8 0303 	rsb	r3, r8, r3
 800a248:	9310      	str	r3, [sp, #64]	; 0x40
 800a24a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a24c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a24e:	42a5      	cmp	r5, r4
 800a250:	bfb8      	it	lt
 800a252:	4625      	movlt	r5, r4
 800a254:	2400      	movs	r4, #0
 800a256:	950d      	str	r5, [sp, #52]	; 0x34
 800a258:	9418      	str	r4, [sp, #96]	; 0x60
 800a25a:	f1ba 0f00 	cmp.w	sl, #0
 800a25e:	d002      	beq.n	800a266 <_svfprintf_r+0x28e>
 800a260:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a262:	3501      	adds	r5, #1
 800a264:	950d      	str	r5, [sp, #52]	; 0x34
 800a266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a268:	f013 0302 	ands.w	r3, r3, #2
 800a26c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a26e:	bf1e      	ittt	ne
 800a270:	9c0d      	ldrne	r4, [sp, #52]	; 0x34
 800a272:	3402      	addne	r4, #2
 800a274:	940d      	strne	r4, [sp, #52]	; 0x34
 800a276:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a278:	f014 0584 	ands.w	r5, r4, #132	; 0x84
 800a27c:	f040 8346 	bne.w	800a90c <_svfprintf_r+0x934>
 800a280:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a282:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a284:	ebc0 0b04 	rsb	fp, r0, r4
 800a288:	f1bb 0f00 	cmp.w	fp, #0
 800a28c:	f340 833e 	ble.w	800a90c <_svfprintf_r+0x934>
 800a290:	f1bb 0f10 	cmp.w	fp, #16
 800a294:	f640 3ac8 	movw	sl, #3016	; 0xbc8
 800a298:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a29a:	bfdc      	itt	le
 800a29c:	f6c0 0a01 	movtle	sl, #2049	; 0x801
 800a2a0:	9a2c      	ldrle	r2, [sp, #176]	; 0xb0
 800a2a2:	dd32      	ble.n	800a30a <_svfprintf_r+0x332>
 800a2a4:	f6c0 0a01 	movt	sl, #2049	; 0x801
 800a2a8:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
 800a2ac:	9520      	str	r5, [sp, #128]	; 0x80
 800a2ae:	46d8      	mov	r8, fp
 800a2b0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a2b2:	46d3      	mov	fp, sl
 800a2b4:	2410      	movs	r4, #16
 800a2b6:	46ca      	mov	sl, r9
 800a2b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a2ba:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a2be:	e004      	b.n	800a2ca <_svfprintf_r+0x2f2>
 800a2c0:	f1a8 0810 	sub.w	r8, r8, #16
 800a2c4:	f1b8 0f10 	cmp.w	r8, #16
 800a2c8:	dd19      	ble.n	800a2fe <_svfprintf_r+0x326>
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	3110      	adds	r1, #16
 800a2ce:	2a07      	cmp	r2, #7
 800a2d0:	603d      	str	r5, [r7, #0]
 800a2d2:	607c      	str	r4, [r7, #4]
 800a2d4:	f107 0708 	add.w	r7, r7, #8
 800a2d8:	922c      	str	r2, [sp, #176]	; 0xb0
 800a2da:	912d      	str	r1, [sp, #180]	; 0xb4
 800a2dc:	ddf0      	ble.n	800a2c0 <_svfprintf_r+0x2e8>
 800a2de:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	aa2b      	add	r2, sp, #172	; 0xac
 800a2e4:	af38      	add	r7, sp, #224	; 0xe0
 800a2e6:	f003 f9a3 	bl	800d630 <__ssprint_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f47f af59 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a2f0:	f1a8 0810 	sub.w	r8, r8, #16
 800a2f4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800a2f6:	f1b8 0f10 	cmp.w	r8, #16
 800a2fa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800a2fc:	dce5      	bgt.n	800a2ca <_svfprintf_r+0x2f2>
 800a2fe:	46d1      	mov	r9, sl
 800a300:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a302:	46da      	mov	sl, fp
 800a304:	46c3      	mov	fp, r8
 800a306:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 800a30a:	3201      	adds	r2, #1
 800a30c:	eb0b 0401 	add.w	r4, fp, r1
 800a310:	2a07      	cmp	r2, #7
 800a312:	922c      	str	r2, [sp, #176]	; 0xb0
 800a314:	942d      	str	r4, [sp, #180]	; 0xb4
 800a316:	e887 0c00 	stmia.w	r7, {sl, fp}
 800a31a:	f300 82ec 	bgt.w	800a8f6 <_svfprintf_r+0x91e>
 800a31e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800a322:	3708      	adds	r7, #8
 800a324:	f1ba 0f00 	cmp.w	sl, #0
 800a328:	d00e      	beq.n	800a348 <_svfprintf_r+0x370>
 800a32a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a32c:	f10d 028f 	add.w	r2, sp, #143	; 0x8f
 800a330:	3401      	adds	r4, #1
 800a332:	603a      	str	r2, [r7, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	2201      	movs	r2, #1
 800a338:	2b07      	cmp	r3, #7
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	942d      	str	r4, [sp, #180]	; 0xb4
 800a33e:	bfd8      	it	le
 800a340:	3708      	addle	r7, #8
 800a342:	932c      	str	r3, [sp, #176]	; 0xb0
 800a344:	f300 8402 	bgt.w	800ab4c <_svfprintf_r+0xb74>
 800a348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34a:	b16b      	cbz	r3, 800a368 <_svfprintf_r+0x390>
 800a34c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a34e:	aa24      	add	r2, sp, #144	; 0x90
 800a350:	3402      	adds	r4, #2
 800a352:	603a      	str	r2, [r7, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	2202      	movs	r2, #2
 800a358:	2b07      	cmp	r3, #7
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	942d      	str	r4, [sp, #180]	; 0xb4
 800a35e:	bfd8      	it	le
 800a360:	3708      	addle	r7, #8
 800a362:	932c      	str	r3, [sp, #176]	; 0xb0
 800a364:	f300 83fe 	bgt.w	800ab64 <_svfprintf_r+0xb8c>
 800a368:	2d80      	cmp	r5, #128	; 0x80
 800a36a:	f000 8346 	beq.w	800a9fa <_svfprintf_r+0xa22>
 800a36e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a372:	ebc3 0a05 	rsb	sl, r3, r5
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	dd43      	ble.n	800a404 <_svfprintf_r+0x42c>
 800a37c:	f1ba 0f10 	cmp.w	sl, #16
 800a380:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a382:	bfdc      	itt	le
 800a384:	4d94      	ldrle	r5, [pc, #592]	; (800a5d8 <_svfprintf_r+0x600>)
 800a386:	950f      	strle	r5, [sp, #60]	; 0x3c
 800a388:	dd27      	ble.n	800a3da <_svfprintf_r+0x402>
 800a38a:	4893      	ldr	r0, [pc, #588]	; (800a5d8 <_svfprintf_r+0x600>)
 800a38c:	4622      	mov	r2, r4
 800a38e:	2510      	movs	r5, #16
 800a390:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800a394:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a396:	900f      	str	r0, [sp, #60]	; 0x3c
 800a398:	e004      	b.n	800a3a4 <_svfprintf_r+0x3cc>
 800a39a:	f1aa 0a10 	sub.w	sl, sl, #16
 800a39e:	f1ba 0f10 	cmp.w	sl, #16
 800a3a2:	dd19      	ble.n	800a3d8 <_svfprintf_r+0x400>
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	3210      	adds	r2, #16
 800a3a8:	2b07      	cmp	r3, #7
 800a3aa:	603e      	str	r6, [r7, #0]
 800a3ac:	607d      	str	r5, [r7, #4]
 800a3ae:	f107 0708 	add.w	r7, r7, #8
 800a3b2:	932c      	str	r3, [sp, #176]	; 0xb0
 800a3b4:	922d      	str	r2, [sp, #180]	; 0xb4
 800a3b6:	ddf0      	ble.n	800a39a <_svfprintf_r+0x3c2>
 800a3b8:	4658      	mov	r0, fp
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	aa2b      	add	r2, sp, #172	; 0xac
 800a3be:	af38      	add	r7, sp, #224	; 0xe0
 800a3c0:	f003 f936 	bl	800d630 <__ssprint_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f47f aeec 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a3ca:	f1aa 0a10 	sub.w	sl, sl, #16
 800a3ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a3d0:	f1ba 0f10 	cmp.w	sl, #16
 800a3d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a3d6:	dce5      	bgt.n	800a3a4 <_svfprintf_r+0x3cc>
 800a3d8:	4614      	mov	r4, r2
 800a3da:	3301      	adds	r3, #1
 800a3dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	4454      	add	r4, sl
 800a3e2:	932c      	str	r3, [sp, #176]	; 0xb0
 800a3e4:	e887 0420 	stmia.w	r7, {r5, sl}
 800a3e8:	bfd8      	it	le
 800a3ea:	3708      	addle	r7, #8
 800a3ec:	942d      	str	r4, [sp, #180]	; 0xb4
 800a3ee:	dd09      	ble.n	800a404 <_svfprintf_r+0x42c>
 800a3f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a3f2:	aa2b      	add	r2, sp, #172	; 0xac
 800a3f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3f6:	f003 f91b 	bl	800d630 <__ssprint_r>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f47f aed1 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a400:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800a402:	af38      	add	r7, sp, #224	; 0xe0
 800a404:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a406:	05eb      	lsls	r3, r5, #23
 800a408:	f100 8282 	bmi.w	800a910 <_svfprintf_r+0x938>
 800a40c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a40e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a410:	3301      	adds	r3, #1
 800a412:	f8c7 8000 	str.w	r8, [r7]
 800a416:	2b07      	cmp	r3, #7
 800a418:	442c      	add	r4, r5
 800a41a:	607d      	str	r5, [r7, #4]
 800a41c:	942d      	str	r4, [sp, #180]	; 0xb4
 800a41e:	932c      	str	r3, [sp, #176]	; 0xb0
 800a420:	f300 837a 	bgt.w	800ab18 <_svfprintf_r+0xb40>
 800a424:	3708      	adds	r7, #8
 800a426:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a428:	076b      	lsls	r3, r5, #29
 800a42a:	d540      	bpl.n	800a4ae <_svfprintf_r+0x4d6>
 800a42c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a42e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a430:	1a45      	subs	r5, r0, r1
 800a432:	2d00      	cmp	r5, #0
 800a434:	dd3b      	ble.n	800a4ae <_svfprintf_r+0x4d6>
 800a436:	2d10      	cmp	r5, #16
 800a438:	f640 3ac8 	movw	sl, #3016	; 0xbc8
 800a43c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a43e:	f6c0 0a01 	movt	sl, #2049	; 0x801
 800a442:	dd22      	ble.n	800a48a <_svfprintf_r+0x4b2>
 800a444:	4622      	mov	r2, r4
 800a446:	f04f 0810 	mov.w	r8, #16
 800a44a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800a44e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a450:	e002      	b.n	800a458 <_svfprintf_r+0x480>
 800a452:	3d10      	subs	r5, #16
 800a454:	2d10      	cmp	r5, #16
 800a456:	dd17      	ble.n	800a488 <_svfprintf_r+0x4b0>
 800a458:	3301      	adds	r3, #1
 800a45a:	3210      	adds	r2, #16
 800a45c:	2b07      	cmp	r3, #7
 800a45e:	e887 0110 	stmia.w	r7, {r4, r8}
 800a462:	932c      	str	r3, [sp, #176]	; 0xb0
 800a464:	f107 0708 	add.w	r7, r7, #8
 800a468:	922d      	str	r2, [sp, #180]	; 0xb4
 800a46a:	ddf2      	ble.n	800a452 <_svfprintf_r+0x47a>
 800a46c:	4658      	mov	r0, fp
 800a46e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a470:	aa2b      	add	r2, sp, #172	; 0xac
 800a472:	af38      	add	r7, sp, #224	; 0xe0
 800a474:	f003 f8dc 	bl	800d630 <__ssprint_r>
 800a478:	2800      	cmp	r0, #0
 800a47a:	f47f ae92 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a47e:	3d10      	subs	r5, #16
 800a480:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a482:	2d10      	cmp	r5, #16
 800a484:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a486:	dce7      	bgt.n	800a458 <_svfprintf_r+0x480>
 800a488:	4614      	mov	r4, r2
 800a48a:	3301      	adds	r3, #1
 800a48c:	442c      	add	r4, r5
 800a48e:	2b07      	cmp	r3, #7
 800a490:	932c      	str	r3, [sp, #176]	; 0xb0
 800a492:	942d      	str	r4, [sp, #180]	; 0xb4
 800a494:	f8c7 a000 	str.w	sl, [r7]
 800a498:	607d      	str	r5, [r7, #4]
 800a49a:	dd08      	ble.n	800a4ae <_svfprintf_r+0x4d6>
 800a49c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a49e:	aa2b      	add	r2, sp, #172	; 0xac
 800a4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4a2:	f003 f8c5 	bl	800d630 <__ssprint_r>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	f47f ae7b 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a4ac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800a4ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800a4b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a4b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a4b4:	4281      	cmp	r1, r0
 800a4b6:	bfac      	ite	ge
 800a4b8:	186d      	addge	r5, r5, r1
 800a4ba:	182d      	addlt	r5, r5, r0
 800a4bc:	9512      	str	r5, [sp, #72]	; 0x48
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	f040 8335 	bne.w	800ab2e <_svfprintf_r+0xb56>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	af38      	add	r7, sp, #224	; 0xe0
 800a4c8:	932c      	str	r3, [sp, #176]	; 0xb0
 800a4ca:	e5bb      	b.n	800a044 <_svfprintf_r+0x6c>
 800a4cc:	08e3      	lsrs	r3, r4, #3
 800a4ce:	08e9      	lsrs	r1, r5, #3
 800a4d0:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	f004 0207 	and.w	r2, r4, #7
 800a4dc:	461c      	mov	r4, r3
 800a4de:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800a4e2:	ea54 0105 	orrs.w	r1, r4, r5
 800a4e6:	f108 32ff 	add.w	r2, r8, #4294967295
 800a4ea:	f888 3000 	strb.w	r3, [r8]
 800a4ee:	d1ed      	bne.n	800a4cc <_svfprintf_r+0x4f4>
 800a4f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	07e0      	lsls	r0, r4, #31
 800a4f6:	f100 84f5 	bmi.w	800aee4 <_svfprintf_r+0xf0c>
 800a4fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4fc:	ebc8 0505 	rsb	r5, r8, r5
 800a500:	9510      	str	r5, [sp, #64]	; 0x40
 800a502:	e6a2      	b.n	800a24a <_svfprintf_r+0x272>
 800a504:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a506:	9316      	str	r3, [sp, #88]	; 0x58
 800a508:	f015 0320 	ands.w	r3, r5, #32
 800a50c:	f000 80b4 	beq.w	800a678 <_svfprintf_r+0x6a0>
 800a510:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a512:	2300      	movs	r3, #0
 800a514:	1de2      	adds	r2, r4, #7
 800a516:	f022 0207 	bic.w	r2, r2, #7
 800a51a:	f102 0508 	add.w	r5, r2, #8
 800a51e:	9514      	str	r5, [sp, #80]	; 0x50
 800a520:	e9d2 4500 	ldrd	r4, r5, [r2]
 800a524:	e659      	b.n	800a1da <_svfprintf_r+0x202>
 800a526:	f899 3000 	ldrb.w	r3, [r9]
 800a52a:	f109 0401 	add.w	r4, r9, #1
 800a52e:	2b2a      	cmp	r3, #42	; 0x2a
 800a530:	f000 8791 	beq.w	800b456 <_svfprintf_r+0x147e>
 800a534:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a538:	2909      	cmp	r1, #9
 800a53a:	bf82      	ittt	hi
 800a53c:	46a1      	movhi	r9, r4
 800a53e:	2400      	movhi	r4, #0
 800a540:	940c      	strhi	r4, [sp, #48]	; 0x30
 800a542:	f63f adb4 	bhi.w	800a0ae <_svfprintf_r+0xd6>
 800a546:	2000      	movs	r0, #0
 800a548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a54c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a550:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800a554:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a558:	2909      	cmp	r1, #9
 800a55a:	d9f5      	bls.n	800a548 <_svfprintf_r+0x570>
 800a55c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 800a560:	46a1      	mov	r9, r4
 800a562:	900c      	str	r0, [sp, #48]	; 0x30
 800a564:	e5a3      	b.n	800a0ae <_svfprintf_r+0xd6>
 800a566:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a568:	9316      	str	r3, [sp, #88]	; 0x58
 800a56a:	f045 0510 	orr.w	r5, r5, #16
 800a56e:	950a      	str	r5, [sp, #40]	; 0x28
 800a570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a572:	06a3      	lsls	r3, r4, #26
 800a574:	f53f ae27 	bmi.w	800a1c6 <_svfprintf_r+0x1ee>
 800a578:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a57a:	06ed      	lsls	r5, r5, #27
 800a57c:	f100 83c4 	bmi.w	800ad08 <_svfprintf_r+0xd30>
 800a580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a582:	0664      	lsls	r4, r4, #25
 800a584:	f140 83c0 	bpl.w	800ad08 <_svfprintf_r+0xd30>
 800a588:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a58a:	2500      	movs	r5, #0
 800a58c:	2301      	movs	r3, #1
 800a58e:	3004      	adds	r0, #4
 800a590:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800a594:	9014      	str	r0, [sp, #80]	; 0x50
 800a596:	e620      	b.n	800a1da <_svfprintf_r+0x202>
 800a598:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a59a:	9316      	str	r3, [sp, #88]	; 0x58
 800a59c:	f044 0410 	orr.w	r4, r4, #16
 800a5a0:	940a      	str	r4, [sp, #40]	; 0x28
 800a5a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a5a4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a5a8:	06a9      	lsls	r1, r5, #26
 800a5aa:	f140 8165 	bpl.w	800a878 <_svfprintf_r+0x8a0>
 800a5ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a5b0:	1de3      	adds	r3, r4, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	f103 0508 	add.w	r5, r3, #8
 800a5ba:	9514      	str	r5, [sp, #80]	; 0x50
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	4614      	mov	r4, r2
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	2a00      	cmp	r2, #0
 800a5c6:	f173 0000 	sbcs.w	r0, r3, #0
 800a5ca:	f2c0 83bb 	blt.w	800ad44 <_svfprintf_r+0xd6c>
 800a5ce:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e605      	b.n	800a1e2 <_svfprintf_r+0x20a>
 800a5d6:	bf00      	nop
 800a5d8:	08010bd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp}
 800a5dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5de:	9316      	str	r3, [sp, #88]	; 0x58
 800a5e0:	0725      	lsls	r5, r4, #28
 800a5e2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a5e6:	f140 84ab 	bpl.w	800af40 <_svfprintf_r+0xf68>
 800a5ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a5ec:	1deb      	adds	r3, r5, #7
 800a5ee:	f023 0307 	bic.w	r3, r3, #7
 800a5f2:	f103 0408 	add.w	r4, r3, #8
 800a5f6:	9414      	str	r4, [sp, #80]	; 0x50
 800a5f8:	681d      	ldr	r5, [r3, #0]
 800a5fa:	951b      	str	r5, [sp, #108]	; 0x6c
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	931c      	str	r3, [sp, #112]	; 0x70
 800a600:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a602:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a604:	f002 fece 	bl	800d3a4 <__fpclassifyd>
 800a608:	2801      	cmp	r0, #1
 800a60a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a60c:	f040 8478 	bne.w	800af00 <_svfprintf_r+0xf28>
 800a610:	2200      	movs	r2, #0
 800a612:	2300      	movs	r3, #0
 800a614:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a616:	f004 fe43 	bl	800f2a0 <__aeabi_dcmplt>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	f040 864a 	bne.w	800b2b4 <_svfprintf_r+0x12dc>
 800a620:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800a624:	2503      	movs	r5, #3
 800a626:	2400      	movs	r4, #0
 800a628:	f241 081c 	movw	r8, #4124	; 0x101c
 800a62c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a630:	950d      	str	r5, [sp, #52]	; 0x34
 800a632:	f6c0 0801 	movt	r8, #2049	; 0x801
 800a636:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a638:	f6c0 0301 	movt	r3, #2049	; 0x801
 800a63c:	940c      	str	r4, [sp, #48]	; 0x30
 800a63e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800a640:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a644:	950a      	str	r5, [sp, #40]	; 0x28
 800a646:	2503      	movs	r5, #3
 800a648:	2c47      	cmp	r4, #71	; 0x47
 800a64a:	bfd8      	it	le
 800a64c:	4698      	movle	r8, r3
 800a64e:	9510      	str	r5, [sp, #64]	; 0x40
 800a650:	2400      	movs	r4, #0
 800a652:	9418      	str	r4, [sp, #96]	; 0x60
 800a654:	e601      	b.n	800a25a <_svfprintf_r+0x282>
 800a656:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a658:	f045 0508 	orr.w	r5, r5, #8
 800a65c:	950a      	str	r5, [sp, #40]	; 0x28
 800a65e:	f899 3000 	ldrb.w	r3, [r9]
 800a662:	e522      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a666:	9316      	str	r3, [sp, #88]	; 0x58
 800a668:	f044 0410 	orr.w	r4, r4, #16
 800a66c:	940a      	str	r4, [sp, #40]	; 0x28
 800a66e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a670:	f015 0320 	ands.w	r3, r5, #32
 800a674:	f47f af4c 	bne.w	800a510 <_svfprintf_r+0x538>
 800a678:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a67a:	f014 0210 	ands.w	r2, r4, #16
 800a67e:	f040 834c 	bne.w	800ad1a <_svfprintf_r+0xd42>
 800a682:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a684:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800a688:	f000 8347 	beq.w	800ad1a <_svfprintf_r+0xd42>
 800a68c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a68e:	4613      	mov	r3, r2
 800a690:	2500      	movs	r5, #0
 800a692:	3004      	adds	r0, #4
 800a694:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800a698:	9014      	str	r0, [sp, #80]	; 0x50
 800a69a:	e59e      	b.n	800a1da <_svfprintf_r+0x202>
 800a69c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a69e:	f045 0520 	orr.w	r5, r5, #32
 800a6a2:	950a      	str	r5, [sp, #40]	; 0x28
 800a6a4:	f899 3000 	ldrb.w	r3, [r9]
 800a6a8:	e4ff      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a6aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a6ac:	2500      	movs	r5, #0
 800a6ae:	9316      	str	r3, [sp, #88]	; 0x58
 800a6b0:	3404      	adds	r4, #4
 800a6b2:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
 800a6b6:	f854 8c04 	ldr.w	r8, [r4, #-4]
 800a6ba:	f1b8 0f00 	cmp.w	r8, #0
 800a6be:	f000 85d9 	beq.w	800b274 <_svfprintf_r+0x129c>
 800a6c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	4640      	mov	r0, r8
 800a6c8:	f2c0 85ab 	blt.w	800b222 <_svfprintf_r+0x124a>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6d0:	f002 f8b6 	bl	800c840 <memchr>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f000 85ff 	beq.w	800b2d8 <_svfprintf_r+0x1300>
 800a6da:	9414      	str	r4, [sp, #80]	; 0x50
 800a6dc:	ebc8 0000 	rsb	r0, r8, r0
 800a6e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a6e2:	950c      	str	r5, [sp, #48]	; 0x30
 800a6e4:	42a0      	cmp	r0, r4
 800a6e6:	bfb8      	it	lt
 800a6e8:	4604      	movlt	r4, r0
 800a6ea:	9410      	str	r4, [sp, #64]	; 0x40
 800a6ec:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800a6f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a6f2:	950d      	str	r5, [sp, #52]	; 0x34
 800a6f4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800a6f8:	9418      	str	r4, [sp, #96]	; 0x60
 800a6fa:	e5ae      	b.n	800a25a <_svfprintf_r+0x282>
 800a6fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a6fe:	f241 043c 	movw	r4, #4156	; 0x103c
 800a702:	f6c0 0401 	movt	r4, #2049	; 0x801
 800a706:	9316      	str	r3, [sp, #88]	; 0x58
 800a708:	06a8      	lsls	r0, r5, #26
 800a70a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a70e:	9419      	str	r4, [sp, #100]	; 0x64
 800a710:	f140 809c 	bpl.w	800a84c <_svfprintf_r+0x874>
 800a714:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a716:	1de3      	adds	r3, r4, #7
 800a718:	f023 0307 	bic.w	r3, r3, #7
 800a71c:	f103 0508 	add.w	r5, r3, #8
 800a720:	9514      	str	r5, [sp, #80]	; 0x50
 800a722:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a726:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a728:	07c3      	lsls	r3, r0, #31
 800a72a:	f140 8227 	bpl.w	800ab7c <_svfprintf_r+0xba4>
 800a72e:	ea54 0105 	orrs.w	r1, r4, r5
 800a732:	f000 8223 	beq.w	800ab7c <_svfprintf_r+0xba4>
 800a736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a738:	2330      	movs	r3, #48	; 0x30
 800a73a:	f040 0002 	orr.w	r0, r0, #2
 800a73e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800a742:	900a      	str	r0, [sp, #40]	; 0x28
 800a744:	2302      	movs	r3, #2
 800a746:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 800a74a:	e546      	b.n	800a1da <_svfprintf_r+0x202>
 800a74c:	f899 3000 	ldrb.w	r3, [r9]
 800a750:	222b      	movs	r2, #43	; 0x2b
 800a752:	e4aa      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a754:	f899 3000 	ldrb.w	r3, [r9]
 800a758:	4649      	mov	r1, r9
 800a75a:	2b6c      	cmp	r3, #108	; 0x6c
 800a75c:	bf05      	ittet	eq
 800a75e:	f109 0901 	addeq.w	r9, r9, #1
 800a762:	9d0a      	ldreq	r5, [sp, #40]	; 0x28
 800a764:	9c0a      	ldrne	r4, [sp, #40]	; 0x28
 800a766:	f045 0520 	orreq.w	r5, r5, #32
 800a76a:	bf0b      	itete	eq
 800a76c:	784b      	ldrbeq	r3, [r1, #1]
 800a76e:	f044 0410 	orrne.w	r4, r4, #16
 800a772:	950a      	streq	r5, [sp, #40]	; 0x28
 800a774:	940a      	strne	r4, [sp, #40]	; 0x28
 800a776:	e498      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a778:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a77a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a77e:	06a9      	lsls	r1, r5, #26
 800a780:	f140 83eb 	bpl.w	800af5a <_svfprintf_r+0xf82>
 800a784:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a786:	6821      	ldr	r1, [r4, #0]
 800a788:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800a78a:	4622      	mov	r2, r4
 800a78c:	17e5      	asrs	r5, r4, #31
 800a78e:	462b      	mov	r3, r5
 800a790:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a792:	e9c1 2300 	strd	r2, r3, [r1]
 800a796:	3504      	adds	r5, #4
 800a798:	9514      	str	r5, [sp, #80]	; 0x50
 800a79a:	e453      	b.n	800a044 <_svfprintf_r+0x6c>
 800a79c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a79e:	f241 003c 	movw	r0, #4156	; 0x103c
 800a7a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a7a4:	2378      	movs	r3, #120	; 0x78
 800a7a6:	f6c0 0001 	movt	r0, #2049	; 0x801
 800a7aa:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 800a7ae:	f045 0502 	orr.w	r5, r5, #2
 800a7b2:	9316      	str	r3, [sp, #88]	; 0x58
 800a7b4:	950a      	str	r5, [sp, #40]	; 0x28
 800a7b6:	2330      	movs	r3, #48	; 0x30
 800a7b8:	1d15      	adds	r5, r2, #4
 800a7ba:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800a7be:	9514      	str	r5, [sp, #80]	; 0x50
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	6814      	ldr	r4, [r2, #0]
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	9019      	str	r0, [sp, #100]	; 0x64
 800a7c8:	e507      	b.n	800a1da <_svfprintf_r+0x202>
 800a7ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a7cc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800a7d0:	940a      	str	r4, [sp, #40]	; 0x28
 800a7d2:	f899 3000 	ldrb.w	r3, [r9]
 800a7d6:	e468      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a7d8:	f899 3000 	ldrb.w	r3, [r9]
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	f47f ac64 	bne.w	800a0aa <_svfprintf_r+0xd2>
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	e461      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a7e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a7e8:	f045 0501 	orr.w	r5, r5, #1
 800a7ec:	950a      	str	r5, [sp, #40]	; 0x28
 800a7ee:	f899 3000 	ldrb.w	r3, [r9]
 800a7f2:	e45a      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a7f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a7f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a7f8:	6824      	ldr	r4, [r4, #0]
 800a7fa:	1d2b      	adds	r3, r5, #4
 800a7fc:	2c00      	cmp	r4, #0
 800a7fe:	9413      	str	r4, [sp, #76]	; 0x4c
 800a800:	f6ff acb5 	blt.w	800a16e <_svfprintf_r+0x196>
 800a804:	9314      	str	r3, [sp, #80]	; 0x50
 800a806:	f899 3000 	ldrb.w	r3, [r9]
 800a80a:	e44e      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a80e:	2401      	movs	r4, #1
 800a810:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a812:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800a816:	9316      	str	r3, [sp, #88]	; 0x58
 800a818:	2300      	movs	r3, #0
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	3504      	adds	r5, #4
 800a81e:	469a      	mov	sl, r3
 800a820:	940d      	str	r4, [sp, #52]	; 0x34
 800a822:	9514      	str	r5, [sp, #80]	; 0x50
 800a824:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800a828:	930c      	str	r3, [sp, #48]	; 0x30
 800a82a:	9318      	str	r3, [sp, #96]	; 0x60
 800a82c:	9410      	str	r4, [sp, #64]	; 0x40
 800a82e:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 800a832:	e518      	b.n	800a266 <_svfprintf_r+0x28e>
 800a834:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a836:	f241 0428 	movw	r4, #4136	; 0x1028
 800a83a:	f6c0 0401 	movt	r4, #2049	; 0x801
 800a83e:	9316      	str	r3, [sp, #88]	; 0x58
 800a840:	06a8      	lsls	r0, r5, #26
 800a842:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a846:	9419      	str	r4, [sp, #100]	; 0x64
 800a848:	f53f af64 	bmi.w	800a714 <_svfprintf_r+0x73c>
 800a84c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a84e:	06e1      	lsls	r1, r4, #27
 800a850:	f100 8253 	bmi.w	800acfa <_svfprintf_r+0xd22>
 800a854:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a856:	0662      	lsls	r2, r4, #25
 800a858:	f140 824f 	bpl.w	800acfa <_svfprintf_r+0xd22>
 800a85c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a85e:	2500      	movs	r5, #0
 800a860:	3004      	adds	r0, #4
 800a862:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800a866:	9014      	str	r0, [sp, #80]	; 0x50
 800a868:	e75d      	b.n	800a726 <_svfprintf_r+0x74e>
 800a86a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a86c:	9316      	str	r3, [sp, #88]	; 0x58
 800a86e:	06a9      	lsls	r1, r5, #26
 800a870:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a874:	f53f ae9b 	bmi.w	800a5ae <_svfprintf_r+0x5d6>
 800a878:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a87a:	06e2      	lsls	r2, r4, #27
 800a87c:	f100 8255 	bmi.w	800ad2a <_svfprintf_r+0xd52>
 800a880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a882:	0663      	lsls	r3, r4, #25
 800a884:	f140 8251 	bpl.w	800ad2a <_svfprintf_r+0xd52>
 800a888:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a88a:	3004      	adds	r0, #4
 800a88c:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800a890:	9014      	str	r0, [sp, #80]	; 0x50
 800a892:	4622      	mov	r2, r4
 800a894:	17e5      	asrs	r5, r4, #31
 800a896:	462b      	mov	r3, r5
 800a898:	e694      	b.n	800a5c4 <_svfprintf_r+0x5ec>
 800a89a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a89c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800a8a0:	950a      	str	r5, [sp, #40]	; 0x28
 800a8a2:	f899 3000 	ldrb.w	r3, [r9]
 800a8a6:	e400      	b.n	800a0aa <_svfprintf_r+0xd2>
 800a8a8:	2400      	movs	r4, #0
 800a8aa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	9413      	str	r4, [sp, #76]	; 0x4c
 800a8b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8b6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a8ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800a8be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a8c2:	2909      	cmp	r1, #9
 800a8c4:	d9f5      	bls.n	800a8b2 <_svfprintf_r+0x8da>
 800a8c6:	9013      	str	r0, [sp, #76]	; 0x4c
 800a8c8:	f7ff bbf1 	b.w	800a0ae <_svfprintf_r+0xd6>
 800a8cc:	9316      	str	r3, [sp, #88]	; 0x58
 800a8ce:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f43f ac5e 	beq.w	800a194 <_svfprintf_r+0x1bc>
 800a8d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2501      	movs	r5, #1
 800a8de:	469a      	mov	sl, r3
 800a8e0:	950d      	str	r5, [sp, #52]	; 0x34
 800a8e2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800a8e6:	f88d 40b8 	strb.w	r4, [sp, #184]	; 0xb8
 800a8ea:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 800a8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f0:	9318      	str	r3, [sp, #96]	; 0x60
 800a8f2:	9510      	str	r5, [sp, #64]	; 0x40
 800a8f4:	e4b7      	b.n	800a266 <_svfprintf_r+0x28e>
 800a8f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a8f8:	aa2b      	add	r2, sp, #172	; 0xac
 800a8fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8fc:	f002 fe98 	bl	800d630 <__ssprint_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	f47f ac4e 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a906:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800a90a:	af38      	add	r7, sp, #224	; 0xe0
 800a90c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800a90e:	e509      	b.n	800a324 <_svfprintf_r+0x34c>
 800a910:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a912:	2d65      	cmp	r5, #101	; 0x65
 800a914:	f340 80b9 	ble.w	800aa8a <_svfprintf_r+0xab2>
 800a918:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a91a:	2200      	movs	r2, #0
 800a91c:	2300      	movs	r3, #0
 800a91e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a920:	f004 fcb4 	bl	800f28c <__aeabi_dcmpeq>
 800a924:	2800      	cmp	r0, #0
 800a926:	f000 812c 	beq.w	800ab82 <_svfprintf_r+0xbaa>
 800a92a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a92c:	2201      	movs	r2, #1
 800a92e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a930:	3401      	adds	r4, #1
 800a932:	4413      	add	r3, r2
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	2b07      	cmp	r3, #7
 800a938:	942d      	str	r4, [sp, #180]	; 0xb4
 800a93a:	603d      	str	r5, [r7, #0]
 800a93c:	bfd8      	it	le
 800a93e:	3708      	addle	r7, #8
 800a940:	932c      	str	r3, [sp, #176]	; 0xb0
 800a942:	f300 8316 	bgt.w	800af72 <_svfprintf_r+0xf9a>
 800a946:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a948:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a94a:	42ab      	cmp	r3, r5
 800a94c:	db03      	blt.n	800a956 <_svfprintf_r+0x97e>
 800a94e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a950:	07ed      	lsls	r5, r5, #31
 800a952:	f57f ad68 	bpl.w	800a426 <_svfprintf_r+0x44e>
 800a956:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a958:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a95a:	442c      	add	r4, r5
 800a95c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a95e:	3301      	adds	r3, #1
 800a960:	942d      	str	r4, [sp, #180]	; 0xb4
 800a962:	2b07      	cmp	r3, #7
 800a964:	932c      	str	r3, [sp, #176]	; 0xb0
 800a966:	603d      	str	r5, [r7, #0]
 800a968:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a96a:	607d      	str	r5, [r7, #4]
 800a96c:	bfd8      	it	le
 800a96e:	3708      	addle	r7, #8
 800a970:	f300 835e 	bgt.w	800b030 <_svfprintf_r+0x1058>
 800a974:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a976:	f105 38ff 	add.w	r8, r5, #4294967295
 800a97a:	f1b8 0f00 	cmp.w	r8, #0
 800a97e:	f77f ad52 	ble.w	800a426 <_svfprintf_r+0x44e>
 800a982:	f1b8 0f10 	cmp.w	r8, #16
 800a986:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a988:	f340 81aa 	ble.w	800ace0 <_svfprintf_r+0xd08>
 800a98c:	4dac      	ldr	r5, [pc, #688]	; (800ac40 <_svfprintf_r+0xc68>)
 800a98e:	f04f 0a10 	mov.w	sl, #16
 800a992:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800a996:	950f      	str	r5, [sp, #60]	; 0x3c
 800a998:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a99a:	e005      	b.n	800a9a8 <_svfprintf_r+0x9d0>
 800a99c:	f1a8 0810 	sub.w	r8, r8, #16
 800a9a0:	f1b8 0f10 	cmp.w	r8, #16
 800a9a4:	f340 819e 	ble.w	800ace4 <_svfprintf_r+0xd0c>
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	3410      	adds	r4, #16
 800a9ac:	2b07      	cmp	r3, #7
 800a9ae:	e887 0440 	stmia.w	r7, {r6, sl}
 800a9b2:	932c      	str	r3, [sp, #176]	; 0xb0
 800a9b4:	f107 0708 	add.w	r7, r7, #8
 800a9b8:	942d      	str	r4, [sp, #180]	; 0xb4
 800a9ba:	ddef      	ble.n	800a99c <_svfprintf_r+0x9c4>
 800a9bc:	4628      	mov	r0, r5
 800a9be:	4659      	mov	r1, fp
 800a9c0:	aa2b      	add	r2, sp, #172	; 0xac
 800a9c2:	af38      	add	r7, sp, #224	; 0xe0
 800a9c4:	f002 fe34 	bl	800d630 <__ssprint_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	f47f abea 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800a9ce:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800a9d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800a9d2:	e7e3      	b.n	800a99c <_svfprintf_r+0x9c4>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 80b4 	bne.w	800ab42 <_svfprintf_r+0xb6a>
 800a9da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9dc:	07e2      	lsls	r2, r4, #31
 800a9de:	bf5c      	itt	pl
 800a9e0:	9310      	strpl	r3, [sp, #64]	; 0x40
 800a9e2:	f10d 08e0 	addpl.w	r8, sp, #224	; 0xe0
 800a9e6:	f57f ac30 	bpl.w	800a24a <_svfprintf_r+0x272>
 800a9ea:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800a9ec:	2330      	movs	r3, #48	; 0x30
 800a9ee:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800a9f2:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800a9f6:	9510      	str	r5, [sp, #64]	; 0x40
 800a9f8:	e427      	b.n	800a24a <_svfprintf_r+0x272>
 800a9fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a9fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a9fe:	1a45      	subs	r5, r0, r1
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	f77f acb4 	ble.w	800a36e <_svfprintf_r+0x396>
 800aa06:	2d10      	cmp	r5, #16
 800aa08:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aa0a:	bfdc      	itt	le
 800aa0c:	4a8c      	ldrle	r2, [pc, #560]	; (800ac40 <_svfprintf_r+0xc68>)
 800aa0e:	920f      	strle	r2, [sp, #60]	; 0x3c
 800aa10:	dd24      	ble.n	800aa5c <_svfprintf_r+0xa84>
 800aa12:	488b      	ldr	r0, [pc, #556]	; (800ac40 <_svfprintf_r+0xc68>)
 800aa14:	4622      	mov	r2, r4
 800aa16:	f04f 0b10 	mov.w	fp, #16
 800aa1a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800aa1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aa20:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa22:	e002      	b.n	800aa2a <_svfprintf_r+0xa52>
 800aa24:	3d10      	subs	r5, #16
 800aa26:	2d10      	cmp	r5, #16
 800aa28:	dd17      	ble.n	800aa5a <_svfprintf_r+0xa82>
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	3210      	adds	r2, #16
 800aa2e:	2b07      	cmp	r3, #7
 800aa30:	e887 0840 	stmia.w	r7, {r6, fp}
 800aa34:	932c      	str	r3, [sp, #176]	; 0xb0
 800aa36:	f107 0708 	add.w	r7, r7, #8
 800aa3a:	922d      	str	r2, [sp, #180]	; 0xb4
 800aa3c:	ddf2      	ble.n	800aa24 <_svfprintf_r+0xa4c>
 800aa3e:	4650      	mov	r0, sl
 800aa40:	4621      	mov	r1, r4
 800aa42:	aa2b      	add	r2, sp, #172	; 0xac
 800aa44:	af38      	add	r7, sp, #224	; 0xe0
 800aa46:	f002 fdf3 	bl	800d630 <__ssprint_r>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f47f aba9 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800aa50:	3d10      	subs	r5, #16
 800aa52:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800aa54:	2d10      	cmp	r5, #16
 800aa56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aa58:	dce7      	bgt.n	800aa2a <_svfprintf_r+0xa52>
 800aa5a:	4614      	mov	r4, r2
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	442c      	add	r4, r5
 800aa64:	932c      	str	r3, [sp, #176]	; 0xb0
 800aa66:	e887 0022 	stmia.w	r7, {r1, r5}
 800aa6a:	bfd8      	it	le
 800aa6c:	3708      	addle	r7, #8
 800aa6e:	942d      	str	r4, [sp, #180]	; 0xb4
 800aa70:	f77f ac7d 	ble.w	800a36e <_svfprintf_r+0x396>
 800aa74:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa76:	aa2b      	add	r2, sp, #172	; 0xac
 800aa78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa7a:	f002 fdd9 	bl	800d630 <__ssprint_r>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f47f ab8f 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800aa84:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800aa86:	af38      	add	r7, sp, #224	; 0xe0
 800aa88:	e471      	b.n	800a36e <_svfprintf_r+0x396>
 800aa8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aa8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aa8e:	2d01      	cmp	r5, #1
 800aa90:	f340 81e2 	ble.w	800ae58 <_svfprintf_r+0xe80>
 800aa94:	2101      	movs	r1, #1
 800aa96:	1c62      	adds	r2, r4, #1
 800aa98:	440b      	add	r3, r1
 800aa9a:	f8c7 8000 	str.w	r8, [r7]
 800aa9e:	2b07      	cmp	r3, #7
 800aaa0:	6079      	str	r1, [r7, #4]
 800aaa2:	922d      	str	r2, [sp, #180]	; 0xb4
 800aaa4:	bfd8      	it	le
 800aaa6:	3708      	addle	r7, #8
 800aaa8:	932c      	str	r3, [sp, #176]	; 0xb0
 800aaaa:	f300 81f4 	bgt.w	800ae96 <_svfprintf_r+0xebe>
 800aaae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800aab0:	1c5c      	adds	r4, r3, #1
 800aab2:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 800aab6:	2c07      	cmp	r4, #7
 800aab8:	942c      	str	r4, [sp, #176]	; 0xb0
 800aaba:	603d      	str	r5, [r7, #0]
 800aabc:	4492      	add	sl, r2
 800aabe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aac0:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 800aac4:	607d      	str	r5, [r7, #4]
 800aac6:	bfd8      	it	le
 800aac8:	3708      	addle	r7, #8
 800aaca:	f300 81d7 	bgt.w	800ae7c <_svfprintf_r+0xea4>
 800aace:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aad0:	2200      	movs	r2, #0
 800aad2:	2300      	movs	r3, #0
 800aad4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aad6:	f004 fbd9 	bl	800f28c <__aeabi_dcmpeq>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f040 80b2 	bne.w	800ac44 <_svfprintf_r+0xc6c>
 800aae0:	3401      	adds	r4, #1
 800aae2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800aae4:	2c07      	cmp	r4, #7
 800aae6:	f108 0201 	add.w	r2, r8, #1
 800aaea:	f105 33ff 	add.w	r3, r5, #4294967295
 800aaee:	942c      	str	r4, [sp, #176]	; 0xb0
 800aaf0:	449a      	add	sl, r3
 800aaf2:	603a      	str	r2, [r7, #0]
 800aaf4:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 800aaf8:	607b      	str	r3, [r7, #4]
 800aafa:	f300 80e4 	bgt.w	800acc6 <_svfprintf_r+0xcee>
 800aafe:	3708      	adds	r7, #8
 800ab00:	1c63      	adds	r3, r4, #1
 800ab02:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800ab04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ab06:	2b07      	cmp	r3, #7
 800ab08:	aa27      	add	r2, sp, #156	; 0x9c
 800ab0a:	932c      	str	r3, [sp, #176]	; 0xb0
 800ab0c:	4454      	add	r4, sl
 800ab0e:	e887 0024 	stmia.w	r7, {r2, r5}
 800ab12:	942d      	str	r4, [sp, #180]	; 0xb4
 800ab14:	f77f ac86 	ble.w	800a424 <_svfprintf_r+0x44c>
 800ab18:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab1a:	aa2b      	add	r2, sp, #172	; 0xac
 800ab1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1e:	f002 fd87 	bl	800d630 <__ssprint_r>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	f47f ab3d 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ab28:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ab2a:	af38      	add	r7, sp, #224	; 0xe0
 800ab2c:	e47b      	b.n	800a426 <_svfprintf_r+0x44e>
 800ab2e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab30:	aa2b      	add	r2, sp, #172	; 0xac
 800ab32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab34:	f002 fd7c 	bl	800d630 <__ssprint_r>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	f43f acc3 	beq.w	800a4c4 <_svfprintf_r+0x4ec>
 800ab3e:	f7ff bb30 	b.w	800a1a2 <_svfprintf_r+0x1ca>
 800ab42:	9210      	str	r2, [sp, #64]	; 0x40
 800ab44:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800ab48:	f7ff bb7f 	b.w	800a24a <_svfprintf_r+0x272>
 800ab4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab4e:	aa2b      	add	r2, sp, #172	; 0xac
 800ab50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab52:	f002 fd6d 	bl	800d630 <__ssprint_r>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f47f ab23 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ab5c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ab5e:	af38      	add	r7, sp, #224	; 0xe0
 800ab60:	f7ff bbf2 	b.w	800a348 <_svfprintf_r+0x370>
 800ab64:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ab66:	aa2b      	add	r2, sp, #172	; 0xac
 800ab68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab6a:	f002 fd61 	bl	800d630 <__ssprint_r>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f47f ab17 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ab74:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ab76:	af38      	add	r7, sp, #224	; 0xe0
 800ab78:	f7ff bbf6 	b.w	800a368 <_svfprintf_r+0x390>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	f7ff bb2c 	b.w	800a1da <_svfprintf_r+0x202>
 800ab82:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f340 81ff 	ble.w	800af88 <_svfprintf_r+0xfb0>
 800ab8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ab8c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ab8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab90:	4285      	cmp	r5, r0
 800ab92:	bfa8      	it	ge
 800ab94:	4605      	movge	r5, r0
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	4441      	add	r1, r8
 800ab9a:	910c      	str	r1, [sp, #48]	; 0x30
 800ab9c:	dd0c      	ble.n	800abb8 <_svfprintf_r+0xbe0>
 800ab9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aba0:	442c      	add	r4, r5
 800aba2:	f8c7 8000 	str.w	r8, [r7]
 800aba6:	3301      	adds	r3, #1
 800aba8:	607d      	str	r5, [r7, #4]
 800abaa:	2b07      	cmp	r3, #7
 800abac:	942d      	str	r4, [sp, #180]	; 0xb4
 800abae:	932c      	str	r3, [sp, #176]	; 0xb0
 800abb0:	bfd8      	it	le
 800abb2:	3708      	addle	r7, #8
 800abb4:	f300 8343 	bgt.w	800b23e <_svfprintf_r+0x1266>
 800abb8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abba:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800abbe:	ebc5 0a02 	rsb	sl, r5, r2
 800abc2:	f1ba 0f00 	cmp.w	sl, #0
 800abc6:	f340 80dd 	ble.w	800ad84 <_svfprintf_r+0xdac>
 800abca:	f1ba 0f10 	cmp.w	sl, #16
 800abce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800abd0:	bfdc      	itt	le
 800abd2:	4d1b      	ldrle	r5, [pc, #108]	; (800ac40 <_svfprintf_r+0xc68>)
 800abd4:	950f      	strle	r5, [sp, #60]	; 0x3c
 800abd6:	f340 80c0 	ble.w	800ad5a <_svfprintf_r+0xd82>
 800abda:	4d19      	ldr	r5, [pc, #100]	; (800ac40 <_svfprintf_r+0xc68>)
 800abdc:	4622      	mov	r2, r4
 800abde:	f04f 0b10 	mov.w	fp, #16
 800abe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800abe4:	950f      	str	r5, [sp, #60]	; 0x3c
 800abe6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800abe8:	e005      	b.n	800abf6 <_svfprintf_r+0xc1e>
 800abea:	f1aa 0a10 	sub.w	sl, sl, #16
 800abee:	f1ba 0f10 	cmp.w	sl, #16
 800abf2:	f340 80b1 	ble.w	800ad58 <_svfprintf_r+0xd80>
 800abf6:	3301      	adds	r3, #1
 800abf8:	3210      	adds	r2, #16
 800abfa:	2b07      	cmp	r3, #7
 800abfc:	e887 0840 	stmia.w	r7, {r6, fp}
 800ac00:	932c      	str	r3, [sp, #176]	; 0xb0
 800ac02:	f107 0708 	add.w	r7, r7, #8
 800ac06:	922d      	str	r2, [sp, #180]	; 0xb4
 800ac08:	ddef      	ble.n	800abea <_svfprintf_r+0xc12>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	aa2b      	add	r2, sp, #172	; 0xac
 800ac10:	af38      	add	r7, sp, #224	; 0xe0
 800ac12:	f002 fd0d 	bl	800d630 <__ssprint_r>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f47f aac3 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ac1c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800ac1e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800ac20:	e7e3      	b.n	800abea <_svfprintf_r+0xc12>
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	bf08      	it	eq
 800ac26:	2c0a      	cmpeq	r4, #10
 800ac28:	f080 8141 	bcs.w	800aeae <_svfprintf_r+0xed6>
 800ac2c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800ac2e:	3430      	adds	r4, #48	; 0x30
 800ac30:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800ac34:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800ac38:	9510      	str	r5, [sp, #64]	; 0x40
 800ac3a:	f7ff bb06 	b.w	800a24a <_svfprintf_r+0x272>
 800ac3e:	bf00      	nop
 800ac40:	08010bd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp}
 800ac44:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ac46:	f105 38ff 	add.w	r8, r5, #4294967295
 800ac4a:	f1b8 0f00 	cmp.w	r8, #0
 800ac4e:	f77f af57 	ble.w	800ab00 <_svfprintf_r+0xb28>
 800ac52:	f1b8 0f10 	cmp.w	r8, #16
 800ac56:	bfdc      	itt	le
 800ac58:	4ba8      	ldrle	r3, [pc, #672]	; (800aefc <_svfprintf_r+0xf24>)
 800ac5a:	930f      	strle	r3, [sp, #60]	; 0x3c
 800ac5c:	dd28      	ble.n	800acb0 <_svfprintf_r+0xcd8>
 800ac5e:	4da7      	ldr	r5, [pc, #668]	; (800aefc <_svfprintf_r+0xf24>)
 800ac60:	4653      	mov	r3, sl
 800ac62:	f04f 0b10 	mov.w	fp, #16
 800ac66:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ac6a:	950f      	str	r5, [sp, #60]	; 0x3c
 800ac6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ac6e:	e004      	b.n	800ac7a <_svfprintf_r+0xca2>
 800ac70:	f1a8 0810 	sub.w	r8, r8, #16
 800ac74:	f1b8 0f10 	cmp.w	r8, #16
 800ac78:	dd19      	ble.n	800acae <_svfprintf_r+0xcd6>
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	3310      	adds	r3, #16
 800ac7e:	2c07      	cmp	r4, #7
 800ac80:	e887 0840 	stmia.w	r7, {r6, fp}
 800ac84:	942c      	str	r4, [sp, #176]	; 0xb0
 800ac86:	f107 0708 	add.w	r7, r7, #8
 800ac8a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ac8c:	ddf0      	ble.n	800ac70 <_svfprintf_r+0xc98>
 800ac8e:	4628      	mov	r0, r5
 800ac90:	4651      	mov	r1, sl
 800ac92:	aa2b      	add	r2, sp, #172	; 0xac
 800ac94:	af38      	add	r7, sp, #224	; 0xe0
 800ac96:	f002 fccb 	bl	800d630 <__ssprint_r>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f47f aa81 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800aca0:	f1a8 0810 	sub.w	r8, r8, #16
 800aca4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aca6:	f1b8 0f10 	cmp.w	r8, #16
 800acaa:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800acac:	dce5      	bgt.n	800ac7a <_svfprintf_r+0xca2>
 800acae:	469a      	mov	sl, r3
 800acb0:	3401      	adds	r4, #1
 800acb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb4:	2c07      	cmp	r4, #7
 800acb6:	44c2      	add	sl, r8
 800acb8:	942c      	str	r4, [sp, #176]	; 0xb0
 800acba:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 800acbe:	e887 0108 	stmia.w	r7, {r3, r8}
 800acc2:	f77f af1c 	ble.w	800aafe <_svfprintf_r+0xb26>
 800acc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800acc8:	aa2b      	add	r2, sp, #172	; 0xac
 800acca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800accc:	f002 fcb0 	bl	800d630 <__ssprint_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f47f aa66 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800acd6:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 800acda:	af38      	add	r7, sp, #224	; 0xe0
 800acdc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800acde:	e70f      	b.n	800ab00 <_svfprintf_r+0xb28>
 800ace0:	4d86      	ldr	r5, [pc, #536]	; (800aefc <_svfprintf_r+0xf24>)
 800ace2:	950f      	str	r5, [sp, #60]	; 0x3c
 800ace4:	3301      	adds	r3, #1
 800ace6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ace8:	2b07      	cmp	r3, #7
 800acea:	4444      	add	r4, r8
 800acec:	932c      	str	r3, [sp, #176]	; 0xb0
 800acee:	942d      	str	r4, [sp, #180]	; 0xb4
 800acf0:	e887 0120 	stmia.w	r7, {r5, r8}
 800acf4:	f77f ab96 	ble.w	800a424 <_svfprintf_r+0x44c>
 800acf8:	e70e      	b.n	800ab18 <_svfprintf_r+0xb40>
 800acfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800acfc:	3504      	adds	r5, #4
 800acfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad02:	9514      	str	r5, [sp, #80]	; 0x50
 800ad04:	2500      	movs	r5, #0
 800ad06:	e50e      	b.n	800a726 <_svfprintf_r+0x74e>
 800ad08:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	3504      	adds	r5, #4
 800ad0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad12:	9514      	str	r5, [sp, #80]	; 0x50
 800ad14:	2500      	movs	r5, #0
 800ad16:	f7ff ba60 	b.w	800a1da <_svfprintf_r+0x202>
 800ad1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ad1c:	3504      	adds	r5, #4
 800ad1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad22:	9514      	str	r5, [sp, #80]	; 0x50
 800ad24:	2500      	movs	r5, #0
 800ad26:	f7ff ba58 	b.w	800a1da <_svfprintf_r+0x202>
 800ad2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ad2c:	3504      	adds	r5, #4
 800ad2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad32:	9514      	str	r5, [sp, #80]	; 0x50
 800ad34:	4622      	mov	r2, r4
 800ad36:	17e5      	asrs	r5, r4, #31
 800ad38:	462b      	mov	r3, r5
 800ad3a:	2a00      	cmp	r2, #0
 800ad3c:	f173 0000 	sbcs.w	r0, r3, #0
 800ad40:	f6bf ac45 	bge.w	800a5ce <_svfprintf_r+0x5f6>
 800ad44:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800ad48:	4264      	negs	r4, r4
 800ad4a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ad4e:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800ad52:	2301      	movs	r3, #1
 800ad54:	f7ff ba45 	b.w	800a1e2 <_svfprintf_r+0x20a>
 800ad58:	4614      	mov	r4, r2
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad5e:	2b07      	cmp	r3, #7
 800ad60:	4454      	add	r4, sl
 800ad62:	932c      	str	r3, [sp, #176]	; 0xb0
 800ad64:	e887 0420 	stmia.w	r7, {r5, sl}
 800ad68:	bfd8      	it	le
 800ad6a:	3708      	addle	r7, #8
 800ad6c:	942d      	str	r4, [sp, #180]	; 0xb4
 800ad6e:	dd09      	ble.n	800ad84 <_svfprintf_r+0xdac>
 800ad70:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ad72:	aa2b      	add	r2, sp, #172	; 0xac
 800ad74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad76:	f002 fc5b 	bl	800d630 <__ssprint_r>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f47f aa11 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ad80:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ad82:	af38      	add	r7, sp, #224	; 0xe0
 800ad84:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ad86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ad88:	44a8      	add	r8, r5
 800ad8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800ad8c:	42ab      	cmp	r3, r5
 800ad8e:	db49      	blt.n	800ae24 <_svfprintf_r+0xe4c>
 800ad90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad92:	07e9      	lsls	r1, r5, #31
 800ad94:	d446      	bmi.n	800ae24 <_svfprintf_r+0xe4c>
 800ad96:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ad98:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad9a:	ebc8 0500 	rsb	r5, r8, r0
 800ad9e:	1acb      	subs	r3, r1, r3
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	bfb8      	it	lt
 800ada4:	461d      	movlt	r5, r3
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	dd0c      	ble.n	800adc4 <_svfprintf_r+0xdec>
 800adaa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800adac:	442c      	add	r4, r5
 800adae:	f8c7 8000 	str.w	r8, [r7]
 800adb2:	3201      	adds	r2, #1
 800adb4:	607d      	str	r5, [r7, #4]
 800adb6:	2a07      	cmp	r2, #7
 800adb8:	942d      	str	r4, [sp, #180]	; 0xb4
 800adba:	922c      	str	r2, [sp, #176]	; 0xb0
 800adbc:	bfd8      	it	le
 800adbe:	3708      	addle	r7, #8
 800adc0:	f300 824a 	bgt.w	800b258 <_svfprintf_r+0x1280>
 800adc4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800adc8:	ebc5 0803 	rsb	r8, r5, r3
 800adcc:	f1b8 0f00 	cmp.w	r8, #0
 800add0:	f77f ab29 	ble.w	800a426 <_svfprintf_r+0x44e>
 800add4:	f1b8 0f10 	cmp.w	r8, #16
 800add8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800adda:	dd81      	ble.n	800ace0 <_svfprintf_r+0xd08>
 800addc:	4d47      	ldr	r5, [pc, #284]	; (800aefc <_svfprintf_r+0xf24>)
 800adde:	f04f 0a10 	mov.w	sl, #16
 800ade2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ade6:	950f      	str	r5, [sp, #60]	; 0x3c
 800ade8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800adea:	e005      	b.n	800adf8 <_svfprintf_r+0xe20>
 800adec:	f1a8 0810 	sub.w	r8, r8, #16
 800adf0:	f1b8 0f10 	cmp.w	r8, #16
 800adf4:	f77f af76 	ble.w	800ace4 <_svfprintf_r+0xd0c>
 800adf8:	3301      	adds	r3, #1
 800adfa:	3410      	adds	r4, #16
 800adfc:	2b07      	cmp	r3, #7
 800adfe:	e887 0440 	stmia.w	r7, {r6, sl}
 800ae02:	932c      	str	r3, [sp, #176]	; 0xb0
 800ae04:	f107 0708 	add.w	r7, r7, #8
 800ae08:	942d      	str	r4, [sp, #180]	; 0xb4
 800ae0a:	ddef      	ble.n	800adec <_svfprintf_r+0xe14>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	4659      	mov	r1, fp
 800ae10:	aa2b      	add	r2, sp, #172	; 0xac
 800ae12:	af38      	add	r7, sp, #224	; 0xe0
 800ae14:	f002 fc0c 	bl	800d630 <__ssprint_r>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	f47f a9c2 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ae1e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ae20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800ae22:	e7e3      	b.n	800adec <_svfprintf_r+0xe14>
 800ae24:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ae26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ae28:	442c      	add	r4, r5
 800ae2a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	942d      	str	r4, [sp, #180]	; 0xb4
 800ae30:	2a07      	cmp	r2, #7
 800ae32:	922c      	str	r2, [sp, #176]	; 0xb0
 800ae34:	603d      	str	r5, [r7, #0]
 800ae36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ae38:	607d      	str	r5, [r7, #4]
 800ae3a:	bfd8      	it	le
 800ae3c:	3708      	addle	r7, #8
 800ae3e:	ddaa      	ble.n	800ad96 <_svfprintf_r+0xdbe>
 800ae40:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae42:	aa2b      	add	r2, sp, #172	; 0xac
 800ae44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae46:	f002 fbf3 	bl	800d630 <__ssprint_r>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	f47f a9a9 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ae50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ae52:	af38      	add	r7, sp, #224	; 0xe0
 800ae54:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800ae56:	e79e      	b.n	800ad96 <_svfprintf_r+0xdbe>
 800ae58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ae5a:	07ea      	lsls	r2, r5, #31
 800ae5c:	f53f ae1a 	bmi.w	800aa94 <_svfprintf_r+0xabc>
 800ae60:	2201      	movs	r2, #1
 800ae62:	f104 0a01 	add.w	sl, r4, #1
 800ae66:	189c      	adds	r4, r3, r2
 800ae68:	f8c7 8000 	str.w	r8, [r7]
 800ae6c:	2c07      	cmp	r4, #7
 800ae6e:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 800ae72:	942c      	str	r4, [sp, #176]	; 0xb0
 800ae74:	607a      	str	r2, [r7, #4]
 800ae76:	f77f ae42 	ble.w	800aafe <_svfprintf_r+0xb26>
 800ae7a:	e724      	b.n	800acc6 <_svfprintf_r+0xcee>
 800ae7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae7e:	aa2b      	add	r2, sp, #172	; 0xac
 800ae80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae82:	f002 fbd5 	bl	800d630 <__ssprint_r>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f47f a98b 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800ae8c:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 800ae90:	af38      	add	r7, sp, #224	; 0xe0
 800ae92:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800ae94:	e61b      	b.n	800aace <_svfprintf_r+0xaf6>
 800ae96:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae98:	aa2b      	add	r2, sp, #172	; 0xac
 800ae9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae9c:	f002 fbc8 	bl	800d630 <__ssprint_r>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	f47f a97e 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800aea6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800aea8:	af38      	add	r7, sp, #224	; 0xe0
 800aeaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800aeac:	e5ff      	b.n	800aaae <_svfprintf_r+0xad6>
 800aeae:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	220a      	movs	r2, #10
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f004 fa61 	bl	800f380 <__aeabi_uldivmod>
 800aebe:	46d8      	mov	r8, fp
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	2300      	movs	r3, #0
 800aec6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeca:	3230      	adds	r2, #48	; 0x30
 800aecc:	f888 2000 	strb.w	r2, [r8]
 800aed0:	220a      	movs	r2, #10
 800aed2:	f004 fa55 	bl	800f380 <__aeabi_uldivmod>
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	ea54 0005 	orrs.w	r0, r4, r5
 800aede:	d1e8      	bne.n	800aeb2 <_svfprintf_r+0xeda>
 800aee0:	f7ff b9af 	b.w	800a242 <_svfprintf_r+0x26a>
 800aee4:	2b30      	cmp	r3, #48	; 0x30
 800aee6:	f43f a9ac 	beq.w	800a242 <_svfprintf_r+0x26a>
 800aeea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800aeec:	2330      	movs	r3, #48	; 0x30
 800aeee:	4690      	mov	r8, r2
 800aef0:	f801 3c01 	strb.w	r3, [r1, #-1]
 800aef4:	1aa4      	subs	r4, r4, r2
 800aef6:	9410      	str	r4, [sp, #64]	; 0x40
 800aef8:	f7ff b9a7 	b.w	800a24a <_svfprintf_r+0x272>
 800aefc:	08010bd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp}
 800af00:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af02:	f002 fa4f 	bl	800d3a4 <__fpclassifyd>
 800af06:	2800      	cmp	r0, #0
 800af08:	f040 80ab 	bne.w	800b062 <_svfprintf_r+0x108a>
 800af0c:	2503      	movs	r5, #3
 800af0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af10:	f241 0824 	movw	r8, #4132	; 0x1024
 800af14:	f241 0320 	movw	r3, #4128	; 0x1020
 800af18:	950d      	str	r5, [sp, #52]	; 0x34
 800af1a:	f6c0 0801 	movt	r8, #2049	; 0x801
 800af1e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800af20:	f6c0 0301 	movt	r3, #2049	; 0x801
 800af24:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800af28:	900c      	str	r0, [sp, #48]	; 0x30
 800af2a:	940a      	str	r4, [sp, #40]	; 0x28
 800af2c:	2d47      	cmp	r5, #71	; 0x47
 800af2e:	bfd8      	it	le
 800af30:	4698      	movle	r8, r3
 800af32:	2403      	movs	r4, #3
 800af34:	9018      	str	r0, [sp, #96]	; 0x60
 800af36:	9410      	str	r4, [sp, #64]	; 0x40
 800af38:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800af3c:	f7ff b98d 	b.w	800a25a <_svfprintf_r+0x282>
 800af40:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800af42:	1de3      	adds	r3, r4, #7
 800af44:	f023 0307 	bic.w	r3, r3, #7
 800af48:	f103 0508 	add.w	r5, r3, #8
 800af4c:	9514      	str	r5, [sp, #80]	; 0x50
 800af4e:	681c      	ldr	r4, [r3, #0]
 800af50:	941b      	str	r4, [sp, #108]	; 0x6c
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	931c      	str	r3, [sp, #112]	; 0x70
 800af56:	f7ff bb53 	b.w	800a600 <_svfprintf_r+0x628>
 800af5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af5c:	06e2      	lsls	r2, r4, #27
 800af5e:	d572      	bpl.n	800b046 <_svfprintf_r+0x106e>
 800af60:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800af62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800af64:	3504      	adds	r5, #4
 800af66:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800af6a:	9514      	str	r5, [sp, #80]	; 0x50
 800af6c:	601c      	str	r4, [r3, #0]
 800af6e:	f7ff b869 	b.w	800a044 <_svfprintf_r+0x6c>
 800af72:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af74:	aa2b      	add	r2, sp, #172	; 0xac
 800af76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af78:	f002 fb5a 	bl	800d630 <__ssprint_r>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	f47f a910 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800af82:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800af84:	af38      	add	r7, sp, #224	; 0xe0
 800af86:	e4de      	b.n	800a946 <_svfprintf_r+0x96e>
 800af88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800af8a:	2101      	movs	r1, #1
 800af8c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800af8e:	3401      	adds	r4, #1
 800af90:	440a      	add	r2, r1
 800af92:	942d      	str	r4, [sp, #180]	; 0xb4
 800af94:	2a07      	cmp	r2, #7
 800af96:	922c      	str	r2, [sp, #176]	; 0xb0
 800af98:	603d      	str	r5, [r7, #0]
 800af9a:	6079      	str	r1, [r7, #4]
 800af9c:	f300 8112 	bgt.w	800b1c4 <_svfprintf_r+0x11ec>
 800afa0:	3708      	adds	r7, #8
 800afa2:	4619      	mov	r1, r3
 800afa4:	b929      	cbnz	r1, 800afb2 <_svfprintf_r+0xfda>
 800afa6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800afa8:	b91d      	cbnz	r5, 800afb2 <_svfprintf_r+0xfda>
 800afaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800afac:	07e8      	lsls	r0, r5, #31
 800afae:	f57f aa3a 	bpl.w	800a426 <_svfprintf_r+0x44e>
 800afb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800afb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afb6:	3301      	adds	r3, #1
 800afb8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800afba:	4422      	add	r2, r4
 800afbc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	922d      	str	r2, [sp, #180]	; 0xb4
 800afc2:	607d      	str	r5, [r7, #4]
 800afc4:	603c      	str	r4, [r7, #0]
 800afc6:	bfd8      	it	le
 800afc8:	3708      	addle	r7, #8
 800afca:	932c      	str	r3, [sp, #176]	; 0xb0
 800afcc:	f300 81ba 	bgt.w	800b344 <_svfprintf_r+0x136c>
 800afd0:	f1c1 0a00 	rsb	sl, r1, #0
 800afd4:	f1ba 0f00 	cmp.w	sl, #0
 800afd8:	f340 8116 	ble.w	800b208 <_svfprintf_r+0x1230>
 800afdc:	f1ba 0f10 	cmp.w	sl, #16
 800afe0:	bfdc      	itt	le
 800afe2:	4c9c      	ldrle	r4, [pc, #624]	; (800b254 <_svfprintf_r+0x127c>)
 800afe4:	940f      	strle	r4, [sp, #60]	; 0x3c
 800afe6:	f340 80f9 	ble.w	800b1dc <_svfprintf_r+0x1204>
 800afea:	4d9a      	ldr	r5, [pc, #616]	; (800b254 <_svfprintf_r+0x127c>)
 800afec:	2410      	movs	r4, #16
 800afee:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800aff2:	950f      	str	r5, [sp, #60]	; 0x3c
 800aff4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aff6:	e005      	b.n	800b004 <_svfprintf_r+0x102c>
 800aff8:	f1aa 0a10 	sub.w	sl, sl, #16
 800affc:	f1ba 0f10 	cmp.w	sl, #16
 800b000:	f340 80ec 	ble.w	800b1dc <_svfprintf_r+0x1204>
 800b004:	3301      	adds	r3, #1
 800b006:	3210      	adds	r2, #16
 800b008:	2b07      	cmp	r3, #7
 800b00a:	603e      	str	r6, [r7, #0]
 800b00c:	607c      	str	r4, [r7, #4]
 800b00e:	f107 0708 	add.w	r7, r7, #8
 800b012:	932c      	str	r3, [sp, #176]	; 0xb0
 800b014:	922d      	str	r2, [sp, #180]	; 0xb4
 800b016:	ddef      	ble.n	800aff8 <_svfprintf_r+0x1020>
 800b018:	4628      	mov	r0, r5
 800b01a:	4659      	mov	r1, fp
 800b01c:	aa2b      	add	r2, sp, #172	; 0xac
 800b01e:	af38      	add	r7, sp, #224	; 0xe0
 800b020:	f002 fb06 	bl	800d630 <__ssprint_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	f47f a8bc 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b02a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b02c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b02e:	e7e3      	b.n	800aff8 <_svfprintf_r+0x1020>
 800b030:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b032:	aa2b      	add	r2, sp, #172	; 0xac
 800b034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b036:	f002 fafb 	bl	800d630 <__ssprint_r>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	f47f a8b1 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b040:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800b042:	af38      	add	r7, sp, #224	; 0xe0
 800b044:	e496      	b.n	800a974 <_svfprintf_r+0x99c>
 800b046:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800b048:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b04a:	3404      	adds	r4, #4
 800b04c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b050:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b054:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b056:	9414      	str	r4, [sp, #80]	; 0x50
 800b058:	bf14      	ite	ne
 800b05a:	801d      	strhne	r5, [r3, #0]
 800b05c:	601d      	streq	r5, [r3, #0]
 800b05e:	f7fe bff1 	b.w	800a044 <_svfprintf_r+0x6c>
 800b062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b064:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b066:	3501      	adds	r5, #1
 800b068:	f024 0520 	bic.w	r5, r4, #32
 800b06c:	bf04      	itt	eq
 800b06e:	2406      	moveq	r4, #6
 800b070:	940c      	streq	r4, [sp, #48]	; 0x30
 800b072:	d006      	beq.n	800b082 <_svfprintf_r+0x10aa>
 800b074:	2d47      	cmp	r5, #71	; 0x47
 800b076:	d104      	bne.n	800b082 <_svfprintf_r+0x10aa>
 800b078:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b07a:	2c00      	cmp	r4, #0
 800b07c:	bf08      	it	eq
 800b07e:	2401      	moveq	r4, #1
 800b080:	940c      	str	r4, [sp, #48]	; 0x30
 800b082:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b086:	2b00      	cmp	r3, #0
 800b088:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800b08c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b08e:	bfbd      	ittte	lt
 800b090:	461c      	movlt	r4, r3
 800b092:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 800b096:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 800b09a:	f8dd a070 	ldrge.w	sl, [sp, #112]	; 0x70
 800b09e:	bfa8      	it	ge
 800b0a0:	f04f 0b00 	movge.w	fp, #0
 800b0a4:	f1b5 0446 	subs.w	r4, r5, #70	; 0x46
 800b0a8:	4261      	negs	r1, r4
 800b0aa:	4161      	adcs	r1, r4
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d030      	beq.n	800b112 <_svfprintf_r+0x113a>
 800b0b0:	2003      	movs	r0, #3
 800b0b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b0b4:	4653      	mov	r3, sl
 800b0b6:	9000      	str	r0, [sp, #0]
 800b0b8:	a825      	add	r0, sp, #148	; 0x94
 800b0ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0bc:	9002      	str	r0, [sp, #8]
 800b0be:	a826      	add	r0, sp, #152	; 0x98
 800b0c0:	9401      	str	r4, [sp, #4]
 800b0c2:	9003      	str	r0, [sp, #12]
 800b0c4:	a829      	add	r0, sp, #164	; 0xa4
 800b0c6:	9004      	str	r0, [sp, #16]
 800b0c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b0ca:	9107      	str	r1, [sp, #28]
 800b0cc:	f000 fa86 	bl	800b5dc <_dtoa_r>
 800b0d0:	2d47      	cmp	r5, #71	; 0x47
 800b0d2:	9907      	ldr	r1, [sp, #28]
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	d103      	bne.n	800b0e0 <_svfprintf_r+0x1108>
 800b0d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b0da:	07e0      	lsls	r0, r4, #31
 800b0dc:	f140 80f0 	bpl.w	800b2c0 <_svfprintf_r+0x12e8>
 800b0e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b0e2:	4444      	add	r4, r8
 800b0e4:	b351      	cbz	r1, 800b13c <_svfprintf_r+0x1164>
 800b0e6:	f898 3000 	ldrb.w	r3, [r8]
 800b0ea:	2b30      	cmp	r3, #48	; 0x30
 800b0ec:	f000 8184 	beq.w	800b3f8 <_svfprintf_r+0x1420>
 800b0f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b0f2:	441c      	add	r4, r3
 800b0f4:	e022      	b.n	800b13c <_svfprintf_r+0x1164>
 800b0f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b0f8:	2140      	movs	r1, #64	; 0x40
 800b0fa:	f7fe fc9d 	bl	8009a38 <_malloc_r>
 800b0fe:	6020      	str	r0, [r4, #0]
 800b100:	6120      	str	r0, [r4, #16]
 800b102:	2800      	cmp	r0, #0
 800b104:	f000 81b6 	beq.w	800b474 <_svfprintf_r+0x149c>
 800b108:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b10a:	2340      	movs	r3, #64	; 0x40
 800b10c:	6163      	str	r3, [r4, #20]
 800b10e:	f7fe bf79 	b.w	800a004 <_svfprintf_r+0x2c>
 800b112:	2d45      	cmp	r5, #69	; 0x45
 800b114:	f040 8131 	bne.w	800b37a <_svfprintf_r+0x13a2>
 800b118:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b11a:	2102      	movs	r1, #2
 800b11c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b11e:	4653      	mov	r3, sl
 800b120:	1c44      	adds	r4, r0, #1
 800b122:	9100      	str	r1, [sp, #0]
 800b124:	9401      	str	r4, [sp, #4]
 800b126:	a925      	add	r1, sp, #148	; 0x94
 800b128:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b12a:	9102      	str	r1, [sp, #8]
 800b12c:	a926      	add	r1, sp, #152	; 0x98
 800b12e:	9103      	str	r1, [sp, #12]
 800b130:	a929      	add	r1, sp, #164	; 0xa4
 800b132:	9104      	str	r1, [sp, #16]
 800b134:	f000 fa52 	bl	800b5dc <_dtoa_r>
 800b138:	4680      	mov	r8, r0
 800b13a:	4404      	add	r4, r0
 800b13c:	2300      	movs	r3, #0
 800b13e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b140:	2200      	movs	r2, #0
 800b142:	4651      	mov	r1, sl
 800b144:	f004 f8a2 	bl	800f28c <__aeabi_dcmpeq>
 800b148:	4623      	mov	r3, r4
 800b14a:	b948      	cbnz	r0, 800b160 <_svfprintf_r+0x1188>
 800b14c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b14e:	429c      	cmp	r4, r3
 800b150:	d906      	bls.n	800b160 <_svfprintf_r+0x1188>
 800b152:	2130      	movs	r1, #48	; 0x30
 800b154:	1c5a      	adds	r2, r3, #1
 800b156:	9229      	str	r2, [sp, #164]	; 0xa4
 800b158:	7019      	strb	r1, [r3, #0]
 800b15a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b15c:	429c      	cmp	r4, r3
 800b15e:	d8f9      	bhi.n	800b154 <_svfprintf_r+0x117c>
 800b160:	2d47      	cmp	r5, #71	; 0x47
 800b162:	ebc8 0303 	rsb	r3, r8, r3
 800b166:	9311      	str	r3, [sp, #68]	; 0x44
 800b168:	f000 80ae 	beq.w	800b2c8 <_svfprintf_r+0x12f0>
 800b16c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b16e:	2c65      	cmp	r4, #101	; 0x65
 800b170:	f340 818a 	ble.w	800b488 <_svfprintf_r+0x14b0>
 800b174:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b176:	2d66      	cmp	r5, #102	; 0x66
 800b178:	f000 8101 	beq.w	800b37e <_svfprintf_r+0x13a6>
 800b17c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800b17e:	9418      	str	r4, [sp, #96]	; 0x60
 800b180:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b182:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b184:	42ac      	cmp	r4, r5
 800b186:	f2c0 80ea 	blt.w	800b35e <_svfprintf_r+0x1386>
 800b18a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b18c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b18e:	07e0      	lsls	r0, r4, #31
 800b190:	bf4b      	itete	mi
 800b192:	3501      	addmi	r5, #1
 800b194:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 800b198:	ea25 73e5 	bicmi.w	r3, r5, r5, asr #31
 800b19c:	2467      	movpl	r4, #103	; 0x67
 800b19e:	bf4d      	iteet	mi
 800b1a0:	2467      	movmi	r4, #103	; 0x67
 800b1a2:	9510      	strpl	r5, [sp, #64]	; 0x40
 800b1a4:	9416      	strpl	r4, [sp, #88]	; 0x58
 800b1a6:	9510      	strmi	r5, [sp, #64]	; 0x40
 800b1a8:	bf48      	it	mi
 800b1aa:	9416      	strmi	r4, [sp, #88]	; 0x58
 800b1ac:	f1bb 0f00 	cmp.w	fp, #0
 800b1b0:	d175      	bne.n	800b29e <_svfprintf_r+0x12c6>
 800b1b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b1b4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800b1ba:	940a      	str	r4, [sp, #40]	; 0x28
 800b1bc:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800b1c0:	f7ff b84b 	b.w	800a25a <_svfprintf_r+0x282>
 800b1c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b1c6:	aa2b      	add	r2, sp, #172	; 0xac
 800b1c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1ca:	f002 fa31 	bl	800d630 <__ssprint_r>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f47e afe7 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b1d4:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b1d6:	af38      	add	r7, sp, #224	; 0xe0
 800b1d8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800b1da:	e6e3      	b.n	800afa4 <_svfprintf_r+0xfcc>
 800b1dc:	3301      	adds	r3, #1
 800b1de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b1e0:	2b07      	cmp	r3, #7
 800b1e2:	4452      	add	r2, sl
 800b1e4:	932c      	str	r3, [sp, #176]	; 0xb0
 800b1e6:	e887 0410 	stmia.w	r7, {r4, sl}
 800b1ea:	bfd8      	it	le
 800b1ec:	3708      	addle	r7, #8
 800b1ee:	922d      	str	r2, [sp, #180]	; 0xb4
 800b1f0:	dd0a      	ble.n	800b208 <_svfprintf_r+0x1230>
 800b1f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b1f4:	aa2b      	add	r2, sp, #172	; 0xac
 800b1f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1f8:	f002 fa1a 	bl	800d630 <__ssprint_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f47e afd0 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b202:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b204:	af38      	add	r7, sp, #224	; 0xe0
 800b206:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b208:	3301      	adds	r3, #1
 800b20a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b20c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b20e:	2b07      	cmp	r3, #7
 800b210:	932c      	str	r3, [sp, #176]	; 0xb0
 800b212:	4414      	add	r4, r2
 800b214:	f8c7 8000 	str.w	r8, [r7]
 800b218:	942d      	str	r4, [sp, #180]	; 0xb4
 800b21a:	607d      	str	r5, [r7, #4]
 800b21c:	f77f a902 	ble.w	800a424 <_svfprintf_r+0x44c>
 800b220:	e47a      	b.n	800ab18 <_svfprintf_r+0xb40>
 800b222:	950c      	str	r5, [sp, #48]	; 0x30
 800b224:	f7fe faf4 	bl	8009810 <strlen>
 800b228:	9414      	str	r4, [sp, #80]	; 0x50
 800b22a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b22c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800b230:	9418      	str	r4, [sp, #96]	; 0x60
 800b232:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 800b236:	9010      	str	r0, [sp, #64]	; 0x40
 800b238:	950d      	str	r5, [sp, #52]	; 0x34
 800b23a:	f7ff b80e 	b.w	800a25a <_svfprintf_r+0x282>
 800b23e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b240:	aa2b      	add	r2, sp, #172	; 0xac
 800b242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b244:	f002 f9f4 	bl	800d630 <__ssprint_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	f47e afaa 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b24e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800b250:	af38      	add	r7, sp, #224	; 0xe0
 800b252:	e4b1      	b.n	800abb8 <_svfprintf_r+0xbe0>
 800b254:	08010bd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, fp}
 800b258:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b25a:	aa2b      	add	r2, sp, #172	; 0xac
 800b25c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b25e:	f002 f9e7 	bl	800d630 <__ssprint_r>
 800b262:	2800      	cmp	r0, #0
 800b264:	f47e af9d 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b268:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b26a:	af38      	add	r7, sp, #224	; 0xe0
 800b26c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b26e:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	e5a7      	b.n	800adc4 <_svfprintf_r+0xdec>
 800b274:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b276:	46c2      	mov	sl, r8
 800b278:	f241 0850 	movw	r8, #4176	; 0x1050
 800b27c:	9414      	str	r4, [sp, #80]	; 0x50
 800b27e:	2d06      	cmp	r5, #6
 800b280:	bf28      	it	cs
 800b282:	2506      	movcs	r5, #6
 800b284:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b288:	9510      	str	r5, [sp, #64]	; 0x40
 800b28a:	4654      	mov	r4, sl
 800b28c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b290:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 800b294:	950d      	str	r5, [sp, #52]	; 0x34
 800b296:	f6c0 0801 	movt	r8, #2049	; 0x801
 800b29a:	f7fe bfde 	b.w	800a25a <_svfprintf_r+0x282>
 800b29e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b2a0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800b2a4:	2400      	movs	r4, #0
 800b2a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b2a8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800b2ac:	950a      	str	r5, [sp, #40]	; 0x28
 800b2ae:	940c      	str	r4, [sp, #48]	; 0x30
 800b2b0:	f7fe bfd6 	b.w	800a260 <_svfprintf_r+0x288>
 800b2b4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 800b2b8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800b2bc:	f7ff b9b2 	b.w	800a624 <_svfprintf_r+0x64c>
 800b2c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b2c2:	ebc8 0303 	rsb	r3, r8, r3
 800b2c6:	9311      	str	r3, [sp, #68]	; 0x44
 800b2c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b2ca:	1cda      	adds	r2, r3, #3
 800b2cc:	db11      	blt.n	800b2f2 <_svfprintf_r+0x131a>
 800b2ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b2d0:	429c      	cmp	r4, r3
 800b2d2:	db0e      	blt.n	800b2f2 <_svfprintf_r+0x131a>
 800b2d4:	9318      	str	r3, [sp, #96]	; 0x60
 800b2d6:	e753      	b.n	800b180 <_svfprintf_r+0x11a8>
 800b2d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2da:	9414      	str	r4, [sp, #80]	; 0x50
 800b2dc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b2e0:	950d      	str	r5, [sp, #52]	; 0x34
 800b2e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2e4:	9018      	str	r0, [sp, #96]	; 0x60
 800b2e6:	900c      	str	r0, [sp, #48]	; 0x30
 800b2e8:	9510      	str	r5, [sp, #64]	; 0x40
 800b2ea:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800b2ee:	f7fe bfb4 	b.w	800a25a <_svfprintf_r+0x282>
 800b2f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b2f4:	3d02      	subs	r5, #2
 800b2f6:	9516      	str	r5, [sp, #88]	; 0x58
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	9325      	str	r3, [sp, #148]	; 0x94
 800b300:	bfba      	itte	lt
 800b302:	425b      	neglt	r3, r3
 800b304:	222d      	movlt	r2, #45	; 0x2d
 800b306:	222b      	movge	r2, #43	; 0x2b
 800b308:	2b09      	cmp	r3, #9
 800b30a:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
 800b30e:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 800b312:	dc43      	bgt.n	800b39c <_svfprintf_r+0x13c4>
 800b314:	3330      	adds	r3, #48	; 0x30
 800b316:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800b31a:	2330      	movs	r3, #48	; 0x30
 800b31c:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
 800b320:	ab28      	add	r3, sp, #160	; 0xa0
 800b322:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b324:	aa27      	add	r2, sp, #156	; 0x9c
 800b326:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b328:	1a9a      	subs	r2, r3, r2
 800b32a:	2d01      	cmp	r5, #1
 800b32c:	921e      	str	r2, [sp, #120]	; 0x78
 800b32e:	4414      	add	r4, r2
 800b330:	9410      	str	r4, [sp, #64]	; 0x40
 800b332:	dd78      	ble.n	800b426 <_svfprintf_r+0x144e>
 800b334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b336:	2400      	movs	r4, #0
 800b338:	9418      	str	r4, [sp, #96]	; 0x60
 800b33a:	3301      	adds	r3, #1
 800b33c:	9310      	str	r3, [sp, #64]	; 0x40
 800b33e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b342:	e733      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b344:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b346:	aa2b      	add	r2, sp, #172	; 0xac
 800b348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b34a:	f002 f971 	bl	800d630 <__ssprint_r>
 800b34e:	2800      	cmp	r0, #0
 800b350:	f47e af27 	bne.w	800a1a2 <_svfprintf_r+0x1ca>
 800b354:	9925      	ldr	r1, [sp, #148]	; 0x94
 800b356:	af38      	add	r7, sp, #224	; 0xe0
 800b358:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b35a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800b35c:	e638      	b.n	800afd0 <_svfprintf_r+0xff8>
 800b35e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b360:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b362:	2d00      	cmp	r5, #0
 800b364:	bfd4      	ite	le
 800b366:	f1c5 0302 	rsble	r3, r5, #2
 800b36a:	2301      	movgt	r3, #1
 800b36c:	441c      	add	r4, r3
 800b36e:	2567      	movs	r5, #103	; 0x67
 800b370:	9410      	str	r4, [sp, #64]	; 0x40
 800b372:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800b376:	9516      	str	r5, [sp, #88]	; 0x58
 800b378:	e718      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b37a:	2002      	movs	r0, #2
 800b37c:	e699      	b.n	800b0b2 <_svfprintf_r+0x10da>
 800b37e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b380:	2d00      	cmp	r5, #0
 800b382:	9518      	str	r5, [sp, #96]	; 0x60
 800b384:	dd58      	ble.n	800b438 <_svfprintf_r+0x1460>
 800b386:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b388:	2c00      	cmp	r4, #0
 800b38a:	d144      	bne.n	800b416 <_svfprintf_r+0x143e>
 800b38c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b38e:	07ed      	lsls	r5, r5, #31
 800b390:	d441      	bmi.n	800b416 <_svfprintf_r+0x143e>
 800b392:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b394:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800b398:	9410      	str	r4, [sp, #64]	; 0x40
 800b39a:	e707      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b39c:	f246 6167 	movw	r1, #26215	; 0x6667
 800b3a0:	f10d 05aa 	add.w	r5, sp, #170	; 0xaa
 800b3a4:	f2c6 6166 	movt	r1, #26214	; 0x6666
 800b3a8:	fb81 2003 	smull	r2, r0, r1, r3
 800b3ac:	17da      	asrs	r2, r3, #31
 800b3ae:	462c      	mov	r4, r5
 800b3b0:	3d01      	subs	r5, #1
 800b3b2:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800b3b6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800b3ba:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 800b3be:	4613      	mov	r3, r2
 800b3c0:	2b09      	cmp	r3, #9
 800b3c2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800b3c6:	7022      	strb	r2, [r4, #0]
 800b3c8:	dcee      	bgt.n	800b3a8 <_svfprintf_r+0x13d0>
 800b3ca:	f10d 00ab 	add.w	r0, sp, #171	; 0xab
 800b3ce:	3330      	adds	r3, #48	; 0x30
 800b3d0:	42a8      	cmp	r0, r5
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	f804 2c01 	strb.w	r2, [r4, #-1]
 800b3d8:	d953      	bls.n	800b482 <_svfprintf_r+0x14aa>
 800b3da:	f10d 019d 	add.w	r1, sp, #157	; 0x9d
 800b3de:	4623      	mov	r3, r4
 800b3e0:	e001      	b.n	800b3e6 <_svfprintf_r+0x140e>
 800b3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e6:	4283      	cmp	r3, r0
 800b3e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b3ec:	d1f9      	bne.n	800b3e2 <_svfprintf_r+0x140a>
 800b3ee:	ad48      	add	r5, sp, #288	; 0x120
 800b3f0:	ebc4 0345 	rsb	r3, r4, r5, lsl #1
 800b3f4:	3bf6      	subs	r3, #246	; 0xf6
 800b3f6:	e794      	b.n	800b322 <_svfprintf_r+0x134a>
 800b3f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4651      	mov	r1, sl
 800b400:	f003 ff44 	bl	800f28c <__aeabi_dcmpeq>
 800b404:	2800      	cmp	r0, #0
 800b406:	f47f ae73 	bne.w	800b0f0 <_svfprintf_r+0x1118>
 800b40a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b40c:	f1c0 0301 	rsb	r3, r0, #1
 800b410:	9325      	str	r3, [sp, #148]	; 0x94
 800b412:	441c      	add	r4, r3
 800b414:	e692      	b.n	800b13c <_svfprintf_r+0x1164>
 800b416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b418:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b41a:	1c6b      	adds	r3, r5, #1
 800b41c:	441c      	add	r4, r3
 800b41e:	9410      	str	r4, [sp, #64]	; 0x40
 800b420:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800b424:	e6c2      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b428:	f014 0301 	ands.w	r3, r4, #1
 800b42c:	d182      	bne.n	800b334 <_svfprintf_r+0x135c>
 800b42e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b430:	9318      	str	r3, [sp, #96]	; 0x60
 800b432:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b436:	e6b9      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b43a:	b935      	cbnz	r5, 800b44a <_svfprintf_r+0x1472>
 800b43c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b43e:	07e4      	lsls	r4, r4, #31
 800b440:	bf5c      	itt	pl
 800b442:	2301      	movpl	r3, #1
 800b444:	9310      	strpl	r3, [sp, #64]	; 0x40
 800b446:	f57f aeb1 	bpl.w	800b1ac <_svfprintf_r+0x11d4>
 800b44a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b44c:	3502      	adds	r5, #2
 800b44e:	9510      	str	r5, [sp, #64]	; 0x40
 800b450:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b454:	e6aa      	b.n	800b1ac <_svfprintf_r+0x11d4>
 800b456:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b458:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b45c:	46a1      	mov	r9, r4
 800b45e:	682d      	ldr	r5, [r5, #0]
 800b460:	950c      	str	r5, [sp, #48]	; 0x30
 800b462:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b464:	1d29      	adds	r1, r5, #4
 800b466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b468:	9114      	str	r1, [sp, #80]	; 0x50
 800b46a:	2d00      	cmp	r5, #0
 800b46c:	f6be ae1d 	bge.w	800a0aa <_svfprintf_r+0xd2>
 800b470:	f7fe be18 	b.w	800a0a4 <_svfprintf_r+0xcc>
 800b474:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b476:	230c      	movs	r3, #12
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f7fe be98 	b.w	800a1b2 <_svfprintf_r+0x1da>
 800b482:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
 800b486:	e74c      	b.n	800b322 <_svfprintf_r+0x134a>
 800b488:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b48a:	e735      	b.n	800b2f8 <_svfprintf_r+0x1320>
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <quorem>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	468c      	mov	ip, r1
 800b496:	6903      	ldr	r3, [r0, #16]
 800b498:	4683      	mov	fp, r0
 800b49a:	690d      	ldr	r5, [r1, #16]
 800b49c:	b085      	sub	sp, #20
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	bfc8      	it	gt
 800b4a2:	2000      	movgt	r0, #0
 800b4a4:	f300 8096 	bgt.w	800b5d4 <quorem+0x144>
 800b4a8:	3d01      	subs	r5, #1
 800b4aa:	f101 0414 	add.w	r4, r1, #20
 800b4ae:	f10b 0a14 	add.w	sl, fp, #20
 800b4b2:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 800b4b6:	00aa      	lsls	r2, r5, #2
 800b4b8:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800b4bc:	4691      	mov	r9, r2
 800b4be:	3101      	adds	r1, #1
 800b4c0:	9202      	str	r2, [sp, #8]
 800b4c2:	f8cd c004 	str.w	ip, [sp, #4]
 800b4c6:	4452      	add	r2, sl
 800b4c8:	9203      	str	r2, [sp, #12]
 800b4ca:	f003 f981 	bl	800e7d0 <__aeabi_uidiv>
 800b4ce:	44a1      	add	r9, r4
 800b4d0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d041      	beq.n	800b55e <quorem+0xce>
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4622      	mov	r2, r4
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4653      	mov	r3, sl
 800b4e2:	460f      	mov	r7, r1
 800b4e4:	f852 1b04 	ldr.w	r1, [r2], #4
 800b4e8:	681e      	ldr	r6, [r3, #0]
 800b4ea:	4591      	cmp	r9, r2
 800b4ec:	fa1f fe81 	uxth.w	lr, r1
 800b4f0:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b4f4:	fb0e 7708 	mla	r7, lr, r8, r7
 800b4f8:	fa1f fe86 	uxth.w	lr, r6
 800b4fc:	fb01 f108 	mul.w	r1, r1, r8
 800b500:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800b504:	b2bf      	uxth	r7, r7
 800b506:	ebc7 0000 	rsb	r0, r7, r0
 800b50a:	4486      	add	lr, r0
 800b50c:	b288      	uxth	r0, r1
 800b50e:	ebc0 4016 	rsb	r0, r0, r6, lsr #16
 800b512:	ea4f 4711 	mov.w	r7, r1, lsr #16
 800b516:	eb00 402e 	add.w	r0, r0, lr, asr #16
 800b51a:	fa1f fe8e 	uxth.w	lr, lr
 800b51e:	ea4e 4100 	orr.w	r1, lr, r0, lsl #16
 800b522:	ea4f 4020 	mov.w	r0, r0, asr #16
 800b526:	f843 1b04 	str.w	r1, [r3], #4
 800b52a:	d2db      	bcs.n	800b4e4 <quorem+0x54>
 800b52c:	9a02      	ldr	r2, [sp, #8]
 800b52e:	f85a 3002 	ldr.w	r3, [sl, r2]
 800b532:	b9a3      	cbnz	r3, 800b55e <quorem+0xce>
 800b534:	9a03      	ldr	r2, [sp, #12]
 800b536:	1f13      	subs	r3, r2, #4
 800b538:	459a      	cmp	sl, r3
 800b53a:	d20e      	bcs.n	800b55a <quorem+0xca>
 800b53c:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800b540:	b95b      	cbnz	r3, 800b55a <quorem+0xca>
 800b542:	f1a2 0308 	sub.w	r3, r2, #8
 800b546:	e001      	b.n	800b54c <quorem+0xbc>
 800b548:	6812      	ldr	r2, [r2, #0]
 800b54a:	b932      	cbnz	r2, 800b55a <quorem+0xca>
 800b54c:	459a      	cmp	sl, r3
 800b54e:	461a      	mov	r2, r3
 800b550:	f105 35ff 	add.w	r5, r5, #4294967295
 800b554:	f1a3 0304 	sub.w	r3, r3, #4
 800b558:	d3f6      	bcc.n	800b548 <quorem+0xb8>
 800b55a:	f8cb 5010 	str.w	r5, [fp, #16]
 800b55e:	4661      	mov	r1, ip
 800b560:	4658      	mov	r0, fp
 800b562:	f001 fc99 	bl	800ce98 <__mcmp>
 800b566:	2800      	cmp	r0, #0
 800b568:	db33      	blt.n	800b5d2 <quorem+0x142>
 800b56a:	f108 0801 	add.w	r8, r8, #1
 800b56e:	4653      	mov	r3, sl
 800b570:	2200      	movs	r2, #0
 800b572:	f854 6b04 	ldr.w	r6, [r4], #4
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	45a1      	cmp	r9, r4
 800b57a:	b2b1      	uxth	r1, r6
 800b57c:	ea4f 4616 	mov.w	r6, r6, lsr #16
 800b580:	ebc1 0202 	rsb	r2, r1, r2
 800b584:	b287      	uxth	r7, r0
 800b586:	eb02 0107 	add.w	r1, r2, r7
 800b58a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 800b58e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800b592:	b289      	uxth	r1, r1
 800b594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b598:	ea4f 4222 	mov.w	r2, r2, asr #16
 800b59c:	f843 1b04 	str.w	r1, [r3], #4
 800b5a0:	d2e7      	bcs.n	800b572 <quorem+0xe2>
 800b5a2:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 800b5a6:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800b5aa:	b992      	cbnz	r2, 800b5d2 <quorem+0x142>
 800b5ac:	1f1a      	subs	r2, r3, #4
 800b5ae:	4592      	cmp	sl, r2
 800b5b0:	d20d      	bcs.n	800b5ce <quorem+0x13e>
 800b5b2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b5b6:	b952      	cbnz	r2, 800b5ce <quorem+0x13e>
 800b5b8:	3b08      	subs	r3, #8
 800b5ba:	e001      	b.n	800b5c0 <quorem+0x130>
 800b5bc:	6812      	ldr	r2, [r2, #0]
 800b5be:	b932      	cbnz	r2, 800b5ce <quorem+0x13e>
 800b5c0:	459a      	cmp	sl, r3
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f105 35ff 	add.w	r5, r5, #4294967295
 800b5c8:	f1a3 0304 	sub.w	r3, r3, #4
 800b5cc:	d3f6      	bcc.n	800b5bc <quorem+0x12c>
 800b5ce:	f8cb 5010 	str.w	r5, [fp, #16]
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	b005      	add	sp, #20
 800b5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5da:	bf00      	nop

0800b5dc <_dtoa_r>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	b09b      	sub	sp, #108	; 0x6c
 800b5e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	4692      	mov	sl, r2
 800b5e8:	469b      	mov	fp, r3
 800b5ea:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	f000 82bb 	beq.w	800bb68 <_dtoa_r+0x58c>
 800b5f2:	6833      	ldr	r3, [r6, #0]
 800b5f4:	b153      	cbz	r3, 800b60c <_dtoa_r+0x30>
 800b5f6:	6872      	ldr	r2, [r6, #4]
 800b5f8:	2601      	movs	r6, #1
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	4096      	lsls	r6, r2
 800b5fe:	609e      	str	r6, [r3, #8]
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	f001 f9ef 	bl	800c9e4 <_Bfree>
 800b606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	f1bb 0f00 	cmp.w	fp, #0
 800b610:	bfb4      	ite	lt
 800b612:	2301      	movlt	r3, #1
 800b614:	2300      	movge	r3, #0
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f04f 0300 	mov.w	r3, #0
 800b61c:	bfb4      	ite	lt
 800b61e:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 800b622:	46d9      	movge	r9, fp
 800b624:	461a      	mov	r2, r3
 800b626:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800b62a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800b62e:	ea09 0303 	and.w	r3, r9, r3
 800b632:	bfb8      	it	lt
 800b634:	46cb      	movlt	fp, r9
 800b636:	4293      	cmp	r3, r2
 800b638:	d014      	beq.n	800b664 <_dtoa_r+0x88>
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	4650      	mov	r0, sl
 800b640:	4659      	mov	r1, fp
 800b642:	f003 fe23 	bl	800f28c <__aeabi_dcmpeq>
 800b646:	4680      	mov	r8, r0
 800b648:	b328      	cbz	r0, 800b696 <_dtoa_r+0xba>
 800b64a:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800b64c:	2301      	movs	r3, #1
 800b64e:	6033      	str	r3, [r6, #0]
 800b650:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800b652:	2e00      	cmp	r6, #0
 800b654:	f000 80dc 	beq.w	800b810 <_dtoa_r+0x234>
 800b658:	4baf      	ldr	r3, [pc, #700]	; (800b918 <_dtoa_r+0x33c>)
 800b65a:	1e58      	subs	r0, r3, #1
 800b65c:	6033      	str	r3, [r6, #0]
 800b65e:	b01b      	add	sp, #108	; 0x6c
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800b666:	f241 0068 	movw	r0, #4200	; 0x1068
 800b66a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b66e:	f6c0 0001 	movt	r0, #2049	; 0x801
 800b672:	6033      	str	r3, [r6, #0]
 800b674:	f1ba 0f00 	cmp.w	sl, #0
 800b678:	f000 80aa 	beq.w	800b7d0 <_dtoa_r+0x1f4>
 800b67c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d0ed      	beq.n	800b65e <_dtoa_r+0x82>
 800b682:	78c3      	ldrb	r3, [r0, #3]
 800b684:	2b00      	cmp	r3, #0
 800b686:	f040 80b2 	bne.w	800b7ee <_dtoa_r+0x212>
 800b68a:	1cc3      	adds	r3, r0, #3
 800b68c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	b01b      	add	sp, #108	; 0x6c
 800b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b696:	aa19      	add	r2, sp, #100	; 0x64
 800b698:	ab18      	add	r3, sp, #96	; 0x60
 800b69a:	9200      	str	r2, [sp, #0]
 800b69c:	4620      	mov	r0, r4
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	465b      	mov	r3, fp
 800b6a4:	f001 fd08 	bl	800d0b8 <__d2b>
 800b6a8:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800b6ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6ae:	f040 80a1 	bne.w	800b7f4 <_dtoa_r+0x218>
 800b6b2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b6b4:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800b6b8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b6ba:	443d      	add	r5, r7
 800b6bc:	429d      	cmp	r5, r3
 800b6be:	f2c0 8278 	blt.w	800bbb2 <_dtoa_r+0x5d6>
 800b6c2:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800b6c6:	f205 4212 	addw	r2, r5, #1042	; 0x412
 800b6ca:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800b6ce:	fa2a f202 	lsr.w	r2, sl, r2
 800b6d2:	1b5b      	subs	r3, r3, r5
 800b6d4:	fa09 f003 	lsl.w	r0, r9, r3
 800b6d8:	4310      	orrs	r0, r2
 800b6da:	f003 faf9 	bl	800ecd0 <__aeabi_ui2d>
 800b6de:	3d01      	subs	r5, #1
 800b6e0:	46b8      	mov	r8, r7
 800b6e2:	2601      	movs	r6, #1
 800b6e4:	9615      	str	r6, [sp, #84]	; 0x54
 800b6e6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800b6f2:	f003 f9af 	bl	800ea54 <__aeabi_dsub>
 800b6f6:	a382      	add	r3, pc, #520	; (adr r3, 800b900 <_dtoa_r+0x324>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f003 fb5e 	bl	800edbc <__aeabi_dmul>
 800b700:	a381      	add	r3, pc, #516	; (adr r3, 800b908 <_dtoa_r+0x32c>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f003 f9a7 	bl	800ea58 <__adddf3>
 800b70a:	4606      	mov	r6, r0
 800b70c:	4628      	mov	r0, r5
 800b70e:	460f      	mov	r7, r1
 800b710:	f003 faee 	bl	800ecf0 <__aeabi_i2d>
 800b714:	a37e      	add	r3, pc, #504	; (adr r3, 800b910 <_dtoa_r+0x334>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f003 fb4f 	bl	800edbc <__aeabi_dmul>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4630      	mov	r0, r6
 800b724:	4639      	mov	r1, r7
 800b726:	f003 f997 	bl	800ea58 <__adddf3>
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	f003 fddf 	bl	800f2f0 <__aeabi_d2iz>
 800b732:	4639      	mov	r1, r7
 800b734:	2200      	movs	r2, #0
 800b736:	2300      	movs	r3, #0
 800b738:	9004      	str	r0, [sp, #16]
 800b73a:	4630      	mov	r0, r6
 800b73c:	f003 fdb0 	bl	800f2a0 <__aeabi_dcmplt>
 800b740:	2800      	cmp	r0, #0
 800b742:	f040 8226 	bne.w	800bb92 <_dtoa_r+0x5b6>
 800b746:	9e04      	ldr	r6, [sp, #16]
 800b748:	2e16      	cmp	r6, #22
 800b74a:	bf84      	itt	hi
 800b74c:	2601      	movhi	r6, #1
 800b74e:	960f      	strhi	r6, [sp, #60]	; 0x3c
 800b750:	d812      	bhi.n	800b778 <_dtoa_r+0x19c>
 800b752:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800b756:	4652      	mov	r2, sl
 800b758:	f6c0 0101 	movt	r1, #2049	; 0x801
 800b75c:	465b      	mov	r3, fp
 800b75e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b762:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b766:	f003 fdb9 	bl	800f2dc <__aeabi_dcmpgt>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f000 821f 	beq.w	800bbae <_dtoa_r+0x5d2>
 800b770:	3e01      	subs	r6, #1
 800b772:	9604      	str	r6, [sp, #16]
 800b774:	2600      	movs	r6, #0
 800b776:	960f      	str	r6, [sp, #60]	; 0x3c
 800b778:	ebc5 0508 	rsb	r5, r5, r8
 800b77c:	3d01      	subs	r5, #1
 800b77e:	9506      	str	r5, [sp, #24]
 800b780:	bf49      	itett	mi
 800b782:	426e      	negmi	r6, r5
 800b784:	2600      	movpl	r6, #0
 800b786:	960a      	strmi	r6, [sp, #40]	; 0x28
 800b788:	2600      	movmi	r6, #0
 800b78a:	bf54      	ite	pl
 800b78c:	960a      	strpl	r6, [sp, #40]	; 0x28
 800b78e:	9606      	strmi	r6, [sp, #24]
 800b790:	9e04      	ldr	r6, [sp, #16]
 800b792:	2e00      	cmp	r6, #0
 800b794:	f2c0 81f1 	blt.w	800bb7a <_dtoa_r+0x59e>
 800b798:	f8dd e018 	ldr.w	lr, [sp, #24]
 800b79c:	960e      	str	r6, [sp, #56]	; 0x38
 800b79e:	44b6      	add	lr, r6
 800b7a0:	2600      	movs	r6, #0
 800b7a2:	f8cd e018 	str.w	lr, [sp, #24]
 800b7a6:	960c      	str	r6, [sp, #48]	; 0x30
 800b7a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b7aa:	2e09      	cmp	r6, #9
 800b7ac:	d835      	bhi.n	800b81a <_dtoa_r+0x23e>
 800b7ae:	2e05      	cmp	r6, #5
 800b7b0:	bfc4      	itt	gt
 800b7b2:	3e04      	subgt	r6, #4
 800b7b4:	9624      	strgt	r6, [sp, #144]	; 0x90
 800b7b6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b7b8:	bfcc      	ite	gt
 800b7ba:	2500      	movgt	r5, #0
 800b7bc:	2501      	movle	r5, #1
 800b7be:	1eb3      	subs	r3, r6, #2
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d82c      	bhi.n	800b81e <_dtoa_r+0x242>
 800b7c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b7c8:	02290361 	eoreq	r0, r9, #-2080374783	; 0x84000001
 800b7cc:	058d0370 	streq	r0, [sp, #880]	; 0x370
 800b7d0:	f241 025c 	movw	r2, #4188	; 0x105c
 800b7d4:	f241 0368 	movw	r3, #4200	; 0x1068
 800b7d8:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800b7dc:	f6c0 0201 	movt	r2, #2049	; 0x801
 800b7e0:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	bf0c      	ite	eq
 800b7e8:	4610      	moveq	r0, r2
 800b7ea:	4618      	movne	r0, r3
 800b7ec:	e746      	b.n	800b67c <_dtoa_r+0xa0>
 800b7ee:	f100 0308 	add.w	r3, r0, #8
 800b7f2:	e74b      	b.n	800b68c <_dtoa_r+0xb0>
 800b7f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7f8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800b7fc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b800:	4650      	mov	r0, sl
 800b802:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b806:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b80a:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 800b80e:	e76c      	b.n	800b6ea <_dtoa_r+0x10e>
 800b810:	f241 0058 	movw	r0, #4184	; 0x1058
 800b814:	f6c0 0001 	movt	r0, #2049	; 0x801
 800b818:	e721      	b.n	800b65e <_dtoa_r+0x82>
 800b81a:	2600      	movs	r6, #0
 800b81c:	9624      	str	r6, [sp, #144]	; 0x90
 800b81e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b820:	2300      	movs	r3, #0
 800b822:	4619      	mov	r1, r3
 800b824:	4620      	mov	r0, r4
 800b826:	f04f 36ff 	mov.w	r6, #4294967295
 800b82a:	9325      	str	r3, [sp, #148]	; 0x94
 800b82c:	606b      	str	r3, [r5, #4]
 800b82e:	9609      	str	r6, [sp, #36]	; 0x24
 800b830:	9614      	str	r6, [sp, #80]	; 0x50
 800b832:	f001 f8a1 	bl	800c978 <_Balloc>
 800b836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b838:	2601      	movs	r6, #1
 800b83a:	960d      	str	r6, [sp, #52]	; 0x34
 800b83c:	6028      	str	r0, [r5, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b844:	2b00      	cmp	r3, #0
 800b846:	f2c0 80c7 	blt.w	800b9d8 <_dtoa_r+0x3fc>
 800b84a:	9e04      	ldr	r6, [sp, #16]
 800b84c:	2e0e      	cmp	r6, #14
 800b84e:	f300 80c3 	bgt.w	800b9d8 <_dtoa_r+0x3fc>
 800b852:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800b856:	f640 33f8 	movw	r3, #3064	; 0xbf8
 800b85a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b85c:	f6c0 0301 	movt	r3, #2049	; 0x801
 800b860:	ea4f 72de 	mov.w	r2, lr, lsr #31
 800b864:	2e00      	cmp	r6, #0
 800b866:	bfcc      	ite	gt
 800b868:	2200      	movgt	r2, #0
 800b86a:	f002 0201 	andle.w	r2, r2, #1
 800b86e:	9e04      	ldr	r6, [sp, #16]
 800b870:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b874:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b878:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b87c:	2a00      	cmp	r2, #0
 800b87e:	f040 846e 	bne.w	800c15e <_dtoa_r+0xb82>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4650      	mov	r0, sl
 800b888:	4659      	mov	r1, fp
 800b88a:	f003 fbc1 	bl	800f010 <__aeabi_ddiv>
 800b88e:	9e08      	ldr	r6, [sp, #32]
 800b890:	f003 fd2e 	bl	800f2f0 <__aeabi_d2iz>
 800b894:	1c75      	adds	r5, r6, #1
 800b896:	4680      	mov	r8, r0
 800b898:	f003 fa2a 	bl	800ecf0 <__aeabi_i2d>
 800b89c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8a0:	f003 fa8c 	bl	800edbc <__aeabi_dmul>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f003 f8d2 	bl	800ea54 <__aeabi_dsub>
 800b8b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b2:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b8b6:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	f88e 3000 	strb.w	r3, [lr]
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	460f      	mov	r7, r1
 800b8c4:	d05b      	beq.n	800b97e <_dtoa_r+0x3a2>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b8ce:	f003 fa75 	bl	800edbc <__aeabi_dmul>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	f003 fcd7 	bl	800f28c <__aeabi_dcmpeq>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f040 8519 	bne.w	800c316 <_dtoa_r+0xd3a>
 800b8e4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b8e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8ea:	9908      	ldr	r1, [sp, #32]
 800b8ec:	4482      	add	sl, r0
 800b8ee:	f8cd a00c 	str.w	sl, [sp, #12]
 800b8f2:	f101 0902 	add.w	r9, r1, #2
 800b8f6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800b8fa:	e01a      	b.n	800b932 <_dtoa_r+0x356>
 800b8fc:	f3af 8000 	nop.w
 800b900:	636f4361 	cmnvs	pc, #-2080374783	; 0x84000001
 800b904:	3fd287a7 	svccc	0x00d287a7
 800b908:	8b60c8b3 	blhi	983dbdc <__RW_LOAD_ADDR__+0x182cb64>
 800b90c:	3fc68a28 	svccc	0x00c68a28
 800b910:	509f79fb 			; <UNDEFINED> instruction: 0x509f79fb
 800b914:	3fd34413 	svccc	0x00d34413
 800b918:	08011059 	stmdaeq	r1, {r0, r3, r4, r6, ip}
 800b91c:	f003 fa4e 	bl	800edbc <__aeabi_dmul>
 800b920:	2200      	movs	r2, #0
 800b922:	2300      	movs	r3, #0
 800b924:	4606      	mov	r6, r0
 800b926:	460f      	mov	r7, r1
 800b928:	f003 fcb0 	bl	800f28c <__aeabi_dcmpeq>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f040 84f2 	bne.w	800c316 <_dtoa_r+0xd3a>
 800b932:	4652      	mov	r2, sl
 800b934:	465b      	mov	r3, fp
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f003 fb69 	bl	800f010 <__aeabi_ddiv>
 800b93e:	464d      	mov	r5, r9
 800b940:	f003 fcd6 	bl	800f2f0 <__aeabi_d2iz>
 800b944:	4680      	mov	r8, r0
 800b946:	f003 f9d3 	bl	800ecf0 <__aeabi_i2d>
 800b94a:	4652      	mov	r2, sl
 800b94c:	465b      	mov	r3, fp
 800b94e:	f003 fa35 	bl	800edbc <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f003 f87b 	bl	800ea54 <__aeabi_dsub>
 800b95e:	f108 0e30 	add.w	lr, r8, #48	; 0x30
 800b962:	f809 ec01 	strb.w	lr, [r9, #-1]
 800b966:	2300      	movs	r3, #0
 800b968:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b972:	45f1      	cmp	r9, lr
 800b974:	f109 0901 	add.w	r9, r9, #1
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	d1ce      	bne.n	800b91c <_dtoa_r+0x340>
 800b97e:	4632      	mov	r2, r6
 800b980:	463b      	mov	r3, r7
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f003 f867 	bl	800ea58 <__adddf3>
 800b98a:	4606      	mov	r6, r0
 800b98c:	460f      	mov	r7, r1
 800b98e:	4632      	mov	r2, r6
 800b990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b994:	463b      	mov	r3, r7
 800b996:	f003 fc83 	bl	800f2a0 <__aeabi_dcmplt>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	f000 8570 	beq.w	800c480 <_dtoa_r+0xea4>
 800b9a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9a4:	9e04      	ldr	r6, [sp, #16]
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800b9ac:	9508      	str	r5, [sp, #32]
 800b9ae:	9616      	str	r6, [sp, #88]	; 0x58
 800b9b0:	e005      	b.n	800b9be <_dtoa_r+0x3e2>
 800b9b2:	454b      	cmp	r3, r9
 800b9b4:	f000 84b8 	beq.w	800c328 <_dtoa_r+0xd4c>
 800b9b8:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b9c2:	f102 33ff 	add.w	r3, r2, #4294967295
 800b9c6:	d0f4      	beq.n	800b9b2 <_dtoa_r+0x3d6>
 800b9c8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800b9ca:	9208      	str	r2, [sp, #32]
 800b9cc:	f108 0201 	add.w	r2, r8, #1
 800b9d0:	9604      	str	r6, [sp, #16]
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	e0b1      	b.n	800bb3c <_dtoa_r+0x560>
 800b9d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	f040 80f1 	bne.w	800bbc2 <_dtoa_r+0x5e6>
 800b9e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b9e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b9e4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800b9e8:	9806      	ldr	r0, [sp, #24]
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	bfc8      	it	gt
 800b9ee:	2d00      	cmpgt	r5, #0
 800b9f0:	dd09      	ble.n	800ba06 <_dtoa_r+0x42a>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b9f6:	42ab      	cmp	r3, r5
 800b9f8:	bfa8      	it	ge
 800b9fa:	462b      	movge	r3, r5
 800b9fc:	1aed      	subs	r5, r5, r3
 800b9fe:	1ac9      	subs	r1, r1, r3
 800ba00:	1ac0      	subs	r0, r0, r3
 800ba02:	910a      	str	r1, [sp, #40]	; 0x28
 800ba04:	9006      	str	r0, [sp, #24]
 800ba06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba08:	2a00      	cmp	r2, #0
 800ba0a:	dd1c      	ble.n	800ba46 <_dtoa_r+0x46a>
 800ba0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f000 8479 	beq.w	800c306 <_dtoa_r+0xd2a>
 800ba14:	2e00      	cmp	r6, #0
 800ba16:	dd10      	ble.n	800ba3a <_dtoa_r+0x45e>
 800ba18:	4641      	mov	r1, r8
 800ba1a:	4632      	mov	r2, r6
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f001 f983 	bl	800cd28 <__pow5mult>
 800ba22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba24:	4680      	mov	r8, r0
 800ba26:	4620      	mov	r0, r4
 800ba28:	4641      	mov	r1, r8
 800ba2a:	f001 f8dd 	bl	800cbe8 <__multiply>
 800ba2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba30:	4607      	mov	r7, r0
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 ffd6 	bl	800c9e4 <_Bfree>
 800ba38:	970b      	str	r7, [sp, #44]	; 0x2c
 800ba3a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800ba3e:	ebbe 0206 	subs.w	r2, lr, r6
 800ba42:	f040 84a7 	bne.w	800c394 <_dtoa_r+0xdb8>
 800ba46:	4620      	mov	r0, r4
 800ba48:	2101      	movs	r1, #1
 800ba4a:	f001 f8c3 	bl	800cbd4 <__i2b>
 800ba4e:	4606      	mov	r6, r0
 800ba50:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba52:	2800      	cmp	r0, #0
 800ba54:	dd05      	ble.n	800ba62 <_dtoa_r+0x486>
 800ba56:	4631      	mov	r1, r6
 800ba58:	4620      	mov	r0, r4
 800ba5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba5c:	f001 f964 	bl	800cd28 <__pow5mult>
 800ba60:	4606      	mov	r6, r0
 800ba62:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ba64:	2901      	cmp	r1, #1
 800ba66:	f340 8390 	ble.w	800c18a <_dtoa_r+0xbae>
 800ba6a:	2700      	movs	r7, #0
 800ba6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f040 836c 	bne.w	800c14c <_dtoa_r+0xb70>
 800ba74:	2001      	movs	r0, #1
 800ba76:	9b06      	ldr	r3, [sp, #24]
 800ba78:	4403      	add	r3, r0
 800ba7a:	f013 031f 	ands.w	r3, r3, #31
 800ba7e:	f000 8293 	beq.w	800bfa8 <_dtoa_r+0x9cc>
 800ba82:	f1c3 0220 	rsb	r2, r3, #32
 800ba86:	2a04      	cmp	r2, #4
 800ba88:	f340 8568 	ble.w	800c55c <_dtoa_r+0xf80>
 800ba8c:	f1c3 031c 	rsb	r3, r3, #28
 800ba90:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba92:	9a06      	ldr	r2, [sp, #24]
 800ba94:	441d      	add	r5, r3
 800ba96:	4419      	add	r1, r3
 800ba98:	910a      	str	r1, [sp, #40]	; 0x28
 800ba9a:	441a      	add	r2, r3
 800ba9c:	9206      	str	r2, [sp, #24]
 800ba9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800baa0:	2900      	cmp	r1, #0
 800baa2:	dd05      	ble.n	800bab0 <_dtoa_r+0x4d4>
 800baa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baa6:	4620      	mov	r0, r4
 800baa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baaa:	f001 f999 	bl	800cde0 <__lshift>
 800baae:	900b      	str	r0, [sp, #44]	; 0x2c
 800bab0:	9a06      	ldr	r2, [sp, #24]
 800bab2:	2a00      	cmp	r2, #0
 800bab4:	dd04      	ble.n	800bac0 <_dtoa_r+0x4e4>
 800bab6:	4631      	mov	r1, r6
 800bab8:	4620      	mov	r0, r4
 800baba:	f001 f991 	bl	800cde0 <__lshift>
 800babe:	4606      	mov	r6, r0
 800bac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f040 8321 	bne.w	800c10a <_dtoa_r+0xb2e>
 800bac8:	9824      	ldr	r0, [sp, #144]	; 0x90
 800baca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bacc:	2802      	cmp	r0, #2
 800bace:	bfd4      	ite	le
 800bad0:	2300      	movle	r3, #0
 800bad2:	2301      	movgt	r3, #1
 800bad4:	2900      	cmp	r1, #0
 800bad6:	bfc8      	it	gt
 800bad8:	2300      	movgt	r3, #0
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 821a 	beq.w	800bf14 <_dtoa_r+0x938>
 800bae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f040 820f 	bne.w	800bf06 <_dtoa_r+0x92a>
 800bae8:	4631      	mov	r1, r6
 800baea:	4603      	mov	r3, r0
 800baec:	2205      	movs	r2, #5
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 ff94 	bl	800ca1c <__multadd>
 800baf4:	4606      	mov	r6, r0
 800baf6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800baf8:	4631      	mov	r1, r6
 800bafa:	f001 f9cd 	bl	800ce98 <__mcmp>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f340 8201 	ble.w	800bf06 <_dtoa_r+0x92a>
 800bb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb08:	2500      	movs	r5, #0
 800bb0a:	9a04      	ldr	r2, [sp, #16]
 800bb0c:	2331      	movs	r3, #49	; 0x31
 800bb0e:	3201      	adds	r2, #1
 800bb10:	f889 3000 	strb.w	r3, [r9]
 800bb14:	9204      	str	r2, [sp, #16]
 800bb16:	f109 0301 	add.w	r3, r9, #1
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 ff60 	bl	800c9e4 <_Bfree>
 800bb24:	f1b8 0f00 	cmp.w	r8, #0
 800bb28:	d008      	beq.n	800bb3c <_dtoa_r+0x560>
 800bb2a:	4545      	cmp	r5, r8
 800bb2c:	bf18      	it	ne
 800bb2e:	2d00      	cmpne	r5, #0
 800bb30:	f040 824a 	bne.w	800bfc8 <_dtoa_r+0x9ec>
 800bb34:	4641      	mov	r1, r8
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 ff54 	bl	800c9e4 <_Bfree>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb40:	f000 ff50 	bl	800c9e4 <_Bfree>
 800bb44:	9e04      	ldr	r6, [sp, #16]
 800bb46:	2200      	movs	r2, #0
 800bb48:	4648      	mov	r0, r9
 800bb4a:	1c73      	adds	r3, r6, #1
 800bb4c:	9e08      	ldr	r6, [sp, #32]
 800bb4e:	7032      	strb	r2, [r6, #0]
 800bb50:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800bb52:	6033      	str	r3, [r6, #0]
 800bb54:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800bb56:	2e00      	cmp	r6, #0
 800bb58:	f43f ad81 	beq.w	800b65e <_dtoa_r+0x82>
 800bb5c:	9808      	ldr	r0, [sp, #32]
 800bb5e:	6030      	str	r0, [r6, #0]
 800bb60:	4648      	mov	r0, r9
 800bb62:	b01b      	add	sp, #108	; 0x6c
 800bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb68:	2010      	movs	r0, #16
 800bb6a:	f7fd ff55 	bl	8009a18 <malloc>
 800bb6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb70:	6046      	str	r6, [r0, #4]
 800bb72:	6086      	str	r6, [r0, #8]
 800bb74:	6006      	str	r6, [r0, #0]
 800bb76:	60c6      	str	r6, [r0, #12]
 800bb78:	e548      	b.n	800b60c <_dtoa_r+0x30>
 800bb7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bb7c:	f8dd e010 	ldr.w	lr, [sp, #16]
 800bb80:	ebce 0606 	rsb	r6, lr, r6
 800bb84:	960a      	str	r6, [sp, #40]	; 0x28
 800bb86:	f1ce 0600 	rsb	r6, lr, #0
 800bb8a:	960c      	str	r6, [sp, #48]	; 0x30
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	960e      	str	r6, [sp, #56]	; 0x38
 800bb90:	e60a      	b.n	800b7a8 <_dtoa_r+0x1cc>
 800bb92:	9804      	ldr	r0, [sp, #16]
 800bb94:	f003 f8ac 	bl	800ecf0 <__aeabi_i2d>
 800bb98:	4632      	mov	r2, r6
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	f003 fb76 	bl	800f28c <__aeabi_dcmpeq>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	f47f add0 	bne.w	800b746 <_dtoa_r+0x16a>
 800bba6:	9e04      	ldr	r6, [sp, #16]
 800bba8:	3e01      	subs	r6, #1
 800bbaa:	9604      	str	r6, [sp, #16]
 800bbac:	e5cb      	b.n	800b746 <_dtoa_r+0x16a>
 800bbae:	900f      	str	r0, [sp, #60]	; 0x3c
 800bbb0:	e5e2      	b.n	800b778 <_dtoa_r+0x19c>
 800bbb2:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 800bbb6:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 800bbba:	1b40      	subs	r0, r0, r5
 800bbbc:	fa0a f000 	lsl.w	r0, sl, r0
 800bbc0:	e58b      	b.n	800b6da <_dtoa_r+0xfe>
 800bbc2:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bbc4:	2e01      	cmp	r6, #1
 800bbc6:	f340 8415 	ble.w	800c3f4 <_dtoa_r+0xe18>
 800bbca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbce:	1e46      	subs	r6, r0, #1
 800bbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbd2:	42b1      	cmp	r1, r6
 800bbd4:	bfaf      	iteee	ge
 800bbd6:	ebc6 0601 	rsbge	r6, r6, r1
 800bbda:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800bbdc:	960c      	strlt	r6, [sp, #48]	; 0x30
 800bbde:	ebc2 0306 	rsblt	r3, r2, r6
 800bbe2:	bfbf      	itttt	lt
 800bbe4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800bbe6:	18f6      	addlt	r6, r6, r3
 800bbe8:	960e      	strlt	r6, [sp, #56]	; 0x38
 800bbea:	2600      	movlt	r6, #0
 800bbec:	2800      	cmp	r0, #0
 800bbee:	bfb9      	ittee	lt
 800bbf0:	2300      	movlt	r3, #0
 800bbf2:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 800bbf4:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 800bbf6:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 800bbf8:	bfb8      	it	lt
 800bbfa:	ebc0 0501 	rsblt	r5, r0, r1
 800bbfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc00:	4620      	mov	r0, r4
 800bc02:	f8dd e018 	ldr.w	lr, [sp, #24]
 800bc06:	2101      	movs	r1, #1
 800bc08:	441a      	add	r2, r3
 800bc0a:	920a      	str	r2, [sp, #40]	; 0x28
 800bc0c:	449e      	add	lr, r3
 800bc0e:	f8cd e018 	str.w	lr, [sp, #24]
 800bc12:	f000 ffdf 	bl	800cbd4 <__i2b>
 800bc16:	4680      	mov	r8, r0
 800bc18:	e6e6      	b.n	800b9e8 <_dtoa_r+0x40c>
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	960d      	str	r6, [sp, #52]	; 0x34
 800bc1e:	9e04      	ldr	r6, [sp, #16]
 800bc20:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800bc24:	44b6      	add	lr, r6
 800bc26:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 800bc2a:	f10e 0601 	add.w	r6, lr, #1
 800bc2e:	9609      	str	r6, [sp, #36]	; 0x24
 800bc30:	2e00      	cmp	r6, #0
 800bc32:	f340 8359 	ble.w	800c2e8 <_dtoa_r+0xd0c>
 800bc36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bc38:	2e0e      	cmp	r6, #14
 800bc3a:	bf8c      	ite	hi
 800bc3c:	2500      	movhi	r5, #0
 800bc3e:	f005 0501 	andls.w	r5, r5, #1
 800bc42:	4637      	mov	r7, r6
 800bc44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc46:	2f17      	cmp	r7, #23
 800bc48:	f04f 0100 	mov.w	r1, #0
 800bc4c:	6071      	str	r1, [r6, #4]
 800bc4e:	d909      	bls.n	800bc64 <_dtoa_r+0x688>
 800bc50:	2201      	movs	r2, #1
 800bc52:	2304      	movs	r3, #4
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4611      	mov	r1, r2
 800bc58:	f103 0014 	add.w	r0, r3, #20
 800bc5c:	3201      	adds	r2, #1
 800bc5e:	42b8      	cmp	r0, r7
 800bc60:	d9f8      	bls.n	800bc54 <_dtoa_r+0x678>
 800bc62:	6071      	str	r1, [r6, #4]
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fe87 	bl	800c978 <_Balloc>
 800bc6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc6c:	6030      	str	r0, [r6, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	9308      	str	r3, [sp, #32]
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	f43f ade5 	beq.w	800b842 <_dtoa_r+0x266>
 800bc78:	9e04      	ldr	r6, [sp, #16]
 800bc7a:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	f340 81ab 	ble.w	800bfda <_dtoa_r+0x9fe>
 800bc84:	f006 020f 	and.w	r2, r6, #15
 800bc88:	f640 33f8 	movw	r3, #3064	; 0xbf8
 800bc8c:	1135      	asrs	r5, r6, #4
 800bc8e:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bc92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc96:	06e9      	lsls	r1, r5, #27
 800bc98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc9c:	f140 818f 	bpl.w	800bfbe <_dtoa_r+0x9e2>
 800bca0:	f640 43e8 	movw	r3, #3304	; 0xce8
 800bca4:	4650      	mov	r0, sl
 800bca6:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bcaa:	4659      	mov	r1, fp
 800bcac:	f005 050f 	and.w	r5, r5, #15
 800bcb0:	f04f 0803 	mov.w	r8, #3
 800bcb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcb8:	f003 f9aa 	bl	800f010 <__aeabi_ddiv>
 800bcbc:	4682      	mov	sl, r0
 800bcbe:	468b      	mov	fp, r1
 800bcc0:	b19d      	cbz	r5, 800bcea <_dtoa_r+0x70e>
 800bcc2:	f640 49e8 	movw	r9, #3304	; 0xce8
 800bcc6:	f6c0 0901 	movt	r9, #2049	; 0x801
 800bcca:	07ea      	lsls	r2, r5, #31
 800bccc:	4630      	mov	r0, r6
 800bcce:	4639      	mov	r1, r7
 800bcd0:	d507      	bpl.n	800bce2 <_dtoa_r+0x706>
 800bcd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bcd6:	f108 0801 	add.w	r8, r8, #1
 800bcda:	f003 f86f 	bl	800edbc <__aeabi_dmul>
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	106d      	asrs	r5, r5, #1
 800bce4:	f109 0908 	add.w	r9, r9, #8
 800bce8:	d1ef      	bne.n	800bcca <_dtoa_r+0x6ee>
 800bcea:	4632      	mov	r2, r6
 800bcec:	463b      	mov	r3, r7
 800bcee:	4650      	mov	r0, sl
 800bcf0:	4659      	mov	r1, fp
 800bcf2:	f003 f98d 	bl	800f010 <__aeabi_ddiv>
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bcfc:	b150      	cbz	r0, 800bd14 <_dtoa_r+0x738>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	2200      	movs	r2, #0
 800bd06:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800bd0a:	f003 fac9 	bl	800f2a0 <__aeabi_dcmplt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f040 8315 	bne.w	800c33e <_dtoa_r+0xd62>
 800bd14:	4640      	mov	r0, r8
 800bd16:	f002 ffeb 	bl	800ecf0 <__aeabi_i2d>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	f003 f84d 	bl	800edbc <__aeabi_dmul>
 800bd22:	2300      	movs	r3, #0
 800bd24:	2200      	movs	r2, #0
 800bd26:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800bd2a:	f002 fe95 	bl	800ea58 <__adddf3>
 800bd2e:	4680      	mov	r8, r0
 800bd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd32:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f000 80c9 	beq.w	800bece <_dtoa_r+0x8f2>
 800bd3c:	9904      	ldr	r1, [sp, #16]
 800bd3e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800bd42:	9116      	str	r1, [sp, #88]	; 0x58
 800bd44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd46:	2a00      	cmp	r2, #0
 800bd48:	f000 8179 	beq.w	800c03e <_dtoa_r+0xa62>
 800bd4c:	f640 33f8 	movw	r3, #3064	; 0xbf8
 800bd50:	9a08      	ldr	r2, [sp, #32]
 800bd52:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bd56:	2100      	movs	r1, #0
 800bd58:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800bd62:	1c55      	adds	r5, r2, #1
 800bd64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd68:	f8cd c008 	str.w	ip, [sp, #8]
 800bd6c:	f003 f950 	bl	800f010 <__aeabi_ddiv>
 800bd70:	4642      	mov	r2, r8
 800bd72:	464b      	mov	r3, r9
 800bd74:	f002 fe6e 	bl	800ea54 <__aeabi_dsub>
 800bd78:	4682      	mov	sl, r0
 800bd7a:	468b      	mov	fp, r1
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
 800bd80:	f003 fab6 	bl	800f2f0 <__aeabi_d2iz>
 800bd84:	4680      	mov	r8, r0
 800bd86:	f002 ffb3 	bl	800ecf0 <__aeabi_i2d>
 800bd8a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800bd8e:	fa5f f888 	uxtb.w	r8, r8
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4630      	mov	r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	f002 fe5b 	bl	800ea54 <__aeabi_dsub>
 800bd9e:	f8dd e020 	ldr.w	lr, [sp, #32]
 800bda2:	f88e 8000 	strb.w	r8, [lr]
 800bda6:	4606      	mov	r6, r0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	4650      	mov	r0, sl
 800bdac:	4659      	mov	r1, fp
 800bdae:	4632      	mov	r2, r6
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	f003 fa93 	bl	800f2dc <__aeabi_dcmpgt>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f040 83c2 	bne.w	800c540 <_dtoa_r+0xf64>
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	463b      	mov	r3, r7
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800bdc8:	f002 fe44 	bl	800ea54 <__aeabi_dsub>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	f003 fa82 	bl	800f2dc <__aeabi_dcmpgt>
 800bdd8:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f040 8314 	bne.w	800c40a <_dtoa_r+0xe2e>
 800bde2:	f1bc 0f01 	cmp.w	ip, #1
 800bde6:	f340 80f5 	ble.w	800bfd4 <_dtoa_r+0x9f8>
 800bdea:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdee:	9417      	str	r4, [sp, #92]	; 0x5c
 800bdf0:	44e1      	add	r9, ip
 800bdf2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800bdf6:	46a9      	mov	r9, r5
 800bdf8:	e010      	b.n	800be1c <_dtoa_r+0x840>
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800be02:	f002 fe27 	bl	800ea54 <__aeabi_dsub>
 800be06:	4652      	mov	r2, sl
 800be08:	465b      	mov	r3, fp
 800be0a:	f003 fa49 	bl	800f2a0 <__aeabi_dcmplt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f040 82f9 	bne.w	800c406 <_dtoa_r+0xe2a>
 800be14:	9810      	ldr	r0, [sp, #64]	; 0x40
 800be16:	4581      	cmp	r9, r0
 800be18:	f000 80db 	beq.w	800bfd2 <_dtoa_r+0x9f6>
 800be1c:	2300      	movs	r3, #0
 800be1e:	4650      	mov	r0, sl
 800be20:	4659      	mov	r1, fp
 800be22:	2200      	movs	r2, #0
 800be24:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800be28:	f002 ffc8 	bl	800edbc <__aeabi_dmul>
 800be2c:	2300      	movs	r3, #0
 800be2e:	2200      	movs	r2, #0
 800be30:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f002 ffbe 	bl	800edbc <__aeabi_dmul>
 800be40:	460d      	mov	r5, r1
 800be42:	4604      	mov	r4, r0
 800be44:	f003 fa54 	bl	800f2f0 <__aeabi_d2iz>
 800be48:	4680      	mov	r8, r0
 800be4a:	f002 ff51 	bl	800ecf0 <__aeabi_i2d>
 800be4e:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800be52:	fa5f f888 	uxtb.w	r8, r8
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4620      	mov	r0, r4
 800be5c:	4629      	mov	r1, r5
 800be5e:	f002 fdf9 	bl	800ea54 <__aeabi_dsub>
 800be62:	4652      	mov	r2, sl
 800be64:	465b      	mov	r3, fp
 800be66:	f809 8b01 	strb.w	r8, [r9], #1
 800be6a:	4606      	mov	r6, r0
 800be6c:	460f      	mov	r7, r1
 800be6e:	f003 fa17 	bl	800f2a0 <__aeabi_dcmplt>
 800be72:	4632      	mov	r2, r6
 800be74:	463b      	mov	r3, r7
 800be76:	2800      	cmp	r0, #0
 800be78:	d0bf      	beq.n	800bdfa <_dtoa_r+0x81e>
 800be7a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800be7c:	464d      	mov	r5, r9
 800be7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800be80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be84:	9604      	str	r6, [sp, #16]
 800be86:	9508      	str	r5, [sp, #32]
 800be88:	e658      	b.n	800bb3c <_dtoa_r+0x560>
 800be8a:	2600      	movs	r6, #0
 800be8c:	960d      	str	r6, [sp, #52]	; 0x34
 800be8e:	9825      	ldr	r0, [sp, #148]	; 0x94
 800be90:	2800      	cmp	r0, #0
 800be92:	f340 8233 	ble.w	800c2fc <_dtoa_r+0xd20>
 800be96:	280e      	cmp	r0, #14
 800be98:	bf8c      	ite	hi
 800be9a:	2500      	movhi	r5, #0
 800be9c:	f005 0501 	andls.w	r5, r5, #1
 800bea0:	4607      	mov	r7, r0
 800bea2:	9014      	str	r0, [sp, #80]	; 0x50
 800bea4:	9009      	str	r0, [sp, #36]	; 0x24
 800bea6:	e6cd      	b.n	800bc44 <_dtoa_r+0x668>
 800bea8:	2601      	movs	r6, #1
 800beaa:	960d      	str	r6, [sp, #52]	; 0x34
 800beac:	e7ef      	b.n	800be8e <_dtoa_r+0x8b2>
 800beae:	4640      	mov	r0, r8
 800beb0:	f002 ff1e 	bl	800ecf0 <__aeabi_i2d>
 800beb4:	4632      	mov	r2, r6
 800beb6:	463b      	mov	r3, r7
 800beb8:	f002 ff80 	bl	800edbc <__aeabi_dmul>
 800bebc:	2300      	movs	r3, #0
 800bebe:	2200      	movs	r2, #0
 800bec0:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800bec4:	f002 fdc8 	bl	800ea58 <__adddf3>
 800bec8:	4680      	mov	r8, r0
 800beca:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800bece:	2300      	movs	r3, #0
 800bed0:	4630      	mov	r0, r6
 800bed2:	2200      	movs	r2, #0
 800bed4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800bed8:	4639      	mov	r1, r7
 800beda:	f002 fdbb 	bl	800ea54 <__aeabi_dsub>
 800bede:	4642      	mov	r2, r8
 800bee0:	464b      	mov	r3, r9
 800bee2:	4682      	mov	sl, r0
 800bee4:	468b      	mov	fp, r1
 800bee6:	f003 f9f9 	bl	800f2dc <__aeabi_dcmpgt>
 800beea:	4606      	mov	r6, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 80a3 	bne.w	800c038 <_dtoa_r+0xa5c>
 800bef2:	4642      	mov	r2, r8
 800bef4:	4650      	mov	r0, sl
 800bef6:	4659      	mov	r1, fp
 800bef8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800befc:	f003 f9d0 	bl	800f2a0 <__aeabi_dcmplt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d067      	beq.n	800bfd4 <_dtoa_r+0x9f8>
 800bf04:	46b0      	mov	r8, r6
 800bf06:	9925      	ldr	r1, [sp, #148]	; 0x94
 800bf08:	2500      	movs	r5, #0
 800bf0a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf0e:	43c9      	mvns	r1, r1
 800bf10:	9104      	str	r1, [sp, #16]
 800bf12:	e603      	b.n	800bb1c <_dtoa_r+0x540>
 800bf14:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f040 8164 	bne.w	800c1e4 <_dtoa_r+0xc08>
 800bf1c:	2500      	movs	r5, #0
 800bf1e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800bf22:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bf26:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bf2a:	e002      	b.n	800bf32 <_dtoa_r+0x956>
 800bf2c:	f000 fd76 	bl	800ca1c <__multadd>
 800bf30:	4681      	mov	r9, r0
 800bf32:	4631      	mov	r1, r6
 800bf34:	4648      	mov	r0, r9
 800bf36:	f7ff faab 	bl	800b490 <quorem>
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	220a      	movs	r2, #10
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800bf44:	f80b 7005 	strb.w	r7, [fp, r5]
 800bf48:	3501      	adds	r5, #1
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4555      	cmp	r5, sl
 800bf4e:	dbed      	blt.n	800bf2c <_dtoa_r+0x950>
 800bf50:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bf54:	461d      	mov	r5, r3
 800bf56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf58:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800bf5c:	2801      	cmp	r0, #1
 800bf5e:	bfac      	ite	ge
 800bf60:	4483      	addge	fp, r0
 800bf62:	f10b 0b01 	addlt.w	fp, fp, #1
 800bf66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f000 ff38 	bl	800cde0 <__lshift>
 800bf70:	4631      	mov	r1, r6
 800bf72:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf74:	f000 ff90 	bl	800ce98 <__mcmp>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f340 826f 	ble.w	800c45c <_dtoa_r+0xe80>
 800bf7e:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800bf82:	9908      	ldr	r1, [sp, #32]
 800bf84:	e005      	b.n	800bf92 <_dtoa_r+0x9b6>
 800bf86:	428b      	cmp	r3, r1
 800bf88:	f000 8228 	beq.w	800c3dc <_dtoa_r+0xe00>
 800bf8c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800bf90:	469b      	mov	fp, r3
 800bf92:	2a39      	cmp	r2, #57	; 0x39
 800bf94:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bf98:	d0f5      	beq.n	800bf86 <_dtoa_r+0x9aa>
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	f8cd b020 	str.w	fp, [sp, #32]
 800bfa6:	e5b9      	b.n	800bb1c <_dtoa_r+0x540>
 800bfa8:	231c      	movs	r3, #28
 800bfaa:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800bfae:	441d      	add	r5, r3
 800bfb0:	9806      	ldr	r0, [sp, #24]
 800bfb2:	449e      	add	lr, r3
 800bfb4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800bfb8:	4418      	add	r0, r3
 800bfba:	9006      	str	r0, [sp, #24]
 800bfbc:	e56f      	b.n	800ba9e <_dtoa_r+0x4c2>
 800bfbe:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800bfc2:	f04f 0802 	mov.w	r8, #2
 800bfc6:	e67b      	b.n	800bcc0 <_dtoa_r+0x6e4>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fd0a 	bl	800c9e4 <_Bfree>
 800bfd0:	e5b0      	b.n	800bb34 <_dtoa_r+0x558>
 800bfd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800bfd4:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 800bfd8:	e433      	b.n	800b842 <_dtoa_r+0x266>
 800bfda:	9e04      	ldr	r6, [sp, #16]
 800bfdc:	4275      	negs	r5, r6
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	f000 819d 	beq.w	800c31e <_dtoa_r+0xd42>
 800bfe4:	f005 020f 	and.w	r2, r5, #15
 800bfe8:	f640 33f8 	movw	r3, #3064	; 0xbf8
 800bfec:	f6c0 0301 	movt	r3, #2049	; 0x801
 800bff0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800bff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f002 fede 	bl	800edbc <__aeabi_dmul>
 800c000:	112d      	asrs	r5, r5, #4
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	f000 8297 	beq.w	800c538 <_dtoa_r+0xf5c>
 800c00a:	f640 49e8 	movw	r9, #3304	; 0xce8
 800c00e:	f04f 0802 	mov.w	r8, #2
 800c012:	f6c0 0901 	movt	r9, #2049	; 0x801
 800c016:	07eb      	lsls	r3, r5, #31
 800c018:	4630      	mov	r0, r6
 800c01a:	4639      	mov	r1, r7
 800c01c:	d507      	bpl.n	800c02e <_dtoa_r+0xa52>
 800c01e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c022:	f108 0801 	add.w	r8, r8, #1
 800c026:	f002 fec9 	bl	800edbc <__aeabi_dmul>
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	106d      	asrs	r5, r5, #1
 800c030:	f109 0908 	add.w	r9, r9, #8
 800c034:	d1ef      	bne.n	800c016 <_dtoa_r+0xa3a>
 800c036:	e660      	b.n	800bcfa <_dtoa_r+0x71e>
 800c038:	2600      	movs	r6, #0
 800c03a:	46b0      	mov	r8, r6
 800c03c:	e562      	b.n	800bb04 <_dtoa_r+0x528>
 800c03e:	f10c 3bff 	add.w	fp, ip, #4294967295
 800c042:	f640 31f8 	movw	r1, #3064	; 0xbf8
 800c046:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c04a:	9808      	ldr	r0, [sp, #32]
 800c04c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c050:	4642      	mov	r2, r8
 800c052:	464b      	mov	r3, r9
 800c054:	f100 0a01 	add.w	sl, r0, #1
 800c058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05c:	f8cd c008 	str.w	ip, [sp, #8]
 800c060:	f002 feac 	bl	800edbc <__aeabi_dmul>
 800c064:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c068:	4639      	mov	r1, r7
 800c06a:	4630      	mov	r0, r6
 800c06c:	f003 f940 	bl	800f2f0 <__aeabi_d2iz>
 800c070:	4605      	mov	r5, r0
 800c072:	f002 fe3d 	bl	800ecf0 <__aeabi_i2d>
 800c076:	3530      	adds	r5, #48	; 0x30
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4630      	mov	r0, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	f002 fce8 	bl	800ea54 <__aeabi_dsub>
 800c084:	460f      	mov	r7, r1
 800c086:	9908      	ldr	r1, [sp, #32]
 800c088:	4606      	mov	r6, r0
 800c08a:	700d      	strb	r5, [r1, #0]
 800c08c:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c090:	f1bc 0f01 	cmp.w	ip, #1
 800c094:	d022      	beq.n	800c0dc <_dtoa_r+0xb00>
 800c096:	9a08      	ldr	r2, [sp, #32]
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	f102 39ff 	add.w	r9, r2, #4294967295
 800c0a0:	4615      	mov	r5, r2
 800c0a2:	44e1      	add	r9, ip
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c0ac:	f002 fe86 	bl	800edbc <__aeabi_dmul>
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	f003 f91c 	bl	800f2f0 <__aeabi_d2iz>
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	f002 fe19 	bl	800ecf0 <__aeabi_i2d>
 800c0be:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f002 fcc3 	bl	800ea54 <__aeabi_dsub>
 800c0ce:	f805 8f01 	strb.w	r8, [r5, #1]!
 800c0d2:	454d      	cmp	r5, r9
 800c0d4:	d1e6      	bne.n	800c0a4 <_dtoa_r+0xac8>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	460f      	mov	r7, r1
 800c0da:	44da      	add	sl, fp
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800c0e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0e8:	f002 fcb6 	bl	800ea58 <__adddf3>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f003 f8d6 	bl	800f2a0 <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f000 8154 	beq.w	800c3a2 <_dtoa_r+0xdc6>
 800c0fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0fe:	4652      	mov	r2, sl
 800c100:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 800c104:	f8cd a020 	str.w	sl, [sp, #32]
 800c108:	e459      	b.n	800b9be <_dtoa_r+0x3e2>
 800c10a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c10c:	4631      	mov	r1, r6
 800c10e:	f000 fec3 	bl	800ce98 <__mcmp>
 800c112:	2800      	cmp	r0, #0
 800c114:	f6bf acd8 	bge.w	800bac8 <_dtoa_r+0x4ec>
 800c118:	f8dd e010 	ldr.w	lr, [sp, #16]
 800c11c:	4620      	mov	r0, r4
 800c11e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c120:	220a      	movs	r2, #10
 800c122:	2300      	movs	r3, #0
 800c124:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c128:	f8cd e010 	str.w	lr, [sp, #16]
 800c12c:	f000 fc76 	bl	800ca1c <__multadd>
 800c130:	900b      	str	r0, [sp, #44]	; 0x2c
 800c132:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c134:	2800      	cmp	r0, #0
 800c136:	d141      	bne.n	800c1bc <_dtoa_r+0xbe0>
 800c138:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c13a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c13c:	2900      	cmp	r1, #0
 800c13e:	dc03      	bgt.n	800c148 <_dtoa_r+0xb6c>
 800c140:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c142:	2a02      	cmp	r2, #2
 800c144:	f300 8207 	bgt.w	800c556 <_dtoa_r+0xf7a>
 800c148:	9309      	str	r3, [sp, #36]	; 0x24
 800c14a:	e6e7      	b.n	800bf1c <_dtoa_r+0x940>
 800c14c:	6933      	ldr	r3, [r6, #16]
 800c14e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c152:	6918      	ldr	r0, [r3, #16]
 800c154:	f000 fcf4 	bl	800cb40 <__hi0bits>
 800c158:	f1c0 0020 	rsb	r0, r0, #32
 800c15c:	e48b      	b.n	800ba76 <_dtoa_r+0x49a>
 800c15e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c160:	2e00      	cmp	r6, #0
 800c162:	f040 818b 	bne.w	800c47c <_dtoa_r+0xea0>
 800c166:	2300      	movs	r3, #0
 800c168:	2200      	movs	r2, #0
 800c16a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800c16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c172:	f002 fe23 	bl	800edbc <__aeabi_dmul>
 800c176:	4652      	mov	r2, sl
 800c178:	465b      	mov	r3, fp
 800c17a:	f003 f8a5 	bl	800f2c8 <__aeabi_dcmpge>
 800c17e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c180:	46b0      	mov	r8, r6
 800c182:	2800      	cmp	r0, #0
 800c184:	f47f aebf 	bne.w	800bf06 <_dtoa_r+0x92a>
 800c188:	e4bc      	b.n	800bb04 <_dtoa_r+0x528>
 800c18a:	f1ba 0f00 	cmp.w	sl, #0
 800c18e:	f47f ac6c 	bne.w	800ba6a <_dtoa_r+0x48e>
 800c192:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c196:	4657      	mov	r7, sl
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f47f ac67 	bne.w	800ba6c <_dtoa_r+0x490>
 800c19e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c1a2:	0d3f      	lsrs	r7, r7, #20
 800c1a4:	053f      	lsls	r7, r7, #20
 800c1a6:	2f00      	cmp	r7, #0
 800c1a8:	f43f ac60 	beq.w	800ba6c <_dtoa_r+0x490>
 800c1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ae:	2701      	movs	r7, #1
 800c1b0:	9b06      	ldr	r3, [sp, #24]
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	9306      	str	r3, [sp, #24]
 800c1ba:	e457      	b.n	800ba6c <_dtoa_r+0x490>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4641      	mov	r1, r8
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 fc2a 	bl	800ca1c <__multadd>
 800c1c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1ca:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	bfcc      	ite	gt
 800c1d0:	2300      	movgt	r3, #0
 800c1d2:	2301      	movle	r3, #1
 800c1d4:	2902      	cmp	r1, #2
 800c1d6:	bfd8      	it	le
 800c1d8:	2300      	movle	r3, #0
 800c1da:	4680      	mov	r8, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f040 81b6 	bne.w	800c54e <_dtoa_r+0xf72>
 800c1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	dd05      	ble.n	800c1f4 <_dtoa_r+0xc18>
 800c1e8:	4641      	mov	r1, r8
 800c1ea:	462a      	mov	r2, r5
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 fdf7 	bl	800cde0 <__lshift>
 800c1f2:	4680      	mov	r8, r0
 800c1f4:	46c4      	mov	ip, r8
 800c1f6:	2f00      	cmp	r7, #0
 800c1f8:	f040 8153 	bne.w	800c4a2 <_dtoa_r+0xec6>
 800c1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1fe:	f00a 0301 	and.w	r3, sl, #1
 800c202:	9a08      	ldr	r2, [sp, #32]
 800c204:	4637      	mov	r7, r6
 800c206:	9808      	ldr	r0, [sp, #32]
 800c208:	46e1      	mov	r9, ip
 800c20a:	440a      	add	r2, r1
 800c20c:	9309      	str	r3, [sp, #36]	; 0x24
 800c20e:	920a      	str	r2, [sp, #40]	; 0x28
 800c210:	1c45      	adds	r5, r0, #1
 800c212:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c214:	e00a      	b.n	800c22c <_dtoa_r+0xc50>
 800c216:	f000 fc01 	bl	800ca1c <__multadd>
 800c21a:	4649      	mov	r1, r9
 800c21c:	220a      	movs	r2, #10
 800c21e:	2300      	movs	r3, #0
 800c220:	4680      	mov	r8, r0
 800c222:	4620      	mov	r0, r4
 800c224:	f000 fbfa 	bl	800ca1c <__multadd>
 800c228:	4681      	mov	r9, r0
 800c22a:	3501      	adds	r5, #1
 800c22c:	4639      	mov	r1, r7
 800c22e:	4630      	mov	r0, r6
 800c230:	f7ff f92e 	bl	800b490 <quorem>
 800c234:	4641      	mov	r1, r8
 800c236:	4682      	mov	sl, r0
 800c238:	4630      	mov	r0, r6
 800c23a:	f000 fe2d 	bl	800ce98 <__mcmp>
 800c23e:	464a      	mov	r2, r9
 800c240:	4639      	mov	r1, r7
 800c242:	4683      	mov	fp, r0
 800c244:	4620      	mov	r0, r4
 800c246:	f000 fe49 	bl	800cedc <__mdiff>
 800c24a:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 800c24e:	9205      	str	r2, [sp, #20]
 800c250:	f105 3eff 	add.w	lr, r5, #4294967295
 800c254:	f8cd e018 	str.w	lr, [sp, #24]
 800c258:	68c2      	ldr	r2, [r0, #12]
 800c25a:	4603      	mov	r3, r0
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	d13e      	bne.n	800c2de <_dtoa_r+0xd02>
 800c260:	4619      	mov	r1, r3
 800c262:	4630      	mov	r0, r6
 800c264:	9302      	str	r3, [sp, #8]
 800c266:	f000 fe17 	bl	800ce98 <__mcmp>
 800c26a:	9b02      	ldr	r3, [sp, #8]
 800c26c:	4602      	mov	r2, r0
 800c26e:	4620      	mov	r0, r4
 800c270:	4619      	mov	r1, r3
 800c272:	9202      	str	r2, [sp, #8]
 800c274:	f000 fbb6 	bl	800c9e4 <_Bfree>
 800c278:	9a02      	ldr	r2, [sp, #8]
 800c27a:	9824      	ldr	r0, [sp, #144]	; 0x90
 800c27c:	4310      	orrs	r0, r2
 800c27e:	d103      	bne.n	800c288 <_dtoa_r+0xcac>
 800c280:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c282:	2900      	cmp	r1, #0
 800c284:	f000 814a 	beq.w	800c51c <_dtoa_r+0xf40>
 800c288:	f1bb 0f00 	cmp.w	fp, #0
 800c28c:	f2c0 80c3 	blt.w	800c416 <_dtoa_r+0xe3a>
 800c290:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c292:	ea5b 0101 	orrs.w	r1, fp, r1
 800c296:	d103      	bne.n	800c2a0 <_dtoa_r+0xcc4>
 800c298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 80bb 	beq.w	800c416 <_dtoa_r+0xe3a>
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	f300 811b 	bgt.w	800c4dc <_dtoa_r+0xf00>
 800c2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a8:	46ab      	mov	fp, r5
 800c2aa:	9a05      	ldr	r2, [sp, #20]
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c2b2:	f000 8124 	beq.w	800c4fe <_dtoa_r+0xf22>
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	220a      	movs	r2, #10
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fbad 	bl	800ca1c <__multadd>
 800c2c2:	45c8      	cmp	r8, r9
 800c2c4:	4641      	mov	r1, r8
 800c2c6:	f04f 020a 	mov.w	r2, #10
 800c2ca:	f04f 0300 	mov.w	r3, #0
 800c2ce:	4606      	mov	r6, r0
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	d1a0      	bne.n	800c216 <_dtoa_r+0xc3a>
 800c2d4:	f000 fba2 	bl	800ca1c <__multadd>
 800c2d8:	4680      	mov	r8, r0
 800c2da:	4681      	mov	r9, r0
 800c2dc:	e7a5      	b.n	800c22a <_dtoa_r+0xc4e>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	e7c5      	b.n	800c26e <_dtoa_r+0xc92>
 800c2e2:	2601      	movs	r6, #1
 800c2e4:	960d      	str	r6, [sp, #52]	; 0x34
 800c2e6:	e49a      	b.n	800bc1e <_dtoa_r+0x642>
 800c2e8:	2e0e      	cmp	r6, #14
 800c2ea:	bf8c      	ite	hi
 800c2ec:	2200      	movhi	r2, #0
 800c2ee:	2201      	movls	r2, #1
 800c2f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4015      	ands	r5, r2
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6073      	str	r3, [r6, #4]
 800c2fa:	e4b3      	b.n	800bc64 <_dtoa_r+0x688>
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	9225      	str	r2, [sp, #148]	; 0x94
 800c300:	9214      	str	r2, [sp, #80]	; 0x50
 800c302:	9209      	str	r2, [sp, #36]	; 0x24
 800c304:	e7f4      	b.n	800c2f0 <_dtoa_r+0xd14>
 800c306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c308:	4620      	mov	r0, r4
 800c30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c30c:	f000 fd0c 	bl	800cd28 <__pow5mult>
 800c310:	900b      	str	r0, [sp, #44]	; 0x2c
 800c312:	f7ff bb98 	b.w	800ba46 <_dtoa_r+0x46a>
 800c316:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c31a:	9508      	str	r5, [sp, #32]
 800c31c:	e40e      	b.n	800bb3c <_dtoa_r+0x560>
 800c31e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c322:	f04f 0802 	mov.w	r8, #2
 800c326:	e4e8      	b.n	800bcfa <_dtoa_r+0x71e>
 800c328:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c32a:	2130      	movs	r1, #48	; 0x30
 800c32c:	9208      	str	r2, [sp, #32]
 800c32e:	2231      	movs	r2, #49	; 0x31
 800c330:	3601      	adds	r6, #1
 800c332:	f889 1000 	strb.w	r1, [r9]
 800c336:	9604      	str	r6, [sp, #16]
 800c338:	701a      	strb	r2, [r3, #0]
 800c33a:	f7ff bbff 	b.w	800bb3c <_dtoa_r+0x560>
 800c33e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c340:	2900      	cmp	r1, #0
 800c342:	f43f adb4 	beq.w	800beae <_dtoa_r+0x8d2>
 800c346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c348:	2a00      	cmp	r2, #0
 800c34a:	f77f ae43 	ble.w	800bfd4 <_dtoa_r+0x9f8>
 800c34e:	2300      	movs	r3, #0
 800c350:	2200      	movs	r2, #0
 800c352:	4630      	mov	r0, r6
 800c354:	4639      	mov	r1, r7
 800c356:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800c35a:	f002 fd2f 	bl	800edbc <__aeabi_dmul>
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	3b01      	subs	r3, #1
 800c362:	9316      	str	r3, [sp, #88]	; 0x58
 800c364:	4606      	mov	r6, r0
 800c366:	f108 0001 	add.w	r0, r8, #1
 800c36a:	460f      	mov	r7, r1
 800c36c:	f002 fcc0 	bl	800ecf0 <__aeabi_i2d>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4630      	mov	r0, r6
 800c376:	4639      	mov	r1, r7
 800c378:	f002 fd20 	bl	800edbc <__aeabi_dmul>
 800c37c:	2300      	movs	r3, #0
 800c37e:	2200      	movs	r2, #0
 800c380:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800c384:	f002 fb68 	bl	800ea58 <__adddf3>
 800c388:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 800c38c:	4680      	mov	r8, r0
 800c38e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800c392:	e4d7      	b.n	800bd44 <_dtoa_r+0x768>
 800c394:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c396:	4620      	mov	r0, r4
 800c398:	f000 fcc6 	bl	800cd28 <__pow5mult>
 800c39c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c39e:	f7ff bb52 	b.w	800ba46 <_dtoa_r+0x46a>
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800c3ae:	f002 fb51 	bl	800ea54 <__aeabi_dsub>
 800c3b2:	4632      	mov	r2, r6
 800c3b4:	463b      	mov	r3, r7
 800c3b6:	f002 ff91 	bl	800f2dc <__aeabi_dcmpgt>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f43f ae0a 	beq.w	800bfd4 <_dtoa_r+0x9f8>
 800c3c0:	4653      	mov	r3, sl
 800c3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3c6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800c3ca:	2a30      	cmp	r2, #48	; 0x30
 800c3cc:	d0f8      	beq.n	800c3c0 <_dtoa_r+0xde4>
 800c3ce:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c3d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	9604      	str	r6, [sp, #16]
 800c3d8:	f7ff bbb0 	b.w	800bb3c <_dtoa_r+0x560>
 800c3dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3e0:	2331      	movs	r3, #49	; 0x31
 800c3e2:	9904      	ldr	r1, [sp, #16]
 800c3e4:	f8cd b020 	str.w	fp, [sp, #32]
 800c3e8:	3101      	adds	r1, #1
 800c3ea:	f889 3000 	strb.w	r3, [r9]
 800c3ee:	9104      	str	r1, [sp, #16]
 800c3f0:	f7ff bb94 	b.w	800bb1c <_dtoa_r+0x540>
 800c3f4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c3f6:	2e00      	cmp	r6, #0
 800c3f8:	d069      	beq.n	800c4ce <_dtoa_r+0xef2>
 800c3fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c400:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c402:	f7ff bbfc 	b.w	800bbfe <_dtoa_r+0x622>
 800c406:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800c408:	464d      	mov	r5, r9
 800c40a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c40e:	462a      	mov	r2, r5
 800c410:	9508      	str	r5, [sp, #32]
 800c412:	f7ff bad4 	b.w	800b9be <_dtoa_r+0x3e2>
 800c416:	2a00      	cmp	r2, #0
 800c418:	960b      	str	r6, [sp, #44]	; 0x2c
 800c41a:	46cc      	mov	ip, r9
 800c41c:	463e      	mov	r6, r7
 800c41e:	9f05      	ldr	r7, [sp, #20]
 800c420:	dd12      	ble.n	800c448 <_dtoa_r+0xe6c>
 800c422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c424:	2201      	movs	r2, #1
 800c426:	4620      	mov	r0, r4
 800c428:	f8cd 9008 	str.w	r9, [sp, #8]
 800c42c:	f000 fcd8 	bl	800cde0 <__lshift>
 800c430:	4631      	mov	r1, r6
 800c432:	900b      	str	r0, [sp, #44]	; 0x2c
 800c434:	f000 fd30 	bl	800ce98 <__mcmp>
 800c438:	f8dd c008 	ldr.w	ip, [sp, #8]
 800c43c:	2800      	cmp	r0, #0
 800c43e:	dd77      	ble.n	800c530 <_dtoa_r+0xf54>
 800c440:	2f39      	cmp	r7, #57	; 0x39
 800c442:	d062      	beq.n	800c50a <_dtoa_r+0xf2e>
 800c444:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 800c448:	9b06      	ldr	r3, [sp, #24]
 800c44a:	4645      	mov	r5, r8
 800c44c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c450:	46e0      	mov	r8, ip
 800c452:	1c58      	adds	r0, r3, #1
 800c454:	701f      	strb	r7, [r3, #0]
 800c456:	9008      	str	r0, [sp, #32]
 800c458:	f7ff bb60 	b.w	800bb1c <_dtoa_r+0x540>
 800c45c:	d102      	bne.n	800c464 <_dtoa_r+0xe88>
 800c45e:	07fb      	lsls	r3, r7, #31
 800c460:	f53f ad8d 	bmi.w	800bf7e <_dtoa_r+0x9a2>
 800c464:	465b      	mov	r3, fp
 800c466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c46a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800c46e:	2a30      	cmp	r2, #48	; 0x30
 800c470:	d0f8      	beq.n	800c464 <_dtoa_r+0xe88>
 800c472:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c476:	9308      	str	r3, [sp, #32]
 800c478:	f7ff bb50 	b.w	800bb1c <_dtoa_r+0x540>
 800c47c:	2600      	movs	r6, #0
 800c47e:	e541      	b.n	800bf04 <_dtoa_r+0x928>
 800c480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c484:	4632      	mov	r2, r6
 800c486:	463b      	mov	r3, r7
 800c488:	f002 ff00 	bl	800f28c <__aeabi_dcmpeq>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f43f af42 	beq.w	800c316 <_dtoa_r+0xd3a>
 800c492:	f018 0f01 	tst.w	r8, #1
 800c496:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c49a:	f43f af3e 	beq.w	800c31a <_dtoa_r+0xd3e>
 800c49e:	f7ff ba81 	b.w	800b9a4 <_dtoa_r+0x3c8>
 800c4a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	f000 fa66 	bl	800c978 <_Balloc>
 800c4ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c4b0:	f108 010c 	add.w	r1, r8, #12
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	0092      	lsls	r2, r2, #2
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	300c      	adds	r0, #12
 800c4bc:	f000 fa08 	bl	800c8d0 <memcpy>
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f000 fc8b 	bl	800cde0 <__lshift>
 800c4ca:	4684      	mov	ip, r0
 800c4cc:	e696      	b.n	800c1fc <_dtoa_r+0xc20>
 800c4ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c4d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c4d4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4d8:	f7ff bb91 	b.w	800bbfe <_dtoa_r+0x622>
 800c4dc:	960b      	str	r6, [sp, #44]	; 0x2c
 800c4de:	463e      	mov	r6, r7
 800c4e0:	9f05      	ldr	r7, [sp, #20]
 800c4e2:	46cc      	mov	ip, r9
 800c4e4:	2f39      	cmp	r7, #57	; 0x39
 800c4e6:	d010      	beq.n	800c50a <_dtoa_r+0xf2e>
 800c4e8:	9b06      	ldr	r3, [sp, #24]
 800c4ea:	3701      	adds	r7, #1
 800c4ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4f0:	4645      	mov	r5, r8
 800c4f2:	1c58      	adds	r0, r3, #1
 800c4f4:	46e0      	mov	r8, ip
 800c4f6:	701f      	strb	r7, [r3, #0]
 800c4f8:	9008      	str	r0, [sp, #32]
 800c4fa:	f7ff bb0f 	b.w	800bb1c <_dtoa_r+0x540>
 800c4fe:	960b      	str	r6, [sp, #44]	; 0x2c
 800c500:	4645      	mov	r5, r8
 800c502:	463e      	mov	r6, r7
 800c504:	46c8      	mov	r8, r9
 800c506:	9f05      	ldr	r7, [sp, #20]
 800c508:	e52d      	b.n	800bf66 <_dtoa_r+0x98a>
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	2239      	movs	r2, #57	; 0x39
 800c50e:	4645      	mov	r5, r8
 800c510:	9908      	ldr	r1, [sp, #32]
 800c512:	46e0      	mov	r8, ip
 800c514:	f103 0b01 	add.w	fp, r3, #1
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	e53a      	b.n	800bf92 <_dtoa_r+0x9b6>
 800c51c:	960b      	str	r6, [sp, #44]	; 0x2c
 800c51e:	463e      	mov	r6, r7
 800c520:	9f05      	ldr	r7, [sp, #20]
 800c522:	46cc      	mov	ip, r9
 800c524:	2f39      	cmp	r7, #57	; 0x39
 800c526:	d0f0      	beq.n	800c50a <_dtoa_r+0xf2e>
 800c528:	f1bb 0f00 	cmp.w	fp, #0
 800c52c:	dc8a      	bgt.n	800c444 <_dtoa_r+0xe68>
 800c52e:	e78b      	b.n	800c448 <_dtoa_r+0xe6c>
 800c530:	d18a      	bne.n	800c448 <_dtoa_r+0xe6c>
 800c532:	07fa      	lsls	r2, r7, #31
 800c534:	d588      	bpl.n	800c448 <_dtoa_r+0xe6c>
 800c536:	e783      	b.n	800c440 <_dtoa_r+0xe64>
 800c538:	f04f 0802 	mov.w	r8, #2
 800c53c:	f7ff bbdd 	b.w	800bcfa <_dtoa_r+0x71e>
 800c540:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c542:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c546:	9508      	str	r5, [sp, #32]
 800c548:	9604      	str	r6, [sp, #16]
 800c54a:	f7ff baf7 	b.w	800bb3c <_dtoa_r+0x560>
 800c54e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c550:	9209      	str	r2, [sp, #36]	; 0x24
 800c552:	f7ff bac5 	b.w	800bae0 <_dtoa_r+0x504>
 800c556:	9309      	str	r3, [sp, #36]	; 0x24
 800c558:	f7ff bac2 	b.w	800bae0 <_dtoa_r+0x504>
 800c55c:	f43f aa9f 	beq.w	800ba9e <_dtoa_r+0x4c2>
 800c560:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800c564:	e521      	b.n	800bfaa <_dtoa_r+0x9ce>
 800c566:	bf00      	nop

0800c568 <_malloc_trim_r>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	f240 1408 	movw	r4, #264	; 0x108
 800c56e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c572:	460f      	mov	r7, r1
 800c574:	4605      	mov	r5, r0
 800c576:	f7fd fd17 	bl	8009fa8 <__malloc_lock>
 800c57a:	68a3      	ldr	r3, [r4, #8]
 800c57c:	685e      	ldr	r6, [r3, #4]
 800c57e:	f026 0603 	bic.w	r6, r6, #3
 800c582:	1bf7      	subs	r7, r6, r7
 800c584:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 800c588:	0b3f      	lsrs	r7, r7, #12
 800c58a:	3f01      	subs	r7, #1
 800c58c:	033f      	lsls	r7, r7, #12
 800c58e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800c592:	db07      	blt.n	800c5a4 <_malloc_trim_r+0x3c>
 800c594:	4628      	mov	r0, r5
 800c596:	2100      	movs	r1, #0
 800c598:	f7fd fd0a 	bl	8009fb0 <_sbrk_r>
 800c59c:	68a3      	ldr	r3, [r4, #8]
 800c59e:	4433      	add	r3, r6
 800c5a0:	4298      	cmp	r0, r3
 800c5a2:	d004      	beq.n	800c5ae <_malloc_trim_r+0x46>
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	f7fd fd01 	bl	8009fac <__malloc_unlock>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	4279      	negs	r1, r7
 800c5b2:	f7fd fcfd 	bl	8009fb0 <_sbrk_r>
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	d010      	beq.n	800c5dc <_malloc_trim_r+0x74>
 800c5ba:	f240 7310 	movw	r3, #1808	; 0x710
 800c5be:	68a1      	ldr	r1, [r4, #8]
 800c5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c5c4:	1bf6      	subs	r6, r6, r7
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f046 0601 	orr.w	r6, r6, #1
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	604e      	str	r6, [r1, #4]
 800c5d0:	1bd7      	subs	r7, r2, r7
 800c5d2:	601f      	str	r7, [r3, #0]
 800c5d4:	f7fd fcea 	bl	8009fac <__malloc_unlock>
 800c5d8:	2001      	movs	r0, #1
 800c5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5dc:	4628      	mov	r0, r5
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f7fd fce6 	bl	8009fb0 <_sbrk_r>
 800c5e4:	68a3      	ldr	r3, [r4, #8]
 800c5e6:	1ac2      	subs	r2, r0, r3
 800c5e8:	2a0f      	cmp	r2, #15
 800c5ea:	dddb      	ble.n	800c5a4 <_malloc_trim_r+0x3c>
 800c5ec:	f240 5410 	movw	r4, #1296	; 0x510
 800c5f0:	f240 7110 	movw	r1, #1808	; 0x710
 800c5f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c5f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c5fc:	f042 0201 	orr.w	r2, r2, #1
 800c600:	605a      	str	r2, [r3, #4]
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	1ac0      	subs	r0, r0, r3
 800c606:	6008      	str	r0, [r1, #0]
 800c608:	e7cc      	b.n	800c5a4 <_malloc_trim_r+0x3c>
 800c60a:	bf00      	nop

0800c60c <_free_r>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	460e      	mov	r6, r1
 800c612:	4680      	mov	r8, r0
 800c614:	2900      	cmp	r1, #0
 800c616:	d05e      	beq.n	800c6d6 <_free_r+0xca>
 800c618:	f7fd fcc6 	bl	8009fa8 <__malloc_lock>
 800c61c:	f240 1508 	movw	r5, #264	; 0x108
 800c620:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800c624:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800c628:	f1a6 0408 	sub.w	r4, r6, #8
 800c62c:	f021 0301 	bic.w	r3, r1, #1
 800c630:	68af      	ldr	r7, [r5, #8]
 800c632:	18e2      	adds	r2, r4, r3
 800c634:	4297      	cmp	r7, r2
 800c636:	6850      	ldr	r0, [r2, #4]
 800c638:	f020 0003 	bic.w	r0, r0, #3
 800c63c:	d061      	beq.n	800c702 <_free_r+0xf6>
 800c63e:	f011 0101 	ands.w	r1, r1, #1
 800c642:	6050      	str	r0, [r2, #4]
 800c644:	bf18      	it	ne
 800c646:	2100      	movne	r1, #0
 800c648:	d10f      	bne.n	800c66a <_free_r+0x5e>
 800c64a:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800c64e:	f105 0c08 	add.w	ip, r5, #8
 800c652:	1ba4      	subs	r4, r4, r6
 800c654:	4433      	add	r3, r6
 800c656:	68a6      	ldr	r6, [r4, #8]
 800c658:	4566      	cmp	r6, ip
 800c65a:	bf0f      	iteee	eq
 800c65c:	2101      	moveq	r1, #1
 800c65e:	f8d4 c00c 	ldrne.w	ip, [r4, #12]
 800c662:	f8c6 c00c 	strne.w	ip, [r6, #12]
 800c666:	f8cc 6008 	strne.w	r6, [ip, #8]
 800c66a:	1816      	adds	r6, r2, r0
 800c66c:	6876      	ldr	r6, [r6, #4]
 800c66e:	07f6      	lsls	r6, r6, #31
 800c670:	d408      	bmi.n	800c684 <_free_r+0x78>
 800c672:	4403      	add	r3, r0
 800c674:	6890      	ldr	r0, [r2, #8]
 800c676:	b911      	cbnz	r1, 800c67e <_free_r+0x72>
 800c678:	4e49      	ldr	r6, [pc, #292]	; (800c7a0 <_free_r+0x194>)
 800c67a:	42b0      	cmp	r0, r6
 800c67c:	d060      	beq.n	800c740 <_free_r+0x134>
 800c67e:	68d2      	ldr	r2, [r2, #12]
 800c680:	60c2      	str	r2, [r0, #12]
 800c682:	6090      	str	r0, [r2, #8]
 800c684:	f043 0201 	orr.w	r2, r3, #1
 800c688:	6062      	str	r2, [r4, #4]
 800c68a:	50e3      	str	r3, [r4, r3]
 800c68c:	b9f1      	cbnz	r1, 800c6cc <_free_r+0xc0>
 800c68e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c692:	d322      	bcc.n	800c6da <_free_r+0xce>
 800c694:	0a5a      	lsrs	r2, r3, #9
 800c696:	2a04      	cmp	r2, #4
 800c698:	d85b      	bhi.n	800c752 <_free_r+0x146>
 800c69a:	0998      	lsrs	r0, r3, #6
 800c69c:	3038      	adds	r0, #56	; 0x38
 800c69e:	0041      	lsls	r1, r0, #1
 800c6a0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800c6a4:	f240 1108 	movw	r1, #264	; 0x108
 800c6a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c6ac:	68aa      	ldr	r2, [r5, #8]
 800c6ae:	42aa      	cmp	r2, r5
 800c6b0:	d05b      	beq.n	800c76a <_free_r+0x15e>
 800c6b2:	6851      	ldr	r1, [r2, #4]
 800c6b4:	f021 0103 	bic.w	r1, r1, #3
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	d202      	bcs.n	800c6c2 <_free_r+0xb6>
 800c6bc:	6892      	ldr	r2, [r2, #8]
 800c6be:	4295      	cmp	r5, r2
 800c6c0:	d1f7      	bne.n	800c6b2 <_free_r+0xa6>
 800c6c2:	68d3      	ldr	r3, [r2, #12]
 800c6c4:	60e3      	str	r3, [r4, #12]
 800c6c6:	60a2      	str	r2, [r4, #8]
 800c6c8:	609c      	str	r4, [r3, #8]
 800c6ca:	60d4      	str	r4, [r2, #12]
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d2:	f7fd bc6b 	b.w	8009fac <__malloc_unlock>
 800c6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6da:	08db      	lsrs	r3, r3, #3
 800c6dc:	2101      	movs	r1, #1
 800c6de:	6868      	ldr	r0, [r5, #4]
 800c6e0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800c6e4:	109b      	asrs	r3, r3, #2
 800c6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ea:	6891      	ldr	r1, [r2, #8]
 800c6ec:	4318      	orrs	r0, r3
 800c6ee:	60e2      	str	r2, [r4, #12]
 800c6f0:	6068      	str	r0, [r5, #4]
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	60a1      	str	r1, [r4, #8]
 800c6f6:	6094      	str	r4, [r2, #8]
 800c6f8:	60cc      	str	r4, [r1, #12]
 800c6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fe:	f7fd bc55 	b.w	8009fac <__malloc_unlock>
 800c702:	07cf      	lsls	r7, r1, #31
 800c704:	4418      	add	r0, r3
 800c706:	d407      	bmi.n	800c718 <_free_r+0x10c>
 800c708:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c70c:	1ae4      	subs	r4, r4, r3
 800c70e:	4418      	add	r0, r3
 800c710:	68a2      	ldr	r2, [r4, #8]
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	60d3      	str	r3, [r2, #12]
 800c716:	609a      	str	r2, [r3, #8]
 800c718:	f240 5214 	movw	r2, #1300	; 0x514
 800c71c:	f040 0301 	orr.w	r3, r0, #1
 800c720:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c724:	6063      	str	r3, [r4, #4]
 800c726:	60ac      	str	r4, [r5, #8]
 800c728:	6813      	ldr	r3, [r2, #0]
 800c72a:	4298      	cmp	r0, r3
 800c72c:	d3ce      	bcc.n	800c6cc <_free_r+0xc0>
 800c72e:	f240 730c 	movw	r3, #1804	; 0x70c
 800c732:	4640      	mov	r0, r8
 800c734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c738:	6819      	ldr	r1, [r3, #0]
 800c73a:	f7ff ff15 	bl	800c568 <_malloc_trim_r>
 800c73e:	e7c5      	b.n	800c6cc <_free_r+0xc0>
 800c740:	616c      	str	r4, [r5, #20]
 800c742:	f043 0201 	orr.w	r2, r3, #1
 800c746:	612c      	str	r4, [r5, #16]
 800c748:	60e0      	str	r0, [r4, #12]
 800c74a:	60a0      	str	r0, [r4, #8]
 800c74c:	6062      	str	r2, [r4, #4]
 800c74e:	50e3      	str	r3, [r4, r3]
 800c750:	e7bc      	b.n	800c6cc <_free_r+0xc0>
 800c752:	2a14      	cmp	r2, #20
 800c754:	bf9c      	itt	ls
 800c756:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 800c75a:	0041      	lslls	r1, r0, #1
 800c75c:	d9a0      	bls.n	800c6a0 <_free_r+0x94>
 800c75e:	2a54      	cmp	r2, #84	; 0x54
 800c760:	d80c      	bhi.n	800c77c <_free_r+0x170>
 800c762:	0b18      	lsrs	r0, r3, #12
 800c764:	306e      	adds	r0, #110	; 0x6e
 800c766:	0041      	lsls	r1, r0, #1
 800c768:	e79a      	b.n	800c6a0 <_free_r+0x94>
 800c76a:	2601      	movs	r6, #1
 800c76c:	684d      	ldr	r5, [r1, #4]
 800c76e:	1080      	asrs	r0, r0, #2
 800c770:	4613      	mov	r3, r2
 800c772:	fa06 f000 	lsl.w	r0, r6, r0
 800c776:	4305      	orrs	r5, r0
 800c778:	604d      	str	r5, [r1, #4]
 800c77a:	e7a3      	b.n	800c6c4 <_free_r+0xb8>
 800c77c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c780:	d803      	bhi.n	800c78a <_free_r+0x17e>
 800c782:	0bd8      	lsrs	r0, r3, #15
 800c784:	3077      	adds	r0, #119	; 0x77
 800c786:	0041      	lsls	r1, r0, #1
 800c788:	e78a      	b.n	800c6a0 <_free_r+0x94>
 800c78a:	f240 5154 	movw	r1, #1364	; 0x554
 800c78e:	428a      	cmp	r2, r1
 800c790:	bf95      	itete	ls
 800c792:	0c98      	lsrls	r0, r3, #18
 800c794:	21fc      	movhi	r1, #252	; 0xfc
 800c796:	307c      	addls	r0, #124	; 0x7c
 800c798:	207e      	movhi	r0, #126	; 0x7e
 800c79a:	bf98      	it	ls
 800c79c:	0041      	lslls	r1, r0, #1
 800c79e:	e77f      	b.n	800c6a0 <_free_r+0x94>
 800c7a0:	20000110 	andcs	r0, r0, r0, lsl r1

0800c7a4 <_setlocale_r>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4614      	mov	r4, r2
 800c7a8:	b13a      	cbz	r2, 800c7ba <_setlocale_r+0x16>
 800c7aa:	f241 016c 	movw	r1, #4204	; 0x106c
 800c7ae:	4610      	mov	r0, r2
 800c7b0:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c7b4:	f000 fe1e 	bl	800d3f4 <strcmp>
 800c7b8:	b920      	cbnz	r0, 800c7c4 <_setlocale_r+0x20>
 800c7ba:	f241 0014 	movw	r0, #4116	; 0x1014
 800c7be:	f6c0 0001 	movt	r0, #2049	; 0x801
 800c7c2:	bd10      	pop	{r4, pc}
 800c7c4:	f241 0114 	movw	r1, #4116	; 0x1014
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c7ce:	f000 fe11 	bl	800d3f4 <strcmp>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d0f1      	beq.n	800c7ba <_setlocale_r+0x16>
 800c7d6:	f640 6108 	movw	r1, #3592	; 0xe08
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c7e0:	f000 fe08 	bl	800d3f4 <strcmp>
 800c7e4:	f241 0314 	movw	r3, #4116	; 0x1014
 800c7e8:	f6c0 0301 	movt	r3, #2049	; 0x801
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	bf0c      	ite	eq
 800c7f0:	4618      	moveq	r0, r3
 800c7f2:	2000      	movne	r0, #0
 800c7f4:	bd10      	pop	{r4, pc}
 800c7f6:	bf00      	nop

0800c7f8 <__locale_charset>:
 800c7f8:	f240 5018 	movw	r0, #1304	; 0x518
 800c7fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop

0800c804 <__locale_mb_cur_max>:
 800c804:	f240 5318 	movw	r3, #1304	; 0x518
 800c808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c80c:	6a18      	ldr	r0, [r3, #32]
 800c80e:	4770      	bx	lr

0800c810 <__locale_msgcharset>:
 800c810:	4800      	ldr	r0, [pc, #0]	; (800c814 <__locale_msgcharset+0x4>)
 800c812:	4770      	bx	lr
 800c814:	2000053c 	andcs	r0, r0, ip, lsr r5

0800c818 <__locale_cjk_lang>:
 800c818:	2000      	movs	r0, #0
 800c81a:	4770      	bx	lr

0800c81c <_localeconv_r>:
 800c81c:	4800      	ldr	r0, [pc, #0]	; (800c820 <_localeconv_r+0x4>)
 800c81e:	4770      	bx	lr
 800c820:	2000055c 	andcs	r0, r0, ip, asr r5

0800c824 <setlocale>:
 800c824:	f240 0314 	movw	r3, #20
 800c828:	460a      	mov	r2, r1
 800c82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c82e:	4601      	mov	r1, r0
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	f7ff bfb7 	b.w	800c7a4 <_setlocale_r>
 800c836:	bf00      	nop

0800c838 <localeconv>:
 800c838:	4800      	ldr	r0, [pc, #0]	; (800c83c <localeconv+0x4>)
 800c83a:	4770      	bx	lr
 800c83c:	2000055c 	andcs	r0, r0, ip, asr r5

0800c840 <memchr>:
 800c840:	0783      	lsls	r3, r0, #30
 800c842:	b2c9      	uxtb	r1, r1
 800c844:	b470      	push	{r4, r5, r6}
 800c846:	d03f      	beq.n	800c8c8 <memchr+0x88>
 800c848:	1e54      	subs	r4, r2, #1
 800c84a:	b32a      	cbz	r2, 800c898 <memchr+0x58>
 800c84c:	7803      	ldrb	r3, [r0, #0]
 800c84e:	428b      	cmp	r3, r1
 800c850:	d023      	beq.n	800c89a <memchr+0x5a>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	e004      	b.n	800c860 <memchr+0x20>
 800c856:	b1fc      	cbz	r4, 800c898 <memchr+0x58>
 800c858:	7805      	ldrb	r5, [r0, #0]
 800c85a:	4614      	mov	r4, r2
 800c85c:	428d      	cmp	r5, r1
 800c85e:	d01c      	beq.n	800c89a <memchr+0x5a>
 800c860:	f013 0f03 	tst.w	r3, #3
 800c864:	4618      	mov	r0, r3
 800c866:	f104 32ff 	add.w	r2, r4, #4294967295
 800c86a:	f103 0301 	add.w	r3, r3, #1
 800c86e:	d1f2      	bne.n	800c856 <memchr+0x16>
 800c870:	2c03      	cmp	r4, #3
 800c872:	d814      	bhi.n	800c89e <memchr+0x5e>
 800c874:	1e65      	subs	r5, r4, #1
 800c876:	b34c      	cbz	r4, 800c8cc <memchr+0x8c>
 800c878:	7803      	ldrb	r3, [r0, #0]
 800c87a:	428b      	cmp	r3, r1
 800c87c:	d00d      	beq.n	800c89a <memchr+0x5a>
 800c87e:	1c42      	adds	r2, r0, #1
 800c880:	2300      	movs	r3, #0
 800c882:	e002      	b.n	800c88a <memchr+0x4a>
 800c884:	7804      	ldrb	r4, [r0, #0]
 800c886:	428c      	cmp	r4, r1
 800c888:	d007      	beq.n	800c89a <memchr+0x5a>
 800c88a:	42ab      	cmp	r3, r5
 800c88c:	4610      	mov	r0, r2
 800c88e:	f103 0301 	add.w	r3, r3, #1
 800c892:	f102 0201 	add.w	r2, r2, #1
 800c896:	d1f5      	bne.n	800c884 <memchr+0x44>
 800c898:	2000      	movs	r0, #0
 800c89a:	bc70      	pop	{r4, r5, r6}
 800c89c:	4770      	bx	lr
 800c89e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	6802      	ldr	r2, [r0, #0]
 800c8ae:	4072      	eors	r2, r6
 800c8b0:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800c8b4:	ea25 0202 	bic.w	r2, r5, r2
 800c8b8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c8bc:	d1da      	bne.n	800c874 <memchr+0x34>
 800c8be:	3c04      	subs	r4, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	2c03      	cmp	r4, #3
 800c8c4:	d8f0      	bhi.n	800c8a8 <memchr+0x68>
 800c8c6:	e7d5      	b.n	800c874 <memchr+0x34>
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	e7d1      	b.n	800c870 <memchr+0x30>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	e7e4      	b.n	800c89a <memchr+0x5a>

0800c8d0 <memcpy>:
 800c8d0:	2a0f      	cmp	r2, #15
 800c8d2:	b4f0      	push	{r4, r5, r6, r7}
 800c8d4:	d945      	bls.n	800c962 <memcpy+0x92>
 800c8d6:	ea40 0301 	orr.w	r3, r0, r1
 800c8da:	079b      	lsls	r3, r3, #30
 800c8dc:	d145      	bne.n	800c96a <memcpy+0x9a>
 800c8de:	f1a2 0710 	sub.w	r7, r2, #16
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	093f      	lsrs	r7, r7, #4
 800c8e8:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800c8ec:	3610      	adds	r6, #16
 800c8ee:	6825      	ldr	r5, [r4, #0]
 800c8f0:	3310      	adds	r3, #16
 800c8f2:	3410      	adds	r4, #16
 800c8f4:	f843 5c10 	str.w	r5, [r3, #-16]
 800c8f8:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800c8fc:	f843 5c0c 	str.w	r5, [r3, #-12]
 800c900:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c904:	f843 5c08 	str.w	r5, [r3, #-8]
 800c908:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c90c:	f843 5c04 	str.w	r5, [r3, #-4]
 800c910:	42b3      	cmp	r3, r6
 800c912:	d1ec      	bne.n	800c8ee <memcpy+0x1e>
 800c914:	1c7b      	adds	r3, r7, #1
 800c916:	f002 0c0f 	and.w	ip, r2, #15
 800c91a:	f1bc 0f03 	cmp.w	ip, #3
 800c91e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c922:	4419      	add	r1, r3
 800c924:	4403      	add	r3, r0
 800c926:	d922      	bls.n	800c96e <memcpy+0x9e>
 800c928:	460e      	mov	r6, r1
 800c92a:	461d      	mov	r5, r3
 800c92c:	4664      	mov	r4, ip
 800c92e:	f856 7b04 	ldr.w	r7, [r6], #4
 800c932:	3c04      	subs	r4, #4
 800c934:	2c03      	cmp	r4, #3
 800c936:	f845 7b04 	str.w	r7, [r5], #4
 800c93a:	d8f8      	bhi.n	800c92e <memcpy+0x5e>
 800c93c:	f1ac 0404 	sub.w	r4, ip, #4
 800c940:	f002 0203 	and.w	r2, r2, #3
 800c944:	f024 0403 	bic.w	r4, r4, #3
 800c948:	3404      	adds	r4, #4
 800c94a:	4423      	add	r3, r4
 800c94c:	4421      	add	r1, r4
 800c94e:	b132      	cbz	r2, 800c95e <memcpy+0x8e>
 800c950:	440a      	add	r2, r1
 800c952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c956:	4291      	cmp	r1, r2
 800c958:	f803 4b01 	strb.w	r4, [r3], #1
 800c95c:	d1f9      	bne.n	800c952 <memcpy+0x82>
 800c95e:	bcf0      	pop	{r4, r5, r6, r7}
 800c960:	4770      	bx	lr
 800c962:	4603      	mov	r3, r0
 800c964:	2a00      	cmp	r2, #0
 800c966:	d1f3      	bne.n	800c950 <memcpy+0x80>
 800c968:	e7f9      	b.n	800c95e <memcpy+0x8e>
 800c96a:	4603      	mov	r3, r0
 800c96c:	e7f0      	b.n	800c950 <memcpy+0x80>
 800c96e:	4662      	mov	r2, ip
 800c970:	2a00      	cmp	r2, #0
 800c972:	d1ed      	bne.n	800c950 <memcpy+0x80>
 800c974:	e7f3      	b.n	800c95e <memcpy+0x8e>
 800c976:	bf00      	nop

0800c978 <_Balloc>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	4606      	mov	r6, r0
 800c97c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c97e:	460d      	mov	r5, r1
 800c980:	b164      	cbz	r4, 800c99c <_Balloc+0x24>
 800c982:	68e2      	ldr	r2, [r4, #12]
 800c984:	b19a      	cbz	r2, 800c9ae <_Balloc+0x36>
 800c986:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800c98a:	b1e3      	cbz	r3, 800c9c6 <_Balloc+0x4e>
 800c98c:	6819      	ldr	r1, [r3, #0]
 800c98e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 800c992:	2200      	movs	r2, #0
 800c994:	4618      	mov	r0, r3
 800c996:	611a      	str	r2, [r3, #16]
 800c998:	60da      	str	r2, [r3, #12]
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	2010      	movs	r0, #16
 800c99e:	f7fd f83b 	bl	8009a18 <malloc>
 800c9a2:	6270      	str	r0, [r6, #36]	; 0x24
 800c9a4:	6044      	str	r4, [r0, #4]
 800c9a6:	6084      	str	r4, [r0, #8]
 800c9a8:	6004      	str	r4, [r0, #0]
 800c9aa:	60c4      	str	r4, [r0, #12]
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	2221      	movs	r2, #33	; 0x21
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	2104      	movs	r1, #4
 800c9b4:	f001 fc2c 	bl	800e210 <_calloc_r>
 800c9b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9ba:	60e0      	str	r0, [r4, #12]
 800c9bc:	68da      	ldr	r2, [r3, #12]
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	d1e1      	bne.n	800c986 <_Balloc+0xe>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	fa03 f405 	lsl.w	r4, r3, r5
 800c9d0:	1d62      	adds	r2, r4, #5
 800c9d2:	0092      	lsls	r2, r2, #2
 800c9d4:	f001 fc1c 	bl	800e210 <_calloc_r>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d0f1      	beq.n	800c9c2 <_Balloc+0x4a>
 800c9de:	6045      	str	r5, [r0, #4]
 800c9e0:	6084      	str	r4, [r0, #8]
 800c9e2:	e7d6      	b.n	800c992 <_Balloc+0x1a>

0800c9e4 <_Bfree>:
 800c9e4:	b530      	push	{r4, r5, lr}
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	b155      	cbz	r5, 800ca04 <_Bfree+0x20>
 800c9ee:	b139      	cbz	r1, 800ca00 <_Bfree+0x1c>
 800c9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9f2:	684a      	ldr	r2, [r1, #4]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c9fa:	6008      	str	r0, [r1, #0]
 800c9fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca00:	b003      	add	sp, #12
 800ca02:	bd30      	pop	{r4, r5, pc}
 800ca04:	2010      	movs	r0, #16
 800ca06:	9101      	str	r1, [sp, #4]
 800ca08:	f7fd f806 	bl	8009a18 <malloc>
 800ca0c:	9901      	ldr	r1, [sp, #4]
 800ca0e:	6260      	str	r0, [r4, #36]	; 0x24
 800ca10:	6045      	str	r5, [r0, #4]
 800ca12:	6085      	str	r5, [r0, #8]
 800ca14:	6005      	str	r5, [r0, #0]
 800ca16:	60c5      	str	r5, [r0, #12]
 800ca18:	e7e9      	b.n	800c9ee <_Bfree+0xa>
 800ca1a:	bf00      	nop

0800ca1c <__multadd>:
 800ca1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca20:	4688      	mov	r8, r1
 800ca22:	f8d1 a010 	ldr.w	sl, [r1, #16]
 800ca26:	b082      	sub	sp, #8
 800ca28:	4681      	mov	r9, r0
 800ca2a:	f101 0514 	add.w	r5, r1, #20
 800ca2e:	2400      	movs	r4, #0
 800ca30:	682f      	ldr	r7, [r5, #0]
 800ca32:	3401      	adds	r4, #1
 800ca34:	45a2      	cmp	sl, r4
 800ca36:	b2be      	uxth	r6, r7
 800ca38:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800ca3c:	fb02 3606 	mla	r6, r2, r6, r3
 800ca40:	fb02 f307 	mul.w	r3, r2, r7
 800ca44:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 800ca48:	b2b6      	uxth	r6, r6
 800ca4a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800ca4e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ca52:	f845 6b04 	str.w	r6, [r5], #4
 800ca56:	dceb      	bgt.n	800ca30 <__multadd+0x14>
 800ca58:	b153      	cbz	r3, 800ca70 <__multadd+0x54>
 800ca5a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ca5e:	4592      	cmp	sl, r2
 800ca60:	da0a      	bge.n	800ca78 <__multadd+0x5c>
 800ca62:	eb08 018a 	add.w	r1, r8, sl, lsl #2
 800ca66:	f10a 0201 	add.w	r2, sl, #1
 800ca6a:	614b      	str	r3, [r1, #20]
 800ca6c:	f8c8 2010 	str.w	r2, [r8, #16]
 800ca70:	4640      	mov	r0, r8
 800ca72:	b002      	add	sp, #8
 800ca74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca7c:	4648      	mov	r0, r9
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	3101      	adds	r1, #1
 800ca82:	f7ff ff79 	bl	800c978 <_Balloc>
 800ca86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca8a:	f108 010c 	add.w	r1, r8, #12
 800ca8e:	3202      	adds	r2, #2
 800ca90:	0092      	lsls	r2, r2, #2
 800ca92:	4604      	mov	r4, r0
 800ca94:	300c      	adds	r0, #12
 800ca96:	f7ff ff1b 	bl	800c8d0 <memcpy>
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	4648      	mov	r0, r9
 800ca9e:	46a0      	mov	r8, r4
 800caa0:	f7ff ffa0 	bl	800c9e4 <_Bfree>
 800caa4:	9b01      	ldr	r3, [sp, #4]
 800caa6:	e7dc      	b.n	800ca62 <__multadd+0x46>

0800caa8 <__s2b>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	4699      	mov	r9, r3
 800caae:	f648 6339 	movw	r3, #36409	; 0x8e39
 800cab2:	f109 0508 	add.w	r5, r9, #8
 800cab6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800caba:	460c      	mov	r4, r1
 800cabc:	4607      	mov	r7, r0
 800cabe:	4690      	mov	r8, r2
 800cac0:	fb83 1305 	smull	r1, r3, r3, r5
 800cac4:	17ed      	asrs	r5, r5, #31
 800cac6:	9e08      	ldr	r6, [sp, #32]
 800cac8:	ebc5 0363 	rsb	r3, r5, r3, asr #1
 800cacc:	2b01      	cmp	r3, #1
 800cace:	dd35      	ble.n	800cb3c <__s2b+0x94>
 800cad0:	2501      	movs	r5, #1
 800cad2:	2100      	movs	r1, #0
 800cad4:	006d      	lsls	r5, r5, #1
 800cad6:	3101      	adds	r1, #1
 800cad8:	42ab      	cmp	r3, r5
 800cada:	dcfb      	bgt.n	800cad4 <__s2b+0x2c>
 800cadc:	4638      	mov	r0, r7
 800cade:	f7ff ff4b 	bl	800c978 <_Balloc>
 800cae2:	f1b8 0f09 	cmp.w	r8, #9
 800cae6:	f04f 0301 	mov.w	r3, #1
 800caea:	bfdc      	itt	le
 800caec:	340a      	addle	r4, #10
 800caee:	f04f 0809 	movle.w	r8, #9
 800caf2:	6146      	str	r6, [r0, #20]
 800caf4:	6103      	str	r3, [r0, #16]
 800caf6:	dd10      	ble.n	800cb1a <__s2b+0x72>
 800caf8:	f104 0609 	add.w	r6, r4, #9
 800cafc:	4444      	add	r4, r8
 800cafe:	4635      	mov	r5, r6
 800cb00:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb04:	4601      	mov	r1, r0
 800cb06:	220a      	movs	r2, #10
 800cb08:	4638      	mov	r0, r7
 800cb0a:	3b30      	subs	r3, #48	; 0x30
 800cb0c:	f7ff ff86 	bl	800ca1c <__multadd>
 800cb10:	42a5      	cmp	r5, r4
 800cb12:	d1f5      	bne.n	800cb00 <__s2b+0x58>
 800cb14:	eb06 0408 	add.w	r4, r6, r8
 800cb18:	3c08      	subs	r4, #8
 800cb1a:	45c1      	cmp	r9, r8
 800cb1c:	dd0c      	ble.n	800cb38 <__s2b+0x90>
 800cb1e:	ebc8 0809 	rsb	r8, r8, r9
 800cb22:	44a0      	add	r8, r4
 800cb24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb28:	4601      	mov	r1, r0
 800cb2a:	220a      	movs	r2, #10
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	3b30      	subs	r3, #48	; 0x30
 800cb30:	f7ff ff74 	bl	800ca1c <__multadd>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d1f5      	bne.n	800cb24 <__s2b+0x7c>
 800cb38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	e7cd      	b.n	800cadc <__s2b+0x34>

0800cb40 <__hi0bits>:
 800cb40:	0c03      	lsrs	r3, r0, #16
 800cb42:	bf06      	itte	eq
 800cb44:	0400      	lsleq	r0, r0, #16
 800cb46:	2310      	moveq	r3, #16
 800cb48:	2300      	movne	r3, #0
 800cb4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb4e:	bf04      	itt	eq
 800cb50:	0200      	lsleq	r0, r0, #8
 800cb52:	3308      	addeq	r3, #8
 800cb54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb58:	bf04      	itt	eq
 800cb5a:	0100      	lsleq	r0, r0, #4
 800cb5c:	3304      	addeq	r3, #4
 800cb5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb62:	bf04      	itt	eq
 800cb64:	0080      	lsleq	r0, r0, #2
 800cb66:	3302      	addeq	r3, #2
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	db05      	blt.n	800cb78 <__hi0bits+0x38>
 800cb6c:	0042      	lsls	r2, r0, #1
 800cb6e:	d401      	bmi.n	800cb74 <__hi0bits+0x34>
 800cb70:	2020      	movs	r0, #32
 800cb72:	4770      	bx	lr
 800cb74:	1c58      	adds	r0, r3, #1
 800cb76:	4770      	bx	lr
 800cb78:	4618      	mov	r0, r3
 800cb7a:	4770      	bx	lr

0800cb7c <__lo0bits>:
 800cb7c:	6803      	ldr	r3, [r0, #0]
 800cb7e:	4602      	mov	r2, r0
 800cb80:	f013 0007 	ands.w	r0, r3, #7
 800cb84:	d009      	beq.n	800cb9a <__lo0bits+0x1e>
 800cb86:	07d9      	lsls	r1, r3, #31
 800cb88:	d421      	bmi.n	800cbce <__lo0bits+0x52>
 800cb8a:	0798      	lsls	r0, r3, #30
 800cb8c:	bf4b      	itete	mi
 800cb8e:	085b      	lsrmi	r3, r3, #1
 800cb90:	089b      	lsrpl	r3, r3, #2
 800cb92:	2001      	movmi	r0, #1
 800cb94:	2002      	movpl	r0, #2
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	4770      	bx	lr
 800cb9a:	b299      	uxth	r1, r3
 800cb9c:	b909      	cbnz	r1, 800cba2 <__lo0bits+0x26>
 800cb9e:	0c1b      	lsrs	r3, r3, #16
 800cba0:	2010      	movs	r0, #16
 800cba2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cba6:	bf04      	itt	eq
 800cba8:	0a1b      	lsreq	r3, r3, #8
 800cbaa:	3008      	addeq	r0, #8
 800cbac:	0719      	lsls	r1, r3, #28
 800cbae:	bf04      	itt	eq
 800cbb0:	091b      	lsreq	r3, r3, #4
 800cbb2:	3004      	addeq	r0, #4
 800cbb4:	0799      	lsls	r1, r3, #30
 800cbb6:	bf04      	itt	eq
 800cbb8:	089b      	lsreq	r3, r3, #2
 800cbba:	3002      	addeq	r0, #2
 800cbbc:	07d9      	lsls	r1, r3, #31
 800cbbe:	d404      	bmi.n	800cbca <__lo0bits+0x4e>
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	d101      	bne.n	800cbc8 <__lo0bits+0x4c>
 800cbc4:	2020      	movs	r0, #32
 800cbc6:	4770      	bx	lr
 800cbc8:	3001      	adds	r0, #1
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	4770      	bx	lr
 800cbce:	2000      	movs	r0, #0
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <__i2b>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	2101      	movs	r1, #1
 800cbda:	f7ff fecd 	bl	800c978 <_Balloc>
 800cbde:	2201      	movs	r2, #1
 800cbe0:	6144      	str	r4, [r0, #20]
 800cbe2:	6102      	str	r2, [r0, #16]
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	bf00      	nop

0800cbe8 <__multiply>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	460c      	mov	r4, r1
 800cbee:	690e      	ldr	r6, [r1, #16]
 800cbf0:	b085      	sub	sp, #20
 800cbf2:	6915      	ldr	r5, [r2, #16]
 800cbf4:	4693      	mov	fp, r2
 800cbf6:	42ae      	cmp	r6, r5
 800cbf8:	da04      	bge.n	800cc04 <__multiply+0x1c>
 800cbfa:	4632      	mov	r2, r6
 800cbfc:	465c      	mov	r4, fp
 800cbfe:	462e      	mov	r6, r5
 800cc00:	468b      	mov	fp, r1
 800cc02:	4615      	mov	r5, r2
 800cc04:	68a3      	ldr	r3, [r4, #8]
 800cc06:	eb06 0905 	add.w	r9, r6, r5
 800cc0a:	6861      	ldr	r1, [r4, #4]
 800cc0c:	4599      	cmp	r9, r3
 800cc0e:	bfc8      	it	gt
 800cc10:	3101      	addgt	r1, #1
 800cc12:	f7ff feb1 	bl	800c978 <_Balloc>
 800cc16:	f100 0a14 	add.w	sl, r0, #20
 800cc1a:	9002      	str	r0, [sp, #8]
 800cc1c:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
 800cc20:	9101      	str	r1, [sp, #4]
 800cc22:	458a      	cmp	sl, r1
 800cc24:	d206      	bcs.n	800cc34 <__multiply+0x4c>
 800cc26:	9a01      	ldr	r2, [sp, #4]
 800cc28:	4653      	mov	r3, sl
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	f843 0b04 	str.w	r0, [r3], #4
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d8fb      	bhi.n	800cc2c <__multiply+0x44>
 800cc34:	f10b 0b14 	add.w	fp, fp, #20
 800cc38:	3414      	adds	r4, #20
 800cc3a:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 800cc3e:	9400      	str	r4, [sp, #0]
 800cc40:	45ab      	cmp	fp, r5
 800cc42:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cc46:	bf3c      	itt	cc
 800cc48:	f8cd 900c 	strcc.w	r9, [sp, #12]
 800cc4c:	46a9      	movcc	r9, r5
 800cc4e:	d254      	bcs.n	800ccfa <__multiply+0x112>
 800cc50:	f85b 3b04 	ldr.w	r3, [fp], #4
 800cc54:	b29c      	uxth	r4, r3
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	d064      	beq.n	800cd24 <__multiply+0x13c>
 800cc5a:	9900      	ldr	r1, [sp, #0]
 800cc5c:	4652      	mov	r2, sl
 800cc5e:	2500      	movs	r5, #0
 800cc60:	46a4      	mov	ip, r4
 800cc62:	e000      	b.n	800cc66 <__multiply+0x7e>
 800cc64:	461a      	mov	r2, r3
 800cc66:	f851 4b04 	ldr.w	r4, [r1], #4
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	6817      	ldr	r7, [r2, #0]
 800cc6e:	428e      	cmp	r6, r1
 800cc70:	fa1f f884 	uxth.w	r8, r4
 800cc74:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800cc78:	b2b8      	uxth	r0, r7
 800cc7a:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800cc7e:	fb0c 0808 	mla	r8, ip, r8, r0
 800cc82:	fb0c 7004 	mla	r0, ip, r4, r7
 800cc86:	4445      	add	r5, r8
 800cc88:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800cc8c:	b2ad      	uxth	r5, r5
 800cc8e:	ea45 4400 	orr.w	r4, r5, r0, lsl #16
 800cc92:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800cc96:	f843 4b04 	str.w	r4, [r3], #4
 800cc9a:	d8e3      	bhi.n	800cc64 <__multiply+0x7c>
 800cc9c:	6055      	str	r5, [r2, #4]
 800cc9e:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800cca2:	0c24      	lsrs	r4, r4, #16
 800cca4:	d023      	beq.n	800ccee <__multiply+0x106>
 800cca6:	f8da 1000 	ldr.w	r1, [sl]
 800ccaa:	4650      	mov	r0, sl
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	2700      	movs	r7, #0
 800ccb0:	460d      	mov	r5, r1
 800ccb2:	e000      	b.n	800ccb6 <__multiply+0xce>
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	f8b3 c000 	ldrh.w	ip, [r3]
 800ccba:	0c2d      	lsrs	r5, r5, #16
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	b289      	uxth	r1, r1
 800ccc0:	fb04 550c 	mla	r5, r4, ip, r5
 800ccc4:	442f      	add	r7, r5
 800ccc6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ccca:	f842 1b04 	str.w	r1, [r2], #4
 800ccce:	6841      	ldr	r1, [r0, #4]
 800ccd0:	f853 cb04 	ldr.w	ip, [r3], #4
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	b289      	uxth	r1, r1
 800ccd8:	429e      	cmp	r6, r3
 800ccda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ccde:	fb04 110c 	mla	r1, r4, ip, r1
 800cce2:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800cce6:	ea4f 4711 	mov.w	r7, r1, lsr #16
 800ccea:	d8e3      	bhi.n	800ccb4 <__multiply+0xcc>
 800ccec:	6041      	str	r1, [r0, #4]
 800ccee:	45d9      	cmp	r9, fp
 800ccf0:	f10a 0a04 	add.w	sl, sl, #4
 800ccf4:	d8ac      	bhi.n	800cc50 <__multiply+0x68>
 800ccf6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ccfa:	f1b9 0f00 	cmp.w	r9, #0
 800ccfe:	dd0a      	ble.n	800cd16 <__multiply+0x12e>
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	3b04      	subs	r3, #4
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	b11a      	cbz	r2, 800cd10 <__multiply+0x128>
 800cd08:	e005      	b.n	800cd16 <__multiply+0x12e>
 800cd0a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd0e:	b912      	cbnz	r2, 800cd16 <__multiply+0x12e>
 800cd10:	f1b9 0901 	subs.w	r9, r9, #1
 800cd14:	d1f9      	bne.n	800cd0a <__multiply+0x122>
 800cd16:	9902      	ldr	r1, [sp, #8]
 800cd18:	4608      	mov	r0, r1
 800cd1a:	f8c1 9010 	str.w	r9, [r1, #16]
 800cd1e:	b005      	add	sp, #20
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	461c      	mov	r4, r3
 800cd26:	e7bc      	b.n	800cca2 <__multiply+0xba>

0800cd28 <__pow5mult>:
 800cd28:	f012 0303 	ands.w	r3, r2, #3
 800cd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd30:	4614      	mov	r4, r2
 800cd32:	b083      	sub	sp, #12
 800cd34:	4607      	mov	r7, r0
 800cd36:	460e      	mov	r6, r1
 800cd38:	d12b      	bne.n	800cd92 <__pow5mult+0x6a>
 800cd3a:	10a4      	asrs	r4, r4, #2
 800cd3c:	d01c      	beq.n	800cd78 <__pow5mult+0x50>
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d032      	beq.n	800cdaa <__pow5mult+0x82>
 800cd44:	689d      	ldr	r5, [r3, #8]
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	d03a      	beq.n	800cdc0 <__pow5mult+0x98>
 800cd4a:	f04f 0900 	mov.w	r9, #0
 800cd4e:	e004      	b.n	800cd5a <__pow5mult+0x32>
 800cd50:	1064      	asrs	r4, r4, #1
 800cd52:	d011      	beq.n	800cd78 <__pow5mult+0x50>
 800cd54:	6828      	ldr	r0, [r5, #0]
 800cd56:	b198      	cbz	r0, 800cd80 <__pow5mult+0x58>
 800cd58:	4605      	mov	r5, r0
 800cd5a:	07e0      	lsls	r0, r4, #31
 800cd5c:	d5f8      	bpl.n	800cd50 <__pow5mult+0x28>
 800cd5e:	4631      	mov	r1, r6
 800cd60:	462a      	mov	r2, r5
 800cd62:	4638      	mov	r0, r7
 800cd64:	f7ff ff40 	bl	800cbe8 <__multiply>
 800cd68:	4631      	mov	r1, r6
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7ff fe39 	bl	800c9e4 <_Bfree>
 800cd72:	1064      	asrs	r4, r4, #1
 800cd74:	4646      	mov	r6, r8
 800cd76:	d1ed      	bne.n	800cd54 <__pow5mult+0x2c>
 800cd78:	4630      	mov	r0, r6
 800cd7a:	b003      	add	sp, #12
 800cd7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd80:	4638      	mov	r0, r7
 800cd82:	4629      	mov	r1, r5
 800cd84:	462a      	mov	r2, r5
 800cd86:	f7ff ff2f 	bl	800cbe8 <__multiply>
 800cd8a:	6028      	str	r0, [r5, #0]
 800cd8c:	f8c0 9000 	str.w	r9, [r0]
 800cd90:	e7e2      	b.n	800cd58 <__pow5mult+0x30>
 800cd92:	f640 32e8 	movw	r2, #3048	; 0xbe8
 800cd96:	1e5d      	subs	r5, r3, #1
 800cd98:	f6c0 0201 	movt	r2, #2049	; 0x801
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800cda2:	f7ff fe3b 	bl	800ca1c <__multadd>
 800cda6:	4606      	mov	r6, r0
 800cda8:	e7c7      	b.n	800cd3a <__pow5mult+0x12>
 800cdaa:	2010      	movs	r0, #16
 800cdac:	9301      	str	r3, [sp, #4]
 800cdae:	f7fc fe33 	bl	8009a18 <malloc>
 800cdb2:	9b01      	ldr	r3, [sp, #4]
 800cdb4:	6278      	str	r0, [r7, #36]	; 0x24
 800cdb6:	6043      	str	r3, [r0, #4]
 800cdb8:	6083      	str	r3, [r0, #8]
 800cdba:	6003      	str	r3, [r0, #0]
 800cdbc:	60c3      	str	r3, [r0, #12]
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	f7ff fdd7 	bl	800c978 <_Balloc>
 800cdca:	9b01      	ldr	r3, [sp, #4]
 800cdcc:	f240 2271 	movw	r2, #625	; 0x271
 800cdd0:	2101      	movs	r1, #1
 800cdd2:	6142      	str	r2, [r0, #20]
 800cdd4:	4605      	mov	r5, r0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6101      	str	r1, [r0, #16]
 800cdda:	6098      	str	r0, [r3, #8]
 800cddc:	6002      	str	r2, [r0, #0]
 800cdde:	e7b4      	b.n	800cd4a <__pow5mult+0x22>

0800cde0 <__lshift>:
 800cde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	4693      	mov	fp, r2
 800cde6:	690a      	ldr	r2, [r1, #16]
 800cde8:	460f      	mov	r7, r1
 800cdea:	ea4f 156b 	mov.w	r5, fp, asr #5
 800cdee:	688b      	ldr	r3, [r1, #8]
 800cdf0:	eb05 0902 	add.w	r9, r5, r2
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	f109 0601 	add.w	r6, r9, #1
 800cdfa:	6849      	ldr	r1, [r1, #4]
 800cdfc:	429e      	cmp	r6, r3
 800cdfe:	dd03      	ble.n	800ce08 <__lshift+0x28>
 800ce00:	005b      	lsls	r3, r3, #1
 800ce02:	3101      	adds	r1, #1
 800ce04:	429e      	cmp	r6, r3
 800ce06:	dcfb      	bgt.n	800ce00 <__lshift+0x20>
 800ce08:	4640      	mov	r0, r8
 800ce0a:	f7ff fdb5 	bl	800c978 <_Balloc>
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	4682      	mov	sl, r0
 800ce12:	f100 0414 	add.w	r4, r0, #20
 800ce16:	dd09      	ble.n	800ce2c <__lshift+0x4c>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	3301      	adds	r3, #1
 800ce20:	f842 1b04 	str.w	r1, [r2], #4
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	d1fa      	bne.n	800ce1e <__lshift+0x3e>
 800ce28:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	f01b 0b1f 	ands.w	fp, fp, #31
 800ce32:	f107 0314 	add.w	r3, r7, #20
 800ce36:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ce3a:	d01f      	beq.n	800ce7c <__lshift+0x9c>
 800ce3c:	f1cb 0e20 	rsb	lr, fp, #32
 800ce40:	2000      	movs	r0, #0
 800ce42:	e000      	b.n	800ce46 <__lshift+0x66>
 800ce44:	462c      	mov	r4, r5
 800ce46:	6819      	ldr	r1, [r3, #0]
 800ce48:	4625      	mov	r5, r4
 800ce4a:	fa01 f10b 	lsl.w	r1, r1, fp
 800ce4e:	4308      	orrs	r0, r1
 800ce50:	f845 0b04 	str.w	r0, [r5], #4
 800ce54:	f853 0b04 	ldr.w	r0, [r3], #4
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	fa20 f00e 	lsr.w	r0, r0, lr
 800ce5e:	d3f1      	bcc.n	800ce44 <__lshift+0x64>
 800ce60:	6060      	str	r0, [r4, #4]
 800ce62:	b108      	cbz	r0, 800ce68 <__lshift+0x88>
 800ce64:	f109 0602 	add.w	r6, r9, #2
 800ce68:	4640      	mov	r0, r8
 800ce6a:	3e01      	subs	r6, #1
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	f8ca 6010 	str.w	r6, [sl, #16]
 800ce72:	f7ff fdb7 	bl	800c9e4 <_Bfree>
 800ce76:	4650      	mov	r0, sl
 800ce78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7c:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce80:	429a      	cmp	r2, r3
 800ce82:	f844 1b04 	str.w	r1, [r4], #4
 800ce86:	d9ef      	bls.n	800ce68 <__lshift+0x88>
 800ce88:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	f844 1b04 	str.w	r1, [r4], #4
 800ce92:	d8f3      	bhi.n	800ce7c <__lshift+0x9c>
 800ce94:	e7e8      	b.n	800ce68 <__lshift+0x88>
 800ce96:	bf00      	nop

0800ce98 <__mcmp>:
 800ce98:	6902      	ldr	r2, [r0, #16]
 800ce9a:	690b      	ldr	r3, [r1, #16]
 800ce9c:	b410      	push	{r4}
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	bf18      	it	ne
 800cea2:	4610      	movne	r0, r2
 800cea4:	d112      	bne.n	800cecc <__mcmp+0x34>
 800cea6:	009a      	lsls	r2, r3, #2
 800cea8:	3014      	adds	r0, #20
 800ceaa:	3114      	adds	r1, #20
 800ceac:	1883      	adds	r3, r0, r2
 800ceae:	4411      	add	r1, r2
 800ceb0:	e001      	b.n	800ceb6 <__mcmp+0x1e>
 800ceb2:	4298      	cmp	r0, r3
 800ceb4:	d20d      	bcs.n	800ced2 <__mcmp+0x3a>
 800ceb6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ceba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cebe:	42a2      	cmp	r2, r4
 800cec0:	d0f7      	beq.n	800ceb2 <__mcmp+0x1a>
 800cec2:	4294      	cmp	r4, r2
 800cec4:	bf94      	ite	ls
 800cec6:	2001      	movls	r0, #1
 800cec8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	2000      	movs	r0, #0
 800ced4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop

0800cedc <__mdiff>:
 800cedc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee0:	4688      	mov	r8, r1
 800cee2:	4605      	mov	r5, r0
 800cee4:	4611      	mov	r1, r2
 800cee6:	4640      	mov	r0, r8
 800cee8:	4614      	mov	r4, r2
 800ceea:	f7ff ffd5 	bl	800ce98 <__mcmp>
 800ceee:	1e06      	subs	r6, r0, #0
 800cef0:	d05f      	beq.n	800cfb2 <__mdiff+0xd6>
 800cef2:	bfbc      	itt	lt
 800cef4:	4643      	movlt	r3, r8
 800cef6:	46a0      	movlt	r8, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	bfb8      	it	lt
 800cefc:	461c      	movlt	r4, r3
 800cefe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf02:	bfac      	ite	ge
 800cf04:	2600      	movge	r6, #0
 800cf06:	2601      	movlt	r6, #1
 800cf08:	f7ff fd36 	bl	800c978 <_Balloc>
 800cf0c:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800cf10:	f104 0914 	add.w	r9, r4, #20
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	f108 0814 	add.w	r8, r8, #20
 800cf1a:	4644      	mov	r4, r8
 800cf1c:	464d      	mov	r5, r9
 800cf1e:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 800cf22:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800cf26:	2200      	movs	r2, #0
 800cf28:	4682      	mov	sl, r0
 800cf2a:	f100 0314 	add.w	r3, r0, #20
 800cf2e:	60c6      	str	r6, [r0, #12]
 800cf30:	f854 7b04 	ldr.w	r7, [r4], #4
 800cf34:	f855 0b04 	ldr.w	r0, [r5], #4
 800cf38:	4621      	mov	r1, r4
 800cf3a:	b2be      	uxth	r6, r7
 800cf3c:	45a9      	cmp	r9, r5
 800cf3e:	4432      	add	r2, r6
 800cf40:	fa1f fb80 	uxth.w	fp, r0
 800cf44:	ebcb 0602 	rsb	r6, fp, r2
 800cf48:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800cf4c:	ebc2 4217 	rsb	r2, r2, r7, lsr #16
 800cf50:	eb02 4226 	add.w	r2, r2, r6, asr #16
 800cf54:	b2b6      	uxth	r6, r6
 800cf56:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800cf5a:	ea4f 4222 	mov.w	r2, r2, asr #16
 800cf5e:	f843 6b04 	str.w	r6, [r3], #4
 800cf62:	d8e5      	bhi.n	800cf30 <__mdiff+0x54>
 800cf64:	45a0      	cmp	r8, r4
 800cf66:	461d      	mov	r5, r3
 800cf68:	d916      	bls.n	800cf98 <__mdiff+0xbc>
 800cf6a:	f851 0b04 	ldr.w	r0, [r1], #4
 800cf6e:	4588      	cmp	r8, r1
 800cf70:	b286      	uxth	r6, r0
 800cf72:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800cf76:	4432      	add	r2, r6
 800cf78:	eb00 4022 	add.w	r0, r0, r2, asr #16
 800cf7c:	b292      	uxth	r2, r2
 800cf7e:	ea42 4600 	orr.w	r6, r2, r0, lsl #16
 800cf82:	ea4f 4220 	mov.w	r2, r0, asr #16
 800cf86:	f843 6b04 	str.w	r6, [r3], #4
 800cf8a:	d8ee      	bhi.n	800cf6a <__mdiff+0x8e>
 800cf8c:	43e3      	mvns	r3, r4
 800cf8e:	4443      	add	r3, r8
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	3304      	adds	r3, #4
 800cf96:	442b      	add	r3, r5
 800cf98:	3b04      	subs	r3, #4
 800cf9a:	b92e      	cbnz	r6, 800cfa8 <__mdiff+0xcc>
 800cf9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cfa4:	2a00      	cmp	r2, #0
 800cfa6:	d0f9      	beq.n	800cf9c <__mdiff+0xc0>
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	f8ca c010 	str.w	ip, [sl, #16]
 800cfae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	f7ff fcdf 	bl	800c978 <_Balloc>
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	615e      	str	r6, [r3, #20]
 800cfc0:	611a      	str	r2, [r3, #16]
 800cfc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	bf00      	nop

0800cfc8 <__ulp>:
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800cfce:	400b      	ands	r3, r1
 800cfd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	dd02      	ble.n	800cfde <__ulp+0x16>
 800cfd8:	4619      	mov	r1, r3
 800cfda:	2000      	movs	r0, #0
 800cfdc:	4770      	bx	lr
 800cfde:	425b      	negs	r3, r3
 800cfe0:	151b      	asrs	r3, r3, #20
 800cfe2:	2b13      	cmp	r3, #19
 800cfe4:	dd0b      	ble.n	800cffe <__ulp+0x36>
 800cfe6:	2b32      	cmp	r3, #50	; 0x32
 800cfe8:	f04f 0100 	mov.w	r1, #0
 800cfec:	bfdb      	ittet	le
 800cfee:	2201      	movle	r2, #1
 800cff0:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 800cff4:	2301      	movgt	r3, #1
 800cff6:	fa02 f303 	lslle.w	r3, r2, r3
 800cffa:	4618      	mov	r0, r3
 800cffc:	4770      	bx	lr
 800cffe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d002:	2000      	movs	r0, #0
 800d004:	fa42 f103 	asr.w	r1, r2, r3
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop

0800d00c <__b2d>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	f100 0614 	add.w	r6, r0, #20
 800d012:	6904      	ldr	r4, [r0, #16]
 800d014:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800d018:	1f27      	subs	r7, r4, #4
 800d01a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d01e:	4628      	mov	r0, r5
 800d020:	f7ff fd8e 	bl	800cb40 <__hi0bits>
 800d024:	280a      	cmp	r0, #10
 800d026:	f1c0 0320 	rsb	r3, r0, #32
 800d02a:	600b      	str	r3, [r1, #0]
 800d02c:	dc18      	bgt.n	800d060 <__b2d+0x54>
 800d02e:	42be      	cmp	r6, r7
 800d030:	f1c0 010b 	rsb	r1, r0, #11
 800d034:	fa25 fc01 	lsr.w	ip, r5, r1
 800d038:	f100 0015 	add.w	r0, r0, #21
 800d03c:	bf34      	ite	cc
 800d03e:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 800d042:	2100      	movcs	r1, #0
 800d044:	fa05 f500 	lsl.w	r5, r5, r0
 800d048:	f04c 5c7f 	orr.w	ip, ip, #1069547520	; 0x3fc00000
 800d04c:	f44c 1340 	orr.w	r3, ip, #3145728	; 0x300000
 800d050:	bf38      	it	cc
 800d052:	fa24 f101 	lsrcc.w	r1, r4, r1
 800d056:	ea41 0205 	orr.w	r2, r1, r5
 800d05a:	4619      	mov	r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d060:	42be      	cmp	r6, r7
 800d062:	bf36      	itet	cc
 800d064:	f1a4 0708 	subcc.w	r7, r4, #8
 800d068:	2100      	movcs	r1, #0
 800d06a:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 800d06e:	f1b0 040b 	subs.w	r4, r0, #11
 800d072:	d019      	beq.n	800d0a8 <__b2d+0x9c>
 800d074:	40a5      	lsls	r5, r4
 800d076:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800d07a:	42b7      	cmp	r7, r6
 800d07c:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800d080:	fa21 fc00 	lsr.w	ip, r1, r0
 800d084:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d088:	ea45 030c 	orr.w	r3, r5, ip
 800d08c:	bf8c      	ite	hi
 800d08e:	f857 5c04 	ldrhi.w	r5, [r7, #-4]
 800d092:	2000      	movls	r0, #0
 800d094:	fa01 f104 	lsl.w	r1, r1, r4
 800d098:	bf88      	it	hi
 800d09a:	fa25 f000 	lsrhi.w	r0, r5, r0
 800d09e:	ea40 0201 	orr.w	r2, r0, r1
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a8:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800d0ac:	460a      	mov	r2, r1
 800d0ae:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0b8 <__d2b>:
 800d0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	2101      	movs	r1, #1
 800d0c0:	461d      	mov	r5, r3
 800d0c2:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d0c6:	4614      	mov	r4, r2
 800d0c8:	9f08      	ldr	r7, [sp, #32]
 800d0ca:	f7ff fc55 	bl	800c978 <_Balloc>
 800d0ce:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d0d2:	4684      	mov	ip, r0
 800d0d4:	b10e      	cbz	r6, 800d0da <__d2b+0x22>
 800d0d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	b324      	cbz	r4, 800d128 <__d2b+0x70>
 800d0de:	a802      	add	r0, sp, #8
 800d0e0:	f840 4d08 	str.w	r4, [r0, #-8]!
 800d0e4:	4668      	mov	r0, sp
 800d0e6:	f7ff fd49 	bl	800cb7c <__lo0bits>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d134      	bne.n	800d158 <__d2b+0xa0>
 800d0ee:	9b00      	ldr	r3, [sp, #0]
 800d0f0:	9901      	ldr	r1, [sp, #4]
 800d0f2:	f8cc 3014 	str.w	r3, [ip, #20]
 800d0f6:	f8cc 1018 	str.w	r1, [ip, #24]
 800d0fa:	2900      	cmp	r1, #0
 800d0fc:	bf0c      	ite	eq
 800d0fe:	2101      	moveq	r1, #1
 800d100:	2102      	movne	r1, #2
 800d102:	f8cc 1010 	str.w	r1, [ip, #16]
 800d106:	b9de      	cbnz	r6, 800d140 <__d2b+0x88>
 800d108:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
 800d10c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d110:	6038      	str	r0, [r7, #0]
 800d112:	6918      	ldr	r0, [r3, #16]
 800d114:	f7ff fd14 	bl	800cb40 <__hi0bits>
 800d118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d11e:	6018      	str	r0, [r3, #0]
 800d120:	4660      	mov	r0, ip
 800d122:	b002      	add	sp, #8
 800d124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d128:	a801      	add	r0, sp, #4
 800d12a:	f7ff fd27 	bl	800cb7c <__lo0bits>
 800d12e:	9b01      	ldr	r3, [sp, #4]
 800d130:	2101      	movs	r1, #1
 800d132:	f8cc 3014 	str.w	r3, [ip, #20]
 800d136:	3020      	adds	r0, #32
 800d138:	f8cc 1010 	str.w	r1, [ip, #16]
 800d13c:	2e00      	cmp	r6, #0
 800d13e:	d0e3      	beq.n	800d108 <__d2b+0x50>
 800d140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d142:	f2a6 4833 	subw	r8, r6, #1075	; 0x433
 800d146:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 800d14a:	4440      	add	r0, r8
 800d14c:	6038      	str	r0, [r7, #0]
 800d14e:	4660      	mov	r0, ip
 800d150:	6013      	str	r3, [r2, #0]
 800d152:	b002      	add	sp, #8
 800d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d158:	9b01      	ldr	r3, [sp, #4]
 800d15a:	f1c0 0420 	rsb	r4, r0, #32
 800d15e:	9a00      	ldr	r2, [sp, #0]
 800d160:	fa03 f404 	lsl.w	r4, r3, r4
 800d164:	40c3      	lsrs	r3, r0
 800d166:	4322      	orrs	r2, r4
 800d168:	4619      	mov	r1, r3
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	f8cc 2014 	str.w	r2, [ip, #20]
 800d170:	e7c1      	b.n	800d0f6 <__d2b+0x3e>
 800d172:	bf00      	nop

0800d174 <__ratio>:
 800d174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d178:	b083      	sub	sp, #12
 800d17a:	4688      	mov	r8, r1
 800d17c:	4669      	mov	r1, sp
 800d17e:	4606      	mov	r6, r0
 800d180:	f7ff ff44 	bl	800d00c <__b2d>
 800d184:	460d      	mov	r5, r1
 800d186:	4604      	mov	r4, r0
 800d188:	a901      	add	r1, sp, #4
 800d18a:	4640      	mov	r0, r8
 800d18c:	f7ff ff3e 	bl	800d00c <__b2d>
 800d190:	f8d8 e010 	ldr.w	lr, [r8, #16]
 800d194:	462f      	mov	r7, r5
 800d196:	4602      	mov	r2, r0
 800d198:	6930      	ldr	r0, [r6, #16]
 800d19a:	460b      	mov	r3, r1
 800d19c:	4689      	mov	r9, r1
 800d19e:	ebce 0e00 	rsb	lr, lr, r0
 800d1a2:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800d1a6:	ebc1 0c00 	rsb	ip, r1, r0
 800d1aa:	eb0c 114e 	add.w	r1, ip, lr, lsl #5
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	bfc9      	itett	gt
 800d1b2:	eb05 5701 	addgt.w	r7, r5, r1, lsl #20
 800d1b6:	eba3 5901 	suble.w	r9, r3, r1, lsl #20
 800d1ba:	4624      	movgt	r4, r4
 800d1bc:	463d      	movgt	r5, r7
 800d1be:	bfdc      	itt	le
 800d1c0:	4612      	movle	r2, r2
 800d1c2:	464b      	movle	r3, r9
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	f001 ff22 	bl	800f010 <__aeabi_ddiv>
 800d1cc:	b003      	add	sp, #12
 800d1ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	bf00      	nop

0800d1d4 <_mprec_log10>:
 800d1d4:	2817      	cmp	r0, #23
 800d1d6:	b510      	push	{r4, lr}
 800d1d8:	4604      	mov	r4, r0
 800d1da:	dd0c      	ble.n	800d1f6 <_mprec_log10+0x22>
 800d1dc:	2100      	movs	r1, #0
 800d1de:	2000      	movs	r0, #0
 800d1e0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800d1ec:	f001 fde6 	bl	800edbc <__aeabi_dmul>
 800d1f0:	3c01      	subs	r4, #1
 800d1f2:	d1f7      	bne.n	800d1e4 <_mprec_log10+0x10>
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	f640 33e8 	movw	r3, #3048	; 0xbe8
 800d1fa:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d1fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800d202:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d206:	bd10      	pop	{r4, pc}

0800d208 <__copybits>:
 800d208:	b470      	push	{r4, r5, r6}
 800d20a:	3901      	subs	r1, #1
 800d20c:	6915      	ldr	r5, [r2, #16]
 800d20e:	f102 0314 	add.w	r3, r2, #20
 800d212:	114e      	asrs	r6, r1, #5
 800d214:	3601      	adds	r6, #1
 800d216:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d21a:	42ab      	cmp	r3, r5
 800d21c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800d220:	d20c      	bcs.n	800d23c <__copybits+0x34>
 800d222:	4601      	mov	r1, r0
 800d224:	f853 4b04 	ldr.w	r4, [r3], #4
 800d228:	429d      	cmp	r5, r3
 800d22a:	f841 4b04 	str.w	r4, [r1], #4
 800d22e:	d8f9      	bhi.n	800d224 <__copybits+0x1c>
 800d230:	1aab      	subs	r3, r5, r2
 800d232:	3b15      	subs	r3, #21
 800d234:	f023 0303 	bic.w	r3, r3, #3
 800d238:	3304      	adds	r3, #4
 800d23a:	4418      	add	r0, r3
 800d23c:	4286      	cmp	r6, r0
 800d23e:	d904      	bls.n	800d24a <__copybits+0x42>
 800d240:	2300      	movs	r3, #0
 800d242:	f840 3b04 	str.w	r3, [r0], #4
 800d246:	4286      	cmp	r6, r0
 800d248:	d8fb      	bhi.n	800d242 <__copybits+0x3a>
 800d24a:	bc70      	pop	{r4, r5, r6}
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop

0800d250 <__any_on>:
 800d250:	6903      	ldr	r3, [r0, #16]
 800d252:	114a      	asrs	r2, r1, #5
 800d254:	b410      	push	{r4}
 800d256:	4293      	cmp	r3, r2
 800d258:	f100 0414 	add.w	r4, r0, #20
 800d25c:	bfb8      	it	lt
 800d25e:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 800d262:	db13      	blt.n	800d28c <__any_on+0x3c>
 800d264:	dd10      	ble.n	800d288 <__any_on+0x38>
 800d266:	f011 011f 	ands.w	r1, r1, #31
 800d26a:	d00d      	beq.n	800d288 <__any_on+0x38>
 800d26c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800d270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d274:	fa20 f201 	lsr.w	r2, r0, r1
 800d278:	fa02 f101 	lsl.w	r1, r2, r1
 800d27c:	4281      	cmp	r1, r0
 800d27e:	d005      	beq.n	800d28c <__any_on+0x3c>
 800d280:	2001      	movs	r0, #1
 800d282:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d286:	4770      	bx	lr
 800d288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d28c:	429c      	cmp	r4, r3
 800d28e:	d20a      	bcs.n	800d2a6 <__any_on+0x56>
 800d290:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d294:	3b04      	subs	r3, #4
 800d296:	b122      	cbz	r2, 800d2a2 <__any_on+0x52>
 800d298:	e7f2      	b.n	800d280 <__any_on+0x30>
 800d29a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d1ee      	bne.n	800d280 <__any_on+0x30>
 800d2a2:	429c      	cmp	r4, r3
 800d2a4:	d3f9      	bcc.n	800d29a <__any_on+0x4a>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop

0800d2b0 <cleanup_glue>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	460c      	mov	r4, r1
 800d2b4:	6809      	ldr	r1, [r1, #0]
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	b109      	cbz	r1, 800d2be <cleanup_glue+0xe>
 800d2ba:	f7ff fff9 	bl	800d2b0 <cleanup_glue>
 800d2be:	4628      	mov	r0, r5
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c6:	f7ff b9a1 	b.w	800c60c <_free_r>
 800d2ca:	bf00      	nop

0800d2cc <_reclaim_reent>:
 800d2cc:	f240 0314 	movw	r3, #20
 800d2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4298      	cmp	r0, r3
 800d2dc:	d054      	beq.n	800d388 <_reclaim_reent+0xbc>
 800d2de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d2e0:	b1f3      	cbz	r3, 800d320 <_reclaim_reent+0x54>
 800d2e2:	68da      	ldr	r2, [r3, #12]
 800d2e4:	b1ba      	cbz	r2, 800d316 <_reclaim_reent+0x4a>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	461e      	mov	r6, r3
 800d2ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d2ee:	b909      	cbnz	r1, 800d2f4 <_reclaim_reent+0x28>
 800d2f0:	e008      	b.n	800d304 <_reclaim_reent+0x38>
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	680c      	ldr	r4, [r1, #0]
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f7ff f988 	bl	800c60c <_free_r>
 800d2fc:	2c00      	cmp	r4, #0
 800d2fe:	d1f8      	bne.n	800d2f2 <_reclaim_reent+0x26>
 800d300:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	3601      	adds	r6, #1
 800d306:	2e20      	cmp	r6, #32
 800d308:	4633      	mov	r3, r6
 800d30a:	d1ee      	bne.n	800d2ea <_reclaim_reent+0x1e>
 800d30c:	4611      	mov	r1, r2
 800d30e:	4628      	mov	r0, r5
 800d310:	f7ff f97c 	bl	800c60c <_free_r>
 800d314:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d316:	6819      	ldr	r1, [r3, #0]
 800d318:	b111      	cbz	r1, 800d320 <_reclaim_reent+0x54>
 800d31a:	4628      	mov	r0, r5
 800d31c:	f7ff f976 	bl	800c60c <_free_r>
 800d320:	6969      	ldr	r1, [r5, #20]
 800d322:	b111      	cbz	r1, 800d32a <_reclaim_reent+0x5e>
 800d324:	4628      	mov	r0, r5
 800d326:	f7ff f971 	bl	800c60c <_free_r>
 800d32a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d32c:	b111      	cbz	r1, 800d334 <_reclaim_reent+0x68>
 800d32e:	4628      	mov	r0, r5
 800d330:	f7ff f96c 	bl	800c60c <_free_r>
 800d334:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d336:	b111      	cbz	r1, 800d33e <_reclaim_reent+0x72>
 800d338:	4628      	mov	r0, r5
 800d33a:	f7ff f967 	bl	800c60c <_free_r>
 800d33e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d340:	b111      	cbz	r1, 800d348 <_reclaim_reent+0x7c>
 800d342:	4628      	mov	r0, r5
 800d344:	f7ff f962 	bl	800c60c <_free_r>
 800d348:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800d34a:	b111      	cbz	r1, 800d352 <_reclaim_reent+0x86>
 800d34c:	4628      	mov	r0, r5
 800d34e:	f7ff f95d 	bl	800c60c <_free_r>
 800d352:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
 800d356:	b111      	cbz	r1, 800d35e <_reclaim_reent+0x92>
 800d358:	4628      	mov	r0, r5
 800d35a:	f7ff f957 	bl	800c60c <_free_r>
 800d35e:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
 800d362:	b111      	cbz	r1, 800d36a <_reclaim_reent+0x9e>
 800d364:	4628      	mov	r0, r5
 800d366:	f7ff f951 	bl	800c60c <_free_r>
 800d36a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800d36c:	b12b      	cbz	r3, 800d37a <_reclaim_reent+0xae>
 800d36e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800d372:	b111      	cbz	r1, 800d37a <_reclaim_reent+0xae>
 800d374:	4628      	mov	r0, r5
 800d376:	f7ff f949 	bl	800c60c <_free_r>
 800d37a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d37c:	b111      	cbz	r1, 800d384 <_reclaim_reent+0xb8>
 800d37e:	4628      	mov	r0, r5
 800d380:	f7ff f944 	bl	800c60c <_free_r>
 800d384:	69ab      	ldr	r3, [r5, #24]
 800d386:	b903      	cbnz	r3, 800d38a <_reclaim_reent+0xbe>
 800d388:	bd70      	pop	{r4, r5, r6, pc}
 800d38a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d38c:	4628      	mov	r0, r5
 800d38e:	4798      	blx	r3
 800d390:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
 800d394:	2900      	cmp	r1, #0
 800d396:	d0f7      	beq.n	800d388 <_reclaim_reent+0xbc>
 800d398:	4628      	mov	r0, r5
 800d39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d39e:	f7ff bf87 	b.w	800d2b0 <cleanup_glue>
 800d3a2:	bf00      	nop

0800d3a4 <__fpclassifyd>:
 800d3a4:	ea50 0301 	orrs.w	r3, r0, r1
 800d3a8:	d101      	bne.n	800d3ae <__fpclassifyd+0xa>
 800d3aa:	2002      	movs	r0, #2
 800d3ac:	4770      	bx	lr
 800d3ae:	f1d0 0301 	rsbs	r3, r0, #1
 800d3b2:	bf38      	it	cc
 800d3b4:	2300      	movcc	r3, #0
 800d3b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800d3ba:	bf08      	it	eq
 800d3bc:	2800      	cmpeq	r0, #0
 800d3be:	d0f4      	beq.n	800d3aa <__fpclassifyd+0x6>
 800d3c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d3c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3c8:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800d3cc:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800d3d0:	4290      	cmp	r0, r2
 800d3d2:	d801      	bhi.n	800d3d8 <__fpclassifyd+0x34>
 800d3d4:	2004      	movs	r0, #4
 800d3d6:	4770      	bx	lr
 800d3d8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d3dc:	d201      	bcs.n	800d3e2 <__fpclassifyd+0x3e>
 800d3de:	2003      	movs	r0, #3
 800d3e0:	4770      	bx	lr
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800d3e8:	4281      	cmp	r1, r0
 800d3ea:	bf14      	ite	ne
 800d3ec:	2000      	movne	r0, #0
 800d3ee:	f003 0001 	andeq.w	r0, r3, #1
 800d3f2:	4770      	bx	lr

0800d3f4 <strcmp>:
 800d3f4:	ea40 0c01 	orr.w	ip, r0, r1
 800d3f8:	f01c 0f07 	tst.w	ip, #7
 800d3fc:	d127      	bne.n	800d44e <strcmp+0x5a>
 800d3fe:	f1bd 0d10 	subs.w	sp, sp, #16
 800d402:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d406:	e9cd 6700 	strd	r6, r7, [sp]
 800d40a:	f06f 0600 	mvn.w	r6, #0
 800d40e:	f04f 0700 	mov.w	r7, #0
 800d412:	bf00      	nop
 800d414:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800d418:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800d41c:	42a2      	cmp	r2, r4
 800d41e:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800d422:	ea2c 0c02 	bic.w	ip, ip, r2
 800d426:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d42a:	bf08      	it	eq
 800d42c:	f1bc 0f00 	cmpeq.w	ip, #0
 800d430:	f040 80e5 	bne.w	800d5fe <strcmp+0x20a>
 800d434:	42ab      	cmp	r3, r5
 800d436:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800d43a:	ea2c 0c03 	bic.w	ip, ip, r3
 800d43e:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d442:	bf08      	it	eq
 800d444:	f1bc 0f00 	cmpeq.w	ip, #0
 800d448:	f040 80d6 	bne.w	800d5f8 <strcmp+0x204>
 800d44c:	e7e2      	b.n	800d414 <strcmp+0x20>
 800d44e:	f010 0c03 	ands.w	ip, r0, #3
 800d452:	d021      	beq.n	800d498 <strcmp+0xa4>
 800d454:	f020 0003 	bic.w	r0, r0, #3
 800d458:	f850 2b04 	ldr.w	r2, [r0], #4
 800d45c:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 800d460:	d008      	beq.n	800d474 <strcmp+0x80>
 800d462:	d20f      	bcs.n	800d484 <strcmp+0x90>
 800d464:	f811 cb01 	ldrb.w	ip, [r1], #1
 800d468:	fa5f f392 	uxtb.w	r3, r2, ror #8
 800d46c:	ebb3 0c0c 	subs.w	ip, r3, ip
 800d470:	d110      	bne.n	800d494 <strcmp+0xa0>
 800d472:	b17b      	cbz	r3, 800d494 <strcmp+0xa0>
 800d474:	f811 cb01 	ldrb.w	ip, [r1], #1
 800d478:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 800d47c:	ebb3 0c0c 	subs.w	ip, r3, ip
 800d480:	d108      	bne.n	800d494 <strcmp+0xa0>
 800d482:	b13b      	cbz	r3, 800d494 <strcmp+0xa0>
 800d484:	f811 cb01 	ldrb.w	ip, [r1], #1
 800d488:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 800d48c:	ebb3 0c0c 	subs.w	ip, r3, ip
 800d490:	d100      	bne.n	800d494 <strcmp+0xa0>
 800d492:	b90b      	cbnz	r3, 800d498 <strcmp+0xa4>
 800d494:	4660      	mov	r0, ip
 800d496:	4770      	bx	lr
 800d498:	f1bd 0d10 	subs.w	sp, sp, #16
 800d49c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d4a0:	e9cd 6700 	strd	r6, r7, [sp]
 800d4a4:	f06f 0600 	mvn.w	r6, #0
 800d4a8:	f04f 0700 	mov.w	r7, #0
 800d4ac:	f011 0c03 	ands.w	ip, r1, #3
 800d4b0:	d133      	bne.n	800d51a <strcmp+0x126>
 800d4b2:	f010 0f04 	tst.w	r0, #4
 800d4b6:	d00f      	beq.n	800d4d8 <strcmp+0xe4>
 800d4b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4bc:	f851 4b04 	ldr.w	r4, [r1], #4
 800d4c0:	42a2      	cmp	r2, r4
 800d4c2:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800d4c6:	ea2c 0c02 	bic.w	ip, ip, r2
 800d4ca:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d4ce:	bf08      	it	eq
 800d4d0:	f1bc 0f00 	cmpeq.w	ip, #0
 800d4d4:	f040 8093 	bne.w	800d5fe <strcmp+0x20a>
 800d4d8:	f011 0f04 	tst.w	r1, #4
 800d4dc:	d099      	beq.n	800d412 <strcmp+0x1e>
 800d4de:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4e2:	bf00      	nop
 800d4e4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800d4e8:	42aa      	cmp	r2, r5
 800d4ea:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800d4ee:	ea2c 0c02 	bic.w	ip, ip, r2
 800d4f2:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d4f6:	bf08      	it	eq
 800d4f8:	f1bc 0f00 	cmpeq.w	ip, #0
 800d4fc:	d179      	bne.n	800d5f2 <strcmp+0x1fe>
 800d4fe:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800d502:	42a3      	cmp	r3, r4
 800d504:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800d508:	ea2c 0c03 	bic.w	ip, ip, r3
 800d50c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d510:	bf08      	it	eq
 800d512:	f1bc 0f00 	cmpeq.w	ip, #0
 800d516:	d169      	bne.n	800d5ec <strcmp+0x1f8>
 800d518:	e7e4      	b.n	800d4e4 <strcmp+0xf0>
 800d51a:	f021 0103 	bic.w	r1, r1, #3
 800d51e:	f1bc 0f02 	cmp.w	ip, #2
 800d522:	d020      	beq.n	800d566 <strcmp+0x172>
 800d524:	da3f      	bge.n	800d5a6 <strcmp+0x1b2>
 800d526:	f851 5b04 	ldr.w	r5, [r1], #4
 800d52a:	bf00      	nop
 800d52c:	f850 3b04 	ldr.w	r3, [r0], #4
 800d530:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800d534:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800d538:	ea2c 0c03 	bic.w	ip, ip, r3
 800d53c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d540:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 800d544:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 800d548:	bf08      	it	eq
 800d54a:	42aa      	cmpeq	r2, r5
 800d54c:	d151      	bne.n	800d5f2 <strcmp+0x1fe>
 800d54e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d552:	f1bc 0f00 	cmp.w	ip, #0
 800d556:	ea82 0303 	eor.w	r3, r2, r3
 800d55a:	ea4f 6205 	mov.w	r2, r5, lsl #24
 800d55e:	bf08      	it	eq
 800d560:	4293      	cmpeq	r3, r2
 800d562:	d140      	bne.n	800d5e6 <strcmp+0x1f2>
 800d564:	e7e2      	b.n	800d52c <strcmp+0x138>
 800d566:	f851 5b04 	ldr.w	r5, [r1], #4
 800d56a:	bf00      	nop
 800d56c:	f850 3b04 	ldr.w	r3, [r0], #4
 800d570:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800d574:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800d578:	ea2c 0c03 	bic.w	ip, ip, r3
 800d57c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d580:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 800d584:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 800d588:	bf08      	it	eq
 800d58a:	42aa      	cmpeq	r2, r5
 800d58c:	d131      	bne.n	800d5f2 <strcmp+0x1fe>
 800d58e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d592:	f1bc 0f00 	cmp.w	ip, #0
 800d596:	ea82 0303 	eor.w	r3, r2, r3
 800d59a:	ea4f 4205 	mov.w	r2, r5, lsl #16
 800d59e:	bf08      	it	eq
 800d5a0:	4293      	cmpeq	r3, r2
 800d5a2:	d120      	bne.n	800d5e6 <strcmp+0x1f2>
 800d5a4:	e7e2      	b.n	800d56c <strcmp+0x178>
 800d5a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5aa:	bf00      	nop
 800d5ac:	f850 3b04 	ldr.w	r3, [r0], #4
 800d5b0:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800d5b4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800d5b8:	ea2c 0c03 	bic.w	ip, ip, r3
 800d5bc:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800d5c0:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 800d5c4:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 800d5c8:	bf08      	it	eq
 800d5ca:	42aa      	cmpeq	r2, r5
 800d5cc:	d111      	bne.n	800d5f2 <strcmp+0x1fe>
 800d5ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5d2:	f1bc 0f00 	cmp.w	ip, #0
 800d5d6:	ea82 0303 	eor.w	r3, r2, r3
 800d5da:	ea4f 2205 	mov.w	r2, r5, lsl #8
 800d5de:	bf08      	it	eq
 800d5e0:	4293      	cmpeq	r3, r2
 800d5e2:	d100      	bne.n	800d5e6 <strcmp+0x1f2>
 800d5e4:	e7e2      	b.n	800d5ac <strcmp+0x1b8>
 800d5e6:	ba19      	rev	r1, r3
 800d5e8:	ba12      	rev	r2, r2
 800d5ea:	e00a      	b.n	800d602 <strcmp+0x20e>
 800d5ec:	ba19      	rev	r1, r3
 800d5ee:	ba22      	rev	r2, r4
 800d5f0:	e007      	b.n	800d602 <strcmp+0x20e>
 800d5f2:	ba11      	rev	r1, r2
 800d5f4:	ba2a      	rev	r2, r5
 800d5f6:	e004      	b.n	800d602 <strcmp+0x20e>
 800d5f8:	ba19      	rev	r1, r3
 800d5fa:	ba2a      	rev	r2, r5
 800d5fc:	e001      	b.n	800d602 <strcmp+0x20e>
 800d5fe:	ba11      	rev	r1, r2
 800d600:	ba22      	rev	r2, r4
 800d602:	fa9c f08c 	rev.w	r0, ip
 800d606:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d60a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d60e:	f11d 0d10 	adds.w	sp, sp, #16
 800d612:	b138      	cbz	r0, 800d624 <strcmp+0x230>
 800d614:	fab0 f080 	clz	r0, r0
 800d618:	f1c0 0018 	rsb	r0, r0, #24
 800d61c:	fa21 f100 	lsr.w	r1, r1, r0
 800d620:	fa22 f200 	lsr.w	r2, r2, r0
 800d624:	2001      	movs	r0, #1
 800d626:	4291      	cmp	r1, r2
 800d628:	bf98      	it	ls
 800d62a:	4180      	sbcls	r0, r0
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop

0800d630 <__ssprint_r>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	4692      	mov	sl, r2
 800d636:	6894      	ldr	r4, [r2, #8]
 800d638:	b083      	sub	sp, #12
 800d63a:	4680      	mov	r8, r0
 800d63c:	460d      	mov	r5, r1
 800d63e:	6816      	ldr	r6, [r2, #0]
 800d640:	2c00      	cmp	r4, #0
 800d642:	d071      	beq.n	800d728 <__ssprint_r+0xf8>
 800d644:	f04f 0b00 	mov.w	fp, #0
 800d648:	6808      	ldr	r0, [r1, #0]
 800d64a:	688b      	ldr	r3, [r1, #8]
 800d64c:	465c      	mov	r4, fp
 800d64e:	2c00      	cmp	r4, #0
 800d650:	d045      	beq.n	800d6de <__ssprint_r+0xae>
 800d652:	429c      	cmp	r4, r3
 800d654:	461f      	mov	r7, r3
 800d656:	d348      	bcc.n	800d6ea <__ssprint_r+0xba>
 800d658:	89ab      	ldrh	r3, [r5, #12]
 800d65a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d65e:	bf08      	it	eq
 800d660:	46b9      	moveq	r9, r7
 800d662:	d02c      	beq.n	800d6be <__ssprint_r+0x8e>
 800d664:	696f      	ldr	r7, [r5, #20]
 800d666:	1c62      	adds	r2, r4, #1
 800d668:	6929      	ldr	r1, [r5, #16]
 800d66a:	eb07 0947 	add.w	r9, r7, r7, lsl #1
 800d66e:	1a47      	subs	r7, r0, r1
 800d670:	443a      	add	r2, r7
 800d672:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 800d676:	ea4f 0969 	mov.w	r9, r9, asr #1
 800d67a:	4591      	cmp	r9, r2
 800d67c:	bf34      	ite	cc
 800d67e:	4691      	movcc	r9, r2
 800d680:	464a      	movcs	r2, r9
 800d682:	055b      	lsls	r3, r3, #21
 800d684:	d534      	bpl.n	800d6f0 <__ssprint_r+0xc0>
 800d686:	4611      	mov	r1, r2
 800d688:	4640      	mov	r0, r8
 800d68a:	f7fc f9d5 	bl	8009a38 <_malloc_r>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d038      	beq.n	800d704 <__ssprint_r+0xd4>
 800d692:	6929      	ldr	r1, [r5, #16]
 800d694:	463a      	mov	r2, r7
 800d696:	9001      	str	r0, [sp, #4]
 800d698:	f7ff f91a 	bl	800c8d0 <memcpy>
 800d69c:	89aa      	ldrh	r2, [r5, #12]
 800d69e:	9b01      	ldr	r3, [sp, #4]
 800d6a0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d6a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d6a8:	81aa      	strh	r2, [r5, #12]
 800d6aa:	19d8      	adds	r0, r3, r7
 800d6ac:	f8c5 9014 	str.w	r9, [r5, #20]
 800d6b0:	ebc7 0709 	rsb	r7, r7, r9
 800d6b4:	46a1      	mov	r9, r4
 800d6b6:	60af      	str	r7, [r5, #8]
 800d6b8:	4627      	mov	r7, r4
 800d6ba:	612b      	str	r3, [r5, #16]
 800d6bc:	6028      	str	r0, [r5, #0]
 800d6be:	464a      	mov	r2, r9
 800d6c0:	4659      	mov	r1, fp
 800d6c2:	f000 fdd7 	bl	800e274 <memmove>
 800d6c6:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d6ca:	68ab      	ldr	r3, [r5, #8]
 800d6cc:	6828      	ldr	r0, [r5, #0]
 800d6ce:	1b14      	subs	r4, r2, r4
 800d6d0:	1bdb      	subs	r3, r3, r7
 800d6d2:	60ab      	str	r3, [r5, #8]
 800d6d4:	4448      	add	r0, r9
 800d6d6:	6028      	str	r0, [r5, #0]
 800d6d8:	f8ca 4008 	str.w	r4, [sl, #8]
 800d6dc:	b324      	cbz	r4, 800d728 <__ssprint_r+0xf8>
 800d6de:	f8d6 b000 	ldr.w	fp, [r6]
 800d6e2:	3608      	adds	r6, #8
 800d6e4:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800d6e8:	e7b1      	b.n	800d64e <__ssprint_r+0x1e>
 800d6ea:	4627      	mov	r7, r4
 800d6ec:	46a1      	mov	r9, r4
 800d6ee:	e7e6      	b.n	800d6be <__ssprint_r+0x8e>
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	f000 fe77 	bl	800e3e4 <_realloc_r>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d1d6      	bne.n	800d6aa <__ssprint_r+0x7a>
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	6929      	ldr	r1, [r5, #16]
 800d700:	f7fe ff84 	bl	800c60c <_free_r>
 800d704:	89aa      	ldrh	r2, [r5, #12]
 800d706:	f04f 34ff 	mov.w	r4, #4294967295
 800d70a:	230c      	movs	r3, #12
 800d70c:	4620      	mov	r0, r4
 800d70e:	f8c8 3000 	str.w	r3, [r8]
 800d712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d716:	2300      	movs	r3, #0
 800d718:	81aa      	strh	r2, [r5, #12]
 800d71a:	f8ca 3008 	str.w	r3, [sl, #8]
 800d71e:	f8ca 3004 	str.w	r3, [sl, #4]
 800d722:	b003      	add	sp, #12
 800d724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d728:	4620      	mov	r0, r4
 800d72a:	f8ca 4004 	str.w	r4, [sl, #4]
 800d72e:	b003      	add	sp, #12
 800d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d734 <_svfiprintf_r>:
 800d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d738:	b0b3      	sub	sp, #204	; 0xcc
 800d73a:	4692      	mov	sl, r2
 800d73c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d73e:	898b      	ldrh	r3, [r1, #12]
 800d740:	9108      	str	r1, [sp, #32]
 800d742:	061a      	lsls	r2, r3, #24
 800d744:	9005      	str	r0, [sp, #20]
 800d746:	d503      	bpl.n	800d750 <_svfiprintf_r+0x1c>
 800d748:	690b      	ldr	r3, [r1, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 8522 	beq.w	800e194 <_svfiprintf_r+0xa60>
 800d750:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800d754:	f640 5510 	movw	r5, #3344	; 0xd10
 800d758:	4646      	mov	r6, r8
 800d75a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800d75e:	f10d 0487 	add.w	r4, sp, #135	; 0x87
 800d762:	2300      	movs	r3, #0
 800d764:	950d      	str	r5, [sp, #52]	; 0x34
 800d766:	f105 0710 	add.w	r7, r5, #16
 800d76a:	930e      	str	r3, [sp, #56]	; 0x38
 800d76c:	ebc4 0508 	rsb	r5, r4, r8
 800d770:	9401      	str	r4, [sp, #4]
 800d772:	930a      	str	r3, [sp, #40]	; 0x28
 800d774:	9511      	str	r5, [sp, #68]	; 0x44
 800d776:	9317      	str	r3, [sp, #92]	; 0x5c
 800d778:	9316      	str	r3, [sp, #88]	; 0x58
 800d77a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800d77e:	f89a 3000 	ldrb.w	r3, [sl]
 800d782:	2b00      	cmp	r3, #0
 800d784:	bf18      	it	ne
 800d786:	2b25      	cmpne	r3, #37	; 0x25
 800d788:	f000 83ca 	beq.w	800df20 <_svfiprintf_r+0x7ec>
 800d78c:	f10a 0201 	add.w	r2, sl, #1
 800d790:	4614      	mov	r4, r2
 800d792:	3201      	adds	r2, #1
 800d794:	7823      	ldrb	r3, [r4, #0]
 800d796:	2b25      	cmp	r3, #37	; 0x25
 800d798:	bf18      	it	ne
 800d79a:	2b00      	cmpne	r3, #0
 800d79c:	d1f8      	bne.n	800d790 <_svfiprintf_r+0x5c>
 800d79e:	ebb4 050a 	subs.w	r5, r4, sl
 800d7a2:	d010      	beq.n	800d7c6 <_svfiprintf_r+0x92>
 800d7a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	f8c6 a000 	str.w	sl, [r6]
 800d7ae:	2b07      	cmp	r3, #7
 800d7b0:	6075      	str	r5, [r6, #4]
 800d7b2:	442a      	add	r2, r5
 800d7b4:	9316      	str	r3, [sp, #88]	; 0x58
 800d7b6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d7b8:	bfd8      	it	le
 800d7ba:	3608      	addle	r6, #8
 800d7bc:	f300 8436 	bgt.w	800e02c <_svfiprintf_r+0x8f8>
 800d7c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7c2:	4428      	add	r0, r5
 800d7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800d7c6:	7823      	ldrb	r3, [r4, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 83bc 	beq.w	800df46 <_svfiprintf_r+0x812>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f104 0a01 	add.w	sl, r4, #1
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 800d7da:	4608      	mov	r0, r1
 800d7dc:	9304      	str	r3, [sp, #16]
 800d7de:	9302      	str	r3, [sp, #8]
 800d7e0:	7863      	ldrb	r3, [r4, #1]
 800d7e2:	f04f 34ff 	mov.w	r4, #4294967295
 800d7e6:	9403      	str	r4, [sp, #12]
 800d7e8:	f10a 0a01 	add.w	sl, sl, #1
 800d7ec:	f1a3 0220 	sub.w	r2, r3, #32
 800d7f0:	2a58      	cmp	r2, #88	; 0x58
 800d7f2:	f200 82b5 	bhi.w	800dd60 <_svfiprintf_r+0x62c>
 800d7f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d7fa:	02b302a3 	adcseq	r0, r3, #805306378	; 0x3000000a
 800d7fe:	02aa02b3 	adceq	r0, sl, #805306379	; 0x3000000b
 800d802:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d806:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d80a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d80e:	02850059 	addeq	r0, r5, #89	; 0x59
 800d812:	006102b3 	strhteq	r0, [r1], #-35	; 0xffffffdd
 800d816:	02b3020c 	adcseq	r0, r3, #12, 4	; 0xc0000000
 800d81a:	01f70205 	mvnseq	r0, r5, lsl #4
 800d81e:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800d822:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800d826:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800d82a:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800d82e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d832:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d836:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d83a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d83e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d842:	02b301dc 	adcseq	r0, r3, #220, 2	; 0x37
 800d846:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d84a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d84e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d852:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d856:	026902b3 	rsbeq	r0, r9, #805306379	; 0x3000000b
 800d85a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d85e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d862:	022c02b3 	eoreq	r0, ip, #805306379	; 0x3000000b
 800d866:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d86a:	02b30245 	adcseq	r0, r3, #1342177284	; 0x50000004
 800d86e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d872:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d876:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d87a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d87e:	01ca02b3 	strheq	r0, [sl, #35]	; 0x23
 800d882:	02b301b0 	adcseq	r0, r3, #176, 2	; 0x2c
 800d886:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d88a:	01b001a9 	lsrseq	r0, r9, #3
 800d88e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d892:	02b30197 	adcseq	r0, r3, #-1073741787	; 0xc0000025
 800d896:	01310185 	teqeq	r1, r5, lsl #3
 800d89a:	017e0142 	cmneq	lr, r2, asr #2
 800d89e:	015902b3 	ldrheq	r0, [r9, #-35]	; 0xffffffdd
 800d8a2:	006802b3 	strhteq	r0, [r8], #-35	; 0xffffffdd
 800d8a6:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800d8aa:	9c0b0289 	sfmls	f0, 4, [fp], {137}	; 0x89
 800d8ae:	1d23      	adds	r3, r4, #4
 800d8b0:	6820      	ldr	r0, [r4, #0]
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f280 8400 	bge.w	800e0b8 <_svfiprintf_r+0x984>
 800d8b8:	4240      	negs	r0, r0
 800d8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8bc:	9d02      	ldr	r5, [sp, #8]
 800d8be:	f045 0504 	orr.w	r5, r5, #4
 800d8c2:	9502      	str	r5, [sp, #8]
 800d8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c8:	e78e      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800d8ca:	9d02      	ldr	r5, [sp, #8]
 800d8cc:	9004      	str	r0, [sp, #16]
 800d8ce:	06aa      	lsls	r2, r5, #26
 800d8d0:	f140 81c8 	bpl.w	800dc64 <_svfiprintf_r+0x530>
 800d8d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	1de2      	adds	r2, r4, #7
 800d8da:	f022 0207 	bic.w	r2, r2, #7
 800d8de:	f102 0508 	add.w	r5, r2, #8
 800d8e2:	950b      	str	r5, [sp, #44]	; 0x2c
 800d8e4:	e9d2 4500 	ldrd	r4, r5, [r2]
 800d8e8:	f04f 0c00 	mov.w	ip, #0
 800d8ec:	f88d c04f 	strb.w	ip, [sp, #79]	; 0x4f
 800d8f0:	9a03      	ldr	r2, [sp, #12]
 800d8f2:	2a00      	cmp	r2, #0
 800d8f4:	bfa2      	ittt	ge
 800d8f6:	9802      	ldrge	r0, [sp, #8]
 800d8f8:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 800d8fc:	9002      	strge	r0, [sp, #8]
 800d8fe:	ea54 0105 	orrs.w	r1, r4, r5
 800d902:	9803      	ldr	r0, [sp, #12]
 800d904:	bf0c      	ite	eq
 800d906:	2200      	moveq	r2, #0
 800d908:	2201      	movne	r2, #1
 800d90a:	2800      	cmp	r0, #0
 800d90c:	bf18      	it	ne
 800d90e:	f042 0201 	orrne.w	r2, r2, #1
 800d912:	2a00      	cmp	r2, #0
 800d914:	f000 8306 	beq.w	800df24 <_svfiprintf_r+0x7f0>
 800d918:	2b01      	cmp	r3, #1
 800d91a:	f000 83ab 	beq.w	800e074 <_svfiprintf_r+0x940>
 800d91e:	2b02      	cmp	r3, #2
 800d920:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800d924:	d179      	bne.n	800da1a <_svfiprintf_r+0x2e6>
 800d926:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800d92a:	f004 010f 	and.w	r1, r4, #15
 800d92e:	0923      	lsrs	r3, r4, #4
 800d930:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800d934:	0928      	lsrs	r0, r5, #4
 800d936:	f81b 1001 	ldrb.w	r1, [fp, r1]
 800d93a:	461c      	mov	r4, r3
 800d93c:	4605      	mov	r5, r0
 800d93e:	4691      	mov	r9, r2
 800d940:	ea54 0005 	orrs.w	r0, r4, r5
 800d944:	f102 32ff 	add.w	r2, r2, #4294967295
 800d948:	f889 1000 	strb.w	r1, [r9]
 800d94c:	d1ed      	bne.n	800d92a <_svfiprintf_r+0x1f6>
 800d94e:	ebc9 0308 	rsb	r3, r9, r8
 800d952:	9306      	str	r3, [sp, #24]
 800d954:	9c06      	ldr	r4, [sp, #24]
 800d956:	9d03      	ldr	r5, [sp, #12]
 800d958:	42ac      	cmp	r4, r5
 800d95a:	bfb8      	it	lt
 800d95c:	462c      	movlt	r4, r5
 800d95e:	f1bc 0f00 	cmp.w	ip, #0
 800d962:	d000      	beq.n	800d966 <_svfiprintf_r+0x232>
 800d964:	3401      	adds	r4, #1
 800d966:	9b02      	ldr	r3, [sp, #8]
 800d968:	9d02      	ldr	r5, [sp, #8]
 800d96a:	f013 0302 	ands.w	r3, r3, #2
 800d96e:	9309      	str	r3, [sp, #36]	; 0x24
 800d970:	bf18      	it	ne
 800d972:	3402      	addne	r4, #2
 800d974:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 800d978:	950c      	str	r5, [sp, #48]	; 0x30
 800d97a:	f040 8201 	bne.w	800dd80 <_svfiprintf_r+0x64c>
 800d97e:	9804      	ldr	r0, [sp, #16]
 800d980:	1b05      	subs	r5, r0, r4
 800d982:	2d00      	cmp	r5, #0
 800d984:	f340 81fc 	ble.w	800dd80 <_svfiprintf_r+0x64c>
 800d988:	2d10      	cmp	r5, #16
 800d98a:	f640 5310 	movw	r3, #3344	; 0xd10
 800d98e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d990:	f340 840d 	ble.w	800e1ae <_svfiprintf_r+0xa7a>
 800d994:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d998:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800d99c:	9410      	str	r4, [sp, #64]	; 0x40
 800d99e:	f04f 0b10 	mov.w	fp, #16
 800d9a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d9a4:	9307      	str	r3, [sp, #28]
 800d9a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d9ac:	e002      	b.n	800d9b4 <_svfiprintf_r+0x280>
 800d9ae:	3d10      	subs	r5, #16
 800d9b0:	2d10      	cmp	r5, #16
 800d9b2:	dd17      	ble.n	800d9e4 <_svfiprintf_r+0x2b0>
 800d9b4:	3201      	adds	r2, #1
 800d9b6:	3110      	adds	r1, #16
 800d9b8:	2a07      	cmp	r2, #7
 800d9ba:	e886 0810 	stmia.w	r6, {r4, fp}
 800d9be:	9216      	str	r2, [sp, #88]	; 0x58
 800d9c0:	f106 0608 	add.w	r6, r6, #8
 800d9c4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d9c6:	ddf2      	ble.n	800d9ae <_svfiprintf_r+0x27a>
 800d9c8:	9805      	ldr	r0, [sp, #20]
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	aa15      	add	r2, sp, #84	; 0x54
 800d9ce:	4646      	mov	r6, r8
 800d9d0:	f7ff fe2e 	bl	800d630 <__ssprint_r>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	f040 82bd 	bne.w	800df54 <_svfiprintf_r+0x820>
 800d9da:	3d10      	subs	r5, #16
 800d9dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d9de:	2d10      	cmp	r5, #16
 800d9e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d9e2:	dce7      	bgt.n	800d9b4 <_svfiprintf_r+0x280>
 800d9e4:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800d9e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d9ea:	3201      	adds	r2, #1
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	2a07      	cmp	r2, #7
 800d9f0:	4429      	add	r1, r5
 800d9f2:	9216      	str	r2, [sp, #88]	; 0x58
 800d9f4:	e886 0028 	stmia.w	r6, {r3, r5}
 800d9f8:	bfd8      	it	le
 800d9fa:	3608      	addle	r6, #8
 800d9fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d9fe:	f340 81c1 	ble.w	800dd84 <_svfiprintf_r+0x650>
 800da02:	9805      	ldr	r0, [sp, #20]
 800da04:	aa15      	add	r2, sp, #84	; 0x54
 800da06:	9908      	ldr	r1, [sp, #32]
 800da08:	f7ff fe12 	bl	800d630 <__ssprint_r>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f040 82a1 	bne.w	800df54 <_svfiprintf_r+0x820>
 800da12:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800da14:	4646      	mov	r6, r8
 800da16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800da18:	e1b4      	b.n	800dd84 <_svfiprintf_r+0x650>
 800da1a:	08e3      	lsrs	r3, r4, #3
 800da1c:	08e9      	lsrs	r1, r5, #3
 800da1e:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 800da22:	4691      	mov	r9, r2
 800da24:	460d      	mov	r5, r1
 800da26:	f004 0207 	and.w	r2, r4, #7
 800da2a:	461c      	mov	r4, r3
 800da2c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800da30:	ea54 0105 	orrs.w	r1, r4, r5
 800da34:	f109 32ff 	add.w	r2, r9, #4294967295
 800da38:	f889 3000 	strb.w	r3, [r9]
 800da3c:	d1ed      	bne.n	800da1a <_svfiprintf_r+0x2e6>
 800da3e:	9c02      	ldr	r4, [sp, #8]
 800da40:	4649      	mov	r1, r9
 800da42:	07e0      	lsls	r0, r4, #31
 800da44:	f140 8347 	bpl.w	800e0d6 <_svfiprintf_r+0x9a2>
 800da48:	2b30      	cmp	r3, #48	; 0x30
 800da4a:	d080      	beq.n	800d94e <_svfiprintf_r+0x21a>
 800da4c:	2330      	movs	r3, #48	; 0x30
 800da4e:	ebc2 0408 	rsb	r4, r2, r8
 800da52:	4691      	mov	r9, r2
 800da54:	9406      	str	r4, [sp, #24]
 800da56:	f801 3c01 	strb.w	r3, [r1, #-1]
 800da5a:	e77b      	b.n	800d954 <_svfiprintf_r+0x220>
 800da5c:	9d02      	ldr	r5, [sp, #8]
 800da5e:	9004      	str	r0, [sp, #16]
 800da60:	f015 0320 	ands.w	r3, r5, #32
 800da64:	f000 813c 	beq.w	800dce0 <_svfiprintf_r+0x5ac>
 800da68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800da6a:	2300      	movs	r3, #0
 800da6c:	1de2      	adds	r2, r4, #7
 800da6e:	f022 0207 	bic.w	r2, r2, #7
 800da72:	f102 0508 	add.w	r5, r2, #8
 800da76:	950b      	str	r5, [sp, #44]	; 0x2c
 800da78:	e9d2 4500 	ldrd	r4, r5, [r2]
 800da7c:	e734      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800da7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da80:	9d02      	ldr	r5, [sp, #8]
 800da82:	9004      	str	r0, [sp, #16]
 800da84:	f045 0502 	orr.w	r5, r5, #2
 800da88:	9502      	str	r5, [sp, #8]
 800da8a:	1d1d      	adds	r5, r3, #4
 800da8c:	950b      	str	r5, [sp, #44]	; 0x2c
 800da8e:	f241 053c 	movw	r5, #4156	; 0x103c
 800da92:	681c      	ldr	r4, [r3, #0]
 800da94:	f6c0 0501 	movt	r5, #2049	; 0x801
 800da98:	2330      	movs	r3, #48	; 0x30
 800da9a:	950e      	str	r5, [sp, #56]	; 0x38
 800da9c:	2500      	movs	r5, #0
 800da9e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800daa2:	2378      	movs	r3, #120	; 0x78
 800daa4:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 800daa8:	2302      	movs	r3, #2
 800daaa:	e71d      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800daac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800daae:	9004      	str	r0, [sp, #16]
 800dab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dab2:	f8d4 9000 	ldr.w	r9, [r4]
 800dab6:	2400      	movs	r4, #0
 800dab8:	1d05      	adds	r5, r0, #4
 800daba:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
 800dabe:	f1b9 0f00 	cmp.w	r9, #0
 800dac2:	f000 8379 	beq.w	800e1b8 <_svfiprintf_r+0xa84>
 800dac6:	9803      	ldr	r0, [sp, #12]
 800dac8:	2800      	cmp	r0, #0
 800daca:	4648      	mov	r0, r9
 800dacc:	f2c0 834b 	blt.w	800e166 <_svfiprintf_r+0xa32>
 800dad0:	4621      	mov	r1, r4
 800dad2:	9a03      	ldr	r2, [sp, #12]
 800dad4:	f7fe feb4 	bl	800c840 <memchr>
 800dad8:	2800      	cmp	r0, #0
 800dada:	f000 837a 	beq.w	800e1d2 <_svfiprintf_r+0xa9e>
 800dade:	950b      	str	r5, [sp, #44]	; 0x2c
 800dae0:	ebc9 0000 	rsb	r0, r9, r0
 800dae4:	9d03      	ldr	r5, [sp, #12]
 800dae6:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800daea:	42a8      	cmp	r0, r5
 800daec:	bfb8      	it	lt
 800daee:	4605      	movlt	r5, r0
 800daf0:	9403      	str	r4, [sp, #12]
 800daf2:	9506      	str	r5, [sp, #24]
 800daf4:	e72e      	b.n	800d954 <_svfiprintf_r+0x220>
 800daf6:	9c02      	ldr	r4, [sp, #8]
 800daf8:	f044 0420 	orr.w	r4, r4, #32
 800dafc:	9402      	str	r4, [sp, #8]
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	e671      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800db04:	9c02      	ldr	r4, [sp, #8]
 800db06:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800db0a:	06a0      	lsls	r0, r4, #26
 800db0c:	f100 831e 	bmi.w	800e14c <_svfiprintf_r+0xa18>
 800db10:	9c02      	ldr	r4, [sp, #8]
 800db12:	06e1      	lsls	r1, r4, #27
 800db14:	f140 8330 	bpl.w	800e178 <_svfiprintf_r+0xa44>
 800db18:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800db1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db1c:	3504      	adds	r5, #4
 800db1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800db22:	950b      	str	r5, [sp, #44]	; 0x2c
 800db24:	601c      	str	r4, [r3, #0]
 800db26:	e62a      	b.n	800d77e <_svfiprintf_r+0x4a>
 800db28:	f89a 3000 	ldrb.w	r3, [sl]
 800db2c:	4652      	mov	r2, sl
 800db2e:	2b6c      	cmp	r3, #108	; 0x6c
 800db30:	bf05      	ittet	eq
 800db32:	f10a 0a01 	addeq.w	sl, sl, #1
 800db36:	9c02      	ldreq	r4, [sp, #8]
 800db38:	9d02      	ldrne	r5, [sp, #8]
 800db3a:	f044 0420 	orreq.w	r4, r4, #32
 800db3e:	bf0b      	itete	eq
 800db40:	7853      	ldrbeq	r3, [r2, #1]
 800db42:	f045 0510 	orrne.w	r5, r5, #16
 800db46:	9402      	streq	r4, [sp, #8]
 800db48:	9502      	strne	r5, [sp, #8]
 800db4a:	e64d      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800db4c:	9d02      	ldr	r5, [sp, #8]
 800db4e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800db52:	9502      	str	r5, [sp, #8]
 800db54:	f89a 3000 	ldrb.w	r3, [sl]
 800db58:	e646      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800db5a:	9d02      	ldr	r5, [sp, #8]
 800db5c:	9004      	str	r0, [sp, #16]
 800db5e:	06ab      	lsls	r3, r5, #26
 800db60:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800db64:	d52f      	bpl.n	800dbc6 <_svfiprintf_r+0x492>
 800db66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800db68:	1de3      	adds	r3, r4, #7
 800db6a:	f023 0307 	bic.w	r3, r3, #7
 800db6e:	f103 0508 	add.w	r5, r3, #8
 800db72:	950b      	str	r5, [sp, #44]	; 0x2c
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	4614      	mov	r4, r2
 800db7a:	461d      	mov	r5, r3
 800db7c:	2a00      	cmp	r2, #0
 800db7e:	f173 0000 	sbcs.w	r0, r3, #0
 800db82:	f2c0 82c8 	blt.w	800e116 <_svfiprintf_r+0x9e2>
 800db86:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800db8a:	2301      	movs	r3, #1
 800db8c:	e6b0      	b.n	800d8f0 <_svfiprintf_r+0x1bc>
 800db8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db90:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800db94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800db96:	2401      	movs	r4, #1
 800db98:	2200      	movs	r2, #0
 800db9a:	9004      	str	r0, [sp, #16]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3504      	adds	r5, #4
 800dba0:	9406      	str	r4, [sp, #24]
 800dba2:	950b      	str	r5, [sp, #44]	; 0x2c
 800dba4:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 800dba8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800dbac:	2500      	movs	r5, #0
 800dbae:	9503      	str	r5, [sp, #12]
 800dbb0:	e6d9      	b.n	800d966 <_svfiprintf_r+0x232>
 800dbb2:	9c02      	ldr	r4, [sp, #8]
 800dbb4:	9004      	str	r0, [sp, #16]
 800dbb6:	f044 0410 	orr.w	r4, r4, #16
 800dbba:	9402      	str	r4, [sp, #8]
 800dbbc:	9d02      	ldr	r5, [sp, #8]
 800dbbe:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800dbc2:	06ab      	lsls	r3, r5, #26
 800dbc4:	d4cf      	bmi.n	800db66 <_svfiprintf_r+0x432>
 800dbc6:	9c02      	ldr	r4, [sp, #8]
 800dbc8:	06e5      	lsls	r5, r4, #27
 800dbca:	f100 8297 	bmi.w	800e0fc <_svfiprintf_r+0x9c8>
 800dbce:	9c02      	ldr	r4, [sp, #8]
 800dbd0:	0664      	lsls	r4, r4, #25
 800dbd2:	f140 8293 	bpl.w	800e0fc <_svfiprintf_r+0x9c8>
 800dbd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dbd8:	3004      	adds	r0, #4
 800dbda:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800dbde:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbe0:	4622      	mov	r2, r4
 800dbe2:	17e5      	asrs	r5, r4, #31
 800dbe4:	462b      	mov	r3, r5
 800dbe6:	e7c9      	b.n	800db7c <_svfiprintf_r+0x448>
 800dbe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dbec:	2000      	movs	r0, #0
 800dbee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dbf2:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800dbf6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800dbfa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dbfe:	2a09      	cmp	r2, #9
 800dc00:	d9f5      	bls.n	800dbee <_svfiprintf_r+0x4ba>
 800dc02:	e5f3      	b.n	800d7ec <_svfiprintf_r+0xb8>
 800dc04:	9c02      	ldr	r4, [sp, #8]
 800dc06:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800dc0a:	9402      	str	r4, [sp, #8]
 800dc0c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc10:	e5ea      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	f10a 0501 	add.w	r5, sl, #1
 800dc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc1c:	f000 82e1 	beq.w	800e1e2 <_svfiprintf_r+0xaae>
 800dc20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dc24:	2a09      	cmp	r2, #9
 800dc26:	bf82      	ittt	hi
 800dc28:	2400      	movhi	r4, #0
 800dc2a:	46aa      	movhi	sl, r5
 800dc2c:	9403      	strhi	r4, [sp, #12]
 800dc2e:	f63f addd 	bhi.w	800d7ec <_svfiprintf_r+0xb8>
 800dc32:	2400      	movs	r4, #0
 800dc34:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800dc38:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800dc40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dc44:	2a09      	cmp	r2, #9
 800dc46:	d9f5      	bls.n	800dc34 <_svfiprintf_r+0x500>
 800dc48:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800dc4c:	46aa      	mov	sl, r5
 800dc4e:	9403      	str	r4, [sp, #12]
 800dc50:	e5cc      	b.n	800d7ec <_svfiprintf_r+0xb8>
 800dc52:	9c02      	ldr	r4, [sp, #8]
 800dc54:	9004      	str	r0, [sp, #16]
 800dc56:	f044 0410 	orr.w	r4, r4, #16
 800dc5a:	9402      	str	r4, [sp, #8]
 800dc5c:	9d02      	ldr	r5, [sp, #8]
 800dc5e:	06aa      	lsls	r2, r5, #26
 800dc60:	f53f ae38 	bmi.w	800d8d4 <_svfiprintf_r+0x1a0>
 800dc64:	9c02      	ldr	r4, [sp, #8]
 800dc66:	06e3      	lsls	r3, r4, #27
 800dc68:	f100 8267 	bmi.w	800e13a <_svfiprintf_r+0xa06>
 800dc6c:	9c02      	ldr	r4, [sp, #8]
 800dc6e:	0665      	lsls	r5, r4, #25
 800dc70:	f140 8263 	bpl.w	800e13a <_svfiprintf_r+0xa06>
 800dc74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dc76:	2500      	movs	r5, #0
 800dc78:	2301      	movs	r3, #1
 800dc7a:	3004      	adds	r0, #4
 800dc7c:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800dc80:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc82:	e631      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800dc84:	9d02      	ldr	r5, [sp, #8]
 800dc86:	f241 0428 	movw	r4, #4136	; 0x1028
 800dc8a:	f6c0 0401 	movt	r4, #2049	; 0x801
 800dc8e:	940e      	str	r4, [sp, #56]	; 0x38
 800dc90:	06ac      	lsls	r4, r5, #26
 800dc92:	9004      	str	r0, [sp, #16]
 800dc94:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800dc98:	d543      	bpl.n	800dd22 <_svfiprintf_r+0x5ee>
 800dc9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dc9c:	1de2      	adds	r2, r4, #7
 800dc9e:	f022 0207 	bic.w	r2, r2, #7
 800dca2:	f102 0508 	add.w	r5, r2, #8
 800dca6:	950b      	str	r5, [sp, #44]	; 0x2c
 800dca8:	e9d2 4500 	ldrd	r4, r5, [r2]
 800dcac:	9802      	ldr	r0, [sp, #8]
 800dcae:	07c2      	lsls	r2, r0, #31
 800dcb0:	d554      	bpl.n	800dd5c <_svfiprintf_r+0x628>
 800dcb2:	ea54 0105 	orrs.w	r1, r4, r5
 800dcb6:	d051      	beq.n	800dd5c <_svfiprintf_r+0x628>
 800dcb8:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 800dcbc:	f040 0002 	orr.w	r0, r0, #2
 800dcc0:	2330      	movs	r3, #48	; 0x30
 800dcc2:	9002      	str	r0, [sp, #8]
 800dcc4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e60d      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800dccc:	9c02      	ldr	r4, [sp, #8]
 800dcce:	9004      	str	r0, [sp, #16]
 800dcd0:	f044 0410 	orr.w	r4, r4, #16
 800dcd4:	9402      	str	r4, [sp, #8]
 800dcd6:	9d02      	ldr	r5, [sp, #8]
 800dcd8:	f015 0320 	ands.w	r3, r5, #32
 800dcdc:	f47f aec4 	bne.w	800da68 <_svfiprintf_r+0x334>
 800dce0:	9c02      	ldr	r4, [sp, #8]
 800dce2:	f014 0210 	ands.w	r2, r4, #16
 800dce6:	f040 8220 	bne.w	800e12a <_svfiprintf_r+0x9f6>
 800dcea:	9c02      	ldr	r4, [sp, #8]
 800dcec:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800dcf0:	f000 821b 	beq.w	800e12a <_svfiprintf_r+0x9f6>
 800dcf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	2500      	movs	r5, #0
 800dcfa:	3004      	adds	r0, #4
 800dcfc:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800dd00:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd02:	e5f1      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800dd04:	f89a 3000 	ldrb.w	r3, [sl]
 800dd08:	212b      	movs	r1, #43	; 0x2b
 800dd0a:	e56d      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800dd0c:	9d02      	ldr	r5, [sp, #8]
 800dd0e:	f241 043c 	movw	r4, #4156	; 0x103c
 800dd12:	f6c0 0401 	movt	r4, #2049	; 0x801
 800dd16:	940e      	str	r4, [sp, #56]	; 0x38
 800dd18:	06ac      	lsls	r4, r5, #26
 800dd1a:	9004      	str	r0, [sp, #16]
 800dd1c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800dd20:	d4bb      	bmi.n	800dc9a <_svfiprintf_r+0x566>
 800dd22:	9c02      	ldr	r4, [sp, #8]
 800dd24:	06e0      	lsls	r0, r4, #27
 800dd26:	f100 81e2 	bmi.w	800e0ee <_svfiprintf_r+0x9ba>
 800dd2a:	9c02      	ldr	r4, [sp, #8]
 800dd2c:	0661      	lsls	r1, r4, #25
 800dd2e:	f140 81de 	bpl.w	800e0ee <_svfiprintf_r+0x9ba>
 800dd32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800dd34:	2500      	movs	r5, #0
 800dd36:	3004      	adds	r0, #4
 800dd38:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800dd3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd3e:	e7b5      	b.n	800dcac <_svfiprintf_r+0x578>
 800dd40:	f89a 3000 	ldrb.w	r3, [sl]
 800dd44:	2900      	cmp	r1, #0
 800dd46:	f47f ad4f 	bne.w	800d7e8 <_svfiprintf_r+0xb4>
 800dd4a:	2120      	movs	r1, #32
 800dd4c:	e54c      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800dd4e:	9d02      	ldr	r5, [sp, #8]
 800dd50:	f045 0501 	orr.w	r5, r5, #1
 800dd54:	9502      	str	r5, [sp, #8]
 800dd56:	f89a 3000 	ldrb.w	r3, [sl]
 800dd5a:	e545      	b.n	800d7e8 <_svfiprintf_r+0xb4>
 800dd5c:	2302      	movs	r3, #2
 800dd5e:	e5c3      	b.n	800d8e8 <_svfiprintf_r+0x1b4>
 800dd60:	9004      	str	r0, [sp, #16]
 800dd62:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 80ed 	beq.w	800df46 <_svfiprintf_r+0x812>
 800dd6c:	2401      	movs	r4, #1
 800dd6e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800dd72:	9406      	str	r4, [sp, #24]
 800dd74:	2300      	movs	r3, #0
 800dd76:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800dd7a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 800dd7e:	e715      	b.n	800dbac <_svfiprintf_r+0x478>
 800dd80:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800dd82:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dd84:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800dd88:	b173      	cbz	r3, 800dda8 <_svfiprintf_r+0x674>
 800dd8a:	3201      	adds	r2, #1
 800dd8c:	3101      	adds	r1, #1
 800dd8e:	2a07      	cmp	r2, #7
 800dd90:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 800dd94:	f04f 0301 	mov.w	r3, #1
 800dd98:	9216      	str	r2, [sp, #88]	; 0x58
 800dd9a:	e886 0009 	stmia.w	r6, {r0, r3}
 800dd9e:	bfd8      	it	le
 800dda0:	3608      	addle	r6, #8
 800dda2:	9117      	str	r1, [sp, #92]	; 0x5c
 800dda4:	f300 8157 	bgt.w	800e056 <_svfiprintf_r+0x922>
 800dda8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ddaa:	b16d      	cbz	r5, 800ddc8 <_svfiprintf_r+0x694>
 800ddac:	3201      	adds	r2, #1
 800ddae:	3102      	adds	r1, #2
 800ddb0:	2a07      	cmp	r2, #7
 800ddb2:	a814      	add	r0, sp, #80	; 0x50
 800ddb4:	f04f 0302 	mov.w	r3, #2
 800ddb8:	9216      	str	r2, [sp, #88]	; 0x58
 800ddba:	e886 0009 	stmia.w	r6, {r0, r3}
 800ddbe:	bfd8      	it	le
 800ddc0:	3608      	addle	r6, #8
 800ddc2:	9117      	str	r1, [sp, #92]	; 0x5c
 800ddc4:	f300 813c 	bgt.w	800e040 <_svfiprintf_r+0x90c>
 800ddc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddca:	2b80      	cmp	r3, #128	; 0x80
 800ddcc:	f000 80cd 	beq.w	800df6a <_svfiprintf_r+0x836>
 800ddd0:	9803      	ldr	r0, [sp, #12]
 800ddd2:	9b06      	ldr	r3, [sp, #24]
 800ddd4:	1ac5      	subs	r5, r0, r3
 800ddd6:	2d00      	cmp	r5, #0
 800ddd8:	dd44      	ble.n	800de64 <_svfiprintf_r+0x730>
 800ddda:	4ba5      	ldr	r3, [pc, #660]	; (800e070 <_svfiprintf_r+0x93c>)
 800dddc:	2d10      	cmp	r5, #16
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	dd2b      	ble.n	800de3a <_svfiprintf_r+0x706>
 800dde2:	f8cd 900c 	str.w	r9, [sp, #12]
 800dde6:	f04f 0b10 	mov.w	fp, #16
 800ddea:	9409      	str	r4, [sp, #36]	; 0x24
 800ddec:	46a9      	mov	r9, r5
 800ddee:	9c05      	ldr	r4, [sp, #20]
 800ddf0:	9d08      	ldr	r5, [sp, #32]
 800ddf2:	e004      	b.n	800ddfe <_svfiprintf_r+0x6ca>
 800ddf4:	f1a9 0910 	sub.w	r9, r9, #16
 800ddf8:	f1b9 0f10 	cmp.w	r9, #16
 800ddfc:	dd19      	ble.n	800de32 <_svfiprintf_r+0x6fe>
 800ddfe:	3201      	adds	r2, #1
 800de00:	3110      	adds	r1, #16
 800de02:	2a07      	cmp	r2, #7
 800de04:	e886 0880 	stmia.w	r6, {r7, fp}
 800de08:	9216      	str	r2, [sp, #88]	; 0x58
 800de0a:	f106 0608 	add.w	r6, r6, #8
 800de0e:	9117      	str	r1, [sp, #92]	; 0x5c
 800de10:	ddf0      	ble.n	800ddf4 <_svfiprintf_r+0x6c0>
 800de12:	4620      	mov	r0, r4
 800de14:	4629      	mov	r1, r5
 800de16:	aa15      	add	r2, sp, #84	; 0x54
 800de18:	4646      	mov	r6, r8
 800de1a:	f7ff fc09 	bl	800d630 <__ssprint_r>
 800de1e:	2800      	cmp	r0, #0
 800de20:	f040 8098 	bne.w	800df54 <_svfiprintf_r+0x820>
 800de24:	f1a9 0910 	sub.w	r9, r9, #16
 800de28:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800de2a:	f1b9 0f10 	cmp.w	r9, #16
 800de2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de30:	dce5      	bgt.n	800ddfe <_svfiprintf_r+0x6ca>
 800de32:	464d      	mov	r5, r9
 800de34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800de36:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800de3a:	3201      	adds	r2, #1
 800de3c:	9b07      	ldr	r3, [sp, #28]
 800de3e:	2a07      	cmp	r2, #7
 800de40:	4429      	add	r1, r5
 800de42:	9216      	str	r2, [sp, #88]	; 0x58
 800de44:	e886 0028 	stmia.w	r6, {r3, r5}
 800de48:	bfd8      	it	le
 800de4a:	3608      	addle	r6, #8
 800de4c:	9117      	str	r1, [sp, #92]	; 0x5c
 800de4e:	dd09      	ble.n	800de64 <_svfiprintf_r+0x730>
 800de50:	9805      	ldr	r0, [sp, #20]
 800de52:	aa15      	add	r2, sp, #84	; 0x54
 800de54:	9908      	ldr	r1, [sp, #32]
 800de56:	f7ff fbeb 	bl	800d630 <__ssprint_r>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d17a      	bne.n	800df54 <_svfiprintf_r+0x820>
 800de5e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800de60:	4646      	mov	r6, r8
 800de62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de64:	3201      	adds	r2, #1
 800de66:	9d06      	ldr	r5, [sp, #24]
 800de68:	2a07      	cmp	r2, #7
 800de6a:	9216      	str	r2, [sp, #88]	; 0x58
 800de6c:	4429      	add	r1, r5
 800de6e:	f8c6 9000 	str.w	r9, [r6]
 800de72:	9117      	str	r1, [sp, #92]	; 0x5c
 800de74:	bfd8      	it	le
 800de76:	f106 0308 	addle.w	r3, r6, #8
 800de7a:	6075      	str	r5, [r6, #4]
 800de7c:	f300 80c0 	bgt.w	800e000 <_svfiprintf_r+0x8cc>
 800de80:	9d02      	ldr	r5, [sp, #8]
 800de82:	076a      	lsls	r2, r5, #29
 800de84:	d538      	bpl.n	800def8 <_svfiprintf_r+0x7c4>
 800de86:	9804      	ldr	r0, [sp, #16]
 800de88:	1b05      	subs	r5, r0, r4
 800de8a:	2d00      	cmp	r5, #0
 800de8c:	dd34      	ble.n	800def8 <_svfiprintf_r+0x7c4>
 800de8e:	2d10      	cmp	r5, #16
 800de90:	f640 5010 	movw	r0, #3344	; 0xd10
 800de94:	f6c0 0001 	movt	r0, #2049	; 0x801
 800de98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de9a:	9007      	str	r0, [sp, #28]
 800de9c:	dd22      	ble.n	800dee4 <_svfiprintf_r+0x7b0>
 800de9e:	9402      	str	r4, [sp, #8]
 800dea0:	2610      	movs	r6, #16
 800dea2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800dea6:	f8dd b020 	ldr.w	fp, [sp, #32]
 800deaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800deac:	e002      	b.n	800deb4 <_svfiprintf_r+0x780>
 800deae:	3d10      	subs	r5, #16
 800deb0:	2d10      	cmp	r5, #16
 800deb2:	dd16      	ble.n	800dee2 <_svfiprintf_r+0x7ae>
 800deb4:	3201      	adds	r2, #1
 800deb6:	3110      	adds	r1, #16
 800deb8:	2a07      	cmp	r2, #7
 800deba:	e883 0050 	stmia.w	r3, {r4, r6}
 800debe:	9216      	str	r2, [sp, #88]	; 0x58
 800dec0:	f103 0308 	add.w	r3, r3, #8
 800dec4:	9117      	str	r1, [sp, #92]	; 0x5c
 800dec6:	ddf2      	ble.n	800deae <_svfiprintf_r+0x77a>
 800dec8:	4648      	mov	r0, r9
 800deca:	4659      	mov	r1, fp
 800decc:	aa15      	add	r2, sp, #84	; 0x54
 800dece:	f7ff fbaf 	bl	800d630 <__ssprint_r>
 800ded2:	4643      	mov	r3, r8
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d13d      	bne.n	800df54 <_svfiprintf_r+0x820>
 800ded8:	3d10      	subs	r5, #16
 800deda:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800dedc:	2d10      	cmp	r5, #16
 800dede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dee0:	dce8      	bgt.n	800deb4 <_svfiprintf_r+0x780>
 800dee2:	9c02      	ldr	r4, [sp, #8]
 800dee4:	3201      	adds	r2, #1
 800dee6:	9807      	ldr	r0, [sp, #28]
 800dee8:	2a07      	cmp	r2, #7
 800deea:	4429      	add	r1, r5
 800deec:	9216      	str	r2, [sp, #88]	; 0x58
 800deee:	9117      	str	r1, [sp, #92]	; 0x5c
 800def0:	e883 0021 	stmia.w	r3, {r0, r5}
 800def4:	f300 80e5 	bgt.w	800e0c2 <_svfiprintf_r+0x98e>
 800def8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800defa:	9804      	ldr	r0, [sp, #16]
 800defc:	4284      	cmp	r4, r0
 800defe:	bfac      	ite	ge
 800df00:	192d      	addge	r5, r5, r4
 800df02:	182d      	addlt	r5, r5, r0
 800df04:	950a      	str	r5, [sp, #40]	; 0x28
 800df06:	2900      	cmp	r1, #0
 800df08:	f040 8084 	bne.w	800e014 <_svfiprintf_r+0x8e0>
 800df0c:	2300      	movs	r3, #0
 800df0e:	9316      	str	r3, [sp, #88]	; 0x58
 800df10:	f89a 3000 	ldrb.w	r3, [sl]
 800df14:	4646      	mov	r6, r8
 800df16:	2b00      	cmp	r3, #0
 800df18:	bf18      	it	ne
 800df1a:	2b25      	cmpne	r3, #37	; 0x25
 800df1c:	f47f ac36 	bne.w	800d78c <_svfiprintf_r+0x58>
 800df20:	4654      	mov	r4, sl
 800df22:	e450      	b.n	800d7c6 <_svfiprintf_r+0x92>
 800df24:	2b00      	cmp	r3, #0
 800df26:	d17e      	bne.n	800e026 <_svfiprintf_r+0x8f2>
 800df28:	9c02      	ldr	r4, [sp, #8]
 800df2a:	07e1      	lsls	r1, r4, #31
 800df2c:	bf5c      	itt	pl
 800df2e:	9306      	strpl	r3, [sp, #24]
 800df30:	46c1      	movpl	r9, r8
 800df32:	f57f ad0f 	bpl.w	800d954 <_svfiprintf_r+0x220>
 800df36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800df38:	2330      	movs	r3, #48	; 0x30
 800df3a:	f10d 0987 	add.w	r9, sp, #135	; 0x87
 800df3e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800df42:	9506      	str	r5, [sp, #24]
 800df44:	e506      	b.n	800d954 <_svfiprintf_r+0x220>
 800df46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df48:	b123      	cbz	r3, 800df54 <_svfiprintf_r+0x820>
 800df4a:	9805      	ldr	r0, [sp, #20]
 800df4c:	aa15      	add	r2, sp, #84	; 0x54
 800df4e:	9908      	ldr	r1, [sp, #32]
 800df50:	f7ff fb6e 	bl	800d630 <__ssprint_r>
 800df54:	9c08      	ldr	r4, [sp, #32]
 800df56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800df5e:	bf18      	it	ne
 800df60:	f04f 30ff 	movne.w	r0, #4294967295
 800df64:	b033      	add	sp, #204	; 0xcc
 800df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6a:	9804      	ldr	r0, [sp, #16]
 800df6c:	1b05      	subs	r5, r0, r4
 800df6e:	2d00      	cmp	r5, #0
 800df70:	f77f af2e 	ble.w	800ddd0 <_svfiprintf_r+0x69c>
 800df74:	4b3e      	ldr	r3, [pc, #248]	; (800e070 <_svfiprintf_r+0x93c>)
 800df76:	2d10      	cmp	r5, #16
 800df78:	9307      	str	r3, [sp, #28]
 800df7a:	dd2a      	ble.n	800dfd2 <_svfiprintf_r+0x89e>
 800df7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800df80:	f04f 0b10 	mov.w	fp, #16
 800df84:	940c      	str	r4, [sp, #48]	; 0x30
 800df86:	46a9      	mov	r9, r5
 800df88:	9c05      	ldr	r4, [sp, #20]
 800df8a:	9d08      	ldr	r5, [sp, #32]
 800df8c:	e004      	b.n	800df98 <_svfiprintf_r+0x864>
 800df8e:	f1a9 0910 	sub.w	r9, r9, #16
 800df92:	f1b9 0f10 	cmp.w	r9, #16
 800df96:	dd18      	ble.n	800dfca <_svfiprintf_r+0x896>
 800df98:	3201      	adds	r2, #1
 800df9a:	3110      	adds	r1, #16
 800df9c:	2a07      	cmp	r2, #7
 800df9e:	e886 0880 	stmia.w	r6, {r7, fp}
 800dfa2:	9216      	str	r2, [sp, #88]	; 0x58
 800dfa4:	f106 0608 	add.w	r6, r6, #8
 800dfa8:	9117      	str	r1, [sp, #92]	; 0x5c
 800dfaa:	ddf0      	ble.n	800df8e <_svfiprintf_r+0x85a>
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	aa15      	add	r2, sp, #84	; 0x54
 800dfb2:	4646      	mov	r6, r8
 800dfb4:	f7ff fb3c 	bl	800d630 <__ssprint_r>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1cb      	bne.n	800df54 <_svfiprintf_r+0x820>
 800dfbc:	f1a9 0910 	sub.w	r9, r9, #16
 800dfc0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800dfc2:	f1b9 0f10 	cmp.w	r9, #16
 800dfc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dfc8:	dce6      	bgt.n	800df98 <_svfiprintf_r+0x864>
 800dfca:	464d      	mov	r5, r9
 800dfcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dfce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dfd2:	3201      	adds	r2, #1
 800dfd4:	9b07      	ldr	r3, [sp, #28]
 800dfd6:	2a07      	cmp	r2, #7
 800dfd8:	4429      	add	r1, r5
 800dfda:	9216      	str	r2, [sp, #88]	; 0x58
 800dfdc:	e886 0028 	stmia.w	r6, {r3, r5}
 800dfe0:	bfd8      	it	le
 800dfe2:	3608      	addle	r6, #8
 800dfe4:	9117      	str	r1, [sp, #92]	; 0x5c
 800dfe6:	f77f aef3 	ble.w	800ddd0 <_svfiprintf_r+0x69c>
 800dfea:	9805      	ldr	r0, [sp, #20]
 800dfec:	aa15      	add	r2, sp, #84	; 0x54
 800dfee:	9908      	ldr	r1, [sp, #32]
 800dff0:	f7ff fb1e 	bl	800d630 <__ssprint_r>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d1ad      	bne.n	800df54 <_svfiprintf_r+0x820>
 800dff8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800dffa:	4646      	mov	r6, r8
 800dffc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dffe:	e6e7      	b.n	800ddd0 <_svfiprintf_r+0x69c>
 800e000:	9805      	ldr	r0, [sp, #20]
 800e002:	aa15      	add	r2, sp, #84	; 0x54
 800e004:	9908      	ldr	r1, [sp, #32]
 800e006:	f7ff fb13 	bl	800d630 <__ssprint_r>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d1a2      	bne.n	800df54 <_svfiprintf_r+0x820>
 800e00e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e010:	4643      	mov	r3, r8
 800e012:	e735      	b.n	800de80 <_svfiprintf_r+0x74c>
 800e014:	9805      	ldr	r0, [sp, #20]
 800e016:	aa15      	add	r2, sp, #84	; 0x54
 800e018:	9908      	ldr	r1, [sp, #32]
 800e01a:	f7ff fb09 	bl	800d630 <__ssprint_r>
 800e01e:	2800      	cmp	r0, #0
 800e020:	f43f af74 	beq.w	800df0c <_svfiprintf_r+0x7d8>
 800e024:	e796      	b.n	800df54 <_svfiprintf_r+0x820>
 800e026:	9206      	str	r2, [sp, #24]
 800e028:	46c1      	mov	r9, r8
 800e02a:	e493      	b.n	800d954 <_svfiprintf_r+0x220>
 800e02c:	9805      	ldr	r0, [sp, #20]
 800e02e:	aa15      	add	r2, sp, #84	; 0x54
 800e030:	9908      	ldr	r1, [sp, #32]
 800e032:	f7ff fafd 	bl	800d630 <__ssprint_r>
 800e036:	2800      	cmp	r0, #0
 800e038:	d18c      	bne.n	800df54 <_svfiprintf_r+0x820>
 800e03a:	4646      	mov	r6, r8
 800e03c:	f7ff bbc0 	b.w	800d7c0 <_svfiprintf_r+0x8c>
 800e040:	9805      	ldr	r0, [sp, #20]
 800e042:	aa15      	add	r2, sp, #84	; 0x54
 800e044:	9908      	ldr	r1, [sp, #32]
 800e046:	f7ff faf3 	bl	800d630 <__ssprint_r>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d182      	bne.n	800df54 <_svfiprintf_r+0x820>
 800e04e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e050:	4646      	mov	r6, r8
 800e052:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e054:	e6b8      	b.n	800ddc8 <_svfiprintf_r+0x694>
 800e056:	9805      	ldr	r0, [sp, #20]
 800e058:	aa15      	add	r2, sp, #84	; 0x54
 800e05a:	9908      	ldr	r1, [sp, #32]
 800e05c:	f7ff fae8 	bl	800d630 <__ssprint_r>
 800e060:	2800      	cmp	r0, #0
 800e062:	f47f af77 	bne.w	800df54 <_svfiprintf_r+0x820>
 800e066:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e068:	4646      	mov	r6, r8
 800e06a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e06c:	e69c      	b.n	800dda8 <_svfiprintf_r+0x674>
 800e06e:	bf00      	nop
 800e070:	08010d20 	stmdaeq	r1, {r5, r8, sl, fp}
 800e074:	2d00      	cmp	r5, #0
 800e076:	bf08      	it	eq
 800e078:	2c0a      	cmpeq	r4, #10
 800e07a:	d330      	bcc.n	800e0de <_svfiprintf_r+0x9aa>
 800e07c:	f10d 0b87 	add.w	fp, sp, #135	; 0x87
 800e080:	46e1      	mov	r9, ip
 800e082:	9606      	str	r6, [sp, #24]
 800e084:	4620      	mov	r0, r4
 800e086:	4629      	mov	r1, r5
 800e088:	220a      	movs	r2, #10
 800e08a:	2300      	movs	r3, #0
 800e08c:	f001 f978 	bl	800f380 <__aeabi_uldivmod>
 800e090:	465e      	mov	r6, fp
 800e092:	4620      	mov	r0, r4
 800e094:	4629      	mov	r1, r5
 800e096:	2300      	movs	r3, #0
 800e098:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e09c:	3230      	adds	r2, #48	; 0x30
 800e09e:	7032      	strb	r2, [r6, #0]
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	f001 f96d 	bl	800f380 <__aeabi_uldivmod>
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	ea54 0005 	orrs.w	r0, r4, r5
 800e0ae:	d1e9      	bne.n	800e084 <_svfiprintf_r+0x950>
 800e0b0:	46cc      	mov	ip, r9
 800e0b2:	46b1      	mov	r9, r6
 800e0b4:	9e06      	ldr	r6, [sp, #24]
 800e0b6:	e44a      	b.n	800d94e <_svfiprintf_r+0x21a>
 800e0b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e0be:	f7ff bb93 	b.w	800d7e8 <_svfiprintf_r+0xb4>
 800e0c2:	9805      	ldr	r0, [sp, #20]
 800e0c4:	aa15      	add	r2, sp, #84	; 0x54
 800e0c6:	9908      	ldr	r1, [sp, #32]
 800e0c8:	f7ff fab2 	bl	800d630 <__ssprint_r>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	f47f af41 	bne.w	800df54 <_svfiprintf_r+0x820>
 800e0d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e0d4:	e710      	b.n	800def8 <_svfiprintf_r+0x7c4>
 800e0d6:	ebc9 0508 	rsb	r5, r9, r8
 800e0da:	9506      	str	r5, [sp, #24]
 800e0dc:	e43a      	b.n	800d954 <_svfiprintf_r+0x220>
 800e0de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800e0e0:	3430      	adds	r4, #48	; 0x30
 800e0e2:	f10d 0987 	add.w	r9, sp, #135	; 0x87
 800e0e6:	f88d 4087 	strb.w	r4, [sp, #135]	; 0x87
 800e0ea:	9506      	str	r5, [sp, #24]
 800e0ec:	e432      	b.n	800d954 <_svfiprintf_r+0x220>
 800e0ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e0f0:	3504      	adds	r5, #4
 800e0f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0f6:	950b      	str	r5, [sp, #44]	; 0x2c
 800e0f8:	2500      	movs	r5, #0
 800e0fa:	e5d7      	b.n	800dcac <_svfiprintf_r+0x578>
 800e0fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e0fe:	3504      	adds	r5, #4
 800e100:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e104:	950b      	str	r5, [sp, #44]	; 0x2c
 800e106:	4622      	mov	r2, r4
 800e108:	17e5      	asrs	r5, r4, #31
 800e10a:	462b      	mov	r3, r5
 800e10c:	2a00      	cmp	r2, #0
 800e10e:	f173 0000 	sbcs.w	r0, r3, #0
 800e112:	f6bf ad38 	bge.w	800db86 <_svfiprintf_r+0x452>
 800e116:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800e11a:	4264      	negs	r4, r4
 800e11c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800e120:	f88d c04f 	strb.w	ip, [sp, #79]	; 0x4f
 800e124:	2301      	movs	r3, #1
 800e126:	f7ff bbe3 	b.w	800d8f0 <_svfiprintf_r+0x1bc>
 800e12a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e12c:	3504      	adds	r5, #4
 800e12e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e132:	950b      	str	r5, [sp, #44]	; 0x2c
 800e134:	2500      	movs	r5, #0
 800e136:	f7ff bbd7 	b.w	800d8e8 <_svfiprintf_r+0x1b4>
 800e13a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e13c:	2301      	movs	r3, #1
 800e13e:	3504      	adds	r5, #4
 800e140:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e144:	950b      	str	r5, [sp, #44]	; 0x2c
 800e146:	2500      	movs	r5, #0
 800e148:	f7ff bbce 	b.w	800d8e8 <_svfiprintf_r+0x1b4>
 800e14c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e14e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e150:	6829      	ldr	r1, [r5, #0]
 800e152:	4622      	mov	r2, r4
 800e154:	17e5      	asrs	r5, r4, #31
 800e156:	462b      	mov	r3, r5
 800e158:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e15a:	e9c1 2300 	strd	r2, r3, [r1]
 800e15e:	3504      	adds	r5, #4
 800e160:	950b      	str	r5, [sp, #44]	; 0x2c
 800e162:	f7ff bb0c 	b.w	800d77e <_svfiprintf_r+0x4a>
 800e166:	950b      	str	r5, [sp, #44]	; 0x2c
 800e168:	9403      	str	r4, [sp, #12]
 800e16a:	f7fb fb51 	bl	8009810 <strlen>
 800e16e:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800e172:	9006      	str	r0, [sp, #24]
 800e174:	f7ff bbee 	b.w	800d954 <_svfiprintf_r+0x220>
 800e178:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e17a:	9d02      	ldr	r5, [sp, #8]
 800e17c:	3404      	adds	r4, #4
 800e17e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e182:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e186:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e188:	940b      	str	r4, [sp, #44]	; 0x2c
 800e18a:	bf14      	ite	ne
 800e18c:	801d      	strhne	r5, [r3, #0]
 800e18e:	601d      	streq	r5, [r3, #0]
 800e190:	f7ff baf5 	b.w	800d77e <_svfiprintf_r+0x4a>
 800e194:	2140      	movs	r1, #64	; 0x40
 800e196:	f7fb fc4f 	bl	8009a38 <_malloc_r>
 800e19a:	9c08      	ldr	r4, [sp, #32]
 800e19c:	6020      	str	r0, [r4, #0]
 800e19e:	6120      	str	r0, [r4, #16]
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d02f      	beq.n	800e204 <_svfiprintf_r+0xad0>
 800e1a4:	9c08      	ldr	r4, [sp, #32]
 800e1a6:	2340      	movs	r3, #64	; 0x40
 800e1a8:	6163      	str	r3, [r4, #20]
 800e1aa:	f7ff bad1 	b.w	800d750 <_svfiprintf_r+0x1c>
 800e1ae:	f6c0 0301 	movt	r3, #2049	; 0x801
 800e1b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1b4:	9307      	str	r3, [sp, #28]
 800e1b6:	e418      	b.n	800d9ea <_svfiprintf_r+0x2b6>
 800e1b8:	9c03      	ldr	r4, [sp, #12]
 800e1ba:	f241 0950 	movw	r9, #4176	; 0x1050
 800e1be:	950b      	str	r5, [sp, #44]	; 0x2c
 800e1c0:	f6c0 0901 	movt	r9, #2049	; 0x801
 800e1c4:	2c06      	cmp	r4, #6
 800e1c6:	bf28      	it	cs
 800e1c8:	2406      	movcs	r4, #6
 800e1ca:	9406      	str	r4, [sp, #24]
 800e1cc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e1d0:	e4ec      	b.n	800dbac <_svfiprintf_r+0x478>
 800e1d2:	9c03      	ldr	r4, [sp, #12]
 800e1d4:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800e1d8:	950b      	str	r5, [sp, #44]	; 0x2c
 800e1da:	9406      	str	r4, [sp, #24]
 800e1dc:	9003      	str	r0, [sp, #12]
 800e1de:	f7ff bbb9 	b.w	800d954 <_svfiprintf_r+0x220>
 800e1e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e1e4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800e1e8:	46aa      	mov	sl, r5
 800e1ea:	6824      	ldr	r4, [r4, #0]
 800e1ec:	9403      	str	r4, [sp, #12]
 800e1ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e1f0:	1d22      	adds	r2, r4, #4
 800e1f2:	9c03      	ldr	r4, [sp, #12]
 800e1f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	bfbc      	itt	lt
 800e1fa:	f04f 35ff 	movlt.w	r5, #4294967295
 800e1fe:	9503      	strlt	r5, [sp, #12]
 800e200:	f7ff baf2 	b.w	800d7e8 <_svfiprintf_r+0xb4>
 800e204:	9d05      	ldr	r5, [sp, #20]
 800e206:	230c      	movs	r3, #12
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	602b      	str	r3, [r5, #0]
 800e20e:	e6a9      	b.n	800df64 <_svfiprintf_r+0x830>

0800e210 <_calloc_r>:
 800e210:	b510      	push	{r4, lr}
 800e212:	fb02 f101 	mul.w	r1, r2, r1
 800e216:	f7fb fc0f 	bl	8009a38 <_malloc_r>
 800e21a:	4604      	mov	r4, r0
 800e21c:	b170      	cbz	r0, 800e23c <_calloc_r+0x2c>
 800e21e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e222:	f022 0203 	bic.w	r2, r2, #3
 800e226:	3a04      	subs	r2, #4
 800e228:	2a24      	cmp	r2, #36	; 0x24
 800e22a:	d81d      	bhi.n	800e268 <_calloc_r+0x58>
 800e22c:	2a13      	cmp	r2, #19
 800e22e:	bf98      	it	ls
 800e230:	4603      	movls	r3, r0
 800e232:	d805      	bhi.n	800e240 <_calloc_r+0x30>
 800e234:	2200      	movs	r2, #0
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	605a      	str	r2, [r3, #4]
 800e23a:	609a      	str	r2, [r3, #8]
 800e23c:	4620      	mov	r0, r4
 800e23e:	bd10      	pop	{r4, pc}
 800e240:	2a1b      	cmp	r2, #27
 800e242:	f04f 0100 	mov.w	r1, #0
 800e246:	bf98      	it	ls
 800e248:	f100 0308 	addls.w	r3, r0, #8
 800e24c:	6001      	str	r1, [r0, #0]
 800e24e:	6041      	str	r1, [r0, #4]
 800e250:	d9f0      	bls.n	800e234 <_calloc_r+0x24>
 800e252:	2a24      	cmp	r2, #36	; 0x24
 800e254:	6081      	str	r1, [r0, #8]
 800e256:	60c1      	str	r1, [r0, #12]
 800e258:	bf11      	iteee	ne
 800e25a:	f100 0310 	addne.w	r3, r0, #16
 800e25e:	6101      	streq	r1, [r0, #16]
 800e260:	f100 0318 	addeq.w	r3, r0, #24
 800e264:	6141      	streq	r1, [r0, #20]
 800e266:	e7e5      	b.n	800e234 <_calloc_r+0x24>
 800e268:	2100      	movs	r1, #0
 800e26a:	f000 f86b 	bl	800e344 <memset>
 800e26e:	4620      	mov	r0, r4
 800e270:	bd10      	pop	{r4, pc}
 800e272:	bf00      	nop

0800e274 <memmove>:
 800e274:	4288      	cmp	r0, r1
 800e276:	b4f0      	push	{r4, r5, r6, r7}
 800e278:	d910      	bls.n	800e29c <memmove+0x28>
 800e27a:	188c      	adds	r4, r1, r2
 800e27c:	42a0      	cmp	r0, r4
 800e27e:	d20d      	bcs.n	800e29c <memmove+0x28>
 800e280:	1885      	adds	r5, r0, r2
 800e282:	1e53      	subs	r3, r2, #1
 800e284:	b142      	cbz	r2, 800e298 <memmove+0x24>
 800e286:	4621      	mov	r1, r4
 800e288:	462a      	mov	r2, r5
 800e28a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800e28e:	3b01      	subs	r3, #1
 800e290:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e294:	1c5c      	adds	r4, r3, #1
 800e296:	d1f8      	bne.n	800e28a <memmove+0x16>
 800e298:	bcf0      	pop	{r4, r5, r6, r7}
 800e29a:	4770      	bx	lr
 800e29c:	2a0f      	cmp	r2, #15
 800e29e:	d946      	bls.n	800e32e <memmove+0xba>
 800e2a0:	ea40 0301 	orr.w	r3, r0, r1
 800e2a4:	079b      	lsls	r3, r3, #30
 800e2a6:	d146      	bne.n	800e336 <memmove+0xc2>
 800e2a8:	f1a2 0710 	sub.w	r7, r2, #16
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	093f      	lsrs	r7, r7, #4
 800e2b2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800e2b6:	3610      	adds	r6, #16
 800e2b8:	6825      	ldr	r5, [r4, #0]
 800e2ba:	3310      	adds	r3, #16
 800e2bc:	3410      	adds	r4, #16
 800e2be:	f843 5c10 	str.w	r5, [r3, #-16]
 800e2c2:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800e2c6:	f843 5c0c 	str.w	r5, [r3, #-12]
 800e2ca:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800e2ce:	f843 5c08 	str.w	r5, [r3, #-8]
 800e2d2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800e2d6:	f843 5c04 	str.w	r5, [r3, #-4]
 800e2da:	42b3      	cmp	r3, r6
 800e2dc:	d1ec      	bne.n	800e2b8 <memmove+0x44>
 800e2de:	1c7b      	adds	r3, r7, #1
 800e2e0:	f002 0c0f 	and.w	ip, r2, #15
 800e2e4:	f1bc 0f03 	cmp.w	ip, #3
 800e2e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e2ec:	4419      	add	r1, r3
 800e2ee:	4403      	add	r3, r0
 800e2f0:	d923      	bls.n	800e33a <memmove+0xc6>
 800e2f2:	460e      	mov	r6, r1
 800e2f4:	461d      	mov	r5, r3
 800e2f6:	4664      	mov	r4, ip
 800e2f8:	f856 7b04 	ldr.w	r7, [r6], #4
 800e2fc:	3c04      	subs	r4, #4
 800e2fe:	2c03      	cmp	r4, #3
 800e300:	f845 7b04 	str.w	r7, [r5], #4
 800e304:	d8f8      	bhi.n	800e2f8 <memmove+0x84>
 800e306:	f1ac 0404 	sub.w	r4, ip, #4
 800e30a:	f002 0203 	and.w	r2, r2, #3
 800e30e:	f024 0403 	bic.w	r4, r4, #3
 800e312:	3404      	adds	r4, #4
 800e314:	4423      	add	r3, r4
 800e316:	4421      	add	r1, r4
 800e318:	2a00      	cmp	r2, #0
 800e31a:	d0bd      	beq.n	800e298 <memmove+0x24>
 800e31c:	441a      	add	r2, r3
 800e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e322:	f803 4b01 	strb.w	r4, [r3], #1
 800e326:	4293      	cmp	r3, r2
 800e328:	d1f9      	bne.n	800e31e <memmove+0xaa>
 800e32a:	bcf0      	pop	{r4, r5, r6, r7}
 800e32c:	4770      	bx	lr
 800e32e:	4603      	mov	r3, r0
 800e330:	2a00      	cmp	r2, #0
 800e332:	d1f3      	bne.n	800e31c <memmove+0xa8>
 800e334:	e7b0      	b.n	800e298 <memmove+0x24>
 800e336:	4603      	mov	r3, r0
 800e338:	e7f0      	b.n	800e31c <memmove+0xa8>
 800e33a:	4662      	mov	r2, ip
 800e33c:	2a00      	cmp	r2, #0
 800e33e:	d1ed      	bne.n	800e31c <memmove+0xa8>
 800e340:	e7aa      	b.n	800e298 <memmove+0x24>
 800e342:	bf00      	nop

0800e344 <memset>:
 800e344:	0783      	lsls	r3, r0, #30
 800e346:	b4f0      	push	{r4, r5, r6, r7}
 800e348:	d048      	beq.n	800e3dc <memset+0x98>
 800e34a:	1e54      	subs	r4, r2, #1
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	d043      	beq.n	800e3d8 <memset+0x94>
 800e350:	b2cd      	uxtb	r5, r1
 800e352:	4603      	mov	r3, r0
 800e354:	e002      	b.n	800e35c <memset+0x18>
 800e356:	2c00      	cmp	r4, #0
 800e358:	d03e      	beq.n	800e3d8 <memset+0x94>
 800e35a:	4614      	mov	r4, r2
 800e35c:	f803 5b01 	strb.w	r5, [r3], #1
 800e360:	f013 0f03 	tst.w	r3, #3
 800e364:	f104 32ff 	add.w	r2, r4, #4294967295
 800e368:	d1f5      	bne.n	800e356 <memset+0x12>
 800e36a:	2c03      	cmp	r4, #3
 800e36c:	d92d      	bls.n	800e3ca <memset+0x86>
 800e36e:	b2cd      	uxtb	r5, r1
 800e370:	2c0f      	cmp	r4, #15
 800e372:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800e376:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800e37a:	d918      	bls.n	800e3ae <memset+0x6a>
 800e37c:	f1a4 0710 	sub.w	r7, r4, #16
 800e380:	f103 0610 	add.w	r6, r3, #16
 800e384:	461a      	mov	r2, r3
 800e386:	093f      	lsrs	r7, r7, #4
 800e388:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800e38c:	6015      	str	r5, [r2, #0]
 800e38e:	3210      	adds	r2, #16
 800e390:	f842 5c0c 	str.w	r5, [r2, #-12]
 800e394:	f842 5c08 	str.w	r5, [r2, #-8]
 800e398:	f842 5c04 	str.w	r5, [r2, #-4]
 800e39c:	42b2      	cmp	r2, r6
 800e39e:	d1f5      	bne.n	800e38c <memset+0x48>
 800e3a0:	f004 040f 	and.w	r4, r4, #15
 800e3a4:	3701      	adds	r7, #1
 800e3a6:	2c03      	cmp	r4, #3
 800e3a8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e3ac:	d90d      	bls.n	800e3ca <memset+0x86>
 800e3ae:	461e      	mov	r6, r3
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	3a04      	subs	r2, #4
 800e3b4:	f846 5b04 	str.w	r5, [r6], #4
 800e3b8:	2a03      	cmp	r2, #3
 800e3ba:	d8fa      	bhi.n	800e3b2 <memset+0x6e>
 800e3bc:	1f22      	subs	r2, r4, #4
 800e3be:	f004 0403 	and.w	r4, r4, #3
 800e3c2:	f022 0203 	bic.w	r2, r2, #3
 800e3c6:	3204      	adds	r2, #4
 800e3c8:	4413      	add	r3, r2
 800e3ca:	b12c      	cbz	r4, 800e3d8 <memset+0x94>
 800e3cc:	b2c9      	uxtb	r1, r1
 800e3ce:	441c      	add	r4, r3
 800e3d0:	f803 1b01 	strb.w	r1, [r3], #1
 800e3d4:	42a3      	cmp	r3, r4
 800e3d6:	d1fb      	bne.n	800e3d0 <memset+0x8c>
 800e3d8:	bcf0      	pop	{r4, r5, r6, r7}
 800e3da:	4770      	bx	lr
 800e3dc:	4614      	mov	r4, r2
 800e3de:	4603      	mov	r3, r0
 800e3e0:	e7c3      	b.n	800e36a <memset+0x26>
 800e3e2:	bf00      	nop

0800e3e4 <_realloc_r>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	4681      	mov	r9, r0
 800e3f0:	2900      	cmp	r1, #0
 800e3f2:	f000 8148 	beq.w	800e686 <_realloc_r+0x2a2>
 800e3f6:	f7fb fdd7 	bl	8009fa8 <__malloc_lock>
 800e3fa:	f108 060b 	add.w	r6, r8, #11
 800e3fe:	2e16      	cmp	r6, #22
 800e400:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e404:	bf8d      	iteet	hi
 800e406:	f026 0607 	bichi.w	r6, r6, #7
 800e40a:	2210      	movls	r2, #16
 800e40c:	2300      	movls	r3, #0
 800e40e:	4632      	movhi	r2, r6
 800e410:	bf88      	it	hi
 800e412:	0ff3      	lsrhi	r3, r6, #31
 800e414:	f1a4 0708 	sub.w	r7, r4, #8
 800e418:	f02c 0503 	bic.w	r5, ip, #3
 800e41c:	bf98      	it	ls
 800e41e:	4616      	movls	r6, r2
 800e420:	4546      	cmp	r6, r8
 800e422:	bf38      	it	cc
 800e424:	f043 0301 	orrcc.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f040 8132 	bne.w	800e692 <_realloc_r+0x2ae>
 800e42e:	4295      	cmp	r5, r2
 800e430:	db16      	blt.n	800e460 <_realloc_r+0x7c>
 800e432:	46a0      	mov	r8, r4
 800e434:	4660      	mov	r0, ip
 800e436:	1bab      	subs	r3, r5, r6
 800e438:	2b0f      	cmp	r3, #15
 800e43a:	f200 80cc 	bhi.w	800e5d6 <_realloc_r+0x1f2>
 800e43e:	197b      	adds	r3, r7, r5
 800e440:	f000 0c01 	and.w	ip, r0, #1
 800e444:	ea4c 0505 	orr.w	r5, ip, r5
 800e448:	607d      	str	r5, [r7, #4]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	f042 0201 	orr.w	r2, r2, #1
 800e450:	605a      	str	r2, [r3, #4]
 800e452:	4648      	mov	r0, r9
 800e454:	f7fb fdaa 	bl	8009fac <__malloc_unlock>
 800e458:	4640      	mov	r0, r8
 800e45a:	b003      	add	sp, #12
 800e45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e460:	f240 1a08 	movw	sl, #264	; 0x108
 800e464:	1979      	adds	r1, r7, r5
 800e466:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800e46a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e46e:	4288      	cmp	r0, r1
 800e470:	f000 8114 	beq.w	800e69c <_realloc_r+0x2b8>
 800e474:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800e478:	f02e 0b01 	bic.w	fp, lr, #1
 800e47c:	448b      	add	fp, r1
 800e47e:	f8db b004 	ldr.w	fp, [fp, #4]
 800e482:	f01b 0f01 	tst.w	fp, #1
 800e486:	bf1c      	itt	ne
 800e488:	469e      	movne	lr, r3
 800e48a:	4671      	movne	r1, lr
 800e48c:	d056      	beq.n	800e53c <_realloc_r+0x158>
 800e48e:	f01c 0f01 	tst.w	ip, #1
 800e492:	f040 80b3 	bne.w	800e5fc <_realloc_r+0x218>
 800e496:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800e49a:	ebc3 0b07 	rsb	fp, r3, r7
 800e49e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	442b      	add	r3, r5
 800e4a8:	2900      	cmp	r1, #0
 800e4aa:	d055      	beq.n	800e558 <_realloc_r+0x174>
 800e4ac:	4281      	cmp	r1, r0
 800e4ae:	f000 8121 	beq.w	800e6f4 <_realloc_r+0x310>
 800e4b2:	449e      	add	lr, r3
 800e4b4:	4596      	cmp	lr, r2
 800e4b6:	db4f      	blt.n	800e558 <_realloc_r+0x174>
 800e4b8:	68cb      	ldr	r3, [r1, #12]
 800e4ba:	46d8      	mov	r8, fp
 800e4bc:	6889      	ldr	r1, [r1, #8]
 800e4be:	1f2a      	subs	r2, r5, #4
 800e4c0:	2a24      	cmp	r2, #36	; 0x24
 800e4c2:	60cb      	str	r3, [r1, #12]
 800e4c4:	6099      	str	r1, [r3, #8]
 800e4c6:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e4ca:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800e4ce:	60cb      	str	r3, [r1, #12]
 800e4d0:	6099      	str	r1, [r3, #8]
 800e4d2:	f200 816a 	bhi.w	800e7aa <_realloc_r+0x3c6>
 800e4d6:	2a13      	cmp	r2, #19
 800e4d8:	bf98      	it	ls
 800e4da:	4642      	movls	r2, r8
 800e4dc:	d923      	bls.n	800e526 <_realloc_r+0x142>
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	2a1b      	cmp	r2, #27
 800e4e2:	bf98      	it	ls
 800e4e4:	f10b 0210 	addls.w	r2, fp, #16
 800e4e8:	f8cb 3008 	str.w	r3, [fp, #8]
 800e4ec:	6863      	ldr	r3, [r4, #4]
 800e4ee:	bf98      	it	ls
 800e4f0:	3408      	addls	r4, #8
 800e4f2:	f8cb 300c 	str.w	r3, [fp, #12]
 800e4f6:	d916      	bls.n	800e526 <_realloc_r+0x142>
 800e4f8:	68a3      	ldr	r3, [r4, #8]
 800e4fa:	2a24      	cmp	r2, #36	; 0x24
 800e4fc:	bf14      	ite	ne
 800e4fe:	f10b 0218 	addne.w	r2, fp, #24
 800e502:	f10b 0220 	addeq.w	r2, fp, #32
 800e506:	f8cb 3010 	str.w	r3, [fp, #16]
 800e50a:	68e3      	ldr	r3, [r4, #12]
 800e50c:	bf18      	it	ne
 800e50e:	3410      	addne	r4, #16
 800e510:	f8cb 3014 	str.w	r3, [fp, #20]
 800e514:	bf01      	itttt	eq
 800e516:	6923      	ldreq	r3, [r4, #16]
 800e518:	f8cb 3018 	streq.w	r3, [fp, #24]
 800e51c:	6963      	ldreq	r3, [r4, #20]
 800e51e:	3418      	addeq	r4, #24
 800e520:	bf08      	it	eq
 800e522:	f8cb 301c 	streq.w	r3, [fp, #28]
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	4675      	mov	r5, lr
 800e52a:	465f      	mov	r7, fp
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	6863      	ldr	r3, [r4, #4]
 800e530:	6053      	str	r3, [r2, #4]
 800e532:	68a3      	ldr	r3, [r4, #8]
 800e534:	6093      	str	r3, [r2, #8]
 800e536:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e53a:	e77c      	b.n	800e436 <_realloc_r+0x52>
 800e53c:	f02e 0e03 	bic.w	lr, lr, #3
 800e540:	eb0e 0305 	add.w	r3, lr, r5
 800e544:	4293      	cmp	r3, r2
 800e546:	dba2      	blt.n	800e48e <_realloc_r+0xaa>
 800e548:	68ca      	ldr	r2, [r1, #12]
 800e54a:	46a0      	mov	r8, r4
 800e54c:	6889      	ldr	r1, [r1, #8]
 800e54e:	4660      	mov	r0, ip
 800e550:	461d      	mov	r5, r3
 800e552:	60ca      	str	r2, [r1, #12]
 800e554:	6091      	str	r1, [r2, #8]
 800e556:	e76e      	b.n	800e436 <_realloc_r+0x52>
 800e558:	4293      	cmp	r3, r2
 800e55a:	db4f      	blt.n	800e5fc <_realloc_r+0x218>
 800e55c:	46d8      	mov	r8, fp
 800e55e:	f8db 100c 	ldr.w	r1, [fp, #12]
 800e562:	1f2a      	subs	r2, r5, #4
 800e564:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800e568:	2a24      	cmp	r2, #36	; 0x24
 800e56a:	60c1      	str	r1, [r0, #12]
 800e56c:	6088      	str	r0, [r1, #8]
 800e56e:	f200 80b4 	bhi.w	800e6da <_realloc_r+0x2f6>
 800e572:	2a13      	cmp	r2, #19
 800e574:	bf98      	it	ls
 800e576:	4641      	movls	r1, r8
 800e578:	d922      	bls.n	800e5c0 <_realloc_r+0x1dc>
 800e57a:	6821      	ldr	r1, [r4, #0]
 800e57c:	2a1b      	cmp	r2, #27
 800e57e:	f8cb 1008 	str.w	r1, [fp, #8]
 800e582:	6861      	ldr	r1, [r4, #4]
 800e584:	bf98      	it	ls
 800e586:	3408      	addls	r4, #8
 800e588:	f8cb 100c 	str.w	r1, [fp, #12]
 800e58c:	bf98      	it	ls
 800e58e:	f10b 0110 	addls.w	r1, fp, #16
 800e592:	d915      	bls.n	800e5c0 <_realloc_r+0x1dc>
 800e594:	68a1      	ldr	r1, [r4, #8]
 800e596:	2a24      	cmp	r2, #36	; 0x24
 800e598:	f8cb 1010 	str.w	r1, [fp, #16]
 800e59c:	68e1      	ldr	r1, [r4, #12]
 800e59e:	bf18      	it	ne
 800e5a0:	3410      	addne	r4, #16
 800e5a2:	f8cb 1014 	str.w	r1, [fp, #20]
 800e5a6:	bf11      	iteee	ne
 800e5a8:	f10b 0118 	addne.w	r1, fp, #24
 800e5ac:	6922      	ldreq	r2, [r4, #16]
 800e5ae:	f10b 0120 	addeq.w	r1, fp, #32
 800e5b2:	f8cb 2018 	streq.w	r2, [fp, #24]
 800e5b6:	bf02      	ittt	eq
 800e5b8:	6962      	ldreq	r2, [r4, #20]
 800e5ba:	3418      	addeq	r4, #24
 800e5bc:	f8cb 201c 	streq.w	r2, [fp, #28]
 800e5c0:	6822      	ldr	r2, [r4, #0]
 800e5c2:	461d      	mov	r5, r3
 800e5c4:	465f      	mov	r7, fp
 800e5c6:	600a      	str	r2, [r1, #0]
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	604b      	str	r3, [r1, #4]
 800e5cc:	68a3      	ldr	r3, [r4, #8]
 800e5ce:	608b      	str	r3, [r1, #8]
 800e5d0:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e5d4:	e72f      	b.n	800e436 <_realloc_r+0x52>
 800e5d6:	19b9      	adds	r1, r7, r6
 800e5d8:	f000 0c01 	and.w	ip, r0, #1
 800e5dc:	18ca      	adds	r2, r1, r3
 800e5de:	ea4c 0606 	orr.w	r6, ip, r6
 800e5e2:	f043 0301 	orr.w	r3, r3, #1
 800e5e6:	607e      	str	r6, [r7, #4]
 800e5e8:	604b      	str	r3, [r1, #4]
 800e5ea:	4648      	mov	r0, r9
 800e5ec:	6853      	ldr	r3, [r2, #4]
 800e5ee:	3108      	adds	r1, #8
 800e5f0:	f043 0301 	orr.w	r3, r3, #1
 800e5f4:	6053      	str	r3, [r2, #4]
 800e5f6:	f7fe f809 	bl	800c60c <_free_r>
 800e5fa:	e72a      	b.n	800e452 <_realloc_r+0x6e>
 800e5fc:	4641      	mov	r1, r8
 800e5fe:	4648      	mov	r0, r9
 800e600:	f7fb fa1a 	bl	8009a38 <_malloc_r>
 800e604:	4680      	mov	r8, r0
 800e606:	2800      	cmp	r0, #0
 800e608:	f43f af23 	beq.w	800e452 <_realloc_r+0x6e>
 800e60c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e610:	f1a0 0108 	sub.w	r1, r0, #8
 800e614:	f023 0201 	bic.w	r2, r3, #1
 800e618:	443a      	add	r2, r7
 800e61a:	4291      	cmp	r1, r2
 800e61c:	f000 80bd 	beq.w	800e79a <_realloc_r+0x3b6>
 800e620:	1f2a      	subs	r2, r5, #4
 800e622:	2a24      	cmp	r2, #36	; 0x24
 800e624:	d862      	bhi.n	800e6ec <_realloc_r+0x308>
 800e626:	2a13      	cmp	r2, #19
 800e628:	bf9c      	itt	ls
 800e62a:	4603      	movls	r3, r0
 800e62c:	4622      	movls	r2, r4
 800e62e:	d91f      	bls.n	800e670 <_realloc_r+0x28c>
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	2a1b      	cmp	r2, #27
 800e634:	bf98      	it	ls
 800e636:	f104 0208 	addls.w	r2, r4, #8
 800e63a:	6003      	str	r3, [r0, #0]
 800e63c:	6863      	ldr	r3, [r4, #4]
 800e63e:	6043      	str	r3, [r0, #4]
 800e640:	bf98      	it	ls
 800e642:	f100 0308 	addls.w	r3, r0, #8
 800e646:	d913      	bls.n	800e670 <_realloc_r+0x28c>
 800e648:	68a3      	ldr	r3, [r4, #8]
 800e64a:	2a24      	cmp	r2, #36	; 0x24
 800e64c:	bf14      	ite	ne
 800e64e:	f104 0210 	addne.w	r2, r4, #16
 800e652:	f104 0218 	addeq.w	r2, r4, #24
 800e656:	6083      	str	r3, [r0, #8]
 800e658:	68e3      	ldr	r3, [r4, #12]
 800e65a:	60c3      	str	r3, [r0, #12]
 800e65c:	bf11      	iteee	ne
 800e65e:	f100 0310 	addne.w	r3, r0, #16
 800e662:	6921      	ldreq	r1, [r4, #16]
 800e664:	f100 0318 	addeq.w	r3, r0, #24
 800e668:	6101      	streq	r1, [r0, #16]
 800e66a:	bf04      	itt	eq
 800e66c:	6961      	ldreq	r1, [r4, #20]
 800e66e:	6141      	streq	r1, [r0, #20]
 800e670:	6811      	ldr	r1, [r2, #0]
 800e672:	6019      	str	r1, [r3, #0]
 800e674:	6851      	ldr	r1, [r2, #4]
 800e676:	6059      	str	r1, [r3, #4]
 800e678:	6892      	ldr	r2, [r2, #8]
 800e67a:	609a      	str	r2, [r3, #8]
 800e67c:	4621      	mov	r1, r4
 800e67e:	4648      	mov	r0, r9
 800e680:	f7fd ffc4 	bl	800c60c <_free_r>
 800e684:	e6e5      	b.n	800e452 <_realloc_r+0x6e>
 800e686:	4611      	mov	r1, r2
 800e688:	b003      	add	sp, #12
 800e68a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68e:	f7fb b9d3 	b.w	8009a38 <_malloc_r>
 800e692:	230c      	movs	r3, #12
 800e694:	2000      	movs	r0, #0
 800e696:	f8c9 3000 	str.w	r3, [r9]
 800e69a:	e6de      	b.n	800e45a <_realloc_r+0x76>
 800e69c:	6843      	ldr	r3, [r0, #4]
 800e69e:	f106 0110 	add.w	r1, r6, #16
 800e6a2:	f023 0e03 	bic.w	lr, r3, #3
 800e6a6:	eb0e 0305 	add.w	r3, lr, r5
 800e6aa:	428b      	cmp	r3, r1
 800e6ac:	bfb8      	it	lt
 800e6ae:	4601      	movlt	r1, r0
 800e6b0:	f6ff aeed 	blt.w	800e48e <_realloc_r+0xaa>
 800e6b4:	4437      	add	r7, r6
 800e6b6:	1b9b      	subs	r3, r3, r6
 800e6b8:	f8ca 7008 	str.w	r7, [sl, #8]
 800e6bc:	f043 0301 	orr.w	r3, r3, #1
 800e6c0:	607b      	str	r3, [r7, #4]
 800e6c2:	4648      	mov	r0, r9
 800e6c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	431e      	orrs	r6, r3
 800e6ce:	f844 6c04 	str.w	r6, [r4, #-4]
 800e6d2:	f7fb fc6b 	bl	8009fac <__malloc_unlock>
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	e6bf      	b.n	800e45a <_realloc_r+0x76>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4640      	mov	r0, r8
 800e6de:	461d      	mov	r5, r3
 800e6e0:	465f      	mov	r7, fp
 800e6e2:	f7ff fdc7 	bl	800e274 <memmove>
 800e6e6:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e6ea:	e6a4      	b.n	800e436 <_realloc_r+0x52>
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	f7ff fdc1 	bl	800e274 <memmove>
 800e6f2:	e7c3      	b.n	800e67c <_realloc_r+0x298>
 800e6f4:	f106 0110 	add.w	r1, r6, #16
 800e6f8:	eb0e 0c03 	add.w	ip, lr, r3
 800e6fc:	458c      	cmp	ip, r1
 800e6fe:	f6ff af2b 	blt.w	800e558 <_realloc_r+0x174>
 800e702:	46d8      	mov	r8, fp
 800e704:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e708:	1f2a      	subs	r2, r5, #4
 800e70a:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800e70e:	2a24      	cmp	r2, #36	; 0x24
 800e710:	60cb      	str	r3, [r1, #12]
 800e712:	6099      	str	r1, [r3, #8]
 800e714:	d852      	bhi.n	800e7bc <_realloc_r+0x3d8>
 800e716:	2a13      	cmp	r2, #19
 800e718:	bf98      	it	ls
 800e71a:	4643      	movls	r3, r8
 800e71c:	d922      	bls.n	800e764 <_realloc_r+0x380>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	2a1b      	cmp	r2, #27
 800e722:	f8cb 3008 	str.w	r3, [fp, #8]
 800e726:	6863      	ldr	r3, [r4, #4]
 800e728:	bf98      	it	ls
 800e72a:	3408      	addls	r4, #8
 800e72c:	f8cb 300c 	str.w	r3, [fp, #12]
 800e730:	bf98      	it	ls
 800e732:	f10b 0310 	addls.w	r3, fp, #16
 800e736:	d915      	bls.n	800e764 <_realloc_r+0x380>
 800e738:	68a3      	ldr	r3, [r4, #8]
 800e73a:	2a24      	cmp	r2, #36	; 0x24
 800e73c:	f8cb 3010 	str.w	r3, [fp, #16]
 800e740:	68e3      	ldr	r3, [r4, #12]
 800e742:	bf18      	it	ne
 800e744:	3410      	addne	r4, #16
 800e746:	f8cb 3014 	str.w	r3, [fp, #20]
 800e74a:	bf11      	iteee	ne
 800e74c:	f10b 0318 	addne.w	r3, fp, #24
 800e750:	6922      	ldreq	r2, [r4, #16]
 800e752:	f10b 0320 	addeq.w	r3, fp, #32
 800e756:	f8cb 2018 	streq.w	r2, [fp, #24]
 800e75a:	bf02      	ittt	eq
 800e75c:	6962      	ldreq	r2, [r4, #20]
 800e75e:	3418      	addeq	r4, #24
 800e760:	f8cb 201c 	streq.w	r2, [fp, #28]
 800e764:	6822      	ldr	r2, [r4, #0]
 800e766:	601a      	str	r2, [r3, #0]
 800e768:	6862      	ldr	r2, [r4, #4]
 800e76a:	605a      	str	r2, [r3, #4]
 800e76c:	68a2      	ldr	r2, [r4, #8]
 800e76e:	609a      	str	r2, [r3, #8]
 800e770:	eb0b 0306 	add.w	r3, fp, r6
 800e774:	ebc6 020c 	rsb	r2, r6, ip
 800e778:	f8ca 3008 	str.w	r3, [sl, #8]
 800e77c:	f042 0201 	orr.w	r2, r2, #1
 800e780:	605a      	str	r2, [r3, #4]
 800e782:	4648      	mov	r0, r9
 800e784:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e788:	f003 0301 	and.w	r3, r3, #1
 800e78c:	431e      	orrs	r6, r3
 800e78e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e792:	f7fb fc0b 	bl	8009fac <__malloc_unlock>
 800e796:	4640      	mov	r0, r8
 800e798:	e65f      	b.n	800e45a <_realloc_r+0x76>
 800e79a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	46a0      	mov	r8, r4
 800e7a2:	f022 0303 	bic.w	r3, r2, #3
 800e7a6:	441d      	add	r5, r3
 800e7a8:	e645      	b.n	800e436 <_realloc_r+0x52>
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	4675      	mov	r5, lr
 800e7b0:	465f      	mov	r7, fp
 800e7b2:	f7ff fd5f 	bl	800e274 <memmove>
 800e7b6:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e7ba:	e63c      	b.n	800e436 <_realloc_r+0x52>
 800e7bc:	4621      	mov	r1, r4
 800e7be:	4640      	mov	r0, r8
 800e7c0:	f8cd c004 	str.w	ip, [sp, #4]
 800e7c4:	f7ff fd56 	bl	800e274 <memmove>
 800e7c8:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e7cc:	e7d0      	b.n	800e770 <_realloc_r+0x38c>
 800e7ce:	bf00      	nop

0800e7d0 <__aeabi_uidiv>:
 800e7d0:	1e4a      	subs	r2, r1, #1
 800e7d2:	bf08      	it	eq
 800e7d4:	4770      	bxeq	lr
 800e7d6:	f0c0 8124 	bcc.w	800ea22 <__aeabi_uidiv+0x252>
 800e7da:	4288      	cmp	r0, r1
 800e7dc:	f240 8116 	bls.w	800ea0c <__aeabi_uidiv+0x23c>
 800e7e0:	4211      	tst	r1, r2
 800e7e2:	f000 8117 	beq.w	800ea14 <__aeabi_uidiv+0x244>
 800e7e6:	fab0 f380 	clz	r3, r0
 800e7ea:	fab1 f281 	clz	r2, r1
 800e7ee:	eba2 0303 	sub.w	r3, r2, r3
 800e7f2:	f1c3 031f 	rsb	r3, r3, #31
 800e7f6:	a204      	add	r2, pc, #16	; (adr r2, 800e808 <__aeabi_uidiv+0x38>)
 800e7f8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800e7fc:	f04f 0200 	mov.w	r2, #0
 800e800:	469f      	mov	pc, r3
 800e802:	bf00      	nop
 800e804:	f3af 8000 	nop.w
 800e808:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 800e80c:	bf00      	nop
 800e80e:	eb42 0202 	adc.w	r2, r2, r2
 800e812:	bf28      	it	cs
 800e814:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 800e818:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 800e81c:	bf00      	nop
 800e81e:	eb42 0202 	adc.w	r2, r2, r2
 800e822:	bf28      	it	cs
 800e824:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 800e828:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 800e82c:	bf00      	nop
 800e82e:	eb42 0202 	adc.w	r2, r2, r2
 800e832:	bf28      	it	cs
 800e834:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 800e838:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 800e83c:	bf00      	nop
 800e83e:	eb42 0202 	adc.w	r2, r2, r2
 800e842:	bf28      	it	cs
 800e844:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 800e848:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800e84c:	bf00      	nop
 800e84e:	eb42 0202 	adc.w	r2, r2, r2
 800e852:	bf28      	it	cs
 800e854:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 800e858:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800e85c:	bf00      	nop
 800e85e:	eb42 0202 	adc.w	r2, r2, r2
 800e862:	bf28      	it	cs
 800e864:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 800e868:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800e86c:	bf00      	nop
 800e86e:	eb42 0202 	adc.w	r2, r2, r2
 800e872:	bf28      	it	cs
 800e874:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 800e878:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800e87c:	bf00      	nop
 800e87e:	eb42 0202 	adc.w	r2, r2, r2
 800e882:	bf28      	it	cs
 800e884:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 800e888:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800e88c:	bf00      	nop
 800e88e:	eb42 0202 	adc.w	r2, r2, r2
 800e892:	bf28      	it	cs
 800e894:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 800e898:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800e89c:	bf00      	nop
 800e89e:	eb42 0202 	adc.w	r2, r2, r2
 800e8a2:	bf28      	it	cs
 800e8a4:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 800e8a8:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800e8ac:	bf00      	nop
 800e8ae:	eb42 0202 	adc.w	r2, r2, r2
 800e8b2:	bf28      	it	cs
 800e8b4:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 800e8b8:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800e8bc:	bf00      	nop
 800e8be:	eb42 0202 	adc.w	r2, r2, r2
 800e8c2:	bf28      	it	cs
 800e8c4:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 800e8c8:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800e8cc:	bf00      	nop
 800e8ce:	eb42 0202 	adc.w	r2, r2, r2
 800e8d2:	bf28      	it	cs
 800e8d4:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 800e8d8:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800e8dc:	bf00      	nop
 800e8de:	eb42 0202 	adc.w	r2, r2, r2
 800e8e2:	bf28      	it	cs
 800e8e4:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 800e8e8:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 800e8ec:	bf00      	nop
 800e8ee:	eb42 0202 	adc.w	r2, r2, r2
 800e8f2:	bf28      	it	cs
 800e8f4:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 800e8f8:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 800e8fc:	bf00      	nop
 800e8fe:	eb42 0202 	adc.w	r2, r2, r2
 800e902:	bf28      	it	cs
 800e904:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 800e908:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 800e90c:	bf00      	nop
 800e90e:	eb42 0202 	adc.w	r2, r2, r2
 800e912:	bf28      	it	cs
 800e914:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 800e918:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 800e91c:	bf00      	nop
 800e91e:	eb42 0202 	adc.w	r2, r2, r2
 800e922:	bf28      	it	cs
 800e924:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 800e928:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 800e92c:	bf00      	nop
 800e92e:	eb42 0202 	adc.w	r2, r2, r2
 800e932:	bf28      	it	cs
 800e934:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 800e938:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 800e93c:	bf00      	nop
 800e93e:	eb42 0202 	adc.w	r2, r2, r2
 800e942:	bf28      	it	cs
 800e944:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 800e948:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800e94c:	bf00      	nop
 800e94e:	eb42 0202 	adc.w	r2, r2, r2
 800e952:	bf28      	it	cs
 800e954:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 800e958:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800e95c:	bf00      	nop
 800e95e:	eb42 0202 	adc.w	r2, r2, r2
 800e962:	bf28      	it	cs
 800e964:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 800e968:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800e96c:	bf00      	nop
 800e96e:	eb42 0202 	adc.w	r2, r2, r2
 800e972:	bf28      	it	cs
 800e974:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 800e978:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800e97c:	bf00      	nop
 800e97e:	eb42 0202 	adc.w	r2, r2, r2
 800e982:	bf28      	it	cs
 800e984:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 800e988:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800e98c:	bf00      	nop
 800e98e:	eb42 0202 	adc.w	r2, r2, r2
 800e992:	bf28      	it	cs
 800e994:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 800e998:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800e99c:	bf00      	nop
 800e99e:	eb42 0202 	adc.w	r2, r2, r2
 800e9a2:	bf28      	it	cs
 800e9a4:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 800e9a8:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800e9ac:	bf00      	nop
 800e9ae:	eb42 0202 	adc.w	r2, r2, r2
 800e9b2:	bf28      	it	cs
 800e9b4:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 800e9b8:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800e9bc:	bf00      	nop
 800e9be:	eb42 0202 	adc.w	r2, r2, r2
 800e9c2:	bf28      	it	cs
 800e9c4:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 800e9c8:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800e9cc:	bf00      	nop
 800e9ce:	eb42 0202 	adc.w	r2, r2, r2
 800e9d2:	bf28      	it	cs
 800e9d4:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 800e9d8:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800e9dc:	bf00      	nop
 800e9de:	eb42 0202 	adc.w	r2, r2, r2
 800e9e2:	bf28      	it	cs
 800e9e4:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 800e9e8:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800e9ec:	bf00      	nop
 800e9ee:	eb42 0202 	adc.w	r2, r2, r2
 800e9f2:	bf28      	it	cs
 800e9f4:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 800e9f8:	ebb0 0f01 	cmp.w	r0, r1
 800e9fc:	bf00      	nop
 800e9fe:	eb42 0202 	adc.w	r2, r2, r2
 800ea02:	bf28      	it	cs
 800ea04:	eba0 0001 	subcs.w	r0, r0, r1
 800ea08:	4610      	mov	r0, r2
 800ea0a:	4770      	bx	lr
 800ea0c:	bf0c      	ite	eq
 800ea0e:	2001      	moveq	r0, #1
 800ea10:	2000      	movne	r0, #0
 800ea12:	4770      	bx	lr
 800ea14:	fab1 f281 	clz	r2, r1
 800ea18:	f1c2 021f 	rsb	r2, r2, #31
 800ea1c:	fa20 f002 	lsr.w	r0, r0, r2
 800ea20:	4770      	bx	lr
 800ea22:	b108      	cbz	r0, 800ea28 <__aeabi_uidiv+0x258>
 800ea24:	f04f 30ff 	mov.w	r0, #4294967295
 800ea28:	f000 b80e 	b.w	800ea48 <__aeabi_idiv0>

0800ea2c <__aeabi_uidivmod>:
 800ea2c:	2900      	cmp	r1, #0
 800ea2e:	d0f8      	beq.n	800ea22 <__aeabi_uidiv+0x252>
 800ea30:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800ea34:	f7ff fecc 	bl	800e7d0 <__aeabi_uidiv>
 800ea38:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 800ea3c:	fb02 f300 	mul.w	r3, r2, r0
 800ea40:	eba1 0103 	sub.w	r1, r1, r3
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop

0800ea48 <__aeabi_idiv0>:
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop

0800ea4c <__aeabi_drsub>:
 800ea4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800ea50:	e002      	b.n	800ea58 <__adddf3>
 800ea52:	bf00      	nop

0800ea54 <__aeabi_dsub>:
 800ea54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800ea58 <__adddf3>:
 800ea58:	b530      	push	{r4, r5, lr}
 800ea5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800ea5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800ea62:	ea94 0f05 	teq	r4, r5
 800ea66:	bf08      	it	eq
 800ea68:	ea90 0f02 	teqeq	r0, r2
 800ea6c:	bf1f      	itttt	ne
 800ea6e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800ea72:	ea55 0c02 	orrsne.w	ip, r5, r2
 800ea76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800ea7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800ea7e:	f000 80e2 	beq.w	800ec46 <__adddf3+0x1ee>
 800ea82:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800ea86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800ea8a:	bfb8      	it	lt
 800ea8c:	426d      	neglt	r5, r5
 800ea8e:	dd0c      	ble.n	800eaaa <__adddf3+0x52>
 800ea90:	442c      	add	r4, r5
 800ea92:	ea80 0202 	eor.w	r2, r0, r2
 800ea96:	ea81 0303 	eor.w	r3, r1, r3
 800ea9a:	ea82 0000 	eor.w	r0, r2, r0
 800ea9e:	ea83 0101 	eor.w	r1, r3, r1
 800eaa2:	ea80 0202 	eor.w	r2, r0, r2
 800eaa6:	ea81 0303 	eor.w	r3, r1, r3
 800eaaa:	2d36      	cmp	r5, #54	; 0x36
 800eaac:	bf88      	it	hi
 800eaae:	bd30      	pophi	{r4, r5, pc}
 800eab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800eab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800eab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800eabc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800eac0:	d002      	beq.n	800eac8 <__adddf3+0x70>
 800eac2:	4240      	negs	r0, r0
 800eac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800eac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800eacc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ead0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800ead4:	d002      	beq.n	800eadc <__adddf3+0x84>
 800ead6:	4252      	negs	r2, r2
 800ead8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800eadc:	ea94 0f05 	teq	r4, r5
 800eae0:	f000 80a7 	beq.w	800ec32 <__adddf3+0x1da>
 800eae4:	f1a4 0401 	sub.w	r4, r4, #1
 800eae8:	f1d5 0e20 	rsbs	lr, r5, #32
 800eaec:	db0d      	blt.n	800eb0a <__adddf3+0xb2>
 800eaee:	fa02 fc0e 	lsl.w	ip, r2, lr
 800eaf2:	fa22 f205 	lsr.w	r2, r2, r5
 800eaf6:	1880      	adds	r0, r0, r2
 800eaf8:	f141 0100 	adc.w	r1, r1, #0
 800eafc:	fa03 f20e 	lsl.w	r2, r3, lr
 800eb00:	1880      	adds	r0, r0, r2
 800eb02:	fa43 f305 	asr.w	r3, r3, r5
 800eb06:	4159      	adcs	r1, r3
 800eb08:	e00e      	b.n	800eb28 <__adddf3+0xd0>
 800eb0a:	f1a5 0520 	sub.w	r5, r5, #32
 800eb0e:	f10e 0e20 	add.w	lr, lr, #32
 800eb12:	2a01      	cmp	r2, #1
 800eb14:	fa03 fc0e 	lsl.w	ip, r3, lr
 800eb18:	bf28      	it	cs
 800eb1a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800eb1e:	fa43 f305 	asr.w	r3, r3, r5
 800eb22:	18c0      	adds	r0, r0, r3
 800eb24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800eb28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800eb2c:	d507      	bpl.n	800eb3e <__adddf3+0xe6>
 800eb2e:	f04f 0e00 	mov.w	lr, #0
 800eb32:	f1dc 0c00 	rsbs	ip, ip, #0
 800eb36:	eb7e 0000 	sbcs.w	r0, lr, r0
 800eb3a:	eb6e 0101 	sbc.w	r1, lr, r1
 800eb3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800eb42:	d31b      	bcc.n	800eb7c <__adddf3+0x124>
 800eb44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800eb48:	d30c      	bcc.n	800eb64 <__adddf3+0x10c>
 800eb4a:	0849      	lsrs	r1, r1, #1
 800eb4c:	ea5f 0030 	movs.w	r0, r0, rrx
 800eb50:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800eb54:	f104 0401 	add.w	r4, r4, #1
 800eb58:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800eb5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800eb60:	f080 809a 	bcs.w	800ec98 <__adddf3+0x240>
 800eb64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800eb68:	bf08      	it	eq
 800eb6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800eb6e:	f150 0000 	adcs.w	r0, r0, #0
 800eb72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800eb76:	ea41 0105 	orr.w	r1, r1, r5
 800eb7a:	bd30      	pop	{r4, r5, pc}
 800eb7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800eb80:	4140      	adcs	r0, r0
 800eb82:	eb41 0101 	adc.w	r1, r1, r1
 800eb86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800eb8a:	f1a4 0401 	sub.w	r4, r4, #1
 800eb8e:	d1e9      	bne.n	800eb64 <__adddf3+0x10c>
 800eb90:	f091 0f00 	teq	r1, #0
 800eb94:	bf04      	itt	eq
 800eb96:	4601      	moveq	r1, r0
 800eb98:	2000      	moveq	r0, #0
 800eb9a:	fab1 f381 	clz	r3, r1
 800eb9e:	bf08      	it	eq
 800eba0:	3320      	addeq	r3, #32
 800eba2:	f1a3 030b 	sub.w	r3, r3, #11
 800eba6:	f1b3 0220 	subs.w	r2, r3, #32
 800ebaa:	da0c      	bge.n	800ebc6 <__adddf3+0x16e>
 800ebac:	320c      	adds	r2, #12
 800ebae:	dd08      	ble.n	800ebc2 <__adddf3+0x16a>
 800ebb0:	f102 0c14 	add.w	ip, r2, #20
 800ebb4:	f1c2 020c 	rsb	r2, r2, #12
 800ebb8:	fa01 f00c 	lsl.w	r0, r1, ip
 800ebbc:	fa21 f102 	lsr.w	r1, r1, r2
 800ebc0:	e00c      	b.n	800ebdc <__adddf3+0x184>
 800ebc2:	f102 0214 	add.w	r2, r2, #20
 800ebc6:	bfd8      	it	le
 800ebc8:	f1c2 0c20 	rsble	ip, r2, #32
 800ebcc:	fa01 f102 	lsl.w	r1, r1, r2
 800ebd0:	fa20 fc0c 	lsr.w	ip, r0, ip
 800ebd4:	bfdc      	itt	le
 800ebd6:	ea41 010c 	orrle.w	r1, r1, ip
 800ebda:	4090      	lslle	r0, r2
 800ebdc:	1ae4      	subs	r4, r4, r3
 800ebde:	bfa2      	ittt	ge
 800ebe0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800ebe4:	4329      	orrge	r1, r5
 800ebe6:	bd30      	popge	{r4, r5, pc}
 800ebe8:	ea6f 0404 	mvn.w	r4, r4
 800ebec:	3c1f      	subs	r4, #31
 800ebee:	da1c      	bge.n	800ec2a <__adddf3+0x1d2>
 800ebf0:	340c      	adds	r4, #12
 800ebf2:	dc0e      	bgt.n	800ec12 <__adddf3+0x1ba>
 800ebf4:	f104 0414 	add.w	r4, r4, #20
 800ebf8:	f1c4 0220 	rsb	r2, r4, #32
 800ebfc:	fa20 f004 	lsr.w	r0, r0, r4
 800ec00:	fa01 f302 	lsl.w	r3, r1, r2
 800ec04:	ea40 0003 	orr.w	r0, r0, r3
 800ec08:	fa21 f304 	lsr.w	r3, r1, r4
 800ec0c:	ea45 0103 	orr.w	r1, r5, r3
 800ec10:	bd30      	pop	{r4, r5, pc}
 800ec12:	f1c4 040c 	rsb	r4, r4, #12
 800ec16:	f1c4 0220 	rsb	r2, r4, #32
 800ec1a:	fa20 f002 	lsr.w	r0, r0, r2
 800ec1e:	fa01 f304 	lsl.w	r3, r1, r4
 800ec22:	ea40 0003 	orr.w	r0, r0, r3
 800ec26:	4629      	mov	r1, r5
 800ec28:	bd30      	pop	{r4, r5, pc}
 800ec2a:	fa21 f004 	lsr.w	r0, r1, r4
 800ec2e:	4629      	mov	r1, r5
 800ec30:	bd30      	pop	{r4, r5, pc}
 800ec32:	f094 0f00 	teq	r4, #0
 800ec36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800ec3a:	bf06      	itte	eq
 800ec3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800ec40:	3401      	addeq	r4, #1
 800ec42:	3d01      	subne	r5, #1
 800ec44:	e74e      	b.n	800eae4 <__adddf3+0x8c>
 800ec46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ec4a:	bf18      	it	ne
 800ec4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800ec50:	d029      	beq.n	800eca6 <__adddf3+0x24e>
 800ec52:	ea94 0f05 	teq	r4, r5
 800ec56:	bf08      	it	eq
 800ec58:	ea90 0f02 	teqeq	r0, r2
 800ec5c:	d005      	beq.n	800ec6a <__adddf3+0x212>
 800ec5e:	ea54 0c00 	orrs.w	ip, r4, r0
 800ec62:	bf04      	itt	eq
 800ec64:	4619      	moveq	r1, r3
 800ec66:	4610      	moveq	r0, r2
 800ec68:	bd30      	pop	{r4, r5, pc}
 800ec6a:	ea91 0f03 	teq	r1, r3
 800ec6e:	bf1e      	ittt	ne
 800ec70:	2100      	movne	r1, #0
 800ec72:	2000      	movne	r0, #0
 800ec74:	bd30      	popne	{r4, r5, pc}
 800ec76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800ec7a:	d105      	bne.n	800ec88 <__adddf3+0x230>
 800ec7c:	0040      	lsls	r0, r0, #1
 800ec7e:	4149      	adcs	r1, r1
 800ec80:	bf28      	it	cs
 800ec82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800ec86:	bd30      	pop	{r4, r5, pc}
 800ec88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800ec8c:	bf3c      	itt	cc
 800ec8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800ec92:	bd30      	popcc	{r4, r5, pc}
 800ec94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ec98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800ec9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eca0:	f04f 0000 	mov.w	r0, #0
 800eca4:	bd30      	pop	{r4, r5, pc}
 800eca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ecaa:	bf1a      	itte	ne
 800ecac:	4619      	movne	r1, r3
 800ecae:	4610      	movne	r0, r2
 800ecb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800ecb4:	bf1c      	itt	ne
 800ecb6:	460b      	movne	r3, r1
 800ecb8:	4602      	movne	r2, r0
 800ecba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ecbe:	bf06      	itte	eq
 800ecc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800ecc4:	ea91 0f03 	teqeq	r1, r3
 800ecc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800eccc:	bd30      	pop	{r4, r5, pc}
 800ecce:	bf00      	nop

0800ecd0 <__aeabi_ui2d>:
 800ecd0:	f090 0f00 	teq	r0, #0
 800ecd4:	bf04      	itt	eq
 800ecd6:	2100      	moveq	r1, #0
 800ecd8:	4770      	bxeq	lr
 800ecda:	b530      	push	{r4, r5, lr}
 800ecdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ece0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ece4:	f04f 0500 	mov.w	r5, #0
 800ece8:	f04f 0100 	mov.w	r1, #0
 800ecec:	e750      	b.n	800eb90 <__adddf3+0x138>
 800ecee:	bf00      	nop

0800ecf0 <__aeabi_i2d>:
 800ecf0:	f090 0f00 	teq	r0, #0
 800ecf4:	bf04      	itt	eq
 800ecf6:	2100      	moveq	r1, #0
 800ecf8:	4770      	bxeq	lr
 800ecfa:	b530      	push	{r4, r5, lr}
 800ecfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ed00:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ed04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800ed08:	bf48      	it	mi
 800ed0a:	4240      	negmi	r0, r0
 800ed0c:	f04f 0100 	mov.w	r1, #0
 800ed10:	e73e      	b.n	800eb90 <__adddf3+0x138>
 800ed12:	bf00      	nop

0800ed14 <__aeabi_f2d>:
 800ed14:	0042      	lsls	r2, r0, #1
 800ed16:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800ed1a:	ea4f 0131 	mov.w	r1, r1, rrx
 800ed1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800ed22:	bf1f      	itttt	ne
 800ed24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800ed28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800ed2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800ed30:	4770      	bxne	lr
 800ed32:	f092 0f00 	teq	r2, #0
 800ed36:	bf14      	ite	ne
 800ed38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800ed3c:	4770      	bxeq	lr
 800ed3e:	b530      	push	{r4, r5, lr}
 800ed40:	f44f 7460 	mov.w	r4, #896	; 0x380
 800ed44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ed48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed4c:	e720      	b.n	800eb90 <__adddf3+0x138>
 800ed4e:	bf00      	nop

0800ed50 <__aeabi_ul2d>:
 800ed50:	ea50 0201 	orrs.w	r2, r0, r1
 800ed54:	bf08      	it	eq
 800ed56:	4770      	bxeq	lr
 800ed58:	b530      	push	{r4, r5, lr}
 800ed5a:	f04f 0500 	mov.w	r5, #0
 800ed5e:	e00a      	b.n	800ed76 <__aeabi_l2d+0x16>

0800ed60 <__aeabi_l2d>:
 800ed60:	ea50 0201 	orrs.w	r2, r0, r1
 800ed64:	bf08      	it	eq
 800ed66:	4770      	bxeq	lr
 800ed68:	b530      	push	{r4, r5, lr}
 800ed6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800ed6e:	d502      	bpl.n	800ed76 <__aeabi_l2d+0x16>
 800ed70:	4240      	negs	r0, r0
 800ed72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ed76:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ed7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ed7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800ed82:	f43f aedc 	beq.w	800eb3e <__adddf3+0xe6>
 800ed86:	f04f 0203 	mov.w	r2, #3
 800ed8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ed8e:	bf18      	it	ne
 800ed90:	3203      	addne	r2, #3
 800ed92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ed96:	bf18      	it	ne
 800ed98:	3203      	addne	r2, #3
 800ed9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ed9e:	f1c2 0320 	rsb	r3, r2, #32
 800eda2:	fa00 fc03 	lsl.w	ip, r0, r3
 800eda6:	fa20 f002 	lsr.w	r0, r0, r2
 800edaa:	fa01 fe03 	lsl.w	lr, r1, r3
 800edae:	ea40 000e 	orr.w	r0, r0, lr
 800edb2:	fa21 f102 	lsr.w	r1, r1, r2
 800edb6:	4414      	add	r4, r2
 800edb8:	e6c1      	b.n	800eb3e <__adddf3+0xe6>
 800edba:	bf00      	nop

0800edbc <__aeabi_dmul>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800edc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800edc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800edca:	bf1d      	ittte	ne
 800edcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800edd0:	ea94 0f0c 	teqne	r4, ip
 800edd4:	ea95 0f0c 	teqne	r5, ip
 800edd8:	f000 f8de 	bleq	800ef98 <__aeabi_dmul+0x1dc>
 800eddc:	442c      	add	r4, r5
 800edde:	ea81 0603 	eor.w	r6, r1, r3
 800ede2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ede6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800edea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800edee:	bf18      	it	ne
 800edf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800edf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800edf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edfc:	d038      	beq.n	800ee70 <__aeabi_dmul+0xb4>
 800edfe:	fba0 ce02 	umull	ip, lr, r0, r2
 800ee02:	f04f 0500 	mov.w	r5, #0
 800ee06:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ee0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800ee0e:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ee12:	f04f 0600 	mov.w	r6, #0
 800ee16:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ee1a:	f09c 0f00 	teq	ip, #0
 800ee1e:	bf18      	it	ne
 800ee20:	f04e 0e01 	orrne.w	lr, lr, #1
 800ee24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ee28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ee2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ee30:	d204      	bcs.n	800ee3c <__aeabi_dmul+0x80>
 800ee32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ee36:	416d      	adcs	r5, r5
 800ee38:	eb46 0606 	adc.w	r6, r6, r6
 800ee3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ee40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ee44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ee48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ee4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ee50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ee54:	bf88      	it	hi
 800ee56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ee5a:	d81e      	bhi.n	800ee9a <__aeabi_dmul+0xde>
 800ee5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800ee60:	bf08      	it	eq
 800ee62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ee66:	f150 0000 	adcs.w	r0, r0, #0
 800ee6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ee6e:	bd70      	pop	{r4, r5, r6, pc}
 800ee70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ee74:	ea46 0101 	orr.w	r1, r6, r1
 800ee78:	ea40 0002 	orr.w	r0, r0, r2
 800ee7c:	ea81 0103 	eor.w	r1, r1, r3
 800ee80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ee84:	bfc2      	ittt	gt
 800ee86:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ee8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ee8e:	bd70      	popgt	{r4, r5, r6, pc}
 800ee90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ee94:	f04f 0e00 	mov.w	lr, #0
 800ee98:	3c01      	subs	r4, #1
 800ee9a:	f300 80ab 	bgt.w	800eff4 <__aeabi_dmul+0x238>
 800ee9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800eea2:	bfde      	ittt	le
 800eea4:	2000      	movle	r0, #0
 800eea6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800eeaa:	bd70      	pople	{r4, r5, r6, pc}
 800eeac:	f1c4 0400 	rsb	r4, r4, #0
 800eeb0:	3c20      	subs	r4, #32
 800eeb2:	da35      	bge.n	800ef20 <__aeabi_dmul+0x164>
 800eeb4:	340c      	adds	r4, #12
 800eeb6:	dc1b      	bgt.n	800eef0 <__aeabi_dmul+0x134>
 800eeb8:	f104 0414 	add.w	r4, r4, #20
 800eebc:	f1c4 0520 	rsb	r5, r4, #32
 800eec0:	fa00 f305 	lsl.w	r3, r0, r5
 800eec4:	fa20 f004 	lsr.w	r0, r0, r4
 800eec8:	fa01 f205 	lsl.w	r2, r1, r5
 800eecc:	ea40 0002 	orr.w	r0, r0, r2
 800eed0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800eed4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eed8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800eedc:	fa21 f604 	lsr.w	r6, r1, r4
 800eee0:	eb42 0106 	adc.w	r1, r2, r6
 800eee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800eee8:	bf08      	it	eq
 800eeea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800eeee:	bd70      	pop	{r4, r5, r6, pc}
 800eef0:	f1c4 040c 	rsb	r4, r4, #12
 800eef4:	f1c4 0520 	rsb	r5, r4, #32
 800eef8:	fa00 f304 	lsl.w	r3, r0, r4
 800eefc:	fa20 f005 	lsr.w	r0, r0, r5
 800ef00:	fa01 f204 	lsl.w	r2, r1, r4
 800ef04:	ea40 0002 	orr.w	r0, r0, r2
 800ef08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ef0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ef10:	f141 0100 	adc.w	r1, r1, #0
 800ef14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ef18:	bf08      	it	eq
 800ef1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	f1c4 0520 	rsb	r5, r4, #32
 800ef24:	fa00 f205 	lsl.w	r2, r0, r5
 800ef28:	ea4e 0e02 	orr.w	lr, lr, r2
 800ef2c:	fa20 f304 	lsr.w	r3, r0, r4
 800ef30:	fa01 f205 	lsl.w	r2, r1, r5
 800ef34:	ea43 0302 	orr.w	r3, r3, r2
 800ef38:	fa21 f004 	lsr.w	r0, r1, r4
 800ef3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ef40:	fa21 f204 	lsr.w	r2, r1, r4
 800ef44:	ea20 0002 	bic.w	r0, r0, r2
 800ef48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ef4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ef50:	bf08      	it	eq
 800ef52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ef56:	bd70      	pop	{r4, r5, r6, pc}
 800ef58:	f094 0f00 	teq	r4, #0
 800ef5c:	d10f      	bne.n	800ef7e <__aeabi_dmul+0x1c2>
 800ef5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ef62:	0040      	lsls	r0, r0, #1
 800ef64:	eb41 0101 	adc.w	r1, r1, r1
 800ef68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ef6c:	bf08      	it	eq
 800ef6e:	3c01      	subeq	r4, #1
 800ef70:	d0f7      	beq.n	800ef62 <__aeabi_dmul+0x1a6>
 800ef72:	ea41 0106 	orr.w	r1, r1, r6
 800ef76:	f095 0f00 	teq	r5, #0
 800ef7a:	bf18      	it	ne
 800ef7c:	4770      	bxne	lr
 800ef7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800ef82:	0052      	lsls	r2, r2, #1
 800ef84:	eb43 0303 	adc.w	r3, r3, r3
 800ef88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ef8c:	bf08      	it	eq
 800ef8e:	3d01      	subeq	r5, #1
 800ef90:	d0f7      	beq.n	800ef82 <__aeabi_dmul+0x1c6>
 800ef92:	ea43 0306 	orr.w	r3, r3, r6
 800ef96:	4770      	bx	lr
 800ef98:	ea94 0f0c 	teq	r4, ip
 800ef9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800efa0:	bf18      	it	ne
 800efa2:	ea95 0f0c 	teqne	r5, ip
 800efa6:	d00c      	beq.n	800efc2 <__aeabi_dmul+0x206>
 800efa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800efac:	bf18      	it	ne
 800efae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800efb2:	d1d1      	bne.n	800ef58 <__aeabi_dmul+0x19c>
 800efb4:	ea81 0103 	eor.w	r1, r1, r3
 800efb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800efbc:	f04f 0000 	mov.w	r0, #0
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800efc6:	bf06      	itte	eq
 800efc8:	4610      	moveq	r0, r2
 800efca:	4619      	moveq	r1, r3
 800efcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800efd0:	d019      	beq.n	800f006 <__aeabi_dmul+0x24a>
 800efd2:	ea94 0f0c 	teq	r4, ip
 800efd6:	d102      	bne.n	800efde <__aeabi_dmul+0x222>
 800efd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800efdc:	d113      	bne.n	800f006 <__aeabi_dmul+0x24a>
 800efde:	ea95 0f0c 	teq	r5, ip
 800efe2:	d105      	bne.n	800eff0 <__aeabi_dmul+0x234>
 800efe4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800efe8:	bf1c      	itt	ne
 800efea:	4610      	movne	r0, r2
 800efec:	4619      	movne	r1, r3
 800efee:	d10a      	bne.n	800f006 <__aeabi_dmul+0x24a>
 800eff0:	ea81 0103 	eor.w	r1, r1, r3
 800eff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800eff8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800effc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f000:	f04f 0000 	mov.w	r0, #0
 800f004:	bd70      	pop	{r4, r5, r6, pc}
 800f006:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800f00a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800f00e:	bd70      	pop	{r4, r5, r6, pc}

0800f010 <__aeabi_ddiv>:
 800f010:	b570      	push	{r4, r5, r6, lr}
 800f012:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800f016:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800f01a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800f01e:	bf1d      	ittte	ne
 800f020:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800f024:	ea94 0f0c 	teqne	r4, ip
 800f028:	ea95 0f0c 	teqne	r5, ip
 800f02c:	f000 f8a7 	bleq	800f17e <__aeabi_ddiv+0x16e>
 800f030:	eba4 0405 	sub.w	r4, r4, r5
 800f034:	ea81 0e03 	eor.w	lr, r1, r3
 800f038:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800f03c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800f040:	f000 8088 	beq.w	800f154 <__aeabi_ddiv+0x144>
 800f044:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f048:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800f04c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800f050:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800f054:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f058:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800f05c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800f060:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800f064:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800f068:	429d      	cmp	r5, r3
 800f06a:	bf08      	it	eq
 800f06c:	4296      	cmpeq	r6, r2
 800f06e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800f072:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800f076:	d202      	bcs.n	800f07e <__aeabi_ddiv+0x6e>
 800f078:	085b      	lsrs	r3, r3, #1
 800f07a:	ea4f 0232 	mov.w	r2, r2, rrx
 800f07e:	1ab6      	subs	r6, r6, r2
 800f080:	eb65 0503 	sbc.w	r5, r5, r3
 800f084:	085b      	lsrs	r3, r3, #1
 800f086:	ea4f 0232 	mov.w	r2, r2, rrx
 800f08a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800f08e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800f092:	ebb6 0e02 	subs.w	lr, r6, r2
 800f096:	eb75 0e03 	sbcs.w	lr, r5, r3
 800f09a:	bf22      	ittt	cs
 800f09c:	1ab6      	subcs	r6, r6, r2
 800f09e:	4675      	movcs	r5, lr
 800f0a0:	ea40 000c 	orrcs.w	r0, r0, ip
 800f0a4:	085b      	lsrs	r3, r3, #1
 800f0a6:	ea4f 0232 	mov.w	r2, r2, rrx
 800f0aa:	ebb6 0e02 	subs.w	lr, r6, r2
 800f0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 800f0b2:	bf22      	ittt	cs
 800f0b4:	1ab6      	subcs	r6, r6, r2
 800f0b6:	4675      	movcs	r5, lr
 800f0b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800f0bc:	085b      	lsrs	r3, r3, #1
 800f0be:	ea4f 0232 	mov.w	r2, r2, rrx
 800f0c2:	ebb6 0e02 	subs.w	lr, r6, r2
 800f0c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800f0ca:	bf22      	ittt	cs
 800f0cc:	1ab6      	subcs	r6, r6, r2
 800f0ce:	4675      	movcs	r5, lr
 800f0d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800f0d4:	085b      	lsrs	r3, r3, #1
 800f0d6:	ea4f 0232 	mov.w	r2, r2, rrx
 800f0da:	ebb6 0e02 	subs.w	lr, r6, r2
 800f0de:	eb75 0e03 	sbcs.w	lr, r5, r3
 800f0e2:	bf22      	ittt	cs
 800f0e4:	1ab6      	subcs	r6, r6, r2
 800f0e6:	4675      	movcs	r5, lr
 800f0e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800f0ec:	ea55 0e06 	orrs.w	lr, r5, r6
 800f0f0:	d018      	beq.n	800f124 <__aeabi_ddiv+0x114>
 800f0f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800f0f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800f0fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800f0fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800f102:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800f106:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800f10a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800f10e:	d1c0      	bne.n	800f092 <__aeabi_ddiv+0x82>
 800f110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800f114:	d10b      	bne.n	800f12e <__aeabi_ddiv+0x11e>
 800f116:	ea41 0100 	orr.w	r1, r1, r0
 800f11a:	f04f 0000 	mov.w	r0, #0
 800f11e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800f122:	e7b6      	b.n	800f092 <__aeabi_ddiv+0x82>
 800f124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800f128:	bf04      	itt	eq
 800f12a:	4301      	orreq	r1, r0
 800f12c:	2000      	moveq	r0, #0
 800f12e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800f132:	bf88      	it	hi
 800f134:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800f138:	f63f aeaf 	bhi.w	800ee9a <__aeabi_dmul+0xde>
 800f13c:	ebb5 0c03 	subs.w	ip, r5, r3
 800f140:	bf04      	itt	eq
 800f142:	ebb6 0c02 	subseq.w	ip, r6, r2
 800f146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800f14a:	f150 0000 	adcs.w	r0, r0, #0
 800f14e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800f152:	bd70      	pop	{r4, r5, r6, pc}
 800f154:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800f158:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800f15c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800f160:	bfc2      	ittt	gt
 800f162:	ebd4 050c 	rsbsgt	r5, r4, ip
 800f166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800f16a:	bd70      	popgt	{r4, r5, r6, pc}
 800f16c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f170:	f04f 0e00 	mov.w	lr, #0
 800f174:	3c01      	subs	r4, #1
 800f176:	e690      	b.n	800ee9a <__aeabi_dmul+0xde>
 800f178:	ea45 0e06 	orr.w	lr, r5, r6
 800f17c:	e68d      	b.n	800ee9a <__aeabi_dmul+0xde>
 800f17e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800f182:	ea94 0f0c 	teq	r4, ip
 800f186:	bf08      	it	eq
 800f188:	ea95 0f0c 	teqeq	r5, ip
 800f18c:	f43f af3b 	beq.w	800f006 <__aeabi_dmul+0x24a>
 800f190:	ea94 0f0c 	teq	r4, ip
 800f194:	d10a      	bne.n	800f1ac <__aeabi_ddiv+0x19c>
 800f196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800f19a:	f47f af34 	bne.w	800f006 <__aeabi_dmul+0x24a>
 800f19e:	ea95 0f0c 	teq	r5, ip
 800f1a2:	f47f af25 	bne.w	800eff0 <__aeabi_dmul+0x234>
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	e72c      	b.n	800f006 <__aeabi_dmul+0x24a>
 800f1ac:	ea95 0f0c 	teq	r5, ip
 800f1b0:	d106      	bne.n	800f1c0 <__aeabi_ddiv+0x1b0>
 800f1b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800f1b6:	f43f aefd 	beq.w	800efb4 <__aeabi_dmul+0x1f8>
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	4619      	mov	r1, r3
 800f1be:	e722      	b.n	800f006 <__aeabi_dmul+0x24a>
 800f1c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800f1c4:	bf18      	it	ne
 800f1c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800f1ca:	f47f aec5 	bne.w	800ef58 <__aeabi_dmul+0x19c>
 800f1ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800f1d2:	f47f af0d 	bne.w	800eff0 <__aeabi_dmul+0x234>
 800f1d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800f1da:	f47f aeeb 	bne.w	800efb4 <__aeabi_dmul+0x1f8>
 800f1de:	e712      	b.n	800f006 <__aeabi_dmul+0x24a>

0800f1e0 <__gedf2>:
 800f1e0:	f04f 3cff 	mov.w	ip, #4294967295
 800f1e4:	e006      	b.n	800f1f4 <__cmpdf2+0x4>
 800f1e6:	bf00      	nop

0800f1e8 <__ledf2>:
 800f1e8:	f04f 0c01 	mov.w	ip, #1
 800f1ec:	e002      	b.n	800f1f4 <__cmpdf2+0x4>
 800f1ee:	bf00      	nop

0800f1f0 <__cmpdf2>:
 800f1f0:	f04f 0c01 	mov.w	ip, #1
 800f1f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800f1f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f1fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f204:	bf18      	it	ne
 800f206:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800f20a:	d01b      	beq.n	800f244 <__cmpdf2+0x54>
 800f20c:	b001      	add	sp, #4
 800f20e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800f212:	bf0c      	ite	eq
 800f214:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800f218:	ea91 0f03 	teqne	r1, r3
 800f21c:	bf02      	ittt	eq
 800f21e:	ea90 0f02 	teqeq	r0, r2
 800f222:	2000      	moveq	r0, #0
 800f224:	4770      	bxeq	lr
 800f226:	f110 0f00 	cmn.w	r0, #0
 800f22a:	ea91 0f03 	teq	r1, r3
 800f22e:	bf58      	it	pl
 800f230:	4299      	cmppl	r1, r3
 800f232:	bf08      	it	eq
 800f234:	4290      	cmpeq	r0, r2
 800f236:	bf2c      	ite	cs
 800f238:	17d8      	asrcs	r0, r3, #31
 800f23a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800f23e:	f040 0001 	orr.w	r0, r0, #1
 800f242:	4770      	bx	lr
 800f244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800f248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f24c:	d102      	bne.n	800f254 <__cmpdf2+0x64>
 800f24e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800f252:	d107      	bne.n	800f264 <__cmpdf2+0x74>
 800f254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800f25c:	d1d6      	bne.n	800f20c <__cmpdf2+0x1c>
 800f25e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800f262:	d0d3      	beq.n	800f20c <__cmpdf2+0x1c>
 800f264:	f85d 0b04 	ldr.w	r0, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop

0800f26c <__aeabi_cdrcmple>:
 800f26c:	4684      	mov	ip, r0
 800f26e:	4610      	mov	r0, r2
 800f270:	4662      	mov	r2, ip
 800f272:	468c      	mov	ip, r1
 800f274:	4619      	mov	r1, r3
 800f276:	4663      	mov	r3, ip
 800f278:	e000      	b.n	800f27c <__aeabi_cdcmpeq>
 800f27a:	bf00      	nop

0800f27c <__aeabi_cdcmpeq>:
 800f27c:	b501      	push	{r0, lr}
 800f27e:	f7ff ffb7 	bl	800f1f0 <__cmpdf2>
 800f282:	2800      	cmp	r0, #0
 800f284:	bf48      	it	mi
 800f286:	f110 0f00 	cmnmi.w	r0, #0
 800f28a:	bd01      	pop	{r0, pc}

0800f28c <__aeabi_dcmpeq>:
 800f28c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f290:	f7ff fff4 	bl	800f27c <__aeabi_cdcmpeq>
 800f294:	bf0c      	ite	eq
 800f296:	2001      	moveq	r0, #1
 800f298:	2000      	movne	r0, #0
 800f29a:	f85d fb08 	ldr.w	pc, [sp], #8
 800f29e:	bf00      	nop

0800f2a0 <__aeabi_dcmplt>:
 800f2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f2a4:	f7ff ffea 	bl	800f27c <__aeabi_cdcmpeq>
 800f2a8:	bf34      	ite	cc
 800f2aa:	2001      	movcc	r0, #1
 800f2ac:	2000      	movcs	r0, #0
 800f2ae:	f85d fb08 	ldr.w	pc, [sp], #8
 800f2b2:	bf00      	nop

0800f2b4 <__aeabi_dcmple>:
 800f2b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f2b8:	f7ff ffe0 	bl	800f27c <__aeabi_cdcmpeq>
 800f2bc:	bf94      	ite	ls
 800f2be:	2001      	movls	r0, #1
 800f2c0:	2000      	movhi	r0, #0
 800f2c2:	f85d fb08 	ldr.w	pc, [sp], #8
 800f2c6:	bf00      	nop

0800f2c8 <__aeabi_dcmpge>:
 800f2c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f2cc:	f7ff ffce 	bl	800f26c <__aeabi_cdrcmple>
 800f2d0:	bf94      	ite	ls
 800f2d2:	2001      	movls	r0, #1
 800f2d4:	2000      	movhi	r0, #0
 800f2d6:	f85d fb08 	ldr.w	pc, [sp], #8
 800f2da:	bf00      	nop

0800f2dc <__aeabi_dcmpgt>:
 800f2dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800f2e0:	f7ff ffc4 	bl	800f26c <__aeabi_cdrcmple>
 800f2e4:	bf34      	ite	cc
 800f2e6:	2001      	movcc	r0, #1
 800f2e8:	2000      	movcs	r0, #0
 800f2ea:	f85d fb08 	ldr.w	pc, [sp], #8
 800f2ee:	bf00      	nop

0800f2f0 <__aeabi_d2iz>:
 800f2f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800f2f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800f2f8:	d215      	bcs.n	800f326 <__aeabi_d2iz+0x36>
 800f2fa:	d511      	bpl.n	800f320 <__aeabi_d2iz+0x30>
 800f2fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800f300:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800f304:	d912      	bls.n	800f32c <__aeabi_d2iz+0x3c>
 800f306:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800f30a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f30e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800f316:	fa23 f002 	lsr.w	r0, r3, r2
 800f31a:	bf18      	it	ne
 800f31c:	4240      	negne	r0, r0
 800f31e:	4770      	bx	lr
 800f320:	f04f 0000 	mov.w	r0, #0
 800f324:	4770      	bx	lr
 800f326:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800f32a:	d105      	bne.n	800f338 <__aeabi_d2iz+0x48>
 800f32c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800f330:	bf08      	it	eq
 800f332:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800f336:	4770      	bx	lr
 800f338:	f04f 0000 	mov.w	r0, #0
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop

0800f340 <__aeabi_d2uiz>:
 800f340:	004a      	lsls	r2, r1, #1
 800f342:	d211      	bcs.n	800f368 <__aeabi_d2uiz+0x28>
 800f344:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800f348:	d211      	bcs.n	800f36e <__aeabi_d2uiz+0x2e>
 800f34a:	d50d      	bpl.n	800f368 <__aeabi_d2uiz+0x28>
 800f34c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800f350:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800f354:	d40e      	bmi.n	800f374 <__aeabi_d2uiz+0x34>
 800f356:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800f35a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f35e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800f362:	fa23 f002 	lsr.w	r0, r3, r2
 800f366:	4770      	bx	lr
 800f368:	f04f 0000 	mov.w	r0, #0
 800f36c:	4770      	bx	lr
 800f36e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800f372:	d102      	bne.n	800f37a <__aeabi_d2uiz+0x3a>
 800f374:	f04f 30ff 	mov.w	r0, #4294967295
 800f378:	4770      	bx	lr
 800f37a:	f04f 0000 	mov.w	r0, #0
 800f37e:	4770      	bx	lr

0800f380 <__aeabi_uldivmod>:
 800f380:	b94b      	cbnz	r3, 800f396 <__aeabi_uldivmod+0x16>
 800f382:	b942      	cbnz	r2, 800f396 <__aeabi_uldivmod+0x16>
 800f384:	2900      	cmp	r1, #0
 800f386:	bf08      	it	eq
 800f388:	2800      	cmpeq	r0, #0
 800f38a:	d002      	beq.n	800f392 <__aeabi_uldivmod+0x12>
 800f38c:	f04f 31ff 	mov.w	r1, #4294967295
 800f390:	4608      	mov	r0, r1
 800f392:	f7ff bb59 	b.w	800ea48 <__aeabi_idiv0>
 800f396:	b082      	sub	sp, #8
 800f398:	46ec      	mov	ip, sp
 800f39a:	e92d 5000 	stmdb	sp!, {ip, lr}
 800f39e:	f000 f81d 	bl	800f3dc <__gnu_uldivmod_helper>
 800f3a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f3a6:	b002      	add	sp, #8
 800f3a8:	bc0c      	pop	{r2, r3}
 800f3aa:	4770      	bx	lr

0800f3ac <__gnu_ldivmod_helper>:
 800f3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b0:	4617      	mov	r7, r2
 800f3b2:	4680      	mov	r8, r0
 800f3b4:	4689      	mov	r9, r1
 800f3b6:	469a      	mov	sl, r3
 800f3b8:	9e08      	ldr	r6, [sp, #32]
 800f3ba:	f000 f827 	bl	800f40c <__divdi3>
 800f3be:	fba7 4500 	umull	r4, r5, r7, r0
 800f3c2:	fb07 f701 	mul.w	r7, r7, r1
 800f3c6:	fb00 720a 	mla	r2, r0, sl, r7
 800f3ca:	4415      	add	r5, r2
 800f3cc:	ebb8 0404 	subs.w	r4, r8, r4
 800f3d0:	eb69 0505 	sbc.w	r5, r9, r5
 800f3d4:	e9c6 4500 	strd	r4, r5, [r6]
 800f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f3dc <__gnu_uldivmod_helper>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4617      	mov	r7, r2
 800f3e2:	4680      	mov	r8, r0
 800f3e4:	4689      	mov	r9, r1
 800f3e6:	461d      	mov	r5, r3
 800f3e8:	9e08      	ldr	r6, [sp, #32]
 800f3ea:	f000 f9b9 	bl	800f760 <__udivdi3>
 800f3ee:	fb00 f305 	mul.w	r3, r0, r5
 800f3f2:	fba0 4507 	umull	r4, r5, r0, r7
 800f3f6:	fb07 3701 	mla	r7, r7, r1, r3
 800f3fa:	443d      	add	r5, r7
 800f3fc:	ebb8 0404 	subs.w	r4, r8, r4
 800f400:	eb69 0505 	sbc.w	r5, r9, r5
 800f404:	e9c6 4500 	strd	r4, r5, [r6]
 800f408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f40c <__divdi3>:
 800f40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f410:	4244      	negs	r4, r0
 800f412:	eb61 0541 	sbc.w	r5, r1, r1, lsl #1
 800f416:	2900      	cmp	r1, #0
 800f418:	f04f 36ff 	mov.w	r6, #4294967295
 800f41c:	bfa2      	ittt	ge
 800f41e:	4604      	movge	r4, r0
 800f420:	460d      	movge	r5, r1
 800f422:	2600      	movge	r6, #0
 800f424:	2b00      	cmp	r3, #0
 800f426:	b085      	sub	sp, #20
 800f428:	f2c0 80c7 	blt.w	800f5ba <__divdi3+0x1ae>
 800f42c:	4620      	mov	r0, r4
 800f42e:	46aa      	mov	sl, r5
 800f430:	4694      	mov	ip, r2
 800f432:	4619      	mov	r1, r3
 800f434:	4690      	mov	r8, r2
 800f436:	4627      	mov	r7, r4
 800f438:	46a9      	mov	r9, r5
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d158      	bne.n	800f4f0 <__divdi3+0xe4>
 800f43e:	42aa      	cmp	r2, r5
 800f440:	d96c      	bls.n	800f51c <__divdi3+0x110>
 800f442:	fab2 f382 	clz	r3, r2
 800f446:	b15b      	cbz	r3, 800f460 <__divdi3+0x54>
 800f448:	f1c3 0220 	rsb	r2, r3, #32
 800f44c:	fa05 f903 	lsl.w	r9, r5, r3
 800f450:	fa24 f202 	lsr.w	r2, r4, r2
 800f454:	fa0c f803 	lsl.w	r8, ip, r3
 800f458:	ea42 0909 	orr.w	r9, r2, r9
 800f45c:	fa04 f703 	lsl.w	r7, r4, r3
 800f460:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800f464:	4648      	mov	r0, r9
 800f466:	4621      	mov	r1, r4
 800f468:	fa1f fa88 	uxth.w	sl, r8
 800f46c:	f7ff f9b0 	bl	800e7d0 <__aeabi_uidiv>
 800f470:	4621      	mov	r1, r4
 800f472:	4683      	mov	fp, r0
 800f474:	4648      	mov	r0, r9
 800f476:	f7ff fad9 	bl	800ea2c <__aeabi_uidivmod>
 800f47a:	0c3a      	lsrs	r2, r7, #16
 800f47c:	fb0a f00b 	mul.w	r0, sl, fp
 800f480:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800f484:	4288      	cmp	r0, r1
 800f486:	d90b      	bls.n	800f4a0 <__divdi3+0x94>
 800f488:	eb11 0108 	adds.w	r1, r1, r8
 800f48c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f490:	d205      	bcs.n	800f49e <__divdi3+0x92>
 800f492:	4288      	cmp	r0, r1
 800f494:	bf84      	itt	hi
 800f496:	f1ab 0b02 	subhi.w	fp, fp, #2
 800f49a:	4441      	addhi	r1, r8
 800f49c:	d800      	bhi.n	800f4a0 <__divdi3+0x94>
 800f49e:	469b      	mov	fp, r3
 800f4a0:	ebc0 0901 	rsb	r9, r0, r1
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4648      	mov	r0, r9
 800f4a8:	b2bf      	uxth	r7, r7
 800f4aa:	f7ff f991 	bl	800e7d0 <__aeabi_uidiv>
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	4648      	mov	r0, r9
 800f4b4:	f7ff faba 	bl	800ea2c <__aeabi_uidivmod>
 800f4b8:	fb0a fa05 	mul.w	sl, sl, r5
 800f4bc:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800f4c0:	458a      	cmp	sl, r1
 800f4c2:	d909      	bls.n	800f4d8 <__divdi3+0xcc>
 800f4c4:	eb11 0808 	adds.w	r8, r1, r8
 800f4c8:	f105 33ff 	add.w	r3, r5, #4294967295
 800f4cc:	d203      	bcs.n	800f4d6 <__divdi3+0xca>
 800f4ce:	45c2      	cmp	sl, r8
 800f4d0:	bf88      	it	hi
 800f4d2:	3d02      	subhi	r5, #2
 800f4d4:	d800      	bhi.n	800f4d8 <__divdi3+0xcc>
 800f4d6:	461d      	mov	r5, r3
 800f4d8:	ea45 430b 	orr.w	r3, r5, fp, lsl #16
 800f4dc:	2400      	movs	r4, #0
 800f4de:	4618      	mov	r0, r3
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	b116      	cbz	r6, 800f4ea <__divdi3+0xde>
 800f4e4:	4240      	negs	r0, r0
 800f4e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800f4ea:	b005      	add	sp, #20
 800f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f0:	42ab      	cmp	r3, r5
 800f4f2:	bf84      	itt	hi
 800f4f4:	2400      	movhi	r4, #0
 800f4f6:	4623      	movhi	r3, r4
 800f4f8:	d8f1      	bhi.n	800f4de <__divdi3+0xd2>
 800f4fa:	fab1 f581 	clz	r5, r1
 800f4fe:	2d00      	cmp	r5, #0
 800f500:	f040 80b5 	bne.w	800f66e <__divdi3+0x262>
 800f504:	4551      	cmp	r1, sl
 800f506:	bf28      	it	cs
 800f508:	4282      	cmpcs	r2, r0
 800f50a:	bf8c      	ite	hi
 800f50c:	2400      	movhi	r4, #0
 800f50e:	2401      	movls	r4, #1
 800f510:	bf9c      	itt	ls
 800f512:	2301      	movls	r3, #1
 800f514:	462c      	movls	r4, r5
 800f516:	d9e2      	bls.n	800f4de <__divdi3+0xd2>
 800f518:	4623      	mov	r3, r4
 800f51a:	e7e0      	b.n	800f4de <__divdi3+0xd2>
 800f51c:	b922      	cbnz	r2, 800f528 <__divdi3+0x11c>
 800f51e:	4611      	mov	r1, r2
 800f520:	2001      	movs	r0, #1
 800f522:	f7ff f955 	bl	800e7d0 <__aeabi_uidiv>
 800f526:	4680      	mov	r8, r0
 800f528:	fab8 f388 	clz	r3, r8
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d149      	bne.n	800f5c4 <__divdi3+0x1b8>
 800f530:	ebc8 0909 	rsb	r9, r8, r9
 800f534:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800f538:	fa1f fa88 	uxth.w	sl, r8
 800f53c:	2401      	movs	r4, #1
 800f53e:	4629      	mov	r1, r5
 800f540:	4648      	mov	r0, r9
 800f542:	f7ff f945 	bl	800e7d0 <__aeabi_uidiv>
 800f546:	4629      	mov	r1, r5
 800f548:	4683      	mov	fp, r0
 800f54a:	4648      	mov	r0, r9
 800f54c:	f7ff fa6e 	bl	800ea2c <__aeabi_uidivmod>
 800f550:	0c3a      	lsrs	r2, r7, #16
 800f552:	fb0a f00b 	mul.w	r0, sl, fp
 800f556:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800f55a:	4288      	cmp	r0, r1
 800f55c:	d90c      	bls.n	800f578 <__divdi3+0x16c>
 800f55e:	eb11 0108 	adds.w	r1, r1, r8
 800f562:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f566:	f080 80f2 	bcs.w	800f74e <__divdi3+0x342>
 800f56a:	4288      	cmp	r0, r1
 800f56c:	bf84      	itt	hi
 800f56e:	f1ab 0b02 	subhi.w	fp, fp, #2
 800f572:	4441      	addhi	r1, r8
 800f574:	f240 80eb 	bls.w	800f74e <__divdi3+0x342>
 800f578:	1a0a      	subs	r2, r1, r0
 800f57a:	4629      	mov	r1, r5
 800f57c:	4610      	mov	r0, r2
 800f57e:	9201      	str	r2, [sp, #4]
 800f580:	f7ff f926 	bl	800e7d0 <__aeabi_uidiv>
 800f584:	9a01      	ldr	r2, [sp, #4]
 800f586:	4629      	mov	r1, r5
 800f588:	b2bf      	uxth	r7, r7
 800f58a:	4681      	mov	r9, r0
 800f58c:	4610      	mov	r0, r2
 800f58e:	f7ff fa4d 	bl	800ea2c <__aeabi_uidivmod>
 800f592:	fb0a fa09 	mul.w	sl, sl, r9
 800f596:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800f59a:	458a      	cmp	sl, r1
 800f59c:	d90a      	bls.n	800f5b4 <__divdi3+0x1a8>
 800f59e:	eb11 0808 	adds.w	r8, r1, r8
 800f5a2:	f109 33ff 	add.w	r3, r9, #4294967295
 800f5a6:	d204      	bcs.n	800f5b2 <__divdi3+0x1a6>
 800f5a8:	45c2      	cmp	sl, r8
 800f5aa:	bf88      	it	hi
 800f5ac:	f1a9 0902 	subhi.w	r9, r9, #2
 800f5b0:	d800      	bhi.n	800f5b4 <__divdi3+0x1a8>
 800f5b2:	4699      	mov	r9, r3
 800f5b4:	ea49 430b 	orr.w	r3, r9, fp, lsl #16
 800f5b8:	e791      	b.n	800f4de <__divdi3+0xd2>
 800f5ba:	43f6      	mvns	r6, r6
 800f5bc:	4252      	negs	r2, r2
 800f5be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800f5c2:	e733      	b.n	800f42c <__divdi3+0x20>
 800f5c4:	fa08 f803 	lsl.w	r8, r8, r3
 800f5c8:	f1c3 0b20 	rsb	fp, r3, #32
 800f5cc:	fa29 f40b 	lsr.w	r4, r9, fp
 800f5d0:	fa09 f903 	lsl.w	r9, r9, r3
 800f5d4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800f5d8:	4620      	mov	r0, r4
 800f5da:	4629      	mov	r1, r5
 800f5dc:	fa27 fb0b 	lsr.w	fp, r7, fp
 800f5e0:	409f      	lsls	r7, r3
 800f5e2:	f7ff f8f5 	bl	800e7d0 <__aeabi_uidiv>
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	fa1f fa88 	uxth.w	sl, r8
 800f5ec:	ea4b 0b09 	orr.w	fp, fp, r9
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	9201      	str	r2, [sp, #4]
 800f5f6:	f7ff fa19 	bl	800ea2c <__aeabi_uidivmod>
 800f5fa:	9a01      	ldr	r2, [sp, #4]
 800f5fc:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800f600:	fb0a f002 	mul.w	r0, sl, r2
 800f604:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800f608:	4288      	cmp	r0, r1
 800f60a:	d90b      	bls.n	800f624 <__divdi3+0x218>
 800f60c:	eb11 0108 	adds.w	r1, r1, r8
 800f610:	f102 33ff 	add.w	r3, r2, #4294967295
 800f614:	f080 80a1 	bcs.w	800f75a <__divdi3+0x34e>
 800f618:	4288      	cmp	r0, r1
 800f61a:	bf84      	itt	hi
 800f61c:	3a02      	subhi	r2, #2
 800f61e:	4441      	addhi	r1, r8
 800f620:	f240 809b 	bls.w	800f75a <__divdi3+0x34e>
 800f624:	ebc0 0901 	rsb	r9, r0, r1
 800f628:	4629      	mov	r1, r5
 800f62a:	4648      	mov	r0, r9
 800f62c:	9201      	str	r2, [sp, #4]
 800f62e:	f7ff f8cf 	bl	800e7d0 <__aeabi_uidiv>
 800f632:	4629      	mov	r1, r5
 800f634:	fa1f fb8b 	uxth.w	fp, fp
 800f638:	4604      	mov	r4, r0
 800f63a:	4648      	mov	r0, r9
 800f63c:	f7ff f9f6 	bl	800ea2c <__aeabi_uidivmod>
 800f640:	9a01      	ldr	r2, [sp, #4]
 800f642:	fb0a f904 	mul.w	r9, sl, r4
 800f646:	ea4b 4101 	orr.w	r1, fp, r1, lsl #16
 800f64a:	4589      	cmp	r9, r1
 800f64c:	d90a      	bls.n	800f664 <__divdi3+0x258>
 800f64e:	eb11 0108 	adds.w	r1, r1, r8
 800f652:	f104 33ff 	add.w	r3, r4, #4294967295
 800f656:	d204      	bcs.n	800f662 <__divdi3+0x256>
 800f658:	4589      	cmp	r9, r1
 800f65a:	bf84      	itt	hi
 800f65c:	3c02      	subhi	r4, #2
 800f65e:	4441      	addhi	r1, r8
 800f660:	d800      	bhi.n	800f664 <__divdi3+0x258>
 800f662:	461c      	mov	r4, r3
 800f664:	ebc9 0901 	rsb	r9, r9, r1
 800f668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f66c:	e767      	b.n	800f53e <__divdi3+0x132>
 800f66e:	f1c5 0320 	rsb	r3, r5, #32
 800f672:	40a9      	lsls	r1, r5
 800f674:	fa22 f803 	lsr.w	r8, r2, r3
 800f678:	fa2a fb03 	lsr.w	fp, sl, r3
 800f67c:	ea48 0801 	orr.w	r8, r8, r1
 800f680:	fa20 f303 	lsr.w	r3, r0, r3
 800f684:	fa0a fa05 	lsl.w	sl, sl, r5
 800f688:	4658      	mov	r0, fp
 800f68a:	ea4f 4918 	mov.w	r9, r8, lsr #16
 800f68e:	fa02 fc05 	lsl.w	ip, r2, r5
 800f692:	4649      	mov	r1, r9
 800f694:	ea43 0a0a 	orr.w	sl, r3, sl
 800f698:	f8cd c00c 	str.w	ip, [sp, #12]
 800f69c:	f7ff f898 	bl	800e7d0 <__aeabi_uidiv>
 800f6a0:	4649      	mov	r1, r9
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	4658      	mov	r0, fp
 800f6a6:	f7ff f9c1 	bl	800ea2c <__aeabi_uidivmod>
 800f6aa:	fa1f f288 	uxth.w	r2, r8
 800f6ae:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
 800f6b2:	fb02 f004 	mul.w	r0, r2, r4
 800f6b6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 800f6ba:	4570      	cmp	r0, lr
 800f6bc:	d909      	bls.n	800f6d2 <__divdi3+0x2c6>
 800f6be:	eb1e 0e08 	adds.w	lr, lr, r8
 800f6c2:	f104 31ff 	add.w	r1, r4, #4294967295
 800f6c6:	d246      	bcs.n	800f756 <__divdi3+0x34a>
 800f6c8:	4570      	cmp	r0, lr
 800f6ca:	bf84      	itt	hi
 800f6cc:	3c02      	subhi	r4, #2
 800f6ce:	44c6      	addhi	lr, r8
 800f6d0:	d941      	bls.n	800f756 <__divdi3+0x34a>
 800f6d2:	ebc0 0c0e 	rsb	ip, r0, lr
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	4660      	mov	r0, ip
 800f6da:	9201      	str	r2, [sp, #4]
 800f6dc:	f8cd c008 	str.w	ip, [sp, #8]
 800f6e0:	f7ff f876 	bl	800e7d0 <__aeabi_uidiv>
 800f6e4:	f8dd c008 	ldr.w	ip, [sp, #8]
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	fa1f fa8a 	uxth.w	sl, sl
 800f6ee:	4683      	mov	fp, r0
 800f6f0:	4660      	mov	r0, ip
 800f6f2:	f7ff f99b 	bl	800ea2c <__aeabi_uidivmod>
 800f6f6:	9a01      	ldr	r2, [sp, #4]
 800f6f8:	fb02 f20b 	mul.w	r2, r2, fp
 800f6fc:	ea4a 4101 	orr.w	r1, sl, r1, lsl #16
 800f700:	428a      	cmp	r2, r1
 800f702:	d90a      	bls.n	800f71a <__divdi3+0x30e>
 800f704:	eb11 0108 	adds.w	r1, r1, r8
 800f708:	f10b 30ff 	add.w	r0, fp, #4294967295
 800f70c:	d221      	bcs.n	800f752 <__divdi3+0x346>
 800f70e:	428a      	cmp	r2, r1
 800f710:	bf84      	itt	hi
 800f712:	f1ab 0b02 	subhi.w	fp, fp, #2
 800f716:	4441      	addhi	r1, r8
 800f718:	d91b      	bls.n	800f752 <__divdi3+0x346>
 800f71a:	9803      	ldr	r0, [sp, #12]
 800f71c:	ea4b 4b04 	orr.w	fp, fp, r4, lsl #16
 800f720:	1a89      	subs	r1, r1, r2
 800f722:	fbab 2300 	umull	r2, r3, fp, r0
 800f726:	4299      	cmp	r1, r3
 800f728:	d30d      	bcc.n	800f746 <__divdi3+0x33a>
 800f72a:	bf14      	ite	ne
 800f72c:	2300      	movne	r3, #0
 800f72e:	2301      	moveq	r3, #1
 800f730:	fa07 f405 	lsl.w	r4, r7, r5
 800f734:	4294      	cmp	r4, r2
 800f736:	bf2c      	ite	cs
 800f738:	2400      	movcs	r4, #0
 800f73a:	f003 0401 	andcc.w	r4, r3, #1
 800f73e:	465b      	mov	r3, fp
 800f740:	2c00      	cmp	r4, #0
 800f742:	f43f aecc 	beq.w	800f4de <__divdi3+0xd2>
 800f746:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f74a:	2400      	movs	r4, #0
 800f74c:	e6c7      	b.n	800f4de <__divdi3+0xd2>
 800f74e:	469b      	mov	fp, r3
 800f750:	e712      	b.n	800f578 <__divdi3+0x16c>
 800f752:	4683      	mov	fp, r0
 800f754:	e7e1      	b.n	800f71a <__divdi3+0x30e>
 800f756:	460c      	mov	r4, r1
 800f758:	e7bb      	b.n	800f6d2 <__divdi3+0x2c6>
 800f75a:	461a      	mov	r2, r3
 800f75c:	e762      	b.n	800f624 <__divdi3+0x218>
 800f75e:	bf00      	nop

0800f760 <__udivdi3>:
 800f760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f764:	4606      	mov	r6, r0
 800f766:	b083      	sub	sp, #12
 800f768:	460d      	mov	r5, r1
 800f76a:	4614      	mov	r4, r2
 800f76c:	4607      	mov	r7, r0
 800f76e:	4688      	mov	r8, r1
 800f770:	2b00      	cmp	r3, #0
 800f772:	d151      	bne.n	800f818 <__udivdi3+0xb8>
 800f774:	428a      	cmp	r2, r1
 800f776:	d964      	bls.n	800f842 <__udivdi3+0xe2>
 800f778:	fab2 f382 	clz	r3, r2
 800f77c:	b15b      	cbz	r3, 800f796 <__udivdi3+0x36>
 800f77e:	f1c3 0820 	rsb	r8, r3, #32
 800f782:	fa01 f503 	lsl.w	r5, r1, r3
 800f786:	fa20 f808 	lsr.w	r8, r0, r8
 800f78a:	fa02 f403 	lsl.w	r4, r2, r3
 800f78e:	ea48 0805 	orr.w	r8, r8, r5
 800f792:	fa00 f703 	lsl.w	r7, r0, r3
 800f796:	0c25      	lsrs	r5, r4, #16
 800f798:	4640      	mov	r0, r8
 800f79a:	4629      	mov	r1, r5
 800f79c:	fa1f fa84 	uxth.w	sl, r4
 800f7a0:	f7ff f816 	bl	800e7d0 <__aeabi_uidiv>
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	4681      	mov	r9, r0
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	f7ff f93f 	bl	800ea2c <__aeabi_uidivmod>
 800f7ae:	0c3b      	lsrs	r3, r7, #16
 800f7b0:	fb0a f009 	mul.w	r0, sl, r9
 800f7b4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800f7b8:	4288      	cmp	r0, r1
 800f7ba:	d90a      	bls.n	800f7d2 <__udivdi3+0x72>
 800f7bc:	1909      	adds	r1, r1, r4
 800f7be:	f109 32ff 	add.w	r2, r9, #4294967295
 800f7c2:	d205      	bcs.n	800f7d0 <__udivdi3+0x70>
 800f7c4:	4288      	cmp	r0, r1
 800f7c6:	bf84      	itt	hi
 800f7c8:	f1a9 0902 	subhi.w	r9, r9, #2
 800f7cc:	1909      	addhi	r1, r1, r4
 800f7ce:	d800      	bhi.n	800f7d2 <__udivdi3+0x72>
 800f7d0:	4691      	mov	r9, r2
 800f7d2:	ebc0 0801 	rsb	r8, r0, r1
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4640      	mov	r0, r8
 800f7da:	b2bf      	uxth	r7, r7
 800f7dc:	f7fe fff8 	bl	800e7d0 <__aeabi_uidiv>
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	f7ff f921 	bl	800ea2c <__aeabi_uidivmod>
 800f7ea:	fb0a fa06 	mul.w	sl, sl, r6
 800f7ee:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800f7f2:	458a      	cmp	sl, r1
 800f7f4:	d909      	bls.n	800f80a <__udivdi3+0xaa>
 800f7f6:	190c      	adds	r4, r1, r4
 800f7f8:	f106 33ff 	add.w	r3, r6, #4294967295
 800f7fc:	f080 8119 	bcs.w	800fa32 <__udivdi3+0x2d2>
 800f800:	45a2      	cmp	sl, r4
 800f802:	bf88      	it	hi
 800f804:	3e02      	subhi	r6, #2
 800f806:	f240 8114 	bls.w	800fa32 <__udivdi3+0x2d2>
 800f80a:	ea46 4009 	orr.w	r0, r6, r9, lsl #16
 800f80e:	2600      	movs	r6, #0
 800f810:	4631      	mov	r1, r6
 800f812:	b003      	add	sp, #12
 800f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f818:	428b      	cmp	r3, r1
 800f81a:	bf84      	itt	hi
 800f81c:	2600      	movhi	r6, #0
 800f81e:	4630      	movhi	r0, r6
 800f820:	d8f6      	bhi.n	800f810 <__udivdi3+0xb0>
 800f822:	fab3 f483 	clz	r4, r3
 800f826:	2c00      	cmp	r4, #0
 800f828:	d15a      	bne.n	800f8e0 <__udivdi3+0x180>
 800f82a:	428b      	cmp	r3, r1
 800f82c:	bf28      	it	cs
 800f82e:	42b2      	cmpcs	r2, r6
 800f830:	bf8c      	ite	hi
 800f832:	2600      	movhi	r6, #0
 800f834:	2601      	movls	r6, #1
 800f836:	bf9c      	itt	ls
 800f838:	2001      	movls	r0, #1
 800f83a:	4626      	movls	r6, r4
 800f83c:	d9e8      	bls.n	800f810 <__udivdi3+0xb0>
 800f83e:	4630      	mov	r0, r6
 800f840:	e7e6      	b.n	800f810 <__udivdi3+0xb0>
 800f842:	b922      	cbnz	r2, 800f84e <__udivdi3+0xee>
 800f844:	4611      	mov	r1, r2
 800f846:	2001      	movs	r0, #1
 800f848:	f7fe ffc2 	bl	800e7d0 <__aeabi_uidiv>
 800f84c:	4604      	mov	r4, r0
 800f84e:	fab4 f384 	clz	r3, r4
 800f852:	2b00      	cmp	r3, #0
 800f854:	f040 80a2 	bne.w	800f99c <__udivdi3+0x23c>
 800f858:	1b2d      	subs	r5, r5, r4
 800f85a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f85e:	fa1f fa84 	uxth.w	sl, r4
 800f862:	2601      	movs	r6, #1
 800f864:	4641      	mov	r1, r8
 800f866:	4628      	mov	r0, r5
 800f868:	f7fe ffb2 	bl	800e7d0 <__aeabi_uidiv>
 800f86c:	4641      	mov	r1, r8
 800f86e:	4681      	mov	r9, r0
 800f870:	4628      	mov	r0, r5
 800f872:	f7ff f8db 	bl	800ea2c <__aeabi_uidivmod>
 800f876:	0c3b      	lsrs	r3, r7, #16
 800f878:	fb0a f009 	mul.w	r0, sl, r9
 800f87c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800f880:	4288      	cmp	r0, r1
 800f882:	d90b      	bls.n	800f89c <__udivdi3+0x13c>
 800f884:	1909      	adds	r1, r1, r4
 800f886:	f109 32ff 	add.w	r2, r9, #4294967295
 800f88a:	f080 80d4 	bcs.w	800fa36 <__udivdi3+0x2d6>
 800f88e:	4288      	cmp	r0, r1
 800f890:	bf84      	itt	hi
 800f892:	f1a9 0902 	subhi.w	r9, r9, #2
 800f896:	1909      	addhi	r1, r1, r4
 800f898:	f240 80cd 	bls.w	800fa36 <__udivdi3+0x2d6>
 800f89c:	ebc0 0b01 	rsb	fp, r0, r1
 800f8a0:	4641      	mov	r1, r8
 800f8a2:	4658      	mov	r0, fp
 800f8a4:	b2bf      	uxth	r7, r7
 800f8a6:	f7fe ff93 	bl	800e7d0 <__aeabi_uidiv>
 800f8aa:	4641      	mov	r1, r8
 800f8ac:	4605      	mov	r5, r0
 800f8ae:	4658      	mov	r0, fp
 800f8b0:	f7ff f8bc 	bl	800ea2c <__aeabi_uidivmod>
 800f8b4:	fb0a fa05 	mul.w	sl, sl, r5
 800f8b8:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800f8bc:	458a      	cmp	sl, r1
 800f8be:	d909      	bls.n	800f8d4 <__udivdi3+0x174>
 800f8c0:	190c      	adds	r4, r1, r4
 800f8c2:	f105 33ff 	add.w	r3, r5, #4294967295
 800f8c6:	f080 80b8 	bcs.w	800fa3a <__udivdi3+0x2da>
 800f8ca:	45a2      	cmp	sl, r4
 800f8cc:	bf88      	it	hi
 800f8ce:	3d02      	subhi	r5, #2
 800f8d0:	f240 80b3 	bls.w	800fa3a <__udivdi3+0x2da>
 800f8d4:	ea45 4009 	orr.w	r0, r5, r9, lsl #16
 800f8d8:	4631      	mov	r1, r6
 800f8da:	b003      	add	sp, #12
 800f8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e0:	f1c4 0120 	rsb	r1, r4, #32
 800f8e4:	40a3      	lsls	r3, r4
 800f8e6:	fa22 f801 	lsr.w	r8, r2, r1
 800f8ea:	fa25 f701 	lsr.w	r7, r5, r1
 800f8ee:	ea48 0803 	orr.w	r8, r8, r3
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	fa26 f301 	lsr.w	r3, r6, r1
 800f8f8:	40a5      	lsls	r5, r4
 800f8fa:	ea4f 4918 	mov.w	r9, r8, lsr #16
 800f8fe:	40a2      	lsls	r2, r4
 800f900:	4649      	mov	r1, r9
 800f902:	9201      	str	r2, [sp, #4]
 800f904:	431d      	orrs	r5, r3
 800f906:	f7fe ff63 	bl	800e7d0 <__aeabi_uidiv>
 800f90a:	4649      	mov	r1, r9
 800f90c:	4683      	mov	fp, r0
 800f90e:	4638      	mov	r0, r7
 800f910:	f7ff f88c 	bl	800ea2c <__aeabi_uidivmod>
 800f914:	fa1f f288 	uxth.w	r2, r8
 800f918:	0c2f      	lsrs	r7, r5, #16
 800f91a:	fb02 f00b 	mul.w	r0, r2, fp
 800f91e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800f922:	42b8      	cmp	r0, r7
 800f924:	d906      	bls.n	800f934 <__udivdi3+0x1d4>
 800f926:	eb17 0708 	adds.w	r7, r7, r8
 800f92a:	f10b 31ff 	add.w	r1, fp, #4294967295
 800f92e:	f0c0 808d 	bcc.w	800fa4c <__udivdi3+0x2ec>
 800f932:	468b      	mov	fp, r1
 800f934:	1a3f      	subs	r7, r7, r0
 800f936:	4649      	mov	r1, r9
 800f938:	4638      	mov	r0, r7
 800f93a:	9200      	str	r2, [sp, #0]
 800f93c:	f7fe ff48 	bl	800e7d0 <__aeabi_uidiv>
 800f940:	4649      	mov	r1, r9
 800f942:	b2ad      	uxth	r5, r5
 800f944:	4682      	mov	sl, r0
 800f946:	4638      	mov	r0, r7
 800f948:	f7ff f870 	bl	800ea2c <__aeabi_uidivmod>
 800f94c:	9a00      	ldr	r2, [sp, #0]
 800f94e:	fb02 f20a 	mul.w	r2, r2, sl
 800f952:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800f956:	428a      	cmp	r2, r1
 800f958:	d905      	bls.n	800f966 <__udivdi3+0x206>
 800f95a:	eb11 0108 	adds.w	r1, r1, r8
 800f95e:	f10a 30ff 	add.w	r0, sl, #4294967295
 800f962:	d36c      	bcc.n	800fa3e <__udivdi3+0x2de>
 800f964:	4682      	mov	sl, r0
 800f966:	9d01      	ldr	r5, [sp, #4]
 800f968:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 800f96c:	1a89      	subs	r1, r1, r2
 800f96e:	fba0 2305 	umull	r2, r3, r0, r5
 800f972:	4299      	cmp	r1, r3
 800f974:	d30c      	bcc.n	800f990 <__udivdi3+0x230>
 800f976:	fa06 f604 	lsl.w	r6, r6, r4
 800f97a:	bf14      	ite	ne
 800f97c:	2100      	movne	r1, #0
 800f97e:	2101      	moveq	r1, #1
 800f980:	4296      	cmp	r6, r2
 800f982:	bf2c      	ite	cs
 800f984:	2600      	movcs	r6, #0
 800f986:	f001 0601 	andcc.w	r6, r1, #1
 800f98a:	2e00      	cmp	r6, #0
 800f98c:	f43f af40 	beq.w	800f810 <__udivdi3+0xb0>
 800f990:	2600      	movs	r6, #0
 800f992:	3801      	subs	r0, #1
 800f994:	4631      	mov	r1, r6
 800f996:	b003      	add	sp, #12
 800f998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f99c:	409c      	lsls	r4, r3
 800f99e:	f1c3 0920 	rsb	r9, r3, #32
 800f9a2:	fa25 fa09 	lsr.w	sl, r5, r9
 800f9a6:	fa06 f703 	lsl.w	r7, r6, r3
 800f9aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f9ae:	4650      	mov	r0, sl
 800f9b0:	4641      	mov	r1, r8
 800f9b2:	409d      	lsls	r5, r3
 800f9b4:	f7fe ff0c 	bl	800e7d0 <__aeabi_uidiv>
 800f9b8:	4641      	mov	r1, r8
 800f9ba:	fa26 f909 	lsr.w	r9, r6, r9
 800f9be:	ea49 0905 	orr.w	r9, r9, r5
 800f9c2:	4683      	mov	fp, r0
 800f9c4:	4650      	mov	r0, sl
 800f9c6:	f7ff f831 	bl	800ea2c <__aeabi_uidivmod>
 800f9ca:	fa1f fa84 	uxth.w	sl, r4
 800f9ce:	ea4f 4319 	mov.w	r3, r9, lsr #16
 800f9d2:	fb0a f00b 	mul.w	r0, sl, fp
 800f9d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800f9da:	4288      	cmp	r0, r1
 800f9dc:	d909      	bls.n	800f9f2 <__udivdi3+0x292>
 800f9de:	1909      	adds	r1, r1, r4
 800f9e0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f9e4:	d23a      	bcs.n	800fa5c <__udivdi3+0x2fc>
 800f9e6:	4288      	cmp	r0, r1
 800f9e8:	bf84      	itt	hi
 800f9ea:	f1ab 0b02 	subhi.w	fp, fp, #2
 800f9ee:	1909      	addhi	r1, r1, r4
 800f9f0:	d934      	bls.n	800fa5c <__udivdi3+0x2fc>
 800f9f2:	1a0d      	subs	r5, r1, r0
 800f9f4:	4641      	mov	r1, r8
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	fa1f f989 	uxth.w	r9, r9
 800f9fc:	f7fe fee8 	bl	800e7d0 <__aeabi_uidiv>
 800fa00:	4641      	mov	r1, r8
 800fa02:	4606      	mov	r6, r0
 800fa04:	4628      	mov	r0, r5
 800fa06:	f7ff f811 	bl	800ea2c <__aeabi_uidivmod>
 800fa0a:	fb0a f506 	mul.w	r5, sl, r6
 800fa0e:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
 800fa12:	428d      	cmp	r5, r1
 800fa14:	d909      	bls.n	800fa2a <__udivdi3+0x2ca>
 800fa16:	1909      	adds	r1, r1, r4
 800fa18:	f106 33ff 	add.w	r3, r6, #4294967295
 800fa1c:	d204      	bcs.n	800fa28 <__udivdi3+0x2c8>
 800fa1e:	428d      	cmp	r5, r1
 800fa20:	bf84      	itt	hi
 800fa22:	3e02      	subhi	r6, #2
 800fa24:	1909      	addhi	r1, r1, r4
 800fa26:	d800      	bhi.n	800fa2a <__udivdi3+0x2ca>
 800fa28:	461e      	mov	r6, r3
 800fa2a:	1b4d      	subs	r5, r1, r5
 800fa2c:	ea46 460b 	orr.w	r6, r6, fp, lsl #16
 800fa30:	e718      	b.n	800f864 <__udivdi3+0x104>
 800fa32:	461e      	mov	r6, r3
 800fa34:	e6e9      	b.n	800f80a <__udivdi3+0xaa>
 800fa36:	4691      	mov	r9, r2
 800fa38:	e730      	b.n	800f89c <__udivdi3+0x13c>
 800fa3a:	461d      	mov	r5, r3
 800fa3c:	e74a      	b.n	800f8d4 <__udivdi3+0x174>
 800fa3e:	428a      	cmp	r2, r1
 800fa40:	bf84      	itt	hi
 800fa42:	f1aa 0a02 	subhi.w	sl, sl, #2
 800fa46:	4441      	addhi	r1, r8
 800fa48:	d88d      	bhi.n	800f966 <__udivdi3+0x206>
 800fa4a:	e78b      	b.n	800f964 <__udivdi3+0x204>
 800fa4c:	42b8      	cmp	r0, r7
 800fa4e:	bf84      	itt	hi
 800fa50:	f1ab 0b02 	subhi.w	fp, fp, #2
 800fa54:	4447      	addhi	r7, r8
 800fa56:	f63f af6d 	bhi.w	800f934 <__udivdi3+0x1d4>
 800fa5a:	e76a      	b.n	800f932 <__udivdi3+0x1d2>
 800fa5c:	469b      	mov	fp, r3
 800fa5e:	e7c8      	b.n	800f9f2 <__udivdi3+0x292>

Disassembly of section .ARM.exidx:

0800fa60 <.ARM.exidx>:
 800fa60:	7ffff9ac 	svcvc	0x00fff9ac
 800fa64:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

0800fa68 <.LANCHOR0>:
 800fa68:	10204080 	eorne	r4, r0, r0, lsl #1
 800fa6c:	01020408 	tsteq	r2, r8, lsl #8

0800fa70 <eng8x16>:
	...
 800fa80:	423c0000 	eorsmi	r0, ip, #0
 800fa84:	81a5a581 			; <UNDEFINED> instruction: 0x81a5a581
 800fa88:	4299bda5 	addsmi	fp, r9, #10560	; 0x2940
 800fa8c:	0000003c 	andeq	r0, r0, ip, lsr r0
 800fa90:	7e3c0000 	cdpvc	0, 3, cr0, cr12, cr0, {0}
 800fa94:	ffdbdbff 			; <UNDEFINED> instruction: 0xffdbdbff
 800fa98:	7ee7c3db 	mcrvc	3, 7, ip, cr7, cr11, {6}
 800fa9c:	0000003c 	andeq	r0, r0, ip, lsr r0
 800faa0:	7f360000 	svcvc	0x00360000
 800faa4:	3e7f7f7f 	mrccc	15, 3, r7, cr15, cr15, {3}
 800faa8:	1c1c3e3e 	ldcne	14, cr3, [ip], {62}	; 0x3e
 800faac:	00000008 	andeq	r0, r0, r8
 800fab0:	1c080000 	stcne	0, cr0, [r8], {-0}
 800fab4:	7f3e3e1c 	svcvc	0x003e3e1c
 800fab8:	1c1c3e3e 	ldcne	14, cr3, [ip], {62}	; 0x3e
 800fabc:	00000008 	andeq	r0, r0, r8
 800fac0:	1c1c0000 	ldcne	0, cr0, [ip], {-0}
 800fac4:	7f7f1c1c 	svcvc	0x007f1c1c
 800fac8:	08086b7f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800facc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fad0:	1c080000 	stcne	0, cr0, [r8], {-0}
 800fad4:	7f7f3e3e 	svcvc	0x007f3e3e
 800fad8:	08083e7f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 800fadc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fae0:	00000000 	andeq	r0, r0, r0
 800fae4:	3c3c1800 	ldccc	8, cr1, [ip], #-0
 800fae8:	0000183c 	andeq	r1, r0, ip, lsr r8
 800faec:	00000000 	andeq	r0, r0, r0
 800faf0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
 800faf4:	c3c3e7ff 	bicgt	lr, r3, #66846720	; 0x3fc0000
 800faf8:	ffffe7c3 			; <UNDEFINED> instruction: 0xffffe7c3
 800fafc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800fb00:	00000000 	andeq	r0, r0, r0
 800fb04:	6666663c 			; <UNDEFINED> instruction: 0x6666663c
 800fb08:	003c6666 	eorseq	r6, ip, r6, ror #12
 800fb0c:	00000000 	andeq	r0, r0, r0
 800fb10:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
 800fb14:	999999c3 	ldmibls	r9, {r0, r1, r6, r7, r8, fp, ip, pc}
 800fb18:	ffc39999 			; <UNDEFINED> instruction: 0xffc39999
 800fb1c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800fb20:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800fb24:	3c18187e 	ldccc	8, cr1, [r8], {126}	; 0x7e
 800fb28:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800fb2c:	0000003c 	andeq	r0, r0, ip, lsr r0
 800fb30:	663c0000 	ldrtvs	r0, [ip], -r0
 800fb34:	3c666666 	stclcc	6, cr6, [r6], #-408	; 0xfffffe68
 800fb38:	18187e18 	ldmdane	r8, {r3, r4, r9, sl, fp, ip, sp, lr}
 800fb3c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fb40:	1b1e0000 	blne	878fb48 <__RO_LIMIT__+0x77ead0>
 800fb44:	181b1b1b 	ldmdane	fp, {r0, r1, r3, r4, r8, r9, fp, ip}
 800fb48:	78783818 	ldmdavc	r8!, {r3, r4, fp, ip, sp}^
 800fb4c:	00000030 	andeq	r0, r0, r0, lsr r0
 800fb50:	333f0000 	teqcc	pc, #0
 800fb54:	3333333f 	teqcc	r3, #-67108864	; 0xfc000000
 800fb58:	6ff77333 	svcvs	0x00f77333
 800fb5c:	00000006 	andeq	r0, r0, r6
 800fb60:	db180000 	blle	860fb68 <__RO_LIMIT__+0x5feaf0>
 800fb64:	e7663c7e 			; <UNDEFINED> instruction: 0xe7663c7e
 800fb68:	db7e3c66 	blle	9f9ed08 <__RO_LIMIT__+0x1f8dc90>
 800fb6c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fb70:	60400000 	subvs	r0, r0, r0
 800fb74:	7f7c7870 	svcvc	0x007c7870
 800fb78:	6070787c 	rsbsvs	r7, r0, ip, ror r8
 800fb7c:	00000040 	andeq	r0, r0, r0, asr #32
 800fb80:	03010000 	movweq	r0, #4096	; 0x1000
 800fb84:	7f1f0f07 	svcvc	0x001f0f07
 800fb88:	03070f1f 	movweq	r0, #32543	; 0x7f1f
 800fb8c:	00000001 	andeq	r0, r0, r1
 800fb90:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800fb94:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800fb98:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800fb9c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fba0:	66660000 	strbtvs	r0, [r6], -r0
 800fba4:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800fba8:	66006666 	strvs	r6, [r0], -r6, ror #12
 800fbac:	00000066 	andeq	r0, r0, r6, rrx
 800fbb0:	db7f0000 	blle	9fcfbb8 <__RO_LIMIT__+0x1fbeb40>
 800fbb4:	7bdbdbdb 	blvc	7706b28 <__RW_SIZE__+0x7706594>
 800fbb8:	1b1b1b1b 	blne	86d682c <__RO_LIMIT__+0x6c57b4>
 800fbbc:	0000001b 	andeq	r0, r0, fp, lsl r0
 800fbc0:	60633e00 	rsbvs	r3, r3, r0, lsl #28
 800fbc4:	63633e60 	cmnvs	r3, #96, 28	; 0x600
 800fbc8:	03033e63 	movweq	r3, #15971	; 0x3e63
 800fbcc:	00003e63 	andeq	r3, r0, r3, ror #28
	...
 800fbd8:	7f7f7f7f 	svcvc	0x007f7f7f
 800fbdc:	0000007f 	andeq	r0, r0, pc, ror r0
 800fbe0:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800fbe4:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800fbe8:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800fbec:	00007e18 	andeq	r7, r0, r8, lsl lr
 800fbf0:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800fbf4:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800fbf8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800fbfc:	00000018 	andeq	r0, r0, r8, lsl r0
 800fc00:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800fc04:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800fc08:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800fc0c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fc10:	00000000 	andeq	r0, r0, r0
 800fc14:	7f0e0c08 	svcvc	0x000e0c08
 800fc18:	00080c0e 	andeq	r0, r8, lr, lsl #24
	...
 800fc24:	7f381808 	svcvc	0x00381808
 800fc28:	00081838 	andeq	r1, r8, r8, lsr r8
	...
 800fc38:	60606060 	rsbvs	r6, r0, r0, rrx
 800fc3c:	0000007f 	andeq	r0, r0, pc, ror r0
 800fc40:	00000000 	andeq	r0, r0, r0
 800fc44:	ff763410 			; <UNDEFINED> instruction: 0xff763410
 800fc48:	00082c6e 	andeq	r2, r8, lr, ror #24
 800fc4c:	00000000 	andeq	r0, r0, r0
 800fc50:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 800fc54:	1c1c1c08 	ldcne	12, cr1, [ip], {8}
 800fc58:	7f3e3e3e 	svcvc	0x003e3e3e
 800fc5c:	0000007f 	andeq	r0, r0, pc, ror r0
 800fc60:	7f7f0000 	svcvc	0x007f0000
 800fc64:	1c3e3e3e 	ldcne	14, cr3, [lr], #-248	; 0xffffff08
 800fc68:	08081c1c 	stmdaeq	r8, {r2, r3, r4, sl, fp, ip}
 800fc6c:	00000008 	andeq	r0, r0, r8
	...
 800fc80:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800fc84:	183c3c3c 	ldmdane	ip!, {r2, r3, r4, r5, sl, fp, ip, sp}
 800fc88:	18001818 	stmdane	r0, {r3, r4, fp, ip}
 800fc8c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fc90:	66666600 	strbtvs	r6, [r6], -r0, lsl #12
 800fc94:	00000066 	andeq	r0, r0, r6, rrx
	...
 800fca0:	36360000 	ldrtcc	r0, [r6], -r0
 800fca4:	36367f36 	shasxcc	r7, r6, r6
 800fca8:	36367f36 	shasxcc	r7, r6, r6
 800fcac:	00000036 	andeq	r0, r0, r6, lsr r0
 800fcb0:	3e1c1c00 	cdpcc	12, 1, cr1, cr12, cr0, {0}
 800fcb4:	3e606063 	cdpcc	0, 6, cr6, cr0, cr3, {3}
 800fcb8:	3e630303 	cdpcc	3, 6, cr0, cr3, cr3, {0}
 800fcbc:	00001c1c 	andeq	r1, r0, ip, lsl ip
 800fcc0:	63630000 	cmnvs	r3, #0
 800fcc4:	0c0c6666 	stceq	6, cr6, [ip], {102}	; 0x66
 800fcc8:	63333318 	teqvs	r3, #24, 6	; 0x60000000
 800fccc:	00000063 	andeq	r0, r0, r3, rrx
 800fcd0:	6c380000 	ldcvs	0, cr0, [r8], #-0
 800fcd4:	3b386c6c 	blcc	8e2ae8c <__RO_LIMIT__+0xe19e14>
 800fcd8:	6f66666f 	svcvs	0x0066666f
 800fcdc:	0000003b 	andeq	r0, r0, fp, lsr r0
 800fce0:	18181800 	ldmdane	r8, {fp, ip}
 800fce4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 800fcf0:	180c0600 	stmdane	ip, {r9, sl}
 800fcf4:	30303018 	eorscc	r3, r0, r8, lsl r0
 800fcf8:	18183030 	ldmdane	r8, {r4, r5, ip, sp}
 800fcfc:	0000060c 	andeq	r0, r0, ip, lsl #12
 800fd00:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800fd04:	0606060c 	streq	r0, [r6], -ip, lsl #12
 800fd08:	0c0c0606 	stceq	6, cr0, [ip], {6}
 800fd0c:	00003018 	andeq	r3, r0, r8, lsl r0
 800fd10:	00000000 	andeq	r0, r0, r0
 800fd14:	7f1c3663 	svcvc	0x001c3663
 800fd18:	0063361c 	rsbeq	r3, r3, ip, lsl r6
	...
 800fd24:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 800fd28:	00181818 	andseq	r1, r8, r8, lsl r8
	...
 800fd38:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800fd3c:	00301818 	eorseq	r1, r0, r8, lsl r8
 800fd40:	00000000 	andeq	r0, r0, r0
 800fd44:	ff000000 			; <UNDEFINED> instruction: 0xff000000
	...
 800fd58:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800fd5c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fd60:	03030000 	movweq	r0, #12288	; 0x3000
 800fd64:	0c0c0606 	stceq	6, cr0, [ip], {6}
 800fd68:	30301818 	eorscc	r1, r0, r8, lsl r8
 800fd6c:	00000060 	andeq	r0, r0, r0, rrx
 800fd70:	633e0000 	teqvs	lr, #0
 800fd74:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fd78:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fd7c:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fd80:	1c0c0000 	stcne	0, cr0, [ip], {-0}
 800fd84:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800fd88:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800fd8c:	0000001e 	andeq	r0, r0, lr, lsl r0
 800fd90:	633e0000 	teqvs	lr, #0
 800fd94:	0c060303 	stceq	3, cr0, [r6], {3}
 800fd98:	60603018 	rsbvs	r3, r0, r8, lsl r0
 800fd9c:	0000007f 	andeq	r0, r0, pc, ror r0
 800fda0:	633e0000 	teqvs	lr, #0
 800fda4:	1e060303 	cdpne	3, 0, cr0, cr6, cr3, {0}
 800fda8:	63030303 	movwvs	r0, #13059	; 0x3303
 800fdac:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fdb0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
 800fdb4:	6666361e 			; <UNDEFINED> instruction: 0x6666361e
 800fdb8:	067f6666 	ldrbteq	r6, [pc], -r6, ror #12
 800fdbc:	00000006 	andeq	r0, r0, r6
 800fdc0:	607f0000 	rsbsvs	r0, pc, r0
 800fdc4:	037e6060 	cmneq	lr, #96	; 0x60
 800fdc8:	63030303 	movwvs	r0, #13059	; 0x3303
 800fdcc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fdd0:	603e0000 	eorsvs	r0, lr, r0
 800fdd4:	7e606060 	cdpvc	0, 6, cr6, cr0, cr0, {3}
 800fdd8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fddc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fde0:	637f0000 	cmnvs	pc, #0
 800fde4:	0c060303 	stceq	3, cr0, [r6], {3}
 800fde8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800fdec:	00000018 	andeq	r0, r0, r8, lsl r0
 800fdf0:	633e0000 	teqvs	lr, #0
 800fdf4:	3e636363 	cdpcc	3, 6, cr6, cr3, cr3, {3}
 800fdf8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fdfc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fe00:	633e0000 	teqvs	lr, #0
 800fe04:	3f636363 	svccc	0x00636363
 800fe08:	63030303 	movwvs	r0, #13059	; 0x3303
 800fe0c:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fe10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800fe14:	00001818 	andeq	r1, r0, r8, lsl r8
 800fe18:	18181800 	ldmdane	r8, {fp, ip}
 800fe1c:	00000000 	andeq	r0, r0, r0
 800fe20:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800fe24:	00001818 	andeq	r1, r0, r8, lsl r8
 800fe28:	18181800 	ldmdane	r8, {fp, ip}
 800fe2c:	00003018 	andeq	r3, r0, r8, lsl r0
 800fe30:	06030000 	streq	r0, [r3], -r0
 800fe34:	6030180c 	eorsvs	r1, r0, ip, lsl #16
 800fe38:	060c1830 			; <UNDEFINED> instruction: 0x060c1830
 800fe3c:	00000003 	andeq	r0, r0, r3
 800fe40:	00000000 	andeq	r0, r0, r0
 800fe44:	007f0000 	rsbseq	r0, pc, r0
 800fe48:	00007f00 	andeq	r7, r0, r0, lsl #30
 800fe4c:	00000000 	andeq	r0, r0, r0
 800fe50:	30600000 	rsbcc	r0, r0, r0
 800fe54:	03060c18 	movweq	r0, #27672	; 0x6c18
 800fe58:	30180c06 	andscc	r0, r8, r6, lsl #24
 800fe5c:	00000060 	andeq	r0, r0, r0, rrx
 800fe60:	633e0000 	teqvs	lr, #0
 800fe64:	0c060363 	stceq	3, cr0, [r6], {99}	; 0x63
 800fe68:	18001818 	stmdane	r0, {r3, r4, fp, ip}
 800fe6c:	00000018 	andeq	r0, r0, r8, lsl r0
 800fe70:	633e0000 	teqvs	lr, #0
 800fe74:	6f6f6f63 	svcvs	0x006f6f63
 800fe78:	60606e6e 	rsbvs	r6, r0, lr, ror #28
 800fe7c:	0000003e 	andeq	r0, r0, lr, lsr r0
 800fe80:	1c080000 	stcne	0, cr0, [r8], {-0}
 800fe84:	63636336 	cmnvs	r3, #-671088640	; 0xd8000000
 800fe88:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 800fe8c:	00000063 	andeq	r0, r0, r3, rrx
 800fe90:	637e0000 	cmnvs	lr, #0
 800fe94:	7e666363 	cdpvc	3, 6, cr6, cr6, cr3, {3}
 800fe98:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fe9c:	0000007e 	andeq	r0, r0, lr, ror r0
 800fea0:	633e0000 	teqvs	lr, #0
 800fea4:	60606063 	rsbvs	r6, r0, r3, rrx
 800fea8:	63636060 	cmnvs	r3, #96	; 0x60
 800feac:	0000003e 	andeq	r0, r0, lr, lsr r0
 800feb0:	667c0000 	ldrbtvs	r0, [ip], -r0
 800feb4:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800feb8:	66636363 	strbtvs	r6, [r3], -r3, ror #6
 800febc:	0000007c 	andeq	r0, r0, ip, ror r0
 800fec0:	607f0000 	rsbsvs	r0, pc, r0
 800fec4:	7c606060 	stclvc	0, cr6, [r0], #-384	; 0xfffffe80
 800fec8:	60606060 	rsbvs	r6, r0, r0, rrx
 800fecc:	0000007f 	andeq	r0, r0, pc, ror r0
 800fed0:	607f0000 	rsbsvs	r0, pc, r0
 800fed4:	7c606060 	stclvc	0, cr6, [r0], #-384	; 0xfffffe80
 800fed8:	60606060 	rsbvs	r6, r0, r0, rrx
 800fedc:	00000060 	andeq	r0, r0, r0, rrx
 800fee0:	633e0000 	teqvs	lr, #0
 800fee4:	60606063 	rsbvs	r6, r0, r3, rrx
 800fee8:	6763636f 	strbvs	r6, [r3, -pc, ror #6]!
 800feec:	0000003b 	andeq	r0, r0, fp, lsr r0
 800fef0:	63630000 	cmnvs	r3, #0
 800fef4:	7f636363 	svcvc	0x00636363
 800fef8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800fefc:	00000063 	andeq	r0, r0, r3, rrx
 800ff00:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800ff04:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ff08:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ff0c:	00000018 	andeq	r0, r0, r8, lsl r0
 800ff10:	03030000 	movweq	r0, #12288	; 0x3000
 800ff14:	03030303 	movweq	r0, #13059	; 0x3303
 800ff18:	63630303 	cmnvs	r3, #201326592	; 0xc000000
 800ff1c:	0000003e 	andeq	r0, r0, lr, lsr r0
 800ff20:	63630000 	cmnvs	r3, #0
 800ff24:	786c6663 	stmdavc	ip!, {r0, r1, r5, r6, r9, sl, sp, lr}^
 800ff28:	6363666c 	cmnvs	r3, #108, 12	; 0x6c00000
 800ff2c:	00000063 	andeq	r0, r0, r3, rrx
 800ff30:	60600000 	rsbvs	r0, r0, r0
 800ff34:	60606060 	rsbvs	r6, r0, r0, rrx
 800ff38:	60606060 	rsbvs	r6, r0, r0, rrx
 800ff3c:	0000007f 	andeq	r0, r0, pc, ror r0
 800ff40:	63630000 	cmnvs	r3, #0
 800ff44:	6b7f7f77 	blvs	9fefd28 <__RO_LIMIT__+0x1fdecb0>
 800ff48:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ff4c:	00000063 	andeq	r0, r0, r3, rrx
 800ff50:	63630000 	cmnvs	r3, #0
 800ff54:	6b7b7373 	blvs	9eecd28 <__RO_LIMIT__+0x1edbcb0>
 800ff58:	6367676f 	cmnvs	r7, #29097984	; 0x1bc0000
 800ff5c:	00000063 	andeq	r0, r0, r3, rrx
 800ff60:	633e0000 	teqvs	lr, #0
 800ff64:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ff68:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ff6c:	0000003e 	andeq	r0, r0, lr, lsr r0
 800ff70:	337e0000 	cmncc	lr, #0
 800ff74:	3e333333 	mrccc	3, 1, r3, cr3, cr3, {1}
 800ff78:	30303030 	eorscc	r3, r0, r0, lsr r0
 800ff7c:	00000078 	andeq	r0, r0, r8, ror r0
 800ff80:	633e0000 	teqvs	lr, #0
 800ff84:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ff88:	67636363 	strbvs	r6, [r3, -r3, ror #6]!
 800ff8c:	0007063e 	andeq	r0, r7, lr, lsr r6
 800ff90:	637e0000 	cmnvs	lr, #0
 800ff94:	7e636363 	cdpvc	3, 6, cr6, cr3, cr3, {3}
 800ff98:	6363666c 	cmnvs	r3, #108, 12	; 0x6c00000
 800ff9c:	00000063 	andeq	r0, r0, r3, rrx
 800ffa0:	633e0000 	teqvs	lr, #0
 800ffa4:	3e606063 	cdpcc	0, 6, cr6, cr0, cr3, {3}
 800ffa8:	63630303 	cmnvs	r3, #201326592	; 0xc000000
 800ffac:	0000003e 	andeq	r0, r0, lr, lsr r0
 800ffb0:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800ffb4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ffb8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ffbc:	00000018 	andeq	r0, r0, r8, lsl r0
 800ffc0:	63630000 	cmnvs	r3, #0
 800ffc4:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ffc8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ffcc:	0000003e 	andeq	r0, r0, lr, lsr r0
 800ffd0:	63630000 	cmnvs	r3, #0
 800ffd4:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800ffd8:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 800ffdc:	00000008 	andeq	r0, r0, r8
 800ffe0:	63630000 	cmnvs	r3, #0
 800ffe4:	6b636363 	blvs	98e8d78 <__RO_LIMIT__+0x18d7d00>
 800ffe8:	63777f7f 	cmnvs	r7, #508	; 0x1fc
 800ffec:	00000063 	andeq	r0, r0, r3, rrx
 800fff0:	63630000 	cmnvs	r3, #0
 800fff4:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 800fff8:	63636336 	cmnvs	r3, #-671088640	; 0xd8000000
 800fffc:	00000063 	andeq	r0, r0, r3, rrx
 8010000:	c3c30000 	bicgt	r0, r3, #0
 8010004:	183c66c3 	ldmdane	ip!, {r0, r1, r6, r7, r9, sl, sp, lr}
 8010008:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801000c:	0000003c 	andeq	r0, r0, ip, lsr r0
 8010010:	437f0000 	cmnmi	pc, #0
 8010014:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
 8010018:	7f606030 	svcvc	0x00606030
 801001c:	0000007f 	andeq	r0, r0, pc, ror r0
 8010020:	303e0000 	eorscc	r0, lr, r0
 8010024:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010028:	30303030 	eorscc	r3, r0, r0, lsr r0
 801002c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010030:	60600000 	rsbvs	r0, r0, r0
 8010034:	18183030 	ldmdane	r8, {r4, r5, ip, sp}
 8010038:	06060c0c 	streq	r0, [r6], -ip, lsl #24
 801003c:	00000003 	andeq	r0, r0, r3
 8010040:	063e0000 	ldrteq	r0, [lr], -r0
 8010044:	06060606 	streq	r0, [r6], -r6, lsl #12
 8010048:	06060606 	streq	r0, [r6], -r6, lsl #12
 801004c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010050:	1c080000 	stcne	0, cr0, [r8], {-0}
 8010054:	00006336 	andeq	r6, r0, r6, lsr r3
	...
 801006c:	0000ff00 	andeq	pc, r0, r0, lsl #30
 8010070:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010074:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 8010084:	03633e00 	cmneq	r3, #0, 28
 8010088:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 801008c:	0000003f 	andeq	r0, r0, pc, lsr r0
 8010090:	60600000 	rsbvs	r0, r0, r0
 8010094:	63637e60 	cmnvs	r3, #96, 28	; 0x600
 8010098:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801009c:	0000007e 	andeq	r0, r0, lr, ror r0
 80100a0:	00000000 	andeq	r0, r0, r0
 80100a4:	63633e00 	cmnvs	r3, #0, 28
 80100a8:	63636060 	cmnvs	r3, #96	; 0x60
 80100ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 80100b0:	03030000 	movweq	r0, #12288	; 0x3000
 80100b4:	63633f03 	cmnvs	r3, #3, 30
 80100b8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80100bc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80100c0:	00000000 	andeq	r0, r0, r0
 80100c4:	63633e00 	cmnvs	r3, #0, 28
 80100c8:	6363607f 	cmnvs	r3, #127	; 0x7f
 80100cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 80100d0:	331e0000 	tstcc	lr, #0
 80100d4:	7e303033 	mrcvc	0, 1, r3, cr0, cr3, {1}
 80100d8:	30303030 	eorscc	r3, r0, r0, lsr r0
 80100dc:	00000030 	andeq	r0, r0, r0, lsr r0
 80100e0:	00000000 	andeq	r0, r0, r0
 80100e4:	63633e00 	cmnvs	r3, #0, 28
 80100e8:	3f636363 	svccc	0x00636363
 80100ec:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 80100f0:	60600000 	rsbvs	r0, r0, r0
 80100f4:	63637e60 	cmnvs	r3, #96, 28	; 0x600
 80100f8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80100fc:	00000063 	andeq	r0, r0, r3, rrx
 8010100:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010104:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010108:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801010c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010110:	06060000 	streq	r0, [r6], -r0
 8010114:	06060000 	streq	r0, [r6], -r0
 8010118:	06060606 	streq	r0, [r6], -r6, lsl #12
 801011c:	3c666606 	stclcc	6, cr6, [r6], #-24	; 0xffffffe8
 8010120:	60600000 	rsbvs	r0, r0, r0
 8010124:	6c666360 	stclvs	3, cr6, [r6], #-384	; 0xfffffe80
 8010128:	666c7878 			; <UNDEFINED> instruction: 0x666c7878
 801012c:	00000063 	andeq	r0, r0, r3, rrx
 8010130:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010134:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010138:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801013c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010140:	00000000 	andeq	r0, r0, r0
 8010144:	6b7f7600 	blvs	9fed94c <__RO_LIMIT__+0x1fdc8d4>
 8010148:	636b6b6b 	cmnvs	fp, #109568	; 0x1ac00
 801014c:	00000063 	andeq	r0, r0, r3, rrx
 8010150:	00000000 	andeq	r0, r0, r0
 8010154:	63637e00 	cmnvs	r3, #0, 28
 8010158:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801015c:	00000063 	andeq	r0, r0, r3, rrx
 8010160:	00000000 	andeq	r0, r0, r0
 8010164:	63633e00 	cmnvs	r3, #0, 28
 8010168:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801016c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010170:	00000000 	andeq	r0, r0, r0
 8010174:	63637e00 	cmnvs	r3, #0, 28
 8010178:	7e636363 	cdpvc	3, 6, cr6, cr3, cr3, {3}
 801017c:	60606060 	rsbvs	r6, r0, r0, rrx
 8010180:	00000000 	andeq	r0, r0, r0
 8010184:	63633f00 	cmnvs	r3, #0, 30
 8010188:	3f636363 	svccc	0x00636363
 801018c:	03030303 	movweq	r0, #13059	; 0x3303
 8010190:	00000000 	andeq	r0, r0, r0
 8010194:	70786f00 	rsbsvc	r6, r8, r0, lsl #30
 8010198:	60606060 	rsbvs	r6, r0, r0, rrx
 801019c:	00000060 	andeq	r0, r0, r0, rrx
 80101a0:	00000000 	andeq	r0, r0, r0
 80101a4:	63633e00 	cmnvs	r3, #0, 28
 80101a8:	63630e38 	cmnvs	r3, #56, 28	; 0x380
 80101ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 80101b0:	30300000 	eorscc	r0, r0, r0
 80101b4:	30307e30 	eorscc	r7, r0, r0, lsr lr
 80101b8:	33333030 	teqcc	r3, #48	; 0x30
 80101bc:	0000001e 	andeq	r0, r0, lr, lsl r0
 80101c0:	00000000 	andeq	r0, r0, r0
 80101c4:	63636300 	cmnvs	r3, #0, 6
 80101c8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80101cc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80101d0:	00000000 	andeq	r0, r0, r0
 80101d4:	63636300 	cmnvs	r3, #0, 6
 80101d8:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 80101dc:	00000008 	andeq	r0, r0, r8
 80101e0:	00000000 	andeq	r0, r0, r0
 80101e4:	63636300 	cmnvs	r3, #0, 6
 80101e8:	777f7f6b 	ldrbvc	r7, [pc, -fp, ror #30]!
 80101ec:	00000063 	andeq	r0, r0, r3, rrx
 80101f0:	00000000 	andeq	r0, r0, r0
 80101f4:	36636300 	strbtcc	r6, [r3], -r0, lsl #6
 80101f8:	63361c1c 	teqvs	r6, #28, 24	; 0x1c00
 80101fc:	00000063 	andeq	r0, r0, r3, rrx
 8010200:	00000000 	andeq	r0, r0, r0
 8010204:	63636300 	cmnvs	r3, #0, 6
 8010208:	3f636363 	svccc	0x00636363
 801020c:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 8010210:	00000000 	andeq	r0, r0, r0
 8010214:	06437f00 	strbeq	r7, [r3], -r0, lsl #30
 8010218:	6130180c 	teqvs	r0, ip, lsl #16
 801021c:	0000007f 	andeq	r0, r0, pc, ror r0
 8010220:	18180e00 	ldmdane	r8, {r9, sl, fp}
 8010224:	70181818 	andsvc	r1, r8, r8, lsl r8
 8010228:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801022c:	00000e18 	andeq	r0, r0, r8, lsl lr
 8010230:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010234:	00181818 	andseq	r1, r8, r8, lsl r8
 8010238:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801023c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010240:	18187000 	ldmdane	r8, {ip, sp, lr}
 8010244:	0e181818 	mrceq	8, 0, r1, cr8, cr8, {0}
 8010248:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801024c:	00007018 	andeq	r7, r0, r8, lsl r0
 8010250:	00000000 	andeq	r0, r0, r0
 8010254:	0edb7000 	cdpeq	0, 13, cr7, cr11, cr0, {0}
	...
 8010260:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 8010264:	36361c1c 			; <UNDEFINED> instruction: 0x36361c1c
 8010268:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801026c:	0000007f 	andeq	r0, r0, pc, ror r0
 8010270:	633e0000 	teqvs	lr, #0
 8010274:	60606063 	rsbvs	r6, r0, r3, rrx
 8010278:	63636060 	cmnvs	r3, #96	; 0x60
 801027c:	0c060c3e 	stceq	12, cr0, [r6], {62}	; 0x3e
 8010280:	63630000 	cmnvs	r3, #0
 8010284:	63636300 	cmnvs	r3, #0, 6
 8010288:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801028c:	0000003f 	andeq	r0, r0, pc, lsr r0
 8010290:	180c0600 	stmdane	ip, {r9, sl}
 8010294:	63633e00 	cmnvs	r3, #0, 28
 8010298:	6360607f 	cmnvs	r0, #127	; 0x7f
 801029c:	0000003e 	andeq	r0, r0, lr, lsr r0
 80102a0:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 80102a4:	03633e00 	cmneq	r3, #0, 28
 80102a8:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 80102ac:	0000003f 	andeq	r0, r0, pc, lsr r0
 80102b0:	36360000 	ldrtcc	r0, [r6], -r0
 80102b4:	03633e00 	cmneq	r3, #0, 28
 80102b8:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 80102bc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80102c0:	0c183000 	ldceq	0, cr3, [r8], {-0}
 80102c4:	03633e00 	cmneq	r3, #0, 28
 80102c8:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 80102cc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80102d0:	1c361c00 	ldcne	12, cr1, [r6], #-0
 80102d4:	03633e00 	cmneq	r3, #0, 28
 80102d8:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 80102dc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80102e0:	00000000 	andeq	r0, r0, r0
 80102e4:	63633e00 	cmnvs	r3, #0, 28
 80102e8:	63606060 	cmnvs	r0, #96	; 0x60
 80102ec:	0c060c3e 	stceq	12, cr0, [r6], {62}	; 0x3e
 80102f0:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 80102f4:	63633e00 	cmnvs	r3, #0, 28
 80102f8:	6360607f 	cmnvs	r0, #127	; 0x7f
 80102fc:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010300:	36360000 	ldrtcc	r0, [r6], -r0
 8010304:	63633e00 	cmnvs	r3, #0, 28
 8010308:	6360607f 	cmnvs	r0, #127	; 0x7f
 801030c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010310:	0c183000 	ldceq	0, cr3, [r8], {-0}
 8010314:	63633e00 	cmnvs	r3, #0, 28
 8010318:	6360607f 	cmnvs	r0, #127	; 0x7f
 801031c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010320:	66660000 	strbtvs	r0, [r6], -r0
 8010324:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010328:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801032c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010330:	3c180000 	ldccc	0, cr0, [r8], {-0}
 8010334:	18180066 	ldmdane	r8, {r1, r2, r5, r6}
 8010338:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801033c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010340:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
 8010344:	1818000c 	ldmdane	r8, {r2, r3}
 8010348:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801034c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010350:	361c6b63 	ldrcc	r6, [ip], -r3, ror #22
 8010354:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010358:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 801035c:	00000063 	andeq	r0, r0, r3, rrx
 8010360:	361c361c 			; <UNDEFINED> instruction: 0x361c361c
 8010364:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010368:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 801036c:	00000063 	andeq	r0, r0, r3, rrx
 8010370:	637f180c 	cmnvs	pc, #12, 16	; 0xc0000
 8010374:	7c606063 	stclvc	0, cr6, [r0], #-396	; 0xfffffe74
 8010378:	63636060 	cmnvs	r3, #96	; 0x60
 801037c:	0000007f 	andeq	r0, r0, pc, ror r0
 8010380:	00000000 	andeq	r0, r0, r0
 8010384:	1b3b6e00 	blne	8eebb8c <__RO_LIMIT__+0xedab14>
 8010388:	dcd8de7b 	ldclle	14, cr13, [r8], {123}	; 0x7b
 801038c:	00000077 	andeq	r0, r0, r7, ror r0
 8010390:	3d1f0000 	ldccc	0, cr0, [pc, #-0]	; 8010398 <eng8x16+0x928>
 8010394:	6e6c6c6d 	cdpvs	12, 6, cr6, cr12, cr13, {3}
 8010398:	6d6d6c7c 	stclvs	12, cr6, [sp, #-496]!	; 0xfffffe10
 801039c:	0000006f 	andeq	r0, r0, pc, rrx
 80103a0:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 80103a4:	63633e00 	cmnvs	r3, #0, 28
 80103a8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80103ac:	0000003e 	andeq	r0, r0, lr, lsr r0
 80103b0:	36360000 	ldrtcc	r0, [r6], -r0
 80103b4:	63633e00 	cmnvs	r3, #0, 28
 80103b8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80103bc:	0000003e 	andeq	r0, r0, lr, lsr r0
 80103c0:	0c183000 	ldceq	0, cr3, [r8], {-0}
 80103c4:	63633e00 	cmnvs	r3, #0, 28
 80103c8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80103cc:	0000003e 	andeq	r0, r0, lr, lsr r0
 80103d0:	663c1800 	ldrtvs	r1, [ip], -r0, lsl #16
 80103d4:	63636300 	cmnvs	r3, #0, 6
 80103d8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80103dc:	0000003f 	andeq	r0, r0, pc, lsr r0
 80103e0:	0c183000 	ldceq	0, cr3, [r8], {-0}
 80103e4:	63636300 	cmnvs	r3, #0, 6
 80103e8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80103ec:	0000003f 	andeq	r0, r0, pc, lsr r0
 80103f0:	36360000 	ldrtcc	r0, [r6], -r0
 80103f4:	63636300 	cmnvs	r3, #0, 6
 80103f8:	3f636363 	svccc	0x00636363
 80103fc:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 8010400:	3e006363 	cdpcc	3, 0, cr6, cr0, cr3, {3}
 8010404:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010408:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801040c:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010410:	63006363 	movwvs	r6, #867	; 0x363
 8010414:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010418:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801041c:	0000003f 	andeq	r0, r0, pc, lsr r0
 8010420:	0c0c0000 	stceq	0, cr0, [ip], {-0}
 8010424:	6063633e 	rsbvs	r6, r3, lr, lsr r3
 8010428:	0c3e6360 	ldceq	3, cr6, [lr], #-384	; 0xfffffe80
 801042c:	0000000c 	andeq	r0, r0, ip
 8010430:	361c0000 	ldrcc	r0, [ip], -r0
 8010434:	7c303030 	ldcvc	0, cr3, [r0], #-192	; 0xffffff40
 8010438:	73303030 	teqvc	r0, #48	; 0x30
 801043c:	0000007e 	andeq	r0, r0, lr, ror r0
 8010440:	c3c30000 	bicgt	r0, r3, #0
 8010444:	ff3c66c3 			; <UNDEFINED> instruction: 0xff3c66c3
 8010448:	1818ff18 	ldmdane	r8, {r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 801044c:	0000003c 	andeq	r0, r0, ip, lsr r0
 8010450:	66fc0000 	ldrbtvs	r0, [ip], r0
 8010454:	786c6666 	stmdavc	ip!, {r1, r2, r5, r6, r9, sl, sp, lr}^
 8010458:	66666f66 	strbtvs	r6, [r6], -r6, ror #30
 801045c:	000000f3 	strdeq	r0, [r0], -r3
 8010460:	1b0e0000 	blne	8390468 <__RO_LIMIT__+0x37f3f0>
 8010464:	187e1818 	ldmdane	lr!, {r3, r4, fp, ip}^
 8010468:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801046c:	00000070 	andeq	r0, r0, r0, ror r0
 8010470:	30180c00 	andscc	r0, r8, r0, lsl #24
 8010474:	06663c00 	strbteq	r3, [r6], -r0, lsl #24
 8010478:	6666663e 			; <UNDEFINED> instruction: 0x6666663e
 801047c:	0000003b 	andeq	r0, r0, fp, lsr r0
 8010480:	30180c00 	andscc	r0, r8, r0, lsl #24
 8010484:	18183800 	ldmdane	r8, {fp, ip, sp}
 8010488:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801048c:	0000003c 	andeq	r0, r0, ip, lsr r0
 8010490:	180c0600 	stmdane	ip, {r9, sl}
 8010494:	63633e00 	cmnvs	r3, #0, 28
 8010498:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801049c:	0000003e 	andeq	r0, r0, lr, lsr r0
 80104a0:	30180c00 	andscc	r0, r8, r0, lsl #24
 80104a4:	63636300 	cmnvs	r3, #0, 6
 80104a8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80104ac:	0000003f 	andeq	r0, r0, pc, lsr r0
 80104b0:	3b6e0000 	blcc	9b904b8 <__RO_LIMIT__+0x1b7f440>
 80104b4:	63637e00 	cmnvs	r3, #0, 28
 80104b8:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 80104bc:	00000063 	andeq	r0, r0, r3, rrx
 80104c0:	63006e3b 	movwvs	r6, #3643	; 0xe3b
 80104c4:	6b7b7373 	blvs	9eed298 <__RO_LIMIT__+0x1edc220>
 80104c8:	6367676f 	cmnvs	r7, #29097984	; 0x1bc0000
 80104cc:	00000063 	andeq	r0, r0, r3, rrx
 80104d0:	6c6c3c00 	stclvs	12, cr3, [ip], #-0
 80104d4:	7e00366c 	cfmadd32vc	mvax3, mvfx3, mvfx0, mvfx12
	...
 80104e0:	6c6c3800 	stclvs	8, cr3, [ip], #-0
 80104e4:	7c00386c 	stcvc	8, cr3, [r0], {108}	; 0x6c
	...
 80104f0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
 80104f4:	180c0c00 	stmdane	ip, {sl, fp}
 80104f8:	63636030 	cmnvs	r3, #48	; 0x30
 80104fc:	0000003e 	andeq	r0, r0, lr, lsr r0
 8010500:	00000000 	andeq	r0, r0, r0
 8010504:	7f000000 	svcvc	0x00000000
 8010508:	60606060 	rsbvs	r6, r0, r0, rrx
 801050c:	00000060 	andeq	r0, r0, r0, rrx
 8010510:	00000000 	andeq	r0, r0, r0
 8010514:	7f000000 	svcvc	0x00000000
 8010518:	03030303 	movweq	r0, #13059	; 0x3303
 801051c:	00000003 	andeq	r0, r0, r3
 8010520:	63e06000 	mvnvs	r6, #0
 8010524:	3e186c66 	cdpcc	12, 1, cr6, cr8, cr6, {3}
 8010528:	180ec373 	stmdane	lr, {r0, r1, r4, r5, r6, r8, r9, lr, pc}
 801052c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8010530:	63e06000 	mvnvs	r6, #0
 8010534:	36186c66 	ldrcc	r6, [r8], -r6, ror #24
 8010538:	3f36de6e 	svccc	0x0036de6e
 801053c:	00000006 	andeq	r0, r0, r6
 8010540:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 8010544:	18181800 	ldmdane	r8, {fp, ip}
 8010548:	3c3c3c18 	ldccc	12, cr3, [ip], #-96	; 0xffffffa0
 801054c:	00000018 	andeq	r0, r0, r8, lsl r0
 8010550:	1b090000 	blne	8250558 <__RO_LIMIT__+0x23f4e0>
 8010554:	6c36361b 	ldcvs	6, cr3, [r6], #-108	; 0xffffff94
 8010558:	1b1b3636 	blne	86dde38 <__RO_LIMIT__+0x6ccdc0>
 801055c:	00000009 	andeq	r0, r0, r9
 8010560:	6c480000 	marvs	acc0, r0, r8
 8010564:	1b36366c 	blne	8d9df1c <__RO_LIMIT__+0xd8cea4>
 8010568:	6c6c3636 	stclvs	6, cr3, [ip], #-216	; 0xffffff28
 801056c:	00000048 	andeq	r0, r0, r8, asr #32
 8010570:	11441144 	cmpne	r4, r4, asr #2
 8010574:	11441144 	cmpne	r4, r4, asr #2
 8010578:	11441144 	cmpne	r4, r4, asr #2
 801057c:	11441144 	cmpne	r4, r4, asr #2
 8010580:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 8010584:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 8010588:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 801058c:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 8010590:	bbeebbee 	bllt	7bbf550 <__RW_SIZE__+0x7bbefbc>
 8010594:	bbeebbee 	bllt	7bbf554 <__RW_SIZE__+0x7bbefc0>
 8010598:	bbeebbee 	bllt	7bbf558 <__RW_SIZE__+0x7bbefc4>
 801059c:	bbeebbee 	bllt	7bbf55c <__RW_SIZE__+0x7bbefc8>
 80105a0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105a4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105a8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105ac:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105b0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105b4:	f8181818 			; <UNDEFINED> instruction: 0xf8181818
 80105b8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105bc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105c0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105c4:	18f81818 	ldmne	r8!, {r3, r4, fp, ip}^
 80105c8:	181818f8 	ldmdane	r8, {r3, r4, r5, r6, r7, fp, ip}
 80105cc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80105d0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80105d4:	f6363636 			; <UNDEFINED> instruction: 0xf6363636
 80105d8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80105dc:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80105e0:	00000000 	andeq	r0, r0, r0
 80105e4:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 80105e8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80105ec:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80105f0:	00000000 	andeq	r0, r0, r0
 80105f4:	18f80000 	ldmne	r8!, {}^	; <UNPREDICTABLE>
 80105f8:	181818f8 	ldmdane	r8, {r3, r4, r5, r6, r7, fp, ip}
 80105fc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010600:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010604:	06f63636 			; <UNDEFINED> instruction: 0x06f63636
 8010608:	363636f6 			; <UNDEFINED> instruction: 0x363636f6
 801060c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010610:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010614:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010618:	36363636 			; <UNDEFINED> instruction: 0x36363636
 801061c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010620:	00000000 	andeq	r0, r0, r0
 8010624:	06fe0000 	ldrbteq	r0, [lr], r0
 8010628:	363636f6 			; <UNDEFINED> instruction: 0x363636f6
 801062c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010630:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010634:	06f63636 			; <UNDEFINED> instruction: 0x06f63636
 8010638:	000000fe 	strdeq	r0, [r0], -lr
 801063c:	00000000 	andeq	r0, r0, r0
 8010640:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010644:	fe363636 	mrc2	6, 1, r3, cr6, cr6, {1}
	...
 8010650:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010654:	18f81818 	ldmne	r8!, {r3, r4, fp, ip}^
 8010658:	000000f8 	strdeq	r0, [r0], -r8
	...
 8010664:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 8010668:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801066c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010670:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010674:	1f181818 	svcne	0x00181818
	...
 8010680:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010684:	ff181818 			; <UNDEFINED> instruction: 0xff181818
	...
 8010694:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 8010698:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801069c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106a0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106a4:	1f181818 	svcne	0x00181818
 80106a8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106ac:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106b0:	00000000 	andeq	r0, r0, r0
 80106b4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
	...
 80106c0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106c4:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 80106c8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106cc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106d0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106d4:	181f1818 	ldmdane	pc, {r3, r4, fp, ip}	; <UNPREDICTABLE>
 80106d8:	1818181f 	ldmdane	r8, {r0, r1, r2, r3, r4, fp, ip}
 80106dc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80106e0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80106e4:	37363636 			; <UNDEFINED> instruction: 0x37363636
 80106e8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80106ec:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80106f0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80106f4:	30373636 	eorscc	r3, r7, r6, lsr r6
 80106f8:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
 8010704:	303f0000 	eorscc	r0, pc, r0
 8010708:	36363637 			; <UNDEFINED> instruction: 0x36363637
 801070c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010710:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010714:	00f73636 	rscseq	r3, r7, r6, lsr r6
 8010718:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
 8010724:	00ff0000 	rscseq	r0, pc, r0
 8010728:	363636f7 			; <UNDEFINED> instruction: 0x363636f7
 801072c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010730:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010734:	36373636 			; <UNDEFINED> instruction: 0x36373636
 8010738:	36363637 			; <UNDEFINED> instruction: 0x36363637
 801073c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010740:	00000000 	andeq	r0, r0, r0
 8010744:	00ff0000 	rscseq	r0, pc, r0
 8010748:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 801074c:	00000000 	andeq	r0, r0, r0
 8010750:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010754:	f7363636 			; <UNDEFINED> instruction: 0xf7363636
 8010758:	36363636 			; <UNDEFINED> instruction: 0x36363636
 801075c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010760:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010764:	00ff1818 	rscseq	r1, pc, r8, lsl r8	; <UNPREDICTABLE>
 8010768:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 801076c:	00000000 	andeq	r0, r0, r0
 8010770:	36363636 			; <UNDEFINED> instruction: 0x36363636
 8010774:	ff363636 			; <UNDEFINED> instruction: 0xff363636
	...
 8010784:	00ff0000 	rscseq	r0, pc, r0
 8010788:	181818ff 	ldmdane	r8, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
 801078c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010790:	00000000 	andeq	r0, r0, r0
 8010794:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 8010798:	36363636 			; <UNDEFINED> instruction: 0x36363636
 801079c:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107a0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107a4:	3f363636 	svccc	0x00363636
	...
 80107b0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80107b4:	181f1818 	ldmdane	pc, {r3, r4, fp, ip}	; <UNPREDICTABLE>
 80107b8:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
 80107c4:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
 80107c8:	1818181f 	ldmdane	r8, {r0, r1, r2, r3, r4, fp, ip}
 80107cc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80107d0:	00000000 	andeq	r0, r0, r0
 80107d4:	3f000000 	svccc	0x00000000
 80107d8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107dc:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107e0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107e4:	f7363636 			; <UNDEFINED> instruction: 0xf7363636
 80107e8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107ec:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80107f0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80107f4:	00ff1818 	rscseq	r1, pc, r8, lsl r8	; <UNPREDICTABLE>
 80107f8:	181818ff 	ldmdane	r8, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
 80107fc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010800:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010804:	f8181818 			; <UNDEFINED> instruction: 0xf8181818
	...
 8010814:	1f000000 	svcne	0x00000000
 8010818:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 801081c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 8010820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8010824:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8010828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801082c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
 8010838:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801083c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8010840:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 8010844:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 8010848:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 801084c:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 8010850:	0f0f0f0f 	svceq	0x000f0f0f
 8010854:	0f0f0f0f 	svceq	0x000f0f0f
 8010858:	0f0f0f0f 	svceq	0x000f0f0f
 801085c:	0f0f0f0f 	svceq	0x000f0f0f
 8010860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8010864:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
 8010874:	666e3b00 	strbtvs	r3, [lr], -r0, lsl #22
 8010878:	6e666666 	cdpvs	6, 6, cr6, cr6, cr6, {3}
 801087c:	0000003b 	andeq	r0, r0, fp, lsr r0
 8010880:	663c0000 	ldrtvs	r0, [ip], -r0
 8010884:	7c666666 	stclvc	6, cr6, [r6], #-408	; 0xfffffe68
 8010888:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 801088c:	6060607c 	rsbvs	r6, r0, ip, ror r0
 8010890:	637f0000 	cmnvs	pc, #0
 8010894:	60606063 	rsbvs	r6, r0, r3, rrx
 8010898:	60606060 	rsbvs	r6, r0, r0, rrx
 801089c:	00000060 	andeq	r0, r0, r0, rrx
 80108a0:	00000000 	andeq	r0, r0, r0
 80108a4:	36367f00 	ldrtcc	r7, [r6], -r0, lsl #30
 80108a8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 80108ac:	00000036 	andeq	r0, r0, r6, lsr r0
 80108b0:	637f0000 	cmnvs	pc, #0
 80108b4:	060c1831 			; <UNDEFINED> instruction: 0x060c1831
 80108b8:	6331180c 	teqvs	r1, #12, 16	; 0xc0000
 80108bc:	0000007f 	andeq	r0, r0, pc, ror r0
 80108c0:	00000000 	andeq	r0, r0, r0
 80108c4:	666c3f00 	strbtvs	r3, [ip], -r0, lsl #30
 80108c8:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80108cc:	0000003c 	andeq	r0, r0, ip, lsr r0
 80108d0:	00000000 	andeq	r0, r0, r0
 80108d4:	66666600 	strbtvs	r6, [r6], -r0, lsl #12
 80108d8:	76666666 	strbtvc	r6, [r6], -r6, ror #12
 80108dc:	6060607f 	rsbvs	r6, r0, pc, ror r0
 80108e0:	00000000 	andeq	r0, r0, r0
 80108e4:	6c6c3f00 	stclvs	15, cr3, [ip], #-0
 80108e8:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 80108ec:	0000000c 	andeq	r0, r0, ip
 80108f0:	187e0000 	ldmdane	lr!, {}^	; <UNPREDICTABLE>
 80108f4:	6666663c 			; <UNDEFINED> instruction: 0x6666663c
 80108f8:	183c6666 	ldmdane	ip!, {r1, r2, r5, r6, r9, sl, sp, lr}
 80108fc:	0000007e 	andeq	r0, r0, lr, ror r0
 8010900:	663c0000 	ldrtvs	r0, [ip], -r0
 8010904:	7e666666 	cdpvc	6, 6, cr6, cr6, cr6, {3}
 8010908:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 801090c:	0000003c 	andeq	r0, r0, ip, lsr r0
 8010910:	633e0000 	teqvs	lr, #0
 8010914:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010918:	36363677 			; <UNDEFINED> instruction: 0x36363677
 801091c:	00000077 	andeq	r0, r0, r7, ror r0
 8010920:	1b0e0000 	blne	8390928 <__RO_LIMIT__+0x37f8b0>
 8010924:	663c181b 			; <UNDEFINED> instruction: 0x663c181b
 8010928:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 801092c:	0000003c 	andeq	r0, r0, ip, lsr r0
 8010930:	00000000 	andeq	r0, r0, r0
 8010934:	6b7f3600 	blvs	9fde13c <__RO_LIMIT__+0x1fcd0c4>
 8010938:	0000367f 	andeq	r3, r0, pc, ror r6
 801093c:	00000000 	andeq	r0, r0, r0
 8010940:	06060000 	streq	r0, [r6], -r0
 8010944:	6f673e1e 	svcvs	0x00673e1e
 8010948:	3e737b7f 	vmovcc.s8	r7, d3[7]
 801094c:	0030303c 	eorseq	r3, r0, ip, lsr r0
 8010950:	1f000000 	svcne	0x00000000
 8010954:	7f606030 	svcvc	0x00606030
 8010958:	1f306060 	svcne	0x00306060
 801095c:	00000000 	andeq	r0, r0, r0
 8010960:	633e0000 	teqvs	lr, #0
 8010964:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 8010968:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 801096c:	00000063 	andeq	r0, r0, r3, rrx
 8010970:	00000000 	andeq	r0, r0, r0
 8010974:	7f00007f 	svcvc	0x0000007f
 8010978:	007f0000 	rsbseq	r0, pc, r0
	...
 8010984:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 8010988:	00181818 	andseq	r1, r8, r8, lsl r8
 801098c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 8010990:	30600000 	rsbcc	r0, r0, r0
 8010994:	0c060c18 	stceq	12, cr0, [r6], {24}
 8010998:	00603018 	rsbeq	r3, r0, r8, lsl r0
 801099c:	0000007e 	andeq	r0, r0, lr, ror r0
 80109a0:	0c060000 	stceq	0, cr0, [r6], {-0}
 80109a4:	30603018 	rsbcc	r3, r0, r8, lsl r0
 80109a8:	00060c18 	andeq	r0, r6, r8, lsl ip
 80109ac:	0000007e 	andeq	r0, r0, lr, ror r0
 80109b0:	1b0e0000 	blne	83909b8 <__RO_LIMIT__+0x37f940>
 80109b4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80109b8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80109bc:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80109c0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80109c4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 80109c8:	d8181818 	ldmdale	r8, {r3, r4, fp, ip}
 80109cc:	00000070 	andeq	r0, r0, r0, ror r0
 80109d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 80109d4:	ff000018 			; <UNDEFINED> instruction: 0xff000018
 80109d8:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
	...
 80109e4:	700edb70 	andvc	sp, lr, r0, ror fp
 80109e8:	00000edb 	ldrdeq	r0, [r0], -fp
 80109ec:	00000000 	andeq	r0, r0, r0
 80109f0:	361c0000 	ldrcc	r0, [ip], -r0
 80109f4:	00001c36 	andeq	r1, r0, r6, lsr ip
	...
 8010a04:	3e3e1c00 	cdpcc	12, 3, cr1, cr14, cr0, {0}
 8010a08:	00001c3e 	andeq	r1, r0, lr, lsr ip
	...
 8010a14:	3c3c1800 	ldccc	8, cr1, [ip], #-0
 8010a18:	00000018 	andeq	r0, r0, r8, lsl r0
 8010a1c:	00000000 	andeq	r0, r0, r0
 8010a20:	0c0c0f00 	stceq	15, cr0, [ip], {-0}
 8010a24:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 8010a28:	1c3c6ccc 	ldcne	12, cr6, [ip], #-816	; 0xfffffcd0
 8010a2c:	0000000c 	andeq	r0, r0, ip
 8010a30:	66667c00 	strbtvs	r7, [r6], -r0, lsl #24
 8010a34:	00666666 	rsbeq	r6, r6, r6, ror #12
	...
 8010a40:	0c6c3800 	stcleq	8, cr3, [ip], #-0
 8010a44:	007c3018 	rsbseq	r3, ip, r8, lsl r0
	...
 8010a54:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8010a58:	007e7e7e 	rsbseq	r7, lr, lr, ror lr
	...

08010a70 <Stack_reg>:
 8010a70:	08010fec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp}
 8010a74:	08010ff0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010a78:	08010ff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp}
 8010a7c:	08010ff8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8010a80:	08010ffc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8010a84:	08011000 	stmdaeq	r1, {ip}
 8010a88:	08011004 	stmdaeq	r1, {r2, ip}
 8010a8c:	08011008 	stmdaeq	r1, {r3, ip}

08010a90 <EXTI9_5_LUT.4985>:
 8010a90:	00000000 	andeq	r0, r0, r0
 8010a94:	00000001 	andeq	r0, r0, r1
 8010a98:	00000002 	andeq	r0, r0, r2
 8010a9c:	00000000 	andeq	r0, r0, r0
 8010aa0:	00000003 	andeq	r0, r0, r3
	...

08010ab0 <EXTI15_10_LUT.5040>:
 8010ab0:	00000000 	andeq	r0, r0, r0
 8010ab4:	00000004 	andeq	r0, r0, r4
 8010ab8:	00000005 	andeq	r0, r0, r5
 8010abc:	00000000 	andeq	r0, r0, r0

08010ac0 <_ctype_>:
 8010ac0:	20202000 	eorcs	r2, r0, r0
 8010ac4:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010ac8:	28282020 	stmdacs	r8!, {r5, sp}
 8010acc:	20282828 	eorcs	r2, r8, r8, lsr #16
 8010ad0:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010ad4:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010ad8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010adc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010ae0:	10108820 	andsne	r8, r0, r0, lsr #16
 8010ae4:	10101010 	andsne	r1, r0, r0, lsl r0
 8010ae8:	10101010 	andsne	r1, r0, r0, lsl r0
 8010aec:	10101010 	andsne	r1, r0, r0, lsl r0
 8010af0:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
 8010af4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 8010af8:	10040404 	andne	r0, r4, r4, lsl #8
 8010afc:	10101010 	andsne	r1, r0, r0, lsl r0
 8010b00:	41411010 	cmpmi	r1, r0, lsl r0
 8010b04:	41414141 	cmpmi	r1, r1, asr #2
 8010b08:	01010101 	tsteq	r1, r1, lsl #2
 8010b0c:	01010101 	tsteq	r1, r1, lsl #2
 8010b10:	01010101 	tsteq	r1, r1, lsl #2
 8010b14:	01010101 	tsteq	r1, r1, lsl #2
 8010b18:	01010101 	tsteq	r1, r1, lsl #2
 8010b1c:	10101010 	andsne	r1, r0, r0, lsl r0
 8010b20:	42421010 	submi	r1, r2, #16
 8010b24:	42424242 	submi	r4, r2, #536870916	; 0x20000004
 8010b28:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8010b2c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8010b30:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8010b34:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8010b38:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 8010b3c:	10101010 	andsne	r1, r0, r0, lsl r0
 8010b40:	00000020 	andeq	r0, r0, r0, lsr #32
	...

08010bc4 <_global_impure_ptr>:
 8010bc4:	20000018 	andcs	r0, r0, r8, lsl r0

08010bc8 <blanks.6752>:
 8010bc8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010bcc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010bd0:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010bd4:	20202020 	eorcs	r2, r0, r0, lsr #32

08010bd8 <zeroes.6753>:
 8010bd8:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010bdc:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010be0:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010be4:	30303030 	eorscc	r3, r0, r0, lsr r0

08010be8 <p05.5301>:
 8010be8:	00000005 	andeq	r0, r0, r5
 8010bec:	00000019 	andeq	r0, r0, r9, lsl r0
 8010bf0:	0000007d 	andeq	r0, r0, sp, ror r0
 8010bf4:	00000000 	andeq	r0, r0, r0

08010bf8 <__mprec_tens>:
 8010bf8:	00000000 	andeq	r0, r0, r0
 8010bfc:	3ff00000 	svccc	0x00f00000	; IMB
 8010c00:	00000000 	andeq	r0, r0, r0
 8010c04:	40240000 	eormi	r0, r4, r0
 8010c08:	00000000 	andeq	r0, r0, r0
 8010c0c:	40590000 	subsmi	r0, r9, r0
 8010c10:	00000000 	andeq	r0, r0, r0
 8010c14:	408f4000 	addmi	r4, pc, r0
 8010c18:	00000000 	andeq	r0, r0, r0
 8010c1c:	40c38800 	sbcmi	r8, r3, r0, lsl #16
 8010c20:	00000000 	andeq	r0, r0, r0
 8010c24:	40f86a00 	rscsmi	r6, r8, r0, lsl #20
 8010c28:	00000000 	andeq	r0, r0, r0
 8010c2c:	412e8480 	smlawbmi	lr, r0, r4, r8
 8010c30:	00000000 	andeq	r0, r0, r0
 8010c34:	416312d0 	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
 8010c38:	00000000 	andeq	r0, r0, r0
 8010c3c:	4197d784 	orrsmi	sp, r7, r4, lsl #15
 8010c40:	00000000 	andeq	r0, r0, r0
 8010c44:	41cdcd65 	bicmi	ip, sp, r5, ror #26
 8010c48:	20000000 	andcs	r0, r0, r0
 8010c4c:	4202a05f 	andmi	sl, r2, #95	; 0x5f
 8010c50:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 8010c54:	42374876 	eorsmi	r4, r7, #7733248	; 0x760000
 8010c58:	a2000000 	andge	r0, r0, #0
 8010c5c:	426d1a94 	rsbmi	r1, sp, #148, 20	; 0x94000
 8010c60:	e5400000 	strb	r0, [r0, #-0]
 8010c64:	42a2309c 	adcmi	r3, r2, #156	; 0x9c
 8010c68:	1e900000 	cdpne	0, 9, cr0, cr0, cr0, {0}
 8010c6c:	42d6bcc4 	sbcsmi	fp, r6, #196, 24	; 0xc400
 8010c70:	26340000 	ldrtcs	r0, [r4], -r0
 8010c74:	430c6bf5 	movwmi	r6, #52213	; 0xcbf5
 8010c78:	37e08000 	strbcc	r8, [r0, r0]!
 8010c7c:	4341c379 	movtmi	ip, #4985	; 0x1379
 8010c80:	85d8a000 	ldrbhi	sl, [r8]
 8010c84:	43763457 	cmnmi	r6, #1459617792	; 0x57000000
 8010c88:	674ec800 	strbvs	ip, [lr, -r0, lsl #16]
 8010c8c:	43abc16d 			; <UNDEFINED> instruction: 0x43abc16d
 8010c90:	60913d00 	addsvs	r3, r1, r0, lsl #26
 8010c94:	43e158e4 	mvnmi	r5, #228, 16	; 0xe40000
 8010c98:	78b58c40 	ldmvc	r5!, {r6, sl, fp, pc}
 8010c9c:	4415af1d 	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
 8010ca0:	d6e2ef50 	usatle	lr, #2, r0, asr #30
 8010ca4:	444b1ae4 	strbmi	r1, [fp], #-2788	; 0xfffff51c
 8010ca8:	064dd592 			; <UNDEFINED> instruction: 0x064dd592
 8010cac:	4480f0cf 	strmi	pc, [r0], #207	; 0xcf
 8010cb0:	c7e14af6 			; <UNDEFINED> instruction: 0xc7e14af6
 8010cb4:	44b52d02 	ldrtmi	r2, [r5], #3330	; 0xd02
 8010cb8:	79d99db4 	ldmibvc	r9, {r2, r4, r5, r7, r8, sl, fp, ip, pc}^
 8010cbc:	44ea7843 	strbtmi	r7, [sl], #2115	; 0x843

08010cc0 <__mprec_tinytens>:
 8010cc0:	97d889bc 			; <UNDEFINED> instruction: 0x97d889bc
 8010cc4:	3c9cd2b2 	lfmcc	f5, 1, [ip], {178}	; 0xb2
 8010cc8:	d5a8a733 	strle	sl, [r8, #1843]!	; 0x733
 8010ccc:	3949f623 	stmdbcc	r9, {r0, r1, r5, r9, sl, ip, sp, lr, pc}^
 8010cd0:	44f4a73d 	ldrbtmi	sl, [r4], #1853	; 0x73d
 8010cd4:	32a50ffd 	adccc	r0, r5, #1012	; 0x3f4
 8010cd8:	cf8c979d 	svcgt	0x008c979d
 8010cdc:	255bba08 	ldrbcs	fp, [fp, #-2568]	; 0xfffff5f8
 8010ce0:	64ac6f43 	strtvs	r6, [ip], #3907	; 0xf43
 8010ce4:	0ac80628 	beq	721258c <__RW_SIZE__+0x7211ff8>

08010ce8 <__mprec_bigtens>:
 8010ce8:	37e08000 	strbcc	r8, [r0, r0]!
 8010cec:	4341c379 	movtmi	ip, #4985	; 0x1379
 8010cf0:	b5056e17 	strlt	r6, [r5, #-3607]	; 0xfffff1e9
 8010cf4:	4693b8b5 			; <UNDEFINED> instruction: 0x4693b8b5
 8010cf8:	e93ff9f5 	ldmdb	pc!, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 8010cfc:	4d384f03 	ldcmi	15, cr4, [r8, #-12]!
 8010d00:	f9301d32 			; <UNDEFINED> instruction: 0xf9301d32
 8010d04:	5a827748 	bpl	60aea2c <__RW_SIZE__+0x60ae498>
 8010d08:	7f73bf3c 	svcvc	0x0073bf3c
 8010d0c:	75154fdd 	ldrvc	r4, [r5, #-4061]	; 0xfffff023

08010d10 <blanks.6696>:
 8010d10:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010d14:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010d18:	20202020 	eorcs	r2, r0, r0, lsr #32
 8010d1c:	20202020 	eorcs	r2, r0, r0, lsr #32

08010d20 <zeroes.6697>:
 8010d20:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010d24:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010d28:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010d2c:	30303030 	eorscc	r3, r0, r0, lsr r0
 8010d30:	64253a42 	strtvs	r3, [r5], #-2626	; 0xfffff5be
 8010d34:	253a5520 	ldrcs	r5, [sl, #-1312]!	; 0xfffffae0
 8010d38:	3a532064 	bcc	94d8ed0 <__RO_LIMIT__+0x14c7e58>
 8010d3c:	00006425 	andeq	r6, r0, r5, lsr #8
 8010d40:	4546494c 	strbmi	r4, [r6, #-2380]	; 0xfffff6b4
 8010d44:	0064253a 	rsbeq	r2, r4, sl, lsr r5
 8010d48:	45525453 	ldrbmi	r5, [r2, #-1107]	; 0xfffffbad
 8010d4c:	46205445 	strtmi	r5, [r0], -r5, asr #8
 8010d50:	20474f52 	subcs	r4, r7, r2, asr pc
 8010d54:	00005845 	andeq	r5, r0, r5, asr #16
 8010d58:	73657250 	cmnvc	r5, #80, 4
 8010d5c:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 8010d60:	656b2079 	strbvs	r2, [fp, #-121]!	; 0xffffff87
 8010d64:	6f742079 	svcvs	0x00742079
 8010d68:	61747320 	cmnvs	r4, r0, lsr #6
 8010d6c:	00007472 	andeq	r7, r0, r2, ror r4
 8010d70:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
 8010d74:	45564f20 	ldrbmi	r4, [r6, #-3872]	; 0xfffff0e0
 8010d78:	00000052 	andeq	r0, r0, r2, asr r0
 8010d7c:	73657250 	cmnvc	r5, #80, 4
 8010d80:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
 8010d84:	656b2079 	strbvs	r2, [fp, #-121]!	; 0xffffff87
 8010d88:	6f742079 	svcvs	0x00742079
 8010d8c:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8010d90:	00007972 	andeq	r7, r0, r2, ror r9
 8010d94:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
 8010d98:	46207465 	strtmi	r7, [r0], -r5, ror #8
 8010d9c:	20676f72 	rsbcs	r6, r7, r2, ror pc
 8010da0:	53205845 	teqpl	r0, #4521984	; 0x450000
 8010da4:	746f6f68 	strbtvc	r6, [pc], #-3944	; 8010dac <zeroes.6697+0x8c>
 8010da8:	53207265 	teqpl	r0, #1342177286	; 0x50000006
 8010dac:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 8010db0:	00000a21 	andeq	r0, r0, r1, lsr #20
 8010db4:	255b7325 	ldrbcs	r7, [fp, #-805]	; 0xfffffcdb
 8010db8:	252c5d64 	strcs	r5, [ip, #-3428]!	; 0xfffff29c
 8010dbc:	78303d73 	ldmdavc	r0!, {r0, r1, r4, r5, r6, r8, sl, fp, ip, sp}
 8010dc0:	58382e25 	ldmdapl	r8!, {r0, r2, r5, r9, sl, fp, sp}
 8010dc4:	0000000a 	andeq	r0, r0, sl
 8010dc8:	61766e49 	cmnvs	r6, r9, asr #28
 8010dcc:	5f64696c 	svcpl	0x0064696c
 8010dd0:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 8010dd4:	6f697470 	svcvs	0x00697470
 8010dd8:	25203a6e 	strcs	r3, [r0, #-2670]!	; 0xfffff592
 8010ddc:	000a2164 	andeq	r2, sl, r4, ror #2
 8010de0:	61766e49 	cmnvs	r6, r9, asr #28
 8010de4:	5f64696c 	svcpl	0x0064696c
 8010de8:	3a525349 	bcc	94a5b14 <__RO_LIMIT__+0x1494a9c>
 8010dec:	21642520 	cmncs	r4, r0, lsr #10
 8010df0:	0000000a 	andeq	r0, r0, sl
 8010df4:	21494d4e 	cmpcs	r9, lr, asr #26
 8010df8:	0000000a 	andeq	r0, r0, sl
 8010dfc:	64726148 	ldrbtvs	r6, [r2], #-328	; 0xfffffeb8
 8010e00:	75614620 	strbvc	r4, [r1, #-1568]!	; 0xfffff9e0
 8010e04:	0a21746c 	beq	886dfbc <__RO_LIMIT__+0x85cf44>
 8010e08:	00000000 	andeq	r0, r0, r0
 8010e0c:	4528524c 	strmi	r5, [r8, #-588]!	; 0xfffffdb4
 8010e10:	525f4358 	subspl	r4, pc, #88, 6	; 0x60000001
 8010e14:	52555445 	subspl	r5, r5, #1157627904	; 0x45000000
 8010e18:	303d294e 	eorscc	r2, sp, lr, asr #18
 8010e1c:	382e2578 	stmdacc	lr!, {r3, r4, r5, r6, r8, sl, sp}
 8010e20:	00000a58 	andeq	r0, r0, r8, asr sl
 8010e24:	3d50534d 	ldclcc	3, cr5, [r0, #-308]	; 0xfffffecc
 8010e28:	2e257830 	mcrcs	8, 1, r7, cr5, cr0, {1}
 8010e2c:	000a5838 	andeq	r5, sl, r8, lsr r8
 8010e30:	3d505350 	ldclcc	3, cr5, [r0, #-320]	; 0xfffffec0
 8010e34:	2e257830 	mcrcs	8, 1, r7, cr5, cr0, {1}
 8010e38:	000a5838 	andeq	r5, sl, r8, lsr r8
 8010e3c:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 8010e40:	6f697470 	svcvs	0x00697470
 8010e44:	636f206e 	cmnvs	pc, #110	; 0x6e
 8010e48:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 8010e4c:	6f726620 	svcvs	0x00726620
 8010e50:	6168206d 	cmnvs	r8, sp, rrx
 8010e54:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 8010e58:	6f6d2072 	svcvs	0x006d2072
 8010e5c:	000a6564 	andeq	r6, sl, r4, ror #10
 8010e60:	0050534d 	subseq	r5, r0, sp, asr #6
 8010e64:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 8010e68:	6f697470 	svcvs	0x00697470
 8010e6c:	636f206e 	cmnvs	pc, #110	; 0x6e
 8010e70:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 8010e74:	6f726620 	svcvs	0x00726620
 8010e78:	6874206d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, sp}^
 8010e7c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8010e80:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8010e88 <zeroes.6697+0x168>
 8010e84:	69772065 	ldmdbvs	r7!, {r0, r2, r5, r6, sp}^
 8010e88:	4d206874 	stcmi	8, cr6, [r0, #-464]!	; 0xfffffe30
 8010e8c:	000a5053 	andeq	r5, sl, r3, asr r0
 8010e90:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 8010e94:	6f697470 	svcvs	0x00697470
 8010e98:	636f206e 	cmnvs	pc, #110	; 0x6e
 8010e9c:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 8010ea0:	6f726620 	svcvs	0x00726620
 8010ea4:	6874206d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, sp}^
 8010ea8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8010eac:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8010eb4 <zeroes.6697+0x194>
 8010eb0:	69772065 	ldmdbvs	r7!, {r0, r2, r5, r6, sp}^
 8010eb4:	50206874 	eorpl	r6, r0, r4, ror r8
 8010eb8:	000a5053 	andeq	r5, sl, r3, asr r0
 8010ebc:	00505350 	subseq	r5, r0, r0, asr r3
 8010ec0:	61766e49 	cmnvs	r6, r9, asr #28
 8010ec4:	2064696c 	rsbcs	r6, r4, ip, ror #18
 8010ec8:	65637865 	strbvs	r7, [r3, #-2149]!	; 0xfffff79b
 8010ecc:	6f697470 	svcvs	0x00697470
 8010ed0:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
 8010ed4:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 8010ed8:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8010edc:	3d206575 	cfstr32cc	mvfx6, [r0, #-468]!	; 0xfffffe2c
 8010ee0:	2325203e 	teqcs	r5, #62	; 0x3e
 8010ee4:	0a58382e 	beq	961efa4 <__RO_LIMIT__+0x160df2c>
 8010ee8:	00000000 	andeq	r0, r0, r0
 8010eec:	53434853 	movtpl	r4, #14419	; 0x3853
 8010ef0:	3e3d2052 	mrccc	0, 1, r2, cr13, cr2, {2}
 8010ef4:	2e232520 	cfsh64cs	mvdx2, mvdx3, #16
 8010ef8:	000a5838 	andeq	r5, sl, r8, lsr r8
 8010efc:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
 8010f00:	75614628 	strbvc	r4, [r1, #-1576]!	; 0xfffff9d8
 8010f04:	5220746c 	eorpl	r7, r0, #108, 8	; 0x6c000000
 8010f08:	6f736165 	svcvs	0x00736165
 8010f0c:	3d20296e 	stccc	9, cr2, [r0, #-440]!	; 0xfffffe48
 8010f10:	2325203e 	teqcs	r5, #62	; 0x3e
 8010f14:	0a58382e 	beq	961efd4 <__RO_LIMIT__+0x160df5c>
 8010f18:	00000000 	andeq	r0, r0, r0
 8010f1c:	41464d4d 	cmpmi	r6, sp, asr #26
 8010f20:	61562052 	cmpvs	r6, r2, asr r0
 8010f24:	2064696c 	rsbcs	r6, r4, ip, ror #18
 8010f28:	25203e3d 	strcs	r3, [r0, #-3645]!	; 0xfffff1c3
 8010f2c:	00000a64 	andeq	r0, r0, r4, ror #20
 8010f30:	41464d4d 	cmpmi	r6, sp, asr #26
 8010f34:	3e3d2052 	mrccc	0, 1, r2, cr13, cr2, {2}
 8010f38:	2e232520 	cfsh64cs	mvdx2, mvdx3, #16
 8010f3c:	000a5838 	andeq	r5, sl, r8, lsr r8
 8010f40:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
 8010f44:	6c615620 	stclvs	6, cr5, [r1], #-128	; 0xffffff80
 8010f48:	3d206469 	cfstrscc	mvf6, [r0, #-420]!	; 0xfffffe5c
 8010f4c:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 8010f50:	0000000a 	andeq	r0, r0, sl
 8010f54:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
 8010f58:	203e3d20 	eorscs	r3, lr, r0, lsr #26
 8010f5c:	382e2325 	stmdacc	lr!, {r0, r2, r5, r8, r9, sp}
 8010f60:	00000a58 	andeq	r0, r0, r8, asr sl
 8010f64:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
 8010f68:	72614828 	rsbvc	r4, r1, #40, 16	; 0x280000
 8010f6c:	61462064 	cmpvs	r6, r4, rrx
 8010f70:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8010f74:	73616552 	cmnvc	r1, #343932928	; 0x14800000
 8010f78:	20296e6f 	eorcs	r6, r9, pc, ror #28
 8010f7c:	25203e3d 	strcs	r3, [r0, #-3645]!	; 0xfffff1c3
 8010f80:	58382e23 	ldmdapl	r8!, {r0, r1, r5, r9, sl, fp, sp}
 8010f84:	0000000a 	andeq	r0, r0, sl
 8010f88:	6f6d654d 	svcvs	0x006d654d
 8010f8c:	4d207972 	stcmi	9, cr7, [r0, #-456]!	; 0xfffffe38
 8010f90:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
 8010f94:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8010f98:	61462074 	hvcvs	25092	; 0x6204
 8010f9c:	21746c75 	cmncs	r4, r5, ror ip
 8010fa0:	0000000a 	andeq	r0, r0, sl
 8010fa4:	20737542 	rsbscs	r7, r3, r2, asr #10
 8010fa8:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
 8010fac:	000a2174 	andeq	r2, sl, r4, ror r1
 8010fb0:	67617355 			; <UNDEFINED> instruction: 0x67617355
 8010fb4:	61462065 	cmpvs	r6, r5, rrx
 8010fb8:	21746c75 	cmncs	r4, r5, ror ip
 8010fbc:	0000000a 	andeq	r0, r0, sl
 8010fc0:	20435653 	subcs	r5, r3, r3, asr r6
 8010fc4:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
 8010fc8:	0000000a 	andeq	r0, r0, sl
 8010fcc:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
 8010fd0:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
 8010fd4:	6c614320 	stclvs	3, cr4, [r1], #-128	; 0xffffff80
 8010fd8:	00000a6c 	andeq	r0, r0, ip, ror #20
 8010fdc:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
 8010fe0:	43205653 	teqmi	r0, #87031808	; 0x5300000
 8010fe4:	0a6c6c61 	beq	9b2c170 <__RO_LIMIT__+0x1b1b0f8>
 8010fe8:	00000000 	andeq	r0, r0, r0
 8010fec:	00003052 	andeq	r3, r0, r2, asr r0
 8010ff0:	00003152 	andeq	r3, r0, r2, asr r1
 8010ff4:	00003252 	andeq	r3, r0, r2, asr r2
 8010ff8:	00003352 	andeq	r3, r0, r2, asr r3
 8010ffc:	00323152 	eorseq	r3, r2, r2, asr r1
 8011000:	0000524c 	andeq	r5, r0, ip, asr #4
 8011004:	00004152 	andeq	r4, r0, r2, asr r1
 8011008:	52535078 	subspl	r5, r3, #120	; 0x78
 801100c:	00000000 	andeq	r0, r0, r0
 8011010:	00082008 	andeq	r2, r8, r8
 8011014:	00000043 	andeq	r0, r0, r3, asr #32
 8011018:	00464e49 	subeq	r4, r6, r9, asr #28
 801101c:	00666e69 	rsbeq	r6, r6, r9, ror #28
 8011020:	004e414e 	subeq	r4, lr, lr, asr #2
 8011024:	006e616e 	rsbeq	r6, lr, lr, ror #2
 8011028:	33323130 	teqcc	r2, #48, 2
 801102c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8011030:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 8011034:	46454443 	strbmi	r4, [r5], -r3, asr #8
 8011038:	00000000 	andeq	r0, r0, r0
 801103c:	33323130 	teqcc	r2, #48, 2
 8011040:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8011044:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
 8011048:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 801104c:	00000000 	andeq	r0, r0, r0
 8011050:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
 8011054:	0000296c 	andeq	r2, r0, ip, ror #18
 8011058:	00000030 	andeq	r0, r0, r0, lsr r0
 801105c:	69666e49 	stmdbvs	r6!, {r0, r3, r6, r9, sl, fp, sp, lr}^
 8011060:	7974696e 	ldmdbvc	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 8011064:	00000000 	andeq	r0, r0, r0
 8011068:	004e614e 	subeq	r6, lr, lr, asr #2
 801106c:	49534f50 	ldmdbmi	r3, {r4, r6, r8, r9, sl, fp, lr}^
 8011070:	00000058 	andeq	r0, r0, r8, asr r0
 8011074:	0000002e 	andeq	r0, r0, lr, lsr #32

Disassembly of section .data:

20000000 <BACK_COLOR>:
20000000:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000004 <player_x>:
20000004:	00000098 	muleq	r0, r8, r0

20000008 <player_y>:
20000008:	000000d6 	ldrdeq	r0, [r0], -r6

2000000c <player_life>:
2000000c:	00000003 	andeq	r0, r0, r3

20000010 <__ctype_ptr__>:
20000010:	08010ac0 	stmdaeq	r1, {r6, r7, r9, fp}

20000014 <_impure_ptr>:
20000014:	20000018 	andcs	r0, r0, r8, lsl r0

20000018 <impure_data>:
	...
20000038:	08011014 	stmdaeq	r1, {r2, r4, ip}
	...

20000108 <__malloc_av_>:
	...
20000110:	20000108 	andcs	r0, r0, r8, lsl #2
20000114:	20000108 	andcs	r0, r0, r8, lsl #2
20000118:	20000110 	andcs	r0, r0, r0, lsl r1
2000011c:	20000110 	andcs	r0, r0, r0, lsl r1
20000120:	20000118 	andcs	r0, r0, r8, lsl r1
20000124:	20000118 	andcs	r0, r0, r8, lsl r1
20000128:	20000120 	andcs	r0, r0, r0, lsr #2
2000012c:	20000120 	andcs	r0, r0, r0, lsr #2
20000130:	20000128 	andcs	r0, r0, r8, lsr #2
20000134:	20000128 	andcs	r0, r0, r8, lsr #2
20000138:	20000130 	andcs	r0, r0, r0, lsr r1
2000013c:	20000130 	andcs	r0, r0, r0, lsr r1
20000140:	20000138 	andcs	r0, r0, r8, lsr r1
20000144:	20000138 	andcs	r0, r0, r8, lsr r1
20000148:	20000140 	andcs	r0, r0, r0, asr #2
2000014c:	20000140 	andcs	r0, r0, r0, asr #2
20000150:	20000148 	andcs	r0, r0, r8, asr #2
20000154:	20000148 	andcs	r0, r0, r8, asr #2
20000158:	20000150 	andcs	r0, r0, r0, asr r1
2000015c:	20000150 	andcs	r0, r0, r0, asr r1
20000160:	20000158 	andcs	r0, r0, r8, asr r1
20000164:	20000158 	andcs	r0, r0, r8, asr r1
20000168:	20000160 	andcs	r0, r0, r0, ror #2
2000016c:	20000160 	andcs	r0, r0, r0, ror #2
20000170:	20000168 	andcs	r0, r0, r8, ror #2
20000174:	20000168 	andcs	r0, r0, r8, ror #2
20000178:	20000170 	andcs	r0, r0, r0, ror r1
2000017c:	20000170 	andcs	r0, r0, r0, ror r1
20000180:	20000178 	andcs	r0, r0, r8, ror r1
20000184:	20000178 	andcs	r0, r0, r8, ror r1
20000188:	20000180 	andcs	r0, r0, r0, lsl #3
2000018c:	20000180 	andcs	r0, r0, r0, lsl #3
20000190:	20000188 	andcs	r0, r0, r8, lsl #3
20000194:	20000188 	andcs	r0, r0, r8, lsl #3
20000198:	20000190 	mulcs	r0, r0, r1
2000019c:	20000190 	mulcs	r0, r0, r1
200001a0:	20000198 	mulcs	r0, r8, r1
200001a4:	20000198 	mulcs	r0, r8, r1
200001a8:	200001a0 	andcs	r0, r0, r0, lsr #3
200001ac:	200001a0 	andcs	r0, r0, r0, lsr #3
200001b0:	200001a8 	andcs	r0, r0, r8, lsr #3
200001b4:	200001a8 	andcs	r0, r0, r8, lsr #3
200001b8:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
200001bc:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
200001c0:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
200001c4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
200001c8:	200001c0 	andcs	r0, r0, r0, asr #3
200001cc:	200001c0 	andcs	r0, r0, r0, asr #3
200001d0:	200001c8 	andcs	r0, r0, r8, asr #3
200001d4:	200001c8 	andcs	r0, r0, r8, asr #3
200001d8:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001dc:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001e0:	200001d8 	ldrdcs	r0, [r0], -r8
200001e4:	200001d8 	ldrdcs	r0, [r0], -r8
200001e8:	200001e0 	andcs	r0, r0, r0, ror #3
200001ec:	200001e0 	andcs	r0, r0, r0, ror #3
200001f0:	200001e8 	andcs	r0, r0, r8, ror #3
200001f4:	200001e8 	andcs	r0, r0, r8, ror #3
200001f8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001fc:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000200:	200001f8 	strdcs	r0, [r0], -r8
20000204:	200001f8 	strdcs	r0, [r0], -r8
20000208:	20000200 	andcs	r0, r0, r0, lsl #4
2000020c:	20000200 	andcs	r0, r0, r0, lsl #4
20000210:	20000208 	andcs	r0, r0, r8, lsl #4
20000214:	20000208 	andcs	r0, r0, r8, lsl #4
20000218:	20000210 	andcs	r0, r0, r0, lsl r2
2000021c:	20000210 	andcs	r0, r0, r0, lsl r2
20000220:	20000218 	andcs	r0, r0, r8, lsl r2
20000224:	20000218 	andcs	r0, r0, r8, lsl r2
20000228:	20000220 	andcs	r0, r0, r0, lsr #4
2000022c:	20000220 	andcs	r0, r0, r0, lsr #4
20000230:	20000228 	andcs	r0, r0, r8, lsr #4
20000234:	20000228 	andcs	r0, r0, r8, lsr #4
20000238:	20000230 	andcs	r0, r0, r0, lsr r2
2000023c:	20000230 	andcs	r0, r0, r0, lsr r2
20000240:	20000238 	andcs	r0, r0, r8, lsr r2
20000244:	20000238 	andcs	r0, r0, r8, lsr r2
20000248:	20000240 	andcs	r0, r0, r0, asr #4
2000024c:	20000240 	andcs	r0, r0, r0, asr #4
20000250:	20000248 	andcs	r0, r0, r8, asr #4
20000254:	20000248 	andcs	r0, r0, r8, asr #4
20000258:	20000250 	andcs	r0, r0, r0, asr r2
2000025c:	20000250 	andcs	r0, r0, r0, asr r2
20000260:	20000258 	andcs	r0, r0, r8, asr r2
20000264:	20000258 	andcs	r0, r0, r8, asr r2
20000268:	20000260 	andcs	r0, r0, r0, ror #4
2000026c:	20000260 	andcs	r0, r0, r0, ror #4
20000270:	20000268 	andcs	r0, r0, r8, ror #4
20000274:	20000268 	andcs	r0, r0, r8, ror #4
20000278:	20000270 	andcs	r0, r0, r0, ror r2
2000027c:	20000270 	andcs	r0, r0, r0, ror r2
20000280:	20000278 	andcs	r0, r0, r8, ror r2
20000284:	20000278 	andcs	r0, r0, r8, ror r2
20000288:	20000280 	andcs	r0, r0, r0, lsl #5
2000028c:	20000280 	andcs	r0, r0, r0, lsl #5
20000290:	20000288 	andcs	r0, r0, r8, lsl #5
20000294:	20000288 	andcs	r0, r0, r8, lsl #5
20000298:	20000290 	mulcs	r0, r0, r2
2000029c:	20000290 	mulcs	r0, r0, r2
200002a0:	20000298 	mulcs	r0, r8, r2
200002a4:	20000298 	mulcs	r0, r8, r2
200002a8:	200002a0 	andcs	r0, r0, r0, lsr #5
200002ac:	200002a0 	andcs	r0, r0, r0, lsr #5
200002b0:	200002a8 	andcs	r0, r0, r8, lsr #5
200002b4:	200002a8 	andcs	r0, r0, r8, lsr #5
200002b8:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
200002bc:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
200002c0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
200002c4:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
200002c8:	200002c0 	andcs	r0, r0, r0, asr #5
200002cc:	200002c0 	andcs	r0, r0, r0, asr #5
200002d0:	200002c8 	andcs	r0, r0, r8, asr #5
200002d4:	200002c8 	andcs	r0, r0, r8, asr #5
200002d8:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002dc:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002e0:	200002d8 	ldrdcs	r0, [r0], -r8
200002e4:	200002d8 	ldrdcs	r0, [r0], -r8
200002e8:	200002e0 	andcs	r0, r0, r0, ror #5
200002ec:	200002e0 	andcs	r0, r0, r0, ror #5
200002f0:	200002e8 	andcs	r0, r0, r8, ror #5
200002f4:	200002e8 	andcs	r0, r0, r8, ror #5
200002f8:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002fc:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000300:	200002f8 	strdcs	r0, [r0], -r8
20000304:	200002f8 	strdcs	r0, [r0], -r8
20000308:	20000300 	andcs	r0, r0, r0, lsl #6
2000030c:	20000300 	andcs	r0, r0, r0, lsl #6
20000310:	20000308 	andcs	r0, r0, r8, lsl #6
20000314:	20000308 	andcs	r0, r0, r8, lsl #6
20000318:	20000310 	andcs	r0, r0, r0, lsl r3
2000031c:	20000310 	andcs	r0, r0, r0, lsl r3
20000320:	20000318 	andcs	r0, r0, r8, lsl r3
20000324:	20000318 	andcs	r0, r0, r8, lsl r3
20000328:	20000320 	andcs	r0, r0, r0, lsr #6
2000032c:	20000320 	andcs	r0, r0, r0, lsr #6
20000330:	20000328 	andcs	r0, r0, r8, lsr #6
20000334:	20000328 	andcs	r0, r0, r8, lsr #6
20000338:	20000330 	andcs	r0, r0, r0, lsr r3
2000033c:	20000330 	andcs	r0, r0, r0, lsr r3
20000340:	20000338 	andcs	r0, r0, r8, lsr r3
20000344:	20000338 	andcs	r0, r0, r8, lsr r3
20000348:	20000340 	andcs	r0, r0, r0, asr #6
2000034c:	20000340 	andcs	r0, r0, r0, asr #6
20000350:	20000348 	andcs	r0, r0, r8, asr #6
20000354:	20000348 	andcs	r0, r0, r8, asr #6
20000358:	20000350 	andcs	r0, r0, r0, asr r3
2000035c:	20000350 	andcs	r0, r0, r0, asr r3
20000360:	20000358 	andcs	r0, r0, r8, asr r3
20000364:	20000358 	andcs	r0, r0, r8, asr r3
20000368:	20000360 	andcs	r0, r0, r0, ror #6
2000036c:	20000360 	andcs	r0, r0, r0, ror #6
20000370:	20000368 	andcs	r0, r0, r8, ror #6
20000374:	20000368 	andcs	r0, r0, r8, ror #6
20000378:	20000370 	andcs	r0, r0, r0, ror r3
2000037c:	20000370 	andcs	r0, r0, r0, ror r3
20000380:	20000378 	andcs	r0, r0, r8, ror r3
20000384:	20000378 	andcs	r0, r0, r8, ror r3
20000388:	20000380 	andcs	r0, r0, r0, lsl #7
2000038c:	20000380 	andcs	r0, r0, r0, lsl #7
20000390:	20000388 	andcs	r0, r0, r8, lsl #7
20000394:	20000388 	andcs	r0, r0, r8, lsl #7
20000398:	20000390 	mulcs	r0, r0, r3
2000039c:	20000390 	mulcs	r0, r0, r3
200003a0:	20000398 	mulcs	r0, r8, r3
200003a4:	20000398 	mulcs	r0, r8, r3
200003a8:	200003a0 	andcs	r0, r0, r0, lsr #7
200003ac:	200003a0 	andcs	r0, r0, r0, lsr #7
200003b0:	200003a8 	andcs	r0, r0, r8, lsr #7
200003b4:	200003a8 	andcs	r0, r0, r8, lsr #7
200003b8:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
200003bc:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
200003c0:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
200003c4:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
200003c8:	200003c0 	andcs	r0, r0, r0, asr #7
200003cc:	200003c0 	andcs	r0, r0, r0, asr #7
200003d0:	200003c8 	andcs	r0, r0, r8, asr #7
200003d4:	200003c8 	andcs	r0, r0, r8, asr #7
200003d8:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003dc:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003e0:	200003d8 	ldrdcs	r0, [r0], -r8
200003e4:	200003d8 	ldrdcs	r0, [r0], -r8
200003e8:	200003e0 	andcs	r0, r0, r0, ror #7
200003ec:	200003e0 	andcs	r0, r0, r0, ror #7
200003f0:	200003e8 	andcs	r0, r0, r8, ror #7
200003f4:	200003e8 	andcs	r0, r0, r8, ror #7
200003f8:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003fc:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000400:	200003f8 	strdcs	r0, [r0], -r8
20000404:	200003f8 	strdcs	r0, [r0], -r8
20000408:	20000400 	andcs	r0, r0, r0, lsl #8
2000040c:	20000400 	andcs	r0, r0, r0, lsl #8
20000410:	20000408 	andcs	r0, r0, r8, lsl #8
20000414:	20000408 	andcs	r0, r0, r8, lsl #8
20000418:	20000410 	andcs	r0, r0, r0, lsl r4
2000041c:	20000410 	andcs	r0, r0, r0, lsl r4
20000420:	20000418 	andcs	r0, r0, r8, lsl r4
20000424:	20000418 	andcs	r0, r0, r8, lsl r4
20000428:	20000420 	andcs	r0, r0, r0, lsr #8
2000042c:	20000420 	andcs	r0, r0, r0, lsr #8
20000430:	20000428 	andcs	r0, r0, r8, lsr #8
20000434:	20000428 	andcs	r0, r0, r8, lsr #8
20000438:	20000430 	andcs	r0, r0, r0, lsr r4
2000043c:	20000430 	andcs	r0, r0, r0, lsr r4
20000440:	20000438 	andcs	r0, r0, r8, lsr r4
20000444:	20000438 	andcs	r0, r0, r8, lsr r4
20000448:	20000440 	andcs	r0, r0, r0, asr #8
2000044c:	20000440 	andcs	r0, r0, r0, asr #8
20000450:	20000448 	andcs	r0, r0, r8, asr #8
20000454:	20000448 	andcs	r0, r0, r8, asr #8
20000458:	20000450 	andcs	r0, r0, r0, asr r4
2000045c:	20000450 	andcs	r0, r0, r0, asr r4
20000460:	20000458 	andcs	r0, r0, r8, asr r4
20000464:	20000458 	andcs	r0, r0, r8, asr r4
20000468:	20000460 	andcs	r0, r0, r0, ror #8
2000046c:	20000460 	andcs	r0, r0, r0, ror #8
20000470:	20000468 	andcs	r0, r0, r8, ror #8
20000474:	20000468 	andcs	r0, r0, r8, ror #8
20000478:	20000470 	andcs	r0, r0, r0, ror r4
2000047c:	20000470 	andcs	r0, r0, r0, ror r4
20000480:	20000478 	andcs	r0, r0, r8, ror r4
20000484:	20000478 	andcs	r0, r0, r8, ror r4
20000488:	20000480 	andcs	r0, r0, r0, lsl #9
2000048c:	20000480 	andcs	r0, r0, r0, lsl #9
20000490:	20000488 	andcs	r0, r0, r8, lsl #9
20000494:	20000488 	andcs	r0, r0, r8, lsl #9
20000498:	20000490 	mulcs	r0, r0, r4
2000049c:	20000490 	mulcs	r0, r0, r4
200004a0:	20000498 	mulcs	r0, r8, r4
200004a4:	20000498 	mulcs	r0, r8, r4
200004a8:	200004a0 	andcs	r0, r0, r0, lsr #9
200004ac:	200004a0 	andcs	r0, r0, r0, lsr #9
200004b0:	200004a8 	andcs	r0, r0, r8, lsr #9
200004b4:	200004a8 	andcs	r0, r0, r8, lsr #9
200004b8:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
200004bc:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
200004c0:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
200004c4:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
200004c8:	200004c0 	andcs	r0, r0, r0, asr #9
200004cc:	200004c0 	andcs	r0, r0, r0, asr #9
200004d0:	200004c8 	andcs	r0, r0, r8, asr #9
200004d4:	200004c8 	andcs	r0, r0, r8, asr #9
200004d8:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004dc:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004e0:	200004d8 	ldrdcs	r0, [r0], -r8
200004e4:	200004d8 	ldrdcs	r0, [r0], -r8
200004e8:	200004e0 	andcs	r0, r0, r0, ror #9
200004ec:	200004e0 	andcs	r0, r0, r0, ror #9
200004f0:	200004e8 	andcs	r0, r0, r8, ror #9
200004f4:	200004e8 	andcs	r0, r0, r8, ror #9
200004f8:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004fc:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000500:	200004f8 	strdcs	r0, [r0], -r8
20000504:	200004f8 	strdcs	r0, [r0], -r8
20000508:	20000500 	andcs	r0, r0, r0, lsl #10
2000050c:	20000500 	andcs	r0, r0, r0, lsl #10

20000510 <__malloc_sbrk_base>:
20000510:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000514 <__malloc_trim_threshold>:
20000514:	00020000 	andeq	r0, r2, r0

20000518 <lc_ctype_charset>:
20000518:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
2000051c:	00000049 	andeq	r0, r0, r9, asr #32
	...

20000538 <__mb_cur_max>:
20000538:	00000001 	andeq	r0, r0, r1

2000053c <lc_message_charset>:
2000053c:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
20000540:	00000049 	andeq	r0, r0, r9, asr #32
	...

2000055c <lconv>:
2000055c:	08011074 	stmdaeq	r1, {r2, r4, r5, r6, ip}
20000560:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000564:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000568:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
2000056c:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000570:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000574:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000578:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
2000057c:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000580:	08010e08 	stmdaeq	r1, {r3, r9, sl, fp}
20000584:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000588:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000058c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000590:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

Disassembly of section .bss:

20000594 <__ZI_BASE__>:
	...

200005a0 <POINT_COLOR>:
200005a0:	00000000 	andeq	r0, r0, r0

200005a4 <bullets>:
	...

2000061c <enemies>:
	...

20000680 <items>:
	...

200006d0 <bomb_item>:
200006d0:	00000000 	andeq	r0, r0, r0

200006d4 <up_item>:
200006d4:	00000000 	andeq	r0, r0, r0

200006d8 <speed_item>:
200006d8:	00000000 	andeq	r0, r0, r0

200006dc <game_state>:
200006dc:	00000000 	andeq	r0, r0, r0

200006e0 <fire_delay.5235>:
200006e0:	00000000 	andeq	r0, r0, r0

200006e4 <spawn_timer.5237>:
200006e4:	00000000 	andeq	r0, r0, r0

200006e8 <item_spawn_timer.5238>:
200006e8:	00000000 	andeq	r0, r0, r0

200006ec <enemy_fire_timer.5239>:
200006ec:	00000000 	andeq	r0, r0, r0

200006f0 <heap.4848>:
200006f0:	00000000 	andeq	r0, r0, r0

200006f4 <SysTick_Flag>:
200006f4:	00000000 	andeq	r0, r0, r0

200006f8 <Jog_key_in>:
200006f8:	00000000 	andeq	r0, r0, r0

200006fc <Jog_key>:
200006fc:	00000000 	andeq	r0, r0, r0

20000700 <TIM4_expired>:
20000700:	00000000 	andeq	r0, r0, r0

20000704 <USART1_rx_ready>:
20000704:	00000000 	andeq	r0, r0, r0

20000708 <USART1_rx_data>:
20000708:	00000000 	andeq	r0, r0, r0

2000070c <__malloc_top_pad>:
2000070c:	00000000 	andeq	r0, r0, r0

20000710 <__malloc_current_mallinfo>:
	...

20000738 <__malloc_max_sbrked_mem>:
20000738:	00000000 	andeq	r0, r0, r0

2000073c <__malloc_max_total_mem>:
2000073c:	00000000 	andeq	r0, r0, r0

20000740 <_PathLocale>:
20000740:	00000000 	andeq	r0, r0, r0

20000744 <__mlocale_changed>:
20000744:	00000000 	andeq	r0, r0, r0

20000748 <__nlocale_changed>:
20000748:	00000000 	andeq	r0, r0, r0

2000074c <__ZI_LIMIT__>:
2000074c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001c7 	andeq	r0, r0, r7, asr #3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000108 	andeq	r0, r0, r8, lsl #2
      10:	00005e01 	andeq	r5, r0, r1, lsl #28
      14:	00001300 	andeq	r1, r0, r0, lsl #6
      18:	0031ec00 	eorseq	lr, r1, r0, lsl #24
      1c:	00007008 	andeq	r7, r0, r8
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000099 	muleq	r0, r9, r0
      2c:	97080102 	strls	r0, [r8, -r2, lsl #2]
      30:	02000000 	andeq	r0, r0, #0
      34:	00f20502 	rscseq	r0, r2, r2, lsl #10
      38:	02020000 	andeq	r0, r2, #0
      3c:	00006f07 	andeq	r6, r0, r7, lsl #30
      40:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      44:	00000005 	andeq	r0, r0, r5
      48:	0001a703 	andeq	sl, r1, r3, lsl #14
      4c:	53500300 	cmppl	r0, #0, 6
      50:	02000000 	andeq	r0, r0, #0
      54:	00cc0704 	sbceq	r0, ip, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	00000005 	andeq	r0, r0, r5
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	000000c7 	andeq	r0, r0, r7, asr #1
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	00d10704 	sbcseq	r0, r1, r4, lsl #14
      74:	04020000 	streq	r0, [r2], #-0
      78:	0000de07 	andeq	sp, r0, r7, lsl #28
      7c:	00480500 	subeq	r0, r8, r0, lsl #10
      80:	24060000 	strcs	r0, [r6], #-0
      84:	fe038502 	cdp2	5, 0, cr8, cr3, cr2, {0}
      88:	07000000 	streq	r0, [r0, -r0]
      8c:	00524341 	subseq	r4, r2, r1, asr #6
      90:	7d038702 	stcvc	7, cr8, [r3, #-8]
      94:	00000000 	andeq	r0, r0, r0
      98:	00009208 	andeq	r9, r0, r8, lsl #4
      9c:	03880200 	orreq	r0, r8, #0, 4
      a0:	0000007d 	andeq	r0, r0, sp, ror r0
      a4:	008f0804 	addeq	r0, pc, r4, lsl #16
      a8:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
      ac:	00007d03 	andeq	r7, r0, r3, lsl #26
      b0:	53070800 	movwpl	r0, #30720	; 0x7800
      b4:	8a020052 	bhi	80204 <__RW_SIZE__+0x7fc70>
      b8:	00007d03 	andeq	r7, r0, r3, lsl #26
      bc:	43070c00 	movwmi	r0, #31744	; 0x7c00
      c0:	8b020052 	blhi	80210 <__RW_SIZE__+0x7fc7c>
      c4:	00007d03 	andeq	r7, r0, r3, lsl #26
      c8:	41071000 	mrsmi	r1, (UNDEF: 7)
      cc:	8c020052 	stchi	0, cr0, [r2], {82}	; 0x52
      d0:	00007d03 	andeq	r7, r0, r3, lsl #26
      d4:	a5081400 	strge	r1, [r8, #-1024]	; 0xfffffc00
      d8:	02000000 	andeq	r0, r0, #0
      dc:	007d038d 	rsbseq	r0, sp, sp, lsl #7
      e0:	07180000 	ldreq	r0, [r8, -r0]
      e4:	0052424f 	subseq	r4, r2, pc, asr #4
      e8:	7d038e02 	stcvc	14, cr8, [r3, #-8]
      ec:	1c000000 	stcne	0, cr0, [r0], {-0}
      f0:	00005908 	andeq	r5, r0, r8, lsl #18
      f4:	038f0200 	orreq	r0, pc, #0, 4
      f8:	0000007d 	andeq	r0, r0, sp, ror r0
      fc:	44090020 	strmi	r0, [r9], #-32	; 0xffffffe0
     100:	02000000 	andeq	r0, r0, #0
     104:	00820398 	umulleq	r0, r2, r8, r3
     108:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     10c:	95043402 	strls	r3, [r4, #-1026]	; 0xfffffbfe
     110:	07000001 	streq	r0, [r0, -r1]
     114:	02005243 	andeq	r5, r0, #805306372	; 0x30000004
     118:	007d0436 	rsbseq	r0, sp, r6, lsr r4
     11c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     120:	0000084f 	andeq	r0, r0, pc, asr #16
     124:	7d043702 	stcvc	7, cr3, [r4, #-8]
     128:	04000000 	streq	r0, [r0], #-0
     12c:	52494307 	subpl	r4, r9, #469762048	; 0x1c000000
     130:	04380200 	ldrteq	r0, [r8], #-512	; 0xfffffe00
     134:	0000007d 	andeq	r0, r0, sp, ror r0
     138:	00be0808 	adcseq	r0, lr, r8, lsl #16
     13c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     140:	00007d04 	andeq	r7, r0, r4, lsl #26
     144:	66080c00 	strvs	r0, [r8], -r0, lsl #24
     148:	02000000 	andeq	r0, r0, #0
     14c:	007d043a 	rsbseq	r0, sp, sl, lsr r4
     150:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     154:	00000052 	andeq	r0, r0, r2, asr r0
     158:	7d043b02 	vstrvc	d3, [r4, #-8]
     15c:	14000000 	strne	r0, [r0], #-0
     160:	0000ae08 	andeq	sl, r0, r8, lsl #28
     164:	043c0200 	ldrteq	r0, [ip], #-512	; 0xfffffe00
     168:	0000007d 	andeq	r0, r0, sp, ror r0
     16c:	00b60818 	adcseq	r0, r6, r8, lsl r8
     170:	3d020000 	stccc	0, cr0, [r2, #-0]
     174:	00007d04 	andeq	r7, r0, r4, lsl #26
     178:	0e081c00 	cdpeq	12, 0, cr1, cr8, cr0, {0}
     17c:	02000000 	andeq	r0, r0, #0
     180:	007d043e 	rsbseq	r0, sp, lr, lsr r4
     184:	07200000 	streq	r0, [r0, -r0]!
     188:	00525343 	subseq	r5, r2, r3, asr #6
     18c:	7d043f02 	stcvc	15, cr3, [r4, #-8]
     190:	24000000 	strcs	r0, [r0], #-0
     194:	00fc0900 	rscseq	r0, ip, r0, lsl #18
     198:	4a020000 	bmi	801a0 <__RW_SIZE__+0x7fc0c>
     19c:	00010a04 	andeq	r0, r1, r4, lsl #20
     1a0:	08010200 	stmdaeq	r1, {r9}
     1a4:	000000a0 	andeq	r0, r0, r0, lsr #1
     1a8:	0000e70a 	andeq	lr, r0, sl, lsl #14
     1ac:	ec030100 	stfs	f0, [r3], {-0}
     1b0:	70080031 	andvc	r0, r8, r1, lsr r0
     1b4:	01000000 	mrseq	r0, (UNDEF: 0)
     1b8:	00820b9c 	umulleq	r0, r2, ip, fp
     1bc:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
     1c0:	0001c506 	andeq	ip, r1, r6, lsl #10
     1c4:	00680500 	rsbeq	r0, r8, r0, lsl #10
     1c8:	05000000 	streq	r0, [r0, #-0]
     1cc:	04000005 	streq	r0, [r0], #-5
     1d0:	00009f00 	andeq	r9, r0, r0, lsl #30
     1d4:	08010400 	stmdaeq	r1, {sl}
     1d8:	01000001 	tsteq	r0, r1
     1dc:	000001fc 	strdeq	r0, [r0], -ip
     1e0:	00000013 	andeq	r0, r0, r3, lsl r0
	...
     1ec:	000000ab 	andeq	r0, r0, fp, lsr #1
     1f0:	99060102 	stmdbls	r6, {r1, r8}
     1f4:	03000000 	movweq	r0, #0
     1f8:	0000026b 	andeq	r0, r0, fp, ror #4
     1fc:	00372a02 	eorseq	r2, r7, r2, lsl #20
     200:	01020000 	mrseq	r0, (UNDEF: 2)
     204:	00009708 	andeq	r9, r0, r8, lsl #14
     208:	02c90300 	sbceq	r0, r9, #0, 6
     20c:	35020000 	strcc	r0, [r2, #-0]
     210:	00000049 	andeq	r0, r0, r9, asr #32
     214:	f2050202 	vhsub.s8	d0, d5, d2
     218:	03000000 	movweq	r0, #0
     21c:	000002c8 	andeq	r0, r0, r8, asr #5
     220:	005b3602 	subseq	r3, fp, r2, lsl #12
     224:	02020000 	andeq	r0, r2, #0
     228:	00006f07 	andeq	r6, r0, r7, lsl #30
     22c:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
     230:	4f020000 	svcmi	0x00020000
     234:	0000006d 	andeq	r0, r0, sp, rrx
     238:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
     23c:	03000000 	movweq	r0, #0
     240:	000001a7 	andeq	r0, r0, r7, lsr #3
     244:	007f5002 	rsbseq	r5, pc, r2
     248:	04020000 	streq	r0, [r2], #-0
     24c:	0000cc07 	andeq	ip, r0, r7, lsl #24
     250:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     254:	00000000 	andeq	r0, r0, r0
     258:	c7070802 	strgt	r0, [r7, -r2, lsl #16]
     25c:	04000000 	streq	r0, [r0], #-0
     260:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     264:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     268:	0000d107 	andeq	sp, r0, r7, lsl #2
     26c:	021b0500 	andseq	r0, fp, #0, 10
     270:	bf010000 	svclt	0x00010000
     274:	00007401 	andeq	r7, r0, r1, lsl #8
     278:	00325c00 	eorseq	r5, r2, r0, lsl #24
     27c:	00000808 	andeq	r0, r0, r8, lsl #16
     280:	cd9c0100 	ldfgts	f0, [ip]
     284:	06000000 	streq	r0, [r0], -r0
     288:	00000273 	andeq	r0, r0, r3, ror r2
     28c:	7401c101 	strvc	ip, [r1], #-257	; 0xfffffeff
	...
     298:	00022507 	andeq	r2, r2, r7, lsl #10
     29c:	01d20100 	bicseq	r0, r2, r0, lsl #2
     2a0:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
     2a4:	00000006 	andeq	r0, r0, r6
     2a8:	00f29c01 	rscseq	r9, r2, r1, lsl #24
     2ac:	e3080000 	movw	r0, #32768	; 0x8000
     2b0:	01000001 	tsteq	r0, r1
     2b4:	007401d2 	ldrsbteq	r0, [r4], #-18	; 0xffffffee
     2b8:	50010000 	andpl	r0, r1, r0
     2bc:	02070500 	andeq	r0, r7, #0, 10
     2c0:	e1010000 	mrs	r0, (UNDEF: 1)
     2c4:	00007401 	andeq	r7, r0, r1, lsl #8
     2c8:	00326c00 	eorseq	r6, r2, r0, lsl #24
     2cc:	00000808 	andeq	r0, r0, r8, lsl #16
     2d0:	1d9c0100 	ldfnes	f0, [ip]
     2d4:	06000001 	streq	r0, [r0], -r1
     2d8:	00000273 	andeq	r0, r0, r3, ror r2
     2dc:	7401e301 	strvc	lr, [r1], #-769	; 0xfffffcff
     2e0:	1f000000 	svcne	0x00000000
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00021107 	andeq	r1, r2, r7, lsl #2
     2ec:	01f40100 	mvnseq	r0, r0, lsl #2
     2f0:	08003274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp}
     2f4:	00000006 	andeq	r0, r0, r6
     2f8:	01429c01 	cmpeq	r2, r1, lsl #24
     2fc:	82080000 	andhi	r0, r8, #0
     300:	01000002 	tsteq	r0, r2
     304:	007401f4 	ldrshteq	r0, [r4], #-20	; 0xffffffec
     308:	50010000 	andpl	r0, r1, r0
     30c:	02ba0500 	adcseq	r0, sl, #0, 10
     310:	01010000 	mrseq	r0, (UNDEF: 1)
     314:	00007402 	andeq	r7, r0, r2, lsl #8
     318:	00327c00 	eorseq	r7, r2, r0, lsl #24
     31c:	00000608 	andeq	r0, r0, r8, lsl #12
     320:	6d9c0100 	ldfvss	f0, [ip]
     324:	06000001 	streq	r0, [r0], -r1
     328:	00000273 	andeq	r0, r0, r3, ror r2
     32c:	74020301 	strvc	r0, [r2], #-769	; 0xfffffcff
     330:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     334:	00000000 	andeq	r0, r0, r0
     338:	00025d07 	andeq	r5, r2, r7, lsl #26
     33c:	02100100 	andseq	r0, r0, #0, 2
     340:	08003284 	stmdaeq	r0, {r2, r7, r9, ip, sp}
     344:	00000006 	andeq	r0, r0, r6
     348:	01929c01 	orrseq	r9, r2, r1, lsl #24
     34c:	cc080000 	stcgt	0, cr0, [r8], {-0}
     350:	01000001 	tsteq	r0, r1
     354:	00740210 	rsbseq	r0, r4, r0, lsl r2
     358:	50010000 	andpl	r0, r1, r0
     35c:	02370500 	eorseq	r0, r7, #0, 10
     360:	1c010000 	stcne	0, cr0, [r1], {-0}
     364:	00007402 	andeq	r7, r0, r2, lsl #8
     368:	00328c00 	eorseq	r8, r2, r0, lsl #24
     36c:	00000608 	andeq	r0, r0, r8, lsl #12
     370:	bd9c0100 	ldflts	f0, [ip]
     374:	06000001 	streq	r0, [r0], -r1
     378:	00000273 	andeq	r0, r0, r3, ror r2
     37c:	74021e01 	strvc	r1, [r2], #-3585	; 0xfffff1ff
     380:	5d000000 	stcpl	0, cr0, [r0, #-0]
     384:	00000000 	andeq	r0, r0, r0
     388:	00029107 	andeq	r9, r2, r7, lsl #2
     38c:	022b0100 	eoreq	r0, fp, #0, 2
     390:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
     394:	00000006 	andeq	r0, r0, r6
     398:	01e29c01 	mvneq	r9, r1, lsl #24
     39c:	db080000 	blle	2003a4 <__RW_SIZE__+0x1ffe10>
     3a0:	01000001 	tsteq	r0, r1
     3a4:	0074022b 	rsbseq	r0, r4, fp, lsr #4
     3a8:	50010000 	andpl	r0, r1, r0
     3ac:	02ec0500 	rsceq	r0, ip, #0, 10
     3b0:	37010000 	strcc	r0, [r1, -r0]
     3b4:	00007402 	andeq	r7, r0, r2, lsl #8
     3b8:	00329c00 	eorseq	r9, r2, r0, lsl #24
     3bc:	00000608 	andeq	r0, r0, r8, lsl #12
     3c0:	0d9c0100 	ldfeqs	f0, [ip]
     3c4:	06000002 	streq	r0, [r0], -r2
     3c8:	00000273 	andeq	r0, r0, r3, ror r2
     3cc:	74023901 	strvc	r3, [r2], #-2305	; 0xfffff6ff
     3d0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	00024507 	andeq	r4, r2, r7, lsl #10
     3dc:	02460100 	subeq	r0, r6, #0, 2
     3e0:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
     3e4:	00000006 	andeq	r0, r0, r6
     3e8:	02329c01 	eorseq	r9, r2, #256	; 0x100
     3ec:	f2080000 	vhadd.s8	d0, d8, d0
     3f0:	01000001 	tsteq	r0, r1
     3f4:	00740246 	rsbseq	r0, r4, r6, asr #4
     3f8:	50010000 	andpl	r0, r1, r0
     3fc:	02a50500 	adceq	r0, r5, #0, 10
     400:	52010000 	andpl	r0, r1, #0
     404:	00007402 	andeq	r7, r0, r2, lsl #8
     408:	0032ac00 	eorseq	sl, r2, r0, lsl #24
     40c:	00000608 	andeq	r0, r0, r8, lsl #12
     410:	5d9c0100 	ldfpls	f0, [ip]
     414:	06000002 	streq	r0, [r0], -r2
     418:	00000273 	andeq	r0, r0, r3, ror r2
     41c:	74025401 	strvc	r5, [r2], #-1025	; 0xfffffbff
     420:	9b000000 	blls	428 <MSP_SIZE+0x28>
     424:	00000000 	andeq	r0, r0, r0
     428:	0001be07 	andeq	fp, r1, r7, lsl #28
     42c:	02610100 	rsbeq	r0, r1, #0, 2
     430:	080032b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, sp}
     434:	00000006 	andeq	r0, r0, r6
     438:	02829c01 	addeq	r9, r2, #256	; 0x100
     43c:	55080000 	strpl	r0, [r8, #-0]
     440:	01000002 	tsteq	r0, r2
     444:	00740261 	rsbseq	r0, r4, r1, ror #4
     448:	50010000 	andpl	r0, r1, r0
     44c:	029f0500 	addseq	r0, pc, #0, 10
     450:	6f010000 	svcvs	0x00010000
     454:	00007402 	andeq	r7, r0, r2, lsl #8
     458:	0032bc00 	eorseq	fp, r2, r0, lsl #24
     45c:	00000408 	andeq	r0, r0, r8, lsl #8
     460:	bd9c0100 	ldflts	f0, [ip]
     464:	09000002 	stmdbeq	r0, {r1}
     468:	000001cc 	andeq	r0, r0, ip, asr #3
     46c:	74026f01 	strvc	r6, [r2], #-3841	; 0xfffff0ff
     470:	ba000000 	blt	478 <MSP_SIZE+0x78>
     474:	06000000 	streq	r0, [r0], -r0
     478:	00000273 	andeq	r0, r0, r3, ror r2
     47c:	74027101 	strvc	r7, [r2], #-257	; 0xfffffeff
     480:	db000000 	blle	488 <MSP_SIZE+0x88>
     484:	00000000 	andeq	r0, r0, r0
     488:	00022f05 	andeq	r2, r2, r5, lsl #30
     48c:	027f0100 	rsbseq	r0, pc, #0, 2
     490:	00000074 	andeq	r0, r0, r4, ror r0
     494:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
     498:	00000004 	andeq	r0, r0, r4
     49c:	02f89c01 	rscseq	r9, r8, #256	; 0x100
     4a0:	cc090000 	stcgt	0, cr0, [r9], {-0}
     4a4:	01000001 	tsteq	r0, r1
     4a8:	0050027f 	subseq	r0, r0, pc, ror r2
     4ac:	00fa0000 	rscseq	r0, sl, r0
     4b0:	73060000 	movwvc	r0, #24576	; 0x6000
     4b4:	01000002 	tsteq	r0, r2
     4b8:	00740281 	rsbseq	r0, r4, r1, lsl #5
     4bc:	011b0000 	tsteq	fp, r0
     4c0:	05000000 	streq	r0, [r0, #-0]
     4c4:	0000027a 	andeq	r0, r0, sl, ror r2
     4c8:	62028f01 	andvs	r8, r2, #1, 30
     4cc:	c4000000 	strgt	r0, [r0], #-0
     4d0:	04080032 	streq	r0, [r8], #-50	; 0xffffffce
     4d4:	01000000 	mrseq	r0, (UNDEF: 0)
     4d8:	0003339c 	muleq	r3, ip, r3
     4dc:	01cc0900 	biceq	r0, ip, r0, lsl #18
     4e0:	8f010000 	svchi	0x00010000
     4e4:	00003e02 	andeq	r3, r0, r2, lsl #28
     4e8:	00013a00 	andeq	r3, r1, r0, lsl #20
     4ec:	02730600 	rsbseq	r0, r3, #0, 12
     4f0:	91010000 	mrsls	r0, (UNDEF: 1)
     4f4:	00007402 	andeq	r7, r0, r2, lsl #8
     4f8:	00015b00 	andeq	r5, r1, r0, lsl #22
     4fc:	b3050000 	movwlt	r0, #20480	; 0x5000
     500:	01000002 	tsteq	r0, r2
     504:	0074029f 			; <UNDEFINED> instruction: 0x0074029f
     508:	32c80000 	sbccc	r0, r8, #0
     50c:	00060800 	andeq	r0, r6, r0, lsl #16
     510:	9c010000 	stcls	0, cr0, [r1], {-0}
     514:	0000036e 	andeq	r0, r0, lr, ror #6
     518:	0001cc09 	andeq	ip, r1, r9, lsl #24
     51c:	029f0100 	addseq	r0, pc, #0, 2
     520:	00000074 	andeq	r0, r0, r4, ror r0
     524:	0000017a 	andeq	r0, r0, sl, ror r1
     528:	00027306 	andeq	r7, r2, r6, lsl #6
     52c:	02a10100 	adceq	r0, r1, #0, 2
     530:	00000074 	andeq	r0, r0, r4, ror r0
     534:	0000019b 	muleq	r0, fp, r1
     538:	02da0500 	sbcseq	r0, sl, #0, 10
     53c:	af010000 	svcge	0x00010000
     540:	00002c02 	andeq	r2, r0, r2, lsl #24
     544:	0032d000 	eorseq	sp, r2, r0
     548:	00000808 	andeq	r0, r0, r8, lsl #16
     54c:	a99c0100 	ldmibge	ip, {r8}
     550:	09000003 	stmdbeq	r0, {r0, r1}
     554:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     558:	a902af01 	stmdbge	r2, {r0, r8, r9, sl, fp, sp, pc}
     55c:	ba000003 	blt	570 <MSP_SIZE+0x170>
     560:	06000001 	streq	r0, [r0], -r1
     564:	00000273 	andeq	r0, r0, r3, ror r2
     568:	2c02b101 	stfcsd	f3, [r2], {1}
     56c:	db000000 	blle	574 <MSP_SIZE+0x174>
     570:	00000001 	andeq	r0, r0, r1
     574:	002c040a 	eoreq	r0, ip, sl, lsl #8
     578:	fc050000 	stc2	0, cr0, [r5], {-0}
     57c:	01000002 	tsteq	r0, r2
     580:	005002bf 	ldrheq	r0, [r0], #-47	; 0xffffffd1
     584:	32d80000 	sbcscc	r0, r8, #0
     588:	00080800 	andeq	r0, r8, r0, lsl #16
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000003ea 	andeq	r0, r0, sl, ror #7
     594:	0001b909 	andeq	fp, r1, r9, lsl #18
     598:	02bf0100 	adcseq	r0, pc, #0, 2
     59c:	000003ea 	andeq	r0, r0, sl, ror #7
     5a0:	000001fa 	strdeq	r0, [r0], -sl
     5a4:	00027306 	andeq	r7, r2, r6, lsl #6
     5a8:	02c10100 	sbceq	r0, r1, #0, 2
     5ac:	00000050 	andeq	r0, r0, r0, asr r0
     5b0:	0000021b 	andeq	r0, r0, fp, lsl r2
     5b4:	50040a00 	andpl	r0, r4, r0, lsl #20
     5b8:	05000000 	streq	r0, [r0, #-0]
     5bc:	000001d2 	ldrdeq	r0, [r0], -r2
     5c0:	7402cf01 	strvc	ip, [r2], #-3841	; 0xfffff0ff
     5c4:	e0000000 	and	r0, r0, r0
     5c8:	06080032 			; <UNDEFINED> instruction: 0x06080032
     5cc:	01000000 	mrseq	r0, (UNDEF: 0)
     5d0:	00042b9c 	muleq	r4, ip, fp
     5d4:	01b90900 			; <UNDEFINED> instruction: 0x01b90900
     5d8:	cf010000 	svcgt	0x00010000
     5dc:	00042b02 	andeq	r2, r4, r2, lsl #22
     5e0:	00023a00 	andeq	r3, r2, r0, lsl #20
     5e4:	02730600 	rsbseq	r0, r3, #0, 12
     5e8:	d1010000 	mrsle	r0, (UNDEF: 1)
     5ec:	00007402 	andeq	r7, r0, r2, lsl #8
     5f0:	00025b00 	andeq	r5, r2, r0, lsl #22
     5f4:	040a0000 	streq	r0, [sl], #-0
     5f8:	00000074 	andeq	r0, r0, r4, ror r0
     5fc:	0002e305 	andeq	lr, r2, r5, lsl #6
     600:	02e00100 	rsceq	r0, r0, #0, 2
     604:	00000074 	andeq	r0, r0, r4, ror r0
     608:	080032e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp}
     60c:	00000008 	andeq	r0, r0, r8
     610:	047a9c01 	ldrbteq	r9, [sl], #-3073	; 0xfffff3ff
     614:	cc090000 	stcgt	0, cr0, [r9], {-0}
     618:	01000001 	tsteq	r0, r1
     61c:	002c02e0 	eoreq	r0, ip, r0, ror #5
     620:	027a0000 	rsbseq	r0, sl, #0
     624:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
     628:	01000001 	tsteq	r0, r1
     62c:	03a902e0 			; <UNDEFINED> instruction: 0x03a902e0
     630:	51010000 	mrspl	r0, (UNDEF: 1)
     634:	00027306 	andeq	r7, r2, r6, lsl #6
     638:	02e20100 	rsceq	r0, r2, #0, 2
     63c:	00000074 	andeq	r0, r0, r4, ror r0
     640:	0000029b 	muleq	r0, fp, r2
     644:	01b00500 	lslseq	r0, r0, #10
     648:	f1010000 	setend	le
     64c:	00007402 	andeq	r7, r0, r2, lsl #8
     650:	0032f000 	eorseq	pc, r2, r0
     654:	00000808 	andeq	r0, r0, r8, lsl #16
     658:	c39c0100 	orrsgt	r0, ip, #0, 2
     65c:	09000004 	stmdbeq	r0, {r2}
     660:	000001cc 	andeq	r0, r0, ip, asr #3
     664:	5002f101 	andpl	pc, r2, r1, lsl #2
     668:	ba000000 	blt	670 <__RW_SIZE__+0xdc>
     66c:	08000002 	stmdaeq	r0, {r1}
     670:	000001b9 			; <UNDEFINED> instruction: 0x000001b9
     674:	ea02f101 	b	bca80 <__RW_SIZE__+0xbc4ec>
     678:	01000003 	tsteq	r0, r3
     67c:	02730651 	rsbseq	r0, r3, #84934656	; 0x5100000
     680:	f3010000 	vhadd.u8	d0, d1, d0
     684:	00007402 	andeq	r7, r0, r2, lsl #8
     688:	0002db00 	andeq	sp, r2, r0, lsl #22
     68c:	d10b0000 	mrsle	r0, (UNDEF: 11)
     690:	01000002 	tsteq	r0, r2
     694:	00740302 	rsbseq	r0, r4, r2, lsl #6
     698:	32f80000 	rscscc	r0, r8, #0
     69c:	00060800 	andeq	r0, r6, r0, lsl #16
     6a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6a4:	0001cc09 	andeq	ip, r1, r9, lsl #24
     6a8:	03020100 	movweq	r0, #8448	; 0x2100
     6ac:	00000074 	andeq	r0, r0, r4, ror r0
     6b0:	000002fa 	strdeq	r0, [r0], -sl
     6b4:	0001b908 	andeq	fp, r1, r8, lsl #18
     6b8:	03020100 	movweq	r0, #8448	; 0x2100
     6bc:	0000042b 	andeq	r0, r0, fp, lsr #8
     6c0:	73065101 	movwvc	r5, #24833	; 0x6101
     6c4:	01000002 	tsteq	r0, r2
     6c8:	00740304 	rsbseq	r0, r4, r4, lsl #6
     6cc:	031b0000 	tsteq	fp, #0
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	00000a1c 	andeq	r0, r0, ip, lsl sl
     6d8:	015c0004 	cmpeq	ip, r4
     6dc:	01040000 	mrseq	r0, (UNDEF: 4)
     6e0:	00000108 	andeq	r0, r0, r8, lsl #2
     6e4:	00030d01 	andeq	r0, r3, r1, lsl #26
     6e8:	00001300 	andeq	r1, r0, r0, lsl #6
     6ec:	00330000 	eorseq	r0, r3, r0
     6f0:	00067e08 	andeq	r7, r6, r8, lsl #28
     6f4:	00019100 	andeq	r9, r1, r0, lsl #2
     6f8:	06010200 	streq	r0, [r1], -r0, lsl #4
     6fc:	00000099 	muleq	r0, r9, r0
     700:	97080102 	strls	r0, [r8, -r2, lsl #2]
     704:	02000000 	andeq	r0, r0, #0
     708:	00f20502 	rscseq	r0, r2, r2, lsl #10
     70c:	02020000 	andeq	r0, r2, #0
     710:	00006f07 	andeq	r6, r0, r7, lsl #30
     714:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     718:	00000005 	andeq	r0, r0, r5
     71c:	cc070402 	cfstrsgt	mvf0, [r7], {2}
     720:	02000000 	andeq	r0, r0, #0
     724:	00000508 	andeq	r0, r0, r8, lsl #10
     728:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     72c:	0000c707 	andeq	ip, r0, r7, lsl #14
     730:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     734:	00746e69 	rsbseq	r6, r4, r9, ror #28
     738:	d1070402 	tstle	r7, r2, lsl #8
     73c:	02000000 	andeq	r0, r0, #0
     740:	00de0704 	sbcseq	r0, lr, r4, lsl #14
     744:	04040000 	streq	r0, [r4], #-0
     748:	007a0405 	rsbseq	r0, sl, r5, lsl #8
     74c:	01020000 	mrseq	r0, (UNDEF: 2)
     750:	0000a008 	andeq	sl, r0, r8
     754:	87040500 	strhi	r0, [r4, -r0, lsl #10]
     758:	06000000 	streq	r0, [r0], -r0
     75c:	0000007a 	andeq	r0, r0, sl, ror r0
     760:	00033707 	andeq	r3, r3, r7, lsl #14
     764:	97280200 	strls	r0, [r8, -r0, lsl #4]!
     768:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     76c:	00000346 	andeq	r0, r0, r6, asr #6
     770:	ae000704 	cdpge	7, 0, cr0, cr0, cr4, {0}
     774:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     778:	0000036c 	andeq	r0, r0, ip, ror #6
     77c:	00000072 	andeq	r0, r0, r2, ror r0
     780:	48070000 	stmdami	r7, {}	; <UNPREDICTABLE>
     784:	02000003 	andeq	r0, r0, #3
     788:	00008c62 	andeq	r8, r0, r2, ror #24
     78c:	03710a00 	cmneq	r1, #0, 20
     790:	0d010000 	stceq	0, cr0, [r1, #-0]
     794:	00014d01 	andeq	r4, r1, r1, lsl #26
     798:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     79c:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7a0:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
     7a4:	5d0d0100 	stfpls	f0, [sp, #-0]
     7a8:	0c000000 	stceq	0, cr0, [r0], {-0}
     7ac:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     7b0:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7b4:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
     7b8:	01000003 	tsteq	r0, r3
     7bc:	00005d0d 	andeq	r5, r0, sp, lsl #26
     7c0:	0dd50c00 	ldcleq	12, cr0, [r5]
     7c4:	0d010000 	stceq	0, cr0, [r1, #-0]
     7c8:	0000005d 	andeq	r0, r0, sp, asr r0
     7cc:	00787a0b 	rsbseq	r7, r8, fp, lsl #20
     7d0:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7d4:	7a0b0000 	bvc	2c07dc <__RW_SIZE__+0x2c0248>
     7d8:	0d010079 	stceq	0, cr0, [r1, #-484]	; 0xfffffe1c
     7dc:	0000005d 	andeq	r0, r0, sp, asr r0
     7e0:	00037f0d 	andeq	r7, r3, sp, lsl #30
     7e4:	640f0100 	strvs	r0, [pc], #-256	; 7ec <__RW_SIZE__+0x258>
     7e8:	0d000000 	stceq	0, cr0, [r0, #-0]
     7ec:	00000327 	andeq	r0, r0, r7, lsr #6
     7f0:	00640f01 	rsbeq	r0, r4, r1, lsl #30
     7f4:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
     7f8:	10010073 	andne	r0, r1, r3, ror r0
     7fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     800:	0073790e 	rsbseq	r7, r3, lr, lsl #18
     804:	002c1001 	eoreq	r1, ip, r1
     808:	590d0000 	stmdbpl	sp, {}	; <UNPREDICTABLE>
     80c:	01000003 	tsteq	r0, r3
     810:	00014d11 	andeq	r4, r1, r1, lsl sp
     814:	03860d00 	orreq	r0, r6, #0, 26
     818:	12010000 	andne	r0, r1, #0
     81c:	0000015d 	andeq	r0, r0, sp, asr r1
     820:	002c0f00 	eoreq	r0, ip, r0, lsl #30
     824:	015d0000 	cmpeq	sp, r0
     828:	6b100000 	blvs	400830 <__RW_SIZE__+0x40029c>
     82c:	1f000000 	svcne	0x00000000
     830:	002c0f00 	eoreq	r0, ip, r0, lsl #30
     834:	016d0000 	cmneq	sp, r0
     838:	6b100000 	blvs	400840 <__RW_SIZE__+0x4002ac>
     83c:	07000000 	streq	r0, [r0, -r0]
     840:	00b91100 	adcseq	r1, r9, r0, lsl #2
     844:	33000000 	movwcc	r0, #0
     848:	01fa0800 	mvnseq	r0, r0, lsl #16
     84c:	9c010000 	stcls	0, cr0, [r1], {-0}
     850:	0000038d 	andeq	r0, r0, sp, lsl #7
     854:	0000c512 	andeq	ip, r0, r2, lsl r5
     858:	00033a00 	andeq	r3, r3, r0, lsl #20
     85c:	00ce1200 	sbceq	r1, lr, r0, lsl #4
     860:	03660000 	cmneq	r6, #0
     864:	d7120000 	ldrle	r0, [r2, -r0]
     868:	92000000 	andls	r0, r0, #0
     86c:	12000003 	andne	r0, r0, #3
     870:	000000e2 	andeq	r0, r0, r2, ror #1
     874:	000003be 			; <UNDEFINED> instruction: 0x000003be
     878:	0000ed12 	andeq	lr, r0, r2, lsl sp
     87c:	0003ea00 	andeq	lr, r3, r0, lsl #20
     880:	00f81200 	rscseq	r1, r8, r0, lsl #4
     884:	040a0000 	streq	r0, [sl], #-0
     888:	02120000 	andseq	r0, r2, #0
     88c:	2a000001 	bcs	898 <__RW_SIZE__+0x304>
     890:	13000004 	movwne	r0, #4
     894:	0000010c 	andeq	r0, r0, ip, lsl #2
     898:	0000044a 	andeq	r0, r0, sl, asr #8
     89c:	00011714 	andeq	r1, r1, r4, lsl r7
     8a0:	22130000 	andscs	r0, r3, #0
     8a4:	71000001 	tstvc	r0, r1
     8a8:	13000004 	movwne	r0, #4
     8ac:	0000012c 	andeq	r0, r0, ip, lsr #2
     8b0:	000004c0 	andeq	r0, r0, r0, asr #9
     8b4:	00013615 	andeq	r3, r1, r5, lsl r6
     8b8:	b8910300 	ldmlt	r1, {r8, r9}
     8bc:	0141157f 	hvceq	4447	; 0x115f
     8c0:	91030000 	mrsls	r0, (UNDEF: 3)
     8c4:	f4167fb0 			; <UNDEFINED> instruction: 0xf4167fb0
     8c8:	e9080033 	stmdb	r8, {r0, r1, r4, r5}
     8cc:	15000009 	strne	r0, [r0, #-9]
     8d0:	17000002 	strne	r0, [r0, -r2]
     8d4:	7a025201 	bvc	950e0 <__RW_SIZE__+0x94b4c>
     8d8:	51011700 	tstpl	r1, r0, lsl #14
     8dc:	7fa49105 	svcvc	0x00a49105
     8e0:	01170294 			; <UNDEFINED> instruction: 0x01170294
     8e4:	00770250 	rsbseq	r0, r7, r0, asr r2
     8e8:	340a1600 	strcc	r1, [sl], #-1536	; 0xfffffa00
     8ec:	09e90800 	stmibeq	r9!, {fp}^
     8f0:	02350000 	eorseq	r0, r5, #0
     8f4:	01170000 	tsteq	r7, r0
     8f8:	007a0252 	rsbseq	r0, sl, r2, asr r2
     8fc:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     900:	01170078 	tsteq	r7, r8, ror r0
     904:	01770250 	cmneq	r7, r0, asr r2
     908:	34141800 	ldrcc	r1, [r4], #-2048	; 0xfffff800
     90c:	09e90800 	stmibeq	r9!, {fp}^
     910:	24160000 	ldrcs	r0, [r6], #-0
     914:	e9080034 	stmdb	r8, {r2, r4, r5}
     918:	5b000009 	blpl	944 <__RW_SIZE__+0x3b0>
     91c:	17000002 	strne	r0, [r0, -r2]
     920:	7a025201 	bvc	9512c <__RW_SIZE__+0x94b98>
     924:	51011700 	tstpl	r1, r0, lsl #14
     928:	7fa49105 	svcvc	0x00a49105
     92c:	16000294 			; <UNDEFINED> instruction: 0x16000294
     930:	08003452 	stmdaeq	r0, {r1, r4, r6, sl, ip, sp}
     934:	000009e9 	andeq	r0, r0, r9, ror #19
     938:	00000281 	andeq	r0, r0, r1, lsl #5
     93c:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     940:	0117007a 	tsteq	r7, sl, ror r0
     944:	007b0251 	rsbseq	r0, fp, r1, asr r2
     948:	08500117 	ldmdaeq	r0, {r0, r1, r2, r4, r8}^
     94c:	947f9c91 	ldrbtls	r9, [pc], #-3217	; 954 <__RW_SIZE__+0x3c0>
     950:	22007402 	andcs	r7, r0, #33554432	; 0x2000000
     954:	34621600 	strbtcc	r1, [r2], #-1536	; 0xfffffa00
     958:	09e90800 	stmibeq	r9!, {fp}^
     95c:	02a70000 	adceq	r0, r7, #0
     960:	01170000 	tsteq	r7, r0
     964:	00790252 	rsbseq	r0, r9, r2, asr r2
     968:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     96c:	0117007b 	tsteq	r7, fp, ror r0
     970:	9c910850 	ldcls	8, cr0, [r1], {80}	; 0x50
     974:	7402947f 	strvc	r9, [r2], #-1151	; 0xfffffb81
     978:	16002200 	strne	r2, [r0], -r0, lsl #4
     97c:	0800346e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp}
     980:	000009e9 	andeq	r0, r0, r9, ror #19
     984:	000002c7 	andeq	r0, r0, r7, asr #5
     988:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     98c:	01170079 	tsteq	r7, r9, ror r0
     990:	007b0251 	rsbseq	r0, fp, r1, asr r2
     994:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     998:	16000077 			; <UNDEFINED> instruction: 0x16000077
     99c:	0800347a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, sp}
     9a0:	000009e9 	andeq	r0, r0, r9, ror #19
     9a4:	000002e7 	andeq	r0, r0, r7, ror #5
     9a8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9ac:	01170079 	tsteq	r7, r9, ror r0
     9b0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9b4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9b8:	16000177 			; <UNDEFINED> instruction: 0x16000177
     9bc:	08003486 	stmdaeq	r0, {r1, r2, r7, sl, ip, sp}
     9c0:	000009e9 	andeq	r0, r0, r9, ror #19
     9c4:	00000307 	andeq	r0, r0, r7, lsl #6
     9c8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9cc:	0117007a 	tsteq	r7, sl, ror r0
     9d0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9d4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9d8:	16000077 			; <UNDEFINED> instruction: 0x16000077
     9dc:	08003492 	stmdaeq	r0, {r1, r4, r7, sl, ip, sp}
     9e0:	000009e9 	andeq	r0, r0, r9, ror #19
     9e4:	00000327 	andeq	r0, r0, r7, lsr #6
     9e8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9ec:	0117007a 	tsteq	r7, sl, ror r0
     9f0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9f4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9f8:	18000177 	stmdane	r0, {r0, r1, r2, r4, r5, r6, r8}
     9fc:	080034c2 	stmdaeq	r0, {r1, r6, r7, sl, ip, sp}
     a00:	000009e9 	andeq	r0, r0, r9, ror #19
     a04:	0034d016 	eorseq	sp, r4, r6, lsl r0
     a08:	0009e908 	andeq	lr, r9, r8, lsl #18
     a0c:	00034d00 	andeq	r4, r3, r0, lsl #26
     a10:	52011700 	andpl	r1, r1, #0, 14
     a14:	17007902 	strne	r7, [r0, -r2, lsl #18]
     a18:	91055101 	tstls	r5, r1, lsl #2
     a1c:	02947fa4 	addseq	r7, r4, #164, 30	; 0x290
     a20:	34dc1600 	ldrbcc	r1, [ip], #1536	; 0x600
     a24:	09e90800 	stmibeq	r9!, {fp}^
     a28:	03700000 	cmneq	r0, #0
     a2c:	01170000 	tsteq	r7, r0
     a30:	00790252 	rsbseq	r0, r9, r2, asr r2
     a34:	05510117 	ldrbeq	r0, [r1, #-279]	; 0xfffffee9
     a38:	947fa491 	ldrbtls	sl, [pc], #-1169	; a40 <__RW_SIZE__+0x4ac>
     a3c:	50011702 	andpl	r1, r1, r2, lsl #14
     a40:	00007702 	andeq	r7, r0, r2, lsl #14
     a44:	0034f219 	eorseq	pc, r4, r9, lsl r2	; <UNPREDICTABLE>
     a48:	0009e908 	andeq	lr, r9, r8, lsl #18
     a4c:	52011700 	andpl	r1, r1, #0, 14
     a50:	17007902 	strne	r7, [r0, -r2, lsl #18]
     a54:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
     a58:	50011700 	andpl	r1, r1, r0, lsl #14
     a5c:	00017702 	andeq	r7, r1, r2, lsl #14
     a60:	03500a00 	cmpeq	r0, #0, 20
     a64:	4a010000 	bmi	40a6c <__RW_SIZE__+0x404d8>
     a68:	0003ec01 	andeq	lr, r3, r1, lsl #24
     a6c:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     a70:	005d4a01 	subseq	r4, sp, r1, lsl #20
     a74:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
     a78:	5d4a0100 	stfple	f0, [sl, #-0]
     a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a80:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     a84:	005d4a01 	subseq	r4, sp, r1, lsl #20
     a88:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
     a8c:	01000003 	tsteq	r0, r3
     a90:	00005d4a 	andeq	r5, r0, sl, asr #26
     a94:	74730b00 	ldrbtvc	r0, [r3], #-2816	; 0xfffff500
     a98:	4a010072 	bmi	40c68 <__RW_SIZE__+0x406d4>
     a9c:	00000081 	andeq	r0, r0, r1, lsl #1
     aa0:	00787a0b 	rsbseq	r7, r8, fp, lsl #20
     aa4:	005d4a01 	subseq	r4, sp, r1, lsl #20
     aa8:	7a0b0000 	bvc	2c0ab0 <__RW_SIZE__+0x2c051c>
     aac:	4a010079 	bmi	40c98 <__RW_SIZE__+0x40704>
     ab0:	0000005d 	andeq	r0, r0, sp, asr r0
     ab4:	000dd50d 	andeq	sp, sp, sp, lsl #10
     ab8:	644c0100 	strbvs	r0, [ip], #-256	; 0xffffff00
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	00038d11 	andeq	r8, r3, r1, lsl sp
     ac4:	0034fc00 	eorseq	pc, r4, r0, lsl #24
     ac8:	00022c08 	andeq	r2, r2, r8, lsl #24
     acc:	619c0100 	orrsvs	r0, ip, r0, lsl #2
     ad0:	12000006 	andne	r0, r0, #6
     ad4:	00000399 	muleq	r0, r9, r3
     ad8:	000004f4 	strdeq	r0, [r0], -r4
     adc:	0003a212 	andeq	sl, r3, r2, lsl r2
     ae0:	00052c00 	andeq	r2, r5, r0, lsl #24
     ae4:	03ab1200 			; <UNDEFINED> instruction: 0x03ab1200
     ae8:	054d0000 	strbeq	r0, [sp, #-0]
     aec:	b6120000 	ldrlt	r0, [r2], -r0
     af0:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
     af4:	12000005 	andne	r0, r0, #5
     af8:	000003c1 	andeq	r0, r0, r1, asr #7
     afc:	0000058f 	andeq	r0, r0, pc, lsl #11
     b00:	0003cc12 	andeq	ip, r3, r2, lsl ip
     b04:	0005d000 	andeq	sp, r5, r0
     b08:	03d61200 	bicseq	r1, r6, #0, 4
     b0c:	05f00000 	ldrbeq	r0, [r0, #0]!
     b10:	e0130000 	ands	r0, r3, r0
     b14:	10000003 	andne	r0, r0, r3
     b18:	1a000006 	bne	b38 <__RW_SIZE__+0x5a4>
     b1c:	000000b9 	strheq	r0, [r0], -r9
     b20:	0800352a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, sp}
     b24:	00000010 	andeq	r0, r0, r0, lsl r0
     b28:	02125101 	andseq	r5, r2, #1073741824	; 0x40000000
     b2c:	28000001 	stmdacs	r0, {r0}
     b30:	12000006 	andne	r0, r0, #6
     b34:	000000f8 	strdeq	r0, [r0], -r8
     b38:	00000648 	andeq	r0, r0, r8, asr #12
     b3c:	0000ed12 	andeq	lr, r0, r2, lsl sp
     b40:	00061000 	andeq	r1, r6, r0
     b44:	00e21b00 	rsceq	r1, r2, r0, lsl #22
     b48:	d71b0000 	ldrle	r0, [fp, -r0]
     b4c:	12000000 	andne	r0, r0, #0
     b50:	000000ce 	andeq	r0, r0, lr, asr #1
     b54:	00000668 	andeq	r0, r0, r8, ror #12
     b58:	0000c512 	andeq	ip, r0, r2, lsl r5
     b5c:	00068c00 	andeq	r8, r6, r0, lsl #24
     b60:	00101c00 	andseq	r1, r0, r0, lsl #24
     b64:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
     b68:	13000001 	movwne	r0, #1
     b6c:	00000117 	andeq	r0, r0, r7, lsl r1
     b70:	000006ae 	andeq	r0, r0, lr, lsr #13
     b74:	00012213 	andeq	r2, r1, r3, lsl r2
     b78:	0006ce00 	andeq	ip, r6, r0, lsl #28
     b7c:	012c1300 	teqeq	ip, r0, lsl #6
     b80:	071d0000 	ldreq	r0, [sp, -r0]
     b84:	36150000 	ldrcc	r0, [r5], -r0
     b88:	03000001 	movweq	r0, #1
     b8c:	157fb891 	ldrbne	fp, [pc, #-2193]!	; 303 <__ZI_SIZE__+0x147>
     b90:	00000141 	andeq	r0, r0, r1, asr #2
     b94:	7fb09103 	svcvc	0x00b09103
     b98:	00360e16 	eorseq	r0, r6, r6, lsl lr
     b9c:	0009e908 	andeq	lr, r9, r8, lsl #18
     ba0:	0004e700 	andeq	lr, r4, r0, lsl #14
     ba4:	52011700 	andpl	r1, r1, #0, 14
     ba8:	17007902 	strne	r7, [r0, -r2, lsl #18]
     bac:	91055101 	tstls	r5, r1, lsl #2
     bb0:	02947f94 	addseq	r7, r4, #148, 30	; 0x250
     bb4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     bb8:	16000077 			; <UNDEFINED> instruction: 0x16000077
     bbc:	08003624 	stmdaeq	r0, {r2, r5, r9, sl, ip, sp}
     bc0:	000009e9 	andeq	r0, r0, r9, ror #19
     bc4:	00000507 	andeq	r0, r0, r7, lsl #10
     bc8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     bcc:	01170079 	tsteq	r7, r9, ror r0
     bd0:	00780251 	rsbseq	r0, r8, r1, asr r2
     bd4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     bd8:	18000177 	stmdane	r0, {r0, r1, r2, r4, r5, r6, r8}
     bdc:	0800362e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl, ip, sp}
     be0:	000009e9 	andeq	r0, r0, r9, ror #19
     be4:	00363e16 	eorseq	r3, r6, r6, lsl lr
     be8:	0009e908 	andeq	lr, r9, r8, lsl #18
     bec:	00052d00 	andeq	r2, r5, r0, lsl #26
     bf0:	52011700 	andpl	r1, r1, #0, 14
     bf4:	17007902 	strne	r7, [r0, -r2, lsl #18]
     bf8:	91055101 	tstls	r5, r1, lsl #2
     bfc:	02947f94 	addseq	r7, r4, #148, 30	; 0x250
     c00:	36801600 	strcc	r1, [r0], r0, lsl #12
     c04:	09e90800 	stmibeq	r9!, {fp}^
     c08:	05530000 	ldrbeq	r0, [r3, #-0]
     c0c:	01170000 	tsteq	r7, r0
     c10:	00790252 	rsbseq	r0, r9, r2, asr r2
     c14:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c18:	0117007b 	tsteq	r7, fp, ror r0
     c1c:	8c910850 	ldchi	8, cr0, [r1], {80}	; 0x50
     c20:	7402947f 	strvc	r9, [r2], #-1151	; 0xfffffb81
     c24:	16002200 	strne	r2, [r0], -r0, lsl #4
     c28:	08003690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp}
     c2c:	000009e9 	andeq	r0, r0, r9, ror #19
     c30:	00000579 	andeq	r0, r0, r9, ror r5
     c34:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     c38:	0117007a 	tsteq	r7, sl, ror r0
     c3c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     c40:	08500117 	ldmdaeq	r0, {r0, r1, r2, r4, r8}^
     c44:	947f8c91 	ldrbtls	r8, [pc], #-3217	; c4c <__RW_SIZE__+0x6b8>
     c48:	22007402 	andcs	r7, r0, #33554432	; 0x2000000
     c4c:	369c1600 	ldrcc	r1, [ip], r0, lsl #12
     c50:	09e90800 	stmibeq	r9!, {fp}^
     c54:	05990000 	ldreq	r0, [r9]
     c58:	01170000 	tsteq	r7, r0
     c5c:	007a0252 	rsbseq	r0, sl, r2, asr r2
     c60:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c64:	0117007b 	tsteq	r7, fp, ror r0
     c68:	00770250 	rsbseq	r0, r7, r0, asr r2
     c6c:	36a81600 	strtcc	r1, [r8], r0, lsl #12
     c70:	09e90800 	stmibeq	r9!, {fp}^
     c74:	05b90000 	ldreq	r0, [r9, #0]!
     c78:	01170000 	tsteq	r7, r0
     c7c:	007a0252 	rsbseq	r0, sl, r2, asr r2
     c80:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c84:	0117007b 	tsteq	r7, fp, ror r0
     c88:	01770250 	cmneq	r7, r0, asr r2
     c8c:	36b41600 	ldrtcc	r1, [r4], r0, lsl #12
     c90:	09e90800 	stmibeq	r9!, {fp}^
     c94:	05d90000 	ldrbeq	r0, [r9]
     c98:	01170000 	tsteq	r7, r0
     c9c:	00790252 	rsbseq	r0, r9, r2, asr r2
     ca0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     ca4:	0117007b 	tsteq	r7, fp, ror r0
     ca8:	00770250 	rsbseq	r0, r7, r0, asr r2
     cac:	36c01600 	strbcc	r1, [r0], r0, lsl #12
     cb0:	09e90800 	stmibeq	r9!, {fp}^
     cb4:	05f90000 	ldrbeq	r0, [r9, #0]!
     cb8:	01170000 	tsteq	r7, r0
     cbc:	00790252 	rsbseq	r0, r9, r2, asr r2
     cc0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     cc4:	0117007b 	tsteq	r7, fp, ror r0
     cc8:	01770250 	cmneq	r7, r0, asr r2
     ccc:	36f01800 	ldrbtcc	r1, [r0], r0, lsl #16
     cd0:	09e90800 	stmibeq	r9!, {fp}^
     cd4:	fe160000 	cdp2	0, 1, cr0, cr6, cr0, {0}
     cd8:	e9080036 	stmdb	r8, {r1, r2, r4, r5}
     cdc:	1f000009 	svcne	0x00000009
     ce0:	17000006 	strne	r0, [r0, -r6]
     ce4:	7a025201 	bvc	954f0 <__RW_SIZE__+0x94f5c>
     ce8:	51011700 	tstpl	r1, r0, lsl #14
     cec:	7f949105 	svcvc	0x00949105
     cf0:	16000294 			; <UNDEFINED> instruction: 0x16000294
     cf4:	0800370a 	stmdaeq	r0, {r1, r3, r8, r9, sl, ip, sp}
     cf8:	000009e9 	andeq	r0, r0, r9, ror #19
     cfc:	00000642 	andeq	r0, r0, r2, asr #12
     d00:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     d04:	0117007a 	tsteq	r7, sl, ror r0
     d08:	94910551 	ldrls	r0, [r1], #1361	; 0x551
     d0c:	1702947f 	smlsdxne	r2, pc, r4, r9	; <UNPREDICTABLE>
     d10:	77025001 	strvc	r5, [r2, -r1]
     d14:	20190000 	andscs	r0, r9, r0
     d18:	e9080037 	stmdb	r8, {r0, r1, r2, r4, r5}
     d1c:	17000009 	strne	r0, [r0, -r9]
     d20:	7a025201 	bvc	9552c <__RW_SIZE__+0x94f98>
     d24:	51011700 	tstpl	r1, r0, lsl #14
     d28:	17007802 	strne	r7, [r0, -r2, lsl #16]
     d2c:	77025001 	strvc	r5, [r2, -r1]
     d30:	00000001 	andeq	r0, r0, r1
     d34:	032c1e00 	teqeq	ip, #0, 28
     d38:	56010000 	strpl	r0, [r1], -r0
     d3c:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     d40:	00000256 	andeq	r0, r0, r6, asr r2
     d44:	09a19c01 	stmibeq	r1!, {r0, sl, fp, ip, pc}
     d48:	781f0000 	ldmdavc	pc, {}	; <UNPREDICTABLE>
     d4c:	5d560100 	ldfple	f0, [r6, #-0]
     d50:	51000000 	mrspl	r0, (UNDEF: 0)
     d54:	1f000007 	svcne	0x00000007
     d58:	56010079 			; <UNDEFINED> instruction: 0x56010079
     d5c:	0000005d 	andeq	r0, r0, sp, asr r0
     d60:	0000077f 	andeq	r0, r0, pc, ror r7
     d64:	000cb620 	andeq	fp, ip, r0, lsr #12
     d68:	5d560100 	ldfple	f0, [r6, #-0]
     d6c:	ab000000 	blge	d74 <__RW_SIZE__+0x7e0>
     d70:	20000007 	andcs	r0, r0, r7
     d74:	00000318 	andeq	r0, r0, r8, lsl r3
     d78:	005d5601 	subseq	r5, sp, r1, lsl #12
     d7c:	07d70000 	ldrbeq	r0, [r7, r0]
     d80:	7a1f0000 	bvc	7c0d88 <__RW_SIZE__+0x7c07f4>
     d84:	56010078 			; <UNDEFINED> instruction: 0x56010078
     d88:	0000005d 	andeq	r0, r0, sp, asr r0
     d8c:	00000803 	andeq	r0, r0, r3, lsl #16
     d90:	00797a1f 	rsbseq	r7, r9, pc, lsl sl
     d94:	005d5601 	subseq	r5, sp, r1, lsl #12
     d98:	08230000 	stmdaeq	r3!, {}	; <UNPREDICTABLE>
     d9c:	661f0000 	ldrvs	r0, [pc], -r0
     da0:	0100746d 	tsteq	r0, sp, ror #8
     da4:	00008156 	andeq	r8, r0, r6, asr r1
     da8:	00084300 	andeq	r4, r8, r0, lsl #6
     dac:	61222100 	teqvs	r2, r0, lsl #2
     db0:	58010070 	stmdapl	r1, {r4, r5, r6}
     db4:	000000ae 	andeq	r0, r0, lr, lsr #1
     db8:	7dac9103 	stfvcd	f1, [ip, #12]!
     dbc:	00032023 	andeq	r2, r3, r3, lsr #32
     dc0:	a1590100 	cmpge	r9, r0, lsl #2
     dc4:	03000009 	movweq	r0, #9
     dc8:	247dd891 	ldrbtcs	sp, [sp], #-2193	; 0xfffff76f
     dcc:	0000038d 	andeq	r0, r0, sp, lsl #7
     dd0:	0800374a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, ip, sp}
     dd4:	00000028 	andeq	r0, r0, r8, lsr #32
     dd8:	09825d01 	stmibeq	r2, {r0, r8, sl, fp, ip, lr}
     ddc:	d6120000 	ldrle	r0, [r2], -r0
     de0:	63000003 	movwvs	r0, #3
     de4:	12000008 	andne	r0, r0, #8
     de8:	000003cc 	andeq	r0, r0, ip, asr #7
     dec:	00000882 	andeq	r0, r0, r2, lsl #17
     df0:	0003c112 	andeq	ip, r3, r2, lsl r1
     df4:	0008a100 	andeq	sl, r8, r0, lsl #2
     df8:	03b61200 			; <UNDEFINED> instruction: 0x03b61200
     dfc:	08f10000 	ldmeq	r1!, {}^	; <UNPREDICTABLE>
     e00:	ab120000 	blge	480e08 <__RW_SIZE__+0x480874>
     e04:	12000003 	andne	r0, r0, #3
     e08:	12000009 	andne	r0, r0, #9
     e0c:	000003a2 	andeq	r0, r0, r2, lsr #7
     e10:	00000933 	andeq	r0, r0, r3, lsr r9
     e14:	00039912 	andeq	r9, r3, r2, lsl r9
     e18:	00095400 	andeq	r5, r9, r0, lsl #8
     e1c:	00281c00 	eoreq	r1, r8, r0, lsl #24
     e20:	e0130000 	ands	r0, r3, r0
     e24:	81000003 	tsthi	r0, r3
     e28:	1a000009 	bne	e54 <__RW_SIZE__+0x8c0>
     e2c:	000000b9 	strheq	r0, [r0], -r9
     e30:	08003766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip, sp}
     e34:	00000040 	andeq	r0, r0, r0, asr #32
     e38:	02125101 	andseq	r5, r2, #1073741824	; 0x40000000
     e3c:	99000001 	stmdbls	r0, {r0}
     e40:	12000009 	andne	r0, r0, #9
     e44:	000000f8 	strdeq	r0, [r0], -r8
     e48:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
     e4c:	0000ed12 	andeq	lr, r0, r2, lsl sp
     e50:	00098100 	andeq	r8, r9, r0, lsl #2
     e54:	00e21b00 	rsceq	r1, r2, r0, lsl #22
     e58:	d71b0000 	ldrle	r0, [fp, -r0]
     e5c:	12000000 	andne	r0, r0, #0
     e60:	000000ce 	andeq	r0, r0, lr, asr #1
     e64:	000009d9 	ldrdeq	r0, [r0], -r9
     e68:	0000c512 	andeq	ip, r0, r2, lsl r5
     e6c:	0009fd00 	andeq	pc, r9, r0, lsl #26
     e70:	00401c00 	subeq	r1, r0, r0, lsl #24
     e74:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
     e78:	13000001 	movwne	r0, #1
     e7c:	00000117 	andeq	r0, r0, r7, lsl r1
     e80:	00000a1f 	andeq	r0, r0, pc, lsl sl
     e84:	00012213 	andeq	r2, r1, r3, lsl r2
     e88:	000a3f00 	andeq	r3, sl, r0, lsl #30
     e8c:	012c1300 	teqeq	ip, r0, lsl #6
     e90:	0a8e0000 	beq	fe380e98 <MSP_BASE+0xde37be98>
     e94:	36150000 	ldrcc	r0, [r5], -r0
     e98:	03000001 	movweq	r0, #1
     e9c:	157db891 	ldrbne	fp, [sp, #-2193]!	; 0xfffff76f
     ea0:	00000141 	andeq	r0, r0, r1, asr #2
     ea4:	7db09103 	ldfvcd	f1, [r0, #12]!
     ea8:	00385a16 	eorseq	r5, r8, r6, lsl sl
     eac:	0009e908 	andeq	lr, r9, r8, lsl #18
     eb0:	0007fa00 	andeq	pc, r7, r0, lsl #20
     eb4:	52011700 	andpl	r1, r1, #0, 14
     eb8:	7cfc9105 	ldfvcp	f1, [ip], #20
     ebc:	01170294 			; <UNDEFINED> instruction: 0x01170294
     ec0:	8c910551 	cfldr32hi	mvfx0, [r1], {81}	; 0x51
     ec4:	1702947d 	smlsdxne	r2, sp, r4, r9
     ec8:	78025001 	stmdavc	r2, {r0, ip, lr}
     ecc:	70160000 	andsvc	r0, r6, r0
     ed0:	e9080038 	stmdb	r8, {r3, r4, r5}
     ed4:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
     ed8:	17000008 	strne	r0, [r0, -r8]
     edc:	91055201 	tstls	r5, r1, lsl #4
     ee0:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     ee4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     ee8:	0117007a 	tsteq	r7, sl, ror r0
     eec:	01780250 	cmneq	r8, r0, asr r2
     ef0:	387a1800 	ldmdacc	sl!, {fp, ip}^
     ef4:	09e90800 	stmibeq	r9!, {fp}^
     ef8:	8a160000 	bhi	580f00 <__RW_SIZE__+0x58096c>
     efc:	e9080038 	stmdb	r8, {r3, r4, r5}
     f00:	46000009 	strmi	r0, [r0], -r9
     f04:	17000008 	strne	r0, [r0, -r8]
     f08:	91055201 	tstls	r5, r1, lsl #4
     f0c:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     f10:	05510117 	ldrbeq	r0, [r1, #-279]	; 0xfffffee9
     f14:	947d8c91 	ldrbtls	r8, [sp], #-3217	; 0xfffff36f
     f18:	d2160002 	andsle	r0, r6, #2
     f1c:	e9080038 	stmdb	r8, {r3, r4, r5}
     f20:	6e000009 	cdpvs	0, 0, cr0, cr0, cr9, {0}
     f24:	17000008 	strne	r0, [r0, -r8]
     f28:	91055201 	tstls	r5, r1, lsl #4
     f2c:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     f30:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     f34:	0117007b 	tsteq	r7, fp, ror r0
     f38:	84910750 	ldrhi	r0, [r1], #1872	; 0x750
     f3c:	0074067d 	rsbseq	r0, r4, sp, ror r6
     f40:	e2160022 	ands	r0, r6, #34	; 0x22
     f44:	e9080038 	stmdb	r8, {r3, r4, r5}
     f48:	93000009 	movwls	r0, #9
     f4c:	17000008 	strne	r0, [r0, -r8]
     f50:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
     f54:	51011700 	tstpl	r1, r0, lsl #14
     f58:	17007b02 	strne	r7, [r0, -r2, lsl #22]
     f5c:	91075001 	tstls	r7, r1
     f60:	74067d84 	strvc	r7, [r6], #-3460	; 0xfffff27c
     f64:	16002200 	strne	r2, [r0], -r0, lsl #4
     f68:	080038ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, sp}
     f6c:	000009e9 	andeq	r0, r0, r9, ror #19
     f70:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
     f74:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     f78:	01170079 	tsteq	r7, r9, ror r0
     f7c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     f80:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     f84:	16000078 			; <UNDEFINED> instruction: 0x16000078
     f88:	080038fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, sp}
     f8c:	000009e9 	andeq	r0, r0, r9, ror #19
     f90:	000008d3 	ldrdeq	r0, [r0], -r3
     f94:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     f98:	01170079 	tsteq	r7, r9, ror r0
     f9c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     fa0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     fa4:	16000178 			; <UNDEFINED> instruction: 0x16000178
     fa8:	08003908 	stmdaeq	r0, {r3, r8, fp, ip, sp}
     fac:	000009e9 	andeq	r0, r0, r9, ror #19
     fb0:	000008f6 	strdeq	r0, [r0], -r6
     fb4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0xfffffee9
     fb8:	947cfc91 	ldrbtls	pc, [ip], #-3217	; 0xfffff36f	; <UNPREDICTABLE>
     fbc:	51011702 	tstpl	r1, r2, lsl #14
     fc0:	17007b02 	strne	r7, [r0, -r2, lsl #22]
     fc4:	78025001 	stmdavc	r2, {r0, ip, lr}
     fc8:	16160000 	ldrne	r0, [r6], -r0
     fcc:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
     fd0:	19000009 	stmdbne	r0, {r0, r3}
     fd4:	17000009 	strne	r0, [r0, -r9]
     fd8:	91055201 	tstls	r5, r1, lsl #4
     fdc:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     fe0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     fe4:	0117007b 	tsteq	r7, fp, ror r0
     fe8:	01780250 	cmneq	r8, r0, asr r2
     fec:	39461800 	stmdbcc	r6, {fp, ip}^
     ff0:	09e90800 	stmibeq	r9!, {fp}^
     ff4:	54160000 	ldrpl	r0, [r6], #-0
     ff8:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
     ffc:	3f000009 	svccc	0x00000009
    1000:	17000009 	strne	r0, [r0, -r9]
    1004:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    1008:	51011700 	tstpl	r1, r0, lsl #14
    100c:	7d8c9105 	stfvcd	f1, [ip, #20]
    1010:	16000294 			; <UNDEFINED> instruction: 0x16000294
    1014:	08003960 	stmdaeq	r0, {r5, r6, r8, fp, ip, sp}
    1018:	000009e9 	andeq	r0, r0, r9, ror #19
    101c:	00000962 	andeq	r0, r0, r2, ror #18
    1020:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    1024:	01170079 	tsteq	r7, r9, ror r0
    1028:	8c910551 	cfldr32hi	mvfx0, [r1], {81}	; 0x51
    102c:	1702947d 	smlsdxne	r2, sp, r4, r9
    1030:	78025001 	stmdavc	r2, {r0, ip, lr}
    1034:	76190000 	ldrvc	r0, [r9], -r0
    1038:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
    103c:	17000009 	strne	r0, [r0, -r9]
    1040:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    1044:	51011700 	tstpl	r1, r0, lsl #14
    1048:	17007a02 	strne	r7, [r0, -r2, lsl #20]
    104c:	78025001 	stmdavc	r2, {r0, ip, lr}
    1050:	00000001 	andeq	r0, r0, r1
    1054:	4a190000 	bmi	64105c <__RW_SIZE__+0x640ac8>
    1058:	04080037 	streq	r0, [r8], #-55	; 0xffffffc9
    105c:	1700000a 	strne	r0, [r0, -sl]
    1060:	91025201 	tstls	r2, r1, lsl #4
    1064:	5101170c 	tstpl	r1, ip, lsl #14
    1068:	06089103 	streq	r9, [r8], -r3, lsl #2
    106c:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1070:	007dd891 			; <UNDEFINED> instruction: 0x007dd891
    1074:	007a0f00 	rsbseq	r0, sl, r0, lsl #30
    1078:	09b10000 	ldmibeq	r1!, {}	; <UNPREDICTABLE>
    107c:	6b100000 	blvs	401084 <__RW_SIZE__+0x400af0>
    1080:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1084:	00822500 	addeq	r2, r2, r0, lsl #10
    1088:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    108c:	0009bd06 	andeq	fp, r9, r6, lsl #26
    1090:	005d2600 	subseq	r2, sp, r0, lsl #12
    1094:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    1098:	d3000000 	movwle	r0, #0
    109c:	27000009 	strcs	r0, [r0, -r9]
    10a0:	0000006b 	andeq	r0, r0, fp, rrx
    10a4:	28000fff 	stmdacs	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    10a8:	00000305 	andeq	r0, r0, r5, lsl #6
    10ac:	09e40104 	stmibeq	r4!, {r2, r8}^
    10b0:	03050000 	movweq	r0, #20480	; 0x5000
    10b4:	0800fa70 	stmdaeq	r0, {r4, r5, r6, r9, fp, ip, sp, lr, pc}
    10b8:	0009c206 	andeq	ip, r9, r6, lsl #4
    10bc:	035e2900 	cmpeq	lr, #0, 18
    10c0:	10050000 	andne	r0, r5, r0
    10c4:	00000a04 	andeq	r0, r0, r4, lsl #20
    10c8:	00003a2a 	andeq	r3, r0, sl, lsr #20
    10cc:	003a2a00 	eorseq	r2, sl, r0, lsl #20
    10d0:	3a2a0000 	bcc	a810d8 <__RW_SIZE__+0xa80b44>
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	00038e2b 	andeq	r8, r3, fp, lsr #28
    10dc:	5ddc0600 	ldclpl	6, cr0, [ip]
    10e0:	2a000000 	bcs	10e8 <__RW_SIZE__+0xb54>
    10e4:	00000074 	andeq	r0, r0, r4, ror r0
    10e8:	0000812a 	andeq	r8, r0, sl, lsr #2
    10ec:	008c2a00 	addeq	r2, ip, r0, lsl #20
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	0000079a 	muleq	r0, sl, r7
    10f8:	03730004 	cmneq	r3, #4
    10fc:	01040000 	mrseq	r0, (UNDEF: 4)
    1100:	00000108 	andeq	r0, r0, r8, lsl #2
    1104:	0006b301 	andeq	fp, r6, r1, lsl #6
    1108:	00001300 	andeq	r1, r0, r0, lsl #6
    110c:	00398000 	eorseq	r8, r9, r0
    1110:	00028808 	andeq	r8, r2, r8, lsl #16
    1114:	0003aa00 	andeq	sl, r3, r0, lsl #20
    1118:	04210200 	strteq	r0, [r1], #-512	; 0xfffffe00
    111c:	03010000 	movweq	r0, #4096	; 0x1000
    1120:	000164a8 	andeq	r6, r1, r8, lsr #9
    1124:	064c0300 	strbeq	r0, [ip], -r0, lsl #6
    1128:	03720000 	cmneq	r2, #0
    112c:	00000449 	andeq	r0, r0, r9, asr #8
    1130:	05890374 	streq	r0, [r9, #884]	; 0x374
    1134:	03750000 	cmneq	r5, #0
    1138:	0000070c 	andeq	r0, r0, ip, lsl #14
    113c:	07290376 			; <UNDEFINED> instruction: 0x07290376
    1140:	037b0000 	cmneq	fp, #0
    1144:	000006fa 	strdeq	r0, [r0], -sl
    1148:	0426037c 	strteq	r0, [r6], #-892	; 0xfffffc84
    114c:	037e0000 	cmneq	lr, #0
    1150:	000006bd 			; <UNDEFINED> instruction: 0x000006bd
    1154:	057f037f 	ldrbeq	r0, [pc, #-895]!	; ddd <__RW_SIZE__+0x849>
    1158:	03000000 	movweq	r0, #0
    115c:	000005a2 	andeq	r0, r0, r2, lsr #11
    1160:	07ad0301 	streq	r0, [sp, r1, lsl #6]!
    1164:	03020000 	movweq	r0, #8192	; 0x2000
    1168:	000005f8 	strdeq	r0, [r0], -r8
    116c:	03fc0303 	mvnseq	r0, #201326592	; 0xc000000
    1170:	03040000 	movweq	r0, #16384	; 0x4000
    1174:	00000440 	andeq	r0, r0, r0, asr #8
    1178:	040c0305 	streq	r0, [ip], #-773	; 0xfffffcfb
    117c:	03060000 	movweq	r0, #24576	; 0x6000
    1180:	00000672 	andeq	r0, r0, r2, ror r6
    1184:	04ef0307 	strbteq	r0, [pc], #775	; 118c <__RW_SIZE__+0xbf8>
    1188:	03080000 	movweq	r0, #32768	; 0x8000
    118c:	0000076b 	andeq	r0, r0, fp, ror #14
    1190:	05970309 	ldreq	r0, [r7, #777]	; 0x309
    1194:	030a0000 	movweq	r0, #40960	; 0xa000
    1198:	00000556 	andeq	r0, r0, r6, asr r5
    119c:	03e9030b 	mvneq	r0, #738197504	; 0x2c000000
    11a0:	030c0000 	movweq	r0, #49152	; 0xc000
    11a4:	000005c6 	andeq	r0, r0, r6, asr #11
    11a8:	0485030d 	streq	r0, [r5], #781	; 0x30d
    11ac:	030e0000 	movweq	r0, #57344	; 0xe000
    11b0:	00000758 	andeq	r0, r0, r8, asr r7
    11b4:	0524030f 	streq	r0, [r4, #-783]!	; 0xfffffcf1
    11b8:	03100000 	tsteq	r0, #0
    11bc:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    11c0:	077b0311 			; <UNDEFINED> instruction: 0x077b0311
    11c4:	03120000 	tsteq	r2, #0
    11c8:	000004c5 	andeq	r0, r0, r5, asr #9
    11cc:	03970313 	orrseq	r0, r7, #1275068416	; 0x4c000000
    11d0:	03140000 	tsteq	r4, #0
    11d4:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    11d8:	03b10315 			; <UNDEFINED> instruction: 0x03b10315
    11dc:	03160000 	tsteq	r6, #0
    11e0:	0000071c 	andeq	r0, r0, ip, lsl r7
    11e4:	04640317 	strbteq	r0, [r4], #-791	; 0xfffffce9
    11e8:	03180000 	tsteq	r8, #0
    11ec:	000005e6 	andeq	r0, r0, r6, ror #11
    11f0:	06870319 	pkhbteq	r0, r7, r9, lsl #6
    11f4:	031a0000 	tsteq	sl, #0
    11f8:	00000660 	andeq	r0, r0, r0, ror #12
    11fc:	06d6031b 			; <UNDEFINED> instruction: 0x06d6031b
    1200:	031c0000 	tsteq	ip, #0
    1204:	0000054c 	andeq	r0, r0, ip, asr #10
    1208:	03df031d 	bicseq	r0, pc, #1946157056	; 0x74000000
    120c:	031e0000 	tsteq	lr, #0
    1210:	000005d9 	ldrdeq	r0, [r0], -r9
    1214:	06a6031f 	ssateq	r0, #7, pc, lsl #6	; <UNPREDICTABLE>
    1218:	03200000 	teqeq	r0, #0
    121c:	0000050a 	andeq	r0, r0, sl, lsl #10
    1220:	03d20321 	bicseq	r0, r2, #-2080374784	; 0x84000000
    1224:	03220000 	teqeq	r2, #0
    1228:	0000047b 	andeq	r0, r0, fp, ror r4
    122c:	07490323 	strbeq	r0, [r9, -r3, lsr #6]
    1230:	03240000 	teqeq	r4, #0
    1234:	00000640 	andeq	r0, r0, r0, asr #12
    1238:	04e30325 	strbteq	r0, [r3], #805	; 0x325
    123c:	03260000 	teqeq	r6, #0
    1240:	00000787 	andeq	r0, r0, r7, lsl #15
    1244:	04170327 	ldreq	r0, [r7], #-807	; 0xfffffcd9
    1248:	03280000 	teqeq	r8, #0
    124c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    1250:	05700329 	ldrbeq	r0, [r0, #-809]!	; 0xfffffcd7
    1254:	002a0000 	eoreq	r0, sl, r0
    1258:	0004d904 	andeq	sp, r4, r4, lsl #18
    125c:	01d90300 	bicseq	r0, r9, r0, lsl #6
    1260:	00000025 	andeq	r0, r0, r5, lsr #32
    1264:	99060105 	stmdbls	r6, {r0, r2, r8}
    1268:	06000000 	streq	r0, [r0], -r0
    126c:	0000026b 	andeq	r0, r0, fp, ror #4
    1270:	01822a04 	orreq	r2, r2, r4, lsl #20
    1274:	01050000 	mrseq	r0, (UNDEF: 5)
    1278:	00009708 	andeq	r9, r0, r8, lsl #14
    127c:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    1280:	000000f2 	strdeq	r0, [r0], -r2
    1284:	6f070205 	svcvs	0x00070205
    1288:	05000000 	streq	r0, [r0, #-0]
    128c:	00050504 	andeq	r0, r5, r4, lsl #10
    1290:	a7060000 	strge	r0, [r6, -r0]
    1294:	04000001 	streq	r0, [r0], #-1
    1298:	0001a950 	andeq	sl, r1, r0, asr r9
    129c:	07040500 	streq	r0, [r4, -r0, lsl #10]
    12a0:	000000cc 	andeq	r0, r0, ip, asr #1
    12a4:	00050805 	andeq	r0, r5, r5, lsl #16
    12a8:	05000000 	streq	r0, [r0, #-0]
    12ac:	00c70708 	sbceq	r0, r7, r8, lsl #14
    12b0:	04070000 	streq	r0, [r7], #-0
    12b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    12b8:	07040500 	streq	r0, [r4, -r0, lsl #10]
    12bc:	000000d1 	ldrdeq	r0, [r0], -r1
    12c0:	020e0408 	andeq	r0, lr, #8, 8	; 0x8000000
    12c4:	00027a84 	andeq	r7, r2, r4, lsl #21
    12c8:	045f0900 	ldrbeq	r0, [pc], #-2304	; 12d0 <__RW_SIZE__+0xd3c>
    12cc:	86020000 	strhi	r0, [r2], -r0
    12d0:	00000291 	muleq	r0, r1, r2
    12d4:	06010900 	streq	r0, [r1], -r0, lsl #18
    12d8:	87020000 	strhi	r0, [r2, -r0]
    12dc:	00000296 	muleq	r0, r6, r2
    12e0:	07440920 	strbeq	r0, [r4, -r0, lsr #18]
    12e4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    12e8:	000002a6 	andeq	r0, r0, r6, lsr #5
    12ec:	04720980 	ldrbteq	r0, [r2], #-2432	; 0xfffff680
    12f0:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    12f4:	00000296 	muleq	r0, r6, r2
    12f8:	07760aa0 	ldrbeq	r0, [r6, -r0, lsr #21]!
    12fc:	8a020000 	bhi	81304 <__RW_SIZE__+0x80d70>
    1300:	000002ab 	andeq	r0, r0, fp, lsr #5
    1304:	0b0a0100 	bleq	28170c <__RW_SIZE__+0x281178>
    1308:	02000006 	andeq	r0, r0, #6
    130c:	0002968b 	andeq	r9, r2, fp, lsl #13
    1310:	0a012000 	beq	49318 <__RW_SIZE__+0x48d84>
    1314:	000005ab 	andeq	r0, r0, fp, lsr #11
    1318:	02b08c02 	adcseq	r8, r0, #512	; 0x200
    131c:	01800000 	orreq	r0, r0, r0
    1320:	0006150a 	andeq	r1, r6, sl, lsl #10
    1324:	968d0200 	strls	r0, [sp], r0, lsl #4
    1328:	a0000002 	andge	r0, r0, r2
    132c:	07530a01 	ldrbeq	r0, [r3, -r1, lsl #20]
    1330:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1334:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    1338:	1f0a0200 	svcne	0x000a0200
    133c:	02000006 	andeq	r0, r0, #6
    1340:	0002ba8f 	andeq	fp, r2, pc, lsl #21
    1344:	0b022000 	bleq	8934c <__RW_SIZE__+0x88db8>
    1348:	02005049 	andeq	r5, r0, #73	; 0x49
    134c:	0002da90 	muleq	r2, r0, sl
    1350:	0a030000 	beq	c1358 <__RW_SIZE__+0xc0dc4>
    1354:	00000629 	andeq	r0, r0, r9, lsr #12
    1358:	02df9102 	sbcseq	r9, pc, #-2147483648	; 0x80000000
    135c:	03f00000 	mvnseq	r0, #0
    1360:	0005f30a 	andeq	pc, r5, sl, lsl #6
    1364:	f0920200 			; <UNDEFINED> instruction: 0xf0920200
    1368:	00000002 	andeq	r0, r0, r2
    136c:	9e0c000e 	cdpls	0, 0, cr0, cr12, cr14, {0}
    1370:	8a000001 	bhi	137c <__RW_SIZE__+0xde8>
    1374:	0d000002 	stceq	0, cr0, [r0, #-8]
    1378:	0000028a 	andeq	r0, r0, sl, lsl #5
    137c:	04050007 	streq	r0, [r5], #-7
    1380:	0000de07 	andeq	sp, r0, r7, lsl #28
    1384:	027a0e00 	rsbseq	r0, sl, #0, 28
    1388:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    138c:	a6000001 	strge	r0, [r0], -r1
    1390:	0d000002 	stceq	0, cr0, [r0, #-8]
    1394:	0000028a 	andeq	r0, r0, sl, lsl #5
    1398:	7a0e0017 	bvc	3813fc <__RW_SIZE__+0x380e68>
    139c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    13a0:	0000027a 	andeq	r0, r0, sl, ror r2
    13a4:	00027a0e 	andeq	r7, r2, lr, lsl #20
    13a8:	027a0e00 	rsbseq	r0, sl, #0, 28
    13ac:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    13b0:	ca000001 	bgt	13bc <__RW_SIZE__+0xe28>
    13b4:	0d000002 	stceq	0, cr0, [r0, #-8]
    13b8:	0000028a 	andeq	r0, r0, sl, lsl #5
    13bc:	770c0037 	smladxvc	ip, r7, r0, r0
    13c0:	da000001 	ble	13cc <__RW_SIZE__+0xe38>
    13c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    13c8:	0000028a 	andeq	r0, r0, sl, lsl #5
    13cc:	ca0e00ef 	bgt	381790 <__RW_SIZE__+0x3811fc>
    13d0:	0c000002 	stceq	0, cr0, [r0], {2}
    13d4:	0000019e 	muleq	r0, lr, r1
    13d8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13dc:	00028a0f 	andeq	r8, r2, pc, lsl #20
    13e0:	00028300 	andeq	r8, r2, r0, lsl #6
    13e4:	00019e0e 	andeq	r9, r1, lr, lsl #28
    13e8:	067d0600 	ldrbteq	r0, [sp], -r0, lsl #12
    13ec:	93020000 	movwls	r0, #8192	; 0x2000
    13f0:	000001cc 	andeq	r0, r0, ip, asr #3
    13f4:	00019e0c 	andeq	r9, r1, ip, lsl #28
    13f8:	00031000 	andeq	r1, r3, r0
    13fc:	028a0d00 	addeq	r0, sl, #0, 26
    1400:	00030000 	andeq	r0, r3, r0
    1404:	77031810 	smladvc	r3, r0, r8, r1
    1408:	00036703 	andeq	r6, r3, r3, lsl #14
    140c:	4d491100 	stfmie	f1, [r9, #-0]
    1410:	79030052 	stmdbvc	r3, {r1, r4, r6}
    1414:	0002f003 	andeq	pc, r2, r3
    1418:	45110000 	ldrmi	r0, [r1, #-0]
    141c:	0300524d 	movweq	r5, #589	; 0x24d
    1420:	02f0037a 	rscseq	r0, r0, #-402653183	; 0xe8000001
    1424:	12040000 	andne	r0, r4, #0
    1428:	0000066d 	andeq	r0, r0, sp, ror #12
    142c:	f0037b03 			; <UNDEFINED> instruction: 0xf0037b03
    1430:	08000002 	stmdaeq	r0, {r1}
    1434:	0006e012 	andeq	lr, r6, r2, lsl r0
    1438:	037c0300 	cmneq	ip, #0, 6
    143c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1440:	06d0120c 	ldrbeq	r1, [r0], ip, lsl #4
    1444:	7d030000 	stcvc	0, cr0, [r3, #-0]
    1448:	0002f003 	andeq	pc, r2, r3
    144c:	50111000 	andspl	r1, r1, r0
    1450:	7e030052 	mcrvc	0, 0, r0, cr3, cr2, {2}
    1454:	0002f003 	andeq	pc, r2, r3
    1458:	04001400 	streq	r1, [r0], #-1024	; 0xfffffc00
    145c:	00000633 	andeq	r0, r0, r3, lsr r6
    1460:	10037f03 	andne	r7, r3, r3, lsl #30
    1464:	10000003 	andne	r0, r0, r3
    1468:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    146c:	000003d8 	ldrdeq	r0, [r0], -r8
    1470:	4c524311 	mrrcmi	3, 1, r4, r2, cr1
    1474:	03eb0300 	mvneq	r0, #0, 6
    1478:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    147c:	52431100 	subpl	r1, r3, #0, 2
    1480:	ec030048 	stc	0, cr0, [r3], {72}	; 0x48
    1484:	0002f003 	andeq	pc, r2, r3
    1488:	49110400 	ldmdbmi	r1, {sl}
    148c:	03005244 	movweq	r5, #580	; 0x244
    1490:	02f003ed 	rscseq	r0, r0, #-1275068413	; 0xb4000003
    1494:	11080000 	mrsne	r0, (UNDEF: 8)
    1498:	0052444f 	subseq	r4, r2, pc, asr #8
    149c:	f003ee03 			; <UNDEFINED> instruction: 0xf003ee03
    14a0:	0c000002 	stceq	0, cr0, [r0], {2}
    14a4:	0003ac12 	andeq	sl, r3, r2, lsl ip
    14a8:	03ef0300 	mvneq	r0, #0, 6
    14ac:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    14b0:	52421110 	subpl	r1, r2, #16, 2
    14b4:	f0030052 			; <UNDEFINED> instruction: 0xf0030052
    14b8:	0002f003 	andeq	pc, r2, r3
    14bc:	b9121400 	ldmdblt	r2, {sl, ip}
    14c0:	03000007 	movweq	r0, #7
    14c4:	02f003f1 	rscseq	r0, r0, #-1006632957	; 0xc4000003
    14c8:	00180000 	andseq	r0, r8, r0
    14cc:	00069904 	andeq	r9, r6, r4, lsl #18
    14d0:	03f20300 	mvnseq	r0, #0, 6
    14d4:	00000373 	andeq	r0, r0, r3, ror r3
    14d8:	f8032010 			; <UNDEFINED> instruction: 0xf8032010
    14dc:	00042f03 	andeq	r2, r4, r3, lsl #30
    14e0:	07931200 	ldreq	r1, [r3, r0, lsl #4]
    14e4:	fa030000 	blx	c14ec <__RW_SIZE__+0xc0f58>
    14e8:	0002f003 	andeq	pc, r2, r3
    14ec:	07120000 	ldreq	r0, [r2, -r0]
    14f0:	03000004 	movweq	r0, #4
    14f4:	02f003fb 	rscseq	r0, r0, #-335544317	; 0xec000003
    14f8:	12040000 	andne	r0, r4, #0
    14fc:	00000569 	andeq	r0, r0, r9, ror #10
    1500:	2f03fc03 	svccs	0x0003fc03
    1504:	08000004 	stmdaeq	r0, {r2}
    1508:	00060112 	andeq	r0, r6, r2, lsl r1
    150c:	03fd0300 	mvnseq	r0, #0, 6
    1510:	0000019e 	muleq	r0, lr, r1
    1514:	06ca1218 			; <UNDEFINED> instruction: 0x06ca1218
    1518:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    151c:	0002f003 	andeq	pc, r2, r3
    1520:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
    1524:	00000300 	andeq	r0, r0, r0, lsl #6
    1528:	00051704 	andeq	r1, r5, r4, lsl #14
    152c:	03ff0300 	mvnseq	r0, #0, 6
    1530:	000003e4 	andeq	r0, r0, r4, ror #7
    1534:	34032810 	strcc	r2, [r3], #-2064	; 0xfffff7f0
    1538:	0004cb04 	andeq	ip, r4, r4, lsl #22
    153c:	52431100 	subpl	r1, r3, #0, 2
    1540:	04360300 	ldrteq	r0, [r6], #-768	; 0xfffffd00
    1544:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1548:	084f1200 	stmdaeq	pc, {r9, ip}^	; <UNPREDICTABLE>
    154c:	37030000 	strcc	r0, [r3, -r0]
    1550:	0002f004 	andeq	pc, r2, r4
    1554:	43110400 	tstmi	r1, #0, 8
    1558:	03005249 	movweq	r5, #585	; 0x249
    155c:	02f00438 	rscseq	r0, r0, #56, 8	; 0x38000000
    1560:	12080000 	andne	r0, r8, #0
    1564:	000000be 	strheq	r0, [r0], -lr
    1568:	f0043903 			; <UNDEFINED> instruction: 0xf0043903
    156c:	0c000002 	stceq	0, cr0, [r0], {2}
    1570:	00006612 	andeq	r6, r0, r2, lsl r6
    1574:	043a0300 	ldrteq	r0, [sl], #-768	; 0xfffffd00
    1578:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    157c:	00521210 	subseq	r1, r2, r0, lsl r2
    1580:	3b030000 	blcc	c1588 <__RW_SIZE__+0xc0ff4>
    1584:	0002f004 	andeq	pc, r2, r4
    1588:	ae121400 	cfmulsge	mvf1, mvf2, mvf0
    158c:	03000000 	movweq	r0, #0
    1590:	02f0043c 	rscseq	r0, r0, #60, 8	; 0x3c000000
    1594:	12180000 	andsne	r0, r8, #0
    1598:	000000b6 	strheq	r0, [r0], -r6
    159c:	f0043d03 			; <UNDEFINED> instruction: 0xf0043d03
    15a0:	1c000002 	stcne	0, cr0, [r0], {2}
    15a4:	00000e12 	andeq	r0, r0, r2, lsl lr
    15a8:	043e0300 	ldrteq	r0, [lr], #-768	; 0xfffffd00
    15ac:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    15b0:	53431120 	movtpl	r1, #12576	; 0x3120
    15b4:	3f030052 	svccc	0x00030052
    15b8:	0002f004 	andeq	pc, r2, r4
    15bc:	04002400 	streq	r2, [r0], #-1024	; 0xfffffc00
    15c0:	000000fc 	strdeq	r0, [r0], -ip
    15c4:	40044a03 	andmi	r4, r4, r3, lsl #20
    15c8:	05000004 	streq	r0, [r0, #-4]
    15cc:	00a00801 	adceq	r0, r0, r1, lsl #16
    15d0:	37130000 	ldrcc	r0, [r3, -r0]
    15d4:	02000005 	andeq	r0, r0, #5
    15d8:	f8030613 			; <UNDEFINED> instruction: 0xf8030613
    15dc:	14000004 	strne	r0, [r0], #-4
    15e0:	00000421 	andeq	r0, r0, r1, lsr #8
    15e4:	64061302 	strvs	r1, [r6], #-770	; 0xfffffcfe
    15e8:	00000001 	andeq	r0, r0, r1
    15ec:	00049813 	andeq	r9, r4, r3, lsl r8
    15f0:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    15f4:	00051203 	andeq	r1, r5, r3, lsl #4
    15f8:	04211400 	strteq	r1, [r1], #-1024	; 0xfffffc00
    15fc:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    1600:	00016405 	andeq	r6, r1, r5, lsl #8
    1604:	32150000 	andscc	r0, r5, #0
    1608:	01000004 	tsteq	r0, r4
    160c:	00398009 	eorseq	r8, r9, r9
    1610:	00007c08 	andeq	r7, r0, r8, lsl #24
    1614:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1618:	000004a7 	andeq	r0, r0, r7, lsr #9
    161c:	01be2301 			; <UNDEFINED> instruction: 0x01be2301
    1620:	3f010000 	svccc	0x00010000
    1624:	17000005 	strne	r0, [r0, -r5]
    1628:	0079656b 	rsbseq	r6, r9, fp, ror #10
    162c:	01be2701 			; <UNDEFINED> instruction: 0x01be2701
    1630:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1634:	000006e5 	andeq	r0, r0, r5, ror #13
    1638:	01be3001 			; <UNDEFINED> instruction: 0x01be3001
    163c:	39fc0000 	ldmibcc	ip!, {}^	; <UNPREDICTABLE>
    1640:	00660800 	rsbeq	r0, r6, r0, lsl #16
    1644:	9c010000 	stcls	0, cr0, [r1], {-0}
    1648:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    164c:	01006919 	tsteq	r0, r9, lsl r9
    1650:	0001c532 	andeq	ip, r1, r2, lsr r5
    1654:	000ac200 	andeq	ip, sl, r0, lsl #4
    1658:	006b1a00 	rsbeq	r1, fp, r0, lsl #20
    165c:	01c53201 	biceq	r3, r5, r1, lsl #4
    1660:	50010000 	andpl	r0, r1, r0
    1664:	0005231b 	andeq	r2, r5, fp, lsl r3
    1668:	0039fe00 	eorseq	pc, r9, r0, lsl #28
    166c:	00003608 	andeq	r3, r0, r8, lsl #12
    1670:	97360100 	ldrls	r0, [r6, -r0, lsl #2]!
    1674:	1c000005 	stcne	0, cr0, [r0], {5}
    1678:	080039fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
    167c:	00000036 	andeq	r0, r0, r6, lsr r0
    1680:	0005331d 	andeq	r3, r5, sp, lsl r3
    1684:	000ad600 	andeq	sp, sl, r0, lsl #12
    1688:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    168c:	00000523 	andeq	r0, r0, r3, lsr #10
    1690:	08003a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, sp}
    1694:	00000022 	andeq	r0, r0, r2, lsr #32
    1698:	341c3a01 	ldrcc	r3, [ip], #-2561	; 0xfffff5ff
    169c:	2208003a 	andcs	r0, r8, #58	; 0x3a
    16a0:	1d000000 	stcne	0, cr0, [r0, #-0]
    16a4:	00000533 	andeq	r0, r0, r3, lsr r5
    16a8:	00000b62 	andeq	r0, r0, r2, ror #22
    16ac:	1f000000 	svcne	0x00000000
    16b0:	000004fa 	strdeq	r0, [r0], -sl
    16b4:	01be4601 			; <UNDEFINED> instruction: 0x01be4601
    16b8:	d7010000 	strle	r0, [r1, -r0]
    16bc:	17000005 	strne	r0, [r0, -r5]
    16c0:	0079656b 	rsbseq	r6, r9, fp, ror #10
    16c4:	01be4901 			; <UNDEFINED> instruction: 0x01be4901
    16c8:	20000000 	andcs	r0, r0, r0
    16cc:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    16d0:	08003a64 	stmdaeq	r0, {r2, r5, r6, r9, fp, ip, sp}
    16d4:	00000034 	andeq	r0, r0, r4, lsr r0
    16d8:	05f49c01 	ldrbeq	r9, [r4, #3073]!	; 0xc01
    16dc:	cb1d0000 	blgt	7416e4 <__RW_SIZE__+0x741150>
    16e0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	00079818 	andeq	r9, r7, r8, lsl r8
    16ec:	be500100 	rdflts	f0, f0, f0
    16f0:	98000001 	stmdals	r0, {r0}
    16f4:	3c08003a 	stccc	0, cr0, [r8], {58}	; 0x3a
    16f8:	01000000 	mrseq	r0, (UNDEF: 0)
    16fc:	0006409c 	muleq	r6, ip, r0
    1700:	656b1900 	strbvs	r1, [fp, #-2304]!	; 0xfffff700
    1704:	52010079 	andpl	r0, r1, #121	; 0x79
    1708:	000001be 			; <UNDEFINED> instruction: 0x000001be
    170c:	00000cd8 	ldrdeq	r0, [r0], -r8
    1710:	0005bb1e 	andeq	fp, r5, lr, lsl fp
    1714:	003a9a00 	eorseq	r9, sl, r0, lsl #20
    1718:	00003008 	andeq	r3, r0, r8
    171c:	1c530100 	ldfnee	f0, [r3], {-0}
    1720:	08003a9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, fp, ip, sp}
    1724:	00000030 	andeq	r0, r0, r0, lsr r0
    1728:	0005cb1d 	andeq	ip, r5, sp, lsl fp
    172c:	000cec00 	andeq	lr, ip, r0, lsl #24
    1730:	00000000 	andeq	r0, r0, r0
    1734:	0005b021 	andeq	fp, r5, r1, lsr #32
    1738:	d4570100 	ldrble	r0, [r7], #-256	; 0xffffff00
    173c:	3c08003a 	stccc	0, cr0, [r8], {58}	; 0x3a
    1740:	01000000 	mrseq	r0, (UNDEF: 0)
    1744:	0006799c 	muleq	r6, ip, r9
    1748:	05bb1e00 	ldreq	r1, [fp, #3584]!	; 0xe00
    174c:	3ad60000 	bcc	ff581754 <MSP_BASE+0xdf57c754>
    1750:	00300800 	eorseq	r0, r0, r0, lsl #16
    1754:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1758:	003ad61c 	eorseq	sp, sl, ip, lsl r6
    175c:	00003008 	andeq	r3, r0, r8
    1760:	05cb1d00 	strbeq	r1, [fp, #3328]	; 0xd00
    1764:	0d880000 	stceq	0, cr0, [r8]
    1768:	00000000 	andeq	r0, r0, r0
    176c:	07352100 	ldreq	r2, [r5, -r0, lsl #2]!
    1770:	5c010000 	stcpl	0, cr0, [r1], {-0}
    1774:	08003b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, sp}
    1778:	000000f8 	strdeq	r0, [r0], -r8
    177c:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    1780:	65220000 	strvs	r0, [r2, #-0]!
    1784:	5c01006e 	stcpl	0, cr0, [r1], {110}	; 0x6e
    1788:	000001be 			; <UNDEFINED> instruction: 0x000001be
    178c:	00000e43 	andeq	r0, r0, r3, asr #28
    1790:	0004f823 	andeq	pc, r4, r3, lsr #16
    1794:	003b1400 	eorseq	r1, fp, r0, lsl #8
    1798:	00005808 	andeq	r5, r0, r8, lsl #16
    179c:	b97c0100 	ldmdblt	ip!, {r8}^
    17a0:	24000006 	strcs	r0, [r0], #-6
    17a4:	00000505 	andeq	r0, r0, r5, lsl #10
    17a8:	00000e7d 	andeq	r0, r0, sp, ror lr
    17ac:	04f82300 	ldrbteq	r2, [r8], #768	; 0x300
    17b0:	3b200000 	blcc	8017b8 <__RW_SIZE__+0x801224>
    17b4:	00700800 	rsbseq	r0, r0, r0, lsl #16
    17b8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    17bc:	000006d6 	ldrdeq	r0, [r0], -r6
    17c0:	00050524 	andeq	r0, r5, r4, lsr #10
    17c4:	000e9100 	andeq	r9, lr, r0, lsl #2
    17c8:	f8230000 			; <UNDEFINED> instruction: 0xf8230000
    17cc:	24000004 	strcs	r0, [r0], #-4
    17d0:	8808003b 	stmdahi	r8, {r0, r1, r3, r4, r5}
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	0006f37e 	andeq	pc, r6, lr, ror r3	; <UNPREDICTABLE>
    17dc:	05052400 	streq	r2, [r5, #-1024]	; 0xfffffc00
    17e0:	0ea50000 	cdpeq	0, 10, cr0, cr5, cr0, {0}
    17e4:	23000000 	movwcs	r0, #0
    17e8:	000004de 	ldrdeq	r0, [r0], -lr
    17ec:	08003b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, ip, sp}
    17f0:	000000a0 	andeq	r0, r0, r0, lsr #1
    17f4:	070d6e01 	streq	r6, [sp, -r1, lsl #28]
    17f8:	eb250000 	bl	941800 <__RW_SIZE__+0x94126c>
    17fc:	09000004 	stmdbeq	r0, {r2}
    1800:	04de2300 	ldrbeq	r2, [lr], #768	; 0x300
    1804:	3bca0000 	blcc	ff28180c <MSP_BASE+0xdf27c80c>
    1808:	00c80800 	sbceq	r0, r8, r0, lsl #16
    180c:	6f010000 	svcvs	0x00010000
    1810:	00000727 	andeq	r0, r0, r7, lsr #14
    1814:	0004eb25 	andeq	lr, r4, r5, lsr #22
    1818:	23001700 	movwcs	r1, #1792	; 0x700
    181c:	000004de 	ldrdeq	r0, [r0], -lr
    1820:	08003bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp, ip, sp}
    1824:	000000e0 	andeq	r0, r0, r0, ror #1
    1828:	07417001 	strbeq	r7, [r1, -r1]
    182c:	eb250000 	bl	941834 <__RW_SIZE__+0x9412a0>
    1830:	28000004 	stmdacs	r0, {r2}
    1834:	04f81b00 	ldrbteq	r1, [r8], #2816	; 0xb00
    1838:	3bfe0000 	blcc	fff81840 <MSP_BASE+0xdff7c840>
    183c:	00020800 	andeq	r0, r2, r0, lsl #16
    1840:	76010000 	strvc	r0, [r1], -r0
    1844:	0000075b 	andeq	r0, r0, fp, asr r7
    1848:	00050525 	andeq	r0, r5, r5, lsr #10
    184c:	1b000900 	blne	3c54 <__RW_SIZE__+0x36c0>
    1850:	000004f8 	strdeq	r0, [r0], -r8
    1854:	08003c00 	stmdaeq	r0, {sl, fp, ip, sp}
    1858:	00000002 	andeq	r0, r0, r2
    185c:	07757701 	ldrbeq	r7, [r5, -r1, lsl #14]!
    1860:	05250000 	streq	r0, [r5, #-0]!
    1864:	17000005 	strne	r0, [r0, -r5]
    1868:	04f81e00 	ldrbteq	r1, [r8], #3584	; 0xe00
    186c:	3c020000 	stccc	0, cr0, [r2], {-0}
    1870:	00020800 	andeq	r0, r2, r0, lsl #16
    1874:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1878:	00050525 	andeq	r0, r5, r5, lsr #10
    187c:	00002800 	andeq	r2, r0, r0, lsl #16
    1880:	00008226 	andeq	r8, r0, r6, lsr #4
    1884:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    1888:	00000798 	muleq	r0, r8, r7
    188c:	0001be0e 	andeq	fp, r1, lr, lsl #28
    1890:	062e0000 	strteq	r0, [lr], -r0
    1894:	00040000 	andeq	r0, r4, r0
    1898:	0000059c 	muleq	r0, ip, r5
    189c:	01080104 	tsteq	r8, r4, lsl #2
    18a0:	b7010000 	strlt	r0, [r1, -r0]
    18a4:	13000006 	movwne	r0, #6
    18a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    18ac:	1a08003c 	bne	2019a4 <__RW_SIZE__+0x201410>
    18b0:	a6000001 	strge	r0, [r0], -r1
    18b4:	02000005 	andeq	r0, r0, #5
    18b8:	00000421 	andeq	r0, r0, r1, lsr #8
    18bc:	64a80301 	strtvs	r0, [r8], #769	; 0x301
    18c0:	03000001 	movweq	r0, #1
    18c4:	0000064c 	andeq	r0, r0, ip, asr #12
    18c8:	04490372 	strbeq	r0, [r9], #-882	; 0xfffffc8e
    18cc:	03740000 	cmneq	r4, #0
    18d0:	00000589 	andeq	r0, r0, r9, lsl #11
    18d4:	070c0375 	smlsdxeq	ip, r5, r3, r0
    18d8:	03760000 	cmneq	r6, #0
    18dc:	00000729 	andeq	r0, r0, r9, lsr #14
    18e0:	06fa037b 			; <UNDEFINED> instruction: 0x06fa037b
    18e4:	037c0000 	cmneq	ip, #0
    18e8:	00000426 	andeq	r0, r0, r6, lsr #8
    18ec:	06bd037e 			; <UNDEFINED> instruction: 0x06bd037e
    18f0:	037f0000 	cmneq	pc, #0
    18f4:	0000057f 	andeq	r0, r0, pc, ror r5
    18f8:	05a20300 	streq	r0, [r2, #768]!	; 0x300
    18fc:	03010000 	movweq	r0, #4096	; 0x1000
    1900:	000007ad 	andeq	r0, r0, sp, lsr #15
    1904:	05f80302 	ldrbeq	r0, [r8, #770]!	; 0x302
    1908:	03030000 	movweq	r0, #12288	; 0x3000
    190c:	000003fc 	strdeq	r0, [r0], -ip
    1910:	04400304 	strbeq	r0, [r0], #-772	; 0xfffffcfc
    1914:	03050000 	movweq	r0, #20480	; 0x5000
    1918:	0000040c 	andeq	r0, r0, ip, lsl #8
    191c:	06720306 	ldrbteq	r0, [r2], -r6, lsl #6
    1920:	03070000 	movweq	r0, #28672	; 0x7000
    1924:	000004ef 	andeq	r0, r0, pc, ror #9
    1928:	076b0308 	strbeq	r0, [fp, -r8, lsl #6]!
    192c:	03090000 	movweq	r0, #36864	; 0x9000
    1930:	00000597 	muleq	r0, r7, r5
    1934:	0556030a 	ldrbeq	r0, [r6, #-778]	; 0xfffffcf6
    1938:	030b0000 	movweq	r0, #45056	; 0xb000
    193c:	000003e9 	andeq	r0, r0, r9, ror #7
    1940:	05c6030c 	strbeq	r0, [r6, #780]	; 0x30c
    1944:	030d0000 	movweq	r0, #53248	; 0xd000
    1948:	00000485 	andeq	r0, r0, r5, lsl #9
    194c:	0758030e 	ldrbeq	r0, [r8, -lr, lsl #6]
    1950:	030f0000 	movweq	r0, #61440	; 0xf000
    1954:	00000524 	andeq	r0, r0, r4, lsr #10
    1958:	03bf0310 			; <UNDEFINED> instruction: 0x03bf0310
    195c:	03110000 	tsteq	r1, #0
    1960:	0000077b 	andeq	r0, r0, fp, ror r7
    1964:	04c50312 	strbeq	r0, [r5], #786	; 0x312
    1968:	03130000 	tsteq	r3, #0
    196c:	00000397 	muleq	r0, r7, r3
    1970:	04b70314 	ldrteq	r0, [r7], #788	; 0x314
    1974:	03150000 	tsteq	r5, #0
    1978:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    197c:	071c0316 			; <UNDEFINED> instruction: 0x071c0316
    1980:	03170000 	tsteq	r7, #0
    1984:	00000464 	andeq	r0, r0, r4, ror #8
    1988:	05e60318 	strbeq	r0, [r6, #792]!	; 0x318
    198c:	03190000 	tsteq	r9, #0
    1990:	00000687 	andeq	r0, r0, r7, lsl #13
    1994:	0660031a 			; <UNDEFINED> instruction: 0x0660031a
    1998:	031b0000 	tsteq	fp, #0
    199c:	000006d6 	ldrdeq	r0, [r0], -r6
    19a0:	054c031c 	strbeq	r0, [ip, #-796]	; 0xfffffce4
    19a4:	031d0000 	tsteq	sp, #0
    19a8:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    19ac:	05d9031e 	ldrbeq	r0, [r9, #798]	; 0x31e
    19b0:	031f0000 	tsteq	pc, #0
    19b4:	000006a6 	andeq	r0, r0, r6, lsr #13
    19b8:	050a0320 	streq	r0, [sl, #-800]	; 0xfffffce0
    19bc:	03210000 	teqeq	r1, #0
    19c0:	000003d2 	ldrdeq	r0, [r0], -r2
    19c4:	047b0322 	ldrbteq	r0, [fp], #-802	; 0xfffffcde
    19c8:	03230000 	teqeq	r3, #0
    19cc:	00000749 	andeq	r0, r0, r9, asr #14
    19d0:	06400324 	strbeq	r0, [r0], -r4, lsr #6
    19d4:	03250000 	teqeq	r5, #0
    19d8:	000004e3 	andeq	r0, r0, r3, ror #9
    19dc:	07870326 	streq	r0, [r7, r6, lsr #6]
    19e0:	03270000 	teqeq	r7, #0
    19e4:	00000417 	andeq	r0, r0, r7, lsl r4
    19e8:	07be0328 	ldreq	r0, [lr, r8, lsr #6]!
    19ec:	03290000 	teqeq	r9, #0
    19f0:	00000570 	andeq	r0, r0, r0, ror r5
    19f4:	d904002a 	stmdble	r4, {r1, r3, r5}
    19f8:	03000004 	movweq	r0, #4
    19fc:	002501d9 	ldrdeq	r0, [r5], -r9	; <UNPREDICTABLE>
    1a00:	01050000 	mrseq	r0, (UNDEF: 5)
    1a04:	00009906 	andeq	r9, r0, r6, lsl #18
    1a08:	026b0600 	rsbeq	r0, fp, #0, 12
    1a0c:	2a040000 	bcs	101a14 <__RW_SIZE__+0x101480>
    1a10:	00000182 	andeq	r0, r0, r2, lsl #3
    1a14:	97080105 	strls	r0, [r8, -r5, lsl #2]
    1a18:	05000000 	streq	r0, [r0, #-0]
    1a1c:	00f20502 	rscseq	r0, r2, r2, lsl #10
    1a20:	02050000 	andeq	r0, r5, #0
    1a24:	00006f07 	andeq	r6, r0, r7, lsl #30
    1a28:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    1a2c:	00000005 	andeq	r0, r0, r5
    1a30:	0001a706 	andeq	sl, r1, r6, lsl #14
    1a34:	a9500400 	ldmdbge	r0, {sl}^
    1a38:	05000001 	streq	r0, [r0, #-1]
    1a3c:	00cc0704 	sbceq	r0, ip, r4, lsl #14
    1a40:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    1a44:	00000005 	andeq	r0, r0, r5
    1a48:	07080500 	streq	r0, [r8, -r0, lsl #10]
    1a4c:	000000c7 	andeq	r0, r0, r7, asr #1
    1a50:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    1a54:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    1a58:	00d10704 	sbcseq	r0, r1, r4, lsl #14
    1a5c:	04080000 	streq	r0, [r8], #-0
    1a60:	7a84020e 	bvc	fe1022a0 <MSP_BASE+0xde0fd2a0>
    1a64:	09000002 	stmdbeq	r0, {r1}
    1a68:	0000045f 	andeq	r0, r0, pc, asr r4
    1a6c:	02918602 	addseq	r8, r1, #2097152	; 0x200000
    1a70:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a74:	00000601 	andeq	r0, r0, r1, lsl #12
    1a78:	02968702 	addseq	r8, r6, #524288	; 0x80000
    1a7c:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    1a80:	00000744 	andeq	r0, r0, r4, asr #14
    1a84:	02a68802 	adceq	r8, r6, #131072	; 0x20000
    1a88:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    1a8c:	00000472 	andeq	r0, r0, r2, ror r4
    1a90:	02968902 	addseq	r8, r6, #32768	; 0x8000
    1a94:	0aa00000 	beq	fe801a9c <MSP_BASE+0xde7fca9c>
    1a98:	00000776 	andeq	r0, r0, r6, ror r7
    1a9c:	02ab8a02 	adceq	r8, fp, #8192	; 0x2000
    1aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa4:	00060b0a 	andeq	r0, r6, sl, lsl #22
    1aa8:	968b0200 	strls	r0, [fp], r0, lsl #4
    1aac:	20000002 	andcs	r0, r0, r2
    1ab0:	05ab0a01 	streq	r0, [fp, #2561]!	; 0xa01
    1ab4:	8c020000 	stchi	0, cr0, [r2], {-0}
    1ab8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    1abc:	150a0180 	strne	r0, [sl, #-384]	; 0xfffffe80
    1ac0:	02000006 	andeq	r0, r0, #6
    1ac4:	0002968d 	andeq	r9, r2, sp, lsl #13
    1ac8:	0a01a000 	beq	69ad0 <__RW_SIZE__+0x6953c>
    1acc:	00000753 	andeq	r0, r0, r3, asr r7
    1ad0:	02b58e02 	adcseq	r8, r5, #2, 28
    1ad4:	02000000 	andeq	r0, r0, #0
    1ad8:	00061f0a 	andeq	r1, r6, sl, lsl #30
    1adc:	ba8f0200 	blt	fe3c22e4 <MSP_BASE+0xde3bd2e4>
    1ae0:	20000002 	andcs	r0, r0, r2
    1ae4:	50490b02 	subpl	r0, r9, r2, lsl #22
    1ae8:	da900200 	ble	fe4022f0 <MSP_BASE+0xde3fd2f0>
    1aec:	00000002 	andeq	r0, r0, r2
    1af0:	06290a03 	strteq	r0, [r9], -r3, lsl #20
    1af4:	91020000 	mrsls	r0, (UNDEF: 2)
    1af8:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1afc:	f30a03f0 	vcge.u8	q0, q13, q8
    1b00:	02000005 	andeq	r0, r0, #5
    1b04:	0002f092 	muleq	r2, r2, r0
    1b08:	000e0000 	andeq	r0, lr, r0
    1b0c:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b10:	00028a00 	andeq	r8, r2, r0, lsl #20
    1b14:	028a0d00 	addeq	r0, sl, #0, 26
    1b18:	00070000 	andeq	r0, r7, r0
    1b1c:	de070405 	cdple	4, 0, cr0, cr7, cr5, {0}
    1b20:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1b24:	0000027a 	andeq	r0, r0, sl, ror r2
    1b28:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b2c:	0002a600 	andeq	sl, r2, r0, lsl #12
    1b30:	028a0d00 	addeq	r0, sl, #0, 26
    1b34:	00170000 	andseq	r0, r7, r0
    1b38:	00027a0e 	andeq	r7, r2, lr, lsl #20
    1b3c:	027a0e00 	rsbseq	r0, sl, #0, 28
    1b40:	7a0e0000 	bvc	381b48 <__RW_SIZE__+0x3815b4>
    1b44:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1b48:	0000027a 	andeq	r0, r0, sl, ror r2
    1b4c:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b50:	0002ca00 	andeq	ip, r2, r0, lsl #20
    1b54:	028a0d00 	addeq	r0, sl, #0, 26
    1b58:	00370000 	eorseq	r0, r7, r0
    1b5c:	0001770c 	andeq	r7, r1, ip, lsl #14
    1b60:	0002da00 	andeq	sp, r2, r0, lsl #20
    1b64:	028a0d00 	addeq	r0, sl, #0, 26
    1b68:	00ef0000 	rsceq	r0, pc, r0
    1b6c:	0002ca0e 	andeq	ip, r2, lr, lsl #20
    1b70:	019e0c00 	orrseq	r0, lr, r0, lsl #24
    1b74:	02f00000 	rscseq	r0, r0, #0
    1b78:	8a0f0000 	bhi	3c1b80 <__RW_SIZE__+0x3c15ec>
    1b7c:	83000002 	movwhi	r0, #2
    1b80:	9e0e0002 	cdpls	0, 0, cr0, cr14, cr2, {0}
    1b84:	06000001 	streq	r0, [r0], -r1
    1b88:	0000067d 	andeq	r0, r0, sp, ror r6
    1b8c:	01cc9302 	biceq	r9, ip, r2, lsl #6
    1b90:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    1b94:	10000001 	andne	r0, r0, r1
    1b98:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b9c:	0000028a 	andeq	r0, r0, sl, lsl #5
    1ba0:	18100003 	ldmdane	r0, {r0, r1}
    1ba4:	67037703 	strvs	r7, [r3, -r3, lsl #14]
    1ba8:	11000003 	tstne	r0, r3
    1bac:	00524d49 	subseq	r4, r2, r9, asr #26
    1bb0:	f0037903 			; <UNDEFINED> instruction: 0xf0037903
    1bb4:	00000002 	andeq	r0, r0, r2
    1bb8:	524d4511 	subpl	r4, sp, #71303168	; 0x4400000
    1bbc:	037a0300 	cmneq	sl, #0, 6
    1bc0:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bc4:	066d1204 	strbteq	r1, [sp], -r4, lsl #4
    1bc8:	7b030000 	blvc	c1bd0 <__RW_SIZE__+0xc163c>
    1bcc:	0002f003 	andeq	pc, r2, r3
    1bd0:	e0120800 	ands	r0, r2, r0, lsl #16
    1bd4:	03000006 	movweq	r0, #6
    1bd8:	02f0037c 	rscseq	r0, r0, #124, 6	; 0xf0000001
    1bdc:	120c0000 	andne	r0, ip, #0
    1be0:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1be4:	f0037d03 			; <UNDEFINED> instruction: 0xf0037d03
    1be8:	10000002 	andne	r0, r0, r2
    1bec:	00525011 	subseq	r5, r2, r1, lsl r0
    1bf0:	f0037e03 			; <UNDEFINED> instruction: 0xf0037e03
    1bf4:	14000002 	strne	r0, [r0], #-2
    1bf8:	06330400 	ldrteq	r0, [r3], -r0, lsl #8
    1bfc:	7f030000 	svcvc	0x00030000
    1c00:	00031003 	andeq	r1, r3, r3
    1c04:	031c1000 	tsteq	ip, #0
    1c08:	03d803e9 	bicseq	r0, r8, #-1543503869	; 0xa4000003
    1c0c:	43110000 	tstmi	r1, #0
    1c10:	03004c52 	movweq	r4, #3154	; 0xc52
    1c14:	02f003eb 	rscseq	r0, r0, #-1409286141	; 0xac000003
    1c18:	11000000 	mrsne	r0, (UNDEF: 0)
    1c1c:	00485243 	subeq	r5, r8, r3, asr #4
    1c20:	f003ec03 			; <UNDEFINED> instruction: 0xf003ec03
    1c24:	04000002 	streq	r0, [r0], #-2
    1c28:	52444911 	subpl	r4, r4, #278528	; 0x44000
    1c2c:	03ed0300 	mvneq	r0, #0, 6
    1c30:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c34:	444f1108 	strbmi	r1, [pc], #-264	; 1c3c <__RW_SIZE__+0x16a8>
    1c38:	ee030052 	mcr	0, 0, r0, cr3, cr2, {2}
    1c3c:	0002f003 	andeq	pc, r2, r3
    1c40:	ac120c00 	ldcge	12, cr0, [r2], {-0}
    1c44:	03000003 	movweq	r0, #3
    1c48:	02f003ef 	rscseq	r0, r0, #-1140850685	; 0xbc000003
    1c4c:	11100000 	tstne	r0, r0
    1c50:	00525242 	subseq	r5, r2, r2, asr #4
    1c54:	f003f003 			; <UNDEFINED> instruction: 0xf003f003
    1c58:	14000002 	strne	r0, [r0], #-2
    1c5c:	0007b912 	andeq	fp, r7, r2, lsl r9
    1c60:	03f10300 	mvnseq	r0, #0, 6
    1c64:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c68:	99040018 	stmdbls	r4, {r3, r4}
    1c6c:	03000006 	movweq	r0, #6
    1c70:	037303f2 	cmneq	r3, #-939524093	; 0xc8000003
    1c74:	20100000 	andscs	r0, r0, r0
    1c78:	2f03f803 	svccs	0x0003f803
    1c7c:	12000004 	andne	r0, r0, #4
    1c80:	00000793 	muleq	r0, r3, r7
    1c84:	f003fa03 			; <UNDEFINED> instruction: 0xf003fa03
    1c88:	00000002 	andeq	r0, r0, r2
    1c8c:	00040712 	andeq	r0, r4, r2, lsl r7
    1c90:	03fb0300 	mvnseq	r0, #0, 6
    1c94:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c98:	05691204 	strbeq	r1, [r9, #-516]!	; 0xfffffdfc
    1c9c:	fc030000 	stc2	0, cr0, [r3], {-0}
    1ca0:	00042f03 	andeq	r2, r4, r3, lsl #30
    1ca4:	01120800 	tsteq	r2, r0, lsl #16
    1ca8:	03000006 	movweq	r0, #6
    1cac:	019e03fd 			; <UNDEFINED> instruction: 0x019e03fd
    1cb0:	12180000 	andsne	r0, r8, #0
    1cb4:	000006ca 	andeq	r0, r0, sl, asr #13
    1cb8:	f003fe03 			; <UNDEFINED> instruction: 0xf003fe03
    1cbc:	1c000002 	stcne	0, cr0, [r0], {2}
    1cc0:	03000e00 	movweq	r0, #3584	; 0xe00
    1cc4:	17040000 	strne	r0, [r4, -r0]
    1cc8:	03000005 	movweq	r0, #5
    1ccc:	03e403ff 	mvneq	r0, #-67108861	; 0xfc000003
    1cd0:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    1cd4:	cb043403 	blgt	10ece8 <__RW_SIZE__+0x10e754>
    1cd8:	11000004 	tstne	r0, r4
    1cdc:	03005243 	movweq	r5, #579	; 0x243
    1ce0:	02f00436 	rscseq	r0, r0, #905969664	; 0x36000000
    1ce4:	12000000 	andne	r0, r0, #0
    1ce8:	0000084f 	andeq	r0, r0, pc, asr #16
    1cec:	f0043703 			; <UNDEFINED> instruction: 0xf0043703
    1cf0:	04000002 	streq	r0, [r0], #-2
    1cf4:	52494311 	subpl	r4, r9, #1140850688	; 0x44000000
    1cf8:	04380300 	ldrteq	r0, [r8], #-768	; 0xfffffd00
    1cfc:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d00:	00be1208 	adcseq	r1, lr, r8, lsl #4
    1d04:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    1d08:	0002f004 	andeq	pc, r2, r4
    1d0c:	66120c00 	ldrvs	r0, [r2], -r0, lsl #24
    1d10:	03000000 	movweq	r0, #0
    1d14:	02f0043a 	rscseq	r0, r0, #973078528	; 0x3a000000
    1d18:	12100000 	andsne	r0, r0, #0
    1d1c:	00000052 	andeq	r0, r0, r2, asr r0
    1d20:	f0043b03 			; <UNDEFINED> instruction: 0xf0043b03
    1d24:	14000002 	strne	r0, [r0], #-2
    1d28:	0000ae12 	andeq	sl, r0, r2, lsl lr
    1d2c:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
    1d30:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d34:	00b61218 	adcseq	r1, r6, r8, lsl r2
    1d38:	3d030000 	stccc	0, cr0, [r3, #-0]
    1d3c:	0002f004 	andeq	pc, r2, r4
    1d40:	0e121c00 	cdpeq	12, 1, cr1, cr2, cr0, {0}
    1d44:	03000000 	movweq	r0, #0
    1d48:	02f0043e 	rscseq	r0, r0, #1040187392	; 0x3e000000
    1d4c:	11200000 	teqne	r0, r0
    1d50:	00525343 	subseq	r5, r2, r3, asr #6
    1d54:	f0043f03 			; <UNDEFINED> instruction: 0xf0043f03
    1d58:	24000002 	strcs	r0, [r0], #-2
    1d5c:	00fc0400 	rscseq	r0, ip, r0, lsl #8
    1d60:	4a030000 	bmi	c1d68 <__RW_SIZE__+0xc17d4>
    1d64:	00044004 	andeq	r4, r4, r4
    1d68:	08010500 	stmdaeq	r1, {r8, sl}
    1d6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    1d70:	00080513 	andeq	r0, r8, r3, lsl r5
    1d74:	be110100 	muflts	f0, f1, f0
    1d78:	01000001 	tsteq	r0, r1
    1d7c:	00053714 	andeq	r3, r5, r4, lsl r7
    1d80:	06130200 	ldreq	r0, [r3], -r0, lsl #4
    1d84:	00050403 	andeq	r0, r5, r3, lsl #8
    1d88:	04211500 	strteq	r1, [r1], #-1280	; 0xfffffb00
    1d8c:	13020000 	movwne	r0, #8192	; 0x2000
    1d90:	00016406 	andeq	r6, r1, r6, lsl #8
    1d94:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
    1d98:	02000004 	andeq	r0, r0, #4
    1d9c:	1e0305de 	mcrne	5, 0, r0, cr3, cr14, {6}
    1da0:	15000005 	strne	r0, [r0, #-5]
    1da4:	00000421 	andeq	r0, r0, r1, lsr #8
    1da8:	6405de02 	strvs	sp, [r5], #-3586	; 0xfffff1fe
    1dac:	00000001 	andeq	r0, r0, r1
    1db0:	00081514 	andeq	r1, r8, r4, lsl r5
    1db4:	05eb0200 	strbeq	r0, [fp, #512]!	; 0x200
    1db8:	00053803 	andeq	r3, r5, r3, lsl #16
    1dbc:	04211500 	strteq	r1, [r1], #-1280	; 0xfffffb00
    1dc0:	eb020000 	bl	81dc8 <__RW_SIZE__+0x81834>
    1dc4:	00016405 	andeq	r6, r1, r5, lsl #8
    1dc8:	f7160000 			; <UNDEFINED> instruction: 0xf7160000
    1dcc:	01000007 	tsteq	r0, r7
    1dd0:	003c0803 	eorseq	r0, ip, r3, lsl #16
    1dd4:	00004e08 	andeq	r4, r0, r8, lsl #28
    1dd8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    1ddc:	000004de 	ldrdeq	r0, [r0], -lr
    1de0:	08003c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, sp}
    1de4:	00000012 	andeq	r0, r0, r2, lsl r0
    1de8:	e1189c01 	tst	r8, r1, lsl #24
    1dec:	01000007 	tsteq	r0, r7
    1df0:	003c6c16 	eorseq	r6, ip, r6, lsl ip
    1df4:	00001408 	andeq	r1, r0, r8, lsl #8
    1df8:	7d9c0100 	ldfvcs	f0, [ip]
    1dfc:	19000005 	stmdbne	r0, {r0, r2}
    1e00:	000004de 	ldrdeq	r0, [r0], -lr
    1e04:	08003c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip, sp}
    1e08:	0000000c 	andeq	r0, r0, ip
    1e0c:	1a001801 	bne	7e18 <__RW_SIZE__+0x7884>
    1e10:	000007cc 	andeq	r0, r0, ip, asr #15
    1e14:	01be1b01 			; <UNDEFINED> instruction: 0x01be1b01
    1e18:	3c800000 	stccc	0, cr0, [r0], {0}
    1e1c:	00160800 	andseq	r0, r6, r0, lsl #16
    1e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e24:	000005af 	andeq	r0, r0, pc, lsr #11
    1e28:	01006b1b 	tsteq	r0, fp, lsl fp
    1e2c:	0001be1d 	andeq	fp, r1, sp, lsl lr
    1e30:	04de1900 	ldrbeq	r1, [lr], #2304	; 0x900
    1e34:	3c800000 	stccc	0, cr0, [r0], {0}
    1e38:	00100800 	andseq	r0, r0, r0, lsl #16
    1e3c:	21010000 	mrscs	r0, (UNDEF: 1)
    1e40:	08251800 	stmdaeq	r5!, {fp, ip}
    1e44:	27010000 	strcs	r0, [r1, -r0]
    1e48:	08003c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip, sp}
    1e4c:	0000008a 	andeq	r0, r0, sl, lsl #1
    1e50:	06209c01 	strteq	r9, [r0], -r1, lsl #24
    1e54:	651c0000 	ldrvs	r0, [ip, #-0]
    1e58:	2701006e 	strcs	r0, [r1, -lr, rrx]
    1e5c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    1e60:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    1e64:	00051e1d 	andeq	r1, r5, sp, lsl lr
    1e68:	003c9c00 	eorseq	r9, ip, r0, lsl #24
    1e6c:	00001008 	andeq	r1, r0, r8
    1e70:	ef3a0100 	svc	0x003a0100
    1e74:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1e78:	0000052b 	andeq	r0, r0, fp, lsr #10
    1e7c:	00000edb 	ldrdeq	r0, [r0], -fp
    1e80:	04ea1f00 	strbteq	r1, [sl], #3840	; 0xf00
    1e84:	3d040000 	stccc	0, cr0, [r4, #-0]
    1e88:	00f80800 	rscseq	r0, r8, r0, lsl #16
    1e8c:	34010000 	strcc	r0, [r1], #-0
    1e90:	00000609 	andeq	r0, r0, r9, lsl #12
    1e94:	0004f720 	andeq	pc, r4, r0, lsr #14
    1e98:	21001700 	tstcs	r0, r0, lsl #14
    1e9c:	00000504 	andeq	r0, r0, r4, lsl #10
    1ea0:	08003d1a 	stmdaeq	r0, {r1, r3, r4, r8, sl, fp, ip, sp}
    1ea4:	00000002 	andeq	r0, r0, r2
    1ea8:	11203501 	teqne	r0, r1, lsl #10
    1eac:	17000005 	strne	r0, [r0, -r5]
    1eb0:	82220000 	eorhi	r0, r2, #0
    1eb4:	02000000 	andeq	r0, r0, #0
    1eb8:	062c06ce 	strteq	r0, [ip], -lr, asr #13
    1ebc:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    1ec0:	00000001 	andeq	r0, r0, r1
    1ec4:	0000282a 	andeq	r2, r0, sl, lsr #16
    1ec8:	078d0004 	streq	r0, [sp, r4]
    1ecc:	01040000 	mrseq	r0, (UNDEF: 4)
    1ed0:	00000108 	andeq	r0, r0, r8, lsl #2
    1ed4:	00092b01 	andeq	r2, r9, r1, lsl #22
    1ed8:	00001300 	andeq	r1, r0, r0, lsl #6
    1edc:	003d2400 	eorseq	r2, sp, r0, lsl #8
    1ee0:	0030a008 	eorseq	sl, r0, r8
    1ee4:	0006b100 	andeq	fp, r6, r0, lsl #2
    1ee8:	06010200 	streq	r0, [r1], -r0, lsl #4
    1eec:	00000099 	muleq	r0, r9, r0
    1ef0:	97080102 	strls	r0, [r8, -r2, lsl #2]
    1ef4:	02000000 	andeq	r0, r0, #0
    1ef8:	00f20502 	rscseq	r0, r2, r2, lsl #10
    1efc:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    1f00:	02000002 	andeq	r0, r0, #2
    1f04:	00004536 	andeq	r4, r0, r6, lsr r5
    1f08:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1f0c:	0000006f 	andeq	r0, r0, pc, rrx
    1f10:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
    1f14:	03000000 	movweq	r0, #0
    1f18:	000001a7 	andeq	r0, r0, r7, lsr #3
    1f1c:	005e5002 	subseq	r5, lr, r2
    1f20:	04020000 	streq	r0, [r2], #-0
    1f24:	0000cc07 	andeq	ip, r0, r7, lsl #24
    1f28:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	c7070802 	strgt	r0, [r7, -r2, lsl #16]
    1f34:	04000000 	streq	r0, [r0], #-0
    1f38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f3c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1f40:	0000d107 	andeq	sp, r0, r7, lsl #2
    1f44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1f48:	000000de 	ldrdeq	r0, [r0], -lr
    1f4c:	00005305 	andeq	r5, r0, r5, lsl #6
    1f50:	003a0500 	eorseq	r0, sl, r0, lsl #10
    1f54:	1c060000 	stcne	0, cr0, [r6], {-0}
    1f58:	f703e903 			; <UNDEFINED> instruction: 0xf703e903
    1f5c:	07000000 	streq	r0, [r0, -r0]
    1f60:	004c5243 	subeq	r5, ip, r3, asr #4
    1f64:	8803eb03 	stmdahi	r3, {r0, r1, r8, r9, fp, sp, lr, pc}
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	48524307 	ldmdami	r2, {r0, r1, r2, r8, r9, lr}^
    1f70:	03ec0300 	mvneq	r0, #0, 6
    1f74:	00000088 	andeq	r0, r0, r8, lsl #1
    1f78:	44490704 	strbmi	r0, [r9], #-1796	; 0xfffff8fc
    1f7c:	ed030052 	stc	0, cr0, [r3, #-328]	; 0xfffffeb8
    1f80:	00008803 	andeq	r8, r0, r3, lsl #16
    1f84:	4f070800 	svcmi	0x00070800
    1f88:	03005244 	movweq	r5, #580	; 0x244
    1f8c:	008803ee 	addeq	r0, r8, lr, ror #7
    1f90:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    1f94:	000003ac 	andeq	r0, r0, ip, lsr #7
    1f98:	8803ef03 	stmdahi	r3, {r0, r1, r8, r9, sl, fp, sp, lr, pc}
    1f9c:	10000000 	andne	r0, r0, r0
    1fa0:	52524207 	subspl	r4, r2, #1879048192	; 0x70000000
    1fa4:	03f00300 	mvnseq	r0, #0, 6
    1fa8:	00000088 	andeq	r0, r0, r8, lsl #1
    1fac:	07b90814 			; <UNDEFINED> instruction: 0x07b90814
    1fb0:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1fb4:	00008803 	andeq	r8, r0, r3, lsl #16
    1fb8:	09001800 	stmdbeq	r0, {fp, ip}
    1fbc:	00000699 	muleq	r0, r9, r6
    1fc0:	9203f203 	andls	pc, r3, #805306368	; 0x30000000
    1fc4:	06000000 	streq	r0, [r0], -r0
    1fc8:	04340328 	ldrteq	r0, [r4], #-808	; 0xfffffcd8
    1fcc:	0000018e 	andeq	r0, r0, lr, lsl #3
    1fd0:	00524307 	subseq	r4, r2, r7, lsl #6
    1fd4:	88043603 	stmdahi	r4, {r0, r1, r9, sl, ip, sp}
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	00084f08 	andeq	r4, r8, r8, lsl #30
    1fe0:	04370300 	ldrteq	r0, [r7], #-768	; 0xfffffd00
    1fe4:	00000088 	andeq	r0, r0, r8, lsl #1
    1fe8:	49430704 	stmdbmi	r3, {r2, r8, r9, sl}^
    1fec:	38030052 	stmdacc	r3, {r1, r4, r6}
    1ff0:	00008804 	andeq	r8, r0, r4, lsl #16
    1ff4:	be080800 	cdplt	8, 0, cr0, cr8, cr0, {0}
    1ff8:	03000000 	movweq	r0, #0
    1ffc:	00880439 	addeq	r0, r8, r9, lsr r4
    2000:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    2004:	00000066 	andeq	r0, r0, r6, rrx
    2008:	88043a03 	stmdahi	r4, {r0, r1, r9, fp, ip, sp}
    200c:	10000000 	andne	r0, r0, r0
    2010:	00005208 	andeq	r5, r0, r8, lsl #4
    2014:	043b0300 	ldrteq	r0, [fp], #-768	; 0xfffffd00
    2018:	00000088 	andeq	r0, r0, r8, lsl #1
    201c:	00ae0814 	adceq	r0, lr, r4, lsl r8
    2020:	3c030000 	stccc	0, cr0, [r3], {-0}
    2024:	00008804 	andeq	r8, r0, r4, lsl #16
    2028:	b6081800 	strlt	r1, [r8], -r0, lsl #16
    202c:	03000000 	movweq	r0, #0
    2030:	0088043d 	addeq	r0, r8, sp, lsr r4
    2034:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    2038:	0000000e 	andeq	r0, r0, lr
    203c:	88043e03 	stmdahi	r4, {r0, r1, r9, sl, fp, ip, sp}
    2040:	20000000 	andcs	r0, r0, r0
    2044:	52534307 	subspl	r4, r3, #469762048	; 0x1c000000
    2048:	043f0300 	ldrteq	r0, [pc], #-768	; 2050 <__RW_SIZE__+0x1abc>
    204c:	00000088 	andeq	r0, r0, r8, lsl #1
    2050:	fc090024 	stc2	0, cr0, [r9], {36}	; 0x24
    2054:	03000000 	movweq	r0, #0
    2058:	0103044a 	tsteq	r3, sl, asr #8
    205c:	24060000 	strcs	r0, [r6], #-0
    2060:	8c048803 	stchi	8, cr8, [r4], {3}
    2064:	07000002 	streq	r0, [r0, -r2]
    2068:	00315243 	eorseq	r5, r1, r3, asr #4
    206c:	8d048a03 	vstrhi	s16, [r4, #-12]
    2070:	00000000 	andeq	r0, r0, r0
    2074:	00060108 	andeq	r0, r6, r8, lsl #2
    2078:	048b0300 	streq	r0, [fp], #768	; 0x300
    207c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2080:	52430702 	subpl	r0, r3, #524288	; 0x80000
    2084:	8c030032 	stchi	0, cr0, [r3], {50}	; 0x32
    2088:	00008d04 	andeq	r8, r0, r4, lsl #26
    208c:	5d080400 	cfstrspl	mvf0, [r8, #-0]
    2090:	03000009 	movweq	r0, #9
    2094:	003a048d 	eorseq	r0, sl, sp, lsl #9
    2098:	07060000 	streq	r0, [r6, -r0]
    209c:	03005253 	movweq	r5, #595	; 0x253
    20a0:	008d048e 	addeq	r0, sp, lr, lsl #9
    20a4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    20a8:	0000060b 	andeq	r0, r0, fp, lsl #12
    20ac:	3a048f03 	bcc	125cc0 <__RW_SIZE__+0x12572c>
    20b0:	0a000000 	beq	20b8 <__RW_SIZE__+0x1b24>
    20b4:	00524407 	subseq	r4, r2, r7, lsl #8
    20b8:	8d049003 	stchi	0, cr9, [r4, #-12]
    20bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    20c0:	00061508 	andeq	r1, r6, r8, lsl #10
    20c4:	04910300 	ldreq	r0, [r1], #768	; 0x300
    20c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    20cc:	094c080e 	stmdbeq	ip, {r1, r2, r3, fp}^
    20d0:	92030000 	andls	r0, r3, #0
    20d4:	00008d04 	andeq	r8, r0, r4, lsl #26
    20d8:	1f081000 	svcne	0x00081000
    20dc:	03000006 	movweq	r0, #6
    20e0:	003a0493 	mlaseq	sl, r3, r4, r0
    20e4:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    20e8:	00000869 	andeq	r0, r0, r9, ror #16
    20ec:	8d049403 	cfstrshi	mvf9, [r4, #-12]
    20f0:	14000000 	strne	r0, [r0], #-0
    20f4:	00062908 	andeq	r2, r6, r8, lsl #18
    20f8:	04950300 	ldreq	r0, [r5], #768	; 0x300
    20fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2100:	08620816 	stmdaeq	r2!, {r1, r2, r4, fp}^
    2104:	96030000 	strls	r0, [r3], -r0
    2108:	00008d04 	andeq	r8, r0, r4, lsl #26
    210c:	67081800 	strvs	r1, [r8, -r0, lsl #16]
    2110:	03000009 	movweq	r0, #9
    2114:	003a0497 	mlaseq	sl, r7, r4, r0
    2118:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    211c:	0000084c 	andeq	r0, r0, ip, asr #16
    2120:	8d049803 	stchi	8, cr9, [r4, #-12]
    2124:	1c000000 	stcne	0, cr0, [r0], {-0}
    2128:	00097108 	andeq	r7, r9, r8, lsl #2
    212c:	04990300 	ldreq	r0, [r9], #768	; 0x300
    2130:	0000003a 	andeq	r0, r0, sl, lsr r0
    2134:	0931081e 	ldmdbeq	r1!, {r1, r2, r3, r4, fp}
    2138:	9a030000 	bls	c2140 <__RW_SIZE__+0xc1bac>
    213c:	00008d04 	andeq	r8, r0, r4, lsl #26
    2140:	7b082000 	blvc	20a148 <__RW_SIZE__+0x209bb4>
    2144:	03000009 	movweq	r0, #9
    2148:	003a049b 	mlaseq	sl, fp, r4, r0
    214c:	00220000 	eoreq	r0, r2, r0
    2150:	00091f09 	andeq	r1, r9, r9, lsl #30
    2154:	049c0300 	ldreq	r0, [ip], #768	; 0x300
    2158:	0000019a 	muleq	r0, sl, r1
    215c:	a0080102 	andge	r0, r8, r2, lsl #2
    2160:	0a000000 	beq	2168 <__RW_SIZE__+0x1bd4>
    2164:	f023010c 			; <UNDEFINED> instruction: 0xf023010c
    2168:	0b000002 	bleq	2178 <__RW_SIZE__+0x1be4>
    216c:	00000885 	andeq	r0, r0, r5, lsl #17
    2170:	00452501 	subeq	r2, r5, r1, lsl #10
    2174:	0b000000 	bleq	217c <__RW_SIZE__+0x1be8>
    2178:	000008d4 	ldrdeq	r0, [r0], -r4
    217c:	00452601 	subeq	r2, r5, r1, lsl #12
    2180:	0c020000 	stceq	0, cr0, [r2], {-0}
    2184:	00726964 	rsbseq	r6, r2, r4, ror #18
    2188:	002c2701 	eoreq	r2, ip, r1, lsl #14
    218c:	0b040000 	bleq	102194 <__RW_SIZE__+0x101c00>
    2190:	000008ee 	andeq	r0, r0, lr, ror #17
    2194:	00452801 	subeq	r2, r5, r1, lsl #16
    2198:	0b060000 	bleq	1821a0 <__RW_SIZE__+0x181c0c>
    219c:	000008cc 	andeq	r0, r0, ip, asr #17
    21a0:	00452901 	subeq	r2, r5, r1, lsl #18
    21a4:	0b080000 	bleq	2021ac <__RW_SIZE__+0x201c18>
    21a8:	0000088b 	andeq	r0, r0, fp, lsl #17
    21ac:	00452a01 	subeq	r2, r5, r1, lsl #20
    21b0:	000a0000 	andeq	r0, sl, r0
    21b4:	00090903 	andeq	r0, r9, r3, lsl #18
    21b8:	9f2b0100 	svcls	0x002b0100
    21bc:	0d000002 	stceq	0, cr0, [r0, #-8]
    21c0:	00000893 	muleq	r0, r3, r8
    21c4:	13013d01 	movwne	r3, #7425	; 0x1d01
    21c8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    21cc:	00000dd5 	ldrdeq	r0, [r0], -r5
    21d0:	002c3d01 	eoreq	r3, ip, r1, lsl #26
    21d4:	0d000000 	stceq	0, cr0, [r0, #-0]
    21d8:	0000135a 	andeq	r1, r0, sl, asr r3
    21dc:	33015d01 	movwcc	r5, #7425	; 0x1d01
    21e0:	0f000003 	svceq	0x00000003
    21e4:	0100736d 	tsteq	r0, sp, ror #6
    21e8:	0000735d 	andeq	r7, r0, sp, asr r3
    21ec:	00691000 	rsbeq	r1, r9, r0
    21f0:	03335f01 	teqeq	r3, #1, 30
    21f4:	05000000 	streq	r0, [r0, #-0]
    21f8:	00000073 	andeq	r0, r0, r3, ror r0
    21fc:	00099211 	andeq	r9, r9, r1, lsl r2
    2200:	01760100 	cmneq	r6, r0, lsl #2
    2204:	0000035b 	andeq	r0, r0, fp, asr r3
    2208:	0009010e 	andeq	r0, r9, lr, lsl #2
    220c:	2c760100 	ldfcse	f0, [r6], #-0
    2210:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2214:	00000985 	andeq	r0, r0, r5, lsl #19
    2218:	00457601 	subeq	r7, r5, r1, lsl #12
    221c:	12000000 	andne	r0, r0, #0
    2220:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    2224:	1301d701 	movwne	sp, #5889	; 0x1701
    2228:	0000083d 	andeq	r0, r0, sp, lsr r8
    222c:	01010601 	tsteq	r1, r1, lsl #12
    2230:	0009d411 	andeq	sp, r9, r1, lsl r4
    2234:	01ed0100 	mvneq	r0, r0, lsl #2
    2238:	0000038b 	andeq	r0, r0, fp, lsl #7
    223c:	0100780f 	tsteq	r0, pc, lsl #16
    2240:	000045ed 	andeq	r4, r0, sp, ror #11
    2244:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    2248:	0045ed01 	subeq	lr, r5, r1, lsl #26
    224c:	12000000 	andne	r0, r0, #0
    2250:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    2254:	14016d01 	strne	r6, [r1], #-3329	; 0xfffff2ff
    2258:	0000038b 	andeq	r0, r0, fp, lsl #7
    225c:	08003d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, sp}
    2260:	00000042 	andeq	r0, r0, r2, asr #32
    2264:	52119c01 	andspl	r9, r1, #256	; 0x100
    2268:	01000009 	tsteq	r0, r9
    226c:	03ba01a0 			; <UNDEFINED> instruction: 0x03ba01a0
    2270:	d50e0000 	strle	r0, [lr, #-0]
    2274:	0100000d 	tsteq	r0, sp
    2278:	00002ca0 	andeq	r2, r0, r0, lsr #25
    227c:	c8110000 	ldmdagt	r1, {}	; <UNPREDICTABLE>
    2280:	01000009 	tsteq	r0, r9
    2284:	03d201a8 	bicseq	r0, r2, #168, 2	; 0x2a
    2288:	d50e0000 	strle	r0, [lr, #-0]
    228c:	0100000d 	tsteq	r0, sp
    2290:	00002ca8 	andeq	r2, r0, r8, lsr #25
    2294:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    2298:	68000003 	stmdavs	r0, {r0, r1}
    229c:	a208003d 	andge	r0, r8, #61	; 0x3d
    22a0:	01000000 	mrseq	r0, (UNDEF: 0)
    22a4:	00045c9c 	muleq	r4, ip, ip
    22a8:	03441600 	movteq	r1, #17920	; 0x4600
    22ac:	0eef0000 	cdpeq	0, 14, cr0, cr15, cr0, {0}
    22b0:	4f160000 	svcmi	0x00160000
    22b4:	10000003 	andne	r0, r0, r3
    22b8:	1700000f 	strne	r0, [r0, -pc]
    22bc:	000003a2 	andeq	r0, r0, r2, lsr #7
    22c0:	08003d6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, fp, ip, sp}
    22c4:	00000118 	andeq	r0, r0, r8, lsl r1
    22c8:	042d7801 	strteq	r7, [sp], #-2049	; 0xfffff7ff
    22cc:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    22d0:	31000003 	tstcc	r0, r3
    22d4:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    22d8:	000002fb 	strdeq	r0, [r0], -fp
    22dc:	08003d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, sp}
    22e0:	00000130 	andeq	r0, r0, r0, lsr r1
    22e4:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    22e8:	44000003 	strmi	r0, [r0], #-3
    22ec:	0000000f 	andeq	r0, r0, pc
    22f0:	03ba1800 			; <UNDEFINED> instruction: 0x03ba1800
    22f4:	3dbc0000 	ldccc	0, cr0, [ip]
    22f8:	01480800 	cmpeq	r8, r0, lsl #16
    22fc:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2300:	0003c616 	andeq	ip, r3, r6, lsl r6
    2304:	000f5700 	andeq	r5, pc, r0, lsl #14
    2308:	02fb1800 	rscseq	r1, fp, #0, 16
    230c:	3dd40000 	ldclcc	0, cr0, [r4]
    2310:	01600800 	cmneq	r0, r0, lsl #16
    2314:	ac010000 	stcge	0, cr0, [r1], {-0}
    2318:	00030719 	andeq	r0, r3, r9, lsl r7
    231c:	00000000 	andeq	r0, r0, r0
    2320:	00093711 	andeq	r3, r9, r1, lsl r7
    2324:	017c0100 	cmneq	ip, r0, lsl #2
    2328:	00000474 	andeq	r0, r0, r4, ror r4
    232c:	0008b10e 	andeq	fp, r8, lr, lsl #2
    2330:	457c0100 	ldrbmi	r0, [ip, #-256]!	; 0xffffff00
    2334:	00000000 	andeq	r0, r0, r0
    2338:	00045c15 	andeq	r5, r4, r5, lsl ip
    233c:	003e0c00 	eorseq	r0, lr, r0, lsl #24
    2340:	00007a08 	andeq	r7, r0, r8, lsl #20
    2344:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2348:	16000004 	strne	r0, [r0], -r4
    234c:	00000468 	andeq	r0, r0, r8, ror #8
    2350:	00000f6a 	andeq	r0, r0, sl, ror #30
    2354:	0002fb17 	andeq	pc, r2, r7, lsl fp	; <UNPREDICTABLE>
    2358:	003e2800 	eorseq	r2, lr, r0, lsl #16
    235c:	00017808 	andeq	r7, r1, r8, lsl #16
    2360:	ad800100 	stfges	f0, [r0]
    2364:	16000004 	strne	r0, [r0], -r4
    2368:	00000307 	andeq	r0, r0, r7, lsl #6
    236c:	00000f8b 	andeq	r0, r0, fp, lsl #31
    2370:	02fb1a00 	rscseq	r1, fp, #0, 20
    2374:	3e580000 	cdpcc	0, 5, cr0, cr8, cr0, {0}
    2378:	00180800 	andseq	r0, r8, r0, lsl #16
    237c:	81010000 	mrshi	r0, (UNDEF: 1)
    2380:	00030716 	andeq	r0, r3, r6, lsl r7
    2384:	000fad00 	andeq	sl, pc, r0, lsl #26
    2388:	12000000 	andne	r0, r0, #0
    238c:	000009a0 	andeq	r0, r0, r0, lsr #19
    2390:	15019801 	strne	r9, [r1, #-2049]	; 0xfffff7ff
    2394:	000004c7 	andeq	r0, r0, r7, asr #9
    2398:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
    239c:	00000062 	andeq	r0, r0, r2, rrx
    23a0:	052f9c01 	streq	r9, [pc, #-3073]!	; 17a7 <__RW_SIZE__+0x1213>
    23a4:	13170000 	tstne	r7, #0
    23a8:	94000003 	strls	r0, [r0], #-3
    23ac:	9808003e 	stmdals	r8, {r1, r2, r3, r4, r5}
    23b0:	01000001 	tsteq	r0, r1
    23b4:	00050a9b 	muleq	r5, fp, sl
    23b8:	031f1b00 	tsteq	pc, #0, 22
    23bc:	1c640000 	stclne	0, cr0, [r4], #-0
    23c0:	00000198 	muleq	r0, r8, r1
    23c4:	0003291d 	andeq	r2, r3, sp, lsl r9
    23c8:	78910200 	ldmvc	r1, {r9}
    23cc:	13180000 	tstne	r8, #0
    23d0:	c2000003 	andgt	r0, r0, #3
    23d4:	b008003e 	andlt	r0, r8, lr, lsr r0
    23d8:	01000001 	tsteq	r0, r1
    23dc:	031f1b9d 	tsteq	pc, #160768	; 0x27400
    23e0:	1c320000 	ldcne	0, cr0, [r2], #-0
    23e4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    23e8:	0003291d 	andeq	r2, r3, sp, lsl r9
    23ec:	7c910200 	lfmvc	f0, 4, [r1], {0}
    23f0:	15000000 	strne	r0, [r0, #-0]
    23f4:	000003a2 	andeq	r0, r0, r2, lsr #7
    23f8:	08003eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
    23fc:	00000052 	andeq	r0, r0, r2, asr r0
    2400:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xfffff3ff
    2404:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    2408:	c0000003 	andgt	r0, r0, r3
    240c:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    2410:	000002fb 	strdeq	r0, [r0], -fp
    2414:	08003f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, sp}
    2418:	000001c8 	andeq	r0, r0, r8, asr #3
    241c:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    2420:	e1000003 	tst	r0, r3
    2424:	0000000f 	andeq	r0, r0, pc
    2428:	03ba1500 			; <UNDEFINED> instruction: 0x03ba1500
    242c:	3f400000 	svccc	0x00400000
    2430:	00520800 	subseq	r0, r2, r0, lsl #16
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	00000597 	muleq	r0, r7, r5
    243c:	0003c61e 	andeq	ip, r3, lr, lsl r6
    2440:	18500100 	ldmdane	r0, {r8}^
    2444:	000002fb 	strdeq	r0, [r0], -fp
    2448:	08003f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip, sp}
    244c:	000001e0 	andeq	r0, r0, r0, ror #3
    2450:	071eac01 	ldreq	sl, [lr, -r1, lsl #24]
    2454:	01000003 	tsteq	r0, r3
    2458:	1f000050 	svcne	0x00000050
    245c:	00000870 	andeq	r0, r0, r0, ror r8
    2460:	3f94b001 	svccc	0x0094b001
    2464:	03360800 	teqeq	r6, #0, 16
    2468:	9c010000 	stcls	0, cr0, [r1], {-0}
    246c:	0000086e 	andeq	r0, r0, lr, ror #16
    2470:	00085420 	andeq	r5, r8, r0, lsr #8
    2474:	73b00100 	movsvc	r0, #0, 2
    2478:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    247c:	1700000f 	strne	r0, [r0, -pc]
    2480:	00000338 	andeq	r0, r0, r8, lsr r3
    2484:	08003fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, sp}
    2488:	000001f8 	strdeq	r0, [r0], -r8
    248c:	0649d001 	strbeq	sp, [r9], -r1
    2490:	4f160000 	svcmi	0x00160000
    2494:	79000003 	stmdbvc	r0, {r0, r1}
    2498:	16000010 			; <UNDEFINED> instruction: 0x16000010
    249c:	00000344 	andeq	r0, r0, r4, asr #6
    24a0:	0000108e 	andeq	r1, r0, lr, lsl #1
    24a4:	0003a217 	andeq	sl, r3, r7, lsl r2
    24a8:	003fc400 	eorseq	ip, pc, r0, lsl #8
    24ac:	00021008 	andeq	r1, r2, r8
    24b0:	16780100 	ldrbtne	r0, [r8], -r0, lsl #2
    24b4:	16000006 	strne	r0, [r0], -r6
    24b8:	000003ae 	andeq	r0, r0, lr, lsr #7
    24bc:	0000108e 	andeq	r1, r0, lr, lsl #1
    24c0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    24c4:	003fe200 	eorseq	lr, pc, r0, lsl #4
    24c8:	00023008 	andeq	r3, r2, r8
    24cc:	16a40100 	strtne	r0, [r4], r0, lsl #2
    24d0:	00000307 	andeq	r0, r0, r7, lsl #6
    24d4:	000010a3 	andeq	r1, r0, r3, lsr #1
    24d8:	ba180000 	blt	6024e0 <__RW_SIZE__+0x601f4c>
    24dc:	1c000003 	stcne	0, cr0, [r0], {3}
    24e0:	50080040 	andpl	r0, r8, r0, asr #32
    24e4:	01000002 	tsteq	r0, r2
    24e8:	03c61679 	biceq	r1, r6, #126877696	; 0x7900000
    24ec:	10b80000 	adcsne	r0, r8, r0
    24f0:	fb180000 	blx	6024fa <__RW_SIZE__+0x601f66>
    24f4:	34000002 	strcc	r0, [r0], #-2
    24f8:	68080040 	stmdavs	r8, {r6}
    24fc:	01000002 	tsteq	r0, r2
    2500:	030716ac 	movweq	r1, #30380	; 0x76ac
    2504:	10cd0000 	sbcne	r0, sp, r0
    2508:	00000000 	andeq	r0, r0, r0
    250c:	03381700 	teqeq	r8, #0, 14
    2510:	40700000 	rsbsmi	r0, r0, r0
    2514:	02800800 	addeq	r0, r0, #0, 16
    2518:	bc010000 	stclt	0, cr0, [r1], {-0}
    251c:	000006d7 	ldrdeq	r0, [r0], -r7
    2520:	00034f16 	andeq	r4, r3, r6, lsl pc
    2524:	0010e200 	andseq	lr, r0, r0, lsl #4
    2528:	03441600 	movteq	r1, #17920	; 0x4600
    252c:	10f60000 	rscsne	r0, r6, r0
    2530:	a2170000 	andsge	r0, r7, #0
    2534:	70000003 	andvc	r0, r0, r3
    2538:	98080040 	stmdals	r8, {r6}
    253c:	01000002 	tsteq	r0, r2
    2540:	0006a478 	andeq	sl, r6, r8, ror r4
    2544:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2548:	10f60000 	rscsne	r0, r6, r0
    254c:	fb180000 	blx	602556 <__RW_SIZE__+0x601fc2>
    2550:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    2554:	b8080040 	stmdalt	r8, {r6}
    2558:	01000002 	tsteq	r0, r2
    255c:	030716a4 	movweq	r1, #30372	; 0x76a4
    2560:	110b0000 	mrsne	r0, (UNDEF: 11)
    2564:	00000000 	andeq	r0, r0, r0
    2568:	0003ba18 	andeq	fp, r3, r8, lsl sl
    256c:	0040c800 	subeq	ip, r0, r0, lsl #16
    2570:	0002d808 	andeq	sp, r2, r8, lsl #16
    2574:	16790100 	ldrbtne	r0, [r9], -r0, lsl #2
    2578:	000003c6 	andeq	r0, r0, r6, asr #7
    257c:	00001120 	andeq	r1, r0, r0, lsr #2
    2580:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2584:	0040e000 	subeq	lr, r0, r0
    2588:	0002f008 	andeq	pc, r2, r8
    258c:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2590:	00000307 	andeq	r0, r0, r7, lsl #6
    2594:	00001134 	andeq	r1, r0, r4, lsr r1
    2598:	17000000 	strne	r0, [r0, -r0]
    259c:	00000338 	andeq	r0, r0, r8, lsr r3
    25a0:	08004108 	stmdaeq	r0, {r3, r8, lr}
    25a4:	00000308 	andeq	r0, r0, r8, lsl #6
    25a8:	0765c601 	strbeq	ip, [r5, -r1, lsl #12]!
    25ac:	4f160000 	svcmi	0x00160000
    25b0:	48000003 	stmdami	r0, {r0, r1}
    25b4:	16000011 			; <UNDEFINED> instruction: 0x16000011
    25b8:	00000344 	andeq	r0, r0, r4, asr #6
    25bc:	0000115d 	andeq	r1, r0, sp, asr r1
    25c0:	0003a217 	andeq	sl, r3, r7, lsl r2
    25c4:	00410800 	subeq	r0, r1, r0, lsl #16
    25c8:	00032008 	andeq	r2, r3, r8
    25cc:	32780100 	rsbscc	r0, r8, #0, 2
    25d0:	16000007 	strne	r0, [r0], -r7
    25d4:	000003ae 	andeq	r0, r0, lr, lsr #7
    25d8:	0000115d 	andeq	r1, r0, sp, asr r1
    25dc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    25e0:	00412600 	subeq	r2, r1, r0, lsl #12
    25e4:	00034008 	andeq	r4, r3, r8
    25e8:	16a40100 	strtne	r0, [r4], r0, lsl #2
    25ec:	00000307 	andeq	r0, r0, r7, lsl #6
    25f0:	00001172 	andeq	r1, r0, r2, ror r1
    25f4:	ba180000 	blt	6025fc <__RW_SIZE__+0x602068>
    25f8:	60000003 	andvs	r0, r0, r3
    25fc:	60080041 	andvs	r0, r8, r1, asr #32
    2600:	01000003 	tsteq	r0, r3
    2604:	03c61679 	biceq	r1, r6, #126877696	; 0x7900000
    2608:	11870000 	orrne	r0, r7, r0
    260c:	fb180000 	blx	602616 <__RW_SIZE__+0x602082>
    2610:	78000002 	stmdavc	r0, {r1}
    2614:	78080041 	stmdavc	r8, {r0, r6}
    2618:	01000003 	tsteq	r0, r3
    261c:	030716ac 	movweq	r1, #30380	; 0x76ac
    2620:	119c0000 	orrsne	r0, ip, r0
    2624:	00000000 	andeq	r0, r0, r0
    2628:	03381700 	teqeq	r8, #0, 14
    262c:	41a00000 	movmi	r0, r0
    2630:	03900800 	orrseq	r0, r0, #0, 16
    2634:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2638:	000007f3 	strdeq	r0, [r0], -r3
    263c:	00034f16 	andeq	r4, r3, r6, lsl pc
    2640:	0011b100 	andseq	fp, r1, r0, lsl #2
    2644:	03441600 	movteq	r1, #17920	; 0x4600
    2648:	11c60000 	bicne	r0, r6, r0
    264c:	a2170000 	andsge	r0, r7, #0
    2650:	a0000003 	andge	r0, r0, r3
    2654:	a8080041 	stmdage	r8, {r0, r6}
    2658:	01000003 	tsteq	r0, r3
    265c:	0007c078 	andeq	ip, r7, r8, ror r0
    2660:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2664:	11c60000 	bicne	r0, r6, r0
    2668:	fb180000 	blx	602672 <__RW_SIZE__+0x6020de>
    266c:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    2670:	c8080041 	stmdagt	r8, {r0, r6}
    2674:	01000003 	tsteq	r0, r3
    2678:	030716a4 	movweq	r1, #30372	; 0x76a4
    267c:	11db0000 	bicsne	r0, fp, r0
    2680:	00000000 	andeq	r0, r0, r0
    2684:	0003ba18 	andeq	fp, r3, r8, lsl sl
    2688:	0041f800 	subeq	pc, r1, r0, lsl #16
    268c:	0003e808 	andeq	lr, r3, r8, lsl #16
    2690:	16790100 	ldrbtne	r0, [r9], -r0, lsl #2
    2694:	000003c6 	andeq	r0, r0, r6, asr #7
    2698:	000011f0 	strdeq	r1, [r0], -r0
    269c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    26a0:	00421000 	subeq	r1, r2, r0
    26a4:	00040008 	andeq	r0, r4, r8
    26a8:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    26ac:	00000307 	andeq	r0, r0, r7, lsl #6
    26b0:	00001205 	andeq	r1, r0, r5, lsl #4
    26b4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    26b8:	00000338 	andeq	r0, r0, r8, lsr r3
    26bc:	08004238 	stmdaeq	r0, {r3, r4, r5, r9, lr}
    26c0:	00000418 	andeq	r0, r0, r8, lsl r4
    26c4:	4f1bcb01 	svcmi	0x001bcb01
    26c8:	a8000003 	stmdage	r0, {r0, r1}
    26cc:	0003441b 	andeq	r4, r3, fp, lsl r4
    26d0:	a2173600 	andsge	r3, r7, #0, 12
    26d4:	38000003 	stmdacc	r0, {r0, r1}
    26d8:	30080042 	andcc	r0, r8, r2, asr #32
    26dc:	01000004 	tsteq	r0, r4
    26e0:	00083e78 	andeq	r3, r8, r8, ror lr
    26e4:	03ae1b00 			; <UNDEFINED> instruction: 0x03ae1b00
    26e8:	18360000 	ldmdane	r6!, {}	; <UNPREDICTABLE>
    26ec:	000002fb 	strdeq	r0, [r0], -fp
    26f0:	08004256 	stmdaeq	r0, {r1, r2, r4, r6, r9, lr}
    26f4:	00000450 	andeq	r0, r0, r0, asr r4
    26f8:	071ba401 	ldreq	sl, [fp, -r1, lsl #8]
    26fc:	36000003 	strcc	r0, [r0], -r3
    2700:	ba180000 	blt	602708 <__RW_SIZE__+0x602174>
    2704:	90000003 	andls	r0, r0, r3
    2708:	70080042 	andvc	r0, r8, r2, asr #32
    270c:	01000004 	tsteq	r0, r4
    2710:	03c62179 	biceq	r2, r6, #1073741854	; 0x4000001e
    2714:	7fa80000 	svcvc	0x00a80000
    2718:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    271c:	0042a800 	subeq	sl, r2, r0, lsl #16
    2720:	00048808 	andeq	r8, r4, r8, lsl #16
    2724:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    2728:	00000307 	andeq	r0, r0, r7, lsl #6
    272c:	00007fa8 	andeq	r7, r0, r8, lsr #31
    2730:	5b150000 	blpl	542738 <__RW_SIZE__+0x5421a4>
    2734:	cc000003 	stcgt	0, cr0, [r0], {3}
    2738:	5e080042 	cdppl	0, 0, cr0, cr8, cr2, {2}
    273c:	01000000 	mrseq	r0, (UNDEF: 0)
    2740:	0008b09c 	muleq	r8, ip, r0
    2744:	03a21800 			; <UNDEFINED> instruction: 0x03a21800
    2748:	42cc0000 	sbcmi	r0, ip, #0
    274c:	04a00800 	strteq	r0, [r0], #2048	; 0x800
    2750:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2754:	0003ae16 	andeq	sl, r3, r6, lsl lr
    2758:	00121a00 	andseq	r1, r2, r0, lsl #20
    275c:	02fb1800 	rscseq	r1, fp, #0, 16
    2760:	42f00000 	rscsmi	r0, r0, #0
    2764:	04c80800 	strbeq	r0, [r8], #2048	; 0x800
    2768:	a4010000 	strge	r0, [r1], #-0
    276c:	00030719 	andeq	r0, r3, r9, lsl r7
    2770:	00000000 	andeq	r0, r0, r0
    2774:	0009aa11 	andeq	sl, r9, r1, lsl sl
    2778:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    277c:	000008e5 	andeq	r0, r0, r5, ror #17
    2780:	0031780f 	eorseq	r7, r1, pc, lsl #16
    2784:	0045dc01 	subeq	sp, r5, r1, lsl #24
    2788:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    278c:	dc010031 	stcle	0, cr0, [r1], {49}	; 0x31
    2790:	00000045 	andeq	r0, r0, r5, asr #32
    2794:	0032780f 	eorseq	r7, r2, pc, lsl #16
    2798:	0045dc01 	subeq	sp, r5, r1, lsl #24
    279c:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    27a0:	dc010032 	stcle	0, cr0, [r1], {50}	; 0x32
    27a4:	00000045 	andeq	r0, r0, r5, asr #32
    27a8:	08b01500 	ldmeq	r0!, {r8, sl, ip}
    27ac:	432c0000 	teqmi	ip, #0
    27b0:	03640800 	cmneq	r4, #0, 16
    27b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b8:	00000b3f 	andeq	r0, r0, pc, lsr fp
    27bc:	0008bc16 	andeq	fp, r8, r6, lsl ip
    27c0:	00122d00 	andseq	r2, r2, r0, lsl #26
    27c4:	08c61600 	stmiaeq	r6, {r9, sl, ip}^
    27c8:	124e0000 	subne	r0, lr, #0
    27cc:	d0160000 	andsle	r0, r6, r0
    27d0:	6f000008 	svcvs	0x00000008
    27d4:	16000012 			; <UNDEFINED> instruction: 0x16000012
    27d8:	000008da 	ldrdeq	r0, [r0], -sl
    27dc:	00001290 	muleq	r0, r0, r2
    27e0:	0003a217 	andeq	sl, r3, r7, lsl r2
    27e4:	00432e00 	subeq	r2, r3, r0, lsl #28
    27e8:	0004e008 	andeq	lr, r4, r8
    27ec:	4ede0100 	cdpmi	1, 13, cr0, cr14, cr0, {0}
    27f0:	16000009 	strne	r0, [r0], -r9
    27f4:	000003ae 	andeq	r0, r0, lr, lsr #7
    27f8:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    27fc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2800:	00435600 	subeq	r5, r3, r0, lsl #12
    2804:	00051008 	andeq	r1, r5, r8
    2808:	19a40100 	stmibne	r4!, {r8}
    280c:	00000307 	andeq	r0, r0, r7, lsl #6
    2810:	ba170000 	blt	5c2818 <__RW_SIZE__+0x5c2284>
    2814:	94000003 	strls	r0, [r0], #-3
    2818:	28080043 	stmdacs	r8, {r0, r1, r6}
    281c:	01000005 	tsteq	r0, r5
    2820:	00097cdf 	ldrdeq	r7, [r9], -pc	; <UNPREDICTABLE>
    2824:	03c61900 	biceq	r1, r6, #0, 18
    2828:	fb1a0000 	blx	682832 <__RW_SIZE__+0x68229e>
    282c:	bc000002 	stclt	0, cr0, [r0], {2}
    2830:	22080043 	andcs	r0, r8, #67	; 0x43
    2834:	01000000 	mrseq	r0, (UNDEF: 0)
    2838:	030719ac 	movweq	r1, #31148	; 0x79ac
    283c:	00000000 	andeq	r0, r0, r0
    2840:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2844:	0043ea00 	subeq	lr, r3, r0, lsl #20
    2848:	00055008 	andeq	r5, r5, r8
    284c:	aee00100 	cdpge	1, 14, cr0, cr0, cr0, {0}
    2850:	16000009 	strne	r0, [r0], -r9
    2854:	000003c6 	andeq	r0, r0, r6, asr #7
    2858:	000012c4 	andeq	r1, r0, r4, asr #5
    285c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2860:	00440800 	subeq	r0, r4, r0, lsl #16
    2864:	00057008 	andeq	r7, r5, r8
    2868:	19ac0100 	stmibne	ip!, {r8}
    286c:	00000307 	andeq	r0, r0, r7, lsl #6
    2870:	ba170000 	blt	5c2878 <__RW_SIZE__+0x5c22e4>
    2874:	3a000003 	bcc	2888 <__RW_SIZE__+0x22f4>
    2878:	88080044 	stmdahi	r8, {r2, r6}
    287c:	01000005 	tsteq	r0, r5
    2880:	0009dce1 	andeq	sp, r9, r1, ror #25
    2884:	03c61900 	biceq	r1, r6, #0, 18
    2888:	fb1a0000 	blx	682892 <__RW_SIZE__+0x6822fe>
    288c:	5a000002 	bpl	289c <__RW_SIZE__+0x2308>
    2890:	20080044 	andcs	r0, r8, r4, asr #32
    2894:	01000000 	mrseq	r0, (UNDEF: 0)
    2898:	030719ac 	movweq	r1, #31148	; 0x79ac
    289c:	00000000 	andeq	r0, r0, r0
    28a0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    28a4:	00448400 	subeq	r8, r4, r0, lsl #8
    28a8:	0005b008 	andeq	fp, r5, r8
    28ac:	0ee20100 	cdpeq	1, 14, cr0, cr2, cr0, {0}
    28b0:	1600000a 	strne	r0, [r0], -sl
    28b4:	000003c6 	andeq	r0, r0, r6, asr #7
    28b8:	000012d7 	ldrdeq	r1, [r0], -r7
    28bc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    28c0:	00449c00 	subeq	r9, r4, r0, lsl #24
    28c4:	0005d008 	andeq	sp, r5, r8
    28c8:	19ac0100 	stmibne	ip!, {r8}
    28cc:	00000307 	andeq	r0, r0, r7, lsl #6
    28d0:	a2170000 	andsge	r0, r7, #0
    28d4:	ce000003 	cdpgt	0, 0, cr0, cr0, cr3, {0}
    28d8:	e8080044 	stmda	r8, {r2, r6}
    28dc:	01000005 	tsteq	r0, r5
    28e0:	000a40e4 	andeq	r4, sl, r4, ror #1
    28e4:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    28e8:	12ea0000 	rscne	r0, sl, #0
    28ec:	fb180000 	blx	6028f6 <__RW_SIZE__+0x602362>
    28f0:	e8000002 	stmda	r0, {r1}
    28f4:	10080044 	andne	r0, r8, r4, asr #32
    28f8:	01000006 	tsteq	r0, r6
    28fc:	030719a4 	movweq	r1, #31140	; 0x79a4
    2900:	00000000 	andeq	r0, r0, r0
    2904:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2908:	00451a00 	subeq	r1, r5, r0, lsl #20
    290c:	00062808 	andeq	r2, r6, r8, lsl #16
    2910:	6ee50100 	cdpvs	1, 14, cr0, cr5, cr0, {0}
    2914:	1900000a 	stmdbne	r0, {r1, r3}
    2918:	000003c6 	andeq	r0, r0, r6, asr #7
    291c:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2920:	00453a00 	subeq	r3, r5, r0, lsl #20
    2924:	00002008 	andeq	r2, r0, r8
    2928:	19ac0100 	stmibne	ip!, {r8}
    292c:	00000307 	andeq	r0, r0, r7, lsl #6
    2930:	ba170000 	blt	5c2938 <__RW_SIZE__+0x5c23a4>
    2934:	64000003 	strvs	r0, [r0], #-3
    2938:	50080045 	andpl	r0, r8, r5, asr #32
    293c:	01000006 	tsteq	r0, r6
    2940:	000aa0e6 	andeq	sl, sl, r6, ror #1
    2944:	03c61600 	biceq	r1, r6, #0, 12
    2948:	12fd0000 	rscsne	r0, sp, #0
    294c:	fb180000 	blx	602956 <__RW_SIZE__+0x6023c2>
    2950:	7c000002 	stcvc	0, cr0, [r0], {2}
    2954:	70080045 	andvc	r0, r8, r5, asr #32
    2958:	01000006 	tsteq	r0, r6
    295c:	030719ac 	movweq	r1, #31148	; 0x79ac
    2960:	00000000 	andeq	r0, r0, r0
    2964:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2968:	0045ae00 	subeq	sl, r5, r0, lsl #28
    296c:	00068808 	andeq	r8, r6, r8, lsl #16
    2970:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
    2974:	1900000a 	stmdbne	r0, {r1, r3}
    2978:	000003c6 	andeq	r0, r0, r6, asr #7
    297c:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2980:	0045ce00 	subeq	ip, r5, r0, lsl #28
    2984:	00002008 	andeq	r2, r0, r8
    2988:	19ac0100 	stmibne	ip!, {r8}
    298c:	00000307 	andeq	r0, r0, r7, lsl #6
    2990:	ba170000 	blt	5c2998 <__RW_SIZE__+0x5c2404>
    2994:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
    2998:	b0080045 	andlt	r0, r8, r5, asr #32
    299c:	01000006 	tsteq	r0, r6
    29a0:	000b00e8 	andeq	r0, fp, r8, ror #1
    29a4:	03c61600 	biceq	r1, r6, #0, 12
    29a8:	13100000 	tstne	r0, #0
    29ac:	fb180000 	blx	6029b6 <__RW_SIZE__+0x602422>
    29b0:	10000002 	andne	r0, r0, r2
    29b4:	d0080046 	andle	r0, r8, r6, asr #32
    29b8:	01000006 	tsteq	r0, r6
    29bc:	030719ac 	movweq	r1, #31148	; 0x79ac
    29c0:	00000000 	andeq	r0, r0, r0
    29c4:	00035b18 	andeq	r5, r3, r8, lsl fp
    29c8:	00464200 	subeq	r4, r6, r0, lsl #4
    29cc:	0006e808 	andeq	lr, r6, r8, lsl #16
    29d0:	18ea0100 	stmiane	sl!, {r8}^
    29d4:	000003a2 	andeq	r0, r0, r2, lsr #7
    29d8:	08004642 	stmdaeq	r0, {r1, r6, r9, sl, lr}
    29dc:	00000700 	andeq	r0, r0, r0, lsl #14
    29e0:	ae16d901 	cdpge	9, 1, cr13, cr6, cr1, {0}
    29e4:	23000003 	movwcs	r0, #3
    29e8:	18000013 	stmdane	r0, {r0, r1, r4}
    29ec:	000002fb 	strdeq	r0, [r0], -fp
    29f0:	0800465c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, lr}
    29f4:	00000720 	andeq	r0, r0, r0, lsr #14
    29f8:	0719a401 	ldreq	sl, [r9, -r1, lsl #8]
    29fc:	00000003 	andeq	r0, r0, r3
    2a00:	1f000000 	svcne	0x00000000
    2a04:	00000834 	andeq	r0, r0, r4, lsr r8
    2a08:	46908501 	ldrmi	r8, [r0], r1, lsl #10
    2a0c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    2a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a14:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2a18:	00787322 	rsbseq	r7, r8, r2, lsr #6
    2a1c:	00458501 	subeq	r8, r5, r1, lsl #10
    2a20:	13360000 	teqne	r6, #0
    2a24:	73220000 	teqvc	r2, #0
    2a28:	85010079 	strhi	r0, [r1, #-121]	; 0xffffff87
    2a2c:	00000045 	andeq	r0, r0, r5, asr #32
    2a30:	00001357 	andeq	r1, r0, r7, asr r3
    2a34:	00786522 	rsbseq	r6, r8, r2, lsr #10
    2a38:	00458501 	subeq	r8, r5, r1, lsl #10
    2a3c:	13780000 	cmnne	r8, #0
    2a40:	65220000 	strvs	r0, [r2, #-0]!
    2a44:	85010079 	strhi	r0, [r1, #-121]	; 0xffffff87
    2a48:	00000045 	andeq	r0, r0, r5, asr #32
    2a4c:	00001399 	muleq	r0, r9, r3
    2a50:	000cb620 	andeq	fp, ip, r0, lsr #12
    2a54:	45850100 	strmi	r0, [r5, #256]	; 0x100
    2a58:	ba000000 	blt	2a60 <__RW_SIZE__+0x24cc>
    2a5c:	23000013 	movwcs	r0, #19
    2a60:	87010069 	strhi	r0, [r1, -r9, rrx]
    2a64:	00000045 	andeq	r0, r0, r5, asr #32
    2a68:	000013da 	ldrdeq	r1, [r0], -sl
    2a6c:	01006a23 	tsteq	r0, r3, lsr #20
    2a70:	00004587 	andeq	r4, r0, r7, lsl #11
    2a74:	00141100 	andseq	r1, r4, r0, lsl #2
    2a78:	08852400 	stmeq	r5, {sl, sp}
    2a7c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2a80:	00000045 	andeq	r0, r0, r5, asr #32
    2a84:	00001448 	andeq	r1, r0, r8, asr #8
    2a88:	0008d424 	andeq	sp, r8, r4, lsr #8
    2a8c:	45890100 	strmi	r0, [r9, #256]	; 0x100
    2a90:	5b000000 	blpl	2a98 <__RW_SIZE__+0x2504>
    2a94:	17000014 	smladne	r0, r4, r0, r0
    2a98:	0000045c 	andeq	r0, r0, ip, asr r4
    2a9c:	080046ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr}
    2aa0:	00000738 	andeq	r0, r0, r8, lsr r7
    2aa4:	0c1e9101 	ldfeqd	f1, [lr], {1}
    2aa8:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
    2aac:	17000004 	strne	r0, [r0, -r4]
    2ab0:	000002fb 	strdeq	r0, [r0], -fp
    2ab4:	080046b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, lr}
    2ab8:	00000760 	andeq	r0, r0, r0, ror #14
    2abc:	0c088001 	stceq	0, cr8, [r8], {1}
    2ac0:	07160000 	ldreq	r0, [r6, -r0]
    2ac4:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    2ac8:	00000014 	andeq	r0, r0, r4, lsl r0
    2acc:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2ad0:	0046fc00 	subeq	pc, r6, r0, lsl #24
    2ad4:	00001008 	andeq	r1, r0, r8
    2ad8:	19810100 	stmibne	r1, {r8}
    2adc:	00000307 	andeq	r0, r0, r7, lsl #6
    2ae0:	a8250000 	stmdage	r5!, {}	; <UNPREDICTABLE>
    2ae4:	b0080046 	andlt	r0, r8, r6, asr #32
    2ae8:	26000008 	strcs	r0, [r0], -r8
    2aec:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
    2af0:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    2af4:	01510127 	cmpeq	r1, r7, lsr #2
    2af8:	50012730 	andpl	r2, r1, r0, lsr r7
    2afc:	00003001 	andeq	r3, r0, r1
    2b00:	00036c15 	andeq	r6, r3, r5, lsl ip
    2b04:	00474800 	subeq	r4, r7, r0, lsl #16
    2b08:	00034208 	andeq	r4, r3, r8, lsl #4
    2b0c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    2b10:	1600000e 	strne	r0, [r0], -lr
    2b14:	00000378 	andeq	r0, r0, r8, ror r3
    2b18:	00001481 	andeq	r1, r0, r1, lsl #9
    2b1c:	00038116 	andeq	r8, r3, r6, lsl r1
    2b20:	0014a200 	andseq	sl, r4, r0, lsl #4
    2b24:	08b01a00 	ldmeq	r0!, {r9, fp, ip}
    2b28:	474a0000 	strbmi	r0, [sl, -r0]
    2b2c:	033c0800 	teqeq	ip, #0, 16
    2b30:	ef010000 	svc	0x00010000
    2b34:	0008da16 	andeq	sp, r8, r6, lsl sl
    2b38:	0014c300 	andseq	ip, r4, r0, lsl #6
    2b3c:	08d01600 	ldmeq	r0, {r9, sl, ip}^
    2b40:	14d60000 	ldrbne	r0, [r6], #0
    2b44:	c6160000 	ldrgt	r0, [r6], -r0
    2b48:	c3000008 	movwgt	r0, #8
    2b4c:	16000014 			; <UNDEFINED> instruction: 0x16000014
    2b50:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    2b54:	000014d6 	ldrdeq	r1, [r0], -r6
    2b58:	0003a217 	andeq	sl, r3, r7, lsl r2
    2b5c:	00474a00 	subeq	r4, r7, r0, lsl #20
    2b60:	00078008 	andeq	r8, r7, r8
    2b64:	c6de0100 	ldrbgt	r0, [lr], r0, lsl #2
    2b68:	1600000c 	strne	r0, [r0], -ip
    2b6c:	000003ae 	andeq	r0, r0, lr, lsr #7
    2b70:	000014e9 	andeq	r1, r0, r9, ror #9
    2b74:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2b78:	00476e00 	subeq	r6, r7, r0, lsl #28
    2b7c:	0007b008 	andeq	fp, r7, r8
    2b80:	19a40100 	stmibne	r4!, {r8}
    2b84:	00000307 	andeq	r0, r0, r7, lsl #6
    2b88:	ba170000 	blt	5c2b90 <__RW_SIZE__+0x5c25fc>
    2b8c:	a8000003 	stmdage	r0, {r0, r1}
    2b90:	c8080047 	stmdagt	r8, {r0, r1, r2, r6}
    2b94:	01000007 	tsteq	r0, r7
    2b98:	000cfcdf 	ldrdeq	pc, [ip], -pc	; <UNPREDICTABLE>
    2b9c:	03c61600 	biceq	r1, r6, #0, 12
    2ba0:	14fc0000 	ldrbtne	r0, [ip], #0
    2ba4:	fb1a0000 	blx	682bae <__RW_SIZE__+0x68261a>
    2ba8:	c8000002 	stmdagt	r0, {r1}
    2bac:	20080047 	andcs	r0, r8, r7, asr #32
    2bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb4:	030716ac 	movweq	r1, #30380	; 0x76ac
    2bb8:	150f0000 	strne	r0, [pc, #-0]	; 2bc0 <__RW_SIZE__+0x262c>
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2bc4:	0047f200 	subeq	pc, r7, r0, lsl #4
    2bc8:	0007f008 	andeq	pc, r7, r8
    2bcc:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    2bd0:	1600000d 	strne	r0, [r0], -sp
    2bd4:	000003c6 	andeq	r0, r0, r6, asr #7
    2bd8:	00001522 	andeq	r1, r0, r2, lsr #10
    2bdc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2be0:	00480a00 	subeq	r0, r8, r0, lsl #20
    2be4:	00081008 	andeq	r1, r8, r8
    2be8:	19ac0100 	stmibne	ip!, {r8}
    2bec:	00000307 	andeq	r0, r0, r7, lsl #6
    2bf0:	ba170000 	blt	5c2bf8 <__RW_SIZE__+0x5c2664>
    2bf4:	3c000003 	stccc	0, cr0, [r0], {3}
    2bf8:	28080048 	stmdacs	r8, {r3, r6}
    2bfc:	01000008 	tsteq	r0, r8
    2c00:	000d64e1 	andeq	r6, sp, r1, ror #9
    2c04:	03c61600 	biceq	r1, r6, #0, 12
    2c08:	15350000 	ldrne	r0, [r5, #-0]!
    2c0c:	fb180000 	blx	602c16 <__RW_SIZE__+0x602682>
    2c10:	54000002 	strpl	r0, [r0], #-2
    2c14:	48080048 	stmdami	r8, {r3, r6}
    2c18:	01000008 	tsteq	r0, r8
    2c1c:	030716ac 	movweq	r1, #30380	; 0x76ac
    2c20:	15480000 	strbne	r0, [r8, #-0]
    2c24:	00000000 	andeq	r0, r0, r0
    2c28:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2c2c:	00488400 	subeq	r8, r8, r0, lsl #8
    2c30:	00086008 	andeq	r6, r8, r8
    2c34:	92e20100 	rscls	r0, r2, #0, 2
    2c38:	1900000d 	stmdbne	r0, {r0, r2, r3}
    2c3c:	000003c6 	andeq	r0, r0, r6, asr #7
    2c40:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2c44:	00489c00 	subeq	r9, r8, r0, lsl #24
    2c48:	00088008 	andeq	r8, r8, r8
    2c4c:	19ac0100 	stmibne	ip!, {r8}
    2c50:	00000307 	andeq	r0, r0, r7, lsl #6
    2c54:	a2170000 	andsge	r0, r7, #0
    2c58:	cc000003 	stcgt	0, cr0, [r0], {3}
    2c5c:	98080048 	stmdals	r8, {r3, r6}
    2c60:	01000008 	tsteq	r0, r8
    2c64:	000dc4e4 	andeq	ip, sp, r4, ror #9
    2c68:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2c6c:	155b0000 	ldrbne	r0, [fp, #-0]
    2c70:	fb180000 	blx	602c7a <__RW_SIZE__+0x6026e6>
    2c74:	e6000002 	str	r0, [r0], -r2
    2c78:	c0080048 	andgt	r0, r8, r8, asr #32
    2c7c:	01000008 	tsteq	r0, r8
    2c80:	030719a4 	movweq	r1, #31140	; 0x79a4
    2c84:	00000000 	andeq	r0, r0, r0
    2c88:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2c8c:	00491800 	subeq	r1, r9, r0, lsl #16
    2c90:	0008d808 	andeq	sp, r8, r8, lsl #16
    2c94:	fae50100 	blx	ff94309c <MSP_BASE+0xdf93e09c>
    2c98:	1600000d 	strne	r0, [r0], -sp
    2c9c:	000003c6 	andeq	r0, r0, r6, asr #7
    2ca0:	0000156e 	andeq	r1, r0, lr, ror #10
    2ca4:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2ca8:	00493800 	subeq	r3, r9, r0, lsl #16
    2cac:	00002008 	andeq	r2, r0, r8
    2cb0:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2cb4:	00000307 	andeq	r0, r0, r7, lsl #6
    2cb8:	00001581 	andeq	r1, r0, r1, lsl #11
    2cbc:	ba170000 	blt	5c2cc4 <__RW_SIZE__+0x5c2730>
    2cc0:	62000003 	andvs	r0, r0, #3
    2cc4:	00080049 	andeq	r0, r8, r9, asr #32
    2cc8:	01000009 	tsteq	r0, r9
    2ccc:	000e2ce6 	andeq	r2, lr, r6, ror #25
    2cd0:	03c61600 	biceq	r1, r6, #0, 12
    2cd4:	15940000 	ldrne	r0, [r4]
    2cd8:	fb180000 	blx	602ce2 <__RW_SIZE__+0x60274e>
    2cdc:	7a000002 	bvc	2cec <__RW_SIZE__+0x2758>
    2ce0:	20080049 	andcs	r0, r8, r9, asr #32
    2ce4:	01000009 	tsteq	r0, r9
    2ce8:	030719ac 	movweq	r1, #31148	; 0x79ac
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2cf4:	0049ac00 	subeq	sl, r9, r0, lsl #24
    2cf8:	00093808 	andeq	r3, r9, r8, lsl #16
    2cfc:	62e70100 	rscvs	r0, r7, #0, 2
    2d00:	1600000e 	strne	r0, [r0], -lr
    2d04:	000003c6 	andeq	r0, r0, r6, asr #7
    2d08:	000015a7 	andeq	r1, r0, r7, lsr #11
    2d0c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2d10:	0049c400 	subeq	ip, r9, r0, lsl #8
    2d14:	00095808 	andeq	r5, r9, r8, lsl #16
    2d18:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2d1c:	00000307 	andeq	r0, r0, r7, lsl #6
    2d20:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
    2d24:	ba170000 	blt	5c2d2c <__RW_SIZE__+0x5c2798>
    2d28:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    2d2c:	70080049 	andvc	r0, r8, r9, asr #32
    2d30:	01000009 	tsteq	r0, r9
    2d34:	000e90e8 	andeq	r9, lr, r8, ror #1
    2d38:	03c61900 	biceq	r1, r6, #0, 18
    2d3c:	fb180000 	blx	602d46 <__RW_SIZE__+0x6027b2>
    2d40:	0c000002 	stceq	0, cr0, [r0], {2}
    2d44:	9008004a 	andls	r0, r8, sl, asr #32
    2d48:	01000009 	tsteq	r0, r9
    2d4c:	030719ac 	movweq	r1, #31148	; 0x79ac
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	00035b18 	andeq	r5, r3, r8, lsl fp
    2d58:	004a3c00 	subeq	r3, sl, r0, lsl #24
    2d5c:	0009a808 	andeq	sl, r9, r8, lsl #16
    2d60:	18ea0100 	stmiane	sl!, {r8}^
    2d64:	000003a2 	andeq	r0, r0, r2, lsr #7
    2d68:	08004a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, lr}
    2d6c:	000009c0 	andeq	r0, r0, r0, asr #19
    2d70:	ae16d901 	cdpge	9, 1, cr13, cr6, cr1, {0}
    2d74:	cd000003 	stcgt	0, cr0, [r0, #-12]
    2d78:	18000015 	stmdane	r0, {r0, r2, r4}
    2d7c:	000002fb 	strdeq	r0, [r0], -fp
    2d80:	08004a56 	stmdaeq	r0, {r1, r2, r4, r6, r9, fp, lr}
    2d84:	000009e0 	andeq	r0, r0, r0, ror #19
    2d88:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    2d8c:	e0000003 	and	r0, r0, r3
    2d90:	00000015 	andeq	r0, r0, r5, lsl r0
    2d94:	00000000 	andeq	r0, r0, r0
    2d98:	0009e31f 	andeq	lr, r9, pc, lsl r3
    2d9c:	8cf20100 	ldfhie	f0, [r2]
    2da0:	9408004a 	strls	r0, [r8], #-74	; 0xffffffb6
    2da4:	01000000 	mrseq	r0, (UNDEF: 0)
    2da8:	000f6b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    2dac:	09f12000 	ldmibeq	r1!, {sp}^
    2db0:	f2010000 	vhadd.s8	d0, d1, d0
    2db4:	00000045 	andeq	r0, r0, r5, asr #32
    2db8:	000015f3 	strdeq	r1, [r0], -r3
    2dbc:	01006923 	tsteq	r0, r3, lsr #18
    2dc0:	00007af4 	strdeq	r7, [r0], -r4
    2dc4:	00161400 	andseq	r1, r6, r0, lsl #8
    2dc8:	30632800 	rsbcc	r2, r3, r0, lsl #16
    2dcc:	2cf50100 	ldfcse	f0, [r5]
    2dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd4:	31632356 	cmncc	r3, r6, asr r3
    2dd8:	2cf60100 	ldfcse	f0, [r6]
    2ddc:	33000000 	movwcc	r0, #0
    2de0:	17000016 	smladne	r0, r6, r0, r0
    2de4:	000002fb 	strdeq	r0, [r0], -fp
    2de8:	08004ad8 	stmdaeq	r0, {r3, r4, r6, r7, r9, fp, lr}
    2dec:	000009f8 	strdeq	r0, [r0], -r8
    2df0:	0f3cff01 	svceq	0x003cff01
    2df4:	07160000 	ldreq	r0, [r6, -r0]
    2df8:	46000003 	strmi	r0, [r0], -r3
    2dfc:	00000016 	andeq	r0, r0, r6, lsl r0
    2e00:	0002fb29 	andeq	pc, r2, r9, lsr #22
    2e04:	004afa00 	subeq	pc, sl, r0, lsl #20
    2e08:	00000e08 	andeq	r0, r0, r8, lsl #28
    2e0c:	01000100 	mrseq	r0, (UNDEF: 16)
    2e10:	00000f56 	andeq	r0, r0, r6, asr pc
    2e14:	00030719 	andeq	r0, r3, r9, lsl r7
    2e18:	ac2a0000 	stcge	0, cr0, [sl], #-0
    2e1c:	b008004a 	andlt	r0, r8, sl, asr #32
    2e20:	27000008 	strcs	r0, [r0, -r8]
    2e24:	30015101 	andcc	r5, r1, r1, lsl #2
    2e28:	01500127 	cmpeq	r0, r7, lsr #2
    2e2c:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    2e30:	00000363 	andeq	r0, r0, r3, ror #6
    2e34:	08004b20 	stmdaeq	r0, {r5, r8, r9, fp, lr}
    2e38:	00000006 	andeq	r0, r0, r6
    2e3c:	0f8e9c01 	svceq	0x008e9c01
    2e40:	26260000 	strtcs	r0, [r6], -r0
    2e44:	d408004b 	strle	r0, [r8], #-75	; 0xffffffb5
    2e48:	2700000e 	strcs	r0, [r0, -lr]
    2e4c:	30015001 	andcc	r5, r1, r1
    2e50:	a42b0000 	strtge	r0, [fp], #-0
    2e54:	01000008 	tsteq	r0, r8
    2e58:	4b28010b 	blmi	a0328c <__RW_SIZE__+0xa02cf8>
    2e5c:	00b40800 	adcseq	r0, r4, r0, lsl #16
    2e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e64:	0000108e 	andeq	r1, r0, lr, lsl #1
    2e68:	0073782c 	rsbseq	r7, r3, ip, lsr #16
    2e6c:	73010b01 	movwvc	r0, #6913	; 0x1b01
    2e70:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    2e74:	2c000016 	stccs	0, cr0, [r0], {22}
    2e78:	01007379 	tsteq	r0, r9, ror r3
    2e7c:	0073010b 	rsbseq	r0, r3, fp, lsl #2
    2e80:	16850000 	strne	r0, [r5], r0
    2e84:	772c0000 	strvc	r0, [ip, -r0]!
    2e88:	010b0100 	mrseq	r0, (UNDEF: 27)
    2e8c:	00000073 	andeq	r0, r0, r3, ror r0
    2e90:	000016b1 			; <UNDEFINED> instruction: 0x000016b1
    2e94:	0100682c 	tsteq	r0, ip, lsr #16
    2e98:	0073010b 	rsbseq	r0, r3, fp, lsl #2
    2e9c:	16d20000 	ldrbne	r0, [r2], r0
    2ea0:	f12d0000 			; <UNDEFINED> instruction: 0xf12d0000
    2ea4:	01000009 	tsteq	r0, r9
    2ea8:	0045010b 	subeq	r0, r5, fp, lsl #2
    2eac:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb0:	00692e00 	rsbeq	r2, r9, r0, lsl #28
    2eb4:	7a010d01 	bvc	462c0 <__RW_SIZE__+0x45d2c>
    2eb8:	f3000000 	vhadd.u8	d0, d0, d0
    2ebc:	2f000016 	svccs	0x00000016
    2ec0:	01003063 	tsteq	r0, r3, rrx
    2ec4:	002c010e 	eoreq	r0, ip, lr, lsl #2
    2ec8:	56010000 	strpl	r0, [r1], -r0
    2ecc:	0031632e 	eorseq	r6, r1, lr, lsr #6
    2ed0:	2c010f01 	stccs	15, cr0, [r1], {1}
    2ed4:	12000000 	andne	r0, r0, #0
    2ed8:	2e000017 	mcrcs	0, 0, r0, cr0, cr7, {0}
    2edc:	01006578 	tsteq	r0, r8, ror r5
    2ee0:	00730110 	rsbseq	r0, r3, r0, lsl r1
    2ee4:	17250000 	strne	r0, [r5, -r0]!
    2ee8:	792f0000 	stmdbvc	pc!, {}	; <UNPREDICTABLE>
    2eec:	10010065 	andne	r0, r1, r5, rrx
    2ef0:	00007301 	andeq	r7, r0, r1, lsl #6
    2ef4:	30580100 	subscc	r0, r8, r0, lsl #2
    2ef8:	000002fb 	strdeq	r0, [r0], -fp
    2efc:	08004b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, lr}
    2f00:	00000a10 	andeq	r0, r0, r0, lsl sl
    2f04:	51011d01 	tstpl	r1, r1, lsl #26
    2f08:	16000010 			; <UNDEFINED> instruction: 0x16000010
    2f0c:	00000307 	andeq	r0, r0, r7, lsl #6
    2f10:	00001758 	andeq	r1, r0, r8, asr r7
    2f14:	02fb2900 	rscseq	r2, fp, #0, 18
    2f18:	4bb40000 	blmi	fed02f20 <MSP_BASE+0xdecfdf20>
    2f1c:	000e0800 	andeq	r0, lr, r0, lsl #16
    2f20:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    2f24:	00106b01 	andseq	r6, r0, r1, lsl #22
    2f28:	03071900 	movweq	r1, #30976	; 0x7900
    2f2c:	2a000000 	bcs	2f34 <__RW_SIZE__+0x29a0>
    2f30:	08004b62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, lr}
    2f34:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    2f38:	02530127 	subseq	r0, r3, #-1073741815	; 0xc0000009
    2f3c:	01270078 	teqeq	r7, r8, ror r0
    2f40:	00770252 	rsbseq	r0, r7, r2, asr r2
    2f44:	02510127 	subseq	r0, r1, #-1073741815	; 0xc0000009
    2f48:	01270074 	teqeq	r7, r4, ror r0
    2f4c:	00760250 	rsbseq	r0, r6, r0, asr r2
    2f50:	f6310000 			; <UNDEFINED> instruction: 0xf6310000
    2f54:	01000008 	tsteq	r0, r8
    2f58:	592b0132 	stmdbpl	fp!, {r1, r4, r5, r8}
    2f5c:	01000008 	tsteq	r0, r8
    2f60:	4bdc0124 	blmi	ff7033f8 <MSP_BASE+0xdf6fe3f8>
    2f64:	1e260800 	cdpne	8, 2, cr0, cr6, cr0, {0}
    2f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f6c:	000024ca 	andeq	r2, r0, sl, asr #9
    2f70:	00085432 	andeq	r5, r8, r2, lsr r4
    2f74:	01240100 	teqeq	r4, r0, lsl #2
    2f78:	00000073 	andeq	r0, r0, r3, ror r0
    2f7c:	0000176b 	andeq	r1, r0, fp, ror #14
    2f80:	00108e33 	andseq	r8, r0, r3, lsr lr
    2f84:	004bde00 	subeq	sp, fp, r0, lsl #28
    2f88:	000a3008 	andeq	r3, sl, r8
    2f8c:	01260100 	teqeq	r6, r0, lsl #2
    2f90:	00038b33 	andeq	r8, r3, r3, lsr fp
    2f94:	004c2400 	subeq	r2, ip, r0, lsl #8
    2f98:	000a4808 	andeq	r4, sl, r8, lsl #16
    2f9c:	01270100 	teqeq	r7, r0, lsl #2
    2fa0:	0004c730 	andeq	ip, r4, r0, lsr r7
    2fa4:	004c5000 	subeq	r5, ip, r0
    2fa8:	000a7808 	andeq	r7, sl, r8, lsl #16
    2fac:	01290100 	teqeq	r9, r0, lsl #2
    2fb0:	0000113d 	andeq	r1, r0, sp, lsr r1
    2fb4:	00031317 	andeq	r1, r3, r7, lsl r3
    2fb8:	004c5000 	subeq	r5, ip, r0
    2fbc:	000aa008 	andeq	sl, sl, r8
    2fc0:	189b0100 	ldmne	fp, {r8}
    2fc4:	1b000011 	blne	3010 <__RW_SIZE__+0x2a7c>
    2fc8:	0000031f 	andeq	r0, r0, pc, lsl r3
    2fcc:	0aa01c64 	beq	fe80a164 <MSP_BASE+0xde805164>
    2fd0:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    2fd4:	02000003 	andeq	r0, r0, #3
    2fd8:	00006c91 	muleq	r0, r1, ip
    2fdc:	00031318 	andeq	r1, r3, r8, lsl r3
    2fe0:	004c9e00 	subeq	r9, ip, r0, lsl #28
    2fe4:	000ac808 	andeq	ip, sl, r8, lsl #16
    2fe8:	1b9d0100 	blne	fe7433f0 <MSP_BASE+0xde73e3f0>
    2fec:	0000031f 	andeq	r0, r0, pc, lsl r3
    2ff0:	0ac81c32 	beq	ff20a0c0 <MSP_BASE+0xdf2050c0>
    2ff4:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    2ff8:	02000003 	andeq	r0, r0, #3
    2ffc:	00006891 	muleq	r0, r1, r8
    3000:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3004:	4cc20000 	stclmi	0, cr0, [r2], {0}
    3008:	0ae00800 	beq	ff805010 <MSP_BASE+0xdf800010>
    300c:	2b010000 	blcs	43014 <__RW_SIZE__+0x42a80>
    3010:	00116e01 	andseq	r6, r1, r1, lsl #28
    3014:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3018:	184f0000 	stmdane	pc, {}^	; <UNPREDICTABLE>
    301c:	000002fb 	strdeq	r0, [r0], -fp
    3020:	08004cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, lr}
    3024:	00000af8 	strdeq	r0, [r0], -r8
    3028:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    302c:	4f000003 	svcmi	0x00000003
    3030:	ba300000 	blt	c03038 <__RW_SIZE__+0xc02aa4>
    3034:	1c000003 	stcne	0, cr0, [r0], {3}
    3038:	1808004d 	stmdane	r8, {r0, r2, r3, r6}
    303c:	0100000b 	tsteq	r0, fp
    3040:	119f012c 	orrsne	r0, pc, ip, lsr #2
    3044:	c61b0000 	ldrgt	r0, [fp], -r0
    3048:	00000003 	andeq	r0, r0, r3
    304c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3050:	004d3400 	subeq	r3, sp, r0, lsl #8
    3054:	000b3808 	andeq	r3, fp, r8, lsl #16
    3058:	1bac0100 	blne	feb03460 <MSP_BASE+0xdeafe460>
    305c:	00000307 	andeq	r0, r0, r7, lsl #6
    3060:	30000000 	andcc	r0, r0, r0
    3064:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3068:	08004d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, lr}
    306c:	00000b50 	andeq	r0, r0, r0, asr fp
    3070:	d0012d01 	andle	r2, r1, r1, lsl #26
    3074:	21000011 	tstcs	r0, r1, lsl r0
    3078:	000003c6 	andeq	r0, r0, r6, asr #7
    307c:	02fb1859 	rscseq	r1, fp, #5832704	; 0x590000
    3080:	4d7c0000 	ldclmi	0, cr0, [ip, #-0]
    3084:	0b700800 	bleq	1c0508c <__RW_SIZE__+0x1c04af8>
    3088:	ac010000 	stcge	0, cr0, [r1], {-0}
    308c:	00030721 	andeq	r0, r3, r1, lsr #14
    3090:	00005900 	andeq	r5, r0, r0, lsl #18
    3094:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3098:	004dae00 	subeq	sl, sp, r0, lsl #28
    309c:	000b8808 	andeq	r8, fp, r8, lsl #16
    30a0:	012e0100 	teqeq	lr, r0, lsl #2
    30a4:	00001201 	andeq	r1, r0, r1, lsl #4
    30a8:	0003c61b 	andeq	ip, r3, fp, lsl r6
    30ac:	fb183000 	blx	60f0b6 <__RW_SIZE__+0x60eb22>
    30b0:	c6000002 	strgt	r0, [r0], -r2
    30b4:	a808004d 	stmdage	r8, {r0, r2, r3, r6}
    30b8:	0100000b 	tsteq	r0, fp
    30bc:	03071bac 	movweq	r1, #31660	; 0x7bac
    30c0:	00300000 	eorseq	r0, r0, r0
    30c4:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    30c8:	4df80000 	ldclmi	0, cr0, [r8]
    30cc:	0bc00800 	bleq	ff0050d4 <MSP_BASE+0xdf0000d4>
    30d0:	2f010000 	svccs	0x00010000
    30d4:	00123201 	andseq	r3, r2, r1, lsl #4
    30d8:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    30dc:	186d0000 	stmdane	sp!, {}^	; <UNPREDICTABLE>
    30e0:	000002fb 	strdeq	r0, [r0], -fp
    30e4:	08004e10 	stmdaeq	r0, {r4, r9, sl, fp, lr}
    30e8:	00000be0 	andeq	r0, r0, r0, ror #23
    30ec:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    30f0:	6d000003 	stcvs	0, cr0, [r0, #-12]
    30f4:	ba300000 	blt	c030fc <__RW_SIZE__+0xc02b68>
    30f8:	42000003 	andmi	r0, r0, #3
    30fc:	f808004e 			; <UNDEFINED> instruction: 0xf808004e
    3100:	0100000b 	tsteq	r0, fp
    3104:	12630130 	rsbne	r0, r3, #48, 2
    3108:	c61b0000 	ldrgt	r0, [fp], -r0
    310c:	64000003 	strvs	r0, [r0], #-3
    3110:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3114:	004e5a00 	subeq	r5, lr, r0, lsl #20
    3118:	000c1808 	andeq	r1, ip, r8, lsl #16
    311c:	1bac0100 	blne	feb03524 <MSP_BASE+0xdeafe524>
    3120:	00000307 	andeq	r0, r0, r7, lsl #6
    3124:	30000064 	andcc	r0, r0, r4, rrx
    3128:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    312c:	08004e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, lr}
    3130:	00000c30 	andeq	r0, r0, r0, lsr ip
    3134:	94013101 	strls	r3, [r1], #-257	; 0xfffffeff
    3138:	1b000012 	blne	3188 <__RW_SIZE__+0x2bf4>
    313c:	000003c6 	andeq	r0, r0, r6, asr #7
    3140:	02fb1803 	rscseq	r1, fp, #196608	; 0x30000
    3144:	4ea40000 	cdpmi	0, 10, cr0, cr4, cr0, {0}
    3148:	0c500800 	mrrceq	8, 0, r0, r0, cr0	; <UNPREDICTABLE>
    314c:	ac010000 	stcge	0, cr0, [r1], {-0}
    3150:	0003071b 	andeq	r0, r3, fp, lsl r7
    3154:	00000300 	andeq	r0, r0, r0, lsl #6
    3158:	0003ba30 	andeq	fp, r3, r0, lsr sl
    315c:	004ed600 	subeq	sp, lr, r0, lsl #12
    3160:	000c6808 	andeq	r6, ip, r8, lsl #16
    3164:	01320100 	teqeq	r2, r0, lsl #2
    3168:	000012c5 	andeq	r1, r0, r5, asr #5
    316c:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3170:	fb181200 	blx	60797a <__RW_SIZE__+0x6073e6>
    3174:	ee000002 	cdp	0, 0, cr0, cr0, cr2, {0}
    3178:	8808004e 	stmdahi	r8, {r1, r2, r3, r6}
    317c:	0100000c 	tsteq	r0, ip
    3180:	03071bac 	movweq	r1, #31660	; 0x7bac
    3184:	00120000 	andseq	r0, r2, r0
    3188:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    318c:	4f200000 	svcmi	0x00200000
    3190:	0ca00800 	stceq	8, cr0, [r0]
    3194:	33010000 	movwcc	r0, #4096	; 0x1000
    3198:	0012f801 	andseq	pc, r2, r1, lsl #16
    319c:	03c62100 	biceq	r2, r6, #0, 2
    31a0:	7f810000 	svcvc	0x00810000
    31a4:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    31a8:	004f3800 	subeq	r3, pc, r0, lsl #16
    31ac:	000cc008 	andeq	ip, ip, r8
    31b0:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    31b4:	00000307 	andeq	r0, r0, r7, lsl #6
    31b8:	00007f81 	andeq	r7, r0, r1, lsl #31
    31bc:	0003a230 	andeq	sl, r3, r0, lsr r2
    31c0:	004f6a00 	subeq	r6, pc, r0, lsl #20
    31c4:	000cd808 	andeq	sp, ip, r8, lsl #16
    31c8:	01340100 	teqeq	r4, r0, lsl #2
    31cc:	00001329 	andeq	r1, r0, r9, lsr #6
    31d0:	0003ae21 	andeq	sl, r3, r1, lsr #28
    31d4:	fb186800 	blx	61d1de <__RW_SIZE__+0x61cc4a>
    31d8:	82000002 	andhi	r0, r0, #2
    31dc:	f808004f 			; <UNDEFINED> instruction: 0xf808004f
    31e0:	0100000c 	tsteq	r0, ip
    31e4:	030721a4 	movweq	r2, #29092	; 0x71a4
    31e8:	00680000 	rsbeq	r0, r8, r0
    31ec:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    31f0:	4fb40000 	svcmi	0x00b40000
    31f4:	0d100800 	ldceq	8, cr0, [r0, #-0]
    31f8:	35010000 	strcc	r0, [r1, #-0]
    31fc:	00135c01 	andseq	r5, r3, r1, lsl #24
    3200:	03c62100 	biceq	r2, r6, #0, 2
    3204:	7f850000 	svcvc	0x00850000
    3208:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    320c:	004fcc00 	subeq	ip, pc, r0, lsl #24
    3210:	000d3008 	andeq	r3, sp, r8
    3214:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    3218:	00000307 	andeq	r0, r0, r7, lsl #6
    321c:	00007f85 	andeq	r7, r0, r5, lsl #31
    3220:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3224:	004ffe00 	subeq	pc, pc, r0, lsl #28
    3228:	000d4808 	andeq	r4, sp, r8, lsl #16
    322c:	01360100 	teqeq	r6, r0, lsl #2
    3230:	0000138d 	andeq	r1, r0, sp, lsl #7
    3234:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3238:	fb181000 	blx	607242 <__RW_SIZE__+0x606cae>
    323c:	16000002 	strne	r0, [r0], -r2
    3240:	68080050 	stmdavs	r8, {r4, r6}
    3244:	0100000d 	tsteq	r0, sp
    3248:	03071bac 	movweq	r1, #31660	; 0x7bac
    324c:	00100000 	andseq	r0, r0, r0
    3250:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3254:	50480000 	subpl	r0, r8, r0
    3258:	0d800800 	stceq	8, cr0, [r0]
    325c:	37010000 	strcc	r0, [r1, -r0]
    3260:	0013be01 	andseq	fp, r3, r1, lsl #28
    3264:	03c61b00 	biceq	r1, r6, #0, 22
    3268:	187a0000 	ldmdane	sl!, {}^	; <UNPREDICTABLE>
    326c:	000002fb 	strdeq	r0, [r0], -fp
    3270:	08005060 	stmdaeq	r0, {r5, r6, ip, lr}
    3274:	00000da0 	andeq	r0, r0, r0, lsr #27
    3278:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    327c:	7a000003 	bvc	3290 <__RW_SIZE__+0x2cfc>
    3280:	a2300000 	eorsge	r0, r0, #0
    3284:	92000003 	andls	r0, r0, #3
    3288:	b8080050 	stmdalt	r8, {r4, r6}
    328c:	0100000d 	tsteq	r0, sp
    3290:	13ef0138 	mvnne	r0, #56, 2
    3294:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    3298:	4b000003 	blmi	32ac <__RW_SIZE__+0x2d18>
    329c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    32a0:	0050aa00 	subseq	sl, r0, r0, lsl #20
    32a4:	000dd808 	andeq	sp, sp, r8, lsl #16
    32a8:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    32ac:	00000307 	andeq	r0, r0, r7, lsl #6
    32b0:	3000004b 	andcc	r0, r0, fp, asr #32
    32b4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    32b8:	080050dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, lr}
    32bc:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    32c0:	20013901 	andcs	r3, r1, r1, lsl #18
    32c4:	1b000014 	blne	331c <__RW_SIZE__+0x2d88>
    32c8:	000003c6 	andeq	r0, r0, r6, asr #7
    32cc:	02fb1839 	rscseq	r1, fp, #3735552	; 0x390000
    32d0:	50f40000 	rscspl	r0, r4, r0
    32d4:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    32d8:	ac010000 	stcge	0, cr0, [r1], {-0}
    32dc:	0003071b 	andeq	r0, r3, fp, lsl r7
    32e0:	00003900 	andeq	r3, r0, r0, lsl #18
    32e4:	0003ba30 	andeq	fp, r3, r0, lsr sl
    32e8:	00512600 	subseq	r2, r1, r0, lsl #12
    32ec:	000e2808 	andeq	r2, lr, r8, lsl #16
    32f0:	013a0100 	teqeq	sl, r0, lsl #2
    32f4:	00001451 	andeq	r1, r0, r1, asr r4
    32f8:	0003c61b 	andeq	ip, r3, fp, lsl r6
    32fc:	fb182c00 	blx	60e306 <__RW_SIZE__+0x60dd72>
    3300:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    3304:	48080051 	stmdami	r8, {r0, r4, r6}
    3308:	0100000e 	tsteq	r0, lr
    330c:	03071bac 	movweq	r1, #31660	; 0x7bac
    3310:	002c0000 	eoreq	r0, ip, r0
    3314:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3318:	51760000 	cmnpl	r6, r0
    331c:	0e600800 	cdpeq	8, 6, cr0, cr0, cr0, {0}
    3320:	3b010000 	blcc	43328 <__RW_SIZE__+0x42d94>
    3324:	00148201 	andseq	r8, r4, r1, lsl #4
    3328:	03c61b00 	biceq	r1, r6, #0, 22
    332c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3330:	000002fb 	strdeq	r0, [r0], -fp
    3334:	0800518e 	stmdaeq	r0, {r1, r2, r3, r7, r8, ip, lr}
    3338:	00000e80 	andeq	r0, r0, r0, lsl #29
    333c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3340:	00000003 	andeq	r0, r0, r3
    3344:	ba300000 	blt	c0334c <__RW_SIZE__+0xc02db8>
    3348:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
    334c:	98080051 	stmdals	r8, {r0, r4, r6}
    3350:	0100000e 	tsteq	r0, lr
    3354:	14b3013c 	ldrtne	r0, [r3], #316	; 0x13c
    3358:	c61b0000 	ldrgt	r0, [fp], -r0
    335c:	34000003 	strcc	r0, [r0], #-3
    3360:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3364:	0051d600 	subseq	sp, r1, r0, lsl #12
    3368:	000eb808 	andeq	fp, lr, r8, lsl #16
    336c:	1bac0100 	blne	feb03774 <MSP_BASE+0xdeafe774>
    3370:	00000307 	andeq	r0, r0, r7, lsl #6
    3374:	30000034 	andcc	r0, r0, r4, lsr r0
    3378:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    337c:	08005208 	stmdaeq	r0, {r3, r9, ip, lr}
    3380:	00000ed0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3384:	e4013d01 	str	r3, [r1], #-3329	; 0xfffff2ff
    3388:	1b000014 	blne	33e0 <__RW_SIZE__+0x2e4c>
    338c:	000003c6 	andeq	r0, r0, r6, asr #7
    3390:	02fb1802 	rscseq	r1, fp, #131072	; 0x20000
    3394:	52200000 	eorpl	r0, r0, #0
    3398:	0ef00800 	cdpeq	8, 15, cr0, cr0, cr0, {0}
    339c:	ac010000 	stcge	0, cr0, [r1], {-0}
    33a0:	0003071b 	andeq	r0, r3, fp, lsl r7
    33a4:	00000200 	andeq	r0, r0, r0, lsl #4
    33a8:	0003a230 	andeq	sl, r3, r0, lsr r2
    33ac:	00525200 	subseq	r5, r2, r0, lsl #4
    33b0:	000f0808 	andeq	r0, pc, r8, lsl #16
    33b4:	013e0100 	teqeq	lr, r0, lsl #2
    33b8:	00001515 	andeq	r1, r0, r5, lsl r5
    33bc:	0003ae21 	andeq	sl, r3, r1, lsr #28
    33c0:	fb187700 	blx	620fca <__RW_SIZE__+0x620a36>
    33c4:	6a000002 	bvs	33d4 <__RW_SIZE__+0x2e40>
    33c8:	28080052 	stmdacs	r8, {r1, r4, r6}
    33cc:	0100000f 	tsteq	r0, pc
    33d0:	030721a4 	movweq	r2, #29092	; 0x71a4
    33d4:	00770000 	rsbseq	r0, r7, r0
    33d8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    33dc:	529c0000 	addspl	r0, ip, #0
    33e0:	0f400800 	svceq	0x00400800
    33e4:	3f010000 	svccc	0x00010000
    33e8:	00154601 	andseq	r4, r5, r1, lsl #12
    33ec:	03c61b00 	biceq	r1, r6, #0, 22
    33f0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    33f4:	000002fb 	strdeq	r0, [r0], -fp
    33f8:	080052b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, lr}
    33fc:	00000f60 	andeq	r0, r0, r0, ror #30
    3400:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3404:	20000003 	andcs	r0, r0, r3
    3408:	a2300000 	eorsge	r0, r0, #0
    340c:	e6000003 	str	r0, [r0], -r3
    3410:	78080052 	stmdavc	r8, {r1, r4, r6}
    3414:	0100000f 	tsteq	r0, pc
    3418:	15770140 	ldrbne	r0, [r7, #-320]!	; 0xfffffec0
    341c:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    3420:	6a000003 	bvs	3434 <__RW_SIZE__+0x2ea0>
    3424:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3428:	0052fe00 	subseq	pc, r2, r0, lsl #28
    342c:	000f9808 	andeq	r9, pc, r8, lsl #16
    3430:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    3434:	00000307 	andeq	r0, r0, r7, lsl #6
    3438:	3000006a 	andcc	r0, r0, sl, rrx
    343c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3440:	08005336 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, ip, lr}
    3444:	00000fb0 			; <UNDEFINED> instruction: 0x00000fb0
    3448:	a8014101 	stmdage	r1, {r0, r8, lr}
    344c:	1b000015 	blne	34a8 <__RW_SIZE__+0x2f14>
    3450:	000003c6 	andeq	r0, r0, r6, asr #7
    3454:	02fb1800 	rscseq	r1, fp, #0, 16
    3458:	534e0000 	movtpl	r0, #57344	; 0xe000
    345c:	0fd00800 	svceq	0x00d00800
    3460:	ac010000 	stcge	0, cr0, [r1], {-0}
    3464:	0003071b 	andeq	r0, r3, fp, lsl r7
    3468:	00000000 	andeq	r0, r0, r0
    346c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3470:	00538400 	subseq	r8, r3, r0, lsl #8
    3474:	000fe808 	andeq	lr, pc, r8, lsl #16
    3478:	01420100 	mrseq	r0, (UNDEF: 82)
    347c:	000015d9 	ldrdeq	r1, [r0], -r9
    3480:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3484:	fb180000 	blx	60348e <__RW_SIZE__+0x602efa>
    3488:	9c000002 	stcls	0, cr0, [r0], {2}
    348c:	08080053 	stmdaeq	r8, {r0, r1, r4, r6}
    3490:	01000010 	tsteq	r0, r0, lsl r0
    3494:	03071bac 	movweq	r1, #31660	; 0x7bac
    3498:	00000000 	andeq	r0, r0, r0
    349c:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    34a0:	53cc0000 	bicpl	r0, ip, #0
    34a4:	10200800 	eorne	r0, r0, r0, lsl #16
    34a8:	44010000 	strmi	r0, [r1], #-0
    34ac:	00160a01 	andseq	r0, r6, r1, lsl #20
    34b0:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    34b4:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    34b8:	000002fb 	strdeq	r0, [r0], -fp
    34bc:	080053e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, ip, lr}
    34c0:	00001040 	andeq	r1, r0, r0, asr #32
    34c4:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    34c8:	40000003 	andmi	r0, r0, r3
    34cc:	ba300000 	blt	c034d4 <__RW_SIZE__+0xc02f40>
    34d0:	16000003 	strne	r0, [r0], -r3
    34d4:	58080054 	stmdapl	r8, {r2, r4, r6}
    34d8:	01000010 	tsteq	r0, r0, lsl r0
    34dc:	163b0146 	ldrtne	r0, [fp], -r6, asr #2
    34e0:	c61b0000 	ldrgt	r0, [fp], -r0
    34e4:	08000003 	stmdaeq	r0, {r0, r1}
    34e8:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    34ec:	00542e00 	subseq	r2, r4, r0, lsl #28
    34f0:	00107808 	andseq	r7, r0, r8, lsl #16
    34f4:	1bac0100 	blne	feb038fc <MSP_BASE+0xdeafe8fc>
    34f8:	00000307 	andeq	r0, r0, r7, lsl #6
    34fc:	30000008 	andcc	r0, r0, r8
    3500:	000003a2 	andeq	r0, r0, r2, lsr #7
    3504:	08005460 	stmdaeq	r0, {r5, r6, sl, ip, lr}
    3508:	00001090 	muleq	r0, r0, r0
    350c:	6c014801 	stcvs	8, cr4, [r1], {1}
    3510:	21000016 	tstcs	r0, r6, lsl r0
    3514:	000003ae 	andeq	r0, r0, lr, lsr #7
    3518:	02fb1841 	rscseq	r1, fp, #4259840	; 0x410000
    351c:	54780000 	ldrbtpl	r0, [r8], #-0
    3520:	10b00800 	adcsne	r0, r0, r0, lsl #16
    3524:	a4010000 	strge	r0, [r1], #-0
    3528:	00030721 	andeq	r0, r3, r1, lsr #14
    352c:	00004100 	andeq	r4, r0, r0, lsl #2
    3530:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3534:	0054aa00 	subseq	sl, r4, r0, lsl #20
    3538:	0010c808 	andseq	ip, r0, r8, lsl #16
    353c:	01490100 	mrseq	r0, (UNDEF: 89)
    3540:	0000169d 	muleq	r0, sp, r6
    3544:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3548:	fb181200 	blx	607d52 <__RW_SIZE__+0x6077be>
    354c:	c2000002 	andgt	r0, r0, #2
    3550:	e8080054 	stmda	r8, {r2, r4, r6}
    3554:	01000010 	tsteq	r0, r0, lsl r0
    3558:	03071bac 	movweq	r1, #31660	; 0x7bac
    355c:	00120000 	andseq	r0, r2, r0
    3560:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3564:	54f40000 	ldrbtpl	r0, [r4], #0
    3568:	11000800 	tstne	r0, r0, lsl #16
    356c:	4b010000 	blmi	43574 <__RW_SIZE__+0x42fe0>
    3570:	0016ce01 	andseq	ip, r6, r1, lsl #28
    3574:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3578:	18450000 	stmdane	r5, {}^	; <UNPREDICTABLE>
    357c:	000002fb 	strdeq	r0, [r0], -fp
    3580:	0800550c 	stmdaeq	r0, {r2, r3, r8, sl, ip, lr}
    3584:	00001120 	andeq	r1, r0, r0, lsr #2
    3588:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    358c:	45000003 	strmi	r0, [r0, #-3]
    3590:	ba300000 	blt	c03598 <__RW_SIZE__+0xc03004>
    3594:	3e000003 	cdpcc	0, 0, cr0, cr0, cr3, {0}
    3598:	38080055 	stmdacc	r8, {r0, r2, r4, r6}
    359c:	01000011 	tsteq	r0, r1, lsl r0
    35a0:	16ff014c 	ldrbtne	r0, [pc], ip, asr #2
    35a4:	c61b0000 	ldrgt	r0, [fp], -r0
    35a8:	08000003 	stmdaeq	r0, {r0, r1}
    35ac:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    35b0:	00555600 	subseq	r5, r5, r0, lsl #12
    35b4:	00115808 	andseq	r5, r1, r8, lsl #16
    35b8:	1bac0100 	blne	feb039c0 <MSP_BASE+0xdeafe9c0>
    35bc:	00000307 	andeq	r0, r0, r7, lsl #6
    35c0:	30000008 	andcc	r0, r0, r8
    35c4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    35c8:	08005588 	stmdaeq	r0, {r3, r7, r8, sl, ip, lr}
    35cc:	00001170 	andeq	r1, r0, r0, ror r1
    35d0:	30014d01 	andcc	r4, r1, r1, lsl #26
    35d4:	1b000017 	blne	3638 <__RW_SIZE__+0x30a4>
    35d8:	000003c6 	andeq	r0, r0, r6, asr #7
    35dc:	02fb1826 	rscseq	r1, fp, #2490368	; 0x260000
    35e0:	55a00000 	strpl	r0, [r0, #0]!
    35e4:	11900800 	orrsne	r0, r0, r0, lsl #16
    35e8:	ac010000 	stcge	0, cr0, [r1], {-0}
    35ec:	0003071b 	andeq	r0, r3, fp, lsl r7
    35f0:	00002600 	andeq	r2, r0, r0, lsl #12
    35f4:	0003a230 	andeq	sl, r3, r0, lsr r2
    35f8:	0055d200 	subseq	sp, r5, r0, lsl #4
    35fc:	0011a808 	andseq	sl, r1, r8, lsl #16
    3600:	014f0100 	mrseq	r0, (UNDEF: 95)
    3604:	00001761 	andeq	r1, r0, r1, ror #14
    3608:	0003ae21 	andeq	sl, r3, r1, lsr #28
    360c:	fb184700 	blx	615216 <__RW_SIZE__+0x614c82>
    3610:	ea000002 	b	3620 <__RW_SIZE__+0x308c>
    3614:	c8080055 	stmdagt	r8, {r0, r2, r4, r6}
    3618:	01000011 	tsteq	r0, r1, lsl r0
    361c:	030721a4 	movweq	r2, #29092	; 0x71a4
    3620:	00470000 	subeq	r0, r7, r0
    3624:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3628:	561c0000 	ldrpl	r0, [ip], -r0
    362c:	11e00800 	mvnne	r0, r0, lsl #16
    3630:	50010000 	andpl	r0, r1, r0
    3634:	00179401 	andseq	r9, r7, r1, lsl #8
    3638:	03c62100 	biceq	r2, r6, #0, 2
    363c:	7fb70000 	svcvc	0x00b70000
    3640:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3644:	00563400 	subseq	r3, r6, r0, lsl #8
    3648:	00120008 	andseq	r0, r2, r8
    364c:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    3650:	00000307 	andeq	r0, r0, r7, lsl #6
    3654:	00007fb7 			; <UNDEFINED> instruction: 0x00007fb7
    3658:	0003a230 	andeq	sl, r3, r0, lsr r2
    365c:	00566600 	subseq	r6, r6, r0, lsl #12
    3660:	00121808 	andseq	r1, r2, r8, lsl #16
    3664:	01530100 	cmpeq	r3, r0, lsl #2
    3668:	000017c7 	andeq	r1, r0, r7, asr #15
    366c:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3670:	187fb800 	ldmdane	pc!, {fp, ip, sp, pc}^	; <UNPREDICTABLE>
    3674:	000002fb 	strdeq	r0, [r0], -fp
    3678:	0800567e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, ip, lr}
    367c:	00001238 	andeq	r1, r0, r8, lsr r2
    3680:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    3684:	b8000003 	stmdalt	r0, {r0, r1}
    3688:	3000007f 	andcc	r0, r0, pc, ror r0
    368c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3690:	080056b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, lr}
    3694:	00001250 	andeq	r1, r0, r0, asr r2
    3698:	f8015401 			; <UNDEFINED> instruction: 0xf8015401
    369c:	1b000017 	blne	3700 <__RW_SIZE__+0x316c>
    36a0:	000003c6 	andeq	r0, r0, r6, asr #7
    36a4:	02fb180f 	rscseq	r1, fp, #983040	; 0xf0000
    36a8:	56c80000 	strbpl	r0, [r8], r0
    36ac:	12700800 	rsbsne	r0, r0, #0, 16
    36b0:	ac010000 	stcge	0, cr0, [r1], {-0}
    36b4:	0003071b 	andeq	r0, r3, fp, lsl r7
    36b8:	00000f00 	andeq	r0, r0, r0, lsl #30
    36bc:	0003a230 	andeq	sl, r3, r0, lsr r2
    36c0:	0056fa00 	subseq	pc, r6, r0, lsl #20
    36c4:	00128808 	andseq	r8, r2, r8, lsl #16
    36c8:	01550100 	cmpeq	r5, r0, lsl #2
    36cc:	0000182b 	andeq	r1, r0, fp, lsr #16
    36d0:	0003ae21 	andeq	sl, r3, r1, lsr #28
    36d4:	187fba00 	ldmdane	pc!, {r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    36d8:	000002fb 	strdeq	r0, [r0], -fp
    36dc:	08005712 	stmdaeq	r0, {r1, r4, r8, r9, sl, ip, lr}
    36e0:	000012a8 	andeq	r1, r0, r8, lsr #5
    36e4:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    36e8:	ba000003 	blt	36fc <__RW_SIZE__+0x3168>
    36ec:	3000007f 	andcc	r0, r0, pc, ror r0
    36f0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    36f4:	08005744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip, lr}
    36f8:	000012c0 	andeq	r1, r0, r0, asr #5
    36fc:	5c015601 	stcpl	6, cr5, [r1], {1}
    3700:	1b000018 	blne	3768 <__RW_SIZE__+0x31d4>
    3704:	000003c6 	andeq	r0, r0, r6, asr #7
    3708:	02fb180f 	rscseq	r1, fp, #983040	; 0xf0000
    370c:	575c0000 	ldrbpl	r0, [ip, -r0]
    3710:	12e00800 	rscne	r0, r0, #0, 16
    3714:	ac010000 	stcge	0, cr0, [r1], {-0}
    3718:	0003071b 	andeq	r0, r3, fp, lsl r7
    371c:	00000f00 	andeq	r0, r0, r0, lsl #30
    3720:	0003a230 	andeq	sl, r3, r0, lsr r2
    3724:	00578e00 	subseq	r8, r7, r0, lsl #28
    3728:	0012f808 	andseq	pc, r2, r8, lsl #16
    372c:	01570100 	cmpeq	r7, r0, lsl #2
    3730:	0000188f 	andeq	r1, r0, pc, lsl #17
    3734:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3738:	187fbb00 	ldmdane	pc!, {r8, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    373c:	000002fb 	strdeq	r0, [r0], -fp
    3740:	080057a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, ip, lr}
    3744:	00001318 	andeq	r1, r0, r8, lsl r3
    3748:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    374c:	bb000003 	bllt	3760 <__RW_SIZE__+0x31cc>
    3750:	3000007f 	andcc	r0, r0, pc, ror r0
    3754:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3758:	080057d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, lr}
    375c:	00001330 	andeq	r1, r0, r0, lsr r3
    3760:	c0015801 	andgt	r5, r1, r1, lsl #16
    3764:	21000018 	tstcs	r0, r8, lsl r0
    3768:	000003c6 	andeq	r0, r0, r6, asr #7
    376c:	02fb187f 	rscseq	r1, fp, #8323072	; 0x7f0000
    3770:	57f00000 	ldrbpl	r0, [r0, r0]!
    3774:	13500800 	cmpne	r0, #0, 16
    3778:	ac010000 	stcge	0, cr0, [r1], {-0}
    377c:	00030721 	andeq	r0, r3, r1, lsr #14
    3780:	00007f00 	andeq	r7, r0, r0, lsl #30
    3784:	0003a230 	andeq	sl, r3, r0, lsr r2
    3788:	00582200 	subseq	r2, r8, r0, lsl #4
    378c:	00136808 	andseq	r6, r3, r8, lsl #16
    3790:	01590100 	cmpeq	r9, r0, lsl #2
    3794:	000018f3 	strdeq	r1, [r0], -r3
    3798:	0003ae21 	andeq	sl, r3, r1, lsr #28
    379c:	187fbe00 	ldmdane	pc!, {r9, sl, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    37a0:	000002fb 	strdeq	r0, [r0], -fp
    37a4:	0800583a 	stmdaeq	r0, {r1, r3, r4, r5, fp, ip, lr}
    37a8:	00001388 	andeq	r1, r0, r8, lsl #7
    37ac:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    37b0:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
    37b4:	3000007f 	andcc	r0, r0, pc, ror r0
    37b8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    37bc:	0800586c 	stmdaeq	r0, {r2, r3, r5, r6, fp, ip, lr}
    37c0:	000013a0 	andeq	r1, r0, r0, lsr #7
    37c4:	24015a01 	strcs	r5, [r1], #-2561	; 0xfffff5ff
    37c8:	21000019 	tstcs	r0, r9, lsl r0
    37cc:	000003c6 	andeq	r0, r0, r6, asr #7
    37d0:	02fb187f 	rscseq	r1, fp, #8323072	; 0x7f0000
    37d4:	58840000 	stmpl	r4, {}	; <UNPREDICTABLE>
    37d8:	13c00800 	bicne	r0, r0, #0, 16
    37dc:	ac010000 	stcge	0, cr0, [r1], {-0}
    37e0:	00030721 	andeq	r0, r3, r1, lsr #14
    37e4:	00007f00 	andeq	r7, r0, r0, lsl #30
    37e8:	0003a230 	andeq	sl, r3, r0, lsr r2
    37ec:	0058b600 	subseq	fp, r8, r0, lsl #12
    37f0:	0013d808 	andseq	sp, r3, r8, lsl #16
    37f4:	015d0100 	cmpeq	sp, r0, lsl #2
    37f8:	00001955 	andeq	r1, r0, r5, asr r9
    37fc:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    3800:	fb183600 	blx	61100a <__RW_SIZE__+0x610a76>
    3804:	ce000002 	cdpgt	0, 0, cr0, cr0, cr2, {0}
    3808:	f8080058 			; <UNDEFINED> instruction: 0xf8080058
    380c:	01000013 	tsteq	r0, r3, lsl r0
    3810:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    3814:	00360000 	eorseq	r0, r6, r0
    3818:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    381c:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    3820:	14100800 	ldrne	r0, [r0], #-2048	; 0xfffff800
    3824:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3828:	00198601 	andseq	r8, r9, r1, lsl #12
    382c:	03c61b00 	biceq	r1, r6, #0, 22
    3830:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    3834:	000002fb 	strdeq	r0, [r0], -fp
    3838:	08005918 	stmdaeq	r0, {r3, r4, r8, fp, ip, lr}
    383c:	00001430 	andeq	r1, r0, r0, lsr r4
    3840:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3844:	08000003 	stmdaeq	r0, {r0, r1}
    3848:	a2300000 	eorsge	r0, r0, #0
    384c:	4a000003 	bmi	3860 <__RW_SIZE__+0x32cc>
    3850:	48080059 	stmdami	r8, {r0, r3, r4, r6}
    3854:	01000014 	tsteq	r0, r4, lsl r0
    3858:	19b7015f 	ldmibne	r7!, {r0, r1, r2, r3, r4, r6, r8}
    385c:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    3860:	3a000003 	bcc	3874 <__RW_SIZE__+0x32e0>
    3864:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3868:	00596200 	subseq	r6, r9, r0, lsl #4
    386c:	00146808 	andseq	r6, r4, r8, lsl #16
    3870:	1ba40100 	blne	fe903c78 <MSP_BASE+0xde8fec78>
    3874:	00000307 	andeq	r0, r0, r7, lsl #6
    3878:	3000003a 	andcc	r0, r0, sl, lsr r0
    387c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3880:	08005994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, lr}
    3884:	00001480 	andeq	r1, r0, r0, lsl #9
    3888:	e8016001 	stmda	r1, {r0, sp, lr}
    388c:	1b000019 	blne	38f8 <__RW_SIZE__+0x3364>
    3890:	000003c6 	andeq	r0, r0, r6, asr #7
    3894:	02fb1855 	rscseq	r1, fp, #5570560	; 0x550000
    3898:	59ac0000 	stmibpl	ip!, {}	; <UNPREDICTABLE>
    389c:	14a00800 	strtne	r0, [r0], #2048	; 0x800
    38a0:	ac010000 	stcge	0, cr0, [r1], {-0}
    38a4:	0003071b 	andeq	r0, r3, fp, lsl r7
    38a8:	00005500 	andeq	r5, r0, r0, lsl #10
    38ac:	0003a230 	andeq	sl, r3, r0, lsr r2
    38b0:	0059de00 	subseq	sp, r9, r0, lsl #28
    38b4:	0014b808 	andseq	fp, r4, r8, lsl #16
    38b8:	01610100 	cmneq	r1, r0, lsl #2
    38bc:	00001a1b 	andeq	r1, r0, fp, lsl sl
    38c0:	0003ae21 	andeq	sl, r3, r1, lsr #28
    38c4:	187fb100 	ldmdane	pc!, {r8, ip, sp, pc}^	; <UNPREDICTABLE>
    38c8:	000002fb 	strdeq	r0, [r0], -fp
    38cc:	080059f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, ip, lr}
    38d0:	000014d8 	ldrdeq	r1, [r0], -r8
    38d4:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    38d8:	b1000003 	tstlt	r0, r3
    38dc:	3000007f 	andcc	r0, r0, pc, ror r0
    38e0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    38e4:	08005a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, ip, lr}
    38e8:	000014f0 	strdeq	r1, [r0], -r0
    38ec:	4c016201 	sfmmi	f6, 4, [r1], {1}
    38f0:	1b00001a 	blne	3960 <__RW_SIZE__+0x33cc>
    38f4:	000003c6 	andeq	r0, r0, r6, asr #7
    38f8:	02fb1800 	rscseq	r1, fp, #0, 16
    38fc:	5a460000 	bpl	1183904 <__RW_SIZE__+0x1183370>
    3900:	15100800 	ldrne	r0, [r0, #-2048]	; 0xfffff800
    3904:	ac010000 	stcge	0, cr0, [r1], {-0}
    3908:	0003071b 	andeq	r0, r3, fp, lsl r7
    390c:	00000000 	andeq	r0, r0, r0
    3910:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3914:	005a7600 	subseq	r7, sl, r0, lsl #12
    3918:	00152808 	andseq	r2, r5, r8, lsl #16
    391c:	01630100 	cmneq	r3, r0, lsl #2
    3920:	00001a7d 	andeq	r1, r0, sp, ror sl
    3924:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3928:	fb181a00 	blx	60a132 <__RW_SIZE__+0x609b9e>
    392c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    3930:	4808005a 	stmdami	r8, {r1, r3, r4, r6}
    3934:	01000015 	tsteq	r0, r5, lsl r0
    3938:	03071bac 	movweq	r1, #31660	; 0x7bac
    393c:	001a0000 	andseq	r0, sl, r0
    3940:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3944:	5ac00000 	bpl	ff00394c <MSP_BASE+0xdeffe94c>
    3948:	15600800 	strbne	r0, [r0, #-2048]!	; 0xfffff800
    394c:	65010000 	strvs	r0, [r1, #-0]
    3950:	001ab001 	andseq	fp, sl, r1
    3954:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3958:	7fb60000 	svcvc	0x00b60000
    395c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3960:	005ad800 	subseq	sp, sl, r0, lsl #16
    3964:	00158008 	andseq	r8, r5, r8
    3968:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    396c:	00000307 	andeq	r0, r0, r7, lsl #6
    3970:	00007fb6 			; <UNDEFINED> instruction: 0x00007fb6
    3974:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3978:	005b0a00 	subseq	r0, fp, r0, lsl #20
    397c:	00159808 	andseq	r9, r5, r8, lsl #16
    3980:	01660100 	cmneq	r6, r0, lsl #2
    3984:	00001ae1 	andeq	r1, r0, r1, ror #21
    3988:	0003c61b 	andeq	ip, r3, fp, lsl r6
    398c:	fb180a00 	blx	606196 <__RW_SIZE__+0x605c02>
    3990:	22000002 	andcs	r0, r0, #2
    3994:	b808005b 	stmdalt	r8, {r0, r1, r3, r4, r6}
    3998:	01000015 	tsteq	r0, r5, lsl r0
    399c:	03071bac 	movweq	r1, #31660	; 0x7bac
    39a0:	000a0000 	andeq	r0, sl, r0
    39a4:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    39a8:	5b540000 	blpl	15039b0 <__RW_SIZE__+0x150341c>
    39ac:	15d00800 	ldrbne	r0, [r0, #2048]	; 0x800
    39b0:	67010000 	strvs	r0, [r1, -r0]
    39b4:	001b1401 	andseq	r1, fp, r1, lsl #8
    39b8:	03c62100 	biceq	r2, r6, #0, 2
    39bc:	7fa20000 	svcvc	0x00a20000
    39c0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    39c4:	005b6c00 	subseq	r6, fp, r0, lsl #24
    39c8:	0015f008 	andseq	pc, r5, r8
    39cc:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    39d0:	00000307 	andeq	r0, r0, r7, lsl #6
    39d4:	00007fa2 	andeq	r7, r0, r2, lsr #31
    39d8:	0003a230 	andeq	sl, r3, r0, lsr r2
    39dc:	005b9e00 	subseq	r9, fp, r0, lsl #28
    39e0:	00160808 	andseq	r0, r6, r8, lsl #16
    39e4:	01680100 	cmneq	r8, r0, lsl #2
    39e8:	00001b45 	andeq	r1, r0, r5, asr #22
    39ec:	0003ae21 	andeq	sl, r3, r1, lsr #28
    39f0:	fb187200 	blx	6201fa <__RW_SIZE__+0x61fc66>
    39f4:	b6000002 	strlt	r0, [r0], -r2
    39f8:	2808005b 	stmdacs	r8, {r0, r1, r3, r4, r6}
    39fc:	01000016 	tsteq	r0, r6, lsl r0
    3a00:	030721a4 	movweq	r2, #29092	; 0x71a4
    3a04:	00720000 	rsbseq	r0, r2, r0
    3a08:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3a0c:	5bee0000 	blpl	ffb83a14 <MSP_BASE+0xdfb7ea14>
    3a10:	16400800 	strbne	r0, [r0], -r0, lsl #16
    3a14:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3a18:	001b7601 	andseq	r7, fp, r1, lsl #12
    3a1c:	03c61b00 	biceq	r1, r6, #0, 22
    3a20:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3a24:	000002fb 	strdeq	r0, [r0], -fp
    3a28:	08005c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, lr}
    3a2c:	00001660 	andeq	r1, r0, r0, ror #12
    3a30:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3a34:	00000003 	andeq	r0, r0, r3
    3a38:	a2300000 	eorsge	r0, r0, #0
    3a3c:	36000003 	strcc	r0, [r0], -r3
    3a40:	7808005c 	stmdavc	r8, {r2, r3, r4, r6}
    3a44:	01000016 	tsteq	r0, r6, lsl r0
    3a48:	1ba7016a 	blne	fe9c3ff8 <MSP_BASE+0xde9beff8>
    3a4c:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    3a50:	26000003 	strcs	r0, [r0], -r3
    3a54:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3a58:	005c4e00 	subseq	r4, ip, r0, lsl #28
    3a5c:	00169808 	andseq	r9, r6, r8, lsl #16
    3a60:	1ba40100 	blne	fe903e68 <MSP_BASE+0xde8fee68>
    3a64:	00000307 	andeq	r0, r0, r7, lsl #6
    3a68:	30000026 	andcc	r0, r0, r6, lsr #32
    3a6c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3a70:	08005c80 	stmdaeq	r0, {r7, sl, fp, ip, lr}
    3a74:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    3a78:	d8016b01 	stmdale	r1, {r0, r8, r9, fp, sp, lr}
    3a7c:	1b00001b 	blne	3af0 <__RW_SIZE__+0x355c>
    3a80:	000003c6 	andeq	r0, r0, r6, asr #7
    3a84:	02fb1801 	rscseq	r1, fp, #65536	; 0x10000
    3a88:	5c980000 	ldcpl	0, cr0, [r8], {0}
    3a8c:	16d00800 	ldrbne	r0, [r0], r0, lsl #16
    3a90:	ac010000 	stcge	0, cr0, [r1], {-0}
    3a94:	0003071b 	andeq	r0, r3, fp, lsl r7
    3a98:	00000100 	andeq	r0, r0, r0, lsl #2
    3a9c:	0003a230 	andeq	sl, r3, r0, lsr r2
    3aa0:	005cca00 	subseq	ip, ip, r0, lsl #20
    3aa4:	0016e808 	andseq	lr, r6, r8, lsl #16
    3aa8:	016c0100 	cmneq	ip, r0, lsl #2
    3aac:	00001c09 	andeq	r1, r0, r9, lsl #24
    3ab0:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3ab4:	fb186000 	blx	61babe <__RW_SIZE__+0x61b52a>
    3ab8:	e2000002 	and	r0, r0, #2
    3abc:	0808005c 	stmdaeq	r8, {r2, r3, r4, r6}
    3ac0:	01000017 	tsteq	r0, r7, lsl r0
    3ac4:	030721a4 	movweq	r2, #29092	; 0x71a4
    3ac8:	00600000 	rsbeq	r0, r0, r0
    3acc:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3ad0:	5d140000 	ldcpl	0, cr0, [r4, #-0]
    3ad4:	17200800 	strne	r0, [r0, -r0, lsl #16]!
    3ad8:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3adc:	001c3a01 	andseq	r3, ip, r1, lsl #20
    3ae0:	03c61b00 	biceq	r1, r6, #0, 22
    3ae4:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    3ae8:	000002fb 	strdeq	r0, [r0], -fp
    3aec:	08005d2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, ip, lr}
    3af0:	00001740 	andeq	r1, r0, r0, asr #14
    3af4:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3af8:	0f000003 	svceq	0x00000003
    3afc:	ba300000 	blt	c03b04 <__RW_SIZE__+0xc03570>
    3b00:	5e000003 	cdppl	0, 0, cr0, cr0, cr3, {0}
    3b04:	5808005d 	stmdapl	r8, {r0, r2, r3, r4, r6}
    3b08:	01000017 	tsteq	r0, r7, lsl r0
    3b0c:	1c6b016e 	stfnee	f0, [fp], #-440	; 0xfffffe48
    3b10:	c61b0000 	ldrgt	r0, [fp], -r0
    3b14:	1d000003 	stcne	0, cr0, [r0, #-12]
    3b18:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3b1c:	005d7600 	subseq	r7, sp, r0, lsl #12
    3b20:	00177808 	andseq	r7, r7, r8, lsl #16
    3b24:	1bac0100 	blne	feb03f2c <MSP_BASE+0xdeafef2c>
    3b28:	00000307 	andeq	r0, r0, r7, lsl #6
    3b2c:	3000001d 	andcc	r0, r0, sp, lsl r0
    3b30:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3b34:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
    3b38:	00001790 	muleq	r0, r0, r7
    3b3c:	9c016f01 	stcls	15, cr6, [r1], {1}
    3b40:	1b00001c 	blne	3bb8 <__RW_SIZE__+0x3624>
    3b44:	000003c6 	andeq	r0, r0, r6, asr #7
    3b48:	02fb181a 	rscseq	r1, fp, #1703936	; 0x1a0000
    3b4c:	5dc00000 	stclpl	0, cr0, [r0]
    3b50:	17b00800 	ldrne	r0, [r0, r0, lsl #16]!
    3b54:	ac010000 	stcge	0, cr0, [r1], {-0}
    3b58:	0003071b 	andeq	r0, r3, fp, lsl r7
    3b5c:	00001a00 	andeq	r1, r0, r0, lsl #20
    3b60:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3b64:	005df200 	subseq	pc, sp, r0, lsl #4
    3b68:	0017c808 	andseq	ip, r7, r8, lsl #16
    3b6c:	01700100 	cmneq	r0, r0, lsl #2
    3b70:	00001ccd 	andeq	r1, r0, sp, asr #25
    3b74:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3b78:	fb180a00 	blx	606382 <__RW_SIZE__+0x605dee>
    3b7c:	0a000002 	beq	3b8c <__RW_SIZE__+0x35f8>
    3b80:	e808005e 	stmda	r8, {r1, r2, r3, r4, r6}
    3b84:	01000017 	tsteq	r0, r7, lsl r0
    3b88:	03071bac 	movweq	r1, #31660	; 0x7bac
    3b8c:	000a0000 	andeq	r0, sl, r0
    3b90:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3b94:	5e3c0000 	cdppl	0, 3, cr0, cr12, cr0, {0}
    3b98:	18000800 	stmdane	r0, {fp}
    3b9c:	71010000 	mrsvc	r0, (UNDEF: 1)
    3ba0:	001cfe01 	andseq	pc, ip, r1, lsl #28
    3ba4:	03c61b00 	biceq	r1, r6, #0, 22
    3ba8:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    3bac:	000002fb 	strdeq	r0, [r0], -fp
    3bb0:	08005e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp, ip, lr}
    3bb4:	00001820 	andeq	r1, r0, r0, lsr #16
    3bb8:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3bbc:	0d000003 	stceq	0, cr0, [r0, #-12]
    3bc0:	ba300000 	blt	c03bc8 <__RW_SIZE__+0xc03634>
    3bc4:	86000003 	strhi	r0, [r0], -r3
    3bc8:	3808005e 	stmdacc	r8, {r1, r2, r3, r4, r6}
    3bcc:	01000018 	tsteq	r0, r8, lsl r0
    3bd0:	1d2f0172 	stfnes	f0, [pc, #-456]!	; 3a10 <__RW_SIZE__+0x347c>
    3bd4:	c61b0000 	ldrgt	r0, [fp], -r0
    3bd8:	07000003 	streq	r0, [r0, -r3]
    3bdc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3be0:	005e9e00 	subseq	r9, lr, r0, lsl #28
    3be4:	00185808 	andseq	r5, r8, r8, lsl #16
    3be8:	1bac0100 	blne	feb03ff0 <MSP_BASE+0xdeafeff0>
    3bec:	00000307 	andeq	r0, r0, r7, lsl #6
    3bf0:	30000007 	andcc	r0, r0, r7
    3bf4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3bf8:	08005ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, lr}
    3bfc:	00001870 	andeq	r1, r0, r0, ror r8
    3c00:	60017301 	andvs	r7, r1, r1, lsl #6
    3c04:	1b00001d 	blne	3c80 <__RW_SIZE__+0x36ec>
    3c08:	000003c6 	andeq	r0, r0, r6, asr #7
    3c0c:	02fb1849 	rscseq	r1, fp, #4784128	; 0x490000
    3c10:	5ee80000 	cdppl	0, 14, cr0, cr8, cr0, {0}
    3c14:	18900800 	ldmne	r0, {fp}
    3c18:	ac010000 	stcge	0, cr0, [r1], {-0}
    3c1c:	0003071b 	andeq	r0, r3, fp, lsl r7
    3c20:	00004900 	andeq	r4, r0, r0, lsl #18
    3c24:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3c28:	005f1a00 	subseq	r1, pc, r0, lsl #20
    3c2c:	0018a808 	andseq	sl, r8, r8, lsl #16
    3c30:	01740100 	cmneq	r4, r0, lsl #2
    3c34:	00001d91 	muleq	r0, r1, sp
    3c38:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3c3c:	fb186600 	blx	61d446 <__RW_SIZE__+0x61ceb2>
    3c40:	32000002 	andcc	r0, r0, #2
    3c44:	c808005f 	stmdagt	r8, {r0, r1, r2, r3, r4, r6}
    3c48:	01000018 	tsteq	r0, r8, lsl r0
    3c4c:	03071bac 	movweq	r1, #31660	; 0x7bac
    3c50:	00660000 	rsbeq	r0, r6, r0
    3c54:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3c58:	5f640000 	svcpl	0x00640000
    3c5c:	18e00800 	stmiane	r0!, {fp}^
    3c60:	75010000 	strvc	r0, [r1, #-0]
    3c64:	001dc201 	andseq	ip, sp, r1, lsl #4
    3c68:	03c61b00 	biceq	r1, r6, #0, 22
    3c6c:	183b0000 	ldmdane	fp!, {}	; <UNPREDICTABLE>
    3c70:	000002fb 	strdeq	r0, [r0], -fp
    3c74:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    3c78:	00001900 	andeq	r1, r0, r0, lsl #18
    3c7c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3c80:	3b000003 	blcc	3c94 <__RW_SIZE__+0x3700>
    3c84:	ba300000 	blt	c03c8c <__RW_SIZE__+0xc036f8>
    3c88:	ae000003 	cdpge	0, 0, cr0, cr0, cr3, {0}
    3c8c:	1808005f 	stmdane	r8, {r0, r1, r2, r3, r4, r6}
    3c90:	01000019 	tsteq	r0, r9, lsl r0
    3c94:	1df30176 	ldfnee	f0, [r3, #472]!	; 0x1d8
    3c98:	c61b0000 	ldrgt	r0, [fp], -r0
    3c9c:	07000003 	streq	r0, [r0, -r3]
    3ca0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3ca4:	005fc600 	subseq	ip, pc, r0, lsl #12
    3ca8:	00193808 	andseq	r3, r9, r8, lsl #16
    3cac:	1bac0100 	blne	feb040b4 <MSP_BASE+0xdeaff0b4>
    3cb0:	00000307 	andeq	r0, r0, r7, lsl #6
    3cb4:	30000007 	andcc	r0, r0, r7
    3cb8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3cbc:	08005ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3cc0:	00001950 	andeq	r1, r0, r0, asr r9
    3cc4:	24017701 	strcs	r7, [r1], #-1793	; 0xfffff8ff
    3cc8:	1b00001e 	blne	3d48 <__RW_SIZE__+0x37b4>
    3ccc:	000003c6 	andeq	r0, r0, r6, asr #7
    3cd0:	02fb1811 	rscseq	r1, fp, #1114112	; 0x110000
    3cd4:	60100000 	andsvs	r0, r0, r0
    3cd8:	19700800 	ldmdbne	r0!, {fp}^
    3cdc:	ac010000 	stcge	0, cr0, [r1], {-0}
    3ce0:	0003071b 	andeq	r0, r3, fp, lsl r7
    3ce4:	00001100 	andeq	r1, r0, r0, lsl #2
    3ce8:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3cec:	00604200 	rsbeq	r4, r0, r0, lsl #4
    3cf0:	00198808 	andseq	r8, r9, r8, lsl #16
    3cf4:	01780100 	cmneq	r8, r0, lsl #2
    3cf8:	00001e55 	andeq	r1, r0, r5, asr lr
    3cfc:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3d00:	fb180100 	blx	60410a <__RW_SIZE__+0x603b76>
    3d04:	5a000002 	bpl	3d14 <__RW_SIZE__+0x3780>
    3d08:	a8080060 	stmdage	r8, {r5, r6}
    3d0c:	01000019 	tsteq	r0, r9, lsl r0
    3d10:	03071bac 	movweq	r1, #31660	; 0x7bac
    3d14:	00010000 	andeq	r0, r1, r0
    3d18:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3d1c:	608c0000 	addvs	r0, ip, r0
    3d20:	19c00800 	stmibne	r0, {fp}^
    3d24:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3d28:	001e8601 	andseq	r8, lr, r1, lsl #12
    3d2c:	03c61b00 	biceq	r1, r6, #0, 22
    3d30:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3d34:	000002fb 	strdeq	r0, [r0], -fp
    3d38:	080060a4 	stmdaeq	r0, {r2, r5, r7, sp, lr}
    3d3c:	000019e0 	andeq	r1, r0, r0, ror #19
    3d40:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3d44:	09000003 	stmdbeq	r0, {r0, r1}
    3d48:	ba300000 	blt	c03d50 <__RW_SIZE__+0xc037bc>
    3d4c:	d6000003 	strle	r0, [r0], -r3
    3d50:	f8080060 			; <UNDEFINED> instruction: 0xf8080060
    3d54:	01000019 	tsteq	r0, r9, lsl r0
    3d58:	1eb7017a 	mrcne	1, 5, r0, cr7, cr10, {3}
    3d5c:	c61b0000 	ldrgt	r0, [fp], -r0
    3d60:	05000003 	streq	r0, [r0, #-3]
    3d64:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3d68:	0060ee00 	rsbeq	lr, r0, r0, lsl #28
    3d6c:	001a1808 	andseq	r1, sl, r8, lsl #16
    3d70:	1bac0100 	blne	feb04178 <MSP_BASE+0xdeaff178>
    3d74:	00000307 	andeq	r0, r0, r7, lsl #6
    3d78:	30000005 	andcc	r0, r0, r5
    3d7c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3d80:	08006120 	stmdaeq	r0, {r5, r8, sp, lr}
    3d84:	00001a30 	andeq	r1, r0, r0, lsr sl
    3d88:	e8017b01 	stmda	r1, {r0, r8, r9, fp, ip, sp, lr}
    3d8c:	1b00001e 	blne	3e0c <__RW_SIZE__+0x3878>
    3d90:	000003c6 	andeq	r0, r0, r6, asr #7
    3d94:	02fb1804 	rscseq	r1, fp, #4, 16	; 0x40000
    3d98:	61380000 	teqvs	r8, r0
    3d9c:	1a500800 	bne	1405da4 <__RW_SIZE__+0x1405810>
    3da0:	ac010000 	stcge	0, cr0, [r1], {-0}
    3da4:	0003071b 	andeq	r0, r3, fp, lsl r7
    3da8:	00000400 	andeq	r0, r0, r0, lsl #8
    3dac:	0003a230 	andeq	sl, r3, r0, lsr r2
    3db0:	00616a00 	rsbeq	r6, r1, r0, lsl #20
    3db4:	001a6808 	andseq	r6, sl, r8, lsl #16
    3db8:	017c0100 	cmneq	ip, r0, lsl #2
    3dbc:	00001f19 	andeq	r1, r0, r9, lsl pc
    3dc0:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3dc4:	fb186100 	blx	61c1ce <__RW_SIZE__+0x61bc3a>
    3dc8:	82000002 	andhi	r0, r0, #2
    3dcc:	88080061 	stmdahi	r8, {r0, r5, r6}
    3dd0:	0100001a 	tsteq	r0, sl, lsl r0
    3dd4:	030721a4 	movweq	r2, #29092	; 0x71a4
    3dd8:	00610000 	rsbeq	r0, r1, r0
    3ddc:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3de0:	61ba0000 			; <UNDEFINED> instruction: 0x61ba0000
    3de4:	1aa00800 	bne	fe805dec <MSP_BASE+0xde800dec>
    3de8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3dec:	001f4a01 	andseq	r4, pc, r1, lsl #20
    3df0:	03c61b00 	biceq	r1, r6, #0, 22
    3df4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3df8:	000002fb 	strdeq	r0, [r0], -fp
    3dfc:	080061d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sp, lr}
    3e00:	00001ac0 	andeq	r1, r0, r0, asr #21
    3e04:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3e08:	00000003 	andeq	r0, r0, r3
    3e0c:	ba300000 	blt	c03e14 <__RW_SIZE__+0xc03880>
    3e10:	02000003 	andeq	r0, r0, #3
    3e14:	d8080062 	stmdale	r8, {r1, r5, r6}
    3e18:	0100001a 	tsteq	r0, sl, lsl r0
    3e1c:	1f7b017e 	svcne	0x007b017e
    3e20:	c61b0000 	ldrgt	r0, [fp], -r0
    3e24:	18000003 	stmdane	r0, {r0, r1}
    3e28:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3e2c:	00621a00 	rsbeq	r1, r2, r0, lsl #20
    3e30:	001af808 	andseq	pc, sl, r8, lsl #16
    3e34:	1bac0100 	blne	feb0423c <MSP_BASE+0xdeaff23c>
    3e38:	00000307 	andeq	r0, r0, r7, lsl #6
    3e3c:	30000018 	andcc	r0, r0, r8, lsl r0
    3e40:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3e44:	0800624c 	stmdaeq	r0, {r2, r3, r6, r9, sp, lr}
    3e48:	00001b10 	andeq	r1, r0, r0, lsl fp
    3e4c:	ac017f01 	stcge	15, cr7, [r1], {1}
    3e50:	1b00001f 	blne	3ed4 <__RW_SIZE__+0x3940>
    3e54:	000003c6 	andeq	r0, r0, r6, asr #7
    3e58:	02fb181d 	rscseq	r1, fp, #1900544	; 0x1d0000
    3e5c:	62640000 	rsbvs	r0, r4, #0
    3e60:	1b300800 	blne	c05e68 <__RW_SIZE__+0xc058d4>
    3e64:	ac010000 	stcge	0, cr0, [r1], {-0}
    3e68:	0003071b 	andeq	r0, r3, fp, lsl r7
    3e6c:	00001d00 	andeq	r1, r0, r0, lsl #26
    3e70:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3e74:	00629600 	rsbeq	r9, r2, r0, lsl #12
    3e78:	001b4808 	andseq	r4, fp, r8, lsl #16
    3e7c:	01800100 	orreq	r0, r0, r0, lsl #2
    3e80:	00001fdd 	ldrdeq	r1, [r0], -sp
    3e84:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3e88:	fb180200 	blx	604692 <__RW_SIZE__+0x6040fe>
    3e8c:	ae000002 	cdpge	0, 0, cr0, cr0, cr2, {0}
    3e90:	68080062 	stmdavs	r8, {r1, r5, r6}
    3e94:	0100001b 	tsteq	r0, fp, lsl r0
    3e98:	03071bac 	movweq	r1, #31660	; 0x7bac
    3e9c:	00020000 	andeq	r0, r2, r0
    3ea0:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3ea4:	62e00000 	rscvs	r0, r0, #0
    3ea8:	1b800800 	blne	fe005eb0 <MSP_BASE+0xde000eb0>
    3eac:	81010000 	mrshi	r0, (UNDEF: 1)
    3eb0:	00200e01 	eoreq	r0, r0, r1, lsl #28
    3eb4:	03c61b00 	biceq	r1, r6, #0, 22
    3eb8:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    3ebc:	000002fb 	strdeq	r0, [r0], -fp
    3ec0:	080062f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp, lr}
    3ec4:	00001ba0 	andeq	r1, r0, r0, lsr #23
    3ec8:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3ecc:	0f000003 	svceq	0x00000003
    3ed0:	ba300000 	blt	c03ed8 <__RW_SIZE__+0xc03944>
    3ed4:	2a000003 	bcs	3ee8 <__RW_SIZE__+0x3954>
    3ed8:	b8080063 	stmdalt	r8, {r0, r1, r5, r6}
    3edc:	0100001b 	tsteq	r0, fp, lsl r0
    3ee0:	203f0182 	eorscs	r0, pc, r2, lsl #3
    3ee4:	c61b0000 	ldrgt	r0, [fp], -r0
    3ee8:	04000003 	streq	r0, [r0], #-3
    3eec:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3ef0:	00634200 	rsbeq	r4, r3, r0, lsl #4
    3ef4:	001bd808 	andseq	sp, fp, r8, lsl #16
    3ef8:	1bac0100 	blne	feb04300 <MSP_BASE+0xdeaff300>
    3efc:	00000307 	andeq	r0, r0, r7, lsl #6
    3f00:	30000004 	andcc	r0, r0, r4
    3f04:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3f08:	08006374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, lr}
    3f0c:	00001bf0 	strdeq	r1, [r0], -r0
    3f10:	70018301 	andvc	r8, r1, r1, lsl #6
    3f14:	1b000020 	blne	3f9c <__RW_SIZE__+0x3a08>
    3f18:	000003c6 	andeq	r0, r0, r6, asr #7
    3f1c:	02fb1836 	rscseq	r1, fp, #3538944	; 0x360000
    3f20:	638c0000 	orrvs	r0, ip, #0
    3f24:	1c100800 	ldcne	8, cr0, [r0], {-0}
    3f28:	ac010000 	stcge	0, cr0, [r1], {-0}
    3f2c:	0003071b 	andeq	r0, r3, fp, lsl r7
    3f30:	00003600 	andeq	r3, r0, r0, lsl #12
    3f34:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3f38:	0063be00 	rsbeq	fp, r3, r0, lsl #28
    3f3c:	001c2808 	andseq	r2, ip, r8, lsl #16
    3f40:	01840100 	orreq	r0, r4, r0, lsl #2
    3f44:	000020a1 	andeq	r2, r0, r1, lsr #1
    3f48:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3f4c:	fb181300 	blx	608b56 <__RW_SIZE__+0x6085c2>
    3f50:	d6000002 	strle	r0, [r0], -r2
    3f54:	48080063 	stmdami	r8, {r0, r1, r5, r6}
    3f58:	0100001c 	tsteq	r0, ip, lsl r0
    3f5c:	03071bac 	movweq	r1, #31660	; 0x7bac
    3f60:	00130000 	andseq	r0, r3, r0
    3f64:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3f68:	64080000 	strvs	r0, [r8], #-0
    3f6c:	1c600800 	stclne	8, cr0, [r0], #-0
    3f70:	85010000 	strhi	r0, [r1, #-0]
    3f74:	0020d201 	eoreq	sp, r0, r1, lsl #4
    3f78:	03c61b00 	biceq	r1, r6, #0, 22
    3f7c:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    3f80:	000002fb 	strdeq	r0, [r0], -fp
    3f84:	08006420 	stmdaeq	r0, {r5, sl, sp, lr}
    3f88:	00001c80 	andeq	r1, r0, r0, lsl #25
    3f8c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3f90:	4c000003 	stcmi	0, cr0, [r0], {3}
    3f94:	ba300000 	blt	c03f9c <__RW_SIZE__+0xc03a08>
    3f98:	52000003 	andpl	r0, r0, #3
    3f9c:	98080064 	stmdals	r8, {r2, r5, r6}
    3fa0:	0100001c 	tsteq	r0, ip, lsl r0
    3fa4:	21030186 	smlabbcs	r3, r6, r1, r0
    3fa8:	c61b0000 	ldrgt	r0, [fp], -r0
    3fac:	07000003 	streq	r0, [r0, -r3]
    3fb0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3fb4:	00646a00 	rsbeq	r6, r4, r0, lsl #20
    3fb8:	001cb808 	andseq	fp, ip, r8, lsl #16
    3fbc:	1bac0100 	blne	feb043c4 <MSP_BASE+0xdeaff3c4>
    3fc0:	00000307 	andeq	r0, r0, r7, lsl #6
    3fc4:	30000007 	andcc	r0, r0, r7
    3fc8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3fcc:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
    3fd0:	00001cd0 	ldrdeq	r1, [r0], -r0
    3fd4:	34018701 	strcc	r8, [r1], #-1793	; 0xfffff8ff
    3fd8:	1b000021 	blne	4064 <__RW_SIZE__+0x3ad0>
    3fdc:	000003c6 	andeq	r0, r0, r6, asr #7
    3fe0:	02fb1813 	rscseq	r1, fp, #1245184	; 0x130000
    3fe4:	64b40000 	ldrtvs	r0, [r4], #0
    3fe8:	1cf00800 	ldclne	8, cr0, [r0]
    3fec:	ac010000 	stcge	0, cr0, [r1], {-0}
    3ff0:	0003071b 	andeq	r0, r3, fp, lsl r7
    3ff4:	00001300 	andeq	r1, r0, r0, lsl #6
    3ff8:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3ffc:	0064e600 	rsbeq	lr, r4, r0, lsl #12
    4000:	001d0808 	andseq	r0, sp, r8, lsl #16
    4004:	01880100 	orreq	r0, r8, r0, lsl #2
    4008:	00002165 	andeq	r2, r0, r5, ror #2
    400c:	0003c61b 	andeq	ip, r3, fp, lsl r6
    4010:	fb180f00 	blx	607c1a <__RW_SIZE__+0x607686>
    4014:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    4018:	28080064 	stmdacs	r8, {r2, r5, r6}
    401c:	0100001d 	tsteq	r0, sp, lsl r0
    4020:	03071bac 	movweq	r1, #31660	; 0x7bac
    4024:	000f0000 	andeq	r0, pc, r0
    4028:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    402c:	65300000 	ldrvs	r0, [r0, #-0]!
    4030:	1d400800 	stclne	8, cr0, [r0, #-0]
    4034:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4038:	00219601 	eoreq	r9, r1, r1, lsl #12
    403c:	03c61b00 	biceq	r1, r6, #0, 22
    4040:	182e0000 	stmdane	lr!, {}	; <UNPREDICTABLE>
    4044:	000002fb 	strdeq	r0, [r0], -fp
    4048:	08006548 	stmdaeq	r0, {r3, r6, r8, sl, sp, lr}
    404c:	00001d60 	andeq	r1, r0, r0, ror #26
    4050:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    4054:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    4058:	ba300000 	blt	c04060 <__RW_SIZE__+0xc03acc>
    405c:	7a000003 	bvc	4070 <__RW_SIZE__+0x3adc>
    4060:	78080065 	stmdavc	r8, {r0, r2, r5, r6}
    4064:	0100001d 	tsteq	r0, sp, lsl r0
    4068:	21c7018a 	biccs	r0, r7, sl, lsl #3
    406c:	c61b0000 	ldrgt	r0, [fp], -r0
    4070:	2f000003 	svccs	0x00000003
    4074:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    4078:	00659200 	rsbeq	r9, r5, r0, lsl #4
    407c:	001d9808 	andseq	r9, sp, r8, lsl #16
    4080:	1bac0100 	blne	feb04488 <MSP_BASE+0xdeaff488>
    4084:	00000307 	andeq	r0, r0, r7, lsl #6
    4088:	3000002f 	andcc	r0, r0, pc, lsr #32
    408c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4090:	080065c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, lr}
    4094:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
    4098:	f8018b01 			; <UNDEFINED> instruction: 0xf8018b01
    409c:	1b000021 	blne	4128 <__RW_SIZE__+0x3b94>
    40a0:	000003c6 	andeq	r0, r0, r6, asr #7
    40a4:	02fb1805 	rscseq	r1, fp, #327680	; 0x50000
    40a8:	65dc0000 	ldrbvs	r0, [ip]
    40ac:	1dd00800 	ldclne	8, cr0, [r0]
    40b0:	ac010000 	stcge	0, cr0, [r1], {-0}
    40b4:	0003071b 	andeq	r0, r3, fp, lsl r7
    40b8:	00000500 	andeq	r0, r0, r0, lsl #10
    40bc:	0003a230 	andeq	sl, r3, r0, lsr r2
    40c0:	00660e00 	rsbeq	r0, r6, r0, lsl #28
    40c4:	001de808 	andseq	lr, sp, r8, lsl #16
    40c8:	018c0100 	orreq	r0, ip, r0, lsl #2
    40cc:	00002229 	andeq	r2, r0, r9, lsr #4
    40d0:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    40d4:	fb182b00 	blx	60ecde <__RW_SIZE__+0x60e74a>
    40d8:	26000002 	strcs	r0, [r0], -r2
    40dc:	08080066 	stmdaeq	r8, {r1, r2, r5, r6}
    40e0:	0100001e 	tsteq	r0, lr, lsl r0
    40e4:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    40e8:	002b0000 	eoreq	r0, fp, r0
    40ec:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    40f0:	665e0000 	ldrbvs	r0, [lr], -r0
    40f4:	1e200800 	cdpne	8, 2, cr0, cr0, cr0, {0}
    40f8:	8d010000 	stchi	0, cr0, [r1, #-0]
    40fc:	00225a01 	eoreq	r5, r2, r1, lsl #20
    4100:	03c61b00 	biceq	r1, r6, #0, 22
    4104:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4108:	000002fb 	strdeq	r0, [r0], -fp
    410c:	08006676 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, sp, lr}
    4110:	00001e40 	andeq	r1, r0, r0, asr #28
    4114:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    4118:	00000003 	andeq	r0, r0, r3
    411c:	ba300000 	blt	c04124 <__RW_SIZE__+0xc03b90>
    4120:	ac000003 	stcge	0, cr0, [r0], {3}
    4124:	58080066 	stmdapl	r8, {r1, r2, r5, r6}
    4128:	0100001e 	tsteq	r0, lr, lsl r0
    412c:	228b018e 	addcs	r0, fp, #-2147483613	; 0x80000023
    4130:	c61b0000 	ldrgt	r0, [fp], -r0
    4134:	00000003 	andeq	r0, r0, r3
    4138:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    413c:	0066c400 	rsbeq	ip, r6, r0, lsl #8
    4140:	001e7808 	andseq	r7, lr, r8, lsl #16
    4144:	1bac0100 	blne	feb0454c <MSP_BASE+0xdeaff54c>
    4148:	00000307 	andeq	r0, r0, r7, lsl #6
    414c:	30000000 	andcc	r0, r0, r0
    4150:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4154:	080066f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, lr}
    4158:	00001e90 	muleq	r0, r0, lr
    415c:	bc018f01 	stclt	15, cr8, [r1], {1}
    4160:	1b000022 	blne	41f0 <__RW_SIZE__+0x3c5c>
    4164:	000003c6 	andeq	r0, r0, r6, asr #7
    4168:	02fb1801 	rscseq	r1, fp, #65536	; 0x10000
    416c:	670c0000 	strvs	r0, [ip, -r0]
    4170:	1eb00800 	cdpne	8, 11, cr0, cr0, cr0, {0}
    4174:	ac010000 	stcge	0, cr0, [r1], {-0}
    4178:	0003071b 	andeq	r0, r3, fp, lsl r7
    417c:	00000100 	andeq	r0, r0, r0, lsl #2
    4180:	0003ba30 	andeq	fp, r3, r0, lsr sl
    4184:	00673e00 	rsbeq	r3, r7, r0, lsl #28
    4188:	001ec808 	andseq	ip, lr, r8, lsl #16
    418c:	01900100 	orrseq	r0, r0, r0, lsl #2
    4190:	000022ed 	andeq	r2, r0, sp, ror #5
    4194:	0003c61b 	andeq	ip, r3, fp, lsl r6
    4198:	fb183f00 	blx	613da2 <__RW_SIZE__+0x61380e>
    419c:	56000002 	strpl	r0, [r0], -r2
    41a0:	e8080067 	stmda	r8, {r0, r1, r2, r5, r6}
    41a4:	0100001e 	tsteq	r0, lr, lsl r0
    41a8:	03071bac 	movweq	r1, #31660	; 0x7bac
    41ac:	003f0000 	eorseq	r0, pc, r0
    41b0:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    41b4:	67880000 	strvs	r0, [r8, r0]
    41b8:	1f000800 	svcne	0x00000800
    41bc:	91010000 	mrsls	r0, (UNDEF: 1)
    41c0:	00231e01 	eoreq	r1, r3, r1, lsl #28
    41c4:	03ae1b00 			; <UNDEFINED> instruction: 0x03ae1b00
    41c8:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    41cc:	000002fb 	strdeq	r0, [r0], -fp
    41d0:	080067a0 	stmdaeq	r0, {r5, r7, r8, r9, sl, sp, lr}
    41d4:	00001f20 	andeq	r1, r0, r0, lsr #30
    41d8:	071ba401 	ldreq	sl, [fp, -r1, lsl #8]
    41dc:	2a000003 	bcs	41f0 <__RW_SIZE__+0x3c5c>
    41e0:	ba300000 	blt	c041e8 <__RW_SIZE__+0xc03c54>
    41e4:	d8000003 	stmdale	r0, {r0, r1}
    41e8:	38080067 	stmdacc	r8, {r0, r1, r2, r5, r6}
    41ec:	0100001f 	tsteq	r0, pc, lsl r0
    41f0:	234f0192 	movtcs	r0, #61842	; 0xf192
    41f4:	c61b0000 	ldrgt	r0, [fp], -r0
    41f8:	00000003 	andeq	r0, r0, r3
    41fc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    4200:	0067f000 	rsbeq	pc, r7, r0
    4204:	001f5808 	andseq	r5, pc, r8, lsl #16
    4208:	1bac0100 	blne	feb04610 <MSP_BASE+0xdeaff610>
    420c:	00000307 	andeq	r0, r0, r7, lsl #6
    4210:	30000000 	andcc	r0, r0, r0
    4214:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4218:	08006826 	stmdaeq	r0, {r1, r2, r5, fp, sp, lr}
    421c:	00001f70 	andeq	r1, r0, r0, ror pc
    4220:	80019301 	andhi	r9, r1, r1, lsl #6
    4224:	1b000023 	blne	42b8 <__RW_SIZE__+0x3d24>
    4228:	000003c6 	andeq	r0, r0, r6, asr #7
    422c:	02fb1800 	rscseq	r1, fp, #0, 16
    4230:	683e0000 	ldmdavs	lr!, {}	; <UNPREDICTABLE>
    4234:	1f900800 	svcne	0x00900800
    4238:	ac010000 	stcge	0, cr0, [r1], {-0}
    423c:	0003071b 	andeq	r0, r3, fp, lsl r7
    4240:	00000000 	andeq	r0, r0, r0
    4244:	0003ba30 	andeq	fp, r3, r0, lsr sl
    4248:	00687400 	rsbeq	r7, r8, r0, lsl #8
    424c:	001fa808 	andseq	sl, pc, r8, lsl #16
    4250:	01940100 	orrseq	r0, r4, r0, lsl #2
    4254:	000023b1 			; <UNDEFINED> instruction: 0x000023b1
    4258:	0003c61b 	andeq	ip, r3, fp, lsl r6
    425c:	fb180000 	blx	604266 <__RW_SIZE__+0x603cd2>
    4260:	8c000002 	stchi	0, cr0, [r0], {2}
    4264:	c8080068 	stmdagt	r8, {r3, r5, r6}
    4268:	0100001f 	tsteq	r0, pc, lsl r0
    426c:	03071bac 	movweq	r1, #31660	; 0x7bac
    4270:	00000000 	andeq	r0, r0, r0
    4274:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    4278:	68bc0000 	ldmvs	ip!, {}	; <UNPREDICTABLE>
    427c:	1fe00800 	svcne	0x00e00800
    4280:	95010000 	strls	r0, [r1, #-0]
    4284:	0023e201 	eoreq	lr, r3, r1, lsl #4
    4288:	03c62100 	biceq	r2, r6, #0, 2
    428c:	186f0000 	stmdane	pc!, {}^	; <UNPREDICTABLE>
    4290:	000002fb 	strdeq	r0, [r0], -fp
    4294:	080068d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, sp, lr}
    4298:	00002000 	andeq	r2, r0, r0
    429c:	0721ac01 	streq	sl, [r1, -r1, lsl #24]!
    42a0:	6f000003 	svcvs	0x00000003
    42a4:	a2300000 	eorsge	r0, r0, #0
    42a8:	06000003 	streq	r0, [r0], -r3
    42ac:	18080069 	stmdane	r8, {r0, r3, r5, r6}
    42b0:	01000020 	tsteq	r0, r0, lsr #32
    42b4:	24130196 	ldrcs	r0, [r3], #-406	; 0xfffffe6a
    42b8:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    42bc:	11000003 	tstne	r0, r3
    42c0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    42c4:	00691e00 	rsbeq	r1, r9, r0, lsl #28
    42c8:	00203808 	eoreq	r3, r0, r8, lsl #16
    42cc:	1ba40100 	blne	fe9046d4 <MSP_BASE+0xde8ff6d4>
    42d0:	00000307 	andeq	r0, r0, r7, lsl #6
    42d4:	30000011 	andcc	r0, r0, r1, lsl r0
    42d8:	00000313 	andeq	r0, r0, r3, lsl r3
    42dc:	0800694e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp, lr}
    42e0:	00002050 	andeq	r2, r0, r0, asr r0
    42e4:	3c019701 	stccc	7, cr9, [r1], {1}
    42e8:	1b000024 	blne	4380 <__RW_SIZE__+0x3dec>
    42ec:	0000031f 	andeq	r0, r0, pc, lsl r3
    42f0:	20501c78 	subscs	r1, r0, r8, ror ip
    42f4:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    42f8:	02000003 	andeq	r0, r0, #3
    42fc:	00006091 	muleq	r0, r1, r0
    4300:	0003a229 	andeq	sl, r3, r9, lsr #4
    4304:	00697000 	rsbeq	r7, r9, r0
    4308:	00005808 	andeq	r5, r0, r8, lsl #16
    430c:	01990100 	orrseq	r0, r9, r0, lsl #2
    4310:	0000246d 	andeq	r2, r0, sp, ror #8
    4314:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    4318:	fb182900 	blx	60e722 <__RW_SIZE__+0x60e18e>
    431c:	8a000002 	bhi	432c <__RW_SIZE__+0x3d98>
    4320:	68080069 	stmdavs	r8, {r0, r3, r5, r6}
    4324:	01000020 	tsteq	r0, r0, lsr #32
    4328:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    432c:	00290000 	eoreq	r0, r9, r0
    4330:	03632900 	cmneq	r3, #0, 18
    4334:	69cc0000 	stmibvs	ip, {}^	; <UNPREDICTABLE>
    4338:	00060800 	andeq	r0, r6, r0, lsl #16
    433c:	9d010000 	stcls	0, cr0, [r1, #-0]
    4340:	00249201 	eoreq	r9, r4, r1, lsl #4
    4344:	69d22a00 	ldmibvs	r2, {r9, fp, sp}^
    4348:	0ed40800 	cdpeq	8, 13, cr0, cr4, cr0, {0}
    434c:	01270000 	teqeq	r7, r0
    4350:	00740250 	rsbseq	r0, r4, r0, asr r2
    4354:	13290000 	teqne	r9, #0
    4358:	d2000003 	andle	r0, r0, #3
    435c:	1c080069 	stcne	0, cr0, [r8], {105}	; 0x69
    4360:	01000000 	mrseq	r0, (UNDEF: 0)
    4364:	24c0019e 	strbcs	r0, [r0], #414	; 0x19e
    4368:	1f340000 	svcne	0x00340000
    436c:	2c000003 	stccs	0, cr0, [r0], {3}
    4370:	69d23501 	ldmibvs	r2, {r0, r8, sl, ip, sp}^
    4374:	001c0800 	andseq	r0, ip, r0, lsl #16
    4378:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    437c:	02000003 	andeq	r0, r0, #3
    4380:	00006491 	muleq	r0, r1, r4
    4384:	0069cc25 	rsbeq	ip, r9, r5, lsr #24
    4388:	00059708 	andeq	r9, r5, r8, lsl #14
    438c:	5e2b0000 	cdppl	0, 2, cr0, cr11, cr0, {0}
    4390:	01000003 	tsteq	r0, r3
    4394:	6a0401a3 	bvs	104a28 <__RW_SIZE__+0x104494>
    4398:	03c00800 	biceq	r0, r0, #0, 16
    439c:	9c010000 	stcls	0, cr0, [r1], {-0}
    43a0:	000027ee 	andeq	r2, r0, lr, ror #15
    43a4:	0100782c 	tsteq	r0, ip, lsr #16
    43a8:	004501a3 	subeq	r0, r5, r3, lsr #3
    43ac:	178c0000 	strne	r0, [ip, r0]
    43b0:	792c0000 	stmdbvc	ip!, {}	; <UNPREDICTABLE>
    43b4:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    43b8:	00000045 	andeq	r0, r0, r5, asr #32
    43bc:	000017ad 	andeq	r1, r0, sp, lsr #15
    43c0:	000cb632 	andeq	fp, ip, r2, lsr r6
    43c4:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    43c8:	00000045 	andeq	r0, r0, r5, asr #32
    43cc:	000017ce 	andeq	r1, r0, lr, asr #15
    43d0:	00036c30 	andeq	r6, r3, r0, lsr ip
    43d4:	006a0600 	rsbeq	r0, sl, r0, lsl #12
    43d8:	00208808 	eoreq	r8, r0, r8, lsl #16
    43dc:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    43e0:	000027a1 	andeq	r2, r0, r1, lsr #15
    43e4:	00038116 	andeq	r8, r3, r6, lsl r1
    43e8:	0017ef00 	andseq	lr, r7, r0, lsl #30
    43ec:	03781600 	cmneq	r8, #0, 12
    43f0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    43f4:	b0180000 	andslt	r0, r8, r0
    43f8:	06000008 	streq	r0, [r0], -r8
    43fc:	8808006a 	stmdahi	r8, {r1, r3, r5, r6}
    4400:	01000020 	tsteq	r0, r0, lsr #32
    4404:	08da16ef 	ldmeq	sl, {r0, r1, r2, r3, r5, r6, r7, r9, sl, ip}^
    4408:	17ef0000 	strbne	r0, [pc, r0]!
    440c:	d0160000 	andsle	r0, r6, r0
    4410:	02000008 	andeq	r0, r0, #8
    4414:	16000018 			; <UNDEFINED> instruction: 0x16000018
    4418:	000008c6 	andeq	r0, r0, r6, asr #17
    441c:	000017ef 	andeq	r1, r0, pc, ror #15
    4420:	0008bc16 	andeq	fp, r8, r6, lsl ip
    4424:	00180200 	andseq	r0, r8, r0, lsl #4
    4428:	03a21700 			; <UNDEFINED> instruction: 0x03a21700
    442c:	6a060000 	bvs	184434 <__RW_SIZE__+0x183ea0>
    4430:	20a00800 	adccs	r0, r0, r0, lsl #16
    4434:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    4438:	00002597 	muleq	r0, r7, r5
    443c:	0003ae16 	andeq	sl, r3, r6, lsl lr
    4440:	00181500 	andseq	r1, r8, r0, lsl #10
    4444:	02fb1800 	rscseq	r1, fp, #0, 16
    4448:	6a2a0000 	bvs	a84450 <__RW_SIZE__+0xa83ebc>
    444c:	20d00800 	sbcscs	r0, r0, r0, lsl #16
    4450:	a4010000 	strge	r0, [r1], #-0
    4454:	00030719 	andeq	r0, r3, r9, lsl r7
    4458:	17000000 	strne	r0, [r0, -r0]
    445c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4460:	08006a64 	stmdaeq	r0, {r2, r5, r6, r9, fp, sp, lr}
    4464:	000020e8 	andeq	r2, r0, r8, ror #1
    4468:	25cddf01 	strbcs	sp, [sp, #3841]	; 0xf01
    446c:	c6160000 	ldrgt	r0, [r6], -r0
    4470:	28000003 	stmdacs	r0, {r0, r1}
    4474:	1a000018 	bne	44dc <__RW_SIZE__+0x3f48>
    4478:	000002fb 	strdeq	r0, [r0], -fp
    447c:	08006a84 	stmdaeq	r0, {r2, r7, r9, fp, sp, lr}
    4480:	00000020 	andeq	r0, r0, r0, lsr #32
    4484:	0716ac01 	ldreq	sl, [r6, -r1, lsl #24]
    4488:	3b000003 	blcc	449c <__RW_SIZE__+0x3f08>
    448c:	00000018 	andeq	r0, r0, r8, lsl r0
    4490:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    4494:	6ab00000 	bvs	fec0449c <MSP_BASE+0xdebff49c>
    4498:	21100800 	tstcs	r0, r0, lsl #16
    449c:	e0010000 	and	r0, r1, r0
    44a0:	000025ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    44a4:	0003c616 	andeq	ip, r3, r6, lsl r6
    44a8:	00184e00 	andseq	r4, r8, r0, lsl #28
    44ac:	02fb1800 	rscseq	r1, fp, #0, 16
    44b0:	6ace0000 	bvs	ff3844b8 <MSP_BASE+0xdf37f4b8>
    44b4:	21300800 	teqcs	r0, r0, lsl #16
    44b8:	ac010000 	stcge	0, cr0, [r1], {-0}
    44bc:	00030719 	andeq	r0, r3, r9, lsl r7
    44c0:	17000000 	strne	r0, [r0, -r0]
    44c4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    44c8:	08006b02 	stmdaeq	r0, {r1, r8, r9, fp, sp, lr}
    44cc:	00002148 	andeq	r2, r0, r8, asr #2
    44d0:	2635e101 	ldrtcs	lr, [r5], -r1, lsl #2
    44d4:	c6160000 	ldrgt	r0, [r6], -r0
    44d8:	61000003 	tstvs	r0, r3
    44dc:	18000018 	stmdane	r0, {r3, r4}
    44e0:	000002fb 	strdeq	r0, [r0], -fp
    44e4:	08006b22 	stmdaeq	r0, {r1, r5, r8, r9, fp, sp, lr}
    44e8:	00002168 	andeq	r2, r0, r8, ror #2
    44ec:	0716ac01 	ldreq	sl, [r6, -r1, lsl #24]
    44f0:	74000003 	strvc	r0, [r0], #-3
    44f4:	00000018 	andeq	r0, r0, r8, lsl r0
    44f8:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    44fc:	6b540000 	blvs	1504504 <__RW_SIZE__+0x1503f70>
    4500:	21800800 	orrcs	r0, r0, r0, lsl #16
    4504:	e2010000 	and	r0, r1, #0
    4508:	00002663 	andeq	r2, r0, r3, ror #12
    450c:	0003c619 	andeq	ip, r3, r9, lsl r6
    4510:	02fb1800 	rscseq	r1, fp, #0, 16
    4514:	6b6c0000 	blvs	1b0451c <__RW_SIZE__+0x1b03f88>
    4518:	21a00800 	lslcs	r0, r0, #16
    451c:	ac010000 	stcge	0, cr0, [r1], {-0}
    4520:	00030719 	andeq	r0, r3, r9, lsl r7
    4524:	17000000 	strne	r0, [r0, -r0]
    4528:	000003a2 	andeq	r0, r0, r2, lsr #7
    452c:	08006b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, lr}
    4530:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    4534:	2695e401 	ldrcs	lr, [r5], r1, lsl #8
    4538:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    453c:	87000003 	strhi	r0, [r0, -r3]
    4540:	18000018 	stmdane	r0, {r3, r4}
    4544:	000002fb 	strdeq	r0, [r0], -fp
    4548:	08006bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp, lr}
    454c:	000021e0 	andeq	r2, r0, r0, ror #3
    4550:	0719a401 	ldreq	sl, [r9, -r1, lsl #8]
    4554:	00000003 	andeq	r0, r0, r3
    4558:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    455c:	6be80000 	blvs	ffa04564 <MSP_BASE+0xdf9ff564>
    4560:	21f80800 	mvnscs	r0, r0, lsl #16
    4564:	e5010000 	str	r0, [r1, #-0]
    4568:	000026cb 	andeq	r2, r0, fp, asr #13
    456c:	0003c616 	andeq	ip, r3, r6, lsl r6
    4570:	00189a00 	andseq	r9, r8, r0, lsl #20
    4574:	02fb1a00 	rscseq	r1, fp, #0, 20
    4578:	6c080000 	stcvs	0, cr0, [r8], {-0}
    457c:	00200800 	eoreq	r0, r0, r0, lsl #16
    4580:	ac010000 	stcge	0, cr0, [r1], {-0}
    4584:	00030716 	andeq	r0, r3, r6, lsl r7
    4588:	0018ad00 	andseq	sl, r8, r0, lsl #26
    458c:	17000000 	strne	r0, [r0, -r0]
    4590:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4594:	08006c32 	stmdaeq	r0, {r1, r4, r5, sl, fp, sp, lr}
    4598:	00002220 	andeq	r2, r0, r0, lsr #4
    459c:	26fde601 	ldrbtcs	lr, [sp], r1, lsl #12
    45a0:	c6160000 	ldrgt	r0, [r6], -r0
    45a4:	c0000003 	andgt	r0, r0, r3
    45a8:	18000018 	stmdane	r0, {r3, r4}
    45ac:	000002fb 	strdeq	r0, [r0], -fp
    45b0:	08006c4a 	stmdaeq	r0, {r1, r3, r6, sl, fp, sp, lr}
    45b4:	00002240 	andeq	r2, r0, r0, asr #4
    45b8:	0719ac01 	ldreq	sl, [r9, -r1, lsl #24]
    45bc:	00000003 	andeq	r0, r0, r3
    45c0:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    45c4:	6c7c0000 	ldclvs	0, cr0, [ip], #-0
    45c8:	22580800 	subscs	r0, r8, #0, 16
    45cc:	e7010000 	str	r0, [r1, -r0]
    45d0:	00002733 	andeq	r2, r0, r3, lsr r7
    45d4:	0003c616 	andeq	ip, r3, r6, lsl r6
    45d8:	0018d300 	andseq	sp, r8, r0, lsl #6
    45dc:	02fb1800 	rscseq	r1, fp, #0, 16
    45e0:	6c940000 	ldcvs	0, cr0, [r4], {0}
    45e4:	22780800 	rsbscs	r0, r8, #0, 16
    45e8:	ac010000 	stcge	0, cr0, [r1], {-0}
    45ec:	00030716 	andeq	r0, r3, r6, lsl r7
    45f0:	0018e600 	andseq	lr, r8, r0, lsl #12
    45f4:	17000000 	strne	r0, [r0, -r0]
    45f8:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    45fc:	08006cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp, lr}
    4600:	00002290 	muleq	r0, r0, r2
    4604:	2761e801 	strbcs	lr, [r1, -r1, lsl #16]!
    4608:	c6190000 	ldrgt	r0, [r9], -r0
    460c:	18000003 	stmdane	r0, {r0, r1}
    4610:	000002fb 	strdeq	r0, [r0], -fp
    4614:	08006cdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, fp, sp, lr}
    4618:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    461c:	0719ac01 	ldreq	sl, [r9, -r1, lsl #24]
    4620:	00000003 	andeq	r0, r0, r3
    4624:	035b1800 	cmpeq	fp, #0, 16
    4628:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
    462c:	22c80800 	sbccs	r0, r8, #0, 16
    4630:	ea010000 	b	44638 <__RW_SIZE__+0x440a4>
    4634:	0003a218 	andeq	sl, r3, r8, lsl r2
    4638:	006d0c00 	rsbeq	r0, sp, r0, lsl #24
    463c:	0022e808 	eoreq	lr, r2, r8, lsl #16
    4640:	16d90100 	ldrbne	r0, [r9], r0, lsl #2
    4644:	000003ae 	andeq	r0, r0, lr, lsr #7
    4648:	000018f9 	strdeq	r1, [r0], -r9
    464c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    4650:	006d2600 	rsbeq	r2, sp, r0, lsl #12
    4654:	00231008 	eoreq	r1, r3, r8
    4658:	19a40100 	stmibne	r4!, {r8}
    465c:	00000307 	andeq	r0, r0, r7, lsl #6
    4660:	00000000 	andeq	r0, r0, r0
    4664:	045c3600 	ldrbeq	r3, [ip], #-1536	; 0xfffffa00
    4668:	6d580000 	ldclvs	0, cr0, [r8, #-0]
    466c:	23280800 	teqcs	r8, #0, 16
    4670:	a6010000 	strge	r0, [r1], -r0
    4674:	04681601 	strbteq	r1, [r8], #-1537	; 0xfffff9ff
    4678:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    467c:	fb370000 	blx	dc4686 <__RW_SIZE__+0xdc40f2>
    4680:	78000002 	stmdavc	r0, {r1}
    4684:	2008006d 	andcs	r0, r8, sp, rrx
    4688:	01000000 	mrseq	r0, (UNDEF: 0)
    468c:	0027d380 	eoreq	sp, r7, r0, lsl #7
    4690:	03071900 	movweq	r1, #30976	; 0x7900
    4694:	1a000000 	bne	469c <__RW_SIZE__+0x4108>
    4698:	000002fb 	strdeq	r0, [r0], -fp
    469c:	08006d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, lr}
    46a0:	00000018 	andeq	r0, r0, r8, lsl r0
    46a4:	07168101 	ldreq	r8, [r6, -r1, lsl #2]
    46a8:	1f000003 	svcne	0x00000003
    46ac:	00000019 	andeq	r0, r0, r9, lsl r0
    46b0:	82380000 	eorshi	r0, r8, #0
    46b4:	04000000 	streq	r0, [r0], #-0
    46b8:	033306ce 	teqeq	r3, #216006656	; 0xce00000
    46bc:	db390000 	blle	e446c4 <__RW_SIZE__+0xe44130>
    46c0:	01000008 	tsteq	r0, r8
    46c4:	0002f02d 	andeq	pc, r2, sp, lsr #32
    46c8:	94030500 	strls	r0, [r3], #-1280	; 0xfffffb00
    46cc:	39200005 	stmdbcc	r0!, {r0, r2}
    46d0:	000008e2 	andeq	r0, r0, r2, ror #17
    46d4:	00452f01 	subeq	r2, r5, r1, lsl #30
    46d8:	03050000 	movweq	r0, #20480	; 0x5000
    46dc:	200005a0 	andcs	r0, r0, r0, lsr #11
    46e0:	00091439 	andeq	r1, r9, r9, lsr r4
    46e4:	45300100 	ldrmi	r0, [r0, #-256]!	; 0xffffff00
    46e8:	05000000 	streq	r0, [r0, #-0]
    46ec:	00000003 	andeq	r0, r0, r3
    46f0:	01f70020 	mvnseq	r0, r0, lsr #32
    46f4:	00040000 	andeq	r0, r4, r0
    46f8:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
    46fc:	01080104 	tsteq	r8, r4, lsl #2
    4700:	0f010000 	svceq	0x00010000
    4704:	1300000a 	movwne	r0, #10
    4708:	c4000000 	strgt	r0, [r0], #-0
    470c:	7208006d 	andvc	r0, r8, #109	; 0x6d
    4710:	eb000000 	bl	4718 <__RW_SIZE__+0x4184>
    4714:	02000018 	andeq	r0, r0, #24
    4718:	00990601 	addseq	r0, r9, r1, lsl #12
    471c:	01020000 	mrseq	r0, (UNDEF: 2)
    4720:	00009708 	andeq	r9, r0, r8, lsl #14
    4724:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4728:	000000f2 	strdeq	r0, [r0], -r2
    472c:	6f070202 	svcvs	0x00070202
    4730:	02000000 	andeq	r0, r0, #0
    4734:	00050504 	andeq	r0, r5, r4, lsl #10
    4738:	a7030000 	strge	r0, [r3, -r0]
    473c:	03000001 	movweq	r0, #1
    4740:	00005350 	andeq	r5, r0, r0, asr r3
    4744:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4748:	000000cc 	andeq	r0, r0, ip, asr #1
    474c:	00050802 	andeq	r0, r5, r2, lsl #16
    4750:	02000000 	andeq	r0, r0, #0
    4754:	00c70708 	sbceq	r0, r7, r8, lsl #14
    4758:	04040000 	streq	r0, [r4], #-0
    475c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4760:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4764:	000000d1 	ldrdeq	r0, [r0], -r1
    4768:	de070402 	cdple	4, 0, cr0, cr7, cr2, {0}
    476c:	05000000 	streq	r0, [r0, #-0]
    4770:	00000048 	andeq	r0, r0, r8, asr #32
    4774:	e9021c06 	stmdb	r2, {r1, r2, sl, fp, ip}
    4778:	0000e703 	andeq	lr, r0, r3, lsl #14
    477c:	52430700 	subpl	r0, r3, #0, 14
    4780:	eb02004c 	bl	848b8 <__RW_SIZE__+0x84324>
    4784:	00007d03 	andeq	r7, r0, r3, lsl #26
    4788:	43070000 	movwmi	r0, #28672	; 0x7000
    478c:	02004852 	andeq	r4, r0, #5373952	; 0x520000
    4790:	007d03ec 	rsbseq	r0, sp, ip, ror #7
    4794:	07040000 	streq	r0, [r4, -r0]
    4798:	00524449 	subseq	r4, r2, r9, asr #8
    479c:	7d03ed02 	stcvc	13, cr14, [r3, #-8]
    47a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    47a4:	52444f07 	subpl	r4, r4, #7, 30
    47a8:	03ee0200 	mvneq	r0, #0, 4
    47ac:	0000007d 	andeq	r0, r0, sp, ror r0
    47b0:	03ac080c 			; <UNDEFINED> instruction: 0x03ac080c
    47b4:	ef020000 	svc	0x00020000
    47b8:	00007d03 	andeq	r7, r0, r3, lsl #26
    47bc:	42071000 	andmi	r1, r7, #0
    47c0:	02005252 	andeq	r5, r0, #536870917	; 0x20000005
    47c4:	007d03f0 	ldrshteq	r0, [sp], #-48	; 0xffffffd0
    47c8:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    47cc:	000007b9 			; <UNDEFINED> instruction: 0x000007b9
    47d0:	7d03f102 	stfvcd	f7, [r3, #-8]
    47d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    47d8:	06990900 	ldreq	r0, [r9], r0, lsl #18
    47dc:	f2020000 	vhadd.s8	d0, d2, d0
    47e0:	00008203 	andeq	r8, r0, r3, lsl #4
    47e4:	02280600 	eoreq	r0, r8, #0, 12
    47e8:	017e0434 	cmneq	lr, r4, lsr r4
    47ec:	43070000 	movwmi	r0, #28672	; 0x7000
    47f0:	36020052 			; <UNDEFINED> instruction: 0x36020052
    47f4:	00007d04 	andeq	r7, r0, r4, lsl #26
    47f8:	4f080000 	svcmi	0x00080000
    47fc:	02000008 	andeq	r0, r0, #8
    4800:	007d0437 	rsbseq	r0, sp, r7, lsr r4
    4804:	07040000 	streq	r0, [r4, -r0]
    4808:	00524943 	subseq	r4, r2, r3, asr #18
    480c:	7d043802 	stcvc	8, cr3, [r4, #-8]
    4810:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4814:	0000be08 	andeq	fp, r0, r8, lsl #28
    4818:	04390200 	ldrteq	r0, [r9], #-512	; 0xfffffe00
    481c:	0000007d 	andeq	r0, r0, sp, ror r0
    4820:	0066080c 	rsbeq	r0, r6, ip, lsl #16
    4824:	3a020000 	bcc	8482c <__RW_SIZE__+0x84298>
    4828:	00007d04 	andeq	r7, r0, r4, lsl #26
    482c:	52081000 	andpl	r1, r8, #0
    4830:	02000000 	andeq	r0, r0, #0
    4834:	007d043b 	rsbseq	r0, sp, fp, lsr r4
    4838:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    483c:	000000ae 	andeq	r0, r0, lr, lsr #1
    4840:	7d043c02 	stcvc	12, cr3, [r4, #-8]
    4844:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4848:	0000b608 	andeq	fp, r0, r8, lsl #12
    484c:	043d0200 	ldrteq	r0, [sp], #-512	; 0xfffffe00
    4850:	0000007d 	andeq	r0, r0, sp, ror r0
    4854:	000e081c 	andeq	r0, lr, ip, lsl r8
    4858:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    485c:	00007d04 	andeq	r7, r0, r4, lsl #26
    4860:	43072000 	movwmi	r2, #28672	; 0x7000
    4864:	02005253 	andeq	r5, r0, #805306373	; 0x30000005
    4868:	007d043f 	rsbseq	r0, sp, pc, lsr r4
    486c:	00240000 	eoreq	r0, r4, r0
    4870:	0000fc09 	andeq	pc, r0, r9, lsl #24
    4874:	044a0200 	strbeq	r0, [sl], #-512	; 0xfffffe00
    4878:	000000f3 	strdeq	r0, [r0], -r3
    487c:	a0080102 	andge	r0, r8, r2, lsl #2
    4880:	0a000000 	beq	4888 <__RW_SIZE__+0x42f4>
    4884:	00000a20 	andeq	r0, r0, r0, lsr #20
    4888:	6dc40301 	stclvs	3, cr0, [r4, #4]
    488c:	002e0800 	eoreq	r0, lr, r0, lsl #16
    4890:	9c010000 	stcls	0, cr0, [r1], {-0}
    4894:	000a030b 	andeq	r0, sl, fp, lsl #6
    4898:	f40a0100 	vst4.8	{d0,d2,d4,d6}, [sl], r0
    489c:	1c08006d 	stcne	0, cr0, [r8], {109}	; 0x6d
    48a0:	01000000 	mrseq	r0, (UNDEF: 0)
    48a4:	0001c79c 	muleq	r1, ip, r7
    48a8:	756e0c00 	strbvc	r0, [lr, #-3072]!	; 0xfffff400
    48ac:	0a01006d 	beq	44a68 <__RW_SIZE__+0x444d4>
    48b0:	0000006f 	andeq	r0, r0, pc, rrx
    48b4:	00001932 	andeq	r1, r0, r2, lsr r9
    48b8:	0a150a00 	beq	5470c0 <__RW_SIZE__+0x546b2c>
    48bc:	0f010000 	svceq	0x00010000
    48c0:	08006e10 	stmdaeq	r0, {r4, r9, sl, fp, sp, lr}
    48c4:	00000012 	andeq	r0, r0, r2, lsl r0
    48c8:	f70a9c01 			; <UNDEFINED> instruction: 0xf70a9c01
    48cc:	01000009 	tsteq	r0, r9
    48d0:	006e2414 	rsbeq	r2, lr, r4, lsl r4
    48d4:	00001208 	andeq	r1, r0, r8, lsl #4
    48d8:	0d9c0100 	ldfeqs	f0, [ip]
    48dc:	00000082 	andeq	r0, r0, r2, lsl #1
    48e0:	f506ce04 			; <UNDEFINED> instruction: 0xf506ce04
    48e4:	05000001 	streq	r0, [r0, #-1]
    48e8:	00000068 	andeq	r0, r0, r8, rrx
    48ec:	001afd00 	andseq	pc, sl, r0, lsl #26
    48f0:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    48f4:	0400000b 	streq	r0, [r0], #-11
    48f8:	00010801 	andeq	r0, r1, r1, lsl #16
    48fc:	0b980100 	bleq	fe604d04 <MSP_BASE+0xde5ffd04>
    4900:	00130000 	andseq	r0, r3, r0
    4904:	6e380000 	cdpvs	0, 3, cr0, cr8, cr0, {0}
    4908:	1e900800 	cdpne	8, 9, cr0, cr0, cr0, {0}
    490c:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    4910:	01020000 	mrseq	r0, (UNDEF: 2)
    4914:	00009906 	andeq	r9, r0, r6, lsl #18
    4918:	026b0300 	rsbeq	r0, fp, #0, 6
    491c:	2a020000 	bcs	84924 <__RW_SIZE__+0x84390>
    4920:	00000037 	andeq	r0, r0, r7, lsr r0
    4924:	97080102 	strls	r0, [r8, -r2, lsl #2]
    4928:	02000000 	andeq	r0, r0, #0
    492c:	00f20502 	rscseq	r0, r2, r2, lsl #10
    4930:	02020000 	andeq	r0, r2, #0
    4934:	00006f07 	andeq	r6, r0, r7, lsl #30
    4938:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    493c:	00000005 	andeq	r0, r0, r5
    4940:	0001a703 	andeq	sl, r1, r3, lsl #14
    4944:	5e500200 	cdppl	2, 5, cr0, cr0, cr0, {0}
    4948:	02000000 	andeq	r0, r0, #0
    494c:	00cc0704 	sbceq	r0, ip, r4, lsl #14
    4950:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4954:	00000005 	andeq	r0, r0, r5
    4958:	07080200 	streq	r0, [r8, -r0, lsl #4]
    495c:	000000c7 	andeq	r0, r0, r7, asr #1
    4960:	69050404 	stmdbvs	r5, {r2, sl}
    4964:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4968:	00d10704 	sbcseq	r0, r1, r4, lsl #14
    496c:	04020000 	streq	r0, [r2], #-0
    4970:	0000de07 	andeq	sp, r0, r7, lsl #28
    4974:	00530500 	subseq	r0, r3, r0, lsl #10
    4978:	74060000 	strvc	r0, [r6], #-0
    497c:	017a9b03 	cmneq	sl, r3, lsl #22
    4980:	82070000 	andhi	r0, r7, #0
    4984:	0300000a 	movweq	r0, #10
    4988:	00017a9d 	muleq	r1, sp, sl
    498c:	6b070000 	blvs	1c4994 <__RW_SIZE__+0x1c4400>
    4990:	0300000b 	movweq	r0, #11
    4994:	0000889e 	muleq	r0, lr, r8
    4998:	66070400 	strvs	r0, [r7], -r0, lsl #8
    499c:	0300000b 	movweq	r0, #11
    49a0:	0000889f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    49a4:	7c070800 	stcvc	8, cr0, [r7], {-0}
    49a8:	0300000b 	movweq	r0, #11
    49ac:	000088a0 	andeq	r8, r0, r0, lsr #17
    49b0:	53080c00 	movwpl	r0, #35840	; 0x8c00
    49b4:	03005243 	movweq	r5, #579	; 0x243
    49b8:	000088a1 	andeq	r8, r0, r1, lsr #17
    49bc:	43081000 	movwmi	r1, #32768	; 0x8000
    49c0:	03005243 	movweq	r5, #579	; 0x243
    49c4:	000088a2 	andeq	r8, r0, r2, lsr #17
    49c8:	53081400 	movwpl	r1, #33792	; 0x8400
    49cc:	03005048 	movweq	r5, #72	; 0x48
    49d0:	00018fa3 	andeq	r8, r1, r3, lsr #31
    49d4:	68071800 	stmdavs	r7, {fp, ip}
    49d8:	0300000c 	movweq	r0, #12
    49dc:	000088a4 	andeq	r8, r0, r4, lsr #17
    49e0:	fe072400 	cdp2	4, 0, cr2, cr7, cr0, {0}
    49e4:	0300000b 	movweq	r0, #11
    49e8:	000088a5 	andeq	r8, r0, r5, lsr #17
    49ec:	4b072800 	blmi	1ce9f4 <__RW_SIZE__+0x1ce460>
    49f0:	0300000d 	movweq	r0, #13
    49f4:	000088a6 	andeq	r8, r0, r6, lsr #17
    49f8:	82072c00 	andhi	r2, r7, #0, 24
    49fc:	0300000b 	movweq	r0, #11
    4a00:	000088a7 	andeq	r8, r0, r7, lsr #17
    4a04:	87073000 	strhi	r3, [r7, -r0]
    4a08:	0300000b 	movweq	r0, #11
    4a0c:	000088a8 	andeq	r8, r0, r8, lsr #17
    4a10:	09073400 	stmdbeq	r7, {sl, ip, sp}
    4a14:	0300000b 	movweq	r0, #11
    4a18:	000088a9 	andeq	r8, r0, r9, lsr #17
    4a1c:	1a073800 	bne	1d2a24 <__RW_SIZE__+0x1d2490>
    4a20:	0300000b 	movweq	r0, #11
    4a24:	000088aa 	andeq	r8, r0, sl, lsr #17
    4a28:	50083c00 	andpl	r3, r8, r0, lsl #24
    4a2c:	03005246 	movweq	r5, #582	; 0x246
    4a30:	0001a4ab 	andeq	sl, r1, fp, lsr #9
    4a34:	44084000 	strmi	r4, [r8], #-0
    4a38:	03005246 	movweq	r5, #582	; 0x246
    4a3c:	00017aac 	andeq	r7, r1, ip, lsr #21
    4a40:	41084800 	tstmi	r8, r0, lsl #16
    4a44:	03005244 	movweq	r5, #580	; 0x244
    4a48:	00017aad 	andeq	r7, r1, sp, lsr #21
    4a4c:	c1074c00 	tstgt	r7, r0, lsl #24
    4a50:	0300000b 	movweq	r0, #11
    4a54:	0001beae 	andeq	fp, r1, lr, lsr #29
    4a58:	88075000 	stmdahi	r7, {ip, lr}
    4a5c:	0300000a 	movweq	r0, #10
    4a60:	0001d8af 	andeq	sp, r1, pc, lsr #17
    4a64:	09006000 	stmdbeq	r0, {sp, lr}
    4a68:	00000088 	andeq	r0, r0, r8, lsl #1
    4a6c:	00002c0a 	andeq	r2, r0, sl, lsl #24
    4a70:	00018f00 	andeq	r8, r1, r0, lsl #30
    4a74:	00810b00 	addeq	r0, r1, r0, lsl #22
    4a78:	000b0000 	andeq	r0, fp, r0
    4a7c:	00017f05 	andeq	r7, r1, r5, lsl #30
    4a80:	00530a00 	subseq	r0, r3, r0, lsl #20
    4a84:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    4a88:	810b0000 	mrshi	r0, (UNDEF: 11)
    4a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a90:	01a90900 			; <UNDEFINED> instruction: 0x01a90900
    4a94:	94050000 	strls	r0, [r5], #-0
    4a98:	0a000001 	beq	4aa4 <__RW_SIZE__+0x4510>
    4a9c:	00000053 	andeq	r0, r0, r3, asr r0
    4aa0:	000001be 			; <UNDEFINED> instruction: 0x000001be
    4aa4:	0000810b 	andeq	r8, r0, fp, lsl #2
    4aa8:	09000300 	stmdbeq	r0, {r8, r9}
    4aac:	000001c3 	andeq	r0, r0, r3, asr #3
    4ab0:	0001ae05 	andeq	sl, r1, r5, lsl #28
    4ab4:	00530a00 	subseq	r0, r3, r0, lsl #20
    4ab8:	01d80000 	bicseq	r0, r8, r0
    4abc:	810b0000 	mrshi	r0, (UNDEF: 11)
    4ac0:	04000000 	streq	r0, [r0], #-0
    4ac4:	01dd0900 	bicseq	r0, sp, r0, lsl #18
    4ac8:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    4acc:	03000001 	movweq	r0, #1
    4ad0:	00000b34 	andeq	r0, r0, r4, lsr fp
    4ad4:	008db003 	addeq	fp, sp, r3
    4ad8:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    4adc:	5203e904 	andpl	lr, r3, #4, 18	; 0x10000
    4ae0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4ae4:	004c5243 	subeq	r5, ip, r3, asr #4
    4ae8:	8803eb04 	stmdahi	r3, {r2, r8, r9, fp, sp, lr, pc}
    4aec:	00000000 	andeq	r0, r0, r0
    4af0:	4852430d 	ldmdami	r2, {r0, r2, r3, r8, r9, lr}^
    4af4:	03ec0400 	mvneq	r0, #0, 8
    4af8:	00000088 	andeq	r0, r0, r8, lsl #1
    4afc:	44490d04 	strbmi	r0, [r9], #-3332	; 0xfffff2fc
    4b00:	ed040052 	stc	0, cr0, [r4, #-328]	; 0xfffffeb8
    4b04:	00008803 	andeq	r8, r0, r3, lsl #16
    4b08:	4f0d0800 	svcmi	0x000d0800
    4b0c:	04005244 	streq	r5, [r0], #-580	; 0xfffffdbc
    4b10:	008803ee 	addeq	r0, r8, lr, ror #7
    4b14:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    4b18:	000003ac 	andeq	r0, r0, ip, lsr #7
    4b1c:	8803ef04 	stmdahi	r3, {r2, r8, r9, sl, fp, sp, lr, pc}
    4b20:	10000000 	andne	r0, r0, r0
    4b24:	5252420d 	subspl	r4, r2, #-805306368	; 0xd0000000
    4b28:	03f00400 	mvnseq	r0, #0, 8
    4b2c:	00000088 	andeq	r0, r0, r8, lsl #1
    4b30:	07b90e14 			; <UNDEFINED> instruction: 0x07b90e14
    4b34:	f1040000 	cps	#0
    4b38:	00008803 	andeq	r8, r0, r3, lsl #16
    4b3c:	0f001800 	svceq	0x00001800
    4b40:	00000699 	muleq	r0, r9, r6
    4b44:	ed03f204 	sfm	f7, 1, [r3, #-16]
    4b48:	10000001 	andne	r0, r0, r1
    4b4c:	00026404 	andeq	r6, r2, r4, lsl #8
    4b50:	08010200 	stmdaeq	r1, {r9}
    4b54:	000000a0 	andeq	r0, r0, r0, lsr #1
    4b58:	02710410 	rsbseq	r0, r1, #16, 8	; 0x10000000
    4b5c:	64090000 	strvs	r0, [r9], #-0
    4b60:	11000002 	tstne	r0, r2
    4b64:	911f0101 	tstls	pc, r1, lsl #2
    4b68:	12000002 	andne	r0, r0, #2
    4b6c:	00000b4d 	andeq	r0, r0, sp, asr #22
    4b70:	0c6e1200 	sfmeq	f1, 2, [lr], #-0
    4b74:	12010000 	andne	r0, r1, #0
    4b78:	00000c81 	andeq	r0, r0, r1, lsl #25
    4b7c:	8d030002 	stchi	0, cr0, [r3, #-8]
    4b80:	0100000b 	tsteq	r0, fp
    4b84:	00027623 	andeq	r7, r2, r3, lsr #12
    4b88:	01011100 	mrseq	r1, (UNDEF: 17)
    4b8c:	0002b725 	andeq	fp, r2, r5, lsr #14
    4b90:	0be91200 	bleq	ffa49398 <MSP_BASE+0xdfa44398>
    4b94:	12000000 	andne	r0, r0, #0
    4b98:	00000a29 	andeq	r0, r0, r9, lsr #20
    4b9c:	0aeb1201 	beq	ffac93a8 <MSP_BASE+0xdfac43a8>
    4ba0:	00020000 	andeq	r0, r2, r0
    4ba4:	000a7803 	andeq	r7, sl, r3, lsl #16
    4ba8:	9c290100 	stflss	f0, [r9], #-0
    4bac:	06000002 	streq	r0, [r0], -r2
    4bb0:	eb35010c 	bl	d44fe8 <__RW_SIZE__+0xd44a54>
    4bb4:	08000002 	stmdaeq	r0, {r1}
    4bb8:	36010078 			; <UNDEFINED> instruction: 0x36010078
    4bbc:	00000073 	andeq	r0, r0, r3, ror r0
    4bc0:	00790800 	rsbseq	r0, r9, r0, lsl #16
    4bc4:	00733601 	rsbseq	r3, r3, r1, lsl #12
    4bc8:	07040000 	streq	r0, [r4, -r0]
    4bcc:	00000a98 	muleq	r0, r8, sl
    4bd0:	00733701 	rsbseq	r3, r3, r1, lsl #14
    4bd4:	00080000 	andeq	r0, r8, r0
    4bd8:	000a3f03 	andeq	r3, sl, r3, lsl #30
    4bdc:	c2380100 	eorsgt	r0, r8, #0, 2
    4be0:	06000002 	streq	r0, [r0], -r2
    4be4:	373b0114 			; <UNDEFINED> instruction: 0x373b0114
    4be8:	08000003 	stmdaeq	r0, {r0, r1}
    4bec:	3c010078 	stccc	0, cr0, [r1], {120}	; 0x78
    4bf0:	00000073 	andeq	r0, r0, r3, ror r0
    4bf4:	00790800 	rsbseq	r0, r9, r0, lsl #16
    4bf8:	00733c01 	rsbseq	r3, r3, r1, lsl #24
    4bfc:	07040000 	streq	r0, [r4, -r0]
    4c00:	00000a98 	muleq	r0, r8, sl
    4c04:	00733d01 	rsbseq	r3, r3, r1, lsl #26
    4c08:	07080000 	streq	r0, [r8, -r0]
    4c0c:	00000a8d 	andeq	r0, r0, sp, lsl #21
    4c10:	00733e01 	rsbseq	r3, r3, r1, lsl #28
    4c14:	070c0000 	streq	r0, [ip, -r0]
    4c18:	00000a51 	andeq	r0, r0, r1, asr sl
    4c1c:	00733f01 	rsbseq	r3, r3, r1, lsl #30
    4c20:	00100000 	andseq	r0, r0, r0
    4c24:	000a5d03 	andeq	r5, sl, r3, lsl #26
    4c28:	f6400100 			; <UNDEFINED> instruction: 0xf6400100
    4c2c:	06000002 	streq	r0, [r0], -r2
    4c30:	77430110 	smlaldvc	r0, r3, r0, r1
    4c34:	08000003 	stmdaeq	r0, {r0, r1}
    4c38:	44010078 	strmi	r0, [r1], #-120	; 0xffffff88
    4c3c:	00000073 	andeq	r0, r0, r3, ror r0
    4c40:	00790800 	rsbseq	r0, r9, r0, lsl #16
    4c44:	00734401 	rsbseq	r4, r3, r1, lsl #8
    4c48:	07040000 	streq	r0, [r4, -r0]
    4c4c:	00000a98 	muleq	r0, r8, sl
    4c50:	00734501 	rsbseq	r4, r3, r1, lsl #10
    4c54:	07080000 	streq	r0, [r8, -r0]
    4c58:	000000e2 	andeq	r0, r0, r2, ror #1
    4c5c:	02b74601 	adcseq	r4, r7, #1048576	; 0x100000
    4c60:	000c0000 	andeq	r0, ip, r0
    4c64:	000bd603 	andeq	sp, fp, r3, lsl #12
    4c68:	42470100 	submi	r0, r7, #0, 2
    4c6c:	13000003 	movwne	r0, #3
    4c70:	00000c3b 	andeq	r0, r0, fp, lsr ip
    4c74:	9a015801 	bls	5ac80 <__RW_SIZE__+0x5a6ec>
    4c78:	14000003 	strne	r0, [r0], #-3
    4c7c:	01006915 	tsteq	r0, r5, lsl r9
    4c80:	0000735a 	andeq	r7, r0, sl, asr r3
    4c84:	13000000 	movwne	r0, #0
    4c88:	00000ca6 	andeq	r0, r0, r6, lsr #25
    4c8c:	b2016001 	andlt	r6, r1, #1
    4c90:	14000003 	strne	r0, [r0], #-3
    4c94:	01006915 	tsteq	r0, r5, lsl r9
    4c98:	00007362 	andeq	r7, r0, r2, ror #6
    4c9c:	13000000 	movwne	r0, #0
    4ca0:	00000bab 	andeq	r0, r0, fp, lsr #23
    4ca4:	ca016801 	bgt	5ecb0 <__RW_SIZE__+0x5e71c>
    4ca8:	14000003 	strne	r0, [r0], #-3
    4cac:	01006915 	tsteq	r0, r5, lsl r9
    4cb0:	0000736a 	andeq	r7, r0, sl, ror #6
    4cb4:	16000000 	strne	r0, [r0], -r0
    4cb8:	00000b3d 	andeq	r0, r0, sp, lsr fp
    4cbc:	73010901 	movwvc	r0, #6401	; 0x1901
    4cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    4cc4:	00000434 	andeq	r0, r0, r4, lsr r4
    4cc8:	00317817 	eorseq	r7, r1, r7, lsl r8
    4ccc:	73010901 	movwvc	r0, #6401	; 0x1901
    4cd0:	17000000 	strne	r0, [r0, -r0]
    4cd4:	01003179 	tsteq	r0, r9, ror r1
    4cd8:	00730109 	rsbseq	r0, r3, r9, lsl #2
    4cdc:	77170000 	ldrvc	r0, [r7, -r0]
    4ce0:	09010031 	stmdbeq	r1, {r0, r4, r5}
    4ce4:	00007301 	andeq	r7, r0, r1, lsl #6
    4ce8:	31681700 	cmncc	r8, r0, lsl #14
    4cec:	01090100 	mrseq	r0, (UNDEF: 25)
    4cf0:	00000073 	andeq	r0, r0, r3, ror r0
    4cf4:	00327817 	eorseq	r7, r2, r7, lsl r8
    4cf8:	73010901 	movwvc	r0, #6401	; 0x1901
    4cfc:	17000000 	strne	r0, [r0, -r0]
    4d00:	01003279 	tsteq	r0, r9, ror r2
    4d04:	00730109 	rsbseq	r0, r3, r9, lsl #2
    4d08:	77170000 	ldrvc	r0, [r7, -r0]
    4d0c:	09010032 	stmdbeq	r1, {r1, r4, r5}
    4d10:	00007301 	andeq	r7, r0, r1, lsl #6
    4d14:	32681700 	rsbcc	r1, r8, #0, 14
    4d18:	01090100 	mrseq	r0, (UNDEF: 25)
    4d1c:	00000073 	andeq	r0, r0, r3, ror r0
    4d20:	0cff1300 	ldcleq	3, cr1, [pc]	; 4d28 <__RW_SIZE__+0x4794>
    4d24:	d3010000 	movwle	r0, #4096	; 0x1000
    4d28:	00044c01 	andeq	r4, r4, r1, lsl #24
    4d2c:	69151400 	ldmdbvs	r5, {sl, ip}
    4d30:	73d50100 	bicsvc	r0, r5, #0, 2
    4d34:	00000000 	andeq	r0, r0, r0
    4d38:	0b1f1800 	bleq	7cad40 <__RW_SIZE__+0x7ca7ac>
    4d3c:	14010000 	strne	r0, [r1], #-0
    4d40:	04640101 	strbteq	r0, [r4], #-257	; 0xfffffeff
    4d44:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    4d48:	01160100 	tsteq	r6, r0, lsl #2
    4d4c:	00000073 	andeq	r0, r0, r3, ror r0
    4d50:	0bdb1300 	bleq	ff6c9958 <MSP_BASE+0xdf6c4958>
    4d54:	e1010000 	mrs	r0, (UNDEF: 1)
    4d58:	00047c01 	andeq	r7, r4, r1, lsl #24
    4d5c:	69151400 	ldmdbvs	r5, {sl, ip}
    4d60:	73e30100 	mvnvc	r0, #0, 2
    4d64:	00000000 	andeq	r0, r0, r0
    4d68:	0c5c1300 	mrrceq	3, 0, r1, ip, cr0
    4d6c:	af010000 	svcge	0x00010000
    4d70:	00049401 	andeq	r9, r4, r1, lsl #8
    4d74:	69151400 	ldmdbvs	r5, {sl, ip}
    4d78:	73b10100 			; <UNDEFINED> instruction: 0x73b10100
    4d7c:	00000000 	andeq	r0, r0, r0
    4d80:	0ab91800 	beq	fee4ad88 <MSP_BASE+0xdee45d88>
    4d84:	1d010000 	stcne	0, cr0, [r1, #-0]
    4d88:	04c20101 	strbeq	r0, [r2], #257	; 0x101
    4d8c:	65170000 	ldrvs	r0, [r7, #-0]
    4d90:	1d010078 	stcne	0, cr0, [r1, #-480]	; 0xfffffe20
    4d94:	00007301 	andeq	r7, r0, r1, lsl #6
    4d98:	79651700 	stmdbvc	r5!, {r8, r9, sl, ip}^
    4d9c:	011d0100 	tsteq	sp, r0, lsl #2
    4da0:	00000073 	andeq	r0, r0, r3, ror r0
    4da4:	01006919 	tsteq	r0, r9, lsl r9
    4da8:	0073011f 	rsbseq	r0, r3, pc, lsl r1
    4dac:	1a000000 	bne	4db4 <__RW_SIZE__+0x4820>
    4db0:	00000b0e 	andeq	r0, r0, lr, lsl #22
    4db4:	6e384d01 	cdpvs	13, 3, cr4, cr8, cr1, {0}
    4db8:	00300800 	eorseq	r0, r0, r0, lsl #16
    4dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4dc0:	00000505 	andeq	r0, r0, r5, lsl #10
    4dc4:	006e3e1b 	rsbeq	r3, lr, fp, lsl lr
    4dc8:	001a0408 	andseq	r0, sl, r8, lsl #8
    4dcc:	6e421b00 	vmlavs.f64	d17, d2, d0
    4dd0:	1a0b0800 	bne	2c6dd8 <__RW_SIZE__+0x2c6844>
    4dd4:	461b0000 	ldrmi	r0, [fp], -r0
    4dd8:	1208006e 	andne	r0, r8, #110	; 0x6e
    4ddc:	1c00001a 	stcne	0, cr0, [r0], {26}
    4de0:	08006e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
    4de4:	00001a19 	andeq	r1, r0, r9, lsl sl
    4de8:	0450011d 	ldrbeq	r0, [r0], #-285	; 0xfffffee3
    4dec:	2439e108 	ldrtcs	lr, [r9], #-264	; 0xfffffef8
    4df0:	821e0000 	andshi	r0, lr, #0
    4df4:	68000003 	stmdavs	r0, {r0, r1}
    4df8:	2008006e 	andcs	r0, r8, lr, rrx
    4dfc:	01000000 	mrseq	r0, (UNDEF: 0)
    4e00:	00052c9c 	muleq	r5, ip, ip
    4e04:	6e681f00 	cdpvs	15, 6, cr1, cr8, cr0, {0}
    4e08:	00200800 	eoreq	r0, r0, r0, lsl #16
    4e0c:	8f200000 	svchi	0x00200000
    4e10:	61000003 	tstvs	r0, r3
    4e14:	00000019 	andeq	r0, r0, r9, lsl r0
    4e18:	039a1e00 	orrseq	r1, sl, #0, 28
    4e1c:	6e880000 	cdpvs	0, 8, cr0, cr8, cr0, {0}
    4e20:	00200800 	eoreq	r0, r0, r0, lsl #16
    4e24:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e28:	00000553 	andeq	r0, r0, r3, asr r5
    4e2c:	006e881f 	rsbeq	r8, lr, pc, lsl r8
    4e30:	00002008 	andeq	r2, r0, r8
    4e34:	03a72000 			; <UNDEFINED> instruction: 0x03a72000
    4e38:	19ed0000 	stmibne	sp!, {}^	; <UNPREDICTABLE>
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	0003b21e 	andeq	fp, r3, lr, lsl r2
    4e44:	006ea800 	rsbeq	sl, lr, r0, lsl #16
    4e48:	00002008 	andeq	r2, r0, r8
    4e4c:	7a9c0100 	bvc	fe705254 <MSP_BASE+0xde700254>
    4e50:	1f000005 	svcne	0x00000005
    4e54:	08006ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, sp, lr}
    4e58:	00000020 	andeq	r0, r0, r0, lsr #32
    4e5c:	0003bf20 	andeq	fp, r3, r0, lsr #30
    4e60:	001a3d00 	andseq	r3, sl, r0, lsl #26
    4e64:	13000000 	movwne	r0, #0
    4e68:	00000b70 	andeq	r0, r0, r0, ror fp
    4e6c:	92017001 	andls	r7, r1, #1
    4e70:	14000005 	strne	r0, [r0], #-5
    4e74:	01006915 	tsteq	r0, r5, lsl r9
    4e78:	00007372 	andeq	r7, r0, r2, ror r3
    4e7c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4e80:	0000057a 	andeq	r0, r0, sl, ror r5
    4e84:	08006ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp, lr}
    4e88:	0000007a 	andeq	r0, r0, sl, ror r0
    4e8c:	05c29c01 	strbeq	r9, [r2, #3073]	; 0xc01
    4e90:	ca1f0000 	bgt	7c4e98 <__RW_SIZE__+0x7c4904>
    4e94:	7808006e 	stmdavc	r8, {r1, r2, r3, r5, r6}
    4e98:	20000000 	andcs	r0, r0, r0
    4e9c:	00000587 	andeq	r0, r0, r7, lsl #11
    4ea0:	00001a8d 	andeq	r1, r0, sp, lsl #21
    4ea4:	006efa1b 	rsbeq	pc, lr, fp, lsl sl	; <UNPREDICTABLE>
    4ea8:	001a2a08 	andseq	r2, sl, r8, lsl #20
    4eac:	13000000 	movwne	r0, #0
    4eb0:	00000d40 	andeq	r0, r0, r0, asr #26
    4eb4:	da018001 	ble	64ec0 <__RW_SIZE__+0x6492c>
    4eb8:	14000005 	strne	r0, [r0], #-5
    4ebc:	01006915 	tsteq	r0, r5, lsl r9
    4ec0:	00007382 	andeq	r7, r0, r2, lsl #7
    4ec4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4ec8:	000005c2 	andeq	r0, r0, r2, asr #11
    4ecc:	08006f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, sp, lr}
    4ed0:	0000008c 	andeq	r0, r0, ip, lsl #1
    4ed4:	06139c01 	ldreq	r9, [r3], -r1, lsl #24
    4ed8:	461f0000 	ldrmi	r0, [pc], -r0
    4edc:	8a08006f 	bhi	2050a0 <__RW_SIZE__+0x204b0c>
    4ee0:	20000000 	andcs	r0, r0, r0
    4ee4:	000005cf 	andeq	r0, r0, pc, asr #11
    4ee8:	00001b01 	andeq	r1, r0, r1, lsl #22
    4eec:	006f761b 	rsbeq	r7, pc, fp, lsl r6	; <UNPREDICTABLE>
    4ef0:	001a2a08 	andseq	r2, sl, r8, lsl #20
    4ef4:	6fa21b00 	svcvs	0x00a21b00
    4ef8:	1a2a0800 	bne	a86f00 <__RW_SIZE__+0xa8696c>
    4efc:	00000000 	andeq	r0, r0, r0
    4f00:	000d1713 	andeq	r1, sp, r3, lsl r7
    4f04:	018f0100 	orreq	r0, pc, r0, lsl #2
    4f08:	00000629 	andeq	r0, r0, r9, lsr #12
    4f0c:	01006915 	tsteq	r0, r5, lsl r9
    4f10:	00007391 	muleq	r0, r1, r3
    4f14:	131e0000 	tstne	lr, #0
    4f18:	d0000006 	andle	r0, r0, r6
    4f1c:	9808006f 	stmdals	r8, {r0, r1, r2, r3, r5, r6}
    4f20:	01000001 	tsteq	r0, r1
    4f24:	0006469c 	muleq	r6, ip, r6
    4f28:	061f2000 	ldreq	r2, [pc], -r0
    4f2c:	1b750000 	blne	1d44f34 <__RW_SIZE__+0x1d449a0>
    4f30:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4f34:	0000047c 	andeq	r0, r0, ip, ror r4
    4f38:	08007168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp, lr}
    4f3c:	000000ac 	andeq	r0, r0, ip, lsr #1
    4f40:	066d9c01 	strbteq	r9, [sp], -r1, lsl #24
    4f44:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    4f48:	ac080071 	stcge	0, cr0, [r8], {113}	; 0x71
    4f4c:	20000000 	andcs	r0, r0, r0
    4f50:	00000489 	andeq	r0, r0, r9, lsl #9
    4f54:	00001c19 	andeq	r1, r0, r9, lsl ip
    4f58:	f3130000 	vhadd.u16	d0, d3, d0
    4f5c:	0100000b 	tsteq	r0, fp
    4f60:	068501bc 			; <UNDEFINED> instruction: 0x068501bc
    4f64:	15140000 	ldrne	r0, [r4, #-0]
    4f68:	be010069 	cdplt	0, 0, cr0, cr1, cr9, {3}
    4f6c:	00000073 	andeq	r0, r0, r3, ror r0
    4f70:	6d1e0000 	ldcvs	0, cr0, [lr, #-0]
    4f74:	14000006 	strne	r0, [r0], #-6
    4f78:	02080072 	andeq	r0, r8, #114	; 0x72
    4f7c:	01000001 	tsteq	r0, r1
    4f80:	00073f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    4f84:	23402100 	movtcs	r2, #256	; 0x100
    4f88:	7a200000 	bvc	804f90 <__RW_SIZE__+0x8049fc>
    4f8c:	5d000006 	stcpl	0, cr0, [r0, #-24]	; 0xffffffe8
    4f90:	2200001c 	andcs	r0, r0, #28
    4f94:	0800727a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, sp, lr}
    4f98:	00001a35 	andeq	r1, r0, r5, lsr sl
    4f9c:	000006c5 	andeq	r0, r0, r5, asr #13
    4fa0:	0153011d 	cmpeq	r3, sp, lsl r1
    4fa4:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    4fa8:	021d4001 	andseq	r4, sp, #1
    4fac:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    4fb0:	a02200e0 	eorge	r0, r2, r0, ror #1
    4fb4:	35080072 	strcc	r0, [r8, #-114]	; 0xffffff8e
    4fb8:	e400001a 	str	r0, [r0], #-26	; 0xffffffe6
    4fbc:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    4fc0:	40015301 	andmi	r5, r1, r1, lsl #6
    4fc4:	0152011d 	cmpeq	r2, sp, lsl r1
    4fc8:	7d021d40 	stcvc	13, cr1, [r2, #-256]	; 0xffffff00
    4fcc:	e0090200 	and	r0, r9, r0, lsl #4
    4fd0:	72c62200 	sbcvc	r2, r6, #0, 4
    4fd4:	1a350800 	bne	d46fdc <__RW_SIZE__+0xd46a48>
    4fd8:	07030000 	streq	r0, [r3, -r0]
    4fdc:	011d0000 	tsteq	sp, r0
    4fe0:	1d400153 	stfnee	f0, [r0, #-332]	; 0xfffffeb4
    4fe4:	40015201 	andmi	r5, r1, r1, lsl #4
    4fe8:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    4fec:	00e00902 	rsceq	r0, r0, r2, lsl #18
    4ff0:	0072ec22 	rsbseq	lr, r2, r2, lsr #24
    4ff4:	001a3508 	andseq	r3, sl, r8, lsl #10
    4ff8:	00072200 	andeq	r2, r7, r0, lsl #4
    4ffc:	53011d00 	movwpl	r1, #7424	; 0x1d00
    5000:	011d4001 	tsteq	sp, r1
    5004:	1d400152 	stfnee	f0, [r0, #-328]	; 0xfffffeb8
    5008:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    500c:	1c00e009 	stcne	0, cr14, [r0], {9}
    5010:	08007312 	stmdaeq	r0, {r1, r4, r8, r9, ip, sp, lr}
    5014:	00001a35 	andeq	r1, r0, r5, lsr sl
    5018:	0153011d 	cmpeq	r3, sp, lsl r1
    501c:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    5020:	021d4001 	andseq	r4, sp, #1
    5024:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    5028:	000000e0 	andeq	r0, r0, r0, ror #1
    502c:	000acb13 	andeq	ip, sl, r3, lsl fp
    5030:	01c70100 	biceq	r0, r7, r0, lsl #2
    5034:	00000764 	andeq	r0, r0, r4, ror #14
    5038:	00691514 	rsbeq	r1, r9, r4, lsl r5
    503c:	0073c901 	rsbseq	ip, r3, r1, lsl #18
    5040:	23140000 	tstcs	r4, #0
    5044:	00000cb1 			; <UNDEFINED> instruction: 0x00000cb1
    5048:	0045cd01 	subeq	ip, r5, r1, lsl #26
    504c:	00000000 	andeq	r0, r0, r0
    5050:	073f1e00 	ldreq	r1, [pc, -r0, lsl #28]!
    5054:	73180000 	tstvc	r8, #0
    5058:	00400800 	subeq	r0, r0, r0, lsl #16
    505c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5060:	000007ae 	andeq	r0, r0, lr, lsr #15
    5064:	00731e1f 	rsbseq	r1, r3, pc, lsl lr
    5068:	00003208 	andeq	r3, r0, r8, lsl #4
    506c:	074c2000 	strbeq	r2, [ip, -r0]
    5070:	1ce90000 	stclne	0, cr0, [r9]
    5074:	60210000 	eorvs	r0, r1, r0
    5078:	20000023 	andcs	r0, r0, r3, lsr #32
    507c:	00000756 	andeq	r0, r0, r6, asr r7
    5080:	00001cfd 	strdeq	r1, [r0], -sp
    5084:	00734a1c 	rsbseq	r4, r3, ip, lsl sl
    5088:	001a3508 	andseq	r3, sl, r8, lsl #10
    508c:	53011d00 	movwpl	r1, #7424	; 0x1d00
    5090:	011d3a01 	tsteq	sp, r1, lsl #20
    5094:	003a0152 	eorseq	r0, sl, r2, asr r1
    5098:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    509c:	00000434 	andeq	r0, r0, r4, lsr r4
    50a0:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
    50a4:	0000007a 	andeq	r0, r0, sl, ror r0
    50a8:	07d19c01 	ldrbeq	r9, [r1, r1, lsl #24]
    50ac:	78210000 	stmdavc	r1!, {}	; <UNPREDICTABLE>
    50b0:	20000023 	andcs	r0, r0, r3, lsr #32
    50b4:	00000441 	andeq	r0, r0, r1, asr #8
    50b8:	00001d1c 	andeq	r1, r0, ip, lsl sp
    50bc:	641e0000 	ldrvs	r0, [lr], #-0
    50c0:	d4000004 	strle	r0, [r0], #-4
    50c4:	06080073 			; <UNDEFINED> instruction: 0x06080073
    50c8:	01000001 	tsteq	r0, r1
    50cc:	0007f89c 	muleq	r7, ip, r8
    50d0:	73d41f00 	bicsvc	r1, r4, #0, 30
    50d4:	01060800 	tsteq	r6, r0, lsl #16
    50d8:	71200000 	teqvc	r0, r0
    50dc:	08000004 	stmdaeq	r0, {r2}
    50e0:	0000001e 	andeq	r0, r0, lr, lsl r0
    50e4:	0bb51300 	bleq	fed49cec <MSP_BASE+0xded44cec>
    50e8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    50ec:	00081001 	andeq	r1, r8, r1
    50f0:	69151400 	ldmdbvs	r5, {sl, ip}
    50f4:	73f20100 	mvnsvc	r0, #0, 2
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	07f81e00 	ldrbeq	r1, [r8, r0, lsl #28]!
    5100:	74dc0000 	ldrbvc	r0, [ip], #0
    5104:	01d60800 	bicseq	r0, r6, r0, lsl #16
    5108:	9c010000 	stcls	0, cr0, [r1], {-0}
    510c:	0000096f 	andeq	r0, r0, pc, ror #18
    5110:	00239821 	eoreq	r9, r3, r1, lsr #16
    5114:	08052000 	stmdaeq	r5, {sp}
    5118:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    511c:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    5120:	35080075 	strcc	r0, [r8, #-117]	; 0xffffff8b
    5124:	5100001a 	tstpl	r0, sl, lsl r0
    5128:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    512c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5130:	0152011d 	cmpeq	r2, sp, lsl r1
    5134:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5138:	e00a0300 	and	r0, sl, r0, lsl #6
    513c:	a8220007 	stmdage	r2!, {r0, r1, r2}
    5140:	35080075 	strcc	r0, [r8, #-117]	; 0xffffff8b
    5144:	7100001a 	tstvc	r0, sl, lsl r0
    5148:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    514c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5150:	0152011d 	cmpeq	r2, sp, lsl r1
    5154:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5158:	e00a0300 	and	r0, sl, r0, lsl #6
    515c:	c8220007 	stmdagt	r2!, {r0, r1, r2}
    5160:	35080075 	strcc	r0, [r8, #-117]	; 0xffffff8b
    5164:	9100001a 	tstls	r0, sl, lsl r0
    5168:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    516c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5170:	0152011d 	cmpeq	r2, sp, lsl r1
    5174:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5178:	e00a0300 	and	r0, sl, r0, lsl #6
    517c:	e8220007 	stmda	r2!, {r0, r1, r2}
    5180:	35080075 	strcc	r0, [r8, #-117]	; 0xffffff8b
    5184:	b100001a 	tstlt	r0, sl, lsl r0
    5188:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    518c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5190:	0152011d 	cmpeq	r2, sp, lsl r1
    5194:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5198:	e00a0300 	and	r0, sl, r0, lsl #6
    519c:	08220007 	stmdaeq	r2!, {r0, r1, r2}
    51a0:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    51a4:	d100001a 	tstle	r0, sl, lsl r0
    51a8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    51ac:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    51b0:	0152011d 	cmpeq	r2, sp, lsl r1
    51b4:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    51b8:	e00a0300 	and	r0, sl, r0, lsl #6
    51bc:	28220007 	stmdacs	r2!, {r0, r1, r2}
    51c0:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    51c4:	f100001a 	cps	#26
    51c8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    51cc:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    51d0:	0152011d 	cmpeq	r2, sp, lsl r1
    51d4:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    51d8:	e00a0300 	and	r0, sl, r0, lsl #6
    51dc:	48220007 	stmdami	r2!, {r0, r1, r2}
    51e0:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    51e4:	1100001a 	tstne	r0, sl, lsl r0
    51e8:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    51ec:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    51f0:	0152011d 	cmpeq	r2, sp, lsl r1
    51f4:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    51f8:	e00a0300 	and	r0, sl, r0, lsl #6
    51fc:	6a220007 	bvs	885220 <__RW_SIZE__+0x884c8c>
    5200:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    5204:	3100001a 	tstcc	r0, sl, lsl r0
    5208:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    520c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5210:	0152011d 	cmpeq	r2, sp, lsl r1
    5214:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5218:	e00a0300 	and	r0, sl, r0, lsl #6
    521c:	8c220007 	stchi	0, cr0, [r2], #-28	; 0xffffffe4
    5220:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    5224:	5100001a 	tstpl	r0, sl, lsl r0
    5228:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
    522c:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5230:	0152011d 	cmpeq	r2, sp, lsl r1
    5234:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5238:	e00a0300 	and	r0, sl, r0, lsl #6
    523c:	ae1c0007 	cdpge	0, 1, cr0, cr12, cr7, {0}
    5240:	35080076 	strcc	r0, [r8, #-118]	; 0xffffff8a
    5244:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5248:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    524c:	0152011d 	cmpeq	r2, sp, lsl r1
    5250:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5254:	e00a0300 	and	r0, sl, r0, lsl #6
    5258:	00000007 	andeq	r0, r0, r7
    525c:	000aff24 	andeq	pc, sl, r4, lsr #30
    5260:	01fb0100 	mvnseq	r0, r0, lsl #2
    5264:	00096f1e 	andeq	r6, r9, lr, lsl pc
    5268:	0076b400 	rsbseq	fp, r6, r0, lsl #8
    526c:	00006e08 	andeq	r6, r0, r8, lsl #28
    5270:	0c9c0100 	ldfeqs	f0, [ip], {0}
    5274:	2500000a 	strcs	r0, [r0, #-10]
    5278:	00000382 	andeq	r0, r0, r2, lsl #7
    527c:	080076e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip, sp, lr}
    5280:	00000014 	andeq	r0, r0, r4, lsl r0
    5284:	b2010401 	andlt	r0, r1, #16777216	; 0x1000000
    5288:	1f000009 	svcne	0x00000009
    528c:	080076e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip, sp, lr}
    5290:	00000014 	andeq	r0, r0, r4, lsl r0
    5294:	00038f20 	andeq	r8, r3, r0, lsr #30
    5298:	001f8c00 	andseq	r8, pc, r0, lsl #24
    529c:	25000000 	strcs	r0, [r0, #-0]
    52a0:	0000039a 	muleq	r0, sl, r3
    52a4:	080076f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
    52a8:	00000014 	andeq	r0, r0, r4, lsl r0
    52ac:	da010501 	ble	466b8 <__RW_SIZE__+0x46124>
    52b0:	1f000009 	svcne	0x00000009
    52b4:	080076f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
    52b8:	00000014 	andeq	r0, r0, r4, lsl r0
    52bc:	0003a720 	andeq	sl, r3, r0, lsr #14
    52c0:	00201800 	eoreq	r1, r0, r0, lsl #16
    52c4:	25000000 	strcs	r0, [r0, #-0]
    52c8:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
    52cc:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
    52d0:	00000016 	andeq	r0, r0, r6, lsl r0
    52d4:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    52d8:	1f00000a 	svcne	0x0000000a
    52dc:	0800770c 	stmdaeq	r0, {r2, r3, r8, r9, sl, ip, sp, lr}
    52e0:	00000016 	andeq	r0, r0, r6, lsl r0
    52e4:	0003bf20 	andeq	fp, r3, r0, lsr #30
    52e8:	00206800 	eoreq	r6, r0, r0, lsl #16
    52ec:	1b000000 	blne	52f4 <__RW_SIZE__+0x4d60>
    52f0:	080076e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip, sp, lr}
    52f4:	00001a5a 	andeq	r1, r0, sl, asr sl
    52f8:	03ca1e00 	biceq	r1, sl, #0, 28
    52fc:	77240000 	strvc	r0, [r4, -r0]!
    5300:	00320800 	eorseq	r0, r2, r0, lsl #16
    5304:	9c010000 	stcls	0, cr0, [r1], {-0}
    5308:	00000a66 	andeq	r0, r0, r6, ror #20
    530c:	0003db26 	andeq	sp, r3, r6, lsr #22
    5310:	0020b800 	eoreq	fp, r0, r0, lsl #16
    5314:	03e62700 	mvneq	r2, #0, 14
    5318:	51010000 	mrspl	r0, (UNDEF: 1)
    531c:	0003f126 	andeq	pc, r3, r6, lsr #2
    5320:	0020d900 	eoreq	sp, r0, r0, lsl #18
    5324:	03fc2600 	mvnseq	r2, #0, 12
    5328:	21130000 	tstcs	r3, r0
    532c:	07260000 	streq	r0, [r6, -r0]!
    5330:	34000004 	strcc	r0, [r0], #-4
    5334:	26000021 	strcs	r0, [r0], -r1, lsr #32
    5338:	00000412 	andeq	r0, r0, r2, lsl r4
    533c:	0000216c 	andeq	r2, r0, ip, ror #2
    5340:	00041d26 	andeq	r1, r4, r6, lsr #26
    5344:	0021a400 	eoreq	sl, r1, r0, lsl #8
    5348:	04282600 	strteq	r2, [r8], #-1536	; 0xfffffa00
    534c:	21dc0000 	bicscs	r0, ip, r0
    5350:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5354:	00000af6 	strdeq	r0, [r0], -r6
    5358:	01010e01 	tsteq	r1, r1, lsl #28
    535c:	000a661e 	andeq	r6, sl, lr, lsl r6
    5360:	00775800 	rsbseq	r5, r7, r0, lsl #16
    5364:	00006208 	andeq	r6, r0, r8, lsl #4
    5368:	fa9c0100 	blx	fe705770 <MSP_BASE+0xde700770>
    536c:	2200000a 	andcs	r0, r0, #10
    5370:	0800778e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, ip, sp, lr}
    5374:	00001a61 	andeq	r1, r0, r1, ror #20
    5378:	00000ac0 	andeq	r0, r0, r0, asr #21
    537c:	0153011d 	cmpeq	r3, sp, lsl r1
    5380:	52011d30 	andpl	r1, r1, #48, 26	; 0xc00
    5384:	ffff0a03 			; <UNDEFINED> instruction: 0xffff0a03
    5388:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    538c:	011ddc08 	tsteq	sp, r8, lsl #24
    5390:	c8080250 	stmdagt	r8, {r4, r6, r9}
    5394:	087d021d 	ldmdaeq	sp!, {r0, r2, r3, r4, r9}^
    5398:	0d300305 	ldceq	3, cr0, [r0, #-20]!	; 0xffffffec
    539c:	021d0801 	andseq	r0, sp, #65536	; 0x10000
    53a0:	7402047d 	strvc	r0, [r2], #-1149	; 0xfffffb83
    53a4:	7d021d00 	stcvc	13, cr1, [r2, #-0]
    53a8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    53ac:	77b61c00 	ldrvc	r1, [r6, r0, lsl #24]!
    53b0:	1a610800 	bne	18473b8 <__RW_SIZE__+0x1846e24>
    53b4:	011d0000 	tsteq	sp, r0
    53b8:	1d300153 	ldfnes	f0, [r0, #-332]!	; 0xfffffeb4
    53bc:	0a035201 	beq	d9bc8 <__RW_SIZE__+0xd9634>
    53c0:	011dffff 			; <UNDEFINED> instruction: 0x011dffff
    53c4:	dc080251 	sfmle	f0, 4, [r8], {81}	; 0x51
    53c8:	0150011d 	cmpeq	r0, sp, lsl r1
    53cc:	7d021d30 	stcvc	13, cr1, [r2, #-192]	; 0xffffff40
    53d0:	40030508 	andmi	r0, r3, r8, lsl #10
    53d4:	1d08010d 	stfnes	f0, [r8, #-52]	; 0xffffffcc
    53d8:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
    53dc:	021d0074 	andseq	r0, sp, #116	; 0x74
    53e0:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    53e4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    53e8:	0000044c 	andeq	r0, r0, ip, asr #8
    53ec:	080077bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
    53f0:	00000034 	andeq	r0, r0, r4, lsr r0
    53f4:	0b179c01 	bleq	5ec400 <__RW_SIZE__+0x5ebe6c>
    53f8:	59200000 	stmdbpl	r0!, {}	; <UNPREDICTABLE>
    53fc:	14000004 	strne	r0, [r0], #-4
    5400:	00000022 	andeq	r0, r0, r2, lsr #32
    5404:	0004941e 	andeq	r9, r4, lr, lsl r4
    5408:	0077f000 	rsbseq	pc, r7, r0
    540c:	00007008 	andeq	r7, r0, r8
    5410:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    5414:	2600000b 	strcs	r0, [r0], -fp
    5418:	000004a1 	andeq	r0, r0, r1, lsr #9
    541c:	000022dc 	ldrdeq	r2, [r0], -ip
    5420:	0004ac26 	andeq	sl, r4, r6, lsr #24
    5424:	00230700 	eoreq	r0, r3, r0, lsl #14
    5428:	04b72000 	ldrteq	r2, [r7], #0
    542c:	23320000 	teqcs	r2, #0
    5430:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5434:	00000c95 	muleq	r0, r5, ip
    5438:	60012c01 	andvs	r2, r1, r1, lsl #24
    543c:	30080078 	andcc	r0, r8, r8, ror r0
    5440:	01000004 	tsteq	r0, r4
    5444:	000ce99c 	muleq	ip, ip, r9
    5448:	00692a00 	rsbeq	r2, r9, r0, lsl #20
    544c:	73012e01 	movwvc	r2, #7681	; 0x1e01
    5450:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5454:	2a000024 	bcs	54ec <__RW_SIZE__+0x4f58>
    5458:	2e01006a 	cdpcs	0, 0, cr0, cr1, cr10, {3}
    545c:	00007301 	andeq	r7, r0, r1, lsl #6
    5460:	0024b600 	eoreq	fp, r4, r0, lsl #12
    5464:	03ca2b00 	biceq	r2, sl, #0, 22
    5468:	78840000 	stmvc	r4, {}	; <UNPREDICTABLE>
    546c:	23b80800 			; <UNDEFINED> instruction: 0x23b80800
    5470:	36010000 	strcc	r0, [r1], -r0
    5474:	000bd501 	andeq	sp, fp, r1, lsl #10
    5478:	04282600 	strteq	r2, [r8], #-1536	; 0xfffffa00
    547c:	252a0000 	strcs	r0, [sl, #-0]!
    5480:	1d260000 	stcne	0, cr0, [r6, #-0]
    5484:	2a000004 	bcs	549c <__RW_SIZE__+0x4f08>
    5488:	26000025 	strcs	r0, [r0], -r5, lsr #32
    548c:	00000412 	andeq	r0, r0, r2, lsl r4
    5490:	0000257a 	andeq	r2, r0, sl, ror r5
    5494:	00040726 	andeq	r0, r4, r6, lsr #14
    5498:	00260900 	eoreq	r0, r6, r0, lsl #18
    549c:	03fc2600 	mvnseq	r2, #0, 12
    54a0:	26980000 	ldrcs	r0, [r8], r0
    54a4:	f1260000 			; <UNDEFINED> instruction: 0xf1260000
    54a8:	e8000003 	stmda	r0, {r0, r1}
    54ac:	26000026 	strcs	r0, [r0], -r6, lsr #32
    54b0:	000003e6 	andeq	r0, r0, r6, ror #7
    54b4:	00002738 	andeq	r2, r0, r8, lsr r7
    54b8:	0003db26 	andeq	sp, r3, r6, lsr #22
    54bc:	0027d500 	eoreq	sp, r7, r0, lsl #10
    54c0:	ca2b0000 	bgt	ac54c8 <__RW_SIZE__+0xac4f34>
    54c4:	02000003 	andeq	r0, r0, #3
    54c8:	7808007a 	stmdavc	r8, {r1, r3, r4, r5, r6}
    54cc:	01000024 	tsteq	r0, r4, lsr #32
    54d0:	0c320141 	ldfeqs	f0, [r2], #-260	; 0xfffffefc
    54d4:	28260000 	stmdacs	r6!, {}	; <UNPREDICTABLE>
    54d8:	80000004 	andhi	r0, r0, r4
    54dc:	26000028 	strcs	r0, [r0], -r8, lsr #32
    54e0:	0000041d 	andeq	r0, r0, sp, lsl r4
    54e4:	00002880 	andeq	r2, r0, r0, lsl #17
    54e8:	00041226 	andeq	r1, r4, r6, lsr #4
    54ec:	0028a000 	eoreq	sl, r8, r0
    54f0:	04072600 	streq	r2, [r7], #-1536	; 0xfffffa00
    54f4:	28be0000 	ldmcs	lr!, {}	; <UNPREDICTABLE>
    54f8:	fc260000 	stc2	0, cr0, [r6], #-0
    54fc:	e9000003 	stmdb	r0, {r0, r1}
    5500:	26000028 	strcs	r0, [r0], -r8, lsr #32
    5504:	000003f1 	strdeq	r0, [r0], -r1
    5508:	000028e9 	andeq	r2, r0, r9, ror #17
    550c:	0003e626 	andeq	lr, r3, r6, lsr #12
    5510:	00290900 	eoreq	r0, r9, r0, lsl #18
    5514:	03db2600 	bicseq	r2, fp, #0, 12
    5518:	292f0000 	stmdbcs	pc!, {}	; <UNPREDICTABLE>
    551c:	2b000000 	blcs	5524 <__RW_SIZE__+0x4f90>
    5520:	000003ca 	andeq	r0, r0, sl, asr #7
    5524:	08007a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, sp, lr}
    5528:	00002490 	muleq	r0, r0, r4
    552c:	8f014f01 	svchi	0x00014f01
    5530:	2600000c 	strcs	r0, [r0], -ip
    5534:	00000428 	andeq	r0, r0, r8, lsr #8
    5538:	00002955 	andeq	r2, r0, r5, asr r9
    553c:	00041d26 	andeq	r1, r4, r6, lsr #26
    5540:	00295500 	eoreq	r5, r9, r0, lsl #10
    5544:	04122600 	ldreq	r2, [r2], #-1536	; 0xfffffa00
    5548:	29a50000 	stmibcs	r5!, {}	; <UNPREDICTABLE>
    554c:	07260000 	streq	r0, [r6, -r0]!
    5550:	fa000004 	blx	5568 <__RW_SIZE__+0x4fd4>
    5554:	26000029 	strcs	r0, [r0], -r9, lsr #32
    5558:	000003fc 	strdeq	r0, [r0], -ip
    555c:	00002955 	andeq	r2, r0, r5, asr r9
    5560:	0003f126 	andeq	pc, r3, r6, lsr #2
    5564:	00295500 	eoreq	r5, r9, r0, lsl #10
    5568:	03e62600 	mvneq	r2, #0, 12
    556c:	2aa10000 	bcs	fe845574 <MSP_BASE+0xde840574>
    5570:	db260000 	blle	985578 <__RW_SIZE__+0x984fe4>
    5574:	0a000003 	beq	5588 <__RW_SIZE__+0x4ff4>
    5578:	0000002b 	andeq	r0, r0, fp, lsr #32
    557c:	0003ca2c 	andeq	ip, r3, ip, lsr #20
    5580:	007b1a00 	rsbseq	r1, fp, r0, lsl #20
    5584:	0024f008 	eoreq	pc, r4, r8
    5588:	015b0100 	cmpeq	fp, r0, lsl #2
    558c:	00042826 	andeq	r2, r4, r6, lsr #16
    5590:	002b7300 	eoreq	r7, fp, r0, lsl #6
    5594:	041d2600 	ldreq	r2, [sp], #-1536	; 0xfffffa00
    5598:	2b870000 	blcs	fe1c55a0 <MSP_BASE+0xde1c05a0>
    559c:	12260000 	eorne	r0, r6, #0
    55a0:	9b000004 	blls	55b8 <__RW_SIZE__+0x5024>
    55a4:	2600002b 	strcs	r0, [r0], -fp, lsr #32
    55a8:	00000407 	andeq	r0, r0, r7, lsl #8
    55ac:	00002bae 	andeq	r2, r0, lr, lsr #23
    55b0:	0003fc26 	andeq	pc, r3, r6, lsr #24
    55b4:	002bc100 	eoreq	ip, fp, r0, lsl #2
    55b8:	03f12600 	mvnseq	r2, #0, 12
    55bc:	2bc10000 	blcs	ff0455c4 <MSP_BASE+0xdf0405c4>
    55c0:	e6260000 	strt	r0, [r6], -r0
    55c4:	d5000003 	strle	r0, [r0, #-3]
    55c8:	2600002b 	strcs	r0, [r0], -fp, lsr #32
    55cc:	000003db 	ldrdeq	r0, [r0], -fp
    55d0:	00002bec 	andeq	r2, r0, ip, ror #23
    55d4:	28290000 	stmdacs	r9!, {}	; <UNPREDICTABLE>
    55d8:	0100000b 	tsteq	r0, fp
    55dc:	7c900165 	ldfvcs	f0, [r0], {101}	; 0x65
    55e0:	07640800 	strbeq	r0, [r4, -r0, lsl #16]!
    55e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    55e8:	00000efb 	strdeq	r0, [r0], -fp
    55ec:	000ae02d 	andeq	lr, sl, sp, lsr #32
    55f0:	01670100 	cmneq	r7, r0, lsl #2
    55f4:	00000073 	andeq	r0, r0, r3, ror r0
    55f8:	06e00305 	strbteq	r0, [r0], r5, lsl #6
    55fc:	242e2000 	strtcs	r2, [lr], #-0
    5600:	0100000d 	tsteq	r0, sp
    5604:	00730168 	rsbseq	r0, r3, r8, ror #2
    5608:	2d050000 	stccs	0, cr0, [r5, #-0]
    560c:	00000d34 	andeq	r0, r0, r4, lsr sp
    5610:	73016901 	movwvc	r6, #6401	; 0x1901
    5614:	05000000 	streq	r0, [r0, #-0]
    5618:	0006e403 	andeq	lr, r6, r3, lsl #8
    561c:	0d2f2d20 	stceq	13, cr2, [pc, #-128]!	; 55a4 <__RW_SIZE__+0x5010>
    5620:	6a010000 	bvs	45628 <__RW_SIZE__+0x45094>
    5624:	00007301 	andeq	r7, r0, r1, lsl #6
    5628:	e8030500 	stmda	r3, {r8, sl}
    562c:	2d200006 	stccs	0, cr0, [r0, #-24]!	; 0xffffffe8
    5630:	00000cee 	andeq	r0, r0, lr, ror #25
    5634:	73016b01 	movwvc	r6, #6913	; 0x1b01
    5638:	05000000 	streq	r0, [r0, #-0]
    563c:	0006ec03 	andeq	lr, r6, r3, lsl #24
    5640:	0a312f20 	beq	c512c8 <__RW_SIZE__+0xc50d34>
    5644:	82010000 	andhi	r0, r1, #0
    5648:	00007301 	andeq	r7, r0, r1, lsl #6
    564c:	002c0300 	eoreq	r0, ip, r0, lsl #6
    5650:	0bc62f00 	bleq	ff191258 <MSP_BASE+0xdf18c258>
    5654:	83010000 	movwhi	r0, #4096	; 0x1000
    5658:	00007301 	andeq	r7, r0, r1, lsl #6
    565c:	002c6e00 	eoreq	r6, ip, r0, lsl #28
    5660:	25083000 	strcs	r3, [r8, #-0]
    5664:	0dac0000 	stceq	0, cr0, [ip]
    5668:	692a0000 	stmdbvs	sl!, {}	; <UNPREDICTABLE>
    566c:	01870100 	orreq	r0, r7, r0, lsl #2
    5670:	00000073 	andeq	r0, r0, r3, ror r0
    5674:	00002ca2 	andeq	r2, r0, r2, lsr #25
    5678:	0004342c 	andeq	r3, r4, ip, lsr #8
    567c:	007d3800 	rsbseq	r3, sp, r0, lsl #16
    5680:	00252808 	eoreq	r2, r5, r8, lsl #16
    5684:	018a0100 	orreq	r0, sl, r0, lsl #2
    5688:	00252821 	eoreq	r2, r5, r1, lsr #16
    568c:	04412000 	strbeq	r2, [r1], #-0
    5690:	2cd70000 	ldclcs	0, cr0, [r7], {0}
    5694:	00000000 	andeq	r0, r0, r0
    5698:	04642500 	strbteq	r2, [r4], #-1280	; 0xfffffb00
    569c:	7dc60000 	stclvc	0, cr0, [r6]
    56a0:	01040800 	tsteq	r4, r0, lsl #16
    56a4:	95010000 	strls	r0, [r1, #-0]
    56a8:	000dd401 	andeq	sp, sp, r1, lsl #8
    56ac:	7dc61f00 	stclvc	15, cr1, [r6]
    56b0:	01040800 	tsteq	r4, r0, lsl #16
    56b4:	71200000 	teqvc	r0, r0
    56b8:	c3000004 	movwgt	r0, #4
    56bc:	0000002d 	andeq	r0, r0, sp, lsr #32
    56c0:	06132b00 	ldreq	r2, [r3], -r0, lsl #22
    56c4:	7eca0000 	cdpvc	0, 12, cr0, cr10, cr0, {0}
    56c8:	25480800 	strbcs	r0, [r8, #-2048]	; 0xfffff800
    56cc:	96010000 	strls	r0, [r1], -r0
    56d0:	000df801 	andeq	pc, sp, r1, lsl #16
    56d4:	25482100 	strbcs	r2, [r8, #-256]	; 0xffffff00
    56d8:	1f200000 	svcne	0x00200000
    56dc:	73000006 	movwvc	r0, #6
    56e0:	0000002e 	andeq	r0, r0, lr, lsr #32
    56e4:	047c2500 	ldrbteq	r2, [ip], #-1280	; 0xfffffb00
    56e8:	7f980000 	svcvc	0x00980000
    56ec:	00aa0800 	adceq	r0, sl, r0, lsl #16
    56f0:	97010000 	strls	r0, [r1, -r0]
    56f4:	000e2001 	andeq	r2, lr, r1
    56f8:	7f981f00 	svcvc	0x00981f00
    56fc:	00aa0800 	adceq	r0, sl, r0, lsl #16
    5700:	89200000 	stmdbhi	r0!, {}	; <UNPREDICTABLE>
    5704:	53000004 	movwpl	r0, #4
    5708:	0000002f 	andeq	r0, r0, pc, lsr #32
    570c:	25683000 	strbcs	r3, [r8, #-0]!
    5710:	0e660000 	cdpeq	0, 6, cr0, cr6, cr0, {0}
    5714:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    5718:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
    571c:	00000073 	andeq	r0, r0, r3, ror r0
    5720:	0004942c 	andeq	r9, r4, ip, lsr #8
    5724:	00808400 	addeq	r8, r0, r0, lsl #8
    5728:	00259008 	eoreq	r9, r5, r8
    572c:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    5730:	0004ac26 	andeq	sl, r4, r6, lsr #24
    5734:	002fbb00 	eoreq	fp, pc, r0, lsl #22
    5738:	04a12600 	strteq	r2, [r1], #1536	; 0x600
    573c:	2ffb0000 	svccs	0x00fb0000
    5740:	90210000 	eorls	r0, r1, r0
    5744:	20000025 	andcs	r0, r0, r5, lsr #32
    5748:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    574c:	0000303b 	andeq	r3, r0, fp, lsr r0
    5750:	25000000 	strcs	r0, [r0, #-0]
    5754:	0000044c 	andeq	r0, r0, ip, asr #8
    5758:	0800816a 	stmdaeq	r0, {r1, r3, r5, r6, r8, pc}
    575c:	0000002a 	andeq	r0, r0, sl, lsr #32
    5760:	8e019201 	cdphi	2, 0, cr9, cr1, cr1, {0}
    5764:	1f00000e 	svcne	0x0000000e
    5768:	0800816a 	stmdaeq	r0, {r1, r3, r5, r6, r8, pc}
    576c:	0000002a 	andeq	r0, r0, sl, lsr #32
    5770:	00045920 	andeq	r5, r4, r0, lsr #18
    5774:	00312700 	eorseq	r2, r1, r0, lsl #14
    5778:	2b000000 	blcs	5780 <__RW_SIZE__+0x51ec>
    577c:	000005c2 	andeq	r0, r0, r2, asr #11
    5780:	080081c8 	stmdaeq	r0, {r3, r6, r7, r8, pc}
    5784:	000025c8 	andeq	r2, r0, r8, asr #11
    5788:	c401a601 	strgt	sl, [r1], #-1537	; 0xfffff9ff
    578c:	2100000e 	tstcs	r0, lr
    5790:	000025c8 	andeq	r2, r0, r8, asr #11
    5794:	0005cf20 	andeq	ip, r5, r0, lsr #30
    5798:	0031ef00 	eorseq	lr, r1, r0, lsl #30
    579c:	83861b00 	orrhi	r1, r6, #0, 22
    57a0:	1a2a0800 	bne	a877a8 <__RW_SIZE__+0xa87214>
    57a4:	b21b0000 	andslt	r0, fp, #0
    57a8:	2a080083 	bcs	2059bc <__RW_SIZE__+0x205428>
    57ac:	0000001a 	andeq	r0, r0, sl, lsl r0
    57b0:	057a2b00 	ldrbeq	r2, [sl, #-2816]!	; 0xfffff500
    57b4:	820c0000 	andhi	r0, ip, #0
    57b8:	25f00800 	ldrbcs	r0, [r0, #2048]!	; 0x800
    57bc:	a0010000 	andge	r0, r1, r0
    57c0:	000ef101 	andeq	pc, lr, r1, lsl #2
    57c4:	25f02100 	ldrbcs	r2, [r0, #256]!	; 0x100
    57c8:	87200000 	strhi	r0, [r0, -r0]!
    57cc:	63000005 	movwvs	r0, #5
    57d0:	1b000032 	blne	58a0 <__RW_SIZE__+0x530c>
    57d4:	0800833c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, pc}
    57d8:	00001a2a 	andeq	r1, r0, sl, lsr #20
    57dc:	461b0000 	ldrmi	r0, [fp], -r0
    57e0:	46080080 	strmi	r0, [r8], -r0, lsl #1
    57e4:	0000000b 	andeq	r0, r0, fp
    57e8:	000c3128 	andeq	r3, ip, r8, lsr #2
    57ec:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    57f0:	0efb1e01 	cdpeq	14, 15, cr1, cr11, cr1, {0}
    57f4:	83f40000 	mvnshi	r0, #0
    57f8:	03b00800 	movseq	r0, #0, 16
    57fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5800:	0000122b 	andeq	r1, r0, fp, lsr #4
    5804:	0007f82b 	andeq	pc, r7, fp, lsr #16
    5808:	00840c00 	addeq	r0, r4, r0, lsl #24
    580c:	00261808 	eoreq	r1, r6, r8, lsl #16
    5810:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    5814:	00001077 	andeq	r1, r0, r7, ror r0
    5818:	00261821 	eoreq	r1, r6, r1, lsr #16
    581c:	08052000 	stmdaeq	r5, {sp}
    5820:	32d70000 	sbcscc	r0, r7, #0
    5824:	a8220000 	stmdage	r2!, {}	; <UNPREDICTABLE>
    5828:	35080085 	strcc	r0, [r8, #-133]	; 0xffffff7b
    582c:	5900001a 	stmdbpl	r0, {r1, r3, r4}
    5830:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    5834:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5838:	0152011d 	cmpeq	r2, sp, lsl r1
    583c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5840:	e00a0300 	and	r0, sl, r0, lsl #6
    5844:	ca220007 	bgt	885868 <__RW_SIZE__+0x8852d4>
    5848:	35080085 	strcc	r0, [r8, #-133]	; 0xffffff7b
    584c:	7900001a 	stmdbvc	r0, {r1, r3, r4}
    5850:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    5854:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5858:	0152011d 	cmpeq	r2, sp, lsl r1
    585c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5860:	e00a0300 	and	r0, sl, r0, lsl #6
    5864:	ec220007 	stc	0, cr0, [r2], #-28	; 0xffffffe4
    5868:	35080085 	strcc	r0, [r8, #-133]	; 0xffffff7b
    586c:	9900001a 	stmdbls	r0, {r1, r3, r4}
    5870:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    5874:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5878:	0152011d 	cmpeq	r2, sp, lsl r1
    587c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5880:	e00a0300 	and	r0, sl, r0, lsl #6
    5884:	0e220007 	cdpeq	0, 2, cr0, cr2, cr7, {0}
    5888:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    588c:	b900001a 	stmdblt	r0, {r1, r3, r4}
    5890:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    5894:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5898:	0152011d 	cmpeq	r2, sp, lsl r1
    589c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    58a0:	e00a0300 	and	r0, sl, r0, lsl #6
    58a4:	30220007 	eorcc	r0, r2, r7
    58a8:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    58ac:	d900001a 	stmdble	r0, {r1, r3, r4}
    58b0:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    58b4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    58b8:	0152011d 	cmpeq	r2, sp, lsl r1
    58bc:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    58c0:	e00a0300 	and	r0, sl, r0, lsl #6
    58c4:	52220007 	eorpl	r0, r2, #7
    58c8:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    58cc:	f900001a 			; <UNDEFINED> instruction: 0xf900001a
    58d0:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
    58d4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    58d8:	0152011d 	cmpeq	r2, sp, lsl r1
    58dc:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    58e0:	e00a0300 	and	r0, sl, r0, lsl #6
    58e4:	74220007 	strtvc	r0, [r2], #-7
    58e8:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    58ec:	1900001a 	stmdbne	r0, {r1, r3, r4}
    58f0:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    58f4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    58f8:	0152011d 	cmpeq	r2, sp, lsl r1
    58fc:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5900:	e00a0300 	and	r0, sl, r0, lsl #6
    5904:	96220007 	strtls	r0, [r2], -r7
    5908:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    590c:	3900001a 	stmdbcc	r0, {r1, r3, r4}
    5910:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    5914:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5918:	0152011d 	cmpeq	r2, sp, lsl r1
    591c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5920:	e00a0300 	and	r0, sl, r0, lsl #6
    5924:	b8220007 	stmdalt	r2!, {r0, r1, r2}
    5928:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    592c:	5900001a 	stmdbpl	r0, {r1, r3, r4}
    5930:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    5934:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5938:	0152011d 	cmpeq	r2, sp, lsl r1
    593c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5940:	e00a0300 	and	r0, sl, r0, lsl #6
    5944:	da1c0007 	ble	705968 <__RW_SIZE__+0x7053d4>
    5948:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    594c:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5950:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5954:	0152011d 	cmpeq	r2, sp, lsl r1
    5958:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    595c:	e00a0300 	and	r0, sl, r0, lsl #6
    5960:	00000007 	andeq	r0, r0, r7
    5964:	00066d2b 	andeq	r6, r6, fp, lsr #26
    5968:	0084b800 	addeq	fp, r4, r0, lsl #16
    596c:	00264008 	eoreq	r4, r6, r8
    5970:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    5974:	00001132 	andeq	r1, r0, r2, lsr r1
    5978:	00264021 	eoreq	r4, r6, r1, lsr #32
    597c:	067a2000 	ldrbteq	r2, [sl], -r0
    5980:	33e70000 	mvncc	r0, #0
    5984:	fe220000 	cdp2	0, 2, cr0, cr2, cr0, {0}
    5988:	35080086 	strcc	r0, [r8, #-134]	; 0xffffff7a
    598c:	b800001a 	stmdalt	r0, {r1, r3, r4}
    5990:	1d000010 	stcne	0, cr0, [r0, #-64]	; 0xffffffc0
    5994:	40015301 	andmi	r5, r1, r1, lsl #6
    5998:	0152011d 	cmpeq	r2, sp, lsl r1
    599c:	7d021d40 	stcvc	13, cr1, [r2, #-256]	; 0xffffff00
    59a0:	e0090200 	and	r0, r9, r0, lsl #4
    59a4:	87262200 	strhi	r2, [r6, -r0, lsl #4]!
    59a8:	1a350800 	bne	d479b0 <__RW_SIZE__+0xd4741c>
    59ac:	10d70000 	sbcsne	r0, r7, r0
    59b0:	011d0000 	tsteq	sp, r0
    59b4:	1d400153 	stfnee	f0, [r0, #-332]	; 0xfffffeb4
    59b8:	40015201 	andmi	r5, r1, r1, lsl #4
    59bc:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    59c0:	00e00902 	rsceq	r0, r0, r2, lsl #18
    59c4:	00874e22 	addeq	r4, r7, r2, lsr #28
    59c8:	001a3508 	andseq	r3, sl, r8, lsl #10
    59cc:	0010f600 	andseq	pc, r0, r0, lsl #12
    59d0:	53011d00 	movwpl	r1, #7424	; 0x1d00
    59d4:	011d4001 	tsteq	sp, r1
    59d8:	1d400152 	stfnee	f0, [r0, #-328]	; 0xfffffeb8
    59dc:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    59e0:	2200e009 	andcs	lr, r0, #9
    59e4:	08008776 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, pc}
    59e8:	00001a35 	andeq	r1, r0, r5, lsr sl
    59ec:	00001115 	andeq	r1, r0, r5, lsl r1
    59f0:	0153011d 	cmpeq	r3, sp, lsl r1
    59f4:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    59f8:	021d4001 	andseq	r4, sp, #1
    59fc:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    5a00:	9e1c00e0 	cdpls	0, 1, cr0, cr12, cr0, {7}
    5a04:	35080087 	strcc	r0, [r8, #-135]	; 0xffffff79
    5a08:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5a0c:	40015301 	andmi	r5, r1, r1, lsl #6
    5a10:	0152011d 	cmpeq	r2, sp, lsl r1
    5a14:	7d021d40 	stcvc	13, cr1, [r2, #-256]	; 0xffffff00
    5a18:	e0090200 	and	r0, r9, r0, lsl #4
    5a1c:	25000000 	strcs	r0, [r0, #-0]
    5a20:	0000073f 	andeq	r0, r0, pc, lsr r7
    5a24:	08008514 	stmdaeq	r0, {r2, r4, r8, sl, pc}
    5a28:	00000032 	andeq	r0, r0, r2, lsr r0
    5a2c:	7901be01 	stmdbvc	r1, {r0, r9, sl, fp, ip, sp, pc}
    5a30:	1f000011 	svcne	0x00000011
    5a34:	08008514 	stmdaeq	r0, {r2, r4, r8, sl, pc}
    5a38:	00000032 	andeq	r0, r0, r2, lsr r0
    5a3c:	00074c31 	andeq	r4, r7, r1, lsr ip
    5a40:	26582100 	ldrbcs	r2, [r8], -r0, lsl #2
    5a44:	56200000 	strtpl	r0, [r0], -r0
    5a48:	73000007 	movwvc	r0, #7
    5a4c:	1c000034 	stcne	0, cr0, [r0], {52}	; 0x34
    5a50:	08008540 	stmdaeq	r0, {r6, r8, sl, pc}
    5a54:	00001a35 	andeq	r1, r0, r5, lsr sl
    5a58:	0153011d 	cmpeq	r3, sp, lsl r1
    5a5c:	52011d3a 	andpl	r1, r1, #3712	; 0xe80
    5a60:	00003a01 	andeq	r3, r0, r1, lsl #20
    5a64:	66250000 	strtvs	r0, [r5], -r0
    5a68:	4600000a 	strmi	r0, [r0], -sl
    5a6c:	4a080085 	bmi	205c88 <__RW_SIZE__+0x2056f4>
    5a70:	01000000 	mrseq	r0, (UNDEF: 0)
    5a74:	120501bf 	andne	r0, r5, #-1073741777	; 0xc000002f
    5a78:	70220000 	eorvc	r0, r2, r0
    5a7c:	61080085 	smlabbvs	r8, r5, r0, r0
    5a80:	cb00001a 	blgt	5af0 <__RW_SIZE__+0x555c>
    5a84:	1d000011 	stcne	0, cr0, [r0, #-68]	; 0xffffffbc
    5a88:	30015301 	andcc	r5, r1, r1, lsl #6
    5a8c:	0352011d 	cmpeq	r2, #1073741831	; 0x40000007
    5a90:	1dffff0a 	ldclne	15, cr15, [pc, #40]!	; 5ac0 <__RW_SIZE__+0x552c>
    5a94:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    5a98:	50011ddc 	ldrdpl	r1, [r1], -ip
    5a9c:	1dc80802 	stclne	8, cr0, [r8, #8]
    5aa0:	05087d02 	streq	r7, [r8, #-3330]	; 0xfffff2fe
    5aa4:	010d3003 	tsteq	sp, r3
    5aa8:	7d021d08 	stcvc	13, cr1, [r2, #-32]	; 0xffffffe0
    5aac:	00740204 	rsbseq	r0, r4, r4, lsl #4
    5ab0:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    5ab4:	00007402 	andeq	r7, r0, r2, lsl #8
    5ab8:	0085901c 	addeq	r9, r5, ip, lsl r0
    5abc:	001a6108 	andseq	r6, sl, r8, lsl #2
    5ac0:	53011d00 	movwpl	r1, #7424	; 0x1d00
    5ac4:	011d3001 	tsteq	sp, r1
    5ac8:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    5acc:	51011dff 	strdpl	r1, [r1, -pc]
    5ad0:	1ddc0802 	ldclne	8, cr0, [ip, #8]
    5ad4:	30015001 	andcc	r5, r1, r1
    5ad8:	087d021d 	ldmdaeq	sp!, {r0, r2, r3, r4, r9}^
    5adc:	0d400305 	stcleq	3, cr0, [r0, #-20]	; 0xffffffec
    5ae0:	021d0801 	andseq	r0, sp, #65536	; 0x10000
    5ae4:	7402047d 	strvc	r0, [r2], #-1149	; 0xfffffb83
    5ae8:	7d021d00 	stcvc	13, cr1, [r2, #-0]
    5aec:	00740200 	rsbseq	r0, r4, r0, lsl #4
    5af0:	021b0000 	andseq	r0, fp, #0
    5af4:	5a080084 	bpl	205d0c <__RW_SIZE__+0x205778>
    5af8:	1c00001a 	stcne	0, cr0, [r0], {26}
    5afc:	08008420 	stmdaeq	r0, {r5, sl, pc}
    5b00:	00001a35 	andeq	r1, r0, r5, lsr sl
    5b04:	0153011d 	cmpeq	r3, sp, lsl r1
    5b08:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    5b0c:	021d4001 	andseq	r4, sp, #1
    5b10:	0b03007d 	bleq	c5d0c <__RW_SIZE__+0xc5778>
    5b14:	0000f800 	andeq	pc, r0, r0, lsl #16
    5b18:	000c4f28 	andeq	r4, ip, r8, lsr #30
    5b1c:	01c20100 	biceq	r0, r2, r0, lsl #2
    5b20:	122b1e01 	eorne	r1, fp, #1, 28
    5b24:	87a40000 	strhi	r0, [r4, r0]!
    5b28:	004a0800 	subeq	r0, sl, r0, lsl #16
    5b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b30:	000012c5 	andeq	r1, r0, r5, asr #5
    5b34:	0087ac1b 	addeq	sl, r7, fp, lsl ip
    5b38:	001a5a08 	andseq	r5, sl, r8, lsl #20
    5b3c:	87ca2200 	strbhi	r2, [sl, r0, lsl #4]
    5b40:	1a610800 	bne	1847b48 <__RW_SIZE__+0x18475b4>
    5b44:	128c0000 	addne	r0, ip, #0
    5b48:	011d0000 	tsteq	sp, r0
    5b4c:	1d300153 	ldfnes	f0, [r0, #-332]!	; 0xfffffeb4
    5b50:	0a035201 	beq	da35c <__RW_SIZE__+0xd9dc8>
    5b54:	011dffff 			; <UNDEFINED> instruction: 0x011dffff
    5b58:	64080251 	strvs	r0, [r8], #-593	; 0xfffffdaf
    5b5c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5b60:	021d3c08 	andseq	r3, sp, #8, 24	; 0x800
    5b64:	0305087d 	movweq	r0, #22653	; 0x587d
    5b68:	08010d48 	stmdaeq	r1, {r3, r6, r8, sl, fp}
    5b6c:	047d021d 	ldrbteq	r0, [sp], #-541	; 0xfffffde3
    5b70:	021d3201 	andseq	r3, sp, #268435456	; 0x10000000
    5b74:	3201007d 	andcc	r0, r1, #125	; 0x7d
    5b78:	87e81c00 	strbhi	r1, [r8, r0, lsl #24]!
    5b7c:	1a610800 	bne	1847b84 <__RW_SIZE__+0x18475f0>
    5b80:	011d0000 	tsteq	sp, r0
    5b84:	1d300153 	ldfnes	f0, [r0, #-332]!	; 0xfffffeb4
    5b88:	0a035201 	beq	da394 <__RW_SIZE__+0xd9e00>
    5b8c:	011d07e0 	tsteq	sp, r0, ror #15
    5b90:	a0080251 	andge	r0, r8, r1, asr r2
    5b94:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5b98:	021d5008 	andseq	r5, sp, #8
    5b9c:	0305087d 	movweq	r0, #22653	; 0x587d
    5ba0:	08010d58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp}
    5ba4:	047d021d 	ldrbteq	r0, [sp], #-541	; 0xfffffde3
    5ba8:	021d3101 	andseq	r3, sp, #1073741824	; 0x40000000
    5bac:	3101007d 	tstcc	r1, sp, ror r0
    5bb0:	03280000 	teqeq	r8, #0
    5bb4:	0100000c 	tsteq	r0, ip
    5bb8:	1e0101c9 	adfnedm	f0, f1, #1.0
    5bbc:	000012c5 	andeq	r1, r0, r5, asr #5
    5bc0:	080087f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bc4:	00000048 	andeq	r0, r0, r8, asr #32
    5bc8:	135d9c01 	cmpne	sp, #256	; 0x100
    5bcc:	f81b0000 			; <UNDEFINED> instruction: 0xf81b0000
    5bd0:	5a080087 	bpl	205df4 <__RW_SIZE__+0x205860>
    5bd4:	2200001a 	andcs	r0, r0, #26
    5bd8:	08008816 	stmdaeq	r0, {r1, r2, r4, fp, pc}
    5bdc:	00001a61 	andeq	r1, r0, r1, ror #20
    5be0:	00001326 	andeq	r1, r0, r6, lsr #6
    5be4:	0153011d 	cmpeq	r3, sp, lsl r1
    5be8:	52011d30 	andpl	r1, r1, #48, 26	; 0xc00
    5bec:	f8000a03 			; <UNDEFINED> instruction: 0xf8000a03
    5bf0:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    5bf4:	011d6408 	tsteq	sp, r8, lsl #8
    5bf8:	50080250 	andpl	r0, r8, r0, asr r2
    5bfc:	087d021d 	ldmdaeq	sp!, {r0, r2, r3, r4, r9}^
    5c00:	0d700305 	ldcleq	3, cr0, [r0, #-20]!	; 0xffffffec
    5c04:	021d0801 	andseq	r0, sp, #65536	; 0x10000
    5c08:	3201047d 	andcc	r0, r1, #2097152000	; 0x7d000000
    5c0c:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    5c10:	1c003201 	sfmne	f3, 4, [r0], {1}
    5c14:	08008832 	stmdaeq	r0, {r1, r4, r5, fp, pc}
    5c18:	00001a61 	andeq	r1, r0, r1, ror #20
    5c1c:	0153011d 	cmpeq	r3, sp, lsl r1
    5c20:	52011d30 	andpl	r1, r1, #48, 26	; 0xc00
    5c24:	011d4f01 	tsteq	sp, r1, lsl #30
    5c28:	a0080251 	andge	r0, r8, r1, asr r2
    5c2c:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5c30:	021d3c08 	andseq	r3, sp, #8, 24	; 0x800
    5c34:	0305087d 	movweq	r0, #22653	; 0x587d
    5c38:	08010d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp}
    5c3c:	047d021d 	ldrbteq	r0, [sp], #-541	; 0xfffffde3
    5c40:	021d3101 	andseq	r3, sp, #1073741824	; 0x40000000
    5c44:	3101007d 	tstcc	r1, sp, ror r0
    5c48:	90290000 	eorls	r0, r9, r0
    5c4c:	0100000c 	tsteq	r0, ip
    5c50:	883801d0 	ldmdahi	r8!, {r4, r6, r7, r8}
    5c54:	04900800 	ldreq	r0, [r0], #2048	; 0x800
    5c58:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c5c:	000018e3 	andeq	r1, r0, r3, ror #17
    5c60:	000efb2b 	andeq	pc, lr, fp, lsr #22
    5c64:	0088c400 	addeq	ip, r8, r0, lsl #8
    5c68:	00267008 	eoreq	r7, r6, r8
    5c6c:	01ec0100 	mvneq	r0, r0, lsl #2
    5c70:	0000169b 	muleq	r0, fp, r6
    5c74:	0007f82b 	andeq	pc, r7, fp, lsr #16
    5c78:	0088c400 	addeq	ip, r8, r0, lsl #8
    5c7c:	00269008 	eoreq	r9, r6, r8
    5c80:	01bc0100 			; <UNDEFINED> instruction: 0x01bc0100
    5c84:	000014e7 	andeq	r1, r0, r7, ror #9
    5c88:	00269021 	eoreq	r9, r6, r1, lsr #32
    5c8c:	08052000 	stmdaeq	r5, {sp}
    5c90:	34920000 	ldrcc	r0, [r2], #0
    5c94:	52220000 	eorpl	r0, r2, #0
    5c98:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5c9c:	c900001a 	stmdbgt	r0, {r1, r3, r4}
    5ca0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    5ca4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5ca8:	0152011d 	cmpeq	r2, sp, lsl r1
    5cac:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5cb0:	e00a0300 	and	r0, sl, r0, lsl #6
    5cb4:	6e220007 	cdpvs	0, 2, cr0, cr2, cr7, {0}
    5cb8:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5cbc:	e900001a 	stmdb	r0, {r1, r3, r4}
    5cc0:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    5cc4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5cc8:	0152011d 	cmpeq	r2, sp, lsl r1
    5ccc:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5cd0:	e00a0300 	and	r0, sl, r0, lsl #6
    5cd4:	8a220007 	bhi	885cf8 <__RW_SIZE__+0x885764>
    5cd8:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5cdc:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    5ce0:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5ce4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5ce8:	0152011d 	cmpeq	r2, sp, lsl r1
    5cec:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5cf0:	e00a0300 	and	r0, sl, r0, lsl #6
    5cf4:	a6220007 	strtge	r0, [r2], -r7
    5cf8:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5cfc:	2900001a 	stmdbcs	r0, {r1, r3, r4}
    5d00:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5d04:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5d08:	0152011d 	cmpeq	r2, sp, lsl r1
    5d0c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5d10:	e00a0300 	and	r0, sl, r0, lsl #6
    5d14:	c2220007 	eorgt	r0, r2, #7
    5d18:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5d1c:	4900001a 	stmdbmi	r0, {r1, r3, r4}
    5d20:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5d24:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5d28:	0152011d 	cmpeq	r2, sp, lsl r1
    5d2c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5d30:	e00a0300 	and	r0, sl, r0, lsl #6
    5d34:	de220007 	cdple	0, 2, cr0, cr2, cr7, {0}
    5d38:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5d3c:	6900001a 	stmdbvs	r0, {r1, r3, r4}
    5d40:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5d44:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5d48:	0152011d 	cmpeq	r2, sp, lsl r1
    5d4c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5d50:	e00a0300 	and	r0, sl, r0, lsl #6
    5d54:	fa220007 	blx	885d78 <__RW_SIZE__+0x8857e4>
    5d58:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5d5c:	8900001a 	stmdbhi	r0, {r1, r3, r4}
    5d60:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5d64:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5d68:	0152011d 	cmpeq	r2, sp, lsl r1
    5d6c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5d70:	e00a0300 	and	r0, sl, r0, lsl #6
    5d74:	16220007 	strtne	r0, [r2], -r7
    5d78:	3508008c 	strcc	r0, [r8, #-140]	; 0xffffff74
    5d7c:	a900001a 	stmdbge	r0, {r1, r3, r4}
    5d80:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5d84:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5d88:	0152011d 	cmpeq	r2, sp, lsl r1
    5d8c:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5d90:	e00a0300 	and	r0, sl, r0, lsl #6
    5d94:	32220007 	eorcc	r0, r2, #7
    5d98:	3508008c 	strcc	r0, [r8, #-140]	; 0xffffff74
    5d9c:	c900001a 	stmdbgt	r0, {r1, r3, r4}
    5da0:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
    5da4:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5da8:	0152011d 	cmpeq	r2, sp, lsl r1
    5dac:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5db0:	e00a0300 	and	r0, sl, r0, lsl #6
    5db4:	c21c0007 	andsgt	r0, ip, #7
    5db8:	3508008c 	strcc	r0, [r8, #-140]	; 0xffffff74
    5dbc:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5dc0:	38015301 	stmdacc	r1, {r0, r8, r9, ip, lr}
    5dc4:	0152011d 	cmpeq	r2, sp, lsl r1
    5dc8:	7d021d34 	stcvc	13, cr1, [r2, #-208]	; 0xffffff30
    5dcc:	e00a0300 	and	r0, sl, r0, lsl #6
    5dd0:	00000007 	andeq	r0, r0, r7
    5dd4:	00066d2b 	andeq	r6, r6, fp, lsr #26
    5dd8:	0089fa00 	addeq	pc, r9, r0, lsl #20
    5ddc:	0026b808 	eoreq	fp, r6, r8, lsl #16
    5de0:	01bd0100 			; <UNDEFINED> instruction: 0x01bd0100
    5de4:	000015a2 	andeq	r1, r0, r2, lsr #11
    5de8:	0026b821 	eoreq	fp, r6, r1, lsr #16
    5dec:	067a2000 	ldrbteq	r2, [sl], -r0
    5df0:	35ae0000 	strcc	r0, [lr, #0]!
    5df4:	3e220000 	cdpcc	0, 2, cr0, cr2, cr0, {0}
    5df8:	3508008b 	strcc	r0, [r8, #-139]	; 0xffffff75
    5dfc:	2800001a 	stmdacs	r0, {r1, r3, r4}
    5e00:	1d000015 	stcne	0, cr0, [r0, #-84]	; 0xffffffac
    5e04:	40015301 	andmi	r5, r1, r1, lsl #6
    5e08:	0152011d 	cmpeq	r2, sp, lsl r1
    5e0c:	7d021d40 	stcvc	13, cr1, [r2, #-256]	; 0xffffff00
    5e10:	e0090200 	and	r0, r9, r0, lsl #4
    5e14:	8c4e2200 	sfmhi	f2, 2, [lr], {-0}
    5e18:	1a350800 	bne	d47e20 <__RW_SIZE__+0xd4788c>
    5e1c:	15470000 	strbne	r0, [r7, #-0]
    5e20:	011d0000 	tsteq	sp, r0
    5e24:	1d400153 	stfnee	f0, [r0, #-332]	; 0xfffffeb4
    5e28:	40015201 	andmi	r5, r1, r1, lsl #4
    5e2c:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    5e30:	00e00902 	rsceq	r0, r0, r2, lsl #18
    5e34:	008c6e22 	addeq	r6, ip, r2, lsr #28
    5e38:	001a3508 	andseq	r3, sl, r8, lsl #10
    5e3c:	00156600 	andseq	r6, r5, r0, lsl #12
    5e40:	53011d00 	movwpl	r1, #7424	; 0x1d00
    5e44:	011d4001 	tsteq	sp, r1
    5e48:	1d400152 	stfnee	f0, [r0, #-328]	; 0xfffffeb8
    5e4c:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    5e50:	2200e009 	andcs	lr, r0, #9
    5e54:	08008c8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, pc}
    5e58:	00001a35 	andeq	r1, r0, r5, lsr sl
    5e5c:	00001585 	andeq	r1, r0, r5, lsl #11
    5e60:	0153011d 	cmpeq	r3, sp, lsl r1
    5e64:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    5e68:	021d4001 	andseq	r4, sp, #1
    5e6c:	0902007d 	stmdbeq	r2, {r0, r2, r3, r4, r5, r6}
    5e70:	ae1c00e0 	cdpge	0, 1, cr0, cr12, cr0, {7}
    5e74:	3508008c 	strcc	r0, [r8, #-140]	; 0xffffff74
    5e78:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5e7c:	40015301 	andmi	r5, r1, r1, lsl #6
    5e80:	0152011d 	cmpeq	r2, sp, lsl r1
    5e84:	7d021d40 	stcvc	13, cr1, [r2, #-256]	; 0xffffff00
    5e88:	e0090200 	and	r0, r9, r0, lsl #4
    5e8c:	25000000 	strcs	r0, [r0, #-0]
    5e90:	0000073f 	andeq	r0, r0, pc, lsr r7
    5e94:	08008a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, pc}
    5e98:	0000002e 	andeq	r0, r0, lr, lsr #32
    5e9c:	ed01be01 	stc	14, cr11, [r1, #-4]
    5ea0:	1f000015 	svcne	0x00000015
    5ea4:	08008a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, pc}
    5ea8:	0000002e 	andeq	r0, r0, lr, lsr #32
    5eac:	00074c20 	andeq	r4, r7, r0, lsr #24
    5eb0:	00362e00 	eorseq	r2, r6, r0, lsl #28
    5eb4:	26d82100 	ldrbcs	r2, [r8], r0, lsl #2
    5eb8:	56200000 	strtpl	r0, [r0], -r0
    5ebc:	42000007 	andmi	r0, r0, #7
    5ec0:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    5ec4:	08008a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, pc}
    5ec8:	00001a35 	andeq	r1, r0, r5, lsr sl
    5ecc:	0153011d 	cmpeq	r3, sp, lsl r1
    5ed0:	52011d3a 	andpl	r1, r1, #3712	; 0xe80
    5ed4:	00003a01 	andeq	r3, r0, r1, lsl #20
    5ed8:	66250000 	strtvs	r0, [r5], -r0
    5edc:	5a00000a 	bpl	5f0c <__RW_SIZE__+0x5978>
    5ee0:	4408008a 	strmi	r0, [r8], #-138	; 0xffffff76
    5ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    5ee8:	167501bf 			; <UNDEFINED> instruction: 0x167501bf
    5eec:	7e220000 	cdpvc	0, 2, cr0, cr2, cr0, {0}
    5ef0:	6108008a 	smlabbvs	r8, sl, r0, r0
    5ef4:	3d00001a 	stccc	0, cr0, [r0, #-104]	; 0xffffff98
    5ef8:	1d000016 	stcne	0, cr0, [r0, #-88]	; 0xffffffa8
    5efc:	30015301 	andcc	r5, r1, r1, lsl #6
    5f00:	0352011d 	cmpeq	r2, #1073741831	; 0x40000007
    5f04:	1dffff0a 	ldclne	15, cr15, [pc, #40]!	; 5f34 <__RW_SIZE__+0x59a0>
    5f08:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    5f0c:	50011ddc 	ldrdpl	r1, [r1], -ip
    5f10:	1dc80802 	stclne	8, cr0, [r8, #8]
    5f14:	03087d02 	movweq	r7, #36098	; 0x8d02
    5f18:	1d064491 	cfstrsne	mvf4, [r6, #-580]	; 0xfffffdbc
    5f1c:	02047d02 	andeq	r7, r4, #2, 26	; 0x80
    5f20:	021d0074 	andseq	r0, sp, #116	; 0x74
    5f24:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    5f28:	981c0000 	ldmdals	ip, {}	; <UNPREDICTABLE>
    5f2c:	6108008a 	smlabbvs	r8, sl, r0, r0
    5f30:	1d00001a 	stcne	0, cr0, [r0, #-104]	; 0xffffff98
    5f34:	30015301 	andcc	r5, r1, r1, lsl #6
    5f38:	0352011d 	cmpeq	r2, #1073741831	; 0x40000007
    5f3c:	1dffff0a 	ldclne	15, cr15, [pc, #40]!	; 5f6c <__RW_SIZE__+0x59d8>
    5f40:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    5f44:	50011ddc 	ldrdpl	r1, [r1], -ip
    5f48:	021d3001 	andseq	r3, sp, #1
    5f4c:	9103087d 	tstls	r3, sp, ror r8
    5f50:	021d0648 	andseq	r0, sp, #72, 12	; 0x4800000
    5f54:	7402047d 	strvc	r0, [r2], #-1149	; 0xfffffb83
    5f58:	7d021d00 	stcvc	13, cr1, [r2, #-0]
    5f5c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    5f60:	841b0000 	ldrhi	r0, [fp], #-0
    5f64:	5a080089 	bpl	206190 <__RW_SIZE__+0x205bfc>
    5f68:	1c00001a 	stcne	0, cr0, [r0], {26}
    5f6c:	08008996 	stmdaeq	r0, {r1, r2, r4, r7, r8, fp, pc}
    5f70:	00001a35 	andeq	r1, r0, r5, lsr sl
    5f74:	0153011d 	cmpeq	r3, sp, lsl r1
    5f78:	52011d40 	andpl	r1, r1, #64, 26	; 0x1000
    5f7c:	021d4001 	andseq	r4, sp, #1
    5f80:	0b03007d 	bleq	c617c <__RW_SIZE__+0xc5be8>
    5f84:	0000f800 	andeq	pc, r0, r0, lsl #16
    5f88:	0012c525 	andseq	ip, r2, r5, lsr #10
    5f8c:	0088e400 	addeq	lr, r8, r0, lsl #8
    5f90:	00003008 	andeq	r3, r0, r8
    5f94:	01f00100 	mvnseq	r0, r0, lsl #2
    5f98:	00001729 	andeq	r1, r0, r9, lsr #14
    5f9c:	0088e81b 	addeq	lr, r8, fp, lsl r8
    5fa0:	001a5a08 	andseq	r5, sl, r8, lsl #20
    5fa4:	88fe2200 	ldmhi	lr!, {r9, sp}^
    5fa8:	1a610800 	bne	1847fb0 <__RW_SIZE__+0x1847a1c>
    5fac:	16f40000 	ldrbtne	r0, [r4], r0
    5fb0:	011d0000 	tsteq	sp, r0
    5fb4:	1d300153 	ldfnes	f0, [r0, #-332]!	; 0xfffffeb4
    5fb8:	0a035201 	beq	da7c4 <__RW_SIZE__+0xda230>
    5fbc:	011df800 	tsteq	sp, r0, lsl #16
    5fc0:	64080251 	strvs	r0, [r8], #-593	; 0xfffffdaf
    5fc4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    5fc8:	021d5008 	andseq	r5, sp, #8
    5fcc:	9103087d 	tstls	r3, sp, ror r8
    5fd0:	021d0650 	andseq	r0, sp, #80, 12	; 0x5000000
    5fd4:	7402047d 	strvc	r0, [r2], #-1149	; 0xfffffb83
    5fd8:	7d021d00 	stcvc	13, cr1, [r2, #-0]
    5fdc:	00740200 	rsbseq	r0, r4, r0, lsl #4
    5fe0:	89141c00 	ldmdbhi	r4, {sl, fp, ip}
    5fe4:	1a610800 	bne	1847fec <__RW_SIZE__+0x1847a58>
    5fe8:	011d0000 	tsteq	sp, r0
    5fec:	1d300153 	ldfnes	f0, [r0, #-332]!	; 0xfffffeb4
    5ff0:	4f015201 	svcmi	0x00015201
    5ff4:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    5ff8:	011da008 	tsteq	sp, r8
    5ffc:	3c080250 	sfmcc	f0, 4, [r8], {80}	; 0x50
    6000:	087d021d 	ldmdaeq	sp!, {r0, r2, r3, r4, r9}^
    6004:	06549103 	ldrbeq	r9, [r4], -r3, lsl #2
    6008:	047d021d 	ldrbteq	r0, [sp], #-541	; 0xfffffde3
    600c:	021d3101 	andseq	r3, sp, #1073741824	; 0x40000000
    6010:	3101007d 	tstcc	r1, sp, ror r0
    6014:	2b250000 	blcs	94601c <__RW_SIZE__+0x945a88>
    6018:	30000012 	andcc	r0, r0, r2, lsl r0
    601c:	3a080089 	bcc	206248 <__RW_SIZE__+0x205cb4>
    6020:	01000000 	mrseq	r0, (UNDEF: 0)
    6024:	17b801e0 	ldrne	r0, [r8, r0, ror #3]!
    6028:	341b0000 	ldrcc	r0, [fp], #-0
    602c:	5a080089 	bpl	206258 <__RW_SIZE__+0x205cc4>
    6030:	2200001a 	andcs	r0, r0, #26
    6034:	0800894c 	stmdaeq	r0, {r2, r3, r6, r8, fp, pc}
    6038:	00001a61 	andeq	r1, r0, r1, ror #20
    603c:	0000177f 	andeq	r1, r0, pc, ror r7
    6040:	0153011d 	cmpeq	r3, sp, lsl r1
    6044:	52011d30 	andpl	r1, r1, #48, 26	; 0xc00
    6048:	ffff0a03 			; <UNDEFINED> instruction: 0xffff0a03
    604c:	0251011d 	subseq	r0, r1, #1073741831	; 0x40000007
    6050:	011d6408 	tsteq	sp, r8, lsl #8
    6054:	3c080250 	sfmcc	f0, 4, [r8], {80}	; 0x50
    6058:	087d021d 	ldmdaeq	sp!, {r0, r2, r3, r4, r9}^
    605c:	1d007b02 	vstrne	d7, [r0, #-8]
    6060:	01047d02 	tsteq	r4, r2, lsl #26
    6064:	7d021d32 	stcvc	13, cr1, [r2, #-200]	; 0xffffff38
    6068:	00320100 	eorseq	r0, r2, r0, lsl #2
    606c:	00896a1c 	addeq	r6, r9, ip, lsl sl
    6070:	001a6108 	andseq	r6, sl, r8, lsl #2
    6074:	53011d00 	movwpl	r1, #7424	; 0x1d00
    6078:	011d3001 	tsteq	sp, r1
    607c:	e00a0352 	and	r0, sl, r2, asr r3
    6080:	51011d07 	tstpl	r1, r7, lsl #26
    6084:	1da00802 	stcne	8, cr0, [r0, #8]!
    6088:	08025001 	stmdaeq	r2, {r0, ip, lr}
    608c:	7d021d50 	stcvc	13, cr1, [r2, #-320]	; 0xfffffec0
    6090:	4c910308 	ldcmi	3, cr0, [r1], {8}
    6094:	7d021d06 	stcvc	13, cr1, [r2, #-24]	; 0xffffffe8
    6098:	00780204 	rsbseq	r0, r8, r4, lsl #4
    609c:	007d021d 	rsbseq	r0, sp, sp, lsl r2
    60a0:	00007802 	andeq	r7, r0, r2, lsl #16
    60a4:	096f2b00 	stmdbeq	pc!, {r8, r9, fp, sp}^	; <UNPREDICTABLE>
    60a8:	8a9e0000 	bhi	fe7860b0 <MSP_BASE+0xde7810b0>
    60ac:	26f00800 	ldrbtcs	r0, [r0], r0, lsl #16
    60b0:	e5010000 	str	r0, [r1, #-0]
    60b4:	00184e01 	andseq	r4, r8, r1, lsl #28
    60b8:	03822500 	orreq	r2, r2, #0, 10
    60bc:	8ace0000 	bhi	ff3860c4 <MSP_BASE+0xdf3810c4>
    60c0:	00280800 	eoreq	r0, r8, r0, lsl #16
    60c4:	04010000 	streq	r0, [r1], #-0
    60c8:	0017f401 	andseq	pc, r7, r1, lsl #8
    60cc:	8ace1f00 	bhi	ff38dcd4 <MSP_BASE+0xdf388cd4>
    60d0:	00280800 	eoreq	r0, r8, r0, lsl #16
    60d4:	8f200000 	svchi	0x00200000
    60d8:	61000003 	tstvs	r0, r3
    60dc:	00000036 	andeq	r0, r0, r6, lsr r0
    60e0:	039a2500 	orrseq	r2, sl, #0, 10
    60e4:	8af60000 	bhi	ffd860ec <MSP_BASE+0xdfd810ec>
    60e8:	00140800 	andseq	r0, r4, r0, lsl #16
    60ec:	05010000 	streq	r0, [r1, #-0]
    60f0:	00181c01 	andseq	r1, r8, r1, lsl #24
    60f4:	8af61f00 	bhi	ffd8dcfc <MSP_BASE+0xdfd88cfc>
    60f8:	00140800 	andseq	r0, r4, r0, lsl #16
    60fc:	a7200000 	strge	r0, [r0, -r0]!
    6100:	ed000003 	stc	0, cr0, [r0, #-12]
    6104:	00000036 	andeq	r0, r0, r6, lsr r0
    6108:	03b22500 			; <UNDEFINED> instruction: 0x03b22500
    610c:	8b0a0000 	blhi	286114 <__RW_SIZE__+0x285b80>
    6110:	00140800 	andseq	r0, r4, r0, lsl #16
    6114:	06010000 	streq	r0, [r1], -r0
    6118:	00184401 	andseq	r4, r8, r1, lsl #8
    611c:	8b0a1f00 	blhi	28dd24 <__RW_SIZE__+0x28d790>
    6120:	00140800 	andseq	r0, r4, r0, lsl #16
    6124:	bf200000 	svclt	0x00200000
    6128:	3d000003 	stccc	0, cr0, [r0, #-12]
    612c:	00000037 	andeq	r0, r0, r7, lsr r0
    6130:	8aca1b00 	bhi	ff28cd38 <MSP_BASE+0xdf287d38>
    6134:	1a5a0800 	bne	168813c <__RW_SIZE__+0x1687ba8>
    6138:	1b000000 	blne	6140 <__RW_SIZE__+0x5bac>
    613c:	08008842 	stmdaeq	r0, {r1, r6, fp, pc}
    6140:	000004c2 	andeq	r0, r0, r2, asr #9
    6144:	00884e22 	addeq	r4, r8, r2, lsr #28
    6148:	001a9108 	andseq	r9, sl, r8, lsl #2
    614c:	00186e00 	andseq	r6, r8, r0, lsl #28
    6150:	50011d00 	andpl	r1, r1, r0, lsl #26
    6154:	0d940305 	ldceq	3, cr0, [r4, #20]
    6158:	22000801 	andcs	r0, r0, #65536	; 0x10000
    615c:	08008854 	stmdaeq	r0, {r2, r4, r6, fp, pc}
    6160:	00001aa3 	andeq	r1, r0, r3, lsr #21
    6164:	00001881 	andeq	r1, r0, r1, lsl #17
    6168:	0150011d 	cmpeq	r0, sp, lsl r1
    616c:	581b0033 	ldmdapl	fp, {r0, r1, r4, r5}
    6170:	b4080088 	strlt	r0, [r8], #-136	; 0xffffff78
    6174:	2200001a 	andcs	r0, r0, #26
    6178:	0800885e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, pc}
    617c:	00001abb 			; <UNDEFINED> instruction: 0x00001abb
    6180:	0000189d 	muleq	r0, sp, r8
    6184:	0150011d 	cmpeq	r0, sp, lsl r1
    6188:	64220031 	strtvs	r0, [r2], #-49	; 0xffffffcf
    618c:	cc080088 	stcgt	0, cr0, [r8], {136}	; 0x88
    6190:	b000001a 	andlt	r0, r0, sl, lsl r0
    6194:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
    6198:	31015001 	tstcc	r1, r1
    619c:	88882200 	stmhi	r8, {r9, sp}
    61a0:	1add0800 	bne	ff7481a8 <MSP_BASE+0xdf7431a8>
    61a4:	18c30000 	stmiane	r3, {}^	; <UNPREDICTABLE>
    61a8:	011d0000 	tsteq	sp, r0
    61ac:	00310150 	eorseq	r0, r1, r0, asr r1
    61b0:	0089801b 	addeq	r8, r9, fp, lsl r0
    61b4:	000ce908 	andeq	lr, ip, r8, lsl #18
    61b8:	8b221c00 	blhi	88d1c0 <__RW_SIZE__+0x88cc2c>
    61bc:	1aee0800 	bne	ffb881c4 <MSP_BASE+0xdfb831c4>
    61c0:	011d0000 	tsteq	sp, r0
    61c4:	64080251 	strvs	r0, [r8], #-593	; 0xfffffdaf
    61c8:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    61cc:	00000078 	andeq	r0, r0, r8, ror r0
    61d0:	0000450a 	andeq	r4, r0, sl, lsl #10
    61d4:	0018f300 	andseq	pc, r8, r0, lsl #6
    61d8:	00810b00 	addeq	r0, r1, r0, lsl #22
    61dc:	00050000 	andeq	r0, r5, r0
    61e0:	000cb623 	andeq	fp, ip, r3, lsr #12
    61e4:	fe190100 	cdp2	1, 1, cr0, cr9, cr0, {0}
    61e8:	09000018 	stmdbeq	r0, {r3, r4}
    61ec:	000018e3 	andeq	r1, r0, r3, ror #17
    61f0:	000cd632 	andeq	sp, ip, r2, lsr r6
    61f4:	912b0100 	teqls	fp, r0, lsl #2
    61f8:	05000002 	streq	r0, [r0, #-2]
    61fc:	0006dc03 	andeq	sp, r6, r3, lsl #24
    6200:	0d0b3220 	sfmeq	f3, 4, [fp, #-128]	; 0xffffff80
    6204:	2c010000 	stccs	0, cr0, [r1], {-0}
    6208:	0000007a 	andeq	r0, r0, sl, ror r0
    620c:	000c0305 	andeq	r0, ip, r5, lsl #6
    6210:	6e322000 	cdpvs	0, 3, cr2, cr2, cr0, {0}
    6214:	0100000a 	tsteq	r0, sl
    6218:	00007a2d 	andeq	r7, r0, sp, lsr #20
    621c:	d0030500 	andle	r0, r3, r0, lsl #10
    6220:	32200006 	eorcc	r0, r0, #6
    6224:	00000b59 	andeq	r0, r0, r9, asr fp
    6228:	007a2e01 	rsbseq	r2, sl, r1, lsl #28
    622c:	03050000 	movweq	r0, #20480	; 0x5000
    6230:	200006d4 	ldrdcs	r0, [r0], -r4
    6234:	000ad532 	andeq	sp, sl, r2, lsr r5
    6238:	7a2f0100 	bvc	bc6640 <__RW_SIZE__+0xbc60ac>
    623c:	05000000 	streq	r0, [r0, #-0]
    6240:	0006d803 	andeq	sp, r6, r3, lsl #16
    6244:	0cc43220 	sfmeq	f3, 2, [r4], {32}
    6248:	31010000 	mrscc	r0, (UNDEF: 1)
    624c:	00000073 	andeq	r0, r0, r3, ror r0
    6250:	00040305 	andeq	r0, r4, r5, lsl #6
    6254:	cd322000 	ldcgt	0, cr2, [r2, #-0]
    6258:	0100000c 	tsteq	r0, ip
    625c:	00007332 	andeq	r7, r0, r2, lsr r3
    6260:	08030500 	stmdaeq	r3, {r8, sl}
    6264:	0a200000 	beq	80626c <__RW_SIZE__+0x805cd8>
    6268:	000002eb 	andeq	r0, r0, fp, ror #5
    626c:	0000198a 	andeq	r1, r0, sl, lsl #19
    6270:	0000810b 	andeq	r8, r0, fp, lsl #2
    6274:	32000900 	andcc	r0, r0, #0, 18
    6278:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    627c:	197a4901 	ldmdbne	sl!, {r0, r8, fp, lr}^
    6280:	03050000 	movweq	r0, #20480	; 0x5000
    6284:	200005a4 	andcs	r0, r0, r4, lsr #11
    6288:	0003370a 	andeq	r3, r3, sl, lsl #14
    628c:	0019ab00 	andseq	sl, r9, r0, lsl #22
    6290:	00810b00 	addeq	r0, r1, r0, lsl #22
    6294:	00040000 	andeq	r0, r4, r0
    6298:	000c4732 	andeq	r4, ip, r2, lsr r7
    629c:	9b4a0100 	blls	12866a4 <__RW_SIZE__+0x1286110>
    62a0:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    62a4:	00061c03 	andeq	r1, r6, r3, lsl #24
    62a8:	03770a20 	cmneq	r7, #32, 20	; 0x20000
    62ac:	19cc0000 	stmibne	ip, {}^	; <UNPREDICTABLE>
    62b0:	810b0000 	mrshi	r0, (UNDEF: 11)
    62b4:	04000000 	streq	r0, [r0], #-0
    62b8:	0d503200 	lfmeq	f3, 2, [r0, #-0]
    62bc:	4b010000 	blmi	462c4 <__RW_SIZE__+0x45d30>
    62c0:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    62c4:	06800305 	streq	r0, [r0], r5, lsl #6
    62c8:	82332000 	eorshi	r2, r3, #0
    62cc:	03000000 	movweq	r0, #0
    62d0:	19e906ce 	stmibne	r9!, {r1, r2, r3, r6, r7, r9, sl}^
    62d4:	73050000 	movwvc	r0, #20480	; 0x5000
    62d8:	34000000 	strcc	r0, [r0], #-0
    62dc:	00000a46 	andeq	r0, r0, r6, asr #20
    62e0:	19e91c01 	stmibne	r9!, {r0, sl, fp, ip}^
    62e4:	79340000 	ldmdbvc	r4!, {}	; <UNPREDICTABLE>
    62e8:	0100000c 	tsteq	r0, ip
    62ec:	0019e91d 	andseq	lr, r9, sp, lsl r9
    62f0:	00e73500 	rsceq	r3, r7, r0, lsl #10
    62f4:	22050000 	andcs	r0, r5, #0
    62f8:	000a2035 	andeq	r2, sl, r5, lsr r0
    62fc:	350a0500 	strcc	r0, [sl, #-1280]	; 0xfffffb00
    6300:	000007f7 	strdeq	r0, [r0], -r7
    6304:	63362605 	teqvs	r6, #5242880	; 0x500000
    6308:	0500000a 	streq	r0, [r0, #-10]
    630c:	001a2a16 	andseq	r2, sl, r6, lsl sl
    6310:	00733700 	rsbseq	r3, r3, r0, lsl #14
    6314:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    6318:	00000b61 	andeq	r0, r0, r1, ror #22
    631c:	00737f08 	rsbseq	r7, r3, r8, lsl #30
    6320:	a4360000 	ldrtge	r0, [r6], #-0
    6324:	06000008 	streq	r0, [r0], -r8
    6328:	001a5a14 	andseq	r5, sl, r4, lsl sl
    632c:	00733700 	rsbseq	r3, r3, r0, lsl #14
    6330:	73370000 	teqvc	r7, #0
    6334:	37000000 	strcc	r0, [r0, -r0]
    6338:	00000073 	andeq	r0, r0, r3, ror r0
    633c:	00007337 	andeq	r7, r0, r7, lsr r3
    6340:	00453700 	subeq	r3, r5, r0, lsl #14
    6344:	35000000 	strcc	r0, [r0, #-0]
    6348:	0000083d 	andeq	r0, r0, sp, lsr r8
    634c:	2c361106 	ldfcss	f1, [r6], #-24	; 0xffffffe8
    6350:	07000003 	streq	r0, [r0, -r3]
    6354:	001a9109 	andseq	r9, sl, r9, lsl #2
    6358:	00733700 	rsbseq	r3, r3, r0, lsl #14
    635c:	73370000 	teqvc	r7, #0
    6360:	37000000 	strcc	r0, [r0, -r0]
    6364:	00000073 	andeq	r0, r0, r3, ror r0
    6368:	00007337 	andeq	r7, r0, r7, lsr r3
    636c:	00733700 	rsbseq	r3, r3, r0, lsl #14
    6370:	73370000 	teqvc	r7, #0
    6374:	37000000 	strcc	r0, [r0, -r0]
    6378:	0000026b 	andeq	r0, r0, fp, ror #4
    637c:	e1360039 	teq	r6, r9, lsr r0
    6380:	0500000c 	streq	r0, [r0, #-12]
    6384:	001aa319 	andseq	sl, sl, r9, lsl r3
    6388:	025e3700 	subseq	r3, lr, #0, 14
    638c:	00390000 	eorseq	r0, r9, r0
    6390:	00085936 	andeq	r5, r8, r6, lsr r9
    6394:	b40c0600 	strlt	r0, [ip], #-1536	; 0xfffffa00
    6398:	3700001a 	smladcc	r0, sl, r0, r0
    639c:	00000073 	andeq	r0, r0, r3, ror r0
    63a0:	04323500 	ldrteq	r3, [r2], #-1280	; 0xfffffb00
    63a4:	43050000 	movwmi	r0, #20480	; 0x5000
    63a8:	00073536 	andeq	r3, r7, r6, lsr r5
    63ac:	cc480500 	cfstr64gt	mvdx0, [r8], {-0}
    63b0:	3700001a 	smladcc	r0, sl, r0, r0
    63b4:	00000073 	andeq	r0, r0, r3, ror r0
    63b8:	0a9f3600 	beq	fe7d3bc0 <MSP_BASE+0xde7cebc0>
    63bc:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
    63c0:	00001add 	ldrdeq	r1, [r0], -sp
    63c4:	00007337 	andeq	r7, r0, r7, lsr r3
    63c8:	9f360000 	svcls	0x00360000
    63cc:	0500000b 	streq	r0, [r0, #-11]
    63d0:	001aee3b 	andseq	lr, sl, fp, lsr lr
    63d4:	007a3700 	rsbseq	r3, sl, r0, lsl #14
    63d8:	3a000000 	bcc	63e0 <__RW_SIZE__+0x5e4c>
    63dc:	00000c14 	andeq	r0, r0, r4, lsl ip
    63e0:	73372f05 	teqvc	r7, #5, 30
    63e4:	37000000 	strcc	r0, [r0, -r0]
    63e8:	00000073 	andeq	r0, r0, r3, ror r0
    63ec:	00fb0000 	rscseq	r0, fp, r0
    63f0:	00040000 	andeq	r0, r4, r0
    63f4:	00000e8e 	andeq	r0, r0, lr, lsl #29
    63f8:	01080104 	tsteq	r8, r4, lsl #2
    63fc:	6d010000 	stcvs	0, cr0, [r1, #-0]
    6400:	1300000d 	movwne	r0, #13
    6404:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    6408:	4408008c 	strmi	r0, [r8], #-140	; 0xffffff74
    640c:	da000000 	ble	6414 <__RW_SIZE__+0x5e80>
    6410:	0200001f 	andeq	r0, r0, #31
    6414:	00990601 	addseq	r0, r9, r1, lsl #12
    6418:	01020000 	mrseq	r0, (UNDEF: 2)
    641c:	00009708 	andeq	r9, r0, r8, lsl #14
    6420:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6424:	000000f2 	strdeq	r0, [r0], -r2
    6428:	6f070202 	svcvs	0x00070202
    642c:	02000000 	andeq	r0, r0, #0
    6430:	00050504 	andeq	r0, r5, r4, lsl #10
    6434:	04020000 	streq	r0, [r2], #-0
    6438:	0000cc07 	andeq	ip, r0, r7, lsl #24
    643c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6440:	00000000 	andeq	r0, r0, r0
    6444:	c7070802 	strgt	r0, [r7, -r2, lsl #16]
    6448:	03000000 	movweq	r0, #0
    644c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6450:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6454:	0000d107 	andeq	sp, r0, r7, lsl #2
    6458:	07040200 	streq	r0, [r4, -r0, lsl #4]
    645c:	000000de 	ldrdeq	r0, [r0], -lr
    6460:	00780404 	rsbseq	r0, r8, r4, lsl #8
    6464:	01020000 	mrseq	r0, (UNDEF: 2)
    6468:	0000a008 	andeq	sl, r0, r8
    646c:	0d770500 	cfldr64eq	mvdx0, [r7, #-0]
    6470:	03010000 	movweq	r0, #4096	; 0x1000
    6474:	00000072 	andeq	r0, r0, r2, ror r0
    6478:	08008cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, pc}
    647c:	00000044 	andeq	r0, r0, r4, asr #32
    6480:	00e29c01 	rsceq	r9, r2, r1, lsl #24
    6484:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    6488:	0100636e 	tsteq	r0, lr, ror #6
    648c:	00005d03 	andeq	r5, r0, r3, lsl #26
    6490:	00378d00 	eorseq	r8, r7, r0, lsl #26
    6494:	0d7d0700 	ldcleq	7, cr0, [sp, #-0]
    6498:	05010000 	streq	r0, [r1, #-0]
    649c:	0000002c 	andeq	r0, r0, ip, lsr #32
    64a0:	000d5608 	andeq	r5, sp, r8, lsl #12
    64a4:	72060100 	andvc	r0, r6, #0, 2
    64a8:	05000000 	streq	r0, [r0, #-0]
    64ac:	0006f003 	andeq	pc, r6, r3
    64b0:	0d5b0920 	ldcleq	9, cr0, [fp, #-128]	; 0xffffff80
    64b4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    64b8:	00000072 	andeq	r0, r0, r2, ror r0
    64bc:	000037dc 	ldrdeq	r3, [r0], -ip
    64c0:	000d6409 	andeq	r6, sp, r9, lsl #8
    64c4:	72090100 	andvc	r0, r9, #0, 2
    64c8:	ef000000 	svc	0x00000000
    64cc:	00000037 	andeq	r0, r0, r7, lsr r0
    64d0:	0000820a 	andeq	r8, r0, sl, lsl #4
    64d4:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    64d8:	000000ee 	andeq	r0, r0, lr, ror #1
    64dc:	00005d0b 	andeq	r5, r0, fp, lsl #26
    64e0:	0d7d0700 	ldcleq	7, cr0, [sp, #-0]
    64e4:	05010000 	streq	r0, [r1, #-0]
    64e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    64ec:	00121600 	andseq	r1, r2, r0, lsl #12
    64f0:	33000400 	movwcc	r0, #1024	; 0x400
    64f4:	0400000f 	streq	r0, [r0], #-15
    64f8:	00010801 	andeq	r0, r1, r1, lsl #16
    64fc:	10810100 	addne	r0, r1, r0, lsl #2
    6500:	00130000 	andseq	r0, r3, r0
    6504:	8d0c0000 	stchi	0, cr0, [ip, #-0]
    6508:	04420800 	strbeq	r0, [r2], #-2048	; 0xfffff800
    650c:	20300000 	eorscs	r0, r0, r0
    6510:	21020000 	mrscs	r0, (UNDEF: 2)
    6514:	01000004 	tsteq	r0, r4
    6518:	0164a803 	cmneq	r4, r3, lsl #16
    651c:	4c030000 	stcmi	0, cr0, [r3], {-0}
    6520:	72000006 	andvc	r0, r0, #6
    6524:	00044903 	andeq	r4, r4, r3, lsl #18
    6528:	89037400 	stmdbhi	r3, {sl, ip, sp, lr}
    652c:	75000005 	strvc	r0, [r0, #-5]
    6530:	00070c03 	andeq	r0, r7, r3, lsl #24
    6534:	29037600 	stmdbcs	r3, {r9, sl, ip, sp, lr}
    6538:	7b000007 	blvc	655c <__RW_SIZE__+0x5fc8>
    653c:	0006fa03 	andeq	pc, r6, r3, lsl #20
    6540:	26037c00 	strcs	r7, [r3], -r0, lsl #24
    6544:	7e000004 	cdpvc	0, 0, cr0, cr0, cr4, {0}
    6548:	0006bd03 	andeq	fp, r6, r3, lsl #26
    654c:	7f037f00 	svcvc	0x00037f00
    6550:	00000005 	andeq	r0, r0, r5
    6554:	0005a203 	andeq	sl, r5, r3, lsl #4
    6558:	ad030100 	stfges	f0, [r3, #-0]
    655c:	02000007 	andeq	r0, r0, #7
    6560:	0005f803 	andeq	pc, r5, r3, lsl #16
    6564:	fc030300 	stc2	3, cr0, [r3], {-0}
    6568:	04000003 	streq	r0, [r0], #-3
    656c:	00044003 	andeq	r4, r4, r3
    6570:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    6574:	06000004 	streq	r0, [r0], -r4
    6578:	00067203 	andeq	r7, r6, r3, lsl #4
    657c:	ef030700 	svc	0x00030700
    6580:	08000004 	stmdaeq	r0, {r2}
    6584:	00076b03 	andeq	r6, r7, r3, lsl #22
    6588:	97030900 	strls	r0, [r3, -r0, lsl #18]
    658c:	0a000005 	beq	65a8 <__RW_SIZE__+0x6014>
    6590:	00055603 	andeq	r5, r5, r3, lsl #12
    6594:	e9030b00 	stmdb	r3, {r8, r9, fp}
    6598:	0c000003 	stceq	0, cr0, [r0], {3}
    659c:	0005c603 	andeq	ip, r5, r3, lsl #12
    65a0:	85030d00 	strhi	r0, [r3, #-3328]	; 0xfffff300
    65a4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    65a8:	00075803 	andeq	r5, r7, r3, lsl #16
    65ac:	24030f00 	strcs	r0, [r3], #-3840	; 0xfffff100
    65b0:	10000005 	andne	r0, r0, r5
    65b4:	0003bf03 	andeq	fp, r3, r3, lsl #30
    65b8:	7b031100 	blvc	ca9c0 <__RW_SIZE__+0xca42c>
    65bc:	12000007 	andne	r0, r0, #7
    65c0:	0004c503 	andeq	ip, r4, r3, lsl #10
    65c4:	97031300 	strls	r1, [r3, -r0, lsl #6]
    65c8:	14000003 	strne	r0, [r0], #-3
    65cc:	0004b703 	andeq	fp, r4, r3, lsl #14
    65d0:	b1031500 	tstlt	r3, r0, lsl #10
    65d4:	16000003 	strne	r0, [r0], -r3
    65d8:	00071c03 	andeq	r1, r7, r3, lsl #24
    65dc:	64031700 	strvs	r1, [r3], #-1792	; 0xfffff900
    65e0:	18000004 	stmdane	r0, {r2}
    65e4:	0005e603 	andeq	lr, r5, r3, lsl #12
    65e8:	87031900 	strhi	r1, [r3, -r0, lsl #18]
    65ec:	1a000006 	bne	660c <__RW_SIZE__+0x6078>
    65f0:	00066003 	andeq	r6, r6, r3
    65f4:	d6031b00 	strle	r1, [r3], -r0, lsl #22
    65f8:	1c000006 	stcne	0, cr0, [r0], {6}
    65fc:	00054c03 	andeq	r4, r5, r3, lsl #24
    6600:	df031d00 	svcle	0x00031d00
    6604:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    6608:	0005d903 	andeq	sp, r5, r3, lsl #18
    660c:	a6031f00 	strge	r1, [r3], -r0, lsl #30
    6610:	20000006 	andcs	r0, r0, r6
    6614:	00050a03 	andeq	r0, r5, r3, lsl #20
    6618:	d2032100 	andle	r2, r3, #0, 2
    661c:	22000003 	andcs	r0, r0, #3
    6620:	00047b03 	andeq	r7, r4, r3, lsl #22
    6624:	49032300 	stmdbmi	r3, {r8, r9, sp}
    6628:	24000007 	strcs	r0, [r0], #-7
    662c:	00064003 	andeq	r4, r6, r3
    6630:	e3032500 	movw	r2, #13568	; 0x3500
    6634:	26000004 	strcs	r0, [r0], -r4
    6638:	00078703 	andeq	r8, r7, r3, lsl #14
    663c:	17032700 	strne	r2, [r3, -r0, lsl #14]
    6640:	28000004 	stmdacs	r0, {r2}
    6644:	0007be03 	andeq	fp, r7, r3, lsl #28
    6648:	70032900 	andvc	r2, r3, r0, lsl #18
    664c:	2a000005 	bcs	6668 <__RW_SIZE__+0x60d4>
    6650:	04d90400 	ldrbeq	r0, [r9], #1024	; 0x400
    6654:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    6658:	00002501 	andeq	r2, r0, r1, lsl #10
    665c:	06010500 	streq	r0, [r1], -r0, lsl #10
    6660:	00000099 	muleq	r0, r9, r0
    6664:	00026b06 	andeq	r6, r2, r6, lsl #22
    6668:	822a0400 	eorhi	r0, sl, #0, 8
    666c:	05000001 	streq	r0, [r0, #-1]
    6670:	00970801 	addseq	r0, r7, r1, lsl #16
    6674:	02050000 	andeq	r0, r5, #0
    6678:	0000f205 	andeq	pc, r0, r5, lsl #4
    667c:	02c80600 	sbceq	r0, r8, #0, 12
    6680:	36040000 	strcc	r0, [r4], -r0
    6684:	0000019b 	muleq	r0, fp, r1
    6688:	6f070205 	svcvs	0x00070205
    668c:	05000000 	streq	r0, [r0, #-0]
    6690:	00050504 	andeq	r0, r5, r4, lsl #10
    6694:	a7060000 	strge	r0, [r6, -r0]
    6698:	04000001 	streq	r0, [r0], #-1
    669c:	0001b450 	andeq	fp, r1, r0, asr r4
    66a0:	07040500 	streq	r0, [r4, -r0, lsl #10]
    66a4:	000000cc 	andeq	r0, r0, ip, asr #1
    66a8:	00050805 	andeq	r0, r5, r5, lsl #16
    66ac:	05000000 	streq	r0, [r0, #-0]
    66b0:	00c70708 	sbceq	r0, r7, r8, lsl #14
    66b4:	04070000 	streq	r0, [r7], #-0
    66b8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    66bc:	07040500 	streq	r0, [r4, -r0, lsl #10]
    66c0:	000000d1 	ldrdeq	r0, [r0], -r1
    66c4:	020e0408 	andeq	r0, lr, #8, 8	; 0x8000000
    66c8:	00028584 	andeq	r8, r2, r4, lsl #11
    66cc:	045f0900 	ldrbeq	r0, [pc], #-2304	; 66d4 <__RW_SIZE__+0x6140>
    66d0:	86020000 	strhi	r0, [r2], -r0
    66d4:	0000029c 	muleq	r0, ip, r2
    66d8:	06010900 	streq	r0, [r1], -r0, lsl #18
    66dc:	87020000 	strhi	r0, [r2, -r0]
    66e0:	000002a1 	andeq	r0, r0, r1, lsr #5
    66e4:	07440920 	strbeq	r0, [r4, -r0, lsr #18]
    66e8:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    66ec:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    66f0:	04720980 	ldrbteq	r0, [r2], #-2432	; 0xfffff680
    66f4:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    66f8:	000002a1 	andeq	r0, r0, r1, lsr #5
    66fc:	07760aa0 	ldrbeq	r0, [r6, -r0, lsr #21]!
    6700:	8a020000 	bhi	86708 <__RW_SIZE__+0x86174>
    6704:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    6708:	0b0a0100 	bleq	286b10 <__RW_SIZE__+0x28657c>
    670c:	02000006 	andeq	r0, r0, #6
    6710:	0002a18b 	andeq	sl, r2, fp, lsl #3
    6714:	0a012000 	beq	4e71c <__RW_SIZE__+0x4e188>
    6718:	000005ab 	andeq	r0, r0, fp, lsr #11
    671c:	02bb8c02 	adcseq	r8, fp, #512	; 0x200
    6720:	01800000 	orreq	r0, r0, r0
    6724:	0006150a 	andeq	r1, r6, sl, lsl #10
    6728:	a18d0200 	orrge	r0, sp, r0, lsl #4
    672c:	a0000002 	andge	r0, r0, r2
    6730:	07530a01 	ldrbeq	r0, [r3, -r1, lsl #20]
    6734:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    6738:	000002c0 	andeq	r0, r0, r0, asr #5
    673c:	1f0a0200 	svcne	0x000a0200
    6740:	02000006 	andeq	r0, r0, #6
    6744:	0002c58f 	andeq	ip, r2, pc, lsl #11
    6748:	0b022000 	bleq	8e750 <__RW_SIZE__+0x8e1bc>
    674c:	02005049 	andeq	r5, r0, #73	; 0x49
    6750:	0002e590 	muleq	r2, r0, r5
    6754:	0a030000 	beq	c675c <__RW_SIZE__+0xc61c8>
    6758:	00000629 	andeq	r0, r0, r9, lsr #12
    675c:	02ea9102 	rsceq	r9, sl, #-2147483648	; 0x80000000
    6760:	03f00000 	mvnseq	r0, #0
    6764:	0005f30a 	andeq	pc, r5, sl, lsl #6
    6768:	fb920200 	blx	fe486f72 <MSP_BASE+0xde481f72>
    676c:	00000002 	andeq	r0, r0, r2
    6770:	a90c000e 	stmdbge	ip, {r1, r2, r3}
    6774:	95000001 	strls	r0, [r0, #-1]
    6778:	0d000002 	stceq	0, cr0, [r0, #-8]
    677c:	00000295 	muleq	r0, r5, r2
    6780:	04050007 	streq	r0, [r5], #-7
    6784:	0000de07 	andeq	sp, r0, r7, lsl #28
    6788:	02850e00 	addeq	r0, r5, #0, 28
    678c:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    6790:	b1000001 	tstlt	r0, r1
    6794:	0d000002 	stceq	0, cr0, [r0, #-8]
    6798:	00000295 	muleq	r0, r5, r2
    679c:	850e0017 	strhi	r0, [lr, #-23]	; 0xffffffe9
    67a0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    67a4:	00000285 	andeq	r0, r0, r5, lsl #5
    67a8:	0002850e 	andeq	r8, r2, lr, lsl #10
    67ac:	02850e00 	addeq	r0, r5, #0, 28
    67b0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    67b4:	d5000001 	strle	r0, [r0, #-1]
    67b8:	0d000002 	stceq	0, cr0, [r0, #-8]
    67bc:	00000295 	muleq	r0, r5, r2
    67c0:	770c0037 	smladxvc	ip, r7, r0, r0
    67c4:	e5000001 	str	r0, [r0, #-1]
    67c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    67cc:	00000295 	muleq	r0, r5, r2
    67d0:	d50e00ef 	strle	r0, [lr, #-239]	; 0xffffff11
    67d4:	0c000002 	stceq	0, cr0, [r0], {2}
    67d8:	000001a9 	andeq	r0, r0, r9, lsr #3
    67dc:	000002fb 	strdeq	r0, [r0], -fp
    67e0:	0002950f 	andeq	r9, r2, pc, lsl #10
    67e4:	00028300 	andeq	r8, r2, r0, lsl #6
    67e8:	0001a90e 	andeq	sl, r1, lr, lsl #18
    67ec:	067d0600 	ldrbteq	r0, [sp], -r0, lsl #12
    67f0:	93020000 	movwls	r0, #8192	; 0x2000
    67f4:	000001d7 	ldrdeq	r0, [r0], -r7
    67f8:	9b027410 	blls	a3840 <__RW_SIZE__+0xa32ac>
    67fc:	000003f8 	strdeq	r0, [r0], -r8
    6800:	000a8209 	andeq	r8, sl, r9, lsl #4
    6804:	f89d0200 			; <UNDEFINED> instruction: 0xf89d0200
    6808:	00000003 	andeq	r0, r0, r3
    680c:	000b6b09 	andeq	r6, fp, r9, lsl #22
    6810:	fb9e0200 	blx	fe78701a <MSP_BASE+0xde78201a>
    6814:	04000002 	streq	r0, [r0], #-2
    6818:	000b6609 	andeq	r6, fp, r9, lsl #12
    681c:	fb9f0200 	blx	fe7c7026 <MSP_BASE+0xde7c2026>
    6820:	08000002 	stmdaeq	r0, {r1}
    6824:	000b7c09 	andeq	r7, fp, r9, lsl #24
    6828:	fba00200 	blx	fe807032 <MSP_BASE+0xde802032>
    682c:	0c000002 	stceq	0, cr0, [r0], {2}
    6830:	52435311 	subpl	r5, r3, #1140850688	; 0x44000000
    6834:	fba10200 	blx	fe84703e <MSP_BASE+0xde84203e>
    6838:	10000002 	andne	r0, r0, r2
    683c:	52434311 	subpl	r4, r3, #1140850688	; 0x44000000
    6840:	fba20200 	blx	fe88704a <MSP_BASE+0xde88204a>
    6844:	14000002 	strne	r0, [r0], #-2
    6848:	50485311 	subpl	r5, r8, r1, lsl r3
    684c:	0da30200 	sfmeq	f0, 4, [r3]
    6850:	18000004 	stmdane	r0, {r2}
    6854:	000c6809 	andeq	r6, ip, r9, lsl #16
    6858:	fba40200 	blx	fe907062 <MSP_BASE+0xde902062>
    685c:	24000002 	strcs	r0, [r0], #-2
    6860:	000bfe09 	andeq	pc, fp, r9, lsl #28
    6864:	fba50200 	blx	fe94706e <MSP_BASE+0xde94206e>
    6868:	28000002 	stmdacs	r0, {r1}
    686c:	000d4b09 	andeq	r4, sp, r9, lsl #22
    6870:	fba60200 	blx	fe98707a <MSP_BASE+0xde98207a>
    6874:	2c000002 	stccs	0, cr0, [r0], {2}
    6878:	000b8209 	andeq	r8, fp, r9, lsl #4
    687c:	fba70200 	blx	fe9c7086 <MSP_BASE+0xde9c2086>
    6880:	30000002 	andcc	r0, r0, r2
    6884:	000b8709 	andeq	r8, fp, r9, lsl #14
    6888:	fba80200 	blx	fea07092 <MSP_BASE+0xdea02092>
    688c:	34000002 	strcc	r0, [r0], #-2
    6890:	000b0909 	andeq	r0, fp, r9, lsl #18
    6894:	fba90200 	blx	fea4709e <MSP_BASE+0xdea4209e>
    6898:	38000002 	stmdacc	r0, {r1}
    689c:	000b1a09 	andeq	r1, fp, r9, lsl #20
    68a0:	fbaa0200 	blx	fea870aa <MSP_BASE+0xdea820aa>
    68a4:	3c000002 	stccc	0, cr0, [r0], {2}
    68a8:	52465011 	subpl	r5, r6, #17
    68ac:	22ab0200 	adccs	r0, fp, #0, 4
    68b0:	40000004 	andmi	r0, r0, r4
    68b4:	52464411 	subpl	r4, r6, #285212672	; 0x11000000
    68b8:	f8ac0200 			; <UNDEFINED> instruction: 0xf8ac0200
    68bc:	48000003 	stmdami	r0, {r0, r1}
    68c0:	52444111 	subpl	r4, r4, #1073741828	; 0x40000004
    68c4:	f8ad0200 			; <UNDEFINED> instruction: 0xf8ad0200
    68c8:	4c000003 	stcmi	0, cr0, [r0], {3}
    68cc:	000bc109 	andeq	ip, fp, r9, lsl #2
    68d0:	3cae0200 	sfmcc	f0, 4, [lr]
    68d4:	50000004 	andpl	r0, r0, r4
    68d8:	000a8809 	andeq	r8, sl, r9, lsl #16
    68dc:	56af0200 	strtpl	r0, [pc], r0, lsl #4
    68e0:	60000004 	andvs	r0, r0, r4
    68e4:	02fb1200 	rscseq	r1, fp, #0, 4
    68e8:	770c0000 	strvc	r0, [ip, -r0]
    68ec:	0d000001 	stceq	0, cr0, [r0, #-4]
    68f0:	0d000004 	stceq	0, cr0, [r0, #-16]
    68f4:	00000295 	muleq	r0, r5, r2
    68f8:	fd0e000b 	stc2	0, cr0, [lr, #-44]	; 0xffffffd4
    68fc:	0c000003 	stceq	0, cr0, [r0], {3}
    6900:	000001a9 	andeq	r0, r0, r9, lsr #3
    6904:	00000422 	andeq	r0, r0, r2, lsr #8
    6908:	0002950d 	andeq	r9, r2, sp, lsl #10
    690c:	12000100 	andne	r0, r0, #0, 2
    6910:	00000427 	andeq	r0, r0, r7, lsr #8
    6914:	0004120e 	andeq	r1, r4, lr, lsl #4
    6918:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    691c:	043c0000 	ldrteq	r0, [ip], #-0
    6920:	950d0000 	strls	r0, [sp, #-0]
    6924:	03000002 	movweq	r0, #2
    6928:	04411200 	strbeq	r1, [r1], #-512	; 0xfffffe00
    692c:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    6930:	0c000004 	stceq	0, cr0, [r0], {4}
    6934:	000001a9 	andeq	r0, r0, r9, lsr #3
    6938:	00000456 	andeq	r0, r0, r6, asr r4
    693c:	0002950d 	andeq	r9, r2, sp, lsl #10
    6940:	12000400 	andne	r0, r0, #0, 8
    6944:	0000045b 	andeq	r0, r0, fp, asr r4
    6948:	0004460e 	andeq	r4, r4, lr, lsl #12
    694c:	0b340600 	bleq	d08154 <__RW_SIZE__+0xd07bc0>
    6950:	b0020000 	andlt	r0, r2, r0
    6954:	0000030b 	andeq	r0, r0, fp, lsl #6
    6958:	0001900e 	andeq	r9, r1, lr
    695c:	03181300 	tsteq	r8, #0, 6
    6960:	04c70377 	strbeq	r0, [r7], #887	; 0x377
    6964:	49140000 	ldmdbmi	r4, {}	; <UNPREDICTABLE>
    6968:	0300524d 	movweq	r5, #589	; 0x24d
    696c:	02fb0379 	rscseq	r0, fp, #-469762047	; 0xe4000001
    6970:	14000000 	strne	r0, [r0], #-0
    6974:	00524d45 	subseq	r4, r2, r5, asr #26
    6978:	fb037a03 	blx	e518e <__RW_SIZE__+0xe4bfa>
    697c:	04000002 	streq	r0, [r0], #-2
    6980:	00066d15 	andeq	r6, r6, r5, lsl sp
    6984:	037b0300 	cmneq	fp, #0, 6
    6988:	000002fb 	strdeq	r0, [r0], -fp
    698c:	06e01508 	strbteq	r1, [r0], r8, lsl #10
    6990:	7c030000 	stcvc	0, cr0, [r3], {-0}
    6994:	0002fb03 	andeq	pc, r2, r3, lsl #22
    6998:	d0150c00 	andsle	r0, r5, r0, lsl #24
    699c:	03000006 	movweq	r0, #6
    69a0:	02fb037d 	rscseq	r0, fp, #-201326591	; 0xf4000001
    69a4:	14100000 	ldrne	r0, [r0], #-0
    69a8:	03005250 	movweq	r5, #592	; 0x250
    69ac:	02fb037e 	rscseq	r0, fp, #-134217727	; 0xf8000001
    69b0:	00140000 	andseq	r0, r4, r0
    69b4:	00063304 	andeq	r3, r6, r4, lsl #6
    69b8:	037f0300 	cmneq	pc, #0, 6
    69bc:	00000470 	andeq	r0, r0, r0, ror r4
    69c0:	a2035013 	andge	r5, r3, #19
    69c4:	0006e404 	andeq	lr, r6, r4, lsl #8
    69c8:	52431400 	subpl	r1, r3, #0, 8
    69cc:	a4030031 	strge	r0, [r3], #-49	; 0xffffffcf
    69d0:	00046b04 	andeq	r6, r4, r4, lsl #22
    69d4:	01150000 	tsteq	r5, r0
    69d8:	03000006 	movweq	r0, #6
    69dc:	019004a5 	orrseq	r0, r0, r5, lsr #9
    69e0:	14020000 	strne	r0, [r2], #-0
    69e4:	00325243 	eorseq	r5, r2, r3, asr #4
    69e8:	6b04a603 	blvs	1301fc <__RW_SIZE__+0x12fc68>
    69ec:	04000004 	streq	r0, [r0], #-4
    69f0:	00095d15 	andeq	r5, r9, r5, lsl sp
    69f4:	04a70300 	strteq	r0, [r7], #768	; 0x300
    69f8:	00000190 	muleq	r0, r0, r1
    69fc:	11531506 	cmpne	r3, r6, lsl #10
    6a00:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    6a04:	00046b04 	andeq	r6, r4, r4, lsl #22
    6a08:	0b150800 	bleq	548a10 <__RW_SIZE__+0x54847c>
    6a0c:	03000006 	movweq	r0, #6
    6a10:	019004a9 	orrseq	r0, r0, r9, lsr #9
    6a14:	150a0000 	strne	r0, [sl, #-0]
    6a18:	00000da4 	andeq	r0, r0, r4, lsr #27
    6a1c:	6b04aa03 	blvs	131230 <__RW_SIZE__+0x130c9c>
    6a20:	0c000004 	stceq	0, cr0, [r0], {4}
    6a24:	00061515 	andeq	r1, r6, r5, lsl r5
    6a28:	04ab0300 	strteq	r0, [fp], #768	; 0x300
    6a2c:	00000190 	muleq	r0, r0, r1
    6a30:	5253140e 	subspl	r1, r3, #234881024	; 0xe000000
    6a34:	04ac0300 	strteq	r0, [ip], #768	; 0x300
    6a38:	0000046b 	andeq	r0, r0, fp, ror #8
    6a3c:	061f1510 			; <UNDEFINED> instruction: 0x061f1510
    6a40:	ad030000 	stcge	0, cr0, [r3, #-0]
    6a44:	00019004 	andeq	r9, r1, r4
    6a48:	45141200 	ldrmi	r1, [r4, #-512]	; 0xfffffe00
    6a4c:	03005247 	movweq	r5, #583	; 0x247
    6a50:	046b04ae 	strbteq	r0, [fp], #-1198	; 0xfffffb52
    6a54:	15140000 	ldrne	r0, [r4, #-0]
    6a58:	00000629 	andeq	r0, r0, r9, lsr #12
    6a5c:	9004af03 	andls	sl, r4, r3, lsl #30
    6a60:	16000001 	strne	r0, [r0], -r1
    6a64:	000e5915 	andeq	r5, lr, r5, lsl r9
    6a68:	04b00300 	ldrteq	r0, [r0], #768	; 0x300
    6a6c:	0000046b 	andeq	r0, r0, fp, ror #8
    6a70:	09671518 	stmdbeq	r7!, {r3, r4, r8, sl, ip}^
    6a74:	b1030000 	mrslt	r0, (UNDEF: 3)
    6a78:	00019004 	andeq	r9, r1, r4
    6a7c:	5f151a00 	svcpl	0x00151a00
    6a80:	0300000e 	movweq	r0, #14
    6a84:	046b04b2 	strbteq	r0, [fp], #-1202	; 0xfffffb4e
    6a88:	151c0000 	ldrne	r0, [ip, #-0]
    6a8c:	00000971 	andeq	r0, r0, r1, ror r9
    6a90:	9004b303 	andls	fp, r4, r3, lsl #6
    6a94:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    6a98:	000f1815 	andeq	r1, pc, r5, lsl r8	; <UNPREDICTABLE>
    6a9c:	04b40300 	ldrteq	r0, [r4], #768	; 0x300
    6aa0:	0000046b 	andeq	r0, r0, fp, ror #8
    6aa4:	097b1520 	ldmdbeq	fp!, {r5, r8, sl, ip}^
    6aa8:	b5030000 	strlt	r0, [r3, #-0]
    6aac:	00019004 	andeq	r9, r1, r4
    6ab0:	43142200 	tstmi	r4, #0, 4
    6ab4:	0300544e 	movweq	r5, #1102	; 0x44e
    6ab8:	046b04b6 	strbteq	r0, [fp], #-1206	; 0xfffffb4a
    6abc:	15240000 	strne	r0, [r4, #-0]!
    6ac0:	000010a9 	andeq	r1, r0, r9, lsr #1
    6ac4:	9004b703 	andls	fp, r4, r3, lsl #14
    6ac8:	26000001 	strcs	r0, [r0], -r1
    6acc:	43535014 	cmpmi	r3, #20
    6ad0:	04b80300 	ldrteq	r0, [r8], #768	; 0x300
    6ad4:	0000046b 	andeq	r0, r0, fp, ror #8
    6ad8:	0e951528 	cdpeq	5, 9, cr1, cr5, cr8, {1}
    6adc:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    6ae0:	00019004 	andeq	r9, r1, r4
    6ae4:	41142a00 	tstmi	r4, r0, lsl #20
    6ae8:	03005252 	movweq	r5, #594	; 0x252
    6aec:	046b04ba 	strbteq	r0, [fp], #-1210	; 0xfffffb46
    6af0:	152c0000 	strne	r0, [ip, #-0]!
    6af4:	00000ea0 	andeq	r0, r0, r0, lsr #29
    6af8:	9004bb03 	andls	fp, r4, r3, lsl #22
    6afc:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    6b00:	52435214 	subpl	r5, r3, #20, 4	; 0x40000001
    6b04:	04bc0300 	ldrteq	r0, [ip], #768	; 0x300
    6b08:	0000046b 	andeq	r0, r0, fp, ror #8
    6b0c:	0eab1530 	mcreq	5, 5, r1, cr11, cr0, {1}
    6b10:	bd030000 	stclt	0, cr0, [r3, #-0]
    6b14:	00019004 	andeq	r9, r1, r4
    6b18:	cb153200 	blgt	553320 <__RW_SIZE__+0x552d8c>
    6b1c:	03000011 	movweq	r0, #17
    6b20:	046b04be 	strbteq	r0, [fp], #-1214	; 0xfffffb42
    6b24:	15340000 	ldrne	r0, [r4, #-0]!
    6b28:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
    6b2c:	9004bf03 	andls	fp, r4, r3, lsl #30
    6b30:	36000001 	strcc	r0, [r0], -r1
    6b34:	000e2e15 	andeq	r2, lr, r5, lsl lr
    6b38:	04c00300 	strbeq	r0, [r0], #768	; 0x300
    6b3c:	0000046b 	andeq	r0, r0, fp, ror #8
    6b40:	0ec11538 	mcreq	5, 6, r1, cr1, cr8, {1}
    6b44:	c1030000 	mrsgt	r0, (UNDEF: 3)
    6b48:	00019004 	andeq	r9, r1, r4
    6b4c:	d0153a00 	andsle	r3, r5, r0, lsl #20
    6b50:	03000011 	movweq	r0, #17
    6b54:	046b04c2 	strbteq	r0, [fp], #-1218	; 0xfffffb3e
    6b58:	153c0000 	ldrne	r0, [ip, #-0]!
    6b5c:	00000ecc 	andeq	r0, r0, ip, asr #29
    6b60:	9004c303 	andls	ip, r4, r3, lsl #6
    6b64:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    6b68:	0011d515 	andseq	sp, r1, r5, lsl r5
    6b6c:	04c40300 	strbeq	r0, [r4], #768	; 0x300
    6b70:	0000046b 	andeq	r0, r0, fp, ror #8
    6b74:	11da1540 	bicsne	r1, sl, r0, asr #10
    6b78:	c5030000 	strgt	r0, [r3, #-0]
    6b7c:	00019004 	andeq	r9, r1, r4
    6b80:	a6154200 	ldrge	r4, [r5], -r0, lsl #4
    6b84:	0300000f 	movweq	r0, #15
    6b88:	046b04c6 	strbteq	r0, [fp], #-1222	; 0xfffffb3a
    6b8c:	15440000 	strbne	r0, [r4, #-0]
    6b90:	00000ee4 	andeq	r0, r0, r4, ror #29
    6b94:	9004c703 	andls	ip, r4, r3, lsl #14
    6b98:	46000001 	strmi	r0, [r0], -r1
    6b9c:	52434414 	subpl	r4, r3, #20, 8	; 0x14000000
    6ba0:	04c80300 	strbeq	r0, [r8], #768	; 0x300
    6ba4:	0000046b 	andeq	r0, r0, fp, ror #8
    6ba8:	0eef1548 	cdpeq	5, 14, cr1, cr15, cr8, {2}
    6bac:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    6bb0:	00019004 	andeq	r9, r1, r4
    6bb4:	86154a00 	ldrhi	r4, [r5], -r0, lsl #20
    6bb8:	03000011 	movweq	r0, #17
    6bbc:	046b04ca 	strbteq	r0, [fp], #-1226	; 0xfffffb36
    6bc0:	154c0000 	strbne	r0, [ip, #-0]
    6bc4:	00000efa 	strdeq	r0, [r0], -sl
    6bc8:	9004cb03 	andls	ip, r4, r3, lsl #22
    6bcc:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    6bd0:	0e030400 	cfcpyseq	mvf0, mvf3
    6bd4:	cc030000 	stcgt	0, cr0, [r3], {-0}
    6bd8:	0004d304 	andeq	sp, r4, r4, lsl #6
    6bdc:	f6041600 			; <UNDEFINED> instruction: 0xf6041600
    6be0:	05000006 	streq	r0, [r0, #-6]
    6be4:	00a00801 	adceq	r0, r0, r1, lsl #16
    6be8:	04160000 	ldreq	r0, [r6], #-0
    6bec:	00000703 	andeq	r0, r0, r3, lsl #14
    6bf0:	0006f612 	andeq	pc, r6, r2, lsl r6	; <UNPREDICTABLE>
    6bf4:	05371700 	ldreq	r1, [r7, #-1792]!	; 0xfffff900
    6bf8:	13020000 	movwne	r0, #8192	; 0x2000
    6bfc:	07220306 	streq	r0, [r2, -r6, lsl #6]!
    6c00:	21180000 	tstcs	r8, r0
    6c04:	02000004 	andeq	r0, r0, #4
    6c08:	01640613 	cmneq	r4, r3, lsl r6
    6c0c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    6c10:	00001108 	andeq	r1, r0, r8, lsl #2
    6c14:	8d0c2501 	cfstr32hi	mvfx2, [ip, #-4]
    6c18:	00380800 	eorseq	r0, r8, r0, lsl #16
    6c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6c20:	00000781 	andeq	r0, r0, r1, lsl #15
    6c24:	00129a1a 	andseq	r9, r2, sl, lsl sl
    6c28:	fd250100 	stc2	1, cr0, [r5, #-0]
    6c2c:	02000006 	andeq	r0, r0, #6
    6c30:	1b000038 	blne	6d18 <__RW_SIZE__+0x6784>
    6c34:	01007073 	tsteq	r0, r3, ror r0
    6c38:	00078125 	andeq	r8, r7, r5, lsr #2
    6c3c:	00382e00 	eorseq	r2, r8, r0, lsl #28
    6c40:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    6c44:	01c92701 	biceq	r2, r9, r1, lsl #14
    6c48:	385a0000 	ldmdacc	sl, {}^	; <UNPREDICTABLE>
    6c4c:	361d0000 	ldrcc	r0, [sp], -r0
    6c50:	fc08008d 	stc2	0, cr0, [r8], {141}	; 0x8d
    6c54:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    6c58:	74025201 	strvc	r5, [r2], #-513	; 0xfffffdff
    6c5c:	51011e7f 	tstpl	r1, pc, ror lr
    6c60:	1e007602 	cfmadd32ne	mvax0, mvfx7, mvfx0, mvfx2
    6c64:	03055001 	movweq	r5, #20481	; 0x5001
    6c68:	08010db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp}
    6c6c:	04160000 	ldreq	r0, [r6], #-0
    6c70:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6c74:	0011471f 	andseq	r4, r1, pc, lsl r7
    6c78:	441c0100 	ldrmi	r0, [ip], #-256	; 0xffffff00
    6c7c:	3208008d 	andcc	r0, r8, #141	; 0x8d
    6c80:	01000000 	mrseq	r0, (UNDEF: 0)
    6c84:	0007c79c 	muleq	r7, ip, r7
    6c88:	8d602000 	stclhi	0, cr2, [r0, #-0]
    6c8c:	11fc0800 	mvnsne	r0, r0, lsl #16
    6c90:	07b30000 	ldreq	r0, [r3, r0]!
    6c94:	011e0000 	tsteq	lr, r0
    6c98:	c8030550 	stmdagt	r3, {r4, r6, r8, sl}
    6c9c:	0008010d 	andeq	r0, r8, sp, lsl #2
    6ca0:	008d741d 	addeq	r7, sp, sp, lsl r4
    6ca4:	0011fc08 	andseq	pc, r1, r8, lsl #24
    6ca8:	50011e00 	andpl	r1, r1, r0, lsl #28
    6cac:	0de00305 	stcleq	3, cr0, [r0, #20]!
    6cb0:	00000801 	andeq	r0, r0, r1, lsl #16
    6cb4:	000d981f 	andeq	r9, sp, pc, lsl r8
    6cb8:	78480100 	stmdavc	r8, {r8}^
    6cbc:	1008008d 	andne	r0, r8, sp, lsl #1
    6cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cc4:	0007f09c 	muleq	r7, ip, r0
    6cc8:	8d861d00 	stchi	13, cr1, [r6]
    6ccc:	11fc0800 	mvnsne	r0, r0, lsl #16
    6cd0:	011e0000 	tsteq	lr, r0
    6cd4:	f4030550 	vst3.16	{d0,d2,d4}, [r3 :64], r0
    6cd8:	0008010d 	andeq	r0, r8, sp, lsl #2
    6cdc:	0e212100 	sufeqs	f2, f1, f0
    6ce0:	2f010000 	svccs	0x00010000
    6ce4:	00081d01 	andeq	r1, r8, r1, lsl #26
    6ce8:	736d2200 	cmnvc	sp, #0, 4
    6cec:	2f010070 	svccs	0x00010070
    6cf0:	00000781 	andeq	r0, r0, r1, lsl #15
    6cf4:	00726c22 	rsbseq	r6, r2, r2, lsr #24
    6cf8:	01d02f01 	bicseq	r2, r0, r1, lsl #30
    6cfc:	70220000 	eorvc	r0, r2, r0
    6d00:	01007073 	tsteq	r0, r3, ror r0
    6d04:	0007812f 	andeq	r8, r7, pc, lsr #2
    6d08:	df1f0000 	svcle	0x001f0000
    6d0c:	0100000f 	tsteq	r0, pc
    6d10:	008d8855 	addeq	r8, sp, r5, asr r8
    6d14:	00012a08 	andeq	r2, r1, r8, lsl #20
    6d18:	0a9c0100 	beq	fe707120 <MSP_BASE+0xde702120>
    6d1c:	1b00000a 	blne	6d4c <__RW_SIZE__+0x67b8>
    6d20:	0070736d 	rsbseq	r7, r0, sp, ror #6
    6d24:	07815501 	streq	r5, [r1, r1, lsl #10]
    6d28:	38a70000 	stmiacc	r7!, {}	; <UNPREDICTABLE>
    6d2c:	6c1b0000 	ldcvs	0, cr0, [fp], {-0}
    6d30:	55010072 	strpl	r0, [r1, #-114]	; 0xffffff8e
    6d34:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6d38:	000038de 	ldrdeq	r3, [r0], -lr
    6d3c:	7073701b 	rsbsvc	r7, r3, fp, lsl r0
    6d40:	81550100 	cmphi	r5, r0, lsl #2
    6d44:	fc000007 	stc2	0, cr0, [r0], {7}
    6d48:	23000038 	movwcs	r0, #56	; 0x38
    6d4c:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6d50:	08008d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, pc}
    6d54:	00002728 	andeq	r2, r0, r8, lsr #14
    6d58:	09835901 	stmibeq	r3, {r0, r8, fp, ip, lr}
    6d5c:	11240000 	teqne	r4, r0
    6d60:	01000008 	tsteq	r0, r8
    6d64:	08072456 	stmdaeq	r7, {r1, r2, r4, r6, sl, sp}
    6d68:	55010000 	strpl	r0, [r1, #-0]
    6d6c:	0007fc25 	andeq	pc, r7, r5, lsr #24
    6d70:	00391a00 	eorseq	r1, r9, r0, lsl #20
    6d74:	8daa2000 	stchi	0, cr2, [sl]
    6d78:	11fc0800 	mvnsne	r0, r0, lsl #16
    6d7c:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    6d80:	011e0000 	tsteq	lr, r0
    6d84:	00750251 	rsbseq	r0, r5, r1, asr r2
    6d88:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    6d8c:	010e0c03 	tsteq	lr, r3, lsl #24
    6d90:	b8200008 	stmdalt	r0!, {r3}
    6d94:	fc08008d 	stc2	0, cr0, [r8], {141}	; 0x8d
    6d98:	c2000011 	andgt	r0, r0, #17
    6d9c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    6da0:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    6da4:	50011e00 	andpl	r1, r1, r0, lsl #28
    6da8:	0e240305 	cdpeq	3, 2, cr0, cr4, cr5, {0}
    6dac:	20000801 	andcs	r0, r0, r1, lsl #16
    6db0:	08008dc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sl, fp, pc}
    6db4:	000011fc 	strdeq	r1, [r0], -ip
    6db8:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6dbc:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    6dc0:	011e0076 	tsteq	lr, r6, ror r0
    6dc4:	30030550 	andcc	r0, r3, r0, asr r5
    6dc8:	0008010e 	andeq	r0, r8, lr, lsl #2
    6dcc:	008e0620 	addeq	r0, lr, r0, lsr #12
    6dd0:	0011fc08 	andseq	pc, r1, r8, lsl #24
    6dd4:	0008fe00 	andeq	pc, r8, r0, lsl #28
    6dd8:	51011e00 	tstpl	r1, r0, lsl #28
    6ddc:	3f007504 	svccc	0x00007504
    6de0:	50011e1a 	andpl	r1, r1, sl, lsl lr
    6de4:	0ec00305 	cdpeq	3, 12, cr0, cr0, cr5, {0}
    6de8:	20000801 	andcs	r0, r0, r1, lsl #16
    6dec:	08008e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, pc}
    6df0:	000011fc 	strdeq	r1, [r0], -ip
    6df4:	00000915 	andeq	r0, r0, r5, lsl r9
    6df8:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    6dfc:	010eec03 	tsteq	lr, r3, lsl #24
    6e00:	2a200008 	bcs	806e28 <__RW_SIZE__+0x806894>
    6e04:	fc08008e 	stc2	0, cr0, [r8], {142}	; 0x8e
    6e08:	2c000011 	stccs	0, cr0, [r0], {17}
    6e0c:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    6e10:	03055001 	movweq	r5, #20481	; 0x5001
    6e14:	08010efc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, fp}
    6e18:	8e862600 	cdphi	6, 8, cr2, cr6, cr0, {0}
    6e1c:	11fc0800 	mvnsne	r0, r0, lsl #16
    6e20:	94200000 	strtls	r0, [r0], #-0
    6e24:	2208008e 	andcs	r0, r8, #142	; 0x8e
    6e28:	52000007 	andpl	r0, r0, #7
    6e2c:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    6e30:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    6e34:	50011e00 	andpl	r1, r1, r0, lsl #28
    6e38:	0e600305 	cdpeq	3, 6, cr0, cr0, cr5, {0}
    6e3c:	20000801 	andcs	r0, r0, r1, lsl #16
    6e40:	08008ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp, pc}
    6e44:	000011fc 	strdeq	r1, [r0], -ip
    6e48:	00000969 	andeq	r0, r0, r9, ror #18
    6e4c:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    6e50:	010e9003 	tsteq	lr, r3
    6e54:	b01d0008 	andslt	r0, sp, r8
    6e58:	2208008e 	andcs	r0, r8, #142	; 0x8e
    6e5c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    6e60:	76025101 	strvc	r5, [r2], -r1, lsl #2
    6e64:	50011e00 	andpl	r1, r1, r0, lsl #28
    6e68:	0ebc0305 	cdpeq	3, 11, cr0, cr12, cr5, {0}
    6e6c:	00000801 	andeq	r0, r0, r1, lsl #16
    6e70:	008d9c20 	addeq	r9, sp, r0, lsr #24
    6e74:	0011fc08 	andseq	pc, r1, r8, lsl #24
    6e78:	00099a00 	andeq	r9, r9, r0, lsl #20
    6e7c:	50011e00 	andpl	r1, r1, r0, lsl #28
    6e80:	0dfc0305 	ldcleq	3, cr0, [ip, #20]!
    6e84:	20000801 	andcs	r0, r0, r1, lsl #16
    6e88:	08008e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, pc}
    6e8c:	000011fc 	strdeq	r1, [r0], -ip
    6e90:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    6e94:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    6e98:	010f1c03 	tsteq	pc, r3, lsl #24
    6e9c:	4a200008 	bmi	806ec4 <__RW_SIZE__+0x806930>
    6ea0:	fc08008e 	stc2	0, cr0, [r8], {142}	; 0x8e
    6ea4:	c8000011 	stmdagt	r0, {r0, r4}
    6ea8:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    6eac:	03055001 	movweq	r5, #20481	; 0x5001
    6eb0:	08010f30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp}
    6eb4:	8e5c2000 	cdphi	0, 5, cr2, cr12, cr0, {0}
    6eb8:	11fc0800 	mvnsne	r0, r0, lsl #16
    6ebc:	09df0000 	ldmibeq	pc, {}^	; <UNPREDICTABLE>
    6ec0:	011e0000 	tsteq	lr, r0
    6ec4:	40030550 	andmi	r0, r3, r0, asr r5
    6ec8:	0008010f 	andeq	r0, r8, pc, lsl #2
    6ecc:	008e6a20 	addeq	r6, lr, r0, lsr #20
    6ed0:	0011fc08 	andseq	pc, r1, r8, lsl #24
    6ed4:	0009f600 	andeq	pc, r9, r0, lsl #12
    6ed8:	50011e00 	andpl	r1, r1, r0, lsl #28
    6edc:	0f540305 	svceq	0x00540305
    6ee0:	1d000801 	stcne	8, cr0, [r0, #-4]
    6ee4:	08008e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, pc}
    6ee8:	000011fc 	strdeq	r1, [r0], -ip
    6eec:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    6ef0:	010f6403 	tsteq	pc, r3, lsl #8
    6ef4:	1f000008 	svcne	0x00000008
    6ef8:	00000fcd 	andeq	r0, r0, sp, asr #31
    6efc:	8eb46b01 	vmovhi.f64	d6, #65	; 0x41
    6f00:	00100800 	andseq	r0, r0, r0, lsl #16
    6f04:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f08:	00000a5f 	andeq	r0, r0, pc, asr sl
    6f0c:	70736d1b 	rsbsvc	r6, r3, fp, lsl sp
    6f10:	816b0100 	cmnhi	fp, r0, lsl #2
    6f14:	46000007 	strmi	r0, [r0], -r7
    6f18:	1b000039 	blne	7004 <__RW_SIZE__+0x6a70>
    6f1c:	0100726c 	tsteq	r0, ip, ror #4
    6f20:	0001d06b 	andeq	sp, r1, fp, rrx
    6f24:	00396700 	eorseq	r6, r9, r0, lsl #14
    6f28:	73701b00 	cmnvc	r0, #0, 22
    6f2c:	6b010070 	blvs	470f4 <__RW_SIZE__+0x46b60>
    6f30:	00000781 	andeq	r0, r0, r1, lsl #15
    6f34:	00003988 	andeq	r3, r0, r8, lsl #19
    6f38:	008ec21d 	addeq	ip, lr, sp, lsl r2
    6f3c:	0011fc08 	andseq	pc, r1, r8, lsl #24
    6f40:	50011e00 	andpl	r1, r1, r0, lsl #28
    6f44:	0f880305 	svceq	0x00880305
    6f48:	00000801 	andeq	r0, r0, r1, lsl #16
    6f4c:	0011581f 	andseq	r5, r1, pc, lsl r8
    6f50:	c4780100 	ldrbtgt	r0, [r8], #-256	; 0xffffff00
    6f54:	1008008e 	andne	r0, r8, lr, lsl #1
    6f58:	01000000 	mrseq	r0, (UNDEF: 0)
    6f5c:	000ab49c 	muleq	sl, ip, r4
    6f60:	736d1b00 	cmnvc	sp, #0, 22
    6f64:	78010070 	stmdavc	r1, {r4, r5, r6}
    6f68:	00000781 	andeq	r0, r0, r1, lsl #15
    6f6c:	000039a9 	andeq	r3, r0, r9, lsr #19
    6f70:	00726c1b 	rsbseq	r6, r2, fp, lsl ip
    6f74:	01d07801 	bicseq	r7, r0, r1, lsl #16
    6f78:	39ca0000 	stmibcc	sl, {}^	; <UNPREDICTABLE>
    6f7c:	701b0000 	andsvc	r0, fp, r0
    6f80:	01007073 	tsteq	r0, r3, ror r0
    6f84:	00078178 	andeq	r8, r7, r8, ror r1
    6f88:	0039eb00 	eorseq	lr, r9, r0, lsl #22
    6f8c:	8ed21d00 	cdphi	13, 13, cr1, cr2, cr0, {0}
    6f90:	11fc0800 	mvnsne	r0, r0, lsl #16
    6f94:	011e0000 	tsteq	lr, r0
    6f98:	a4030550 	strge	r0, [r3], #-1360	; 0xfffffab0
    6f9c:	0008010f 	andeq	r0, r8, pc, lsl #2
    6fa0:	0f051f00 	svceq	0x00051f00
    6fa4:	85010000 	strhi	r0, [r1, #-0]
    6fa8:	08008ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, pc}
    6fac:	00000010 	andeq	r0, r0, r0, lsl r0
    6fb0:	0b099c01 	bleq	26dfbc <__RW_SIZE__+0x26da28>
    6fb4:	6d1b0000 	ldcvs	0, cr0, [fp, #-0]
    6fb8:	01007073 	tsteq	r0, r3, ror r0
    6fbc:	00078185 	andeq	r8, r7, r5, lsl #3
    6fc0:	003a0c00 	eorseq	r0, sl, r0, lsl #24
    6fc4:	726c1b00 	rsbvc	r1, ip, #0, 22
    6fc8:	d0850100 	addle	r0, r5, r0, lsl #2
    6fcc:	2d000001 	stccs	0, cr0, [r0, #-4]
    6fd0:	1b00003a 	blne	70c0 <__RW_SIZE__+0x6b2c>
    6fd4:	00707370 	rsbseq	r7, r0, r0, ror r3
    6fd8:	07818501 	streq	r8, [r1, r1, lsl #10]
    6fdc:	3a4e0000 	bcc	1386fe4 <__RW_SIZE__+0x1386a50>
    6fe0:	e21d0000 	ands	r0, sp, #0
    6fe4:	fc08008e 	stc2	0, cr0, [r8], {142}	; 0x8e
    6fe8:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    6fec:	03055001 	movweq	r5, #20481	; 0x5001
    6ff0:	08010fb0 	stmdaeq	r1, {r4, r5, r7, r8, r9, sl, fp}
    6ff4:	fc1f0000 	ldc2	0, cr0, [pc], {-0}
    6ff8:	01000010 	tsteq	r0, r0, lsl r0
    6ffc:	008ee492 	umulleq	lr, lr, r2, r4	; <UNPREDICTABLE>
    7000:	00001008 	andeq	r1, r0, r8
    7004:	329c0100 	addscc	r0, ip, #0, 2
    7008:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    700c:	08008ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, pc}
    7010:	000011fc 	strdeq	r1, [r0], -ip
    7014:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    7018:	010fc003 	tsteq	pc, r3
    701c:	1f000008 	svcne	0x00000008
    7020:	00000da9 	andeq	r0, r0, r9, lsr #27
    7024:	8ef49f01 	cdphi	15, 15, cr9, cr4, cr1, {0}
    7028:	00100800 	andseq	r0, r0, r0, lsl #16
    702c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7030:	00000b5b 	andeq	r0, r0, fp, asr fp
    7034:	008f021d 	addeq	r0, pc, sp, lsl r2	; <UNPREDICTABLE>
    7038:	0011fc08 	andseq	pc, r1, r8, lsl #24
    703c:	50011e00 	andpl	r1, r1, r0, lsl #28
    7040:	0fcc0305 	svceq	0x00cc0305
    7044:	00000801 	andeq	r0, r0, r1, lsl #16
    7048:	0010721f 	andseq	r7, r0, pc, lsl r2
    704c:	04ac0100 	strteq	r0, [ip], #256	; 0x100
    7050:	1008008f 	andne	r0, r8, pc, lsl #1
    7054:	01000000 	mrseq	r0, (UNDEF: 0)
    7058:	000b849c 	muleq	fp, ip, r4
    705c:	8f121d00 	svchi	0x00121d00
    7060:	11fc0800 	mvnsne	r0, r0, lsl #16
    7064:	011e0000 	tsteq	lr, r0
    7068:	dc030550 	cfstr32le	mvfx0, [r3], {80}	; 0x50
    706c:	0008010f 	andeq	r0, r8, pc, lsl #2
    7070:	11232700 	teqne	r3, r0, lsl #14
    7074:	bb010000 	bllt	4707c <__RW_SIZE__+0x46ae8>
    7078:	08008f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, pc}
    707c:	0000000e 	andeq	r0, r0, lr
    7080:	f31f9c01 			; <UNDEFINED> instruction: 0xf31f9c01
    7084:	0100000d 	tsteq	r0, sp
    7088:	008f24c7 	addeq	r2, pc, r7, asr #9
    708c:	00000608 	andeq	r0, r0, r8, lsl #12
    7090:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    7094:	2600000b 	strcs	r0, [r0], -fp
    7098:	08008f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, pc}
    709c:	00000787 	andeq	r0, r0, r7, lsl #15
    70a0:	0e751f00 	cdpeq	15, 7, cr1, cr5, cr0, {0}
    70a4:	d3010000 	movwle	r0, #4096	; 0x1000
    70a8:	08008f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, pc}
    70ac:	00000006 	andeq	r0, r0, r6
    70b0:	0bd39c01 	bleq	ff4ee0bc <MSP_BASE+0xdf4e90bc>
    70b4:	32260000 	eorcc	r0, r6, #0
    70b8:	8708008f 	strhi	r0, [r8, -pc, lsl #1]
    70bc:	00000007 	andeq	r0, r0, r7
    70c0:	00120f1f 	andseq	r0, r2, pc, lsl pc
    70c4:	34df0100 	ldrbcc	r0, [pc], #256	; 70cc <__RW_SIZE__+0x6b38>
    70c8:	0608008f 	streq	r0, [r8], -pc, lsl #1
    70cc:	01000000 	mrseq	r0, (UNDEF: 0)
    70d0:	000bf29c 	muleq	fp, ip, r2
    70d4:	8f3a2600 	svchi	0x003a2600
    70d8:	07870800 	streq	r0, [r7, r0, lsl #16]
    70dc:	1f000000 	svcne	0x00000000
    70e0:	000010ed 	andeq	r1, r0, sp, ror #1
    70e4:	8f3ceb01 	svchi	0x003ceb01
    70e8:	00060800 	andeq	r0, r6, r0, lsl #16
    70ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    70f0:	00000c11 	andeq	r0, r0, r1, lsl ip
    70f4:	008f4226 	addeq	r4, pc, r6, lsr #4
    70f8:	00078708 	andeq	r8, r7, r8, lsl #14
    70fc:	f11f0000 			; <UNDEFINED> instruction: 0xf11f0000
    7100:	0100000f 	tsteq	r0, pc
    7104:	008f44f7 	strdeq	r4, [pc], r7
    7108:	00000608 	andeq	r0, r0, r8, lsl #12
    710c:	309c0100 	addscc	r0, ip, r0, lsl #2
    7110:	2600000c 	strcs	r0, [r0], -ip
    7114:	08008f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, pc}
    7118:	00000787 	andeq	r0, r0, r7, lsl #15
    711c:	10c52800 	sbcne	r2, r5, r0, lsl #16
    7120:	03010000 	movweq	r0, #4096	; 0x1000
    7124:	008f4c01 	addeq	r4, pc, r1, lsl #24
    7128:	00000608 	andeq	r0, r0, r8, lsl #12
    712c:	509c0100 	addspl	r0, ip, r0, lsl #2
    7130:	2600000c 	strcs	r0, [r0], -ip
    7134:	08008f52 	stmdaeq	r0, {r1, r4, r6, r8, r9, sl, fp, pc}
    7138:	00000787 	andeq	r0, r0, r7, lsl #15
    713c:	10022800 	andne	r2, r2, r0, lsl #16
    7140:	0f010000 	svceq	0x00010000
    7144:	008f5401 	addeq	r5, pc, r1, lsl #8
    7148:	00000608 	andeq	r0, r0, r8, lsl #12
    714c:	709c0100 	addsvc	r0, ip, r0, lsl #2
    7150:	2600000c 	strcs	r0, [r0], -ip
    7154:	08008f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, pc}
    7158:	00000787 	andeq	r0, r0, r7, lsl #15
    715c:	10612800 	rsbne	r2, r1, r0, lsl #16
    7160:	1b010000 	blne	47168 <__RW_SIZE__+0x46bd4>
    7164:	008f5c01 	addeq	r5, pc, r1, lsl #24
    7168:	00000608 	andeq	r0, r0, r8, lsl #12
    716c:	909c0100 	addsls	r0, ip, r0, lsl #2
    7170:	2600000c 	strcs	r0, [r0], -ip
    7174:	08008f62 	stmdaeq	r0, {r1, r5, r6, r8, r9, sl, fp, pc}
    7178:	00000787 	andeq	r0, r0, r7, lsl #15
    717c:	11fe2800 	mvnsne	r2, r0, lsl #16
    7180:	27010000 	strcs	r0, [r1, -r0]
    7184:	008f6401 	addeq	r6, pc, r1, lsl #8
    7188:	00000608 	andeq	r0, r0, r8, lsl #12
    718c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    7190:	2600000c 	strcs	r0, [r0], -ip
    7194:	08008f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, pc}
    7198:	00000787 	andeq	r0, r0, r7, lsl #15
    719c:	0e842800 	cdpeq	8, 8, cr2, cr4, cr0, {0}
    71a0:	36010000 	strcc	r0, [r1], -r0
    71a4:	008f6c01 	addeq	r6, pc, r1, lsl #24
    71a8:	00003208 	andeq	r3, r0, r8, lsl #4
    71ac:	de9c0100 	fmllee	f0, f4, f0
    71b0:	2900000c 	stmdbcs	r0, {r2, r3}
    71b4:	00000708 	andeq	r0, r0, r8, lsl #14
    71b8:	08008f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, pc}
    71bc:	00002740 	andeq	r2, r0, r0, asr #14
    71c0:	2a013c01 	bcs	561cc <__RW_SIZE__+0x55c38>
    71c4:	00000715 	andeq	r0, r0, r5, lsl r7
    71c8:	28000009 	stmdacs	r0, {r0, r3}
    71cc:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    71d0:	a0014601 	andge	r4, r1, r1, lsl #12
    71d4:	0608008f 	streq	r0, [r8], -pc, lsl #1
    71d8:	01000000 	mrseq	r0, (UNDEF: 0)
    71dc:	000cfe9c 	muleq	ip, ip, lr
    71e0:	8fa62600 	svchi	0x00a62600
    71e4:	07870800 	streq	r0, [r7, r0, lsl #16]
    71e8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    71ec:	00001221 	andeq	r1, r0, r1, lsr #4
    71f0:	a8015201 	stmdage	r1, {r0, r9, ip, lr}
    71f4:	0608008f 	streq	r0, [r8], -pc, lsl #1
    71f8:	01000000 	mrseq	r0, (UNDEF: 0)
    71fc:	000d1e9c 	muleq	sp, ip, lr
    7200:	8fae2600 	svchi	0x00ae2600
    7204:	07870800 	streq	r0, [r7, r0, lsl #16]
    7208:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    720c:	00001048 	andeq	r1, r0, r8, asr #32
    7210:	b0015e01 	andlt	r5, r1, r1, lsl #28
    7214:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7218:	01000000 	mrseq	r0, (UNDEF: 0)
    721c:	000d3e9c 	muleq	sp, ip, lr
    7220:	8fb62600 	svchi	0x00b62600
    7224:	07870800 	streq	r0, [r7, r0, lsl #16]
    7228:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    722c:	000011e5 	andeq	r1, r0, r5, ror #3
    7230:	b8016a01 	stmdalt	r1, {r0, r9, fp, sp, lr}
    7234:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7238:	01000000 	mrseq	r0, (UNDEF: 0)
    723c:	000d5e9c 	muleq	sp, ip, lr
    7240:	8fbe2600 	svchi	0x00be2600
    7244:	07870800 	streq	r0, [r7, r0, lsl #16]
    7248:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    724c:	00000f59 	andeq	r0, r0, r9, asr pc
    7250:	c0017601 	andgt	r7, r1, r1, lsl #12
    7254:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7258:	01000000 	mrseq	r0, (UNDEF: 0)
    725c:	000d7e9c 	muleq	sp, ip, lr
    7260:	8fc62600 	svchi	0x00c62600
    7264:	07870800 	streq	r0, [r7, r0, lsl #16]
    7268:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    726c:	00001090 	muleq	r0, r0, r0
    7270:	c8018201 	stmdagt	r1, {r0, r9, pc}
    7274:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7278:	01000000 	mrseq	r0, (UNDEF: 0)
    727c:	000d9e9c 	muleq	sp, ip, lr
    7280:	8fce2600 	svchi	0x00ce2600
    7284:	07870800 	streq	r0, [r7, r0, lsl #16]
    7288:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    728c:	000010d4 	ldrdeq	r1, [r0], -r4
    7290:	d0018e01 	andle	r8, r1, r1, lsl #28
    7294:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7298:	01000000 	mrseq	r0, (UNDEF: 0)
    729c:	000dbe9c 	muleq	sp, ip, lr
    72a0:	8fd62600 	svchi	0x00d62600
    72a4:	07870800 	streq	r0, [r7, r0, lsl #16]
    72a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    72ac:	00000dda 	ldrdeq	r0, [r0], -sl
    72b0:	d8019a01 	stmdale	r1, {r0, r9, fp, ip, pc}
    72b4:	0608008f 	streq	r0, [r8], -pc, lsl #1
    72b8:	01000000 	mrseq	r0, (UNDEF: 0)
    72bc:	000dde9c 	muleq	sp, ip, lr
    72c0:	8fde2600 	svchi	0x00de2600
    72c4:	07870800 	streq	r0, [r7, r0, lsl #16]
    72c8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    72cc:	00001013 	andeq	r1, r0, r3, lsl r0
    72d0:	e001a601 	and	sl, r1, r1, lsl #12
    72d4:	0608008f 	streq	r0, [r8], -pc, lsl #1
    72d8:	01000000 	mrseq	r0, (UNDEF: 0)
    72dc:	000dfe9c 	muleq	sp, ip, lr
    72e0:	8fe62600 	svchi	0x00e62600
    72e4:	07870800 	streq	r0, [r7, r0, lsl #16]
    72e8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    72ec:	00000f2d 	andeq	r0, r0, sp, lsr #30
    72f0:	e801b301 	stmda	r1, {r0, r8, r9, ip, sp, pc}
    72f4:	0608008f 	streq	r0, [r8], -pc, lsl #1
    72f8:	01000000 	mrseq	r0, (UNDEF: 0)
    72fc:	000e1e9c 	muleq	lr, ip, lr
    7300:	8fee2600 	svchi	0x00ee2600
    7304:	07870800 	streq	r0, [r7, r0, lsl #16]
    7308:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    730c:	0000119e 	muleq	r0, lr, r1
    7310:	f001c001 			; <UNDEFINED> instruction: 0xf001c001
    7314:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7318:	01000000 	mrseq	r0, (UNDEF: 0)
    731c:	000e3e9c 	muleq	lr, ip, lr
    7320:	8ff62600 	svchi	0x00f62600
    7324:	07870800 	streq	r0, [r7, r0, lsl #16]
    7328:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    732c:	00001025 	andeq	r1, r0, r5, lsr #32
    7330:	f801cc01 			; <UNDEFINED> instruction: 0xf801cc01
    7334:	0608008f 	streq	r0, [r8], -pc, lsl #1
    7338:	01000000 	mrseq	r0, (UNDEF: 0)
    733c:	000e5e9c 	muleq	lr, ip, lr
    7340:	8ffe2600 	svchi	0x00fe2600
    7344:	07870800 	streq	r0, [r7, r0, lsl #16]
    7348:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    734c:	00000e33 	andeq	r0, r0, r3, lsr lr
    7350:	0001d801 	andeq	sp, r1, r1, lsl #16
    7354:	06080090 			; <UNDEFINED> instruction: 0x06080090
    7358:	01000000 	mrseq	r0, (UNDEF: 0)
    735c:	000e7e9c 	muleq	lr, ip, lr
    7360:	90062600 	andls	r2, r6, r0, lsl #12
    7364:	07870800 	streq	r0, [r7, r0, lsl #16]
    7368:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    736c:	00001261 	andeq	r1, r0, r1, ror #4
    7370:	0801e401 	stmdaeq	r1, {r0, sl, sp, lr, pc}
    7374:	44080090 	strmi	r0, [r8], #-144	; 0xffffff70
    7378:	01000000 	mrseq	r0, (UNDEF: 0)
    737c:	000ebe9c 	muleq	lr, ip, lr
    7380:	0f822b00 	svceq	0x00822b00
    7384:	e7010000 	str	r0, [r1, -r0]
    7388:	000ece01 	andeq	ip, lr, r1, lsl #28
    738c:	90030500 	andls	r0, r3, r0, lsl #10
    7390:	2908010a 	stmdbcs	r8, {r1, r3, r8}
    7394:	00000708 	andeq	r0, r0, r8, lsl #14
    7398:	08009026 	stmdaeq	r0, {r1, r2, r5, ip, pc}
    739c:	00002760 	andeq	r2, r0, r0, ror #14
    73a0:	2a01eb01 	bcs	81fac <__RW_SIZE__+0x81a18>
    73a4:	00000715 	andeq	r0, r0, r5, lsl r7
    73a8:	0c000017 	stceq	0, cr0, [r0], {23}
    73ac:	000001c9 	andeq	r0, r0, r9, asr #3
    73b0:	00000ece 	andeq	r0, r0, lr, asr #29
    73b4:	0002950d 	andeq	r9, r2, sp, lsl #10
    73b8:	12000700 	andne	r0, r0, #0, 14
    73bc:	00000ebe 			; <UNDEFINED> instruction: 0x00000ebe
    73c0:	00113328 	andseq	r3, r1, r8, lsr #6
    73c4:	01f50100 	mvnseq	r0, r0, lsl #2
    73c8:	0800904c 	stmdaeq	r0, {r2, r3, r6, ip, pc}
    73cc:	00000006 	andeq	r0, r0, r6
    73d0:	0ef39c01 	cdpeq	12, 15, cr9, cr3, cr1, {0}
    73d4:	52260000 	eorpl	r0, r6, #0
    73d8:	87080090 			; <UNDEFINED> instruction: 0x87080090
    73dc:	00000007 	andeq	r0, r0, r7
    73e0:	000f4628 	andeq	r4, pc, r8, lsr #12
    73e4:	02020100 	andeq	r0, r2, #0, 2
    73e8:	08009054 	stmdaeq	r0, {r2, r4, r6, ip, pc}
    73ec:	00000006 	andeq	r0, r0, r6
    73f0:	0f139c01 	svceq	0x00139c01
    73f4:	5a260000 	bpl	9873fc <__RW_SIZE__+0x986e68>
    73f8:	87080090 			; <UNDEFINED> instruction: 0x87080090
    73fc:	00000007 	andeq	r0, r0, r7
    7400:	000f8e28 	andeq	r8, pc, r8, lsr #28
    7404:	020f0100 	andeq	r0, pc, #0, 2
    7408:	0800905c 	stmdaeq	r0, {r2, r3, r4, r6, ip, pc}
    740c:	00000006 	andeq	r0, r0, r6
    7410:	0f339c01 	svceq	0x00339c01
    7414:	62260000 	eorvs	r0, r6, #0
    7418:	87080090 			; <UNDEFINED> instruction: 0x87080090
    741c:	00000007 	andeq	r0, r0, r7
    7420:	0011b828 	andseq	fp, r1, r8, lsr #16
    7424:	021b0100 	andseq	r0, fp, #0, 2
    7428:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
    742c:	00000006 	andeq	r0, r0, r6
    7430:	0f539c01 	svceq	0x00539c01
    7434:	6a260000 	bvs	98743c <__RW_SIZE__+0x986ea8>
    7438:	87080090 			; <UNDEFINED> instruction: 0x87080090
    743c:	00000007 	andeq	r0, r0, r7
    7440:	0012b328 	andseq	fp, r2, r8, lsr #6
    7444:	02270100 	eoreq	r0, r7, #0, 2
    7448:	0800906c 	stmdaeq	r0, {r2, r3, r5, r6, ip, pc}
    744c:	00000006 	andeq	r0, r0, r6
    7450:	0f739c01 	svceq	0x00739c01
    7454:	72260000 	eorvc	r0, r6, #0
    7458:	87080090 			; <UNDEFINED> instruction: 0x87080090
    745c:	00000007 	andeq	r0, r0, r7
    7460:	000f7228 	andeq	r7, pc, r8, lsr #4
    7464:	02330100 	eorseq	r0, r3, #0, 2
    7468:	08009074 	stmdaeq	r0, {r2, r4, r5, r6, ip, pc}
    746c:	00000006 	andeq	r0, r0, r6
    7470:	0f939c01 	svceq	0x00939c01
    7474:	7a260000 	bvc	98747c <__RW_SIZE__+0x986ee8>
    7478:	87080090 			; <UNDEFINED> instruction: 0x87080090
    747c:	00000007 	andeq	r0, r0, r7
    7480:	0011132c 	andseq	r1, r1, ip, lsr #6
    7484:	02410100 	subeq	r0, r1, #0, 2
    7488:	0800907c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, pc}
    748c:	00000022 	andeq	r0, r0, r2, lsr #32
    7490:	a0289c01 	eorge	r9, r8, r1, lsl #24
    7494:	01000012 	tsteq	r0, r2, lsl r0
    7498:	90a0024e 	adcls	r0, r0, lr, asr #4
    749c:	00060800 	andeq	r0, r6, r0, lsl #16
    74a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74a4:	00000fc5 	andeq	r0, r0, r5, asr #31
    74a8:	0090a626 	addseq	sl, r0, r6, lsr #12
    74ac:	00078708 	andeq	r8, r7, r8, lsl #14
    74b0:	8b280000 	blhi	a074b8 <__RW_SIZE__+0xa06f24>
    74b4:	01000011 	tsteq	r0, r1, lsl r0
    74b8:	90a8025a 	adcls	r0, r8, sl, asr r2
    74bc:	00060800 	andeq	r0, r6, r0, lsl #16
    74c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74c4:	00000fe5 	andeq	r0, r0, r5, ror #31
    74c8:	0090ae26 	addseq	sl, r0, r6, lsr #28
    74cc:	00078708 	andeq	r8, r7, r8, lsl #14
    74d0:	73280000 	teqvc	r8, #0
    74d4:	01000011 	tsteq	r0, r1, lsl r0
    74d8:	90b00266 	adcsls	r0, r0, r6, ror #4
    74dc:	00060800 	andeq	r0, r6, r0, lsl #16
    74e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    74e4:	00001005 	andeq	r1, r0, r5
    74e8:	0090b626 	addseq	fp, r0, r6, lsr #12
    74ec:	00078708 	andeq	r8, r7, r8, lsl #14
    74f0:	46280000 	strtmi	r0, [r8], -r0
    74f4:	0100000e 	tsteq	r0, lr
    74f8:	90b80272 	adcsls	r0, r8, r2, ror r2
    74fc:	00060800 	andeq	r0, r6, r0, lsl #16
    7500:	9c010000 	stcls	0, cr0, [r1], {-0}
    7504:	00001025 	andeq	r1, r0, r5, lsr #32
    7508:	0090be26 	addseq	fp, r0, r6, lsr #28
    750c:	00078708 	andeq	r8, r7, r8, lsl #14
    7510:	65280000 	strvs	r0, [r8, #-0]!
    7514:	0100000e 	tsteq	r0, lr
    7518:	90c0027e 	sbcls	r0, r0, lr, ror r2
    751c:	00060800 	andeq	r0, r6, r0, lsl #16
    7520:	9c010000 	stcls	0, cr0, [r1], {-0}
    7524:	00001045 	andeq	r1, r0, r5, asr #32
    7528:	0090c626 	addseq	ip, r0, r6, lsr #12
    752c:	00078708 	andeq	r8, r7, r8, lsl #14
    7530:	38280000 	stmdacc	r8!, {}	; <UNPREDICTABLE>
    7534:	01000010 	tsteq	r0, r0, lsl r0
    7538:	90c8028a 	sbcls	r0, r8, sl, lsl #5
    753c:	00060800 	andeq	r0, r6, r0, lsl #16
    7540:	9c010000 	stcls	0, cr0, [r1], {-0}
    7544:	00001065 	andeq	r1, r0, r5, rrx
    7548:	0090ce26 	addseq	ip, r0, r6, lsr #28
    754c:	00078708 	andeq	r8, r7, r8, lsl #14
    7550:	0f280000 	svceq	0x00280000
    7554:	0100000e 	tsteq	r0, lr
    7558:	90d00299 	smullsls	r0, r0, r9, r2	; <UNPREDICTABLE>
    755c:	00160800 	andseq	r0, r6, r0, lsl #16
    7560:	9c010000 	stcls	0, cr0, [r1], {-0}
    7564:	00001085 	andeq	r1, r0, r5, lsl #1
    7568:	0090e226 	addseq	lr, r0, r6, lsr #4
    756c:	00120e08 	andseq	r0, r2, r8, lsl #28
    7570:	88280000 	stmdahi	r8!, {}	; <UNPREDICTABLE>
    7574:	01000012 	tsteq	r0, r2, lsl r0
    7578:	90e802a6 	rscls	r0, r8, r6, lsr #5
    757c:	00060800 	andeq	r0, r6, r0, lsl #16
    7580:	9c010000 	stcls	0, cr0, [r1], {-0}
    7584:	000010a5 	andeq	r1, r0, r5, lsr #1
    7588:	0090ee26 	addseq	lr, r0, r6, lsr #28
    758c:	00078708 	andeq	r8, r7, r8, lsl #14
    7590:	3a280000 	bcc	a07598 <__RW_SIZE__+0xa07004>
    7594:	01000012 	tsteq	r0, r2, lsl r0
    7598:	90f002b2 	ldrhtls	r0, [r0], #34	; 0x22
    759c:	00060800 	andeq	r0, r6, r0, lsl #16
    75a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    75a4:	000010c5 	andeq	r1, r0, r5, asr #1
    75a8:	0090f626 	addseq	pc, r0, r6, lsr #12
    75ac:	00078708 	andeq	r8, r7, r8, lsl #14
    75b0:	4c280000 	stcmi	0, cr0, [r8], #-0
    75b4:	01000012 	tsteq	r0, r2, lsl r0
    75b8:	90f802be 	ldrhtls	r0, [r8], #46	; 0x2e
    75bc:	00460800 	subeq	r0, r6, r0, lsl #16
    75c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    75c4:	00001105 	andeq	r1, r0, r5, lsl #2
    75c8:	000d8a2b 	andeq	r8, sp, fp, lsr #20
    75cc:	02c10100 	sbceq	r0, r1, #0, 2
    75d0:	00001115 	andeq	r1, r0, r5, lsl r1
    75d4:	0ab00305 	beq	fec081f0 <MSP_BASE+0xdec031f0>
    75d8:	08290801 	stmdaeq	r9!, {r0, fp}
    75dc:	16000007 	strne	r0, [r0], -r7
    75e0:	80080091 	mulhi	r8, r1, r0
    75e4:	01000027 	tsteq	r0, r7, lsr #32
    75e8:	152a02c5 	strne	r0, [sl, #-709]!	; 0xfffffd3b
    75ec:	28000007 	stmdacs	r0, {r0, r1, r2}
    75f0:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
    75f4:	15000001 	strne	r0, [r0, #-1]
    75f8:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    75fc:	00000295 	muleq	r0, r5, r2
    7600:	05120003 	ldreq	r0, [r2, #-3]
    7604:	28000011 	stmdacs	r0, {r0, r4}
    7608:	00001274 	andeq	r1, r0, r4, ror r2
    760c:	4002cf01 	andmi	ip, r2, r1, lsl #30
    7610:	06080091 			; <UNDEFINED> instruction: 0x06080091
    7614:	01000000 	mrseq	r0, (UNDEF: 0)
    7618:	00113a9c 	mulseq	r1, ip, sl
    761c:	91462600 	cmpls	r6, r0, lsl #12
    7620:	07870800 	streq	r0, [r7, r0, lsl #16]
    7624:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    7628:	00000fab 	andeq	r0, r0, fp, lsr #31
    762c:	4802db01 	stmdami	r2, {r0, r8, r9, fp, ip, lr, pc}
    7630:	06080091 			; <UNDEFINED> instruction: 0x06080091
    7634:	01000000 	mrseq	r0, (UNDEF: 0)
    7638:	00115a9c 	mulseq	r1, ip, sl
    763c:	914e2600 	cmpls	lr, r0, lsl #12
    7640:	07870800 	streq	r0, [r7, r0, lsl #16]
    7644:	0c000000 	stceq	0, cr0, [r0], {-0}
    7648:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    764c:	0000116a 	andeq	r1, r0, sl, ror #2
    7650:	0002950d 	andeq	r9, r2, sp, lsl #10
    7654:	2d000700 	stccs	7, cr0, [r0, #-0]
    7658:	00001169 	andeq	r1, r0, r9, ror #2
    765c:	117b2301 	cmnne	fp, r1, lsl #6
    7660:	03050000 	movweq	r0, #20480	; 0x5000
    7664:	08010a70 	stmdaeq	r1, {r4, r5, r6, r9, fp}
    7668:	00115a12 	andseq	r5, r1, r2, lsl sl
    766c:	00822e00 	addeq	r2, r2, r0, lsl #28
    7670:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    7674:	00118c06 	andseq	r8, r1, r6, lsl #24
    7678:	01c90e00 	biceq	r0, r9, r0, lsl #28
    767c:	d72f0000 	strle	r0, [pc, -r0]!
    7680:	0100000e 	tsteq	r0, lr
    7684:	00118cb9 			; <UNDEFINED> instruction: 0x00118cb9
    7688:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    768c:	30200006 	eorcc	r0, r0, r6
    7690:	00000a46 	andeq	r0, r0, r6, asr #20
    7694:	8c013301 	stchi	3, cr3, [r1], {1}
    7698:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    769c:	0006f803 	andeq	pc, r6, r3, lsl #16
    76a0:	0c793020 	ldcleq	0, cr3, [r9], #-128	; 0xffffff80
    76a4:	34010000 	strcc	r0, [r1], #-0
    76a8:	00118c01 	andseq	r8, r1, r1, lsl #24
    76ac:	fc030500 	stc2	5, cr0, [r3], {-0}
    76b0:	30200006 	eorcc	r0, r0, r6
    76b4:	00000fc0 	andeq	r0, r0, r0, asr #31
    76b8:	8c023f01 	stchi	15, cr3, [r2], {1}
    76bc:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    76c0:	00070003 	andeq	r0, r7, r3
    76c4:	0f1d3020 	svceq	0x001d3020
    76c8:	96010000 	strls	r0, [r1], -r0
    76cc:	00118c02 	andseq	r8, r1, r2, lsl #24
    76d0:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    76d4:	30200007 	eorcc	r0, r0, r7
    76d8:	00000dcb 	andeq	r0, r0, fp, asr #27
    76dc:	8c029701 	stchi	7, cr9, [r2], {1}
    76e0:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    76e4:	00070803 	andeq	r0, r7, r3, lsl #16
    76e8:	0ce13120 	stfeqe	f3, [r1], #128	; 0x80
    76ec:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    76f0:	0000120e 	andeq	r1, r0, lr, lsl #4
    76f4:	0006f032 	andeq	pc, r6, r2, lsr r0	; <UNPREDICTABLE>
    76f8:	34003300 	strcc	r3, [r0], #-768	; 0xfffffd00
    76fc:	000010b3 	strheq	r1, [r0], -r3
    7700:	06f61b05 	ldrbteq	r1, [r6], r5, lsl #22
    7704:	80000000 	andhi	r0, r0, r0
    7708:	04000001 	streq	r0, [r0], #-1
    770c:	00121400 	andseq	r1, r2, r0, lsl #8
    7710:	08010400 	stmdaeq	r1, {sl}
    7714:	01000001 	tsteq	r0, r1
    7718:	000012d0 	ldrdeq	r1, [r0], -r0
    771c:	00000013 	andeq	r0, r0, r3, lsl r0
    7720:	08009150 	stmdaeq	r0, {r4, r6, r8, ip, pc}
    7724:	0000009c 	muleq	r0, ip, r0
    7728:	00002276 	andeq	r2, r0, r6, ror r2
    772c:	99060102 	stmdbls	r6, {r1, r8}
    7730:	02000000 	andeq	r0, r0, #0
    7734:	00970801 	addseq	r0, r7, r1, lsl #16
    7738:	02020000 	andeq	r0, r2, #0
    773c:	0000f205 	andeq	pc, r0, r5, lsl #4
    7740:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7744:	0000006f 	andeq	r0, r0, pc, rrx
    7748:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
    774c:	03000000 	movweq	r0, #0
    7750:	000001a7 	andeq	r0, r0, r7, lsr #3
    7754:	00535003 	subseq	r5, r3, r3
    7758:	04020000 	streq	r0, [r2], #-0
    775c:	0000cc07 	andeq	ip, r0, r7, lsl #24
    7760:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    7764:	00000000 	andeq	r0, r0, r0
    7768:	c7070802 	strgt	r0, [r7, -r2, lsl #16]
    776c:	04000000 	streq	r0, [r0], #-0
    7770:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7774:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7778:	0000d107 	andeq	sp, r0, r7, lsl #2
    777c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7780:	000000de 	ldrdeq	r0, [r0], -lr
    7784:	00004805 	andeq	r4, r0, r5, lsl #16
    7788:	007d0600 	rsbseq	r0, sp, r0, lsl #12
    778c:	10070000 	andne	r0, r7, r0
    7790:	c5016d02 	strgt	r6, [r1, #-3330]	; 0xfffff2fe
    7794:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7798:	000012f6 	strdeq	r1, [r0], -r6
    779c:	7d016f02 	stcvc	15, cr6, [r1, #-8]
    77a0:	00000000 	andeq	r0, r0, r0
    77a4:	0012fb08 	andseq	pc, r2, r8, lsl #22
    77a8:	01700200 	cmneq	r0, r0, lsl #4
    77ac:	0000007d 	andeq	r0, r0, sp, ror r0
    77b0:	41560904 	cmpmi	r6, r4, lsl #18
    77b4:	7102004c 	tstvc	r2, ip, asr #32
    77b8:	00007d01 	andeq	r7, r0, r1, lsl #26
    77bc:	da080800 	ble	2097c4 <__RW_SIZE__+0x209230>
    77c0:	02000012 	andeq	r0, r0, #18
    77c4:	00820172 	addeq	r0, r2, r2, ror r1
    77c8:	000c0000 	andeq	r0, ip, r0
    77cc:	0013000a 	andseq	r0, r3, sl
    77d0:	01730200 	cmneq	r3, r0, lsl #4
    77d4:	00000087 	andeq	r0, r0, r7, lsl #1
    77d8:	a0080102 	andge	r0, r8, r2, lsl #2
    77dc:	0b000000 	bleq	77e4 <__RW_SIZE__+0x7250>
    77e0:	00001312 	andeq	r1, r0, r2, lsl r3
    77e4:	91500301 	cmpls	r0, r1, lsl #6
    77e8:	00480800 	subeq	r0, r8, r0, lsl #16
    77ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    77f0:	000000fd 	strdeq	r0, [r0], -sp
    77f4:	00130d0c 	andseq	r0, r3, ip, lsl #26
    77f8:	6f030100 	svcvs	0x00030100
    77fc:	6f000000 	svcvs	0x00000000
    7800:	0000003a 	andeq	r0, r0, sl, lsr r0
    7804:	000b9f0d 	andeq	r9, fp, sp, lsl #30
    7808:	980b0100 	stmdals	fp, {r8}
    780c:	1c080091 	stcne	0, cr0, [r8], {145}	; 0x91
    7810:	01000000 	mrseq	r0, (UNDEF: 0)
    7814:	0001229c 	muleq	r1, ip, r2
    7818:	130d0c00 	movwne	r0, #56320	; 0xdc00
    781c:	0b010000 	bleq	47824 <__RW_SIZE__+0x47290>
    7820:	0000006f 	andeq	r0, r0, pc, rrx
    7824:	00003a90 	muleq	r0, r0, sl
    7828:	12c30e00 	sbcne	r0, r3, #0, 28
    782c:	12010000 	andne	r0, r1, #0
    7830:	080091b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, pc}
    7834:	0000000e 	andeq	r0, r0, lr
    7838:	220f9c01 	andcs	r9, pc, #256	; 0x100
    783c:	01000013 	tsteq	r0, r3, lsl r0
    7840:	00006f17 	andeq	r6, r0, r7, lsl pc
    7844:	0091c400 	addseq	ip, r1, r0, lsl #8
    7848:	00000c08 	andeq	r0, r0, r8, lsl #24
    784c:	0f9c0100 	svceq	0x009c0100
    7850:	00001333 	andeq	r1, r0, r3, lsr r3
    7854:	006f1c01 	rsbeq	r1, pc, r1, lsl #24
    7858:	91d00000 	bicsls	r0, r0, r0
    785c:	000c0800 	andeq	r0, ip, r0, lsl #16
    7860:	9c010000 	stcls	0, cr0, [r1], {-0}
    7864:	0012e00f 	andseq	lr, r2, pc
    7868:	68210100 	stmdavs	r1!, {r8}
    786c:	dc000000 	stcle	0, cr0, [r0], {-0}
    7870:	10080091 	mulne	r8, r1, r0
    7874:	01000000 	mrseq	r0, (UNDEF: 0)
    7878:	0082109c 	umulleq	r1, r2, ip, r0
    787c:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    7880:	00017e06 	andeq	r7, r1, r6, lsl #28
    7884:	00680500 	rsbeq	r0, r8, r0, lsl #10
    7888:	e4000000 	str	r0, [r0], #-0
    788c:	04000006 	streq	r0, [r0], #-6
    7890:	00131700 	andseq	r1, r3, r0, lsl #14
    7894:	08010400 	stmdaeq	r1, {sl}
    7898:	01000001 	tsteq	r0, r1
    789c:	0000134e 	andeq	r1, r0, lr, asr #6
    78a0:	00000013 	andeq	r0, r0, r3, lsl r0
    78a4:	080091f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip, pc}
    78a8:	000001aa 	andeq	r0, r0, sl, lsr #3
    78ac:	00002317 	andeq	r2, r0, r7, lsl r3
    78b0:	00042102 	andeq	r2, r4, r2, lsl #2
    78b4:	a8030100 	stmdage	r3, {r8}
    78b8:	00000164 	andeq	r0, r0, r4, ror #2
    78bc:	00064c03 	andeq	r4, r6, r3, lsl #24
    78c0:	49037200 	stmdbmi	r3, {r9, ip, sp, lr}
    78c4:	74000004 	strvc	r0, [r0], #-4
    78c8:	00058903 	andeq	r8, r5, r3, lsl #18
    78cc:	0c037500 	cfstr32eq	mvfx7, [r3], {-0}
    78d0:	76000007 	strvc	r0, [r0], -r7
    78d4:	00072903 	andeq	r2, r7, r3, lsl #18
    78d8:	fa037b00 	blx	e64e0 <__RW_SIZE__+0xe5f4c>
    78dc:	7c000006 	stcvc	0, cr0, [r0], {6}
    78e0:	00042603 	andeq	r2, r4, r3, lsl #12
    78e4:	bd037e00 	stclt	14, cr7, [r3, #-0]
    78e8:	7f000006 	svcvc	0x00000006
    78ec:	00057f03 	andeq	r7, r5, r3, lsl #30
    78f0:	a2030000 	andge	r0, r3, #0
    78f4:	01000005 	tsteq	r0, r5
    78f8:	0007ad03 	andeq	sl, r7, r3, lsl #26
    78fc:	f8030200 			; <UNDEFINED> instruction: 0xf8030200
    7900:	03000005 	movweq	r0, #5
    7904:	0003fc03 	andeq	pc, r3, r3, lsl #24
    7908:	40030400 	andmi	r0, r3, r0, lsl #8
    790c:	05000004 	streq	r0, [r0, #-4]
    7910:	00040c03 	andeq	r0, r4, r3, lsl #24
    7914:	72030600 	andvc	r0, r3, #0, 12
    7918:	07000006 	streq	r0, [r0, -r6]
    791c:	0004ef03 	andeq	lr, r4, r3, lsl #30
    7920:	6b030800 	blvs	c9928 <__RW_SIZE__+0xc9394>
    7924:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7928:	00059703 	andeq	r9, r5, r3, lsl #14
    792c:	56030a00 	strpl	r0, [r3], -r0, lsl #20
    7930:	0b000005 	bleq	794c <__RW_SIZE__+0x73b8>
    7934:	0003e903 	andeq	lr, r3, r3, lsl #18
    7938:	c6030c00 	strgt	r0, [r3], -r0, lsl #24
    793c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    7940:	00048503 	andeq	r8, r4, r3, lsl #10
    7944:	58030e00 	stmdapl	r3, {r9, sl, fp}
    7948:	0f000007 	svceq	0x00000007
    794c:	00052403 	andeq	r2, r5, r3, lsl #8
    7950:	bf031000 	svclt	0x00031000
    7954:	11000003 	tstne	r0, r3
    7958:	00077b03 	andeq	r7, r7, r3, lsl #22
    795c:	c5031200 	strgt	r1, [r3, #-512]	; 0xfffffe00
    7960:	13000004 	movwne	r0, #4
    7964:	00039703 	andeq	r9, r3, r3, lsl #14
    7968:	b7031400 	strlt	r1, [r3, -r0, lsl #8]
    796c:	15000004 	strne	r0, [r0, #-4]
    7970:	0003b103 	andeq	fp, r3, r3, lsl #2
    7974:	1c031600 	stcne	6, cr1, [r3], {-0}
    7978:	17000007 	strne	r0, [r0, -r7]
    797c:	00046403 	andeq	r6, r4, r3, lsl #8
    7980:	e6031800 	str	r1, [r3], -r0, lsl #16
    7984:	19000005 	stmdbne	r0, {r0, r2}
    7988:	00068703 	andeq	r8, r6, r3, lsl #14
    798c:	60031a00 	andvs	r1, r3, r0, lsl #20
    7990:	1b000006 	blne	79b0 <__RW_SIZE__+0x741c>
    7994:	0006d603 	andeq	sp, r6, r3, lsl #12
    7998:	4c031c00 	stcmi	12, cr1, [r3], {-0}
    799c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    79a0:	0003df03 	andeq	sp, r3, r3, lsl #30
    79a4:	d9031e00 	stmdble	r3, {r9, sl, fp, ip}
    79a8:	1f000005 	svcne	0x00000005
    79ac:	0006a603 	andeq	sl, r6, r3, lsl #12
    79b0:	0a032000 	beq	cf9b8 <__RW_SIZE__+0xcf424>
    79b4:	21000005 	tstcs	r0, r5
    79b8:	0003d203 	andeq	sp, r3, r3, lsl #4
    79bc:	7b032200 	blvc	d01c4 <__RW_SIZE__+0xcfc30>
    79c0:	23000004 	movwcs	r0, #4
    79c4:	00074903 	andeq	r4, r7, r3, lsl #18
    79c8:	40032400 	andmi	r2, r3, r0, lsl #8
    79cc:	25000006 	strcs	r0, [r0, #-6]
    79d0:	0004e303 	andeq	lr, r4, r3, lsl #6
    79d4:	87032600 	strhi	r2, [r3, -r0, lsl #12]
    79d8:	27000007 	strcs	r0, [r0, -r7]
    79dc:	00041703 	andeq	r1, r4, r3, lsl #14
    79e0:	be032800 	cdplt	8, 0, cr2, cr3, cr0, {0}
    79e4:	29000007 	stmdbcs	r0, {r0, r1, r2}
    79e8:	00057003 	andeq	r7, r5, r3
    79ec:	04002a00 	streq	r2, [r0], #-2560	; 0xfffff600
    79f0:	000004d9 	ldrdeq	r0, [r0], -r9
    79f4:	2501d903 	strcs	sp, [r1, #-2307]	; 0xfffff6fd
    79f8:	05000000 	streq	r0, [r0, #-0]
    79fc:	00990601 	addseq	r0, r9, r1, lsl #12
    7a00:	6b060000 	blvs	187a08 <__RW_SIZE__+0x187474>
    7a04:	04000002 	streq	r0, [r0], #-2
    7a08:	0001822a 	andeq	r8, r1, sl, lsr #4
    7a0c:	08010500 	stmdaeq	r1, {r8, sl}
    7a10:	00000097 	muleq	r0, r7, r0
    7a14:	f2050205 	vhsub.s8	d0, d5, d5
    7a18:	06000000 	streq	r0, [r0], -r0
    7a1c:	000002c8 	andeq	r0, r0, r8, asr #5
    7a20:	019b3604 	orrseq	r3, fp, r4, lsl #12
    7a24:	02050000 	andeq	r0, r5, #0
    7a28:	00006f07 	andeq	r6, r0, r7, lsl #30
    7a2c:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    7a30:	00000005 	andeq	r0, r0, r5
    7a34:	0001a706 	andeq	sl, r1, r6, lsl #14
    7a38:	b4500400 	ldrblt	r0, [r0], #-1024	; 0xfffffc00
    7a3c:	05000001 	streq	r0, [r0, #-1]
    7a40:	00cc0704 	sbceq	r0, ip, r4, lsl #14
    7a44:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    7a48:	00000005 	andeq	r0, r0, r5
    7a4c:	07080500 	streq	r0, [r8, -r0, lsl #10]
    7a50:	000000c7 	andeq	r0, r0, r7, asr #1
    7a54:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    7a58:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    7a5c:	00d10704 	sbcseq	r0, r1, r4, lsl #14
    7a60:	04080000 	streq	r0, [r8], #-0
    7a64:	8584020e 	strhi	r0, [r4, #526]	; 0x20e
    7a68:	09000002 	stmdbeq	r0, {r1}
    7a6c:	0000045f 	andeq	r0, r0, pc, asr r4
    7a70:	029c8602 	addseq	r8, ip, #2097152	; 0x200000
    7a74:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7a78:	00000601 	andeq	r0, r0, r1, lsl #12
    7a7c:	02a18702 	adceq	r8, r1, #524288	; 0x80000
    7a80:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    7a84:	00000744 	andeq	r0, r0, r4, asr #14
    7a88:	02b18802 	adcseq	r8, r1, #131072	; 0x20000
    7a8c:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    7a90:	00000472 	andeq	r0, r0, r2, ror r4
    7a94:	02a18902 	adceq	r8, r1, #32768	; 0x8000
    7a98:	0aa00000 	beq	fe807aa0 <MSP_BASE+0xde802aa0>
    7a9c:	00000776 	andeq	r0, r0, r6, ror r7
    7aa0:	02b68a02 	adcseq	r8, r6, #8192	; 0x2000
    7aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    7aa8:	00060b0a 	andeq	r0, r6, sl, lsl #22
    7aac:	a18b0200 	orrge	r0, fp, r0, lsl #4
    7ab0:	20000002 	andcs	r0, r0, r2
    7ab4:	05ab0a01 	streq	r0, [fp, #2561]!	; 0xa01
    7ab8:	8c020000 	stchi	0, cr0, [r2], {-0}
    7abc:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    7ac0:	150a0180 	strne	r0, [sl, #-384]	; 0xfffffe80
    7ac4:	02000006 	andeq	r0, r0, #6
    7ac8:	0002a18d 	andeq	sl, r2, sp, lsl #3
    7acc:	0a01a000 	beq	6fad4 <__RW_SIZE__+0x6f540>
    7ad0:	00000753 	andeq	r0, r0, r3, asr r7
    7ad4:	02c08e02 	sbceq	r8, r0, #2, 28
    7ad8:	02000000 	andeq	r0, r0, #0
    7adc:	00061f0a 	andeq	r1, r6, sl, lsl #30
    7ae0:	c58f0200 	strgt	r0, [pc, #512]	; 7ce8 <__RW_SIZE__+0x7754>
    7ae4:	20000002 	andcs	r0, r0, r2
    7ae8:	50490b02 	subpl	r0, r9, r2, lsl #22
    7aec:	e5900200 	ldr	r0, [r0, #512]	; 0x200
    7af0:	00000002 	andeq	r0, r0, r2
    7af4:	06290a03 	strteq	r0, [r9], -r3, lsl #20
    7af8:	91020000 	mrsls	r0, (UNDEF: 2)
    7afc:	000002ea 	andeq	r0, r0, sl, ror #5
    7b00:	f30a03f0 	vcge.u8	q0, q13, q8
    7b04:	02000005 	andeq	r0, r0, #5
    7b08:	0002fb92 	muleq	r2, r2, fp
    7b0c:	000e0000 	andeq	r0, lr, r0
    7b10:	0001a90c 	andeq	sl, r1, ip, lsl #18
    7b14:	00029500 	andeq	r9, r2, r0, lsl #10
    7b18:	02950d00 	addseq	r0, r5, #0, 26
    7b1c:	00070000 	andeq	r0, r7, r0
    7b20:	de070405 	cdple	4, 0, cr0, cr7, cr5, {0}
    7b24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7b28:	00000285 	andeq	r0, r0, r5, lsl #5
    7b2c:	0001a90c 	andeq	sl, r1, ip, lsl #18
    7b30:	0002b100 	andeq	fp, r2, r0, lsl #2
    7b34:	02950d00 	addseq	r0, r5, #0, 26
    7b38:	00170000 	andseq	r0, r7, r0
    7b3c:	0002850e 	andeq	r8, r2, lr, lsl #10
    7b40:	02850e00 	addeq	r0, r5, #0, 28
    7b44:	850e0000 	strhi	r0, [lr, #-0]
    7b48:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7b4c:	00000285 	andeq	r0, r0, r5, lsl #5
    7b50:	0001a90c 	andeq	sl, r1, ip, lsl #18
    7b54:	0002d500 	andeq	sp, r2, r0, lsl #10
    7b58:	02950d00 	addseq	r0, r5, #0, 26
    7b5c:	00370000 	eorseq	r0, r7, r0
    7b60:	0001770c 	andeq	r7, r1, ip, lsl #14
    7b64:	0002e500 	andeq	lr, r2, r0, lsl #10
    7b68:	02950d00 	addseq	r0, r5, #0, 26
    7b6c:	00ef0000 	rsceq	r0, pc, r0
    7b70:	0002d50e 	andeq	sp, r2, lr, lsl #10
    7b74:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    7b78:	02fb0000 	rscseq	r0, fp, #0
    7b7c:	950f0000 	strls	r0, [pc, #-0]	; 7b84 <__RW_SIZE__+0x75f0>
    7b80:	83000002 	movwhi	r0, #2
    7b84:	a90e0002 	stmdbge	lr, {r1}
    7b88:	06000001 	streq	r0, [r0], -r1
    7b8c:	0000067d 	andeq	r0, r0, sp, ror r6
    7b90:	01d79302 	bicseq	r9, r7, r2, lsl #6
    7b94:	900e0000 	andls	r0, lr, r0
    7b98:	10000001 	andne	r0, r0, r1
    7b9c:	04340328 	ldrteq	r0, [r4], #-808	; 0xfffffcd8
    7ba0:	0000039b 	muleq	r0, fp, r3
    7ba4:	00524311 	subseq	r4, r2, r1, lsl r3
    7ba8:	fb043603 	blx	1153be <__RW_SIZE__+0x114e2a>
    7bac:	00000002 	andeq	r0, r0, r2
    7bb0:	00084f12 	andeq	r4, r8, r2, lsl pc
    7bb4:	04370300 	ldrteq	r0, [r7], #-768	; 0xfffffd00
    7bb8:	000002fb 	strdeq	r0, [r0], -fp
    7bbc:	49431104 	stmdbmi	r3, {r2, r8, ip}^
    7bc0:	38030052 	stmdacc	r3, {r1, r4, r6}
    7bc4:	0002fb04 	andeq	pc, r2, r4, lsl #22
    7bc8:	be120800 	cdplt	8, 1, cr0, cr2, cr0, {0}
    7bcc:	03000000 	movweq	r0, #0
    7bd0:	02fb0439 	rscseq	r0, fp, #956301312	; 0x39000000
    7bd4:	120c0000 	andne	r0, ip, #0
    7bd8:	00000066 	andeq	r0, r0, r6, rrx
    7bdc:	fb043a03 	blx	1163f2 <__RW_SIZE__+0x115e5e>
    7be0:	10000002 	andne	r0, r0, r2
    7be4:	00005212 	andeq	r5, r0, r2, lsl r2
    7be8:	043b0300 	ldrteq	r0, [fp], #-768	; 0xfffffd00
    7bec:	000002fb 	strdeq	r0, [r0], -fp
    7bf0:	00ae1214 	adceq	r1, lr, r4, lsl r2
    7bf4:	3c030000 	stccc	0, cr0, [r3], {-0}
    7bf8:	0002fb04 	andeq	pc, r2, r4, lsl #22
    7bfc:	b6121800 	ldrlt	r1, [r2], -r0, lsl #16
    7c00:	03000000 	movweq	r0, #0
    7c04:	02fb043d 	rscseq	r0, fp, #1023410176	; 0x3d000000
    7c08:	121c0000 	andsne	r0, ip, #0
    7c0c:	0000000e 	andeq	r0, r0, lr
    7c10:	fb043e03 	blx	117426 <__RW_SIZE__+0x116e92>
    7c14:	20000002 	andcs	r0, r0, r2
    7c18:	52534311 	subspl	r4, r3, #1140850688	; 0x44000000
    7c1c:	043f0300 	ldrteq	r0, [pc], #-768	; 7c24 <__RW_SIZE__+0x7690>
    7c20:	000002fb 	strdeq	r0, [r0], -fp
    7c24:	fc040024 	stc2	0, cr0, [r4], {36}	; 0x24
    7c28:	03000000 	movweq	r0, #0
    7c2c:	0310044a 	tsteq	r0, #1241513984	; 0x4a000000
    7c30:	50100000 	andspl	r0, r0, r0
    7c34:	b804a203 	stmdalt	r4, {r0, r1, r9, sp, pc}
    7c38:	11000005 	tstne	r0, r5
    7c3c:	00315243 	eorseq	r5, r1, r3, asr #4
    7c40:	0b04a403 	bleq	130c54 <__RW_SIZE__+0x1306c0>
    7c44:	00000003 	andeq	r0, r0, r3
    7c48:	00060112 	andeq	r0, r6, r2, lsl r1
    7c4c:	04a50300 	strteq	r0, [r5], #768	; 0x300
    7c50:	00000190 	muleq	r0, r0, r1
    7c54:	52431102 	subpl	r1, r3, #-2147483648	; 0x80000000
    7c58:	a6030032 			; <UNDEFINED> instruction: 0xa6030032
    7c5c:	00030b04 	andeq	r0, r3, r4, lsl #22
    7c60:	5d120400 	cfldrspl	mvf0, [r2, #-0]
    7c64:	03000009 	movweq	r0, #9
    7c68:	019004a7 	orrseq	r0, r0, r7, lsr #9
    7c6c:	12060000 	andne	r0, r6, #0
    7c70:	00001153 	andeq	r1, r0, r3, asr r1
    7c74:	0b04a803 	bleq	131c88 <__RW_SIZE__+0x1316f4>
    7c78:	08000003 	stmdaeq	r0, {r0, r1}
    7c7c:	00060b12 	andeq	r0, r6, r2, lsl fp
    7c80:	04a90300 	strteq	r0, [r9], #768	; 0x300
    7c84:	00000190 	muleq	r0, r0, r1
    7c88:	0da4120a 	sfmeq	f1, 4, [r4, #40]!	; 0x28
    7c8c:	aa030000 	bge	c7c94 <__RW_SIZE__+0xc7700>
    7c90:	00030b04 	andeq	r0, r3, r4, lsl #22
    7c94:	15120c00 	ldrne	r0, [r2, #-3072]	; 0xfffff400
    7c98:	03000006 	movweq	r0, #6
    7c9c:	019004ab 	orrseq	r0, r0, fp, lsr #9
    7ca0:	110e0000 	mrsne	r0, (UNDEF: 14)
    7ca4:	03005253 	movweq	r5, #595	; 0x253
    7ca8:	030b04ac 	movweq	r0, #46252	; 0xb4ac
    7cac:	12100000 	andsne	r0, r0, #0
    7cb0:	0000061f 	andeq	r0, r0, pc, lsl r6
    7cb4:	9004ad03 	andls	sl, r4, r3, lsl #26
    7cb8:	12000001 	andne	r0, r0, #1
    7cbc:	52474511 	subpl	r4, r7, #71303168	; 0x4400000
    7cc0:	04ae0300 	strteq	r0, [lr], #768	; 0x300
    7cc4:	0000030b 	andeq	r0, r0, fp, lsl #6
    7cc8:	06291214 			; <UNDEFINED> instruction: 0x06291214
    7ccc:	af030000 	svcge	0x00030000
    7cd0:	00019004 	andeq	r9, r1, r4
    7cd4:	59121600 	ldmdbpl	r2, {r9, sl, ip}
    7cd8:	0300000e 	movweq	r0, #14
    7cdc:	030b04b0 	movweq	r0, #46256	; 0xb4b0
    7ce0:	12180000 	andsne	r0, r8, #0
    7ce4:	00000967 	andeq	r0, r0, r7, ror #18
    7ce8:	9004b103 	andls	fp, r4, r3, lsl #2
    7cec:	1a000001 	bne	7cf8 <__RW_SIZE__+0x7764>
    7cf0:	000e5f12 	andeq	r5, lr, r2, lsl pc
    7cf4:	04b20300 	ldrteq	r0, [r2], #768	; 0x300
    7cf8:	0000030b 	andeq	r0, r0, fp, lsl #6
    7cfc:	0971121c 	ldmdbeq	r1!, {r2, r3, r4, r9, ip}^
    7d00:	b3030000 	movwlt	r0, #12288	; 0x3000
    7d04:	00019004 	andeq	r9, r1, r4
    7d08:	18121e00 	ldmdane	r2, {r9, sl, fp, ip}
    7d0c:	0300000f 	movweq	r0, #15
    7d10:	030b04b4 	movweq	r0, #46260	; 0xb4b4
    7d14:	12200000 	eorne	r0, r0, #0
    7d18:	0000097b 	andeq	r0, r0, fp, ror r9
    7d1c:	9004b503 	andls	fp, r4, r3, lsl #10
    7d20:	22000001 	andcs	r0, r0, #1
    7d24:	544e4311 	strbpl	r4, [lr], #-785	; 0xfffffcef
    7d28:	04b60300 	ldrteq	r0, [r6], #768	; 0x300
    7d2c:	0000030b 	andeq	r0, r0, fp, lsl #6
    7d30:	10a91224 	adcne	r1, r9, r4, lsr #4
    7d34:	b7030000 	strlt	r0, [r3, -r0]
    7d38:	00019004 	andeq	r9, r1, r4
    7d3c:	50112600 	andspl	r2, r1, r0, lsl #12
    7d40:	03004353 	movweq	r4, #851	; 0x353
    7d44:	030b04b8 	movweq	r0, #46264	; 0xb4b8
    7d48:	12280000 	eorne	r0, r8, #0
    7d4c:	00000e95 	muleq	r0, r5, lr
    7d50:	9004b903 	andls	fp, r4, r3, lsl #18
    7d54:	2a000001 	bcs	7d60 <__RW_SIZE__+0x77cc>
    7d58:	52524111 	subspl	r4, r2, #1073741828	; 0x40000004
    7d5c:	04ba0300 	ldrteq	r0, [sl], #768	; 0x300
    7d60:	0000030b 	andeq	r0, r0, fp, lsl #6
    7d64:	0ea0122c 	cdpeq	2, 10, cr1, cr0, cr12, {1}
    7d68:	bb030000 	bllt	c7d70 <__RW_SIZE__+0xc77dc>
    7d6c:	00019004 	andeq	r9, r1, r4
    7d70:	52112e00 	andspl	r2, r1, #0, 28
    7d74:	03005243 	movweq	r5, #579	; 0x243
    7d78:	030b04bc 	movweq	r0, #46268	; 0xb4bc
    7d7c:	12300000 	eorsne	r0, r0, #0
    7d80:	00000eab 	andeq	r0, r0, fp, lsr #29
    7d84:	9004bd03 	andls	fp, r4, r3, lsl #26
    7d88:	32000001 	andcc	r0, r0, #1
    7d8c:	0011cb12 	andseq	ip, r1, r2, lsl fp
    7d90:	04be0300 	ldrteq	r0, [lr], #768	; 0x300
    7d94:	0000030b 	andeq	r0, r0, fp, lsl #6
    7d98:	0eb61234 	mrceq	2, 5, r1, cr6, cr4, {1}
    7d9c:	bf030000 	svclt	0x00030000
    7da0:	00019004 	andeq	r9, r1, r4
    7da4:	2e123600 	cfmsub32cs	mvax0, mvfx3, mvfx2, mvfx0
    7da8:	0300000e 	movweq	r0, #14
    7dac:	030b04c0 	movweq	r0, #46272	; 0xb4c0
    7db0:	12380000 	eorsne	r0, r8, #0
    7db4:	00000ec1 	andeq	r0, r0, r1, asr #29
    7db8:	9004c103 	andls	ip, r4, r3, lsl #2
    7dbc:	3a000001 	bcc	7dc8 <__RW_SIZE__+0x7834>
    7dc0:	0011d012 	andseq	sp, r1, r2, lsl r0
    7dc4:	04c20300 	strbeq	r0, [r2], #768	; 0x300
    7dc8:	0000030b 	andeq	r0, r0, fp, lsl #6
    7dcc:	0ecc123c 	mcreq	2, 6, r1, cr12, cr12, {1}
    7dd0:	c3030000 	movwgt	r0, #12288	; 0x3000
    7dd4:	00019004 	andeq	r9, r1, r4
    7dd8:	d5123e00 	ldrle	r3, [r2, #-3584]	; 0xfffff200
    7ddc:	03000011 	movweq	r0, #17
    7de0:	030b04c4 	movweq	r0, #46276	; 0xb4c4
    7de4:	12400000 	subne	r0, r0, #0
    7de8:	000011da 	ldrdeq	r1, [r0], -sl
    7dec:	9004c503 	andls	ip, r4, r3, lsl #10
    7df0:	42000001 	andmi	r0, r0, #1
    7df4:	000fa612 	andeq	sl, pc, r2, lsl r6	; <UNPREDICTABLE>
    7df8:	04c60300 	strbeq	r0, [r6], #768	; 0x300
    7dfc:	0000030b 	andeq	r0, r0, fp, lsl #6
    7e00:	0ee41244 	cdpeq	2, 14, cr1, cr4, cr4, {2}
    7e04:	c7030000 	strgt	r0, [r3, -r0]
    7e08:	00019004 	andeq	r9, r1, r4
    7e0c:	44114600 	ldrmi	r4, [r1], #-1536	; 0xfffffa00
    7e10:	03005243 	movweq	r5, #579	; 0x243
    7e14:	030b04c8 	movweq	r0, #46280	; 0xb4c8
    7e18:	12480000 	subne	r0, r8, #0
    7e1c:	00000eef 	andeq	r0, r0, pc, ror #29
    7e20:	9004c903 	andls	ip, r4, r3, lsl #18
    7e24:	4a000001 	bmi	7e30 <__RW_SIZE__+0x789c>
    7e28:	00118612 	andseq	r8, r1, r2, lsl r6
    7e2c:	04ca0300 	strbeq	r0, [sl], #768	; 0x300
    7e30:	0000030b 	andeq	r0, r0, fp, lsl #6
    7e34:	0efa124c 	cdpeq	2, 15, cr1, cr10, cr12, {2}
    7e38:	cb030000 	blgt	c7e40 <__RW_SIZE__+0xc78ac>
    7e3c:	00019004 	andeq	r9, r1, r4
    7e40:	04004e00 	streq	r4, [r0], #-3584	; 0xfffff200
    7e44:	00000e03 	andeq	r0, r0, r3, lsl #28
    7e48:	a704cc03 	strge	ip, [r4, -r3, lsl #24]
    7e4c:	05000003 	streq	r0, [r0, #-3]
    7e50:	00a00801 	adceq	r0, r0, r1, lsl #16
    7e54:	37130000 	ldrcc	r0, [r3, -r0]
    7e58:	02000005 	andeq	r0, r0, #5
    7e5c:	e5030613 	str	r0, [r3, #-1555]	; 0xfffff9ed
    7e60:	14000005 	strne	r0, [r0], #-5
    7e64:	00000421 	andeq	r0, r0, r1, lsr #8
    7e68:	64061302 	strvs	r1, [r6], #-770	; 0xfffffcfe
    7e6c:	00000001 	andeq	r0, r0, r1
    7e70:	00049813 	andeq	r9, r4, r3, lsl r8
    7e74:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    7e78:	0005ff03 	andeq	pc, r5, r3, lsl #30
    7e7c:	04211400 	strteq	r1, [r1], #-1024	; 0xfffffc00
    7e80:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    7e84:	00016405 	andeq	r6, r1, r5, lsl #8
    7e88:	15130000 	ldrne	r0, [r3, #-0]
    7e8c:	02000008 	andeq	r0, r0, #8
    7e90:	190305eb 	stmdbne	r3, {r0, r1, r3, r5, r6, r7, r8, sl}
    7e94:	14000006 	strne	r0, [r0], #-6
    7e98:	00000421 	andeq	r0, r0, r1, lsr #8
    7e9c:	6405eb02 	strvs	lr, [r5], #-2818	; 0xfffff4fe
    7ea0:	00000001 	andeq	r0, r0, r1
    7ea4:	00135615 	andseq	r5, r3, r5, lsl r6
    7ea8:	f0080100 			; <UNDEFINED> instruction: 0xf0080100
    7eac:	f4080091 	vst4.32	{d0-d3}, [r8 :64], r1
    7eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    7eb4:	0006569c 	muleq	r6, ip, r6
    7eb8:	13491600 	movtne	r1, #38400	; 0x9600
    7ebc:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7ec0:	000001c9 	andeq	r0, r0, r9, asr #3
    7ec4:	00003ab1 			; <UNDEFINED> instruction: 0x00003ab1
    7ec8:	01006917 	tsteq	r0, r7, lsl r9
    7ecc:	0001c90a 	andeq	ip, r1, sl, lsl #18
    7ed0:	003ad200 	eorseq	sp, sl, r0, lsl #4
    7ed4:	00741800 	rsbseq	r1, r4, r0, lsl #16
    7ed8:	01d00b01 	bicseq	r0, r0, r1, lsl #22
    7edc:	50010000 	andpl	r0, r1, r0
    7ee0:	0c141500 	cfldr32eq	mvfx1, [r4], {-0}
    7ee4:	2d010000 	stccs	0, cr0, [r1, #-0]
    7ee8:	080092e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, pc}
    7eec:	000000b6 	strheq	r0, [r0], -r6
    7ef0:	06d69c01 	ldrbeq	r9, [r6], r1, lsl #24
    7ef4:	65190000 	ldrvs	r0, [r9, #-0]
    7ef8:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    7efc:	000001c9 	andeq	r0, r0, r9, asr #3
    7f00:	00003af1 	strdeq	r3, [r0], -r1
    7f04:	00134916 	andseq	r4, r3, r6, lsl r9
    7f08:	c92d0100 	stmfdgt	sp!, {r8}
    7f0c:	12000001 	andne	r0, r0, #1
    7f10:	1a00003b 	bne	8004 <__RW_SIZE__+0x7a70>
    7f14:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7f18:	080092e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, pc}
    7f1c:	000027a0 	andeq	r2, r0, r0, lsr #15
    7f20:	06a54101 	strteq	r4, [r5], r1, lsl #2
    7f24:	0c1b0000 	ldceq	0, cr0, [fp], {-0}
    7f28:	4c000006 	stcmi	0, cr0, [r0], {6}
    7f2c:	0000003b 	andeq	r0, r0, fp, lsr r0
    7f30:	0005cb1a 	andeq	ip, r5, sl, lsl fp
    7f34:	00935e00 	addseq	r5, r3, r0, lsl #28
    7f38:	0027b808 	eoreq	fp, r7, r8, lsl #16
    7f3c:	bf390100 	svclt	0x00390100
    7f40:	1c000006 	stcne	0, cr0, [r0], {6}
    7f44:	000005d8 	ldrdeq	r0, [r0], -r8
    7f48:	e51d001e 	ldr	r0, [sp, #-30]	; 0xffffffe2
    7f4c:	8a000005 	bhi	7f68 <__RW_SIZE__+0x79d4>
    7f50:	02080093 	andeq	r0, r8, #147	; 0x93
    7f54:	01000000 	mrseq	r0, (UNDEF: 0)
    7f58:	05f21c3b 	ldrbeq	r1, [r2, #3131]!	; 0xc3b
    7f5c:	001e0000 	andseq	r0, lr, r0
    7f60:	00821e00 	addeq	r1, r2, r0, lsl #28
    7f64:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    7f68:	0006e206 	andeq	lr, r6, r6, lsl #4
    7f6c:	01c90e00 	biceq	r0, r9, r0, lsl #28
    7f70:	ab000000 	blge	7f78 <__RW_SIZE__+0x79e4>
    7f74:	04000009 	streq	r0, [r0], #-9
    7f78:	0014b100 	andseq	fp, r4, r0, lsl #2
    7f7c:	08010400 	stmdaeq	r1, {sl}
    7f80:	01000001 	tsteq	r0, r1
    7f84:	00001381 	andeq	r1, r0, r1, lsl #7
    7f88:	00000013 	andeq	r0, r0, r3, lsl r0
    7f8c:	080093a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, pc}
    7f90:	00000362 	andeq	r0, r0, r2, ror #6
    7f94:	00002455 	andeq	r2, r0, r5, asr r4
    7f98:	00042102 	andeq	r2, r4, r2, lsl #2
    7f9c:	a8030100 	stmdage	r3, {r8}
    7fa0:	00000164 	andeq	r0, r0, r4, ror #2
    7fa4:	00064c03 	andeq	r4, r6, r3, lsl #24
    7fa8:	49037200 	stmdbmi	r3, {r9, ip, sp, lr}
    7fac:	74000004 	strvc	r0, [r0], #-4
    7fb0:	00058903 	andeq	r8, r5, r3, lsl #18
    7fb4:	0c037500 	cfstr32eq	mvfx7, [r3], {-0}
    7fb8:	76000007 	strvc	r0, [r0], -r7
    7fbc:	00072903 	andeq	r2, r7, r3, lsl #18
    7fc0:	fa037b00 	blx	e6bc8 <__RW_SIZE__+0xe6634>
    7fc4:	7c000006 	stcvc	0, cr0, [r0], {6}
    7fc8:	00042603 	andeq	r2, r4, r3, lsl #12
    7fcc:	bd037e00 	stclt	14, cr7, [r3, #-0]
    7fd0:	7f000006 	svcvc	0x00000006
    7fd4:	00057f03 	andeq	r7, r5, r3, lsl #30
    7fd8:	a2030000 	andge	r0, r3, #0
    7fdc:	01000005 	tsteq	r0, r5
    7fe0:	0007ad03 	andeq	sl, r7, r3, lsl #26
    7fe4:	f8030200 			; <UNDEFINED> instruction: 0xf8030200
    7fe8:	03000005 	movweq	r0, #5
    7fec:	0003fc03 	andeq	pc, r3, r3, lsl #24
    7ff0:	40030400 	andmi	r0, r3, r0, lsl #8
    7ff4:	05000004 	streq	r0, [r0, #-4]
    7ff8:	00040c03 	andeq	r0, r4, r3, lsl #24
    7ffc:	72030600 	andvc	r0, r3, #0, 12
    8000:	07000006 	streq	r0, [r0, -r6]
    8004:	0004ef03 	andeq	lr, r4, r3, lsl #30
    8008:	6b030800 	blvs	ca010 <__RW_SIZE__+0xc9a7c>
    800c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8010:	00059703 	andeq	r9, r5, r3, lsl #14
    8014:	56030a00 	strpl	r0, [r3], -r0, lsl #20
    8018:	0b000005 	bleq	8034 <__RW_SIZE__+0x7aa0>
    801c:	0003e903 	andeq	lr, r3, r3, lsl #18
    8020:	c6030c00 	strgt	r0, [r3], -r0, lsl #24
    8024:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    8028:	00048503 	andeq	r8, r4, r3, lsl #10
    802c:	58030e00 	stmdapl	r3, {r9, sl, fp}
    8030:	0f000007 	svceq	0x00000007
    8034:	00052403 	andeq	r2, r5, r3, lsl #8
    8038:	bf031000 	svclt	0x00031000
    803c:	11000003 	tstne	r0, r3
    8040:	00077b03 	andeq	r7, r7, r3, lsl #22
    8044:	c5031200 	strgt	r1, [r3, #-512]	; 0xfffffe00
    8048:	13000004 	movwne	r0, #4
    804c:	00039703 	andeq	r9, r3, r3, lsl #14
    8050:	b7031400 	strlt	r1, [r3, -r0, lsl #8]
    8054:	15000004 	strne	r0, [r0, #-4]
    8058:	0003b103 	andeq	fp, r3, r3, lsl #2
    805c:	1c031600 	stcne	6, cr1, [r3], {-0}
    8060:	17000007 	strne	r0, [r0, -r7]
    8064:	00046403 	andeq	r6, r4, r3, lsl #8
    8068:	e6031800 	str	r1, [r3], -r0, lsl #16
    806c:	19000005 	stmdbne	r0, {r0, r2}
    8070:	00068703 	andeq	r8, r6, r3, lsl #14
    8074:	60031a00 	andvs	r1, r3, r0, lsl #20
    8078:	1b000006 	blne	8098 <__RW_SIZE__+0x7b04>
    807c:	0006d603 	andeq	sp, r6, r3, lsl #12
    8080:	4c031c00 	stcmi	12, cr1, [r3], {-0}
    8084:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    8088:	0003df03 	andeq	sp, r3, r3, lsl #30
    808c:	d9031e00 	stmdble	r3, {r9, sl, fp, ip}
    8090:	1f000005 	svcne	0x00000005
    8094:	0006a603 	andeq	sl, r6, r3, lsl #12
    8098:	0a032000 	beq	d00a0 <__RW_SIZE__+0xcfb0c>
    809c:	21000005 	tstcs	r0, r5
    80a0:	0003d203 	andeq	sp, r3, r3, lsl #4
    80a4:	7b032200 	blvc	d08ac <__RW_SIZE__+0xd0318>
    80a8:	23000004 	movwcs	r0, #4
    80ac:	00074903 	andeq	r4, r7, r3, lsl #18
    80b0:	40032400 	andmi	r2, r3, r0, lsl #8
    80b4:	25000006 	strcs	r0, [r0, #-6]
    80b8:	0004e303 	andeq	lr, r4, r3, lsl #6
    80bc:	87032600 	strhi	r2, [r3, -r0, lsl #12]
    80c0:	27000007 	strcs	r0, [r0, -r7]
    80c4:	00041703 	andeq	r1, r4, r3, lsl #14
    80c8:	be032800 	cdplt	8, 0, cr2, cr3, cr0, {0}
    80cc:	29000007 	stmdbcs	r0, {r0, r1, r2}
    80d0:	00057003 	andeq	r7, r5, r3
    80d4:	04002a00 	streq	r2, [r0], #-2560	; 0xfffff600
    80d8:	000004d9 	ldrdeq	r0, [r0], -r9
    80dc:	2501d903 	strcs	sp, [r1, #-2307]	; 0xfffff6fd
    80e0:	05000000 	streq	r0, [r0, #-0]
    80e4:	00990601 	addseq	r0, r9, r1, lsl #12
    80e8:	6b060000 	blvs	1880f0 <__RW_SIZE__+0x187b5c>
    80ec:	04000002 	streq	r0, [r0], #-2
    80f0:	0001822a 	andeq	r8, r1, sl, lsr #4
    80f4:	08010500 	stmdaeq	r1, {r8, sl}
    80f8:	00000097 	muleq	r0, r7, r0
    80fc:	f2050205 	vhsub.s8	d0, d5, d5
    8100:	06000000 	streq	r0, [r0], -r0
    8104:	000002c8 	andeq	r0, r0, r8, asr #5
    8108:	019b3604 	orrseq	r3, fp, r4, lsl #12
    810c:	02050000 	andeq	r0, r5, #0
    8110:	00006f07 	andeq	r6, r0, r7, lsl #30
    8114:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    8118:	00000005 	andeq	r0, r0, r5
    811c:	0001a706 	andeq	sl, r1, r6, lsl #14
    8120:	b4500400 	ldrblt	r0, [r0], #-1024	; 0xfffffc00
    8124:	05000001 	streq	r0, [r0, #-1]
    8128:	00cc0704 	sbceq	r0, ip, r4, lsl #14
    812c:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    8130:	00000005 	andeq	r0, r0, r5
    8134:	07080500 	streq	r0, [r8, -r0, lsl #10]
    8138:	000000c7 	andeq	r0, r0, r7, asr #1
    813c:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    8140:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    8144:	00d10704 	sbcseq	r0, r1, r4, lsl #14
    8148:	04080000 	streq	r0, [r8], #-0
    814c:	8584020e 	strhi	r0, [r4, #526]	; 0x20e
    8150:	09000002 	stmdbeq	r0, {r1}
    8154:	0000045f 	andeq	r0, r0, pc, asr r4
    8158:	029c8602 	addseq	r8, ip, #2097152	; 0x200000
    815c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8160:	00000601 	andeq	r0, r0, r1, lsl #12
    8164:	02a18702 	adceq	r8, r1, #524288	; 0x80000
    8168:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    816c:	00000744 	andeq	r0, r0, r4, asr #14
    8170:	02b18802 	adcseq	r8, r1, #131072	; 0x20000
    8174:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    8178:	00000472 	andeq	r0, r0, r2, ror r4
    817c:	02a18902 	adceq	r8, r1, #32768	; 0x8000
    8180:	0aa00000 	beq	fe808188 <MSP_BASE+0xde803188>
    8184:	00000776 	andeq	r0, r0, r6, ror r7
    8188:	02b68a02 	adcseq	r8, r6, #8192	; 0x2000
    818c:	01000000 	mrseq	r0, (UNDEF: 0)
    8190:	00060b0a 	andeq	r0, r6, sl, lsl #22
    8194:	a18b0200 	orrge	r0, fp, r0, lsl #4
    8198:	20000002 	andcs	r0, r0, r2
    819c:	05ab0a01 	streq	r0, [fp, #2561]!	; 0xa01
    81a0:	8c020000 	stchi	0, cr0, [r2], {-0}
    81a4:	000002bb 			; <UNDEFINED> instruction: 0x000002bb
    81a8:	150a0180 	strne	r0, [sl, #-384]	; 0xfffffe80
    81ac:	02000006 	andeq	r0, r0, #6
    81b0:	0002a18d 	andeq	sl, r2, sp, lsl #3
    81b4:	0a01a000 	beq	701bc <__RW_SIZE__+0x6fc28>
    81b8:	00000753 	andeq	r0, r0, r3, asr r7
    81bc:	02c08e02 	sbceq	r8, r0, #2, 28
    81c0:	02000000 	andeq	r0, r0, #0
    81c4:	00061f0a 	andeq	r1, r6, sl, lsl #30
    81c8:	c58f0200 	strgt	r0, [pc, #512]	; 83d0 <__RW_SIZE__+0x7e3c>
    81cc:	20000002 	andcs	r0, r0, r2
    81d0:	50490b02 	subpl	r0, r9, r2, lsl #22
    81d4:	e5900200 	ldr	r0, [r0, #512]	; 0x200
    81d8:	00000002 	andeq	r0, r0, r2
    81dc:	06290a03 	strteq	r0, [r9], -r3, lsl #20
    81e0:	91020000 	mrsls	r0, (UNDEF: 2)
    81e4:	000002ea 	andeq	r0, r0, sl, ror #5
    81e8:	f30a03f0 	vcge.u8	q0, q13, q8
    81ec:	02000005 	andeq	r0, r0, #5
    81f0:	0002fb92 	muleq	r2, r2, fp
    81f4:	000e0000 	andeq	r0, lr, r0
    81f8:	0001a90c 	andeq	sl, r1, ip, lsl #18
    81fc:	00029500 	andeq	r9, r2, r0, lsl #10
    8200:	02950d00 	addseq	r0, r5, #0, 26
    8204:	00070000 	andeq	r0, r7, r0
    8208:	de070405 	cdple	4, 0, cr0, cr7, cr5, {0}
    820c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8210:	00000285 	andeq	r0, r0, r5, lsl #5
    8214:	0001a90c 	andeq	sl, r1, ip, lsl #18
    8218:	0002b100 	andeq	fp, r2, r0, lsl #2
    821c:	02950d00 	addseq	r0, r5, #0, 26
    8220:	00170000 	andseq	r0, r7, r0
    8224:	0002850e 	andeq	r8, r2, lr, lsl #10
    8228:	02850e00 	addeq	r0, r5, #0, 28
    822c:	850e0000 	strhi	r0, [lr, #-0]
    8230:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    8234:	00000285 	andeq	r0, r0, r5, lsl #5
    8238:	0001a90c 	andeq	sl, r1, ip, lsl #18
    823c:	0002d500 	andeq	sp, r2, r0, lsl #10
    8240:	02950d00 	addseq	r0, r5, #0, 26
    8244:	00370000 	eorseq	r0, r7, r0
    8248:	0001770c 	andeq	r7, r1, ip, lsl #14
    824c:	0002e500 	andeq	lr, r2, r0, lsl #10
    8250:	02950d00 	addseq	r0, r5, #0, 26
    8254:	00ef0000 	rsceq	r0, pc, r0
    8258:	0002d50e 	andeq	sp, r2, lr, lsl #10
    825c:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    8260:	02fb0000 	rscseq	r0, fp, #0
    8264:	950f0000 	strls	r0, [pc, #-0]	; 826c <__RW_SIZE__+0x7cd8>
    8268:	83000002 	movwhi	r0, #2
    826c:	a90e0002 	stmdbge	lr, {r1}
    8270:	06000001 	streq	r0, [r0], -r1
    8274:	0000067d 	andeq	r0, r0, sp, ror r6
    8278:	01d79302 	bicseq	r9, r7, r2, lsl #6
    827c:	900e0000 	andls	r0, lr, r0
    8280:	10000001 	andne	r0, r0, r1
    8284:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    8288:	00000375 	andeq	r0, r0, r5, ror r3
    828c:	4c524311 	mrrcmi	3, 1, r4, r2, cr1
    8290:	03eb0300 	mvneq	r0, #0, 6
    8294:	000002fb 	strdeq	r0, [r0], -fp
    8298:	52431100 	subpl	r1, r3, #0, 2
    829c:	ec030048 	stc	0, cr0, [r3], {72}	; 0x48
    82a0:	0002fb03 	andeq	pc, r2, r3, lsl #22
    82a4:	49110400 	ldmdbmi	r1, {sl}
    82a8:	03005244 	movweq	r5, #580	; 0x244
    82ac:	02fb03ed 	rscseq	r0, fp, #-1275068413	; 0xb4000003
    82b0:	11080000 	mrsne	r0, (UNDEF: 8)
    82b4:	0052444f 	subseq	r4, r2, pc, asr #8
    82b8:	fb03ee03 	blx	103ace <__RW_SIZE__+0x10353a>
    82bc:	0c000002 	stceq	0, cr0, [r0], {2}
    82c0:	0003ac12 	andeq	sl, r3, r2, lsl ip
    82c4:	03ef0300 	mvneq	r0, #0, 6
    82c8:	000002fb 	strdeq	r0, [r0], -fp
    82cc:	52421110 	subpl	r1, r2, #16, 2
    82d0:	f0030052 			; <UNDEFINED> instruction: 0xf0030052
    82d4:	0002fb03 	andeq	pc, r2, r3, lsl #22
    82d8:	b9121400 	ldmdblt	r2, {sl, ip}
    82dc:	03000007 	movweq	r0, #7
    82e0:	02fb03f1 	rscseq	r0, fp, #-1006632957	; 0xc4000003
    82e4:	00180000 	andseq	r0, r8, r0
    82e8:	00069904 	andeq	r9, r6, r4, lsl #18
    82ec:	03f20300 	mvnseq	r0, #0, 6
    82f0:	00000310 	andeq	r0, r0, r0, lsl r3
    82f4:	34032810 	strcc	r2, [r3], #-2064	; 0xfffff7f0
    82f8:	00040c04 	andeq	r0, r4, r4, lsl #24
    82fc:	52431100 	subpl	r1, r3, #0, 2
    8300:	04360300 	ldrteq	r0, [r6], #-768	; 0xfffffd00
    8304:	000002fb 	strdeq	r0, [r0], -fp
    8308:	084f1200 	stmdaeq	pc, {r9, ip}^	; <UNPREDICTABLE>
    830c:	37030000 	strcc	r0, [r3, -r0]
    8310:	0002fb04 	andeq	pc, r2, r4, lsl #22
    8314:	43110400 	tstmi	r1, #0, 8
    8318:	03005249 	movweq	r5, #585	; 0x249
    831c:	02fb0438 	rscseq	r0, fp, #56, 8	; 0x38000000
    8320:	12080000 	andne	r0, r8, #0
    8324:	000000be 	strheq	r0, [r0], -lr
    8328:	fb043903 	blx	11673e <__RW_SIZE__+0x1161aa>
    832c:	0c000002 	stceq	0, cr0, [r0], {2}
    8330:	00006612 	andeq	r6, r0, r2, lsl r6
    8334:	043a0300 	ldrteq	r0, [sl], #-768	; 0xfffffd00
    8338:	000002fb 	strdeq	r0, [r0], -fp
    833c:	00521210 	subseq	r1, r2, r0, lsl r2
    8340:	3b030000 	blcc	c8348 <__RW_SIZE__+0xc7db4>
    8344:	0002fb04 	andeq	pc, r2, r4, lsl #22
    8348:	ae121400 	cfmulsge	mvf1, mvf2, mvf0
    834c:	03000000 	movweq	r0, #0
    8350:	02fb043c 	rscseq	r0, fp, #60, 8	; 0x3c000000
    8354:	12180000 	andsne	r0, r8, #0
    8358:	000000b6 	strheq	r0, [r0], -r6
    835c:	fb043d03 	blx	117772 <__RW_SIZE__+0x1171de>
    8360:	1c000002 	stcne	0, cr0, [r0], {2}
    8364:	00000e12 	andeq	r0, r0, r2, lsl lr
    8368:	043e0300 	ldrteq	r0, [lr], #-768	; 0xfffffd00
    836c:	000002fb 	strdeq	r0, [r0], -fp
    8370:	53431120 	movtpl	r1, #12576	; 0x3120
    8374:	3f030052 	svccc	0x00030052
    8378:	0002fb04 	andeq	pc, r2, r4, lsl #22
    837c:	04002400 	streq	r2, [r0], #-1024	; 0xfffffc00
    8380:	000000fc 	strdeq	r0, [r0], -ip
    8384:	81044a03 	tsthi	r4, r3, lsl #20
    8388:	10000003 	andne	r0, r0, r3
    838c:	04d2031c 	ldrbeq	r0, [r2], #796	; 0x31c
    8390:	000004d6 	ldrdeq	r0, [r0], -r6
    8394:	00525311 	subseq	r5, r2, r1, lsl r3
    8398:	0b04d403 	bleq	13d3ac <__RW_SIZE__+0x13ce18>
    839c:	00000003 	andeq	r0, r0, r3
    83a0:	00060112 	andeq	r0, r6, r2, lsl r1
    83a4:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    83a8:	00000190 	muleq	r0, r0, r1
    83ac:	52441102 	subpl	r1, r4, #-2147483648	; 0x80000000
    83b0:	04d60300 	ldrbeq	r0, [r6], #768	; 0x300
    83b4:	0000030b 	andeq	r0, r0, fp, lsl #6
    83b8:	095d1204 	ldmdbeq	sp, {r2, r9, ip}^
    83bc:	d7030000 	strle	r0, [r3, -r0]
    83c0:	00019004 	andeq	r9, r1, r4
    83c4:	42110600 	andsmi	r0, r1, #0, 12
    83c8:	03005252 	movweq	r5, #594	; 0x252
    83cc:	030b04d8 	movweq	r0, #46296	; 0xb4d8
    83d0:	12080000 	andne	r0, r8, #0
    83d4:	0000060b 	andeq	r0, r0, fp, lsl #12
    83d8:	9004d903 	andls	sp, r4, r3, lsl #18
    83dc:	0a000001 	beq	83e8 <__RW_SIZE__+0x7e54>
    83e0:	31524311 	cmpcc	r2, r1, lsl r3
    83e4:	04da0300 	ldrbeq	r0, [sl], #768	; 0x300
    83e8:	0000030b 	andeq	r0, r0, fp, lsl #6
    83ec:	0615120c 	ldreq	r1, [r5], -ip, lsl #4
    83f0:	db030000 	blle	c83f8 <__RW_SIZE__+0xc7e64>
    83f4:	00019004 	andeq	r9, r1, r4
    83f8:	43110e00 	tstmi	r1, #0, 28
    83fc:	03003252 	movweq	r3, #594	; 0x252
    8400:	030b04dc 	movweq	r0, #46300	; 0xb4dc
    8404:	12100000 	andsne	r0, r0, #0
    8408:	0000061f 	andeq	r0, r0, pc, lsl r6
    840c:	9004dd03 	andls	sp, r4, r3, lsl #26
    8410:	12000001 	andne	r0, r0, #1
    8414:	33524311 	cmpcc	r2, #1140850688	; 0x44000000
    8418:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    841c:	0000030b 	andeq	r0, r0, fp, lsl #6
    8420:	06291214 			; <UNDEFINED> instruction: 0x06291214
    8424:	df030000 	svcle	0x00030000
    8428:	00019004 	andeq	r9, r1, r4
    842c:	7c121600 	ldcvc	6, cr1, [r2], {-0}
    8430:	03000013 	movweq	r0, #19
    8434:	030b04e0 	movweq	r0, #46304	; 0xb4e0
    8438:	12180000 	andsne	r0, r8, #0
    843c:	00000967 	andeq	r0, r0, r7, ror #18
    8440:	9004e103 	andls	lr, r4, r3, lsl #2
    8444:	1a000001 	bne	8450 <__RW_SIZE__+0x7ebc>
    8448:	13b00400 	movsne	r0, #0, 8
    844c:	e2030000 	and	r0, r3, #0
    8450:	00041804 	andeq	r1, r4, r4, lsl #16
    8454:	14041300 	strne	r1, [r4], #-768	; 0xfffffd00
    8458:	0004ea04 	andeq	lr, r4, r4, lsl #20
    845c:	08010500 	stmdaeq	r1, {r8, sl}
    8460:	000000a0 	andeq	r0, r0, r0, lsr #1
    8464:	04f70414 	ldrbteq	r0, [r7], #1044	; 0x414
    8468:	ea150000 	b	548470 <__RW_SIZE__+0x547edc>
    846c:	06000004 	streq	r0, [r0], -r4
    8470:	00001361 	andeq	r1, r0, r1, ror #6
    8474:	01d0d405 	bicseq	sp, r0, r5, lsl #8
    8478:	37060000 	strcc	r0, [r6, -r0]
    847c:	06000003 	streq	r0, [r0], -r3
    8480:	00051228 	andeq	r1, r5, r8, lsr #4
    8484:	03461600 	movteq	r1, #26112	; 0x6600
    8488:	0b040000 	bleq	108490 <__RW_SIZE__+0x107efc>
    848c:	00052900 	andeq	r2, r5, r0, lsl #18
    8490:	036c1700 	cmneq	ip, #0, 14
    8494:	04e20000 	strbteq	r0, [r2], #0
    8498:	00000000 	andeq	r0, r0, r0
    849c:	00034806 	andeq	r4, r3, r6, lsl #16
    84a0:	07620600 	strbeq	r0, [r2, -r0, lsl #12]!
    84a4:	18000005 	stmdane	r0, {r0, r2}
    84a8:	000013f3 	strdeq	r1, [r0], -r3
    84ac:	4b012b01 	blmi	530b8 <__RW_SIZE__+0x52b24>
    84b0:	19000005 	stmdbne	r0, {r0, r2}
    84b4:	01007470 	tsteq	r0, r0, ror r4
    84b8:	0004e42b 	andeq	lr, r4, fp, lsr #8
    84bc:	b31a0000 	tstlt	sl, #0
    84c0:	01000010 	tsteq	r0, r0, lsl r0
    84c4:	0004ea3e 	andeq	lr, r4, lr, lsr sl
    84c8:	e41b0100 	ldr	r0, [fp], #-256	; 0xffffff00
    84cc:	01000013 	tsteq	r0, r3, lsl r0
    84d0:	0004ea4a 	andeq	lr, r4, sl, asr #20
    84d4:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
    84d8:	721c0000 	andsvc	r0, ip, #0
    84dc:	4c010078 	stcmi	0, cr0, [r1], {120}	; 0x78
    84e0:	000004ea 	andeq	r0, r0, sl, ror #9
    84e4:	05371d00 	ldreq	r1, [r7, #-3328]!	; 0xfffff300
    84e8:	13020000 	movwne	r0, #8192	; 0x2000
    84ec:	058c0306 	streq	r0, [ip, #774]	; 0x306
    84f0:	211e0000 	tstcs	lr, r0
    84f4:	02000004 	andeq	r0, r0, #4
    84f8:	01640613 	cmneq	r4, r3, lsl r6
    84fc:	1d000000 	stcne	0, cr0, [r0, #-0]
    8500:	00000498 	muleq	r0, r8, r4
    8504:	0305de02 	movweq	sp, #24066	; 0x5e02
    8508:	000005a6 	andeq	r0, r0, r6, lsr #11
    850c:	0004211e 	andeq	r2, r4, lr, lsl r1
    8510:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    8514:	00000164 	andeq	r0, r0, r4, ror #2
    8518:	08151d00 	ldmdaeq	r5, {r8, sl, fp, ip}
    851c:	eb020000 	bl	88524 <__RW_SIZE__+0x87f90>
    8520:	05c00305 	strbeq	r0, [r0, #773]	; 0x305
    8524:	211e0000 	tstcs	lr, r0
    8528:	02000004 	andeq	r0, r0, #4
    852c:	016405eb 	smultteq	r4, fp, r5
    8530:	1f000000 	svcne	0x00000000
    8534:	00000a63 	andeq	r0, r0, r3, ror #20
    8538:	93a00801 	movls	r0, #65536	; 0x10000
    853c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    8540:	9c010000 	stcls	0, cr0, [r1], {-0}
    8544:	00000612 	andeq	r0, r0, r2, lsl r6
    8548:	00141e20 	andseq	r1, r4, r0, lsr #28
    854c:	c9080100 	stmdbgt	r8, {r8}
    8550:	60000001 	andvs	r0, r0, r1
    8554:	2100003b 	tstcs	r0, fp, lsr r0
    8558:	00766964 	rsbseq	r6, r6, r4, ror #18
    855c:	06120a01 	ldreq	r0, [r2], -r1, lsl #20
    8560:	3b810000 	blcc	fe048568 <MSP_BASE+0xde043568>
    8564:	0f220000 	svceq	0x00220000
    8568:	01000014 	tsteq	r0, r4, lsl r0
    856c:	0001d00b 	andeq	sp, r1, fp
    8570:	003b9900 	eorseq	r9, fp, r0, lsl #18
    8574:	14052200 	strne	r2, [r5], #-512	; 0xfffffe00
    8578:	0c010000 	stceq	0, cr0, [r1], {-0}
    857c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    8580:	00003bd4 	ldrdeq	r3, [r0], -r4
    8584:	04080500 	streq	r0, [r8], #-1280	; 0xfffffb00
    8588:	00001388 	andeq	r1, r0, r8, lsl #7
    858c:	0013be18 	andseq	fp, r3, r8, lsl lr
    8590:	011f0100 	tsteq	pc, r0, lsl #2
    8594:	00000631 	andeq	r0, r0, r1, lsr r6
    8598:	000dd523 	andeq	sp, sp, r3, lsr #10
    859c:	ea1f0100 	b	7c89a4 <__RW_SIZE__+0x7c8410>
    85a0:	00000004 	andeq	r0, r0, r4
    85a4:	00061924 	andeq	r1, r6, r4, lsr #18
    85a8:	00945800 	addseq	r5, r4, r0, lsl #16
    85ac:	00003a08 	andeq	r3, r0, r8, lsl #20
    85b0:	4c9c0100 	ldfmis	f0, [ip], {0}
    85b4:	25000006 	strcs	r0, [r0, #-6]
    85b8:	00000625 	andeq	r0, r0, r5, lsr #12
    85bc:	24005001 	strcs	r5, [r0], #-1
    85c0:	00000534 	andeq	r0, r0, r4, lsr r5
    85c4:	08009494 	stmdaeq	r0, {r2, r4, r7, sl, ip, pc}
    85c8:	00000042 	andeq	r0, r0, r2, asr #32
    85cc:	06829c01 	streq	r9, [r2], r1, lsl #24
    85d0:	40260000 	eormi	r0, r6, r0
    85d4:	f6000005 			; <UNDEFINED> instruction: 0xf6000005
    85d8:	2700003b 	smladxcs	r0, fp, r0, r0
    85dc:	00000619 	andeq	r0, r0, r9, lsl r6
    85e0:	0800949a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, pc}
    85e4:	000027e0 	andeq	r2, r0, r0, ror #15
    85e8:	25262f01 	strcs	r2, [r6, #-3841]!	; 0xfffff0ff
    85ec:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    85f0:	0000003c 	andeq	r0, r0, ip, lsr r0
    85f4:	0ce12800 	stcleq	8, cr2, [r1]
    85f8:	33010000 	movwcc	r0, #4096	; 0x1000
    85fc:	080094d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip, pc}
    8600:	00000060 	andeq	r0, r0, r0, rrx
    8604:	07189c01 	ldreq	r9, [r8, -r1, lsl #24]
    8608:	66290000 	strtvs	r0, [r9], -r0
    860c:	0100746d 	tsteq	r0, sp, ror #8
    8610:	0004e433 	andeq	lr, r4, r3, lsr r4
    8614:	70910200 	addsvc	r0, r1, r0, lsl #4
    8618:	70612b2a 	rsbvc	r2, r1, sl, lsr #22
    861c:	29350100 	ldmdbcs	r5!, {r8}
    8620:	03000005 	movweq	r0, #5
    8624:	2c7ddc91 	ldclcs	12, cr13, [sp], #-580	; 0xfffffdbc
    8628:	00000320 	andeq	r0, r0, r0, lsr #6
    862c:	07183601 	ldreq	r3, [r8, -r1, lsl #12]
    8630:	91030000 	mrsls	r0, (UNDEF: 3)
    8634:	342d7de0 	strtcc	r7, [sp], #-3552	; 0xfffff220
    8638:	ee000005 	cdp	0, 0, cr0, cr0, cr5, {0}
    863c:	f8080094 			; <UNDEFINED> instruction: 0xf8080094
    8640:	01000027 	tsteq	r0, r7, lsr #32
    8644:	0006f93a 	andeq	pc, r6, sl, lsr r9	; <UNPREDICTABLE>
    8648:	05402600 	strbeq	r2, [r0, #-1536]	; 0xfffffa00
    864c:	3c4c0000 	marcc	acc0, r0, ip
    8650:	19270000 	stmdbne	r7!, {}	; <UNPREDICTABLE>
    8654:	f4000006 	vst4.8	{d0-d3}, [r0], r6
    8658:	10080094 	mulne	r8, r4, r0
    865c:	01000028 	tsteq	r0, r8, lsr #32
    8660:	0625262f 	strteq	r2, [r5], -pc, lsr #12
    8664:	3c920000 	ldccc	0, cr0, [r2], {0}
    8668:	00000000 	andeq	r0, r0, r0
    866c:	0094ee2e 	addseq	lr, r4, lr, lsr #28
    8670:	00096908 	andeq	r6, r9, r8, lsl #18
    8674:	52012f00 	andpl	r2, r1, #0, 30
    8678:	2f549102 	svccs	0x00549102
    867c:	91035101 	tstls	r3, r1, lsl #2
    8680:	012f0650 	teqeq	pc, r0, asr r6	; <UNPREDICTABLE>
    8684:	c0910350 	addsgt	r0, r1, r0, asr r3
    8688:	0c00007d 	stceq	0, cr0, [r0], {125}	; 0x7d
    868c:	000004ea 	andeq	r0, r0, sl, ror #9
    8690:	00000728 	andeq	r0, r0, r8, lsr #14
    8694:	0002950d 	andeq	r9, r2, sp, lsl #10
    8698:	3000ff00 	andcc	pc, r0, r0, lsl #30
    869c:	0000054b 	andeq	r0, r0, fp, asr #10
    86a0:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
    86a4:	00000016 	andeq	r0, r0, r6, lsl r0
    86a8:	57249c01 	strpl	r9, [r4, -r1, lsl #24]!
    86ac:	50000005 	andpl	r0, r0, r5
    86b0:	18080095 	stmdane	r8, {r0, r2, r4, r7}
    86b4:	01000000 	mrseq	r0, (UNDEF: 0)
    86b8:	00075f9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    86bc:	05673100 	strbeq	r3, [r7, #-256]!	; 0xffffff00
    86c0:	4b320000 	blmi	c886c8 <__RW_SIZE__+0xc88134>
    86c4:	50000005 	andpl	r0, r0, r5
    86c8:	12080095 	andne	r0, r8, #149	; 0x95
    86cc:	01000000 	mrseq	r0, (UNDEF: 0)
    86d0:	d3280050 	teqle	r8, #80	; 0x50
    86d4:	01000013 	tsteq	r0, r3, lsl r0
    86d8:	00956856 	addseq	r6, r5, r6, asr r8
    86dc:	00009c08 	andeq	r9, r0, r8, lsl #24
    86e0:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    86e4:	20000008 	andcs	r0, r0, r8
    86e8:	00000320 	andeq	r0, r0, r0, lsr #6
    86ec:	04e45601 	strbteq	r5, [r4], #1537	; 0x601
    86f0:	3cb00000 	ldccc	0, cr0, [r0]
    86f4:	8f220000 	svchi	0x00220000
    86f8:	01000013 	tsteq	r0, r3, lsl r0
    86fc:	0004e458 	andeq	lr, r4, r8, asr r4
    8700:	003ce600 	eorseq	lr, ip, r0, lsl #12
    8704:	00631c00 	rsbeq	r1, r3, r0, lsl #24
    8708:	04ea5901 	strbteq	r5, [sl], #2305	; 0x901
    870c:	572d0000 	strpl	r0, [sp, -r0]!
    8710:	6a000005 	bvs	872c <__RW_SIZE__+0x8198>
    8714:	28080095 	stmdacs	r8, {r0, r2, r4, r7}
    8718:	01000028 	tsteq	r0, r8, lsr #32
    871c:	0007c95b 	andeq	ip, r7, fp, asr r9
    8720:	28283300 	stmdacs	r8!, {r8, r9, ip, sp}
    8724:	67310000 	ldrvs	r0, [r1, -r0]!
    8728:	34000005 	strcc	r0, [r0], #-5
    872c:	0000054b 	andeq	r0, r0, fp, asr #10
    8730:	0800956a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip, pc}
    8734:	00002848 	andeq	r2, r0, r8, asr #16
    8738:	00005001 	andeq	r5, r0, r1
    873c:	0006192d 	andeq	r1, r6, sp, lsr #18
    8740:	00957600 	addseq	r7, r5, r0, lsl #12
    8744:	00286808 	eoreq	r6, r8, r8, lsl #16
    8748:	e6690100 	strbt	r0, [r9], -r0, lsl #2
    874c:	26000007 	strcs	r0, [r0], -r7
    8750:	00000625 	andeq	r0, r0, r5, lsr #12
    8754:	00003d04 	andeq	r3, r0, r4, lsl #26
    8758:	06192d00 	ldreq	r2, [r9], -r0, lsl #26
    875c:	95d40000 	ldrbls	r0, [r4]
    8760:	28880800 	stmcs	r8, {fp}
    8764:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    8768:	00000800 	andeq	r0, r0, r0, lsl #16
    876c:	00062535 	andeq	r2, r6, r5, lsr r5
    8770:	2e000a00 	vmlacs.f32	s0, s0, s0
    8774:	080095a0 	stmdaeq	r0, {r5, r7, r8, sl, ip, pc}
    8778:	00000682 	andeq	r0, r0, r2, lsl #13
    877c:	0550012f 	ldrbeq	r0, [r0, #-303]	; 0xfffffed1
    8780:	01101003 	tsteq	r0, r3
    8784:	36000008 	strcc	r0, [r0], -r8
    8788:	0000139e 	muleq	r0, lr, r3
    878c:	01c97101 	biceq	r7, r9, r1, lsl #2
    8790:	96040000 	strls	r0, [r4], -r0
    8794:	00ba0800 	adcseq	r0, sl, r0, lsl #16
    8798:	9c010000 	stcls	0, cr0, [r1], {-0}
    879c:	000008cc 	andeq	r0, r0, ip, asr #17
    87a0:	7274732b 	rsbsvc	r7, r4, #-1409286144	; 0xac000000
    87a4:	cc730100 	ldfgte	f0, [r3], #-0
    87a8:	02000008 	andeq	r0, r0, #8
    87ac:	20224891 	mlacs	r2, r1, r8, r4
    87b0:	01000003 	tsteq	r0, r3
    87b4:	0004e474 	andeq	lr, r4, r4, ror r4
    87b8:	003d2200 	eorseq	r2, sp, r0, lsl #4
    87bc:	13ce2200 	bicne	r2, lr, #0, 4
    87c0:	75010000 	strvc	r0, [r1, #-0]
    87c4:	000001c9 	andeq	r0, r0, r9, asr #3
    87c8:	00003d4d 	andeq	r3, r0, sp, asr #26
    87cc:	00137622 	andseq	r7, r3, r2, lsr #12
    87d0:	c9760100 	ldmdbgt	r6!, {r8}^
    87d4:	83000001 	movwhi	r0, #1
    87d8:	2200003d 	andcs	r0, r0, #61	; 0x3d
    87dc:	00000273 	andeq	r0, r0, r3, ror r2
    87e0:	01c97701 	biceq	r7, r9, r1, lsl #14
    87e4:	3dae0000 	stccc	0, cr0, [lr]
    87e8:	14220000 	strtne	r0, [r2], #-0
    87ec:	01000014 	tsteq	r0, r4, lsl r0
    87f0:	0001c978 	andeq	ip, r1, r8, ror r9
    87f4:	003e0900 	eorseq	r0, lr, r0, lsl #18
    87f8:	00692100 	rsbeq	r2, r9, r0, lsl #2
    87fc:	01c97901 	biceq	r7, r9, r1, lsl #18
    8800:	3e4a0000 	cdpcc	0, 4, cr0, cr10, cr0, {0}
    8804:	0e370000 	cdpeq	0, 3, cr0, cr7, cr0, {0}
    8808:	5f080096 	svcpl	0x00080096
    880c:	a7000007 	strge	r0, [r0, -r7]
    8810:	2f000008 	svccs	0x00000008
    8814:	7d025001 	stcvc	0, cr5, [r2, #-4]
    8818:	30370000 	eorscc	r0, r7, r0
    881c:	88080096 	stmdahi	r8, {r1, r2, r4, r7}
    8820:	bb000009 	bllt	884c <__RW_SIZE__+0x82b8>
    8824:	2f000008 	svccs	0x00000008
    8828:	75025001 	strvc	r5, [r2, #-1]
    882c:	b02e0000 	eorlt	r0, lr, r0
    8830:	9d080096 	stcls	0, cr0, [r8, #-600]	; 0xfffffda8
    8834:	2f000009 	svccs	0x00000009
    8838:	75025001 	strvc	r5, [r2, #-1]
    883c:	0c000000 	stceq	0, cr0, [r0], {-0}
    8840:	000004ea 	andeq	r0, r0, sl, ror #9
    8844:	000008dc 	ldrdeq	r0, [r0], -ip
    8848:	0002950d 	andeq	r9, r2, sp, lsl #10
    884c:	28001d00 	stmdacs	r0, {r8, sl, fp, ip}
    8850:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    8854:	96c0b001 	strbls	fp, [r0], r1
    8858:	00420800 	subeq	r0, r2, r0, lsl #16
    885c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8860:	0000094d 	andeq	r0, r0, sp, asr #18
    8864:	006e6538 	rsbeq	r6, lr, r8, lsr r5
    8868:	01c9b001 	biceq	fp, r9, r1
    886c:	3e690000 	cdpcc	0, 6, cr0, cr9, cr0, {0}
    8870:	a62d0000 	strtge	r0, [sp], -r0
    8874:	cc000005 	stcgt	0, cr0, [r0], {5}
    8878:	a0080096 	mulge	r8, r6, r0
    887c:	01000028 	tsteq	r0, r8, lsr #32
    8880:	00091cbc 			; <UNDEFINED> instruction: 0x00091cbc
    8884:	05b32600 	ldreq	r2, [r3, #1536]!	; 0x600
    8888:	3ea30000 	cdpcc	0, 10, cr0, cr3, cr0, {0}
    888c:	2d000000 	stccs	0, cr0, [r0, #-0]
    8890:	00000572 	andeq	r0, r0, r2, ror r5
    8894:	080096e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, pc}
    8898:	000028c0 	andeq	r2, r0, r0, asr #17
    889c:	0936b501 	ldmdbeq	r6!, {r0, r8, sl, ip, sp, pc}
    88a0:	7f350000 	svcvc	0x00350000
    88a4:	25000005 	strcs	r0, [r0, #-5]
    88a8:	058c3900 	streq	r3, [ip, #2304]	; 0x900
    88ac:	96fe0000 	ldrbtls	r0, [lr], r0
    88b0:	00040800 	andeq	r0, r4, r0, lsl #16
    88b4:	b6010000 	strlt	r0, [r1], -r0
    88b8:	00059935 	andeq	r9, r5, r5, lsr r9
    88bc:	00002500 	andeq	r2, r0, r0, lsl #10
    88c0:	0000823a 	andeq	r8, r0, sl, lsr r2
    88c4:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    88c8:	00000959 	andeq	r0, r0, r9, asr r9
    88cc:	0001c90e 	andeq	ip, r1, lr, lsl #18
    88d0:	13683b00 	cmnne	r8, #0, 22
    88d4:	55070000 	strpl	r0, [r7, #-0]
    88d8:	000004f1 	strdeq	r0, [r0], -r1
    88dc:	00038e3c 	andeq	r8, r3, ip, lsr lr
    88e0:	c9dc0800 	ldmibgt	ip, {fp}^
    88e4:	88000001 	stmdahi	r0, {r0}
    88e8:	3d000009 	stccc	0, cr0, [r0, #-36]	; 0xffffffdc
    88ec:	000004e4 	andeq	r0, r0, r4, ror #9
    88f0:	0004f13d 	andeq	pc, r4, sp, lsr r1	; <UNPREDICTABLE>
    88f4:	05073d00 	streq	r3, [r7, #-3328]	; 0xfffff300
    88f8:	3c000000 	stccc	0, cr0, [r0], {-0}
    88fc:	00001397 	muleq	r0, r7, r3
    8900:	04fc2109 	ldrbteq	r2, [ip], #265	; 0x109
    8904:	099d0000 	ldmibeq	sp, {}	; <UNPREDICTABLE>
    8908:	f13d0000 			; <UNDEFINED> instruction: 0xf13d0000
    890c:	00000004 	andeq	r0, r0, r4
    8910:	00140a3e 	andseq	r0, r4, lr, lsr sl
    8914:	c94c0a00 	stmdbgt	ip, {r9, fp}^
    8918:	3d000001 	stccc	0, cr0, [r0, #-4]
    891c:	000004f1 	strdeq	r0, [r0], -r1
    8920:	005d0000 	subseq	r0, sp, r0
    8924:	00020000 	andeq	r0, r2, r0
    8928:	00001812 	andeq	r1, r0, r2, lsl r8
    892c:	26d30104 	ldrbcs	r0, [r3], r4, lsl #2
    8930:	30000000 	andcc	r0, r0, r0
    8934:	31ec0800 	mvncc	r0, r0, lsl #16
    8938:	72630800 	rsbvc	r0, r3, #0, 16
    893c:	732e3074 	teqvc	lr, #116	; 0x74
    8940:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    8944:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    8948:	636b5c73 	cmnvs	fp, #29440	; 0x7300
    894c:	74736963 	ldrbtvc	r6, [r3], #-2403	; 0xfffff69d
    8950:	65445c63 	strbvs	r5, [r4, #-3171]	; 0xfffff39d
    8954:	6f746b73 	svcvs	0x00746b73
    8958:	41475c70 	hvcmi	30144	; 0x75c0
    895c:	505f454d 	subspl	r4, pc, sp, asr #10
    8960:	454a4f52 	strbmi	r4, [sl, #-3922]	; 0xfffff0ae
    8964:	395c5443 	ldmdbcc	ip, {r0, r1, r6, sl, ip, lr}^
    8968:	202e3139 	eorcs	r3, lr, r9, lsr r1
    896c:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
    8970:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
    8974:	53412055 	movtpl	r2, #4181	; 0x1055
    8978:	322e3220 	eorcc	r3, lr, #32, 4
    897c:	32352e33 	eorscc	r2, r5, #816	; 0x330
    8980:	Address 0x00008980 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__RW_SIZE__+0x2bfb18>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__RW_SIZE__+0x380694>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
      2c:	0b0b0024 	bleq	2c00c4 <__RW_SIZE__+0x2bfb30>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	01130600 	tsteq	r3, r0, lsl #12
      40:	0b3a0b0b 	bleq	e82c74 <__RW_SIZE__+0xe826e0>
      44:	1301053b 	movwne	r0, #5435	; 0x153b
      48:	0d070000 	stceq	0, cr0, [r7, #-0]
      4c:	3a080300 	bcc	200c54 <__RW_SIZE__+0x2006c0>
      50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      54:	000b3813 	andeq	r3, fp, r3, lsl r8
      58:	000d0800 	andeq	r0, sp, r0, lsl #16
      5c:	0b3a0e03 	bleq	e83870 <__RW_SIZE__+0xe832dc>
      60:	1349053b 	movtne	r0, #38203	; 0x953b
      64:	00000b38 	andeq	r0, r0, r8, lsr fp
      68:	03001609 	movweq	r1, #1545	; 0x609
      6c:	3b0b3a0e 	blcc	2ce8ac <__RW_SIZE__+0x2ce318>
      70:	00134905 	andseq	r4, r3, r5, lsl #18
      74:	002e0a00 	eoreq	r0, lr, r0, lsl #20
      78:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      7c:	0b3b0b3a 	bleq	ec2d6c <__RW_SIZE__+0xec27d8>
      80:	01111927 	tsteq	r1, r7, lsr #18
      84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      88:	00194297 	mulseq	r9, r7, r2
      8c:	00340b00 	eorseq	r0, r4, r0, lsl #22
      90:	0b3a0e03 	bleq	e838a4 <__RW_SIZE__+0xe83310>
      94:	1349053b 	movtne	r0, #38203	; 0x953b
      98:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
      a4:	0e030b13 	vmoveq.32	d3[0], r0
      a8:	17550e1b 	smmlane	r5, fp, lr, r0
      ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
      b0:	24020000 	strcs	r0, [r2], #-0
      b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      b8:	000e030b 	andeq	r0, lr, fp, lsl #6
      bc:	00160300 	andseq	r0, r6, r0, lsl #6
      c0:	0b3a0e03 	bleq	e838d4 <__RW_SIZE__+0xe83340>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	24040000 	strcs	r0, [r4], #-0
      cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      d0:	0008030b 	andeq	r0, r8, fp, lsl #6
      d4:	012e0500 	teqeq	lr, r0, lsl #10
      d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      e0:	13491927 	movtne	r1, #39207	; 0x9927
      e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
      e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      ec:	00130119 	andseq	r0, r3, r9, lsl r1
      f0:	00340600 	eorseq	r0, r4, r0, lsl #12
      f4:	0b3a0e03 	bleq	e83908 <__RW_SIZE__+0xe83374>
      f8:	1349053b 	movtne	r0, #38203	; 0x953b
      fc:	00001702 	andeq	r1, r0, r2, lsl #14
     100:	3f012e07 	svccc	0x00012e07
     104:	3a0e0319 	bcc	380d70 <__RW_SIZE__+0x3807dc>
     108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     110:	97184006 	ldrls	r4, [r8, -r6]
     114:	13011942 	movwne	r1, #6466	; 0x1942
     118:	05080000 	streq	r0, [r8, #-0]
     11c:	3a0e0300 	bcc	380d24 <__RW_SIZE__+0x380790>
     120:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     124:	00180213 	andseq	r0, r8, r3, lsl r2
     128:	00050900 	andeq	r0, r5, r0, lsl #18
     12c:	0b3a0e03 	bleq	e83940 <__RW_SIZE__+0xe833ac>
     130:	1349053b 	movtne	r0, #38203	; 0x953b
     134:	00001702 	andeq	r1, r0, r2, lsl #14
     138:	0b000f0a 	bleq	3d68 <__RW_SIZE__+0x37d4>
     13c:	0013490b 	andseq	r4, r3, fp, lsl #18
     140:	012e0b00 	teqeq	lr, r0, lsl #22
     144:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     14c:	13491927 	movtne	r1, #39207	; 0x9927
     150:	06120111 			; <UNDEFINED> instruction: 0x06120111
     154:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     158:	00000019 	andeq	r0, r0, r9, lsl r0
     15c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     160:	030b130e 	movweq	r1, #45838	; 0xb30e
     164:	110e1b0e 	tstne	lr, lr, lsl #22
     168:	10061201 	andne	r1, r6, r1, lsl #4
     16c:	02000017 	andeq	r0, r0, #23
     170:	0b0b0024 	bleq	2c0208 <__RW_SIZE__+0x2bfc74>
     174:	0e030b3e 	vmoveq.16	d3[0], r0
     178:	24030000 	strcs	r0, [r3], #-0
     17c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     180:	0008030b 	andeq	r0, r8, fp, lsl #6
     184:	000f0400 	andeq	r0, pc, r0, lsl #8
     188:	00000b0b 	andeq	r0, r0, fp, lsl #22
     18c:	0b000f05 	bleq	3da8 <__RW_SIZE__+0x3814>
     190:	0013490b 	andseq	r4, r3, fp, lsl #18
     194:	00260600 	eoreq	r0, r6, r0, lsl #12
     198:	00001349 	andeq	r1, r0, r9, asr #6
     19c:	03001607 	movweq	r1, #1543	; 0x607
     1a0:	3b0b3a0e 	blcc	2ce9e0 <__RW_SIZE__+0x2ce44c>
     1a4:	0013490b 	andseq	r4, r3, fp, lsl #18
     1a8:	01130800 	tsteq	r3, r0, lsl #16
     1ac:	0b0b0e03 	bleq	2c39c0 <__RW_SIZE__+0x2c342c>
     1b0:	0b3b0b3a 	bleq	ec2ea0 <__RW_SIZE__+0xec290c>
     1b4:	00001301 	andeq	r1, r0, r1, lsl #6
     1b8:	03000d09 	movweq	r0, #3337	; 0xd09
     1bc:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     1c0:	0019340b 	andseq	r3, r9, fp, lsl #8
     1c4:	012e0a00 	teqeq	lr, r0, lsl #20
     1c8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1cc:	0b3b0b3a 	bleq	ec2ebc <__RW_SIZE__+0xec2928>
     1d0:	0b201927 	bleq	806674 <__RW_SIZE__+0x8060e0>
     1d4:	00001301 	andeq	r1, r0, r1, lsl #6
     1d8:	0300050b 	movweq	r0, #1291	; 0x50b
     1dc:	3b0b3a08 	blcc	2cea04 <__RW_SIZE__+0x2ce470>
     1e0:	0013490b 	andseq	r4, r3, fp, lsl #18
     1e4:	00050c00 	andeq	r0, r5, r0, lsl #24
     1e8:	0b3a0e03 	bleq	e839fc <__RW_SIZE__+0xe83468>
     1ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1f0:	340d0000 	strcc	r0, [sp], #-0
     1f4:	3a0e0300 	bcc	380dfc <__RW_SIZE__+0x380868>
     1f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1fc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     200:	08030034 	stmdaeq	r3, {r2, r4, r5}
     204:	0b3b0b3a 	bleq	ec2ef4 <__RW_SIZE__+0xec2960>
     208:	00001349 	andeq	r1, r0, r9, asr #6
     20c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     210:	00130113 	andseq	r0, r3, r3, lsl r1
     214:	00211000 	eoreq	r1, r1, r0
     218:	0b2f1349 	bleq	bc4f44 <__RW_SIZE__+0xbc49b0>
     21c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     220:	11133101 	tstne	r3, r1, lsl #2
     224:	40061201 	andmi	r1, r6, r1, lsl #4
     228:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     22c:	00001301 	andeq	r1, r0, r1, lsl #6
     230:	31000512 	tstcc	r0, r2, lsl r5
     234:	00170213 	andseq	r0, r7, r3, lsl r2
     238:	00341300 	eorseq	r1, r4, r0, lsl #6
     23c:	17021331 	smladxne	r2, r1, r3, r1
     240:	34140000 	ldrcc	r0, [r4], #-0
     244:	1c133100 	ldfnes	f3, [r3], {-0}
     248:	1500000b 	strne	r0, [r0, #-11]
     24c:	13310034 	teqne	r1, #52	; 0x34
     250:	00001802 	andeq	r1, r0, r2, lsl #16
     254:	01828916 	orreq	r8, r2, r6, lsl r9
     258:	31011101 	tstcc	r1, r1, lsl #2
     25c:	00130113 	andseq	r0, r3, r3, lsl r1
     260:	828a1700 	addhi	r1, sl, #0, 14
     264:	18020001 	stmdane	r2, {r0}
     268:	00184291 	mulseq	r8, r1, r2
     26c:	82891800 	addhi	r1, r9, #0, 16
     270:	01110001 	tsteq	r1, r1
     274:	00001331 	andeq	r1, r0, r1, lsr r3
     278:	01828919 	orreq	r8, r2, r9, lsl r9
     27c:	31011101 	tstcc	r1, r1, lsl #2
     280:	1a000013 	bne	2d4 <__ZI_SIZE__+0x118>
     284:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     288:	17550152 			; <UNDEFINED> instruction: 0x17550152
     28c:	0b590b58 	bleq	1642ff4 <__RW_SIZE__+0x1642a60>
     290:	051b0000 	ldreq	r0, [fp, #-0]
     294:	00133100 	andseq	r3, r3, r0, lsl #2
     298:	010b1c00 	tsteq	fp, r0, lsl #24
     29c:	00001755 	andeq	r1, r0, r5, asr r7
     2a0:	3100341d 	tstcc	r0, sp, lsl r4
     2a4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     2a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2ac:	0b3a0e03 	bleq	e83ac0 <__RW_SIZE__+0xe8352c>
     2b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2bc:	00130119 	andseq	r0, r3, r9, lsl r1
     2c0:	00051f00 	andeq	r1, r5, r0, lsl #30
     2c4:	0b3a0803 	bleq	e822d8 <__RW_SIZE__+0xe81d44>
     2c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2cc:	00001702 	andeq	r1, r0, r2, lsl #14
     2d0:	03000520 	movweq	r0, #1312	; 0x520
     2d4:	3b0b3a0e 	blcc	2ceb14 <__RW_SIZE__+0x2ce580>
     2d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2dc:	21000017 	tstcs	r0, r7, lsl r0
     2e0:	00000018 	andeq	r0, r0, r8, lsl r0
     2e4:	03003422 	movweq	r3, #1058	; 0x422
     2e8:	3b0b3a08 	blcc	2ceb10 <__RW_SIZE__+0x2ce57c>
     2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2f0:	23000018 	movwcs	r0, #24
     2f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2f8:	0b3b0b3a 	bleq	ec2fe8 <__RW_SIZE__+0xec2a54>
     2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     300:	1d240000 	stcne	0, cr0, [r4, #-0]
     304:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     308:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     30c:	010b590b 	tsteq	fp, fp, lsl #18
     310:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     31c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     320:	0000193c 	andeq	r1, r0, ip, lsr r9
     324:	49003526 	stmdbmi	r0, {r1, r2, r5, r8, sl, ip, sp}
     328:	27000013 	smladcs	r0, r3, r0, r0
     32c:	13490021 	movtne	r0, #36897	; 0x9021
     330:	0000052f 	andeq	r0, r0, pc, lsr #10
     334:	03003428 	movweq	r3, #1064	; 0x428
     338:	3b0b3a0e 	blcc	2ceb78 <__RW_SIZE__+0x2ce5e4>
     33c:	3f13490b 	svccc	0x0013490b
     340:	00180219 	andseq	r0, r8, r9, lsl r2
     344:	012e2900 	teqeq	lr, r0, lsl #18
     348:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     34c:	0b3b0b3a 	bleq	ec303c <__RW_SIZE__+0xec2aa8>
     350:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     354:	00001301 	andeq	r1, r0, r1, lsl #6
     358:	4900052a 	stmdbmi	r0, {r1, r3, r5, r8, sl}
     35c:	2b000013 	blcs	3b0 <__ZI_SIZE__+0x1f4>
     360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     364:	0b3a0e03 	bleq	e83b78 <__RW_SIZE__+0xe835e4>
     368:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     36c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     370:	01000000 	mrseq	r0, (UNDEF: 0)
     374:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     378:	0e030b13 	vmoveq.32	d3[0], r0
     37c:	01110e1b 	tsteq	r1, fp, lsl lr
     380:	17100612 			; <UNDEFINED> instruction: 0x17100612
     384:	04020000 	streq	r0, [r2], #-0
     388:	0b0e0301 	bleq	380f94 <__RW_SIZE__+0x380a00>
     38c:	3b0b3a0b 	blcc	2cebc0 <__RW_SIZE__+0x2ce62c>
     390:	0013010b 	andseq	r0, r3, fp, lsl #2
     394:	00280300 	eoreq	r0, r8, r0, lsl #6
     398:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     39c:	16040000 	strne	r0, [r4], -r0
     3a0:	3a0e0300 	bcc	380fa8 <__RW_SIZE__+0x380a14>
     3a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     3ac:	0b0b0024 	bleq	2c0444 <__RW_SIZE__+0x2bfeb0>
     3b0:	0e030b3e 	vmoveq.16	d3[0], r0
     3b4:	16060000 	strne	r0, [r6], -r0
     3b8:	3a0e0300 	bcc	380fc0 <__RW_SIZE__+0x380a2c>
     3bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3c0:	07000013 	smladeq	r0, r3, r0, r0
     3c4:	0b0b0024 	bleq	2c045c <__RW_SIZE__+0x2bfec8>
     3c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3cc:	13080000 	movwne	r0, #32768	; 0x8000
     3d0:	3a050b01 	bcc	142fdc <__RW_SIZE__+0x142a48>
     3d4:	010b3b0b 	tsteq	fp, fp, lsl #22
     3d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     3dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     3e0:	0b3b0b3a 	bleq	ec30d0 <__RW_SIZE__+0xec2b3c>
     3e4:	0b381349 	bleq	e05110 <__RW_SIZE__+0xe04b7c>
     3e8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     3ec:	3a0e0300 	bcc	380ff4 <__RW_SIZE__+0x380a60>
     3f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f4:	00053813 	andeq	r3, r5, r3, lsl r8
     3f8:	000d0b00 	andeq	r0, sp, r0, lsl #22
     3fc:	0b3a0803 	bleq	e82410 <__RW_SIZE__+0xe81e7c>
     400:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     404:	00000538 	andeq	r0, r0, r8, lsr r5
     408:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     40c:	00130113 	andseq	r0, r3, r3, lsl r1
     410:	00210d00 	eoreq	r0, r1, r0, lsl #26
     414:	0b2f1349 	bleq	bc5140 <__RW_SIZE__+0xbc4bac>
     418:	350e0000 	strcc	r0, [lr, #-0]
     41c:	00134900 	andseq	r4, r3, r0, lsl #18
     420:	00210f00 	eoreq	r0, r1, r0, lsl #30
     424:	052f1349 	streq	r1, [pc, #-841]!	; e3 <shift+0xe3>
     428:	13100000 	tstne	r0, #0
     42c:	3a0b0b01 	bcc	2c3038 <__RW_SIZE__+0x2c2aa4>
     430:	01053b0b 	tsteq	r5, fp, lsl #22
     434:	11000013 	tstne	r0, r3, lsl r0
     438:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     43c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     440:	0b381349 	bleq	e0516c <__RW_SIZE__+0xe04bd8>
     444:	0d120000 	ldceq	0, cr0, [r2, #-0]
     448:	3a0e0300 	bcc	381050 <__RW_SIZE__+0x380abc>
     44c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	000b3813 	andeq	r3, fp, r3, lsl r8
     454:	012e1300 	teqeq	lr, r0, lsl #6
     458:	0b3a0e03 	bleq	e83c6c <__RW_SIZE__+0xe836d8>
     45c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     460:	13010b20 	movwne	r0, #6944	; 0x1b20
     464:	05140000 	ldreq	r0, [r4, #-0]
     468:	3a0e0300 	bcc	381070 <__RW_SIZE__+0x380adc>
     46c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     470:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     474:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     478:	0b3a0e03 	bleq	e83c8c <__RW_SIZE__+0xe836f8>
     47c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     480:	06120111 			; <UNDEFINED> instruction: 0x06120111
     484:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     488:	16000019 			; <UNDEFINED> instruction: 0x16000019
     48c:	0e03012e 	adfeqsp	f0, f3, #0.5
     490:	0b3b0b3a 	bleq	ec3180 <__RW_SIZE__+0xec2bec>
     494:	13491927 	movtne	r1, #39207	; 0x9927
     498:	13010b20 	movwne	r0, #6944	; 0x1b20
     49c:	34170000 	ldrcc	r0, [r7], #-0
     4a0:	3a080300 	bcc	2010a8 <__RW_SIZE__+0x200b14>
     4a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a8:	18000013 	stmdane	r0, {r0, r1, r4}
     4ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4b0:	0b3a0e03 	bleq	e83cc4 <__RW_SIZE__+0xe83730>
     4b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4b8:	01111349 	tsteq	r1, r9, asr #6
     4bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4c4:	19000013 	stmdbne	r0, {r0, r1, r4}
     4c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4cc:	0b3b0b3a 	bleq	ec31bc <__RW_SIZE__+0xec2c28>
     4d0:	17021349 	strne	r1, [r2, -r9, asr #6]
     4d4:	341a0000 	ldrcc	r0, [sl], #-0
     4d8:	3a080300 	bcc	2010e0 <__RW_SIZE__+0x200b4c>
     4dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4e0:	00180213 	andseq	r0, r8, r3, lsl r2
     4e4:	011d1b00 	tsteq	sp, r0, lsl #22
     4e8:	01111331 	tsteq	r1, r1, lsr r3
     4ec:	0b580612 	bleq	1601d3c <__RW_SIZE__+0x16017a8>
     4f0:	13010b59 	movwne	r0, #7001	; 0x1b59
     4f4:	0b1c0000 	bleq	7004fc <__RW_SIZE__+0x6fff68>
     4f8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     4fc:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
     500:	13310034 	teqne	r1, #52	; 0x34
     504:	00001702 	andeq	r1, r0, r2, lsl #14
     508:	31011d1e 	tstcc	r1, lr, lsl sp
     50c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     510:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     514:	1f00000b 	svcne	0x0000000b
     518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     51c:	0b3a0e03 	bleq	e83d30 <__RW_SIZE__+0xe8379c>
     520:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     524:	0b201349 	bleq	805250 <__RW_SIZE__+0x804cbc>
     528:	00001301 	andeq	r1, r0, r1, lsl #6
     52c:	31012e20 	tstcc	r1, r0, lsr #28
     530:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     534:	97184006 	ldrls	r4, [r8, -r6]
     538:	13011942 	movwne	r1, #6466	; 0x1942
     53c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     540:	03193f01 	tsteq	r9, #1, 30
     544:	3b0b3a0e 	blcc	2ced84 <__RW_SIZE__+0x2ce7f0>
     548:	1119270b 	tstne	r9, fp, lsl #14
     54c:	40061201 	andmi	r1, r6, r1, lsl #4
     550:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     554:	00001301 	andeq	r1, r0, r1, lsl #6
     558:	03000522 	movweq	r0, #1314	; 0x522
     55c:	3b0b3a08 	blcc	2ced84 <__RW_SIZE__+0x2ce7f0>
     560:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     564:	23000017 	movwcs	r0, #23
     568:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     56c:	17550152 			; <UNDEFINED> instruction: 0x17550152
     570:	0b590b58 	bleq	16432d8 <__RW_SIZE__+0x1642d44>
     574:	00001301 	andeq	r1, r0, r1, lsl #6
     578:	31000524 	tstcc	r0, r4, lsr #10
     57c:	00170213 	andseq	r0, r7, r3, lsl r2
     580:	00052500 	andeq	r2, r5, r0, lsl #10
     584:	0b1c1331 	bleq	705250 <__RW_SIZE__+0x704cbc>
     588:	34260000 	strtcc	r0, [r6], #-0
     58c:	3a0e0300 	bcc	381194 <__RW_SIZE__+0x380c00>
     590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	3c193f13 	ldccc	15, cr3, [r9], {19}
     598:	00000019 	andeq	r0, r0, r9, lsl r0
     59c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     5a0:	030b130e 	movweq	r1, #45838	; 0xb30e
     5a4:	110e1b0e 	tstne	lr, lr, lsl #22
     5a8:	10061201 	andne	r1, r6, r1, lsl #4
     5ac:	02000017 	andeq	r0, r0, #23
     5b0:	0e030104 	adfeqs	f0, f3, f4
     5b4:	0b3a0b0b 	bleq	e831e8 <__RW_SIZE__+0xe82c54>
     5b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     5bc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     5c0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     5c4:	0400000d 	streq	r0, [r0], #-13
     5c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     5cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5d0:	00001349 	andeq	r1, r0, r9, asr #6
     5d4:	0b002405 	bleq	95f0 <__RW_SIZE__+0x905c>
     5d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5dc:	0600000e 	streq	r0, [r0], -lr
     5e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     5e4:	0b3b0b3a 	bleq	ec32d4 <__RW_SIZE__+0xec2d40>
     5e8:	00001349 	andeq	r1, r0, r9, asr #6
     5ec:	0b002407 	bleq	9610 <__RW_SIZE__+0x907c>
     5f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5f4:	08000008 	stmdaeq	r0, {r3}
     5f8:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
     5fc:	0b3b0b3a 	bleq	ec32ec <__RW_SIZE__+0xec2d58>
     600:	00001301 	andeq	r1, r0, r1, lsl #6
     604:	03000d09 	movweq	r0, #3337	; 0xd09
     608:	3b0b3a0e 	blcc	2cee48 <__RW_SIZE__+0x2ce8b4>
     60c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     610:	0a00000b 	beq	644 <__RW_SIZE__+0xb0>
     614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     618:	0b3b0b3a 	bleq	ec3308 <__RW_SIZE__+0xec2d74>
     61c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     620:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     624:	3a080300 	bcc	20122c <__RW_SIZE__+0x200c98>
     628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     62c:	00053813 	andeq	r3, r5, r3, lsl r8
     630:	01010c00 	tsteq	r1, r0, lsl #24
     634:	13011349 	movwne	r1, #4937	; 0x1349
     638:	210d0000 	mrscs	r0, (UNDEF: 13)
     63c:	2f134900 	svccs	0x00134900
     640:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     644:	13490035 	movtne	r0, #36917	; 0x9035
     648:	210f0000 	mrscs	r0, CPSR
     64c:	2f134900 	svccs	0x00134900
     650:	10000005 	andne	r0, r0, r5
     654:	0b0b0113 	bleq	2c0aa8 <__RW_SIZE__+0x2c0514>
     658:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     65c:	00001301 	andeq	r1, r0, r1, lsl #6
     660:	03000d11 	movweq	r0, #3345	; 0xd11
     664:	3b0b3a08 	blcc	2cee8c <__RW_SIZE__+0x2ce8f8>
     668:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     66c:	1200000b 	andne	r0, r0, #11
     670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     674:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     678:	0b381349 	bleq	e053a4 <__RW_SIZE__+0xe04e10>
     67c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     680:	03193f00 	tsteq	r9, #0, 30
     684:	3b0b3a0e 	blcc	2ceec4 <__RW_SIZE__+0x2ce930>
     688:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     68c:	000b2013 	andeq	r2, fp, r3, lsl r0
     690:	012e1400 	teqeq	lr, r0, lsl #8
     694:	0b3a0e03 	bleq	e83ea8 <__RW_SIZE__+0xe83914>
     698:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     69c:	13010b20 	movwne	r0, #6944	; 0x1b20
     6a0:	05150000 	ldreq	r0, [r5, #-0]
     6a4:	3a0e0300 	bcc	3812ac <__RW_SIZE__+0x380d18>
     6a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ac:	16000013 			; <UNDEFINED> instruction: 0x16000013
     6b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6b4:	0b3a0e03 	bleq	e83ec8 <__RW_SIZE__+0xe83934>
     6b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6c4:	17000019 	smladne	r0, r9, r0, r0
     6c8:	1331002e 	teqne	r1, #46	; 0x2e
     6cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6d4:	18000019 	stmdane	r0, {r0, r3, r4}
     6d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6dc:	0b3a0e03 	bleq	e83ef0 <__RW_SIZE__+0xe8395c>
     6e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6ec:	00130119 	andseq	r0, r3, r9, lsl r1
     6f0:	001d1900 	andseq	r1, sp, r0, lsl #18
     6f4:	01111331 	tsteq	r1, r1, lsr r3
     6f8:	0b580612 	bleq	1601f48 <__RW_SIZE__+0x16019b4>
     6fc:	00000b59 	andeq	r0, r0, r9, asr fp
     700:	3f012e1a 	svccc	0x00012e1a
     704:	3a0e0319 	bcc	381370 <__RW_SIZE__+0x380ddc>
     708:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     70c:	11134919 	tstne	r3, r9, lsl r9
     710:	40061201 	andmi	r1, r6, r1, lsl #4
     714:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     718:	00001301 	andeq	r1, r0, r1, lsl #6
     71c:	0300341b 	movweq	r3, #1051	; 0x41b
     720:	3b0b3a08 	blcc	2cef48 <__RW_SIZE__+0x2ce9b4>
     724:	0013490b 	andseq	r4, r3, fp, lsl #18
     728:	00051c00 	andeq	r1, r5, r0, lsl #24
     72c:	0b3a0803 	bleq	e82740 <__RW_SIZE__+0xe821ac>
     730:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     734:	00001702 	andeq	r1, r0, r2, lsl #14
     738:	31011d1d 	tstcc	r1, sp, lsl sp
     73c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     740:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     744:	0013010b 	andseq	r0, r3, fp, lsl #2
     748:	00051e00 	andeq	r1, r5, r0, lsl #28
     74c:	17021331 	smladxne	r2, r1, r3, r1
     750:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 758 <__RW_SIZE__+0x1c4>
     754:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     758:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     75c:	010b590b 	tsteq	fp, fp, lsl #18
     760:	20000013 	andcs	r0, r0, r3, lsl r0
     764:	13310005 	teqne	r1, #5
     768:	00000b1c 	andeq	r0, r0, ip, lsl fp
     76c:	31011d21 	tstcc	r1, r1, lsr #26
     770:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     774:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     778:	2200000b 	andcs	r0, r0, #11
     77c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     784:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     788:	0000193c 	andeq	r1, r0, ip, lsr r9
     78c:	01110100 	tsteq	r1, r0, lsl #2
     790:	0b130e25 	bleq	4c402c <__RW_SIZE__+0x4c3a98>
     794:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     798:	06120111 			; <UNDEFINED> instruction: 0x06120111
     79c:	00001710 	andeq	r1, r0, r0, lsl r7
     7a0:	0b002402 	bleq	97b0 <__RW_SIZE__+0x921c>
     7a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7a8:	0300000e 	movweq	r0, #14
     7ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7b0:	0b3b0b3a 	bleq	ec34a0 <__RW_SIZE__+0xec2f0c>
     7b4:	00001349 	andeq	r1, r0, r9, asr #6
     7b8:	0b002404 	bleq	97d0 <__RW_SIZE__+0x923c>
     7bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7c0:	05000008 	streq	r0, [r0, #-8]
     7c4:	13490035 	movtne	r0, #36917	; 0x9035
     7c8:	13060000 	movwne	r0, #24576	; 0x6000
     7cc:	3a0b0b01 	bcc	2c33d8 <__RW_SIZE__+0x2c2e44>
     7d0:	01053b0b 	tsteq	r5, fp, lsl #22
     7d4:	07000013 	smladeq	r0, r3, r0, r0
     7d8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7e0:	0b381349 	bleq	e0550c <__RW_SIZE__+0xe04f78>
     7e4:	0d080000 	stceq	0, cr0, [r8, #-0]
     7e8:	3a0e0300 	bcc	3813f0 <__RW_SIZE__+0x380e5c>
     7ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f0:	000b3813 	andeq	r3, fp, r3, lsl r8
     7f4:	00160900 	andseq	r0, r6, r0, lsl #18
     7f8:	0b3a0e03 	bleq	e8400c <__RW_SIZE__+0xe83a78>
     7fc:	1349053b 	movtne	r0, #38203	; 0x953b
     800:	130a0000 	movwne	r0, #40960	; 0xa000
     804:	3a0b0b01 	bcc	2c3410 <__RW_SIZE__+0x2c2e7c>
     808:	010b3b0b 	tsteq	fp, fp, lsl #22
     80c:	0b000013 	bleq	860 <__RW_SIZE__+0x2cc>
     810:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     814:	0b3b0b3a 	bleq	ec3504 <__RW_SIZE__+0xec2f70>
     818:	0b381349 	bleq	e05544 <__RW_SIZE__+0xe04fb0>
     81c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     820:	3a080300 	bcc	201428 <__RW_SIZE__+0x200e94>
     824:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     828:	000b3813 	andeq	r3, fp, r3, lsl r8
     82c:	012e0d00 	teqeq	lr, r0, lsl #26
     830:	0b3a0e03 	bleq	e84044 <__RW_SIZE__+0xe83ab0>
     834:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     838:	13010b20 	movwne	r0, #6944	; 0x1b20
     83c:	050e0000 	streq	r0, [lr, #-0]
     840:	3a0e0300 	bcc	381448 <__RW_SIZE__+0x380eb4>
     844:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     848:	0f000013 	svceq	0x00000013
     84c:	08030005 	stmdaeq	r3, {r0, r2}
     850:	0b3b0b3a 	bleq	ec3540 <__RW_SIZE__+0xec2fac>
     854:	00001349 	andeq	r1, r0, r9, asr #6
     858:	03003410 	movweq	r3, #1040	; 0x410
     85c:	3b0b3a08 	blcc	2cf084 <__RW_SIZE__+0x2ceaf0>
     860:	0013490b 	andseq	r4, r3, fp, lsl #18
     864:	012e1100 	teqeq	lr, r0, lsl #2
     868:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     86c:	0b3b0b3a 	bleq	ec355c <__RW_SIZE__+0xec2fc8>
     870:	0b201927 	bleq	806d14 <__RW_SIZE__+0x806780>
     874:	00001301 	andeq	r1, r0, r1, lsl #6
     878:	3f002e12 	svccc	0x00002e12
     87c:	3a0e0319 	bcc	3814e8 <__RW_SIZE__+0x380f54>
     880:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     884:	000b2019 	andeq	r2, fp, r9, lsl r0
     888:	002e1300 	eoreq	r1, lr, r0, lsl #6
     88c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     894:	0b201927 	bleq	806d38 <__RW_SIZE__+0x8067a4>
     898:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     89c:	11133100 	tstne	r3, r0, lsl #2
     8a0:	40061201 	andmi	r1, r6, r1, lsl #4
     8a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8a8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     8ac:	11133101 	tstne	r3, r1, lsl #2
     8b0:	40061201 	andmi	r1, r6, r1, lsl #4
     8b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	31000516 	tstcc	r0, r6, lsl r5
     8c0:	00170213 	andseq	r0, r7, r3, lsl r2
     8c4:	011d1700 	tsteq	sp, r0, lsl #14
     8c8:	01521331 	cmpeq	r2, r1, lsr r3
     8cc:	0b581755 	bleq	1606628 <__RW_SIZE__+0x1606094>
     8d0:	13010b59 	movwne	r0, #7001	; 0x1b59
     8d4:	1d180000 	ldcne	0, cr0, [r8, #-0]
     8d8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     8dc:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     8e0:	000b590b 	andeq	r5, fp, fp, lsl #18
     8e4:	00051900 	andeq	r1, r5, r0, lsl #18
     8e8:	00001331 	andeq	r1, r0, r1, lsr r3
     8ec:	31011d1a 	tstcc	r1, sl, lsl sp
     8f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     8f4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     8f8:	1b00000b 	blne	92c <__RW_SIZE__+0x398>
     8fc:	13310005 	teqne	r1, #5
     900:	00000b1c 	andeq	r0, r0, ip, lsl fp
     904:	55010b1c 	strpl	r0, [r1, #-2844]	; 0xfffff4e4
     908:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
     90c:	13310034 	teqne	r1, #52	; 0x34
     910:	00001802 	andeq	r1, r0, r2, lsl #16
     914:	3100051e 	tstcc	r0, lr, lsl r5
     918:	00180213 	andseq	r0, r8, r3, lsl r2
     91c:	012e1f00 	teqeq	lr, r0, lsl #30
     920:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     924:	0b3b0b3a 	bleq	ec3614 <__RW_SIZE__+0xec3080>
     928:	01111927 	tsteq	r1, r7, lsr #18
     92c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     930:	01194297 			; <UNDEFINED> instruction: 0x01194297
     934:	20000013 	andcs	r0, r0, r3, lsl r0
     938:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     93c:	0b3b0b3a 	bleq	ec362c <__RW_SIZE__+0xec3098>
     940:	17021349 	strne	r1, [r2, -r9, asr #6]
     944:	05210000 	streq	r0, [r1, #-0]!
     948:	1c133100 	ldfnes	f3, [r3], {-0}
     94c:	2200000d 	andcs	r0, r0, #13
     950:	08030005 	stmdaeq	r3, {r0, r2}
     954:	0b3b0b3a 	bleq	ec3644 <__RW_SIZE__+0xec30b0>
     958:	17021349 	strne	r1, [r2, -r9, asr #6]
     95c:	34230000 	strtcc	r0, [r3], #-0
     960:	3a080300 	bcc	201568 <__RW_SIZE__+0x200fd4>
     964:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	00170213 	andseq	r0, r7, r3, lsl r2
     96c:	00342400 	eorseq	r2, r4, r0, lsl #8
     970:	0b3a0e03 	bleq	e84184 <__RW_SIZE__+0xe83bf0>
     974:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     978:	00001702 	andeq	r1, r0, r2, lsl #14
     97c:	01828925 	orreq	r8, r2, r5, lsr #18
     980:	31011100 	mrscc	r1, (UNDEF: 17)
     984:	26000013 			; <UNDEFINED> instruction: 0x26000013
     988:	01018289 	smlabbeq	r1, r9, r2, r8
     98c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     990:	00133119 	andseq	r3, r3, r9, lsl r1
     994:	828a2700 	addhi	r2, sl, #0, 14
     998:	18020001 	stmdane	r2, {r0}
     99c:	00184291 	mulseq	r8, r1, r2
     9a0:	00342800 	eorseq	r2, r4, r0, lsl #16
     9a4:	0b3a0803 	bleq	e829b8 <__RW_SIZE__+0xe82424>
     9a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9ac:	00001802 	andeq	r1, r0, r2, lsl #16
     9b0:	31011d29 	tstcc	r1, r9, lsr #26
     9b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9b8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     9bc:	00130105 	andseq	r0, r3, r5, lsl #2
     9c0:	82892a00 	addhi	r2, r9, #0, 20
     9c4:	01110101 	tsteq	r1, r1, lsl #2
     9c8:	00001331 	andeq	r1, r0, r1, lsr r3
     9cc:	3f012e2b 	svccc	0x00012e2b
     9d0:	3a0e0319 	bcc	38163c <__RW_SIZE__+0x3810a8>
     9d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9dc:	97184006 	ldrls	r4, [r8, -r6]
     9e0:	13011942 	movwne	r1, #6466	; 0x1942
     9e4:	052c0000 	streq	r0, [ip, #-0]!
     9e8:	3a080300 	bcc	2015f0 <__RW_SIZE__+0x20105c>
     9ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f0:	00170213 	andseq	r0, r7, r3, lsl r2
     9f4:	00052d00 	andeq	r2, r5, r0, lsl #26
     9f8:	0b3a0e03 	bleq	e8420c <__RW_SIZE__+0xe83c78>
     9fc:	1349053b 	movtne	r0, #38203	; 0x953b
     a00:	00001802 	andeq	r1, r0, r2, lsl #16
     a04:	0300342e 	movweq	r3, #1070	; 0x42e
     a08:	3b0b3a08 	blcc	2cf230 <__RW_SIZE__+0x2cec9c>
     a0c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a10:	2f000017 	svccs	0x00000017
     a14:	08030034 	stmdaeq	r3, {r2, r4, r5}
     a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a1c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a20:	1d300000 	ldcne	0, cr0, [r0, #-0]
     a24:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a28:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     a2c:	0105590b 	tsteq	r5, fp, lsl #18
     a30:	31000013 	tstcc	r0, r3, lsl r0
     a34:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     a38:	0b3b0b3a 	bleq	ec3728 <__RW_SIZE__+0xec3194>
     a3c:	0b201927 	bleq	806ee0 <__RW_SIZE__+0x80694c>
     a40:	05320000 	ldreq	r0, [r2, #-0]!
     a44:	3a0e0300 	bcc	38164c <__RW_SIZE__+0x3810b8>
     a48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a4c:	00170213 	andseq	r0, r7, r3, lsl r2
     a50:	001d3300 	andseq	r3, sp, r0, lsl #6
     a54:	01521331 	cmpeq	r2, r1, lsr r3
     a58:	0b581755 	bleq	16067b4 <__RW_SIZE__+0x1606220>
     a5c:	00000559 	andeq	r0, r0, r9, asr r5
     a60:	31000534 	tstcc	r0, r4, lsr r5
     a64:	00051c13 	andeq	r1, r5, r3, lsl ip
     a68:	010b3500 	tsteq	fp, r0, lsl #10
     a6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a70:	1d360000 	ldcne	0, cr0, [r6, #-0]
     a74:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a78:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     a7c:	0005590b 	andeq	r5, r5, fp, lsl #18
     a80:	011d3700 	tsteq	sp, r0, lsl #14
     a84:	01111331 	tsteq	r1, r1, lsr r3
     a88:	0b580612 	bleq	16022d8 <__RW_SIZE__+0x1601d44>
     a8c:	13010b59 	movwne	r0, #7001	; 0x1b59
     a90:	34380000 	ldrtcc	r0, [r8], #-0
     a94:	3a0e0300 	bcc	38169c <__RW_SIZE__+0x381108>
     a98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a9c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     aa0:	39000019 	stmdbcc	r0, {r0, r3, r4}
     aa4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa8:	0b3b0b3a 	bleq	ec3798 <__RW_SIZE__+0xec3204>
     aac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ab0:	00001802 	andeq	r1, r0, r2, lsl #16
     ab4:	01110100 	tsteq	r1, r0, lsl #2
     ab8:	0b130e25 	bleq	4c4354 <__RW_SIZE__+0x4c3dc0>
     abc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     ac0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ac4:	00001710 	andeq	r1, r0, r0, lsl r7
     ac8:	0b002402 	bleq	9ad8 <__RW_SIZE__+0x9544>
     acc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ad0:	0300000e 	movweq	r0, #14
     ad4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ad8:	0b3b0b3a 	bleq	ec37c8 <__RW_SIZE__+0xec3234>
     adc:	00001349 	andeq	r1, r0, r9, asr #6
     ae0:	0b002404 	bleq	9af8 <__RW_SIZE__+0x9564>
     ae4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ae8:	05000008 	streq	r0, [r0, #-8]
     aec:	13490035 	movtne	r0, #36917	; 0x9035
     af0:	13060000 	movwne	r0, #24576	; 0x6000
     af4:	3a0b0b01 	bcc	2c3700 <__RW_SIZE__+0x2c316c>
     af8:	01053b0b 	tsteq	r5, fp, lsl #22
     afc:	07000013 	smladeq	r0, r3, r0, r0
     b00:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b08:	0b381349 	bleq	e05834 <__RW_SIZE__+0xe052a0>
     b0c:	0d080000 	stceq	0, cr0, [r8, #-0]
     b10:	3a0e0300 	bcc	381718 <__RW_SIZE__+0x381184>
     b14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	000b3813 	andeq	r3, fp, r3, lsl r8
     b1c:	00160900 	andseq	r0, r6, r0, lsl #18
     b20:	0b3a0e03 	bleq	e84334 <__RW_SIZE__+0xe83da0>
     b24:	1349053b 	movtne	r0, #38203	; 0x953b
     b28:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     b2c:	03193f00 	tsteq	r9, #0, 30
     b30:	3b0b3a0e 	blcc	2cf370 <__RW_SIZE__+0x2ceddc>
     b34:	1119270b 	tstne	r9, fp, lsl #14
     b38:	40061201 	andmi	r1, r6, r1, lsl #4
     b3c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b40:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     b44:	03193f01 	tsteq	r9, #1, 30
     b48:	3b0b3a0e 	blcc	2cf388 <__RW_SIZE__+0x2cedf4>
     b4c:	1119270b 	tstne	r9, fp, lsl #14
     b50:	40061201 	andmi	r1, r6, r1, lsl #4
     b54:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b58:	00001301 	andeq	r1, r0, r1, lsl #6
     b5c:	0300050c 	movweq	r0, #1292	; 0x50c
     b60:	3b0b3a08 	blcc	2cf388 <__RW_SIZE__+0x2cedf4>
     b64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b68:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     b6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b74:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b78:	0000193c 	andeq	r1, r0, ip, lsr r9
     b7c:	01110100 	tsteq	r1, r0, lsl #2
     b80:	0b130e25 	bleq	4c441c <__RW_SIZE__+0x4c3e88>
     b84:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b88:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b8c:	00001710 	andeq	r1, r0, r0, lsl r7
     b90:	0b002402 	bleq	9ba0 <__RW_SIZE__+0x960c>
     b94:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b98:	0300000e 	movweq	r0, #14
     b9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ba0:	0b3b0b3a 	bleq	ec3890 <__RW_SIZE__+0xec32fc>
     ba4:	00001349 	andeq	r1, r0, r9, asr #6
     ba8:	0b002404 	bleq	9bc0 <__RW_SIZE__+0x962c>
     bac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bb0:	05000008 	streq	r0, [r0, #-8]
     bb4:	13490035 	movtne	r0, #36917	; 0x9035
     bb8:	13060000 	movwne	r0, #24576	; 0x6000
     bbc:	3a0b0b01 	bcc	2c37c8 <__RW_SIZE__+0x2c3234>
     bc0:	010b3b0b 	tsteq	fp, fp, lsl #22
     bc4:	07000013 	smladeq	r0, r3, r0, r0
     bc8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     bcc:	0b3b0b3a 	bleq	ec38bc <__RW_SIZE__+0xec3328>
     bd0:	0b381349 	bleq	e058fc <__RW_SIZE__+0xe05368>
     bd4:	0d080000 	stceq	0, cr0, [r8, #-0]
     bd8:	3a080300 	bcc	2017e0 <__RW_SIZE__+0x20124c>
     bdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be0:	000b3813 	andeq	r3, fp, r3, lsl r8
     be4:	00260900 	eoreq	r0, r6, r0, lsl #18
     be8:	00001349 	andeq	r1, r0, r9, asr #6
     bec:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     bf0:	00130113 	andseq	r0, r3, r3, lsl r1
     bf4:	00210b00 	eoreq	r0, r1, r0, lsl #22
     bf8:	0b2f1349 	bleq	bc5924 <__RW_SIZE__+0xbc5390>
     bfc:	130c0000 	movwne	r0, #49152	; 0xc000
     c00:	3a0b0b01 	bcc	2c380c <__RW_SIZE__+0x2c3278>
     c04:	01053b0b 	tsteq	r5, fp, lsl #22
     c08:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     c0c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     c10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c14:	0b381349 	bleq	e05940 <__RW_SIZE__+0xe053ac>
     c18:	0d0e0000 	stceq	0, cr0, [lr, #-0]
     c1c:	3a0e0300 	bcc	381824 <__RW_SIZE__+0x381290>
     c20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c24:	000b3813 	andeq	r3, fp, r3, lsl r8
     c28:	00160f00 	andseq	r0, r6, r0, lsl #30
     c2c:	0b3a0e03 	bleq	e84440 <__RW_SIZE__+0xe83eac>
     c30:	1349053b 	movtne	r0, #38203	; 0x953b
     c34:	0f100000 	svceq	0x00100000
     c38:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c3c:	11000013 	tstne	r0, r3, lsl r0
     c40:	0b0b0104 	bleq	2c1058 <__RW_SIZE__+0x2c0ac4>
     c44:	0b3b0b3a 	bleq	ec3934 <__RW_SIZE__+0xec33a0>
     c48:	00001301 	andeq	r1, r0, r1, lsl #6
     c4c:	03002812 	movweq	r2, #2066	; 0x812
     c50:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c54:	012e1300 	teqeq	lr, r0, lsl #6
     c58:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c5c:	0b3b0b3a 	bleq	ec394c <__RW_SIZE__+0xec33b8>
     c60:	0b201927 	bleq	807104 <__RW_SIZE__+0x806b70>
     c64:	00001301 	andeq	r1, r0, r1, lsl #6
     c68:	00010b14 	andeq	r0, r1, r4, lsl fp
     c6c:	00341500 	eorseq	r1, r4, r0, lsl #10
     c70:	0b3a0803 	bleq	e82c84 <__RW_SIZE__+0xe826f0>
     c74:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c78:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     c7c:	03193f01 	tsteq	r9, #1, 30
     c80:	3b0b3a0e 	blcc	2cf4c0 <__RW_SIZE__+0x2cef2c>
     c84:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     c88:	010b2013 	tsteq	fp, r3, lsl r0
     c8c:	17000013 	smladne	r0, r3, r0, r0
     c90:	08030005 	stmdaeq	r3, {r0, r2}
     c94:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c98:	00001349 	andeq	r1, r0, r9, asr #6
     c9c:	3f012e18 	svccc	0x00012e18
     ca0:	3a0e0319 	bcc	38190c <__RW_SIZE__+0x381378>
     ca4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ca8:	010b2019 	tsteq	fp, r9, lsl r0
     cac:	19000013 	stmdbne	r0, {r0, r1, r4}
     cb0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     cb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cb8:	00001349 	andeq	r1, r0, r9, asr #6
     cbc:	3f012e1a 	svccc	0x00012e1a
     cc0:	3a0e0319 	bcc	38192c <__RW_SIZE__+0x381398>
     cc4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     cc8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ccc:	97184006 	ldrls	r4, [r8, -r6]
     cd0:	13011942 	movwne	r1, #6466	; 0x1942
     cd4:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
     cd8:	11000182 	smlabbne	r0, r2, r1, r0
     cdc:	00133101 	andseq	r3, r3, r1, lsl #2
     ce0:	82891c00 	addhi	r1, r9, #0, 24
     ce4:	01110101 	tsteq	r1, r1, lsl #2
     ce8:	00001331 	andeq	r1, r0, r1, lsr r3
     cec:	01828a1d 	orreq	r8, r2, sp, lsl sl
     cf0:	91180200 	tstls	r8, r0, lsl #4
     cf4:	00001842 	andeq	r1, r0, r2, asr #16
     cf8:	31012e1e 	tstcc	r1, lr, lsl lr
     cfc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d00:	97184006 	ldrls	r4, [r8, -r6]
     d04:	13011942 	movwne	r1, #6466	; 0x1942
     d08:	0b1f0000 	bleq	7c0d10 <__RW_SIZE__+0x7c077c>
     d0c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d10:	20000006 	andcs	r0, r0, r6
     d14:	13310034 	teqne	r1, #52	; 0x34
     d18:	00001702 	andeq	r1, r0, r2, lsl #14
     d1c:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
     d20:	22000017 	andcs	r0, r0, #23
     d24:	01018289 	smlabbeq	r1, r9, r2, r8
     d28:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d2c:	00001301 	andeq	r1, r0, r1, lsl #6
     d30:	03003423 	movweq	r3, #1059	; 0x423
     d34:	3b0b3a0e 	blcc	2cf574 <__RW_SIZE__+0x2cefe0>
     d38:	0013490b 	andseq	r4, r3, fp, lsl #18
     d3c:	002e2400 	eoreq	r2, lr, r0, lsl #8
     d40:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d44:	0b3b0b3a 	bleq	ec3a34 <__RW_SIZE__+0xec34a0>
     d48:	0b201927 	bleq	8071ec <__RW_SIZE__+0x806c58>
     d4c:	1d250000 	stcne	0, cr0, [r5, #-0]
     d50:	11133101 	tstne	r3, r1, lsl #2
     d54:	58061201 	stmdapl	r6, {r0, r9, ip}
     d58:	0105590b 	tsteq	r5, fp, lsl #18
     d5c:	26000013 			; <UNDEFINED> instruction: 0x26000013
     d60:	13310005 	teqne	r1, #5
     d64:	00001702 	andeq	r1, r0, r2, lsl #14
     d68:	31000527 	tstcc	r0, r7, lsr #10
     d6c:	00180213 	andseq	r0, r8, r3, lsl r2
     d70:	002e2800 	eoreq	r2, lr, r0, lsl #16
     d74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d78:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d7c:	0b201927 	bleq	807220 <__RW_SIZE__+0x806c8c>
     d80:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
     d84:	03193f01 	tsteq	r9, #1, 30
     d88:	3b0b3a0e 	blcc	2cf5c8 <__RW_SIZE__+0x2cf034>
     d8c:	11192705 	tstne	r9, r5, lsl #14
     d90:	40061201 	andmi	r1, r6, r1, lsl #4
     d94:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d98:	00001301 	andeq	r1, r0, r1, lsl #6
     d9c:	0300342a 	movweq	r3, #1066	; 0x42a
     da0:	3b0b3a08 	blcc	2cf5c8 <__RW_SIZE__+0x2cf034>
     da4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     da8:	2b000017 	blcs	e0c <__RW_SIZE__+0x878>
     dac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     db0:	17550152 			; <UNDEFINED> instruction: 0x17550152
     db4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     db8:	00001301 	andeq	r1, r0, r1, lsl #6
     dbc:	31011d2c 	tstcc	r1, ip, lsr #26
     dc0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     dc4:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     dc8:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
     dcc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     dd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dd8:	342e0000 	strtcc	r0, [lr], #-0
     ddc:	3a0e0300 	bcc	3819e4 <__RW_SIZE__+0x381450>
     de0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     de4:	000b1c13 	andeq	r1, fp, r3, lsl ip
     de8:	00342f00 	eorseq	r2, r4, r0, lsl #30
     dec:	0b3a0e03 	bleq	e84600 <__RW_SIZE__+0xe8406c>
     df0:	1349053b 	movtne	r0, #38203	; 0x953b
     df4:	00001702 	andeq	r1, r0, r2, lsl #14
     df8:	55010b30 	strpl	r0, [r1, #-2864]	; 0xfffff4d0
     dfc:	00130117 	andseq	r0, r3, r7, lsl r1
     e00:	00343100 	eorseq	r3, r4, r0, lsl #2
     e04:	00001331 	andeq	r1, r0, r1, lsr r3
     e08:	03003432 	movweq	r3, #1074	; 0x432
     e0c:	3b0b3a0e 	blcc	2cf64c <__RW_SIZE__+0x2cf0b8>
     e10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e14:	33000018 	movwcc	r0, #24
     e18:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e20:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     e24:	0000193c 	andeq	r1, r0, ip, lsr r9
     e28:	03003434 	movweq	r3, #1076	; 0x434
     e2c:	3b0b3a0e 	blcc	2cf66c <__RW_SIZE__+0x2cf0d8>
     e30:	3f13490b 	svccc	0x0013490b
     e34:	00193c19 	andseq	r3, r9, r9, lsl ip
     e38:	002e3500 	eoreq	r3, lr, r0, lsl #10
     e3c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e40:	0b3b0b3a 	bleq	ec3b30 <__RW_SIZE__+0xec359c>
     e44:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     e48:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
     e4c:	03193f01 	tsteq	r9, #1, 30
     e50:	3b0b3a0e 	blcc	2cf690 <__RW_SIZE__+0x2cf0fc>
     e54:	3c19270b 	ldccc	7, cr2, [r9], {11}
     e58:	00130119 	andseq	r0, r3, r9, lsl r1
     e5c:	00053700 	andeq	r3, r5, r0, lsl #14
     e60:	00001349 	andeq	r1, r0, r9, asr #6
     e64:	3f002e38 	svccc	0x00002e38
     e68:	3a0e0319 	bcc	381ad4 <__RW_SIZE__+0x381540>
     e6c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e70:	3c134919 	ldccc	9, cr4, [r3], {25}
     e74:	39000019 	stmdbcc	r0, {r0, r3, r4}
     e78:	00000018 	andeq	r0, r0, r8, lsl r0
     e7c:	3f012e3a 	svccc	0x00012e3a
     e80:	3a0e0319 	bcc	381aec <__RW_SIZE__+0x381558>
     e84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e88:	00193c19 	andseq	r3, r9, r9, lsl ip
     e8c:	11010000 	mrsne	r0, (UNDEF: 1)
     e90:	130e2501 	movwne	r2, #58625	; 0xe501
     e94:	1b0e030b 	blne	381ac8 <__RW_SIZE__+0x381534>
     e98:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e9c:	00171006 	andseq	r1, r7, r6
     ea0:	00240200 	eoreq	r0, r4, r0, lsl #4
     ea4:	0b3e0b0b 	bleq	f83ad8 <__RW_SIZE__+0xf83544>
     ea8:	00000e03 	andeq	r0, r0, r3, lsl #28
     eac:	0b002403 	bleq	9ec0 <__RW_SIZE__+0x992c>
     eb0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     eb4:	04000008 	streq	r0, [r0], #-8
     eb8:	0b0b000f 	bleq	2c0efc <__RW_SIZE__+0x2c0968>
     ebc:	00001349 	andeq	r1, r0, r9, asr #6
     ec0:	3f012e05 	svccc	0x00012e05
     ec4:	3a0e0319 	bcc	381b30 <__RW_SIZE__+0x38159c>
     ec8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ecc:	11134919 	tstne	r3, r9, lsl r9
     ed0:	40061201 	andmi	r1, r6, r1, lsl #4
     ed4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ed8:	00001301 	andeq	r1, r0, r1, lsl #6
     edc:	03000506 	movweq	r0, #1286	; 0x506
     ee0:	3b0b3a08 	blcc	2cf708 <__RW_SIZE__+0x2cf174>
     ee4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ee8:	07000017 	smladeq	r0, r7, r0, r0
     eec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ef0:	0b3b0b3a 	bleq	ec3be0 <__RW_SIZE__+0xec364c>
     ef4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ef8:	0000193c 	andeq	r1, r0, ip, lsr r9
     efc:	03003408 	movweq	r3, #1032	; 0x408
     f00:	3b0b3a0e 	blcc	2cf740 <__RW_SIZE__+0x2cf1ac>
     f04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f08:	09000018 	stmdbeq	r0, {r3, r4}
     f0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f10:	0b3b0b3a 	bleq	ec3c00 <__RW_SIZE__+0xec366c>
     f14:	17021349 	strne	r1, [r2, -r9, asr #6]
     f18:	340a0000 	strcc	r0, [sl], #-0
     f1c:	3a0e0300 	bcc	381b24 <__RW_SIZE__+0x381590>
     f20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f24:	3c193f13 	ldccc	15, cr3, [r9], {19}
     f28:	0b000019 	bleq	f94 <__RW_SIZE__+0xa00>
     f2c:	13490035 	movtne	r0, #36917	; 0x9035
     f30:	01000000 	mrseq	r0, (UNDEF: 0)
     f34:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f38:	0e030b13 	vmoveq.32	d3[0], r0
     f3c:	01110e1b 	tsteq	r1, fp, lsl lr
     f40:	17100612 			; <UNDEFINED> instruction: 0x17100612
     f44:	04020000 	streq	r0, [r2], #-0
     f48:	0b0e0301 	bleq	381b54 <__RW_SIZE__+0x3815c0>
     f4c:	3b0b3a0b 	blcc	2cf780 <__RW_SIZE__+0x2cf1ec>
     f50:	0013010b 	andseq	r0, r3, fp, lsl #2
     f54:	00280300 	eoreq	r0, r8, r0, lsl #6
     f58:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     f5c:	16040000 	strne	r0, [r4], -r0
     f60:	3a0e0300 	bcc	381b68 <__RW_SIZE__+0x3815d4>
     f64:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f68:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     f6c:	0b0b0024 	bleq	2c1004 <__RW_SIZE__+0x2c0a70>
     f70:	0e030b3e 	vmoveq.16	d3[0], r0
     f74:	16060000 	strne	r0, [r6], -r0
     f78:	3a0e0300 	bcc	381b80 <__RW_SIZE__+0x3815ec>
     f7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f80:	07000013 	smladeq	r0, r3, r0, r0
     f84:	0b0b0024 	bleq	2c101c <__RW_SIZE__+0x2c0a88>
     f88:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     f8c:	13080000 	movwne	r0, #32768	; 0x8000
     f90:	3a050b01 	bcc	143b9c <__RW_SIZE__+0x143608>
     f94:	010b3b0b 	tsteq	fp, fp, lsl #22
     f98:	09000013 	stmdbeq	r0, {r0, r1, r4}
     f9c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fa0:	0b3b0b3a 	bleq	ec3c90 <__RW_SIZE__+0xec36fc>
     fa4:	0b381349 	bleq	e05cd0 <__RW_SIZE__+0xe0573c>
     fa8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     fac:	3a0e0300 	bcc	381bb4 <__RW_SIZE__+0x381620>
     fb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb4:	00053813 	andeq	r3, r5, r3, lsl r8
     fb8:	000d0b00 	andeq	r0, sp, r0, lsl #22
     fbc:	0b3a0803 	bleq	e82fd0 <__RW_SIZE__+0xe82a3c>
     fc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fc4:	00000538 	andeq	r0, r0, r8, lsr r5
     fc8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     fcc:	00130113 	andseq	r0, r3, r3, lsl r1
     fd0:	00210d00 	eoreq	r0, r1, r0, lsl #26
     fd4:	0b2f1349 	bleq	bc5d00 <__RW_SIZE__+0xbc576c>
     fd8:	350e0000 	strcc	r0, [lr, #-0]
     fdc:	00134900 	andseq	r4, r3, r0, lsl #18
     fe0:	00210f00 	eoreq	r0, r1, r0, lsl #30
     fe4:	052f1349 	streq	r1, [pc, #-841]!	; ca3 <__RW_SIZE__+0x70f>
     fe8:	13100000 	tstne	r0, #0
     fec:	3a0b0b01 	bcc	2c3bf8 <__RW_SIZE__+0x2c3664>
     ff0:	010b3b0b 	tsteq	fp, fp, lsl #22
     ff4:	11000013 	tstne	r0, r3, lsl r0
     ff8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     ffc:	0b3b0b3a 	bleq	ec3cec <__RW_SIZE__+0xec3758>
    1000:	0b381349 	bleq	e05d2c <__RW_SIZE__+0xe05798>
    1004:	26120000 	ldrcs	r0, [r2], -r0
    1008:	00134900 	andseq	r4, r3, r0, lsl #18
    100c:	01131300 	tsteq	r3, r0, lsl #6
    1010:	0b3a0b0b 	bleq	e83c44 <__RW_SIZE__+0xe836b0>
    1014:	1301053b 	movwne	r0, #5435	; 0x153b
    1018:	0d140000 	ldceq	0, cr0, [r4, #-0]
    101c:	3a080300 	bcc	201c24 <__RW_SIZE__+0x201690>
    1020:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1024:	000b3813 	andeq	r3, fp, r3, lsl r8
    1028:	000d1500 	andeq	r1, sp, r0, lsl #10
    102c:	0b3a0e03 	bleq	e84840 <__RW_SIZE__+0xe842ac>
    1030:	1349053b 	movtne	r0, #38203	; 0x953b
    1034:	00000b38 	andeq	r0, r0, r8, lsr fp
    1038:	0b000f16 	bleq	4c98 <__RW_SIZE__+0x4704>
    103c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1040:	012e1700 	teqeq	lr, r0, lsl #14
    1044:	0b3a0e03 	bleq	e84858 <__RW_SIZE__+0xe842c4>
    1048:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    104c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1050:	05180000 	ldreq	r0, [r8, #-0]
    1054:	3a0e0300 	bcc	381c5c <__RW_SIZE__+0x3816c8>
    1058:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    105c:	19000013 	stmdbne	r0, {r0, r1, r4}
    1060:	0e03012e 	adfeqsp	f0, f3, #0.5
    1064:	0b3b0b3a 	bleq	ec3d54 <__RW_SIZE__+0xec37c0>
    1068:	01111927 	tsteq	r1, r7, lsr #18
    106c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1070:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1074:	1a000013 	bne	10c8 <__RW_SIZE__+0xb34>
    1078:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    107c:	0b3b0b3a 	bleq	ec3d6c <__RW_SIZE__+0xec37d8>
    1080:	17021349 	strne	r1, [r2, -r9, asr #6]
    1084:	051b0000 	ldreq	r0, [fp, #-0]
    1088:	3a080300 	bcc	201c90 <__RW_SIZE__+0x2016fc>
    108c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1090:	00170213 	andseq	r0, r7, r3, lsl r2
    1094:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1098:	0b3a0803 	bleq	e830ac <__RW_SIZE__+0xe82b18>
    109c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10a0:	00001702 	andeq	r1, r0, r2, lsl #14
    10a4:	0182891d 	orreq	r8, r2, sp, lsl r9
    10a8:	31011101 	tstcc	r1, r1, lsl #2
    10ac:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    10b0:	0001828a 	andeq	r8, r1, sl, lsl #5
    10b4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    10b8:	1f000018 	svcne	0x00000018
    10bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10c0:	0b3a0e03 	bleq	e848d4 <__RW_SIZE__+0xe84340>
    10c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10cc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    10d0:	00130119 	andseq	r0, r3, r9, lsl r1
    10d4:	82892000 	addhi	r2, r9, #0
    10d8:	01110101 	tsteq	r1, r1, lsl #2
    10dc:	13011331 	movwne	r1, #4913	; 0x1331
    10e0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    10e4:	3a0e0301 	bcc	381cf0 <__RW_SIZE__+0x38175c>
    10e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10ec:	010b2019 	tsteq	fp, r9, lsl r0
    10f0:	22000013 	andcs	r0, r0, #19
    10f4:	08030005 	stmdaeq	r3, {r0, r2}
    10f8:	0b3b0b3a 	bleq	ec3de8 <__RW_SIZE__+0xec3854>
    10fc:	00001349 	andeq	r1, r0, r9, asr #6
    1100:	31011d23 	tstcc	r1, r3, lsr #26
    1104:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1108:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    110c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1110:	00052400 	andeq	r2, r5, r0, lsl #8
    1114:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1118:	05250000 	streq	r0, [r5, #-0]!
    111c:	02133100 	andseq	r3, r3, #0, 2
    1120:	26000017 			; <UNDEFINED> instruction: 0x26000017
    1124:	00018289 	andeq	r8, r1, r9, lsl #5
    1128:	13310111 	teqne	r1, #1073741828	; 0x40000004
    112c:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    1130:	03193f00 	tsteq	r9, #0, 30
    1134:	3b0b3a0e 	blcc	2cf974 <__RW_SIZE__+0x2cf3e0>
    1138:	1119270b 	tstne	r9, fp, lsl #14
    113c:	40061201 	andmi	r1, r6, r1, lsl #4
    1140:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1144:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    1148:	03193f01 	tsteq	r9, #1, 30
    114c:	3b0b3a0e 	blcc	2cf98c <__RW_SIZE__+0x2cf3f8>
    1150:	11192705 	tstne	r9, r5, lsl #14
    1154:	40061201 	andmi	r1, r6, r1, lsl #4
    1158:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    115c:	00001301 	andeq	r1, r0, r1, lsl #6
    1160:	31011d29 	tstcc	r1, r9, lsr #26
    1164:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1168:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    116c:	2a000005 	bcs	1188 <__RW_SIZE__+0xbf4>
    1170:	13310005 	teqne	r1, #5
    1174:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1178:	0300342b 	movweq	r3, #1067	; 0x42b
    117c:	3b0b3a0e 	blcc	2cf9bc <__RW_SIZE__+0x2cf428>
    1180:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1184:	2c000018 	stccs	0, cr0, [r0], {24}
    1188:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    118c:	0b3a0e03 	bleq	e849a0 <__RW_SIZE__+0xe8440c>
    1190:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1194:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1198:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    119c:	2d000019 	stccs	0, cr0, [r0, #-100]	; 0xffffff9c
    11a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11a4:	0b3b0b3a 	bleq	ec3e94 <__RW_SIZE__+0xec3900>
    11a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11ac:	342e0000 	strtcc	r0, [lr], #-0
    11b0:	3a0e0300 	bcc	381db8 <__RW_SIZE__+0x381824>
    11b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11b8:	3c193f13 	ldccc	15, cr3, [r9], {19}
    11bc:	2f000019 	svccs	0x00000019
    11c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    11c4:	0b3b0b3a 	bleq	ec3eb4 <__RW_SIZE__+0xec3920>
    11c8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    11cc:	00001802 	andeq	r1, r0, r2, lsl #16
    11d0:	03003430 	movweq	r3, #1072	; 0x430
    11d4:	3b0b3a0e 	blcc	2cfa14 <__RW_SIZE__+0x2cf480>
    11d8:	3f134905 	svccc	0x00134905
    11dc:	00180219 	andseq	r0, r8, r9, lsl r2
    11e0:	012e3100 	teqeq	lr, r0, lsl #2
    11e4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    11e8:	0b3b0b3a 	bleq	ec3ed8 <__RW_SIZE__+0xec3944>
    11ec:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    11f0:	00001301 	andeq	r1, r0, r1, lsl #6
    11f4:	49000532 	stmdbmi	r0, {r1, r4, r5, r8, sl}
    11f8:	33000013 	movwcc	r0, #19
    11fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1200:	3f002e34 	svccc	0x00002e34
    1204:	3a0e0319 	bcc	381e70 <__RW_SIZE__+0x3818dc>
    1208:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    120c:	3c134919 	ldccc	9, cr4, [r3], {25}
    1210:	00000019 	andeq	r0, r0, r9, lsl r0
    1214:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1218:	030b130e 	movweq	r1, #45838	; 0xb30e
    121c:	110e1b0e 	tstne	lr, lr, lsl #22
    1220:	10061201 	andne	r1, r6, r1, lsl #4
    1224:	02000017 	andeq	r0, r0, #23
    1228:	0b0b0024 	bleq	2c12c0 <__RW_SIZE__+0x2c0d2c>
    122c:	0e030b3e 	vmoveq.16	d3[0], r0
    1230:	16030000 	strne	r0, [r3], -r0
    1234:	3a0e0300 	bcc	381e3c <__RW_SIZE__+0x3818a8>
    1238:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    123c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1240:	0b0b0024 	bleq	2c12d8 <__RW_SIZE__+0x2c0d44>
    1244:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1248:	35050000 	strcc	r0, [r5, #-0]
    124c:	00134900 	andseq	r4, r3, r0, lsl #18
    1250:	00260600 	eoreq	r0, r6, r0, lsl #12
    1254:	00001349 	andeq	r1, r0, r9, asr #6
    1258:	0b011307 	bleq	45e7c <__RW_SIZE__+0x458e8>
    125c:	3b0b3a0b 	blcc	2cfa90 <__RW_SIZE__+0x2cf4fc>
    1260:	00130105 	andseq	r0, r3, r5, lsl #2
    1264:	000d0800 	andeq	r0, sp, r0, lsl #16
    1268:	0b3a0e03 	bleq	e84a7c <__RW_SIZE__+0xe844e8>
    126c:	1349053b 	movtne	r0, #38203	; 0x953b
    1270:	00000b38 	andeq	r0, r0, r8, lsr fp
    1274:	03000d09 	movweq	r0, #3337	; 0xd09
    1278:	3b0b3a08 	blcc	2cfaa0 <__RW_SIZE__+0x2cf50c>
    127c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1280:	0a00000b 	beq	12b4 <__RW_SIZE__+0xd20>
    1284:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1288:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    128c:	00001349 	andeq	r1, r0, r9, asr #6
    1290:	3f012e0b 	svccc	0x00012e0b
    1294:	3a0e0319 	bcc	381f00 <__RW_SIZE__+0x38196c>
    1298:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    129c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    12a0:	96184006 	ldrls	r4, [r8], -r6
    12a4:	13011942 	movwne	r1, #6466	; 0x1942
    12a8:	050c0000 	streq	r0, [ip, #-0]
    12ac:	3a0e0300 	bcc	381eb4 <__RW_SIZE__+0x381920>
    12b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b4:	00170213 	andseq	r0, r7, r3, lsl r2
    12b8:	012e0d00 	teqeq	lr, r0, lsl #26
    12bc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12c0:	0b3b0b3a 	bleq	ec3fb0 <__RW_SIZE__+0xec3a1c>
    12c4:	01111927 	tsteq	r1, r7, lsr #18
    12c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12cc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    12d0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    12d4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    12d8:	0b3a0e03 	bleq	e84aec <__RW_SIZE__+0xe84558>
    12dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    12e8:	0f000019 	svceq	0x00000019
    12ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    12f0:	0b3a0e03 	bleq	e84b04 <__RW_SIZE__+0xe84570>
    12f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12f8:	01111349 	tsteq	r1, r9, asr #6
    12fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1300:	00194297 	mulseq	r9, r7, r2
    1304:	00341000 	eorseq	r1, r4, r0
    1308:	0b3a0e03 	bleq	e84b1c <__RW_SIZE__+0xe84588>
    130c:	1349053b 	movtne	r0, #38203	; 0x953b
    1310:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1314:	01000000 	mrseq	r0, (UNDEF: 0)
    1318:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    131c:	0e030b13 	vmoveq.32	d3[0], r0
    1320:	01110e1b 	tsteq	r1, fp, lsl lr
    1324:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1328:	04020000 	streq	r0, [r2], #-0
    132c:	0b0e0301 	bleq	381f38 <__RW_SIZE__+0x3819a4>
    1330:	3b0b3a0b 	blcc	2cfb64 <__RW_SIZE__+0x2cf5d0>
    1334:	0013010b 	andseq	r0, r3, fp, lsl #2
    1338:	00280300 	eoreq	r0, r8, r0, lsl #6
    133c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1340:	16040000 	strne	r0, [r4], -r0
    1344:	3a0e0300 	bcc	381f4c <__RW_SIZE__+0x3819b8>
    1348:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    134c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1350:	0b0b0024 	bleq	2c13e8 <__RW_SIZE__+0x2c0e54>
    1354:	0e030b3e 	vmoveq.16	d3[0], r0
    1358:	16060000 	strne	r0, [r6], -r0
    135c:	3a0e0300 	bcc	381f64 <__RW_SIZE__+0x3819d0>
    1360:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1364:	07000013 	smladeq	r0, r3, r0, r0
    1368:	0b0b0024 	bleq	2c1400 <__RW_SIZE__+0x2c0e6c>
    136c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1370:	13080000 	movwne	r0, #32768	; 0x8000
    1374:	3a050b01 	bcc	143f80 <__RW_SIZE__+0x1439ec>
    1378:	010b3b0b 	tsteq	fp, fp, lsl #22
    137c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1380:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1384:	0b3b0b3a 	bleq	ec4074 <__RW_SIZE__+0xec3ae0>
    1388:	0b381349 	bleq	e060b4 <__RW_SIZE__+0xe05b20>
    138c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1390:	3a0e0300 	bcc	381f98 <__RW_SIZE__+0x381a04>
    1394:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1398:	00053813 	andeq	r3, r5, r3, lsl r8
    139c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    13a0:	0b3a0803 	bleq	e833b4 <__RW_SIZE__+0xe82e20>
    13a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13a8:	00000538 	andeq	r0, r0, r8, lsr r5
    13ac:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    13b0:	00130113 	andseq	r0, r3, r3, lsl r1
    13b4:	00210d00 	eoreq	r0, r1, r0, lsl #26
    13b8:	0b2f1349 	bleq	bc60e4 <__RW_SIZE__+0xbc5b50>
    13bc:	350e0000 	strcc	r0, [lr, #-0]
    13c0:	00134900 	andseq	r4, r3, r0, lsl #18
    13c4:	00210f00 	eoreq	r0, r1, r0, lsl #30
    13c8:	052f1349 	streq	r1, [pc, #-841]!	; 1087 <__RW_SIZE__+0xaf3>
    13cc:	13100000 	tstne	r0, #0
    13d0:	3a0b0b01 	bcc	2c3fdc <__RW_SIZE__+0x2c3a48>
    13d4:	01053b0b 	tsteq	r5, fp, lsl #22
    13d8:	11000013 	tstne	r0, r3, lsl r0
    13dc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    13e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13e4:	0b381349 	bleq	e06110 <__RW_SIZE__+0xe05b7c>
    13e8:	0d120000 	ldceq	0, cr0, [r2, #-0]
    13ec:	3a0e0300 	bcc	381ff4 <__RW_SIZE__+0x381a60>
    13f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f4:	000b3813 	andeq	r3, fp, r3, lsl r8
    13f8:	012e1300 	teqeq	lr, r0, lsl #6
    13fc:	0b3a0e03 	bleq	e84c10 <__RW_SIZE__+0xe8467c>
    1400:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1404:	13010b20 	movwne	r0, #6944	; 0x1b20
    1408:	05140000 	ldreq	r0, [r4, #-0]
    140c:	3a0e0300 	bcc	382014 <__RW_SIZE__+0x381a80>
    1410:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1414:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1418:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    141c:	0b3a0e03 	bleq	e84c30 <__RW_SIZE__+0xe8469c>
    1420:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1424:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1428:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    142c:	00130119 	andseq	r0, r3, r9, lsl r1
    1430:	00051600 	andeq	r1, r5, r0, lsl #12
    1434:	0b3a0e03 	bleq	e84c48 <__RW_SIZE__+0xe846b4>
    1438:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    143c:	00001702 	andeq	r1, r0, r2, lsl #14
    1440:	03003417 	movweq	r3, #1047	; 0x417
    1444:	3b0b3a08 	blcc	2cfc6c <__RW_SIZE__+0x2cf6d8>
    1448:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    144c:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    1450:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1454:	0b3b0b3a 	bleq	ec4144 <__RW_SIZE__+0xec3bb0>
    1458:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    145c:	05190000 	ldreq	r0, [r9, #-0]
    1460:	3a080300 	bcc	202068 <__RW_SIZE__+0x201ad4>
    1464:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1468:	00170213 	andseq	r0, r7, r3, lsl r2
    146c:	011d1a00 	tsteq	sp, r0, lsl #20
    1470:	01521331 	cmpeq	r2, r1, lsr r3
    1474:	0b581755 	bleq	16071d0 <__RW_SIZE__+0x1606c3c>
    1478:	13010b59 	movwne	r0, #7001	; 0x1b59
    147c:	051b0000 	ldreq	r0, [fp, #-0]
    1480:	02133100 	andseq	r3, r3, #0, 2
    1484:	1c000017 	stcne	0, cr0, [r0], {23}
    1488:	13310005 	teqne	r1, #5
    148c:	00000b1c 	andeq	r0, r0, ip, lsl fp
    1490:	31011d1d 	tstcc	r1, sp, lsl sp
    1494:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1498:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    149c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    14a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14a8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    14ac:	0000193c 	andeq	r1, r0, ip, lsr r9
    14b0:	01110100 	tsteq	r1, r0, lsl #2
    14b4:	0b130e25 	bleq	4c4d50 <__RW_SIZE__+0x4c47bc>
    14b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    14bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14c0:	00001710 	andeq	r1, r0, r0, lsl r7
    14c4:	03010402 	movweq	r0, #5122	; 0x1402
    14c8:	3a0b0b0e 	bcc	2c4108 <__RW_SIZE__+0x2c3b74>
    14cc:	010b3b0b 	tsteq	fp, fp, lsl #22
    14d0:	03000013 	movweq	r0, #19
    14d4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    14d8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    14dc:	03001604 	movweq	r1, #1540	; 0x604
    14e0:	3b0b3a0e 	blcc	2cfd20 <__RW_SIZE__+0x2cf78c>
    14e4:	00134905 	andseq	r4, r3, r5, lsl #18
    14e8:	00240500 	eoreq	r0, r4, r0, lsl #10
    14ec:	0b3e0b0b 	bleq	f84120 <__RW_SIZE__+0xf83b8c>
    14f0:	00000e03 	andeq	r0, r0, r3, lsl #28
    14f4:	03001606 	movweq	r1, #1542	; 0x606
    14f8:	3b0b3a0e 	blcc	2cfd38 <__RW_SIZE__+0x2cf7a4>
    14fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1500:	00240700 	eoreq	r0, r4, r0, lsl #14
    1504:	0b3e0b0b 	bleq	f84138 <__RW_SIZE__+0xf83ba4>
    1508:	00000803 	andeq	r0, r0, r3, lsl #16
    150c:	0b011308 	bleq	46134 <__RW_SIZE__+0x45ba0>
    1510:	3b0b3a05 	blcc	2cfd2c <__RW_SIZE__+0x2cf798>
    1514:	0013010b 	andseq	r0, r3, fp, lsl #2
    1518:	000d0900 	andeq	r0, sp, r0, lsl #18
    151c:	0b3a0e03 	bleq	e84d30 <__RW_SIZE__+0xe8479c>
    1520:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1524:	00000b38 	andeq	r0, r0, r8, lsr fp
    1528:	03000d0a 	movweq	r0, #3338	; 0xd0a
    152c:	3b0b3a0e 	blcc	2cfd6c <__RW_SIZE__+0x2cf7d8>
    1530:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1534:	0b000005 	bleq	1550 <__RW_SIZE__+0xfbc>
    1538:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    153c:	0b3b0b3a 	bleq	ec422c <__RW_SIZE__+0xec3c98>
    1540:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1544:	010c0000 	mrseq	r0, (UNDEF: 12)
    1548:	01134901 	tsteq	r3, r1, lsl #18
    154c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1550:	13490021 	movtne	r0, #36897	; 0x9021
    1554:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1558:	4900350e 	stmdbmi	r0, {r1, r2, r3, r8, sl, ip, sp}
    155c:	0f000013 	svceq	0x00000013
    1560:	13490021 	movtne	r0, #36897	; 0x9021
    1564:	0000052f 	andeq	r0, r0, pc, lsr #10
    1568:	0b011310 	bleq	461b0 <__RW_SIZE__+0x45c1c>
    156c:	3b0b3a0b 	blcc	2cfda0 <__RW_SIZE__+0x2cf80c>
    1570:	00130105 	andseq	r0, r3, r5, lsl #2
    1574:	000d1100 	andeq	r1, sp, r0, lsl #2
    1578:	0b3a0803 	bleq	e8358c <__RW_SIZE__+0xe82ff8>
    157c:	1349053b 	movtne	r0, #38203	; 0x953b
    1580:	00000b38 	andeq	r0, r0, r8, lsr fp
    1584:	03000d12 	movweq	r0, #3346	; 0xd12
    1588:	3b0b3a0e 	blcc	2cfdc8 <__RW_SIZE__+0x2cf834>
    158c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1590:	1300000b 	movwne	r0, #11
    1594:	0b0b000f 	bleq	2c15d8 <__RW_SIZE__+0x2c1044>
    1598:	0f140000 	svceq	0x00140000
    159c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    15a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    15a4:	13490026 	movtne	r0, #36902	; 0x9026
    15a8:	13160000 	tstne	r6, #0
    15ac:	0b0e0301 	bleq	3821b8 <__RW_SIZE__+0x381c24>
    15b0:	3b0b3a0b 	blcc	2cfde4 <__RW_SIZE__+0x2cf850>
    15b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    15b8:	000d1700 	andeq	r1, sp, r0, lsl #14
    15bc:	13490e03 	movtne	r0, #40451	; 0x9e03
    15c0:	19340b38 	ldmdbne	r4!, {r3, r4, r5, r8, r9, fp}
    15c4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    15c8:	03193f01 	tsteq	r9, #1, 30
    15cc:	3b0b3a0e 	blcc	2cfe0c <__RW_SIZE__+0x2cf878>
    15d0:	2019270b 	andscs	r2, r9, fp, lsl #14
    15d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    15d8:	00051900 	andeq	r1, r5, r0, lsl #18
    15dc:	0b3a0803 	bleq	e835f0 <__RW_SIZE__+0xe8305c>
    15e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    15e4:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    15e8:	03193f00 	tsteq	r9, #0, 30
    15ec:	3b0b3a0e 	blcc	2cfe2c <__RW_SIZE__+0x2cf898>
    15f0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    15f4:	000b2013 	andeq	r2, fp, r3, lsl r0
    15f8:	012e1b00 	teqeq	lr, r0, lsl #22
    15fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1600:	0b3b0b3a 	bleq	ec42f0 <__RW_SIZE__+0xec3d5c>
    1604:	13491927 	movtne	r1, #39207	; 0x9927
    1608:	13010b20 	movwne	r0, #6944	; 0x1b20
    160c:	341c0000 	ldrcc	r0, [ip], #-0
    1610:	3a080300 	bcc	202218 <__RW_SIZE__+0x201c84>
    1614:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1618:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    161c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1620:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1624:	0b201927 	bleq	807ac8 <__RW_SIZE__+0x807534>
    1628:	00001301 	andeq	r1, r0, r1, lsl #6
    162c:	0300051e 	movweq	r0, #1310	; 0x51e
    1630:	3b0b3a0e 	blcc	2cfe70 <__RW_SIZE__+0x2cf8dc>
    1634:	00134905 	andseq	r4, r3, r5, lsl #18
    1638:	012e1f00 	teqeq	lr, r0, lsl #30
    163c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1640:	0b3b0b3a 	bleq	ec4330 <__RW_SIZE__+0xec3d9c>
    1644:	01111927 	tsteq	r1, r7, lsr #18
    1648:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    164c:	01194296 			; <UNDEFINED> instruction: 0x01194296
    1650:	20000013 	andcs	r0, r0, r3, lsl r0
    1654:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1658:	0b3b0b3a 	bleq	ec4348 <__RW_SIZE__+0xec3db4>
    165c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1660:	34210000 	strtcc	r0, [r1], #-0
    1664:	3a080300 	bcc	20226c <__RW_SIZE__+0x201cd8>
    1668:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    166c:	00170213 	andseq	r0, r7, r3, lsl r2
    1670:	00342200 	eorseq	r2, r4, r0, lsl #4
    1674:	0b3a0e03 	bleq	e84e88 <__RW_SIZE__+0xe848f4>
    1678:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    167c:	00001702 	andeq	r1, r0, r2, lsl #14
    1680:	03000523 	movweq	r0, #1315	; 0x523
    1684:	3b0b3a0e 	blcc	2cfec4 <__RW_SIZE__+0x2cf930>
    1688:	0013490b 	andseq	r4, r3, fp, lsl #18
    168c:	012e2400 	teqeq	lr, r0, lsl #8
    1690:	01111331 	tsteq	r1, r1, lsr r3
    1694:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1698:	01194297 			; <UNDEFINED> instruction: 0x01194297
    169c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    16a0:	13310005 	teqne	r1, #5
    16a4:	00001802 	andeq	r1, r0, r2, lsl #16
    16a8:	31000526 	tstcc	r0, r6, lsr #10
    16ac:	00170213 	andseq	r0, r7, r3, lsl r2
    16b0:	011d2700 	tsteq	sp, r0, lsl #14
    16b4:	01521331 	cmpeq	r2, r1, lsr r3
    16b8:	0b581755 	bleq	1607414 <__RW_SIZE__+0x1606e80>
    16bc:	00000b59 	andeq	r0, r0, r9, asr fp
    16c0:	3f012e28 	svccc	0x00012e28
    16c4:	3a0e0319 	bcc	382330 <__RW_SIZE__+0x381d9c>
    16c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    16d0:	97184006 	ldrls	r4, [r8, -r6]
    16d4:	13011942 	movwne	r1, #6466	; 0x1942
    16d8:	05290000 	streq	r0, [r9, #-0]!
    16dc:	3a080300 	bcc	2022e4 <__RW_SIZE__+0x201d50>
    16e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16e4:	00180213 	andseq	r0, r8, r3, lsl r2
    16e8:	00182a00 	andseq	r2, r8, r0, lsl #20
    16ec:	342b0000 	strtcc	r0, [fp], #-0
    16f0:	3a080300 	bcc	2022f8 <__RW_SIZE__+0x201d64>
    16f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16f8:	00180213 	andseq	r0, r8, r3, lsl r2
    16fc:	00342c00 	eorseq	r2, r4, r0, lsl #24
    1700:	0b3a0e03 	bleq	e84f14 <__RW_SIZE__+0xe84980>
    1704:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1708:	00001802 	andeq	r1, r0, r2, lsl #16
    170c:	31011d2d 	tstcc	r1, sp, lsr #26
    1710:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1714:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1718:	0013010b 	andseq	r0, r3, fp, lsl #2
    171c:	82892e00 	addhi	r2, r9, #0, 28
    1720:	01110101 	tsteq	r1, r1, lsl #2
    1724:	00001331 	andeq	r1, r0, r1, lsr r3
    1728:	01828a2f 	orreq	r8, r2, pc, lsr #20
    172c:	91180200 	tstls	r8, r0, lsl #4
    1730:	00001842 	andeq	r1, r0, r2, asr #16
    1734:	31002e30 	tstcc	r0, r0, lsr lr
    1738:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    173c:	97184006 	ldrls	r4, [r8, -r6]
    1740:	00001942 	andeq	r1, r0, r2, asr #18
    1744:	31003431 	tstcc	r0, r1, lsr r4
    1748:	32000013 	andcc	r0, r0, #19
    174c:	1331001d 	teqne	r1, #29
    1750:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1754:	0b590b58 	bleq	16444bc <__RW_SIZE__+0x1643f28>
    1758:	0b330000 	bleq	cc1760 <__RW_SIZE__+0xcc11cc>
    175c:	00175501 	andseq	r5, r7, r1, lsl #10
    1760:	001d3400 	andseq	r3, sp, r0, lsl #8
    1764:	01521331 	cmpeq	r2, r1, lsr r3
    1768:	0b581755 	bleq	16074c4 <__RW_SIZE__+0x1606f30>
    176c:	00000b59 	andeq	r0, r0, r9, asr fp
    1770:	31000535 	tstcc	r0, r5, lsr r5
    1774:	000b1c13 	andeq	r1, fp, r3, lsl ip
    1778:	012e3600 	teqeq	lr, r0, lsl #12
    177c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1780:	0b3b0b3a 	bleq	ec4470 <__RW_SIZE__+0xec3edc>
    1784:	13491927 	movtne	r1, #39207	; 0x9927
    1788:	06120111 			; <UNDEFINED> instruction: 0x06120111
    178c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1790:	00130119 	andseq	r0, r3, r9, lsl r1
    1794:	82893700 	addhi	r3, r9, #0, 14
    1798:	01110101 	tsteq	r1, r1, lsl #2
    179c:	13011331 	movwne	r1, #4913	; 0x1331
    17a0:	05380000 	ldreq	r0, [r8, #-0]!
    17a4:	3a080300 	bcc	2023ac <__RW_SIZE__+0x201e18>
    17a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17ac:	00170213 	andseq	r0, r7, r3, lsl r2
    17b0:	011d3900 	tsteq	sp, r0, lsl #18
    17b4:	01111331 	tsteq	r1, r1, lsr r3
    17b8:	0b580612 	bleq	1603008 <__RW_SIZE__+0x1602a74>
    17bc:	00000b59 	andeq	r0, r0, r9, asr fp
    17c0:	0300343a 	movweq	r3, #1082	; 0x43a
    17c4:	3b0b3a0e 	blcc	2d0004 <__RW_SIZE__+0x2cfa70>
    17c8:	3f134905 	svccc	0x00134905
    17cc:	00193c19 	andseq	r3, r9, r9, lsl ip
    17d0:	00343b00 	eorseq	r3, r4, r0, lsl #22
    17d4:	0b3a0e03 	bleq	e84fe8 <__RW_SIZE__+0xe84a54>
    17d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17dc:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    17e0:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
    17e4:	03193f01 	tsteq	r9, #1, 30
    17e8:	3b0b3a0e 	blcc	2d0028 <__RW_SIZE__+0x2cfa94>
    17ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    17f0:	01193c13 	tsteq	r9, r3, lsl ip
    17f4:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
    17f8:	13490005 	movtne	r0, #36869	; 0x9005
    17fc:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    1800:	03193f01 	tsteq	r9, #1, 30
    1804:	3b0b3a0e 	blcc	2d0044 <__RW_SIZE__+0x2cfab0>
    1808:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    180c:	00193c13 	andseq	r3, r9, r3, lsl ip
    1810:	11010000 	mrsne	r0, (UNDEF: 1)
    1814:	11061000 	mrsne	r1, (UNDEF: 6)
    1818:	03011201 	movweq	r1, #4609	; 0x1201
    181c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xfffff4f8
    1820:	00051308 	andeq	r1, r5, r8, lsl #6
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
  14:	00000070 	andeq	r0, r0, r0, ror r0
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01cb0002 	biceq	r0, fp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
  34:	000000a2 	andeq	r0, r0, r2, lsr #1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	06d40002 	ldrbeq	r0, [r4], r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
  54:	0000067e 	andeq	r0, r0, lr, ror r6
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	10f40002 	rscsne	r0, r4, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
  74:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	18920002 	ldmne	r2, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
  94:	0000011a 	andeq	r0, r0, sl, lsl r1
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1ec40002 	cdpne	0, 12, cr0, cr4, cr2, {0}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	08003d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, sp}
  b4:	000030a0 	andeq	r3, r0, r0, lsr #1
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	46f20002 	ldrbtmi	r0, [r2], r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	08006dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, sp, lr}
  d4:	00000072 	andeq	r0, r0, r2, ror r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	48ed0002 	stmiami	sp!, {r1}^
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	08006e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, lr}
  f4:	00001e90 	muleq	r0, r0, lr
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	63ee0002 	mvnvs	r0, #2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	08008cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, pc}
 114:	00000044 	andeq	r0, r0, r4, asr #32
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	64ed0002 	strbtvs	r0, [sp], #2
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
 134:	00000442 	andeq	r0, r0, r2, asr #8
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	77070002 	strvc	r0, [r7, -r2]
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	08009150 	stmdaeq	r0, {r4, r6, r8, ip, pc}
 154:	0000009c 	muleq	r0, ip, r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	788b0002 	stmvc	fp, {r1}
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	080091f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip, pc}
 174:	000001aa 	andeq	r0, r0, sl, lsr #3
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	7f730002 	svcvc	0x00730002
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	080093a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, pc}
 194:	00000362 	andeq	r0, r0, r2, ror #6
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	89220002 	stmdbhi	r2!, {r1}
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	08003000 	stmdaeq	r0, {ip, sp}
 1b4:	000001ec 	andeq	r0, r0, ip, ror #3
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000a7 	andeq	r0, r0, r7, lsr #1
       4:	007f0002 	rsbseq	r0, pc, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f435c3a 	svcvs	0x00435c3a
      20:	6f536564 	svcvs	0x00536564
      24:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      28:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
      2c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      30:	20797265 	rsbscs	r7, r9, r5, ror #4
      34:	202b2b47 	eorcs	r2, fp, r7, asr #22
      38:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
      3c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      44:	61652d65 	cmnvs	r5, r5, ror #26
      48:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      50:	00006564 	andeq	r6, r0, r4, ror #10
      54:	636f6c63 	cmnvs	pc, #25344	; 0x6300
      58:	00632e6b 	rsbeq	r2, r3, fp, ror #28
      5c:	73000000 	movwvc	r0, #0
      60:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      64:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      68:	0000682e 	andeq	r6, r0, lr, lsr #16
      6c:	74730000 	ldrbtvc	r0, [r3], #-0
      70:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      74:	0100682e 	tsteq	r0, lr, lsr #16
      78:	6f630000 	svcvs	0x00630000
      7c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
      80:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
      84:	00000000 	andeq	r0, r0, r0
      88:	02050000 	andeq	r0, r5, #0
      8c:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
      90:	23681315 	cmncs	r8, #1409286144	; 0x54000000
      94:	02003e1d 	andeq	r3, r0, #464	; 0x1d0
      98:	764b0104 	strbvc	r0, [fp], -r4, lsl #2
      9c:	001f215a 	andseq	r2, pc, sl, asr r1	; <UNPREDICTABLE>
      a0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
      a4:	07029f76 	smlsdxeq	r2, r6, pc, r9	; <UNPREDICTABLE>
      a8:	e2010100 	and	r0, r1, #0, 2
      ac:	02000000 	andeq	r0, r0, #0
      b0:	00006500 	andeq	r6, r0, r0, lsl #10
      b4:	fb010200 	blx	408be <__RW_SIZE__+0x4032a>
      b8:	01000d0e 	tsteq	r0, lr, lsl #26
      bc:	00010101 	andeq	r0, r1, r1, lsl #2
      c0:	00010000 	andeq	r0, r1, r0
      c4:	3a430100 	bcc	10c04cc <__RW_SIZE__+0x10bff38>
      c8:	646f435c 	strbtvs	r4, [pc], #-860	; d0 <shift+0xd0>
      cc:	756f5365 	strbvc	r5, [pc, #-869]!	; fffffd6f <MSP_BASE+0xdfffad6f>
      d0:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
      d4:	6f535c79 	svcvs	0x00535c79
      d8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      dc:	47207972 			; <UNDEFINED> instruction: 0x47207972
      e0:	4c202b2b 	stcmi	11, cr2, [r0], #-172	; 0xffffff54
      e4:	2f657469 	svccs	0x00657469
      e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      f4:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
      f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      fc:	63000065 	movwvs	r0, #101	; 0x65
     100:	5f65726f 	svcpl	0x0065726f
     104:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
     108:	00000063 	andeq	r0, r0, r3, rrx
     10c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     110:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     114:	00010068 	andeq	r0, r1, r8, rrx
     118:	05000000 	streq	r0, [r0, #-0]
     11c:	00325c02 	eorseq	r5, r2, r2, lsl #24
     120:	03bf0308 			; <UNDEFINED> instruction: 0x03bf0308
     124:	034e1501 	movteq	r1, #58625	; 0xe501
     128:	4c13010c 	ldfmis	f0, [r3], {12}
     12c:	15010c03 	strne	r0, [r1, #-3075]	; 0xfffff3fd
     130:	010c034e 	tsteq	ip, lr, asr #6
     134:	0a034c13 	beq	d3188 <__RW_SIZE__+0xd2bf4>
     138:	03301501 	teqeq	r0, #4194304	; 0x400000
     13c:	03132e0a 	tsteq	r3, #10, 28	; 0xa0
     140:	30154a0b 	andscc	r4, r5, fp, lsl #20
     144:	132e0a03 	teqne	lr, #12288	; 0x3000
     148:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xfffff4fd
     14c:	2e0a0330 	mcrcs	3, 0, r0, cr10, cr0, {1}
     150:	4a0b0313 	bmi	2c0da4 <__RW_SIZE__+0x2c0810>
     154:	0a033015 	beq	cc1b0 <__RW_SIZE__+0xcbc1c>
     158:	0d03132e 	stceq	3, cr1, [r3, #-184]	; 0xffffff48
     15c:	0322154a 	teqeq	r2, #310378496	; 0x12800000
     160:	2215200b 	andscs	r2, r5, #11
     164:	15200b03 	strne	r0, [r0, #-2819]!	; 0xfffff4fd
     168:	200b0322 	andcs	r0, fp, r2, lsr #6
     16c:	0b033015 	bleq	cc1c8 <__RW_SIZE__+0xcbc34>
     170:	0330152e 	teqeq	r0, #192937984	; 0xb800000
     174:	30152e0b 	andscc	r2, r5, fp, lsl #28
     178:	152e0b03 	strne	r0, [lr, #-2819]!	; 0xfffff4fd
     17c:	2e0c0330 	mcrcs	3, 0, r0, cr12, cr0, {1}
     180:	0c033e15 	stceq	14, cr3, [r3], {21}
     184:	033e1520 	teqeq	lr, #32, 10	; 0x8000000
     188:	3015200c 	andscc	r2, r5, ip
     18c:	01000102 	tsteq	r0, r2, lsl #2
     190:	00021501 	andeq	r1, r2, r1, lsl #10
     194:	e8000200 	stmda	r0, {r9}
     198:	02000000 	andeq	r0, r0, #0
     19c:	0d0efb01 	vstreq	d15, [lr, #-4]
     1a0:	01010100 	mrseq	r0, (UNDEF: 17)
     1a4:	00000001 	andeq	r0, r0, r1
     1a8:	01000001 	tsteq	r0, r1
     1ac:	435c3a43 	cmpmi	ip, #274432	; 0x43000
     1b0:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
     1b4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     1b8:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
     1bc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     1c0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     1c4:	2b2b4720 	blcs	ad1e4c <__RW_SIZE__+0xad18b8>
     1c8:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
     1cc:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     1d0:	63672f62 	cmnvs	r7, #392	; 0x188
     1d4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     1d8:	6f6e2d6d 	svcvs	0x006e2d6d
     1dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     1e0:	2f696261 	svccs	0x00696261
     1e4:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
     1e8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     1ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     1f0:	3a430065 	bcc	10c038c <__RW_SIZE__+0x10bfdf8>
     1f4:	646f435c 	strbtvs	r4, [pc], #-860	; 1fc <__ZI_SIZE__+0x40>
     1f8:	756f5365 	strbvc	r5, [pc, #-869]!	; fffffe9b <MSP_BASE+0xdfffae9b>
     1fc:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
     200:	6f535c79 	svcvs	0x00535c79
     204:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     208:	47207972 			; <UNDEFINED> instruction: 0x47207972
     20c:	4c202b2b 	stcmi	11, cr2, [r0], #-172	; 0xffffff54
     210:	2f657469 	svccs	0x00657469
     214:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     218:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     21c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     220:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
     224:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     228:	67000065 	strvs	r0, [r0, -r5, rrx]
     22c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
     230:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
     234:	00000063 	andeq	r0, r0, r3, rrx
     238:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     23c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
     240:	00010068 	andeq	r0, r1, r8, rrx
     244:	726f6300 	rsbvc	r6, pc, #0, 6
     248:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     24c:	00682e33 	rsbeq	r2, r8, r3, lsr lr
     250:	45000000 	strmi	r0, [r0, #-0]
     254:	5838474e 	ldmdapl	r8!, {r1, r2, r3, r6, r8, r9, sl, lr}
     258:	482e3631 	stmdami	lr!, {r0, r4, r5, r9, sl, ip, sp}
     25c:	00000000 	andeq	r0, r0, r0
     260:	2e64636c 	cdpcs	3, 6, cr6, cr4, cr12, {3}
     264:	00000068 	andeq	r0, r0, r8, rrx
     268:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     26c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     270:	00000200 	andeq	r0, r0, r0, lsl #4
     274:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     278:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     27c:	00003e6e 	andeq	r3, r0, lr, ror #28
     280:	00000000 	andeq	r0, r0, r0
     284:	33000205 	movwcc	r0, #517	; 0x205
     288:	0d030800 	stceq	8, cr0, [r3, #-0]
     28c:	20463201 	subcs	r3, r6, r1, lsl #4
     290:	11034632 	tstne	r3, r2, lsr r6
     294:	bf6b5808 	svclt	0x006b5808
     298:	033c7603 	teqeq	ip, #3145728	; 0x300000
     29c:	1703200a 	strne	r2, [r3, -sl]
     2a0:	2e6b034a 	cdpcs	3, 6, cr0, cr11, cr10, {2}
     2a4:	252e7403 	strcs	r7, [lr, #-1027]!	; 0xfffffbfd
     2a8:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
     2ac:	77033a01 	strvc	r3, [r3, -r1, lsl #20]
     2b0:	41412fe4 	smlalttmi	r2, r1, r4, pc	; <UNPREDICTABLE>
     2b4:	3e667003 	cdpcc	0, 6, cr7, cr6, cr3, {0}
     2b8:	2f4a1803 	svccs	0x004a1803
     2bc:	593e4141 	ldmdbpl	lr!, {r0, r6, r8, lr}
     2c0:	560359ad 	strpl	r5, [r3], -sp, lsr #19
     2c4:	31037290 			; <UNDEFINED> instruction: 0x31037290
     2c8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
     2cc:	4a6b0301 	bmi	1ac0ed8 <__RW_SIZE__+0x1ac0944>
     2d0:	01040200 	mrseq	r0, R12_usr
     2d4:	77826b03 	strvc	r6, [r2, r3, lsl #22]
     2d8:	74140359 	ldrvc	r0, [r4], #-857	; 0xfffffca7
     2dc:	6b039459 	blvs	e5448 <__RW_SIZE__+0xe4eb4>
     2e0:	7f2f89ac 	svcvc	0x002f89ac
     2e4:	1e03ad59 	mcrne	13, 0, sl, cr3, cr9, {2}
     2e8:	1d313c58 	ldcne	12, cr3, [r1, #-352]!	; 0xfffffea0
     2ec:	e4560331 	ldrb	r0, [r6], #-817	; 0xfffffccf
     2f0:	4a0c0337 	bmi	300fd4 <__RW_SIZE__+0x300a40>
     2f4:	292e7903 	stmdbcs	lr!, {r0, r1, r8, fp, ip, sp, lr}
     2f8:	4a1c0333 	bmi	700fcc <__RW_SIZE__+0x700a38>
     2fc:	032e6903 	teqeq	lr, #49152	; 0xc000
     300:	0a032e76 	beq	cbce0 <__RW_SIZE__+0xcb74c>
     304:	3c69039e 	stclcc	3, cr0, [r9], #-632	; 0xfffffd88
     308:	9e081503 	cfsh32ls	mvfx1, mvfx8, #3
     30c:	2fe47703 	svccs	0x00e47703
     310:	70034f41 	andvc	r4, r3, r1, asr #30
     314:	18033e66 	stmdane	r3, {r1, r2, r5, r6, r9, sl, fp, ip, sp}
     318:	41412f4a 	cmpmi	r1, sl, asr #30
     31c:	59ad593e 	stmibpl	sp!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     320:	72905603 	addsvc	r5, r0, #3145728	; 0x300000
     324:	24583703 	ldrbcs	r3, [r8], #-1795	; 0xfffff8fd
     328:	3438401c 	ldrtcc	r4, [r8], #-28	; 0xffffffe4
     32c:	034a5f03 	movteq	r5, #44803	; 0xaf03
     330:	5977826b 	ldmdbpl	r7!, {r0, r1, r3, r5, r6, r9, pc}^
     334:	59741403 	ldmdbpl	r4!, {r0, r1, sl, ip}^
     338:	ac6b0394 	stclge	3, cr0, [fp], #-592	; 0xfffffdb0
     33c:	597f2f89 	ldmdbpl	pc!, {r0, r3, r7, r8, r9, sl, fp, sp}^	; <UNPREDICTABLE>
     340:	4a2a03ad 	bmi	a811fc <__RW_SIZE__+0xa80c68>
     344:	3b411c40 	blcc	104744c <__RW_SIZE__+0x1046eb8>
     348:	72034f1c 	andvc	r4, r3, #28, 30	; 0x70
     34c:	d656032e 	ldrble	r0, [r6], -lr, lsr #6
     350:	58210337 	stmdapl	r1!, {r0, r1, r2, r4, r5, r8, r9}
     354:	03746403 	cmneq	r4, #50331648	; 0x3000000
     358:	69032e1c 	stmdbvs	r3, {r2, r3, r4, r9, sl, fp, sp}
     35c:	5876032e 	ldmdapl	r6!, {r1, r2, r3, r5, r8, r9}^
     360:	03740c03 	cmneq	r4, #768	; 0x300
     364:	03252e79 	teqeq	r5, #1936	; 0x790
     368:	15035869 	strne	r5, [r3, #-2153]	; 0xfffff797
     36c:	7703ac08 	strvc	sl, [r3, -r8, lsl #24]
     370:	4f412ff2 	svcmi	0x00412ff2
     374:	4c747003 	ldclmi	0, cr7, [r4], #-12
     378:	2f3c1803 	svccs	0x003c1803
     37c:	593e4141 	ldmdbpl	lr!, {r0, r6, r8, lr}
     380:	560359ad 	strpl	r5, [r3], -sp, lsr #19
     384:	3703809e 			; <UNDEFINED> instruction: 0x3703809e
     388:	401c2458 	andsmi	r2, ip, r8, asr r4
     38c:	3c110338 	ldccc	3, cr0, [r1], {56}	; 0x38
     390:	034a5403 	movteq	r5, #41987	; 0xa403
     394:	5977826b 	ldmdbpl	r7!, {r0, r1, r3, r5, r6, r9, pc}^
     398:	59821403 	stmibpl	r2, {r0, r1, sl, ip}
     39c:	ac6b03a2 	stclge	3, cr0, [fp], #-648	; 0xfffffd78
     3a0:	597f2f89 	ldmdbpl	pc!, {r0, r3, r7, r8, r9, sl, fp, sp}^	; <UNPREDICTABLE>
     3a4:	000402ad 	andeq	r0, r4, sp, lsr #5
     3a8:	01f80101 	mvnseq	r0, r1, lsl #2
     3ac:	00020000 	andeq	r0, r2, r0
     3b0:	00000081 	andeq	r0, r0, r1, lsl #1
     3b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     3b8:	0101000d 	tsteq	r1, sp
     3bc:	00000101 	andeq	r0, r0, r1, lsl #2
     3c0:	00000100 	andeq	r0, r0, r0, lsl #2
     3c4:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
     3c8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     3cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3d0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     3d4:	756f535c 	strbvc	r5, [pc, #-860]!	; 80 <shift+0x80>
     3d8:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
     3dc:	2b472079 	blcs	11c85c8 <__RW_SIZE__+0x11c8034>
     3e0:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
     3e4:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
     3e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     3ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     3f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     3fc:	6f6a0000 	svcvs	0x006a0000
     400:	656b5f67 	strbvs	r5, [fp, #-3943]!	; 0xfffff099
     404:	00632e79 	rsbeq	r2, r3, r9, ror lr
     408:	63000000 	movwvs	r0, #0
     40c:	5f65726f 	svcpl	0x0065726f
     410:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
     414:	00000068 	andeq	r0, r0, r8, rrx
     418:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     41c:	31663233 	cmncc	r6, r3, lsr r2
     420:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
     424:	00000000 	andeq	r0, r0, r0
     428:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     42c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     430:	00000100 	andeq	r0, r0, r0, lsl #2
     434:	02050000 	andeq	r0, r5, #0
     438:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
     43c:	13010903 	movwne	r0, #6403	; 0x1903
     440:	223d1d5b 	eorscs	r1, sp, #5824	; 0x16c0
     444:	2c223e2c 	stccs	14, cr3, [r2], #-176	; 0xffffff50
     448:	7a03425a 	bvc	d0db8 <__RW_SIZE__+0xd0824>
     44c:	2925592e 	stmdbcs	r5!, {r1, r2, r3, r5, r8, fp, ip, lr}
     450:	674c833e 	smlaldxvs	r8, ip, lr, r3
     454:	03581a03 	cmpeq	r8, #12288	; 0x3000
     458:	2c302078 	ldccs	0, cr2, [r0], #-480	; 0xfffffe20
     45c:	21212c30 	teqcs	r1, r0, lsr ip
     460:	2f3a211f 	svccs	0x003a211f
     464:	2f2f1e2f 	svccs	0x002f1e2f
     468:	1f21213a 	svcne	0x0021213a
     46c:	2f2f3a21 	svccs	0x002f3a21
     470:	032f2f1e 	teqeq	pc, #30, 30	; 0x78
     474:	032c200f 	teqeq	ip, #15
     478:	153f2e0c 	ldrne	r2, [pc, #-3596]!	; fffff674 <MSP_BASE+0xdfffa674>
     47c:	2c302c30 	ldccs	12, cr2, [r0], #-192	; 0xffffff40
     480:	211f2121 	tstcs	pc, r1, lsr #2
     484:	2d1f303a 	ldccs	0, cr3, [pc, #-232]	; 3a4 <__ZI_SIZE__+0x1e8>
     488:	0331312f 	teqeq	r1, #-1073741813	; 0xc000000b
     48c:	2c302079 	ldccs	0, cr2, [r0], #-484	; 0xfffffe1c
     490:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
     494:	02002c01 	andeq	r2, r0, #256	; 0x100
     498:	00210104 	eoreq	r0, r1, r4, lsl #2
     49c:	21010402 	tstcs	r1, r2, lsl #8
     4a0:	01040200 	mrseq	r0, R12_usr
     4a4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
     4a8:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
     4ac:	003a0104 	eorseq	r0, sl, r4, lsl #2
     4b0:	2f010402 	svccs	0x00010402
     4b4:	01040200 	mrseq	r0, R12_usr
     4b8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     4bc:	02001e01 	andeq	r1, r0, #1, 28
     4c0:	002f0104 	eoreq	r0, pc, r4, lsl #2
     4c4:	36010402 	strcc	r0, [r1], -r2, lsl #8
     4c8:	72033f30 	andvc	r3, r3, #48, 30	; 0xc0
     4cc:	302c3020 	eorcc	r3, ip, r0, lsr #32
     4d0:	01040200 	mrseq	r0, R12_usr
     4d4:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     4d8:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
     4dc:	00210104 	eoreq	r0, r1, r4, lsl #2
     4e0:	1f010402 	svcne	0x00010402
     4e4:	01040200 	mrseq	r0, R12_usr
     4e8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
     4ec:	02003a01 	andeq	r3, r0, #4096	; 0x1000
     4f0:	002f0104 	eoreq	r0, pc, r4, lsl #2
     4f4:	2f010402 	svccs	0x00010402
     4f8:	01040200 	mrseq	r0, R12_usr
     4fc:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
     500:	02002f01 	andeq	r2, r0, #1, 30
     504:	0e030104 	adfeqs	f0, f3, f4
     508:	213f2f2e 	teqcs	pc, lr, lsr #30
     50c:	82030204 	andhi	r0, r3, #4, 4	; 0x40000000
     510:	0104200b 	tsteq	r4, fp
     514:	9e759f03 	cdpls	15, 7, cr9, cr5, cr3, {0}
     518:	e1030204 	tst	r3, r4, lsl #4
     51c:	01042e0a 	tsteq	r4, sl, lsl #28
     520:	20759f03 	rsbscs	r9, r5, r3, lsl #30
     524:	e1030204 	tst	r3, r4, lsl #4
     528:	01042e0a 	tsteq	r4, sl, lsl #28
     52c:	2e759f03 	cdpcs	15, 7, cr9, cr5, cr3, {0}
     530:	034c4b4b 	movteq	r4, #52043	; 0xcb4b
     534:	1c5c2e5d 	mrrcne	14, 5, r2, ip, cr13
     538:	3d2b233d 	stccc	3, cr2, [fp, #-244]!	; 0xffffff0c
     53c:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     540:	592a243e 	stmdbpl	sl!, {r1, r2, r3, r4, r5, sl, sp}
     544:	b0030204 	andlt	r0, r3, r4, lsl #4
     548:	0104200b 	tsteq	r4, fp
     54c:	2e74d003 	cdpcs	0, 7, cr13, cr4, cr3, {0}
     550:	03020491 	movweq	r0, #9361	; 0x2491
     554:	04200baf 	strteq	r0, [r0], #-2991	; 0xfffff451
     558:	74d10301 	ldrbvc	r0, [r1], #769	; 0x301
     55c:	02043e2e 	andeq	r3, r4, #736	; 0x2e0
     560:	200bad03 	andcs	sl, fp, r3, lsl #26
     564:	d3030104 	movwle	r0, #12548	; 0x3104
     568:	233d2e74 	teqcs	sp, #116, 28	; 0x740
     56c:	02043d2b 	andeq	r3, r4, #2752	; 0xac0
     570:	200bab03 	andcs	sl, fp, r3, lsl #22
     574:	d5030104 	strle	r0, [r3, #-260]	; 0xfffffefc
     578:	02042e74 	andeq	r2, r4, #116, 28	; 0x740
     57c:	2e0bab03 	vmlacs.f64	d10, d11, d3
     580:	d5030104 	strle	r0, [r3, #-260]	; 0xfffffefc
     584:	04222e74 	strteq	r2, [r2], #-3700	; 0xfffff18c
     588:	0ba90302 	bleq	fea41198 <MSP_BASE+0xdea3c198>
     58c:	03010420 	movweq	r0, #5152	; 0x1420
     590:	4b6674dd 	blmi	199d90c <__RW_SIZE__+0x199d378>
     594:	0302044b 	movweq	r0, #9291	; 0x244b
     598:	044a0aec 	strbeq	r0, [sl], #-2796	; 0xfffff514
     59c:	75a30301 	strvc	r0, [r3, #769]!	; 0x301
     5a0:	0002023c 	andeq	r0, r2, ip, lsr r2
     5a4:	01070101 	tsteq	r7, r1, lsl #2
     5a8:	00020000 	andeq	r0, r2, r0
     5ac:	0000007d 	andeq	r0, r0, sp, ror r0
     5b0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5b4:	0101000d 	tsteq	r1, sp
     5b8:	00000101 	andeq	r0, r0, r1, lsl #2
     5bc:	00000100 	andeq	r0, r0, r0, lsl #2
     5c0:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
     5c4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     5c8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     5cc:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     5d0:	756f535c 	strbvc	r5, [pc, #-860]!	; 27c <__ZI_SIZE__+0xc0>
     5d4:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
     5d8:	2b472079 	blcs	11c87c4 <__RW_SIZE__+0x11c8230>
     5dc:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
     5e0:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
     5e4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     5e8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     5ec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     5f0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     5f4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     5f8:	656b0000 	strbvs	r0, [fp, #-0]!
     5fc:	00632e79 	rsbeq	r2, r3, r9, ror lr
     600:	63000000 	movwvs	r0, #0
     604:	5f65726f 	svcpl	0x0065726f
     608:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
     60c:	00000068 	andeq	r0, r0, r8, rrx
     610:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     614:	31663233 	cmncc	r6, r3, lsr r2
     618:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
     61c:	00000000 	andeq	r0, r0, r0
     620:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     624:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     628:	00000100 	andeq	r0, r0, r0, lsl #2
     62c:	02050000 	andeq	r0, r5, #0
     630:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
     634:	2d591315 	ldclcs	3, cr1, [r9, #-84]	; 0xffffffac
     638:	5b2b3f3d 	blpl	ad0334 <__RW_SIZE__+0xacfda0>
     63c:	6b4b4c67 	blvs	12d37e0 <__RW_SIZE__+0x12d324c>
     640:	0e4d6713 	mcreq	7, 2, r6, cr13, cr3, {0}
     644:	01040200 	mrseq	r0, R12_usr
     648:	02004a06 	andeq	r4, r0, #24576	; 0x6000
     64c:	33060104 	movwcc	r0, #24836	; 0x6104
     650:	7703233d 	smladxvc	r3, sp, r3, r2
     654:	04020001 	streq	r0, [r2], #-1
     658:	004a0601 	subeq	r0, sl, r1, lsl #12
     65c:	06010402 	streq	r0, [r1], -r2, lsl #8
     660:	314a0f03 	cmpcc	sl, r3, lsl #30
     664:	02042131 	andeq	r2, r4, #1073741836	; 0x4000000c
     668:	200bc403 	andcs	ip, fp, r3, lsl #8
     66c:	cf030104 	svcgt	0x00030104
     670:	6f038274 	svcvs	0x00038274
     674:	3d2b5b3c 	vstmdbcc	fp!, {d5-<overflow reg d34>}
     678:	213e2c22 	teqcs	lr, r2, lsr #24
     67c:	2d3d591f 	ldccs	9, cr5, [sp, #-124]!	; 0xffffff84
     680:	3d1d3f59 	ldccc	15, cr3, [sp, #-356]	; 0xfffffe9c
     684:	e4030204 	str	r0, [r3], #-516	; 0xfffffdfc
     688:	0104200b 	tsteq	r4, fp
     68c:	2e749c03 	cdpcs	12, 7, cr9, cr4, cr3, {0}
     690:	e4030204 	str	r0, [r3], #-516	; 0xfffffdfc
     694:	0104200b 	tsteq	r4, fp
     698:	4a749c03 	bmi	1d276ac <__RW_SIZE__+0x1d27118>
     69c:	03020422 	movweq	r0, #9250	; 0x2422
     6a0:	03200be2 	teqeq	r0, #231424	; 0x38800
     6a4:	01042e4b 	tsteq	r4, fp, asr #28
     6a8:	2074dc03 	rsbscs	sp, r4, r3, lsl #24
     6ac:	01000302 	tsteq	r0, r2, lsl #6
     6b0:	00123601 	andseq	r3, r2, r1, lsl #12
     6b4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     6b8:	02000000 	andeq	r0, r0, #0
     6bc:	0d0efb01 	vstreq	d15, [lr, #-4]
     6c0:	01010100 	mrseq	r0, (UNDEF: 17)
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	01000001 	tsteq	r0, r1
     6cc:	435c3a43 	cmpmi	ip, #274432	; 0x43000
     6d0:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
     6d4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6d8:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
     6dc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     6e0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     6e4:	2b2b4720 	blcs	ad236c <__RW_SIZE__+0xad1dd8>
     6e8:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
     6ec:	72612f65 	rsbvc	r2, r1, #404	; 0x194
     6f0:	6f6e2d6d 	svcvs	0x006e2d6d
     6f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     6f8:	2f696261 	svccs	0x00696261
     6fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     700:	00656475 	rsbeq	r6, r5, r5, ror r4
     704:	64636c00 	strbtvs	r6, [r3], #-3072	; 0xfffff400
     708:	0000632e 	andeq	r6, r0, lr, lsr #6
     70c:	74730000 	ldrbtvc	r0, [r3], #-0
     710:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     714:	0100682e 	tsteq	r0, lr, lsr #16
     718:	74730000 	ldrbtvc	r0, [r3], #-0
     71c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     720:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
     724:	00000068 	andeq	r0, r0, r8, rrx
     728:	726f6300 	rsbvc	r6, pc, #0, 6
     72c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     730:	00682e33 	rsbeq	r2, r8, r3, lsr lr
     734:	00000000 	andeq	r0, r0, r0
     738:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     73c:	0308003d 	movweq	r0, #32829	; 0x803d
     740:	130100ed 	movwne	r0, #4333	; 0x10ed
     744:	22592b5b 	subscs	r2, r9, #93184	; 0x16c00
     748:	86675a2c 	strbthi	r5, [r7], -ip, lsr #20
     74c:	59202b03 	stmdbpl	r0!, {r0, r1, r8, r9, fp, sp}
     750:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     754:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     758:	9d034a00 	vstrls	s8, [r3, #-0]
     75c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     760:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     764:	7a035eac 	bvc	d821c <__RW_SIZE__+0xd7c88>
     768:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     76c:	7f94033d 	svcvc	0x0094033d
     770:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     774:	7f950320 	svcvc	0x00950320
     778:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     77c:	7400ec03 	strvc	lr, [r0], #-3075	; 0xfffff3fd
     780:	4d824d03 	stcmi	13, cr4, [r2, #12]
     784:	3d2d5921 	stccc	9, cr5, [sp, #-132]!	; 0xffffff7c
     788:	033c4003 	teqeq	ip, #3
     78c:	032e00c0 	teqeq	lr, #192	; 0xc0
     790:	c1032e40 	tstgt	r3, r0, asr #28
     794:	031f2e00 	tsteq	pc, #0, 28
     798:	211f2041 	tstcs	pc, r1, asr #32
     79c:	3d2faa3d 	vstmdbcc	pc!, {s20-s80}
     7a0:	7400c103 	strvc	ip, [r0], #-259	; 0xfffffefd
     7a4:	4a160383 	bmi	5815b8 <__RW_SIZE__+0x581024>
     7a8:	47035713 	smladmi	r3, r3, r7, r5
     7ac:	203a0320 	eorscs	r0, sl, r0, lsr #6
     7b0:	033c4603 	teqeq	ip, #3145728	; 0x300000
     7b4:	4403d63c 	strmi	sp, [r3], #-1596	; 0xfffff9c4
     7b8:	203c0358 	eorscs	r0, ip, r8, asr r3
     7bc:	033c4403 	teqeq	ip, #50331648	; 0x3000000
     7c0:	133fd63e 	teqne	pc, #65011712	; 0x3e00000
     7c4:	033d2d59 	teqeq	sp, #5696	; 0x1640
     7c8:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     7cc:	034a00e4 	movteq	r0, #41188	; 0xa0e4
     7d0:	1f3c7f9d 	svcne	0x003c7f9d
     7d4:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     7d8:	13a27400 			; <UNDEFINED> instruction: 0x13a27400
     7dc:	033d2d59 	teqeq	sp, #5696	; 0x1640
     7e0:	033c7f94 	teqeq	ip, #148, 30	; 0x250
     7e4:	034a00ec 	movteq	r0, #41196	; 0xa0ec
     7e8:	1f3c7f95 	svcne	0x003c7f95
     7ec:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     7f0:	13a27400 			; <UNDEFINED> instruction: 0x13a27400
     7f4:	212f212d 	teqcs	pc, sp, lsr #2
     7f8:	21211d21 	teqcs	r1, r1, lsr #26
     7fc:	17032221 	strne	r2, [r3, -r1, lsr #4]
     800:	53032f90 	movwpl	r2, #16272	; 0x3f90
     804:	2e2d0320 	cdpcs	3, 2, cr0, cr13, cr0, {1}
     808:	2054031f 	subscs	r0, r4, pc, lsl r3
     80c:	033d2d3d 	teqeq	sp, #3904	; 0xf40
     810:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     814:	034a00e4 	movteq	r0, #41188	; 0xa0e4
     818:	032e7f9c 	teqeq	lr, #156, 30	; 0x270
     81c:	032000e4 	teqeq	r0, #228	; 0xe4
     820:	1f207f9d 	svcne	0x00207f9d
     824:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     828:	035eac00 	cmpeq	lr, #0, 24
     82c:	21412e7a 	hvccs	4842	; 0x12ea
     830:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     834:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     838:	95032000 	strls	r2, [r3, #-0]
     83c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     840:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     844:	82280374 	eorhi	r0, r8, #116, 6	; 0xd0000001
     848:	213c6503 	teqcs	ip, r3, lsl #10
     84c:	032e6703 	teqeq	lr, #786432	; 0xc0000
     850:	031f2e19 	tsteq	pc, #400	; 0x190
     854:	2d3d2068 	ldccs	0, cr2, [sp, #-416]!	; 0xfffffe60
     858:	7f9c033d 	svcvc	0x009c033d
     85c:	00e4033c 	rsceq	r0, r4, ip, lsr r3
     860:	7f9c034a 	svcvc	0x009c034a
     864:	00e4032e 	rsceq	r0, r4, lr, lsr #6
     868:	7f9d0320 	svcvc	0x009d0320
     86c:	3d211f20 	stccc	15, cr1, [r1, #-128]!	; 0xffffff80
     870:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     874:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     878:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     87c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     880:	2000ec03 	andcs	lr, r0, r3, lsl #24
     884:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 880 <__RW_SIZE__+0x2ec>
     888:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     88c:	21820183 	orrcs	r0, r2, r3, lsl #3
     890:	032e5d03 	teqeq	lr, #3, 26	; 0xc0
     894:	031f2e23 	tsteq	pc, #560	; 0x230
     898:	2d3d205e 	ldccs	0, cr2, [sp, #-376]!	; 0xfffffe88
     89c:	7f9c033d 	svcvc	0x009c033d
     8a0:	00e4033c 	rsceq	r0, r4, ip, lsr r3
     8a4:	7f9c034a 	svcvc	0x009c034a
     8a8:	00e4032e 	rsceq	r0, r4, lr, lsr #6
     8ac:	7f9d0320 	svcvc	0x009d0320
     8b0:	3d211f20 	stccc	15, cr1, [r1, #-128]!	; 0xffffff80
     8b4:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     8b8:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     8bc:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     8c0:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     8c4:	2000ec03 	andcs	lr, r0, r3, lsl #24
     8c8:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 8c4 <__RW_SIZE__+0x330>
     8cc:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     8d0:	2f8200fe 	svccs	0x008200fe
     8d4:	03206203 	teqeq	r0, #805306368	; 0x30000000
     8d8:	031f2e1e 	tsteq	pc, #480	; 0x1e0
     8dc:	2d3d2063 	ldccs	0, cr2, [sp, #-396]!	; 0xfffffe74
     8e0:	7f9c033d 	svcvc	0x009c033d
     8e4:	00e4033c 	rsceq	r0, r4, ip, lsr r3
     8e8:	7f9c034a 	svcvc	0x009c034a
     8ec:	00e4032e 	rsceq	r0, r4, lr, lsr #6
     8f0:	7f9d0320 	svcvc	0x009d0320
     8f4:	3d211f20 	stccc	15, cr1, [r1, #-128]!	; 0xffffff80
     8f8:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     8fc:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     900:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     904:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     908:	2000ec03 	andcs	lr, r0, r3, lsl #24
     90c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 908 <__RW_SIZE__+0x374>
     910:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     914:	2f820188 	svccs	0x00820188
     918:	03205803 	teqeq	r0, #196608	; 0x30000
     91c:	031f2e28 	tsteq	pc, #40, 28	; 0x280
     920:	2d3d2059 	ldccs	0, cr2, [sp, #-356]!	; 0xfffffe9c
     924:	7f9c033d 	svcvc	0x009c033d
     928:	00e4033c 	rsceq	r0, r4, ip, lsr r3
     92c:	7f9c034a 	svcvc	0x009c034a
     930:	00e4032e 	rsceq	r0, r4, lr, lsr #6
     934:	7f9d0320 	svcvc	0x009d0320
     938:	3d211f20 	stccc	15, cr1, [r1, #-128]!	; 0xffffff80
     93c:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     940:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     944:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     948:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     94c:	2000ec03 	andcs	lr, r0, r3, lsl #24
     950:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 94c <__RW_SIZE__+0x3b8>
     954:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     958:	03900197 	orrseq	r0, r0, #-1073741787	; 0xc0000025
     95c:	3703014a 	strcc	r0, [r3, -sl, asr #2]
     960:	2e490358 	mcrcs	3, 2, r0, cr9, cr8, {2}
     964:	032e3703 	teqeq	lr, #786432	; 0xc0000
     968:	36032e4a 	strcc	r2, [r3], -sl, asr #28
     96c:	204a032e 	subcs	r0, sl, lr, lsr #6
     970:	9c03212d 	stflss	f2, [r3], {45}	; 0x2d
     974:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     978:	9d035800 	stcls	8, cr5, [r3, #-0]
     97c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     980:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     984:	9e380374 	mrcls	3, 1, r0, cr8, cr4, {3}
     988:	03204503 	teqeq	r0, #12582912	; 0xc00000
     98c:	4403583c 	strmi	r5, [r3], #-2108	; 0xfffff7c4
     990:	2e3c032e 	cdpcs	3, 3, cr0, cr12, cr14, {1}
     994:	032e4503 	teqeq	lr, #12582912	; 0xc00000
     998:	45032e3b 	strmi	r2, [r3, #-3643]	; 0xfffff1c5
     99c:	032f2d20 	teqeq	pc, #32, 26	; 0x800
     9a0:	032e7f9c 	teqeq	lr, #156, 30	; 0x270
     9a4:	035800e4 	cmpeq	r8, #228	; 0xe4
     9a8:	1f4a7f9d 	svcne	0x004a7f9d
     9ac:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     9b0:	036cac00 	cmneq	ip, #0, 24
     9b4:	2f4f2e7a 	svccs	0x004f2e7a
     9b8:	34034b2d 	strcc	r4, [r3], #-2861	; 0xfffff4d3
     9bc:	2e4c0320 	cdpcs	3, 4, cr0, cr12, cr0, {1}
     9c0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 9bc <__RW_SIZE__+0x428>
     9c4:	033d2f1f 	teqeq	sp, #31, 30	; 0x7c
     9c8:	64ac00ec 	strtvs	r0, [ip], #236	; 0xec
     9cc:	2d2f4730 	stccs	7, cr4, [pc, #-192]!	; 914 <__RW_SIZE__+0x380>
     9d0:	7f94034b 	svcvc	0x0094034b
     9d4:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     9d8:	7f950320 	svcvc	0x00950320
     9dc:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     9e0:	ac00ec03 	stcge	12, cr14, [r0], {3}
     9e4:	21393056 	teqcs	r9, r6, asr r0
     9e8:	36033d2d 	strcc	r3, [r3], -sp, lsr #26
     9ec:	204a0320 	subcs	r0, sl, r0, lsr #6
     9f0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 9ec <__RW_SIZE__+0x458>
     9f4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     9f8:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     9fc:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     a00:	7f94033d 	svcvc	0x0094033d
     a04:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     a08:	7f950320 	svcvc	0x00950320
     a0c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     a10:	ac00ec03 	stcge	12, cr14, [r0], {3}
     a14:	03587603 	cmpeq	r8, #3145728	; 0x300000
     a18:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     a1c:	00c2033c 	sbceq	r0, r2, ip, lsr r3
     a20:	7fbe0320 	svcvc	0x00be0320
     a24:	9c033d20 	stcls	13, cr3, [r3], {32}
     a28:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     a2c:	9d032000 	stcls	0, cr2, [r3, #-0]
     a30:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     a34:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     a38:	7a035eac 	bvc	d84f0 <__RW_SIZE__+0xd7f5c>
     a3c:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     a40:	203a033d 	eorscs	r0, sl, sp, lsr r3
     a44:	03204603 	teqeq	r0, #3145728	; 0x300000
     a48:	1f3c7f95 	svcne	0x003c7f95
     a4c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     a50:	3056ac00 	subscc	sl, r6, r0, lsl #24
     a54:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     a58:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     a5c:	2000ec03 	andcs	lr, r0, r3, lsl #24
     a60:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; a5c <__RW_SIZE__+0x4c8>
     a64:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     a68:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     a6c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     a70:	203c033d 	eorscs	r0, ip, sp, lsr r3
     a74:	03204403 	teqeq	r0, #50331648	; 0x3000000
     a78:	1f3c7f95 	svcne	0x003c7f95
     a7c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     a80:	3056ac00 	subscc	sl, r6, r0, lsl #24
     a84:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     a88:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     a8c:	2000ec03 	andcs	lr, r0, r3, lsl #24
     a90:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; a8c <__RW_SIZE__+0x4f8>
     a94:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     a98:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     a9c:	0a035876 	beq	d6c7c <__RW_SIZE__+0xd66e8>
     aa0:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     aa4:	03203703 	teqeq	r0, #786432	; 0xc0000
     aa8:	033d2049 	teqeq	sp, #73	; 0x49
     aac:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     ab0:	032000e4 	teqeq	r0, #228	; 0xe4
     ab4:	1f3c7f9d 	svcne	0x003c7f9d
     ab8:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     abc:	c6037400 	strgt	r7, [r3], -r0, lsl #8
     ac0:	9b038200 	blls	e12c8 <__RW_SIZE__+0xe0d34>
     ac4:	2d312e7f 	ldccs	14, cr2, [r1, #-508]!	; 0xfffffe04
     ac8:	332c1f21 	teqcc	ip, #33, 30	; 0x84
     acc:	2e710330 	mrccs	3, 3, r0, cr1, cr0, {1}
     ad0:	2e40032f 	cdpcs	3, 4, cr0, cr0, cr15, {1}
     ad4:	2f2e3f03 	svccs	0x002e3f03
     ad8:	032e4003 	teqeq	lr, #3
     adc:	006600ce 	rsbeq	r0, r6, lr, asr #1
     ae0:	30010402 	andcc	r0, r1, r2, lsl #8
     ae4:	03062006 	movweq	r2, #24582	; 0x6006
     ae8:	034b206f 	movteq	r2, #45167	; 0xb06f
     aec:	3d2f4a40 	vstmdbcc	pc!, {s8-s71}
     af0:	033d2f72 	teqeq	sp, #456	; 0x1c8
     af4:	033c00c1 	teqeq	ip, #193	; 0xc1
     af8:	7303200d 	movwvc	r2, #12301	; 0x300d
     afc:	2e0d032e 	cdpcs	3, 0, cr0, cr13, cr14, {1}
     b00:	03207303 	teqeq	r0, #201326592	; 0xc000000
     b04:	6e1e200d 	cdpvs	0, 1, cr2, cr14, cr13, {0}
     b08:	d9032dbb 	stmdble	r3, {r0, r1, r3, r4, r5, r7, r8, sl, fp, sp}
     b0c:	b4032e00 	strlt	r2, [r3], #-3584	; 0xfffff200
     b10:	3c03207f 	stccc	0, cr2, [r3], {127}	; 0x7f
     b14:	2e440358 	mcrcs	3, 2, r0, cr4, cr8, {2}
     b18:	032e3c03 	teqeq	lr, #768	; 0x300
     b1c:	3b032e45 	blcc	cc438 <__RW_SIZE__+0xcbea4>
     b20:	2045032e 	subcs	r0, r5, lr, lsr #6
     b24:	9c03212d 	stflss	f2, [r3], {45}	; 0x2d
     b28:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     b2c:	9d035800 	stcls	8, cr5, [r3, #-0]
     b30:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     b34:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     b38:	7a035eac 	bvc	d85f0 <__RW_SIZE__+0xd805c>
     b3c:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     b40:	2034033d 	eorscs	r0, r4, sp, lsr r3
     b44:	03204c03 	teqeq	r0, #768	; 0x300
     b48:	1f3c7f95 	svcne	0x003c7f95
     b4c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     b50:	3056ac00 	subscc	sl, r6, r0, lsl #24
     b54:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     b58:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     b5c:	2000ec03 	andcs	lr, r0, r3, lsl #24
     b60:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; b5c <__RW_SIZE__+0x5c8>
     b64:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     b68:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     b6c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     b70:	7f95033d 	svcvc	0x0095033d
     b74:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     b78:	7f940320 	svcvc	0x00940320
     b7c:	033d213c 	teqeq	sp, #60, 2
     b80:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     b84:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     b88:	7f95033d 	svcvc	0x0095033d
     b8c:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     b90:	7f940320 	svcvc	0x00940320
     b94:	033d213c 	teqeq	sp, #60, 2
     b98:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     b9c:	0a035876 	beq	d6d7c <__RW_SIZE__+0xd67e8>
     ba0:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     ba4:	2000c203 	andcs	ip, r0, r3, lsl #4
     ba8:	207fbe03 	rsbscs	fp, pc, r3, lsl #28
     bac:	7f9c033d 	svcvc	0x009c033d
     bb0:	00e4033c 	rsceq	r0, r4, ip, lsr r3
     bb4:	7f9d0320 	svcvc	0x009d0320
     bb8:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     bbc:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     bc0:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     bc4:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     bc8:	03203a03 	teqeq	r0, #12288	; 0x3000
     bcc:	95032046 	strls	r2, [r3, #-70]	; 0xffffffba
     bd0:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     bd4:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     bd8:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     bdc:	033d2d21 	teqeq	sp, #2112	; 0x840
     be0:	03207f94 	teqeq	r0, #148, 30	; 0x250
     be4:	032000ec 	teqeq	r0, #236	; 0xec
     be8:	1f3c7f95 	svcne	0x003c7f95
     bec:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     bf0:	3056ac00 	subscc	sl, r6, r0, lsl #24
     bf4:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     bf8:	207f9503 	rsbscs	r9, pc, r3, lsl #10
     bfc:	2000eb03 	andcs	lr, r0, r3, lsl #22
     c00:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; bfc <__RW_SIZE__+0x668>
     c04:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     c08:	3056ac00 	subscc	sl, r6, r0, lsl #24
     c0c:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     c10:	207f9503 	rsbscs	r9, pc, r3, lsl #10
     c14:	2000eb03 	andcs	lr, r0, r3, lsl #22
     c18:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; c14 <__RW_SIZE__+0x680>
     c1c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     c20:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     c24:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     c28:	033c7503 	teqeq	ip, #12582912	; 0xc00000
     c2c:	49032037 	stmdbmi	r3, {r0, r1, r2, r4, r5, sp}
     c30:	9c033d20 	stcls	13, cr3, [r3], {32}
     c34:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     c38:	9d032000 	stcls	0, cr2, [r3, #-0]
     c3c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     c40:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     c44:	00cb0374 	sbceq	r0, fp, r4, ror r3
     c48:	61253f82 	smlawbvs	r5, r2, pc, r3	; <UNPREDICTABLE>
     c4c:	2d598425 	cfldrdcs	mvd8, [r9, #-148]	; 0xffffff6c
     c50:	3c7a033d 	ldclcc	3, cr0, [sl], #-244	; 0xffffff0c
     c54:	c2033e26 	andgt	r3, r3, #608	; 0x260
     c58:	be03587e 	mcrlt	8, 0, r5, cr3, cr14, {3}
     c5c:	c2034a01 	andgt	r4, r3, #4096	; 0x1000
     c60:	3d212e7e 	stccc	14, cr2, [r1, #-504]!	; 0xfffffe08
     c64:	003d2172 	eorseq	r2, sp, r2, ror r1
     c68:	03020402 	movweq	r0, #9218	; 0x2402
     c6c:	423c01bc 	eorsmi	r0, ip, #188, 2	; 0x2f
     c70:	344e1394 	strbcc	r1, [lr], #-916	; 0xfffffc6c
     c74:	7a032f1f 	bvc	cc8f8 <__RW_SIZE__+0xcc364>
     c78:	2e0a03c8 	cdpcs	3, 0, cr0, cr10, cr8, {6}
     c7c:	03587603 	cmpeq	r8, #3145728	; 0x300000
     c80:	5b302e0a 	blpl	c0c4b0 <__RW_SIZE__+0xc0bf1c>
     c84:	1d4c2f2b 	stclne	15, cr2, [ip, #-172]	; 0xffffff54
     c88:	2c221e23 	stccs	14, cr1, [r2], #-140	; 0xffffff74
     c8c:	3c7ea603 	ldclcc	6, cr10, [lr], #-12
     c90:	2e01cf03 	cdpcs	15, 0, cr12, cr1, cr3, {0}
     c94:	207eb103 	rsbscs	fp, lr, r3, lsl #2
     c98:	3c01dc03 	stccc	12, cr13, [r1], {3}
     c9c:	2e7ea403 	cdpcs	4, 7, cr10, cr14, cr3, {0}
     ca0:	21723d21 	cmncs	r2, r1, lsr #26
     ca4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
     ca8:	01da0302 	bicseq	r0, sl, r2, lsl #6
     cac:	03a2423c 			; <UNDEFINED> instruction: 0x03a2423c
     cb0:	59207e8f 	stmdbpl	r0!, {r0, r1, r2, r3, r7, r9, sl, fp, ip, sp, lr}
     cb4:	2a403d2d 	bcs	1010170 <__RW_SIZE__+0x100fbdc>
     cb8:	3e2b2367 	cdpcc	3, 2, cr2, cr11, cr7, {3}
     cbc:	213d2d21 	teqcs	sp, r1, lsr #26
     cc0:	03203803 	teqeq	r0, #196608	; 0x30000
     cc4:	35032e48 	strcc	r2, [r3, #-3656]	; 0xfffff1b8
     cc8:	592b234a 	stmdbpl	fp!, {r1, r3, r6, r8, r9, sp}
     ccc:	2001b503 	andcs	fp, r1, r3, lsl #10
     cd0:	207ecb03 	rsbscs	ip, lr, r3, lsl #22
     cd4:	206e035a 	rsbcs	r0, lr, sl, asr r3
     cd8:	59201203 	stmdbpl	r0!, {r0, r1, r9, ip}
     cdc:	03206d03 	teqeq	r0, #3, 26	; 0xc0
     ce0:	b5032e13 	strlt	r2, [r3, #-3603]	; 0xfffff1ed
     ce4:	b8035801 	stmdalt	r3, {r0, fp, ip, lr}
     ce8:	c803207e 	stmdagt	r3, {r1, r2, r3, r4, r5, r6, sp}
     cec:	f2032e01 	vceq.f32	d2, d3, d1
     cf0:	46033c7e 			; <UNDEFINED> instruction: 0x46033c7e
     cf4:	9e3c034a 	cdpls	3, 3, cr0, cr12, cr10, {2}
     cf8:	03584403 	cmpeq	r8, #50331648	; 0x3000000
     cfc:	4403203c 	strmi	r2, [r3], #-60	; 0xffffffc4
     d00:	00c2033c 	sbceq	r0, r2, ip, lsr r3
     d04:	3d2d59d6 	stccc	9, cr5, [sp, #-856]!	; 0xfffffca8
     d08:	3c7f9c03 	ldclcc	12, cr9, [pc], #-12	; d04 <__RW_SIZE__+0x770>
     d0c:	4a00e403 	bmi	39d20 <__RW_SIZE__+0x3978c>
     d10:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
     d14:	2000e403 	andcs	lr, r0, r3, lsl #8
     d18:	207f9d03 	rsbscs	r9, pc, r3, lsl #26
     d1c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     d20:	5ed600e4 	cdppl	0, 13, cr0, cr6, cr4, {7}
     d24:	412e7a03 	teqmi	lr, r3, lsl #20
     d28:	033d2d21 	teqeq	sp, #2112	; 0x840
     d2c:	03207f95 	teqeq	r0, #596	; 0x254
     d30:	032000eb 	teqeq	r0, #235	; 0xeb
     d34:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
     d38:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     d3c:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     d40:	033d2d21 	teqeq	sp, #2112	; 0x840
     d44:	03207f94 	teqeq	r0, #148, 30	; 0x250
     d48:	032000ec 	teqeq	r0, #236	; 0xec
     d4c:	1f3c7f95 	svcne	0x003c7f95
     d50:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     d54:	3056ac00 	subscc	sl, r6, r0, lsl #24
     d58:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     d5c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     d60:	2000ec03 	andcs	lr, r0, r3, lsl #24
     d64:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; d60 <__RW_SIZE__+0x7cc>
     d68:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     d6c:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     d70:	0a035876 	beq	d6f50 <__RW_SIZE__+0xd69bc>
     d74:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     d78:	033d2d21 	teqeq	sp, #2112	; 0x840
     d7c:	03207f9c 	teqeq	r0, #156, 30	; 0x270
     d80:	032000e4 	teqeq	r0, #228	; 0xe4
     d84:	1f3c7f9d 	svcne	0x003c7f9d
     d88:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     d8c:	035eac00 	cmpeq	lr, #0, 24
     d90:	21412e7a 	hvccs	4842	; 0x12ea
     d94:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     d98:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     d9c:	95032000 	strls	r2, [r3, #-0]
     da0:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     da4:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     da8:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     dac:	033d2d21 	teqeq	sp, #2112	; 0x840
     db0:	03207f94 	teqeq	r0, #148, 30	; 0x250
     db4:	032000ec 	teqeq	r0, #236	; 0xec
     db8:	1f3c7f95 	svcne	0x003c7f95
     dbc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     dc0:	3056ac00 	subscc	sl, r6, r0, lsl #24
     dc4:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     dc8:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     dcc:	2000ec03 	andcs	lr, r0, r3, lsl #24
     dd0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; dcc <__RW_SIZE__+0x838>
     dd4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     dd8:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     ddc:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     de0:	7f94033d 	svcvc	0x0094033d
     de4:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     de8:	7f950320 	svcvc	0x00950320
     dec:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     df0:	ac00ec03 	stcge	12, cr14, [r0], {3}
     df4:	03587603 	cmpeq	r8, #3145728	; 0x300000
     df8:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     dfc:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
     e00:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
     e04:	2000e403 	andcs	lr, r0, r3, lsl #8
     e08:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; e04 <__RW_SIZE__+0x870>
     e0c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     e10:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
     e14:	412e7a03 	teqmi	lr, r3, lsl #20
     e18:	033d2d21 	teqeq	sp, #2112	; 0x840
     e1c:	03207f94 	teqeq	r0, #148, 30	; 0x250
     e20:	032000ec 	teqeq	r0, #236	; 0xec
     e24:	1f3c7f95 	svcne	0x003c7f95
     e28:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     e2c:	3056ac00 	subscc	sl, r6, r0, lsl #24
     e30:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     e34:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     e38:	2000ec03 	andcs	lr, r0, r3, lsl #24
     e3c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; e38 <__RW_SIZE__+0x8a4>
     e40:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     e44:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     e48:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     e4c:	7f94033d 	svcvc	0x0094033d
     e50:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     e54:	7f950320 	svcvc	0x00950320
     e58:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     e5c:	ac00ec03 	stcge	12, cr14, [r0], {3}
     e60:	03587603 	cmpeq	r8, #3145728	; 0x300000
     e64:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     e68:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
     e6c:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
     e70:	2000e403 	andcs	lr, r0, r3, lsl #8
     e74:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; e70 <__RW_SIZE__+0x8dc>
     e78:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     e7c:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
     e80:	412e7a03 	teqmi	lr, r3, lsl #20
     e84:	033d2d21 	teqeq	sp, #2112	; 0x840
     e88:	03207f94 	teqeq	r0, #148, 30	; 0x250
     e8c:	032000ec 	teqeq	r0, #236	; 0xec
     e90:	1f3c7f95 	svcne	0x003c7f95
     e94:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     e98:	3056ac00 	subscc	sl, r6, r0, lsl #24
     e9c:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     ea0:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     ea4:	2000ec03 	andcs	lr, r0, r3, lsl #24
     ea8:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; ea4 <__RW_SIZE__+0x910>
     eac:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     eb0:	56d600ec 	ldrbpl	r0, [r6], ip, ror #1
     eb4:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     eb8:	7f95033d 	svcvc	0x0095033d
     ebc:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     ec0:	7f940320 	svcvc	0x00940320
     ec4:	033d213c 	teqeq	sp, #60, 2
     ec8:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     ecc:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     ed0:	7f94033d 	svcvc	0x0094033d
     ed4:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     ed8:	7f950320 	svcvc	0x00950320
     edc:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     ee0:	ac00ec03 	stcge	12, cr14, [r0], {3}
     ee4:	21393056 	teqcs	r9, r6, asr r0
     ee8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     eec:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     ef0:	95032000 	strls	r2, [r3, #-0]
     ef4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     ef8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     efc:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
     f00:	032e0a03 	teqeq	lr, #12288	; 0x3000
     f04:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
     f08:	7f9c033d 	svcvc	0x009c033d
     f0c:	00e40320 	rsceq	r0, r4, r0, lsr #6
     f10:	7f9d0320 	svcvc	0x009d0320
     f14:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     f18:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     f1c:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     f20:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     f24:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     f28:	2000ec03 	andcs	lr, r0, r3, lsl #24
     f2c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; f28 <__RW_SIZE__+0x994>
     f30:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     f34:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     f38:	0a035876 	beq	d7118 <__RW_SIZE__+0xd6b84>
     f3c:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     f40:	033d2d21 	teqeq	sp, #2112	; 0x840
     f44:	03207f9c 	teqeq	r0, #156, 30	; 0x270
     f48:	032000e4 	teqeq	r0, #228	; 0xe4
     f4c:	1f3c7f9d 	svcne	0x003c7f9d
     f50:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     f54:	035ed600 	cmpeq	lr, #0, 12
     f58:	21412e7a 	hvccs	4842	; 0x12ea
     f5c:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
     f60:	eb03207f 	bl	c9164 <__RW_SIZE__+0xc8bd0>
     f64:	94032000 	strls	r2, [r3], #-0
     f68:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
     f6c:	d600ec03 	strle	lr, [r0], -r3, lsl #24
     f70:	21393056 	teqcs	r9, r6, asr r0
     f74:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
     f78:	eb03207f 	bl	c917c <__RW_SIZE__+0xc8be8>
     f7c:	94032000 	strls	r2, [r3], #-0
     f80:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
     f84:	ac00ec03 	stcge	12, cr14, [r0], {3}
     f88:	03587603 	cmpeq	r8, #3145728	; 0x300000
     f8c:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     f90:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
     f94:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
     f98:	2000e403 	andcs	lr, r0, r3, lsl #8
     f9c:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; f98 <__RW_SIZE__+0xa04>
     fa0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     fa4:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
     fa8:	412e7a03 	teqmi	lr, r3, lsl #20
     fac:	033d2d21 	teqeq	sp, #2112	; 0x840
     fb0:	03207f94 	teqeq	r0, #148, 30	; 0x250
     fb4:	032000ec 	teqeq	r0, #236	; 0xec
     fb8:	1f3c7f95 	svcne	0x003c7f95
     fbc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     fc0:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     fc4:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     fc8:	213c7503 	teqcs	ip, r3, lsl #10
     fcc:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     fd0:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     fd4:	9d032000 	stcls	0, cr2, [r3, #-0]
     fd8:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     fdc:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     fe0:	7a035eac 	bvc	d8a98 <__RW_SIZE__+0xd8504>
     fe4:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     fe8:	7f94033d 	svcvc	0x0094033d
     fec:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     ff0:	7f950320 	svcvc	0x00950320
     ff4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     ff8:	ac00ec03 	stcge	12, cr14, [r0], {3}
     ffc:	03587603 	cmpeq	r8, #3145728	; 0x300000
    1000:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
    1004:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
    1008:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    100c:	2000e403 	andcs	lr, r0, r3, lsl #8
    1010:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 100c <__RW_SIZE__+0xa78>
    1014:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1018:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
    101c:	412e7a03 	teqmi	lr, r3, lsl #20
    1020:	033d2d21 	teqeq	sp, #2112	; 0x840
    1024:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1028:	032000ec 	teqeq	r0, #236	; 0xec
    102c:	1f3c7f95 	svcne	0x003c7f95
    1030:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1034:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1038:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    103c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1040:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1044:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1040 <__RW_SIZE__+0xaac>
    1048:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    104c:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1050:	0a035876 	beq	d7230 <__RW_SIZE__+0xd6c9c>
    1054:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1058:	033d2d21 	teqeq	sp, #2112	; 0x840
    105c:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    1060:	032000e4 	teqeq	r0, #228	; 0xe4
    1064:	1f3c7f9d 	svcne	0x003c7f9d
    1068:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    106c:	035eac00 	cmpeq	lr, #0, 24
    1070:	21412e7a 	hvccs	4842	; 0x12ea
    1074:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1078:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    107c:	95032000 	strls	r2, [r3, #-0]
    1080:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1084:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1088:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    108c:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1090:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    1094:	7f9c033d 	svcvc	0x009c033d
    1098:	00e40320 	rsceq	r0, r4, r0, lsr #6
    109c:	7f9d0320 	svcvc	0x009d0320
    10a0:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    10a4:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    10a8:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    10ac:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    10b0:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    10b4:	2000ec03 	andcs	lr, r0, r3, lsl #24
    10b8:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 10b4 <__RW_SIZE__+0xb20>
    10bc:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    10c0:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    10c4:	0a035876 	beq	d72a4 <__RW_SIZE__+0xd6d10>
    10c8:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    10cc:	033d2d21 	teqeq	sp, #2112	; 0x840
    10d0:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    10d4:	032000e4 	teqeq	r0, #228	; 0xe4
    10d8:	1f3c7f9d 	svcne	0x003c7f9d
    10dc:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    10e0:	035eac00 	cmpeq	lr, #0, 24
    10e4:	21412e7a 	hvccs	4842	; 0x12ea
    10e8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    10ec:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    10f0:	95032000 	strls	r2, [r3, #-0]
    10f4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    10f8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    10fc:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1100:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1104:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    1108:	7f9c033d 	svcvc	0x009c033d
    110c:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1110:	7f9d0320 	svcvc	0x009d0320
    1114:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1118:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    111c:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1120:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1124:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1128:	2000ec03 	andcs	lr, r0, r3, lsl #24
    112c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1128 <__RW_SIZE__+0xb94>
    1130:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1134:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1138:	0a035876 	beq	d7318 <__RW_SIZE__+0xd6d84>
    113c:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1140:	033d2d21 	teqeq	sp, #2112	; 0x840
    1144:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    1148:	032000e4 	teqeq	r0, #228	; 0xe4
    114c:	1f3c7f9d 	svcne	0x003c7f9d
    1150:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1154:	035eac00 	cmpeq	lr, #0, 24
    1158:	21412e7a 	hvccs	4842	; 0x12ea
    115c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1160:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1164:	95032000 	strls	r2, [r3, #-0]
    1168:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    116c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1170:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1174:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1178:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    117c:	7f9c033d 	svcvc	0x009c033d
    1180:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1184:	7f9d0320 	svcvc	0x009d0320
    1188:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    118c:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    1190:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1194:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1198:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    119c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    11a0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 119c <__RW_SIZE__+0xc08>
    11a4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    11a8:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    11ac:	0a035876 	beq	d738c <__RW_SIZE__+0xd6df8>
    11b0:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    11b4:	033d2d21 	teqeq	sp, #2112	; 0x840
    11b8:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    11bc:	032000e4 	teqeq	r0, #228	; 0xe4
    11c0:	1f3c7f9d 	svcne	0x003c7f9d
    11c4:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    11c8:	035eac00 	cmpeq	lr, #0, 24
    11cc:	21412e7a 	hvccs	4842	; 0x12ea
    11d0:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    11d4:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    11d8:	95032000 	strls	r2, [r3, #-0]
    11dc:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    11e0:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    11e4:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    11e8:	032e0a03 	teqeq	lr, #12288	; 0x3000
    11ec:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    11f0:	7f9c033d 	svcvc	0x009c033d
    11f4:	00e40320 	rsceq	r0, r4, r0, lsr #6
    11f8:	7f9d0320 	svcvc	0x009d0320
    11fc:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1200:	d600e403 	strle	lr, [r0], -r3, lsl #8
    1204:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1208:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    120c:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    1210:	2000eb03 	andcs	lr, r0, r3, lsl #22
    1214:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 1210 <__RW_SIZE__+0xc7c>
    1218:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    121c:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1220:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1224:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1228:	2000ec03 	andcs	lr, r0, r3, lsl #24
    122c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1228 <__RW_SIZE__+0xc94>
    1230:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1234:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1238:	0a035876 	beq	d7418 <__RW_SIZE__+0xd6e84>
    123c:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1240:	033d2d21 	teqeq	sp, #2112	; 0x840
    1244:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    1248:	032000e4 	teqeq	r0, #228	; 0xe4
    124c:	1f3c7f9d 	svcne	0x003c7f9d
    1250:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1254:	035eac00 	cmpeq	lr, #0, 24
    1258:	21412e7a 	hvccs	4842	; 0x12ea
    125c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1260:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1264:	95032000 	strls	r2, [r3, #-0]
    1268:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    126c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1270:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1274:	033d2d21 	teqeq	sp, #2112	; 0x840
    1278:	03207f94 	teqeq	r0, #148, 30	; 0x250
    127c:	032000ec 	teqeq	r0, #236	; 0xec
    1280:	1f3c7f95 	svcne	0x003c7f95
    1284:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1288:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
    128c:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
    1290:	213c7503 	teqcs	ip, r3, lsl #10
    1294:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
    1298:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
    129c:	9d032000 	stcls	0, cr2, [r3, #-0]
    12a0:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    12a4:	00e4033d 	rsceq	r0, r4, sp, lsr r3
    12a8:	7a035ed6 	bvc	d8e08 <__RW_SIZE__+0xd8874>
    12ac:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
    12b0:	7f95033d 	svcvc	0x0095033d
    12b4:	00eb0320 	rsceq	r0, fp, r0, lsr #6
    12b8:	7f940320 	svcvc	0x00940320
    12bc:	033d213c 	teqeq	sp, #60, 2
    12c0:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    12c4:	0a035876 	beq	d74a4 <__RW_SIZE__+0xd6f10>
    12c8:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    12cc:	033d2d21 	teqeq	sp, #2112	; 0x840
    12d0:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    12d4:	032000e4 	teqeq	r0, #228	; 0xe4
    12d8:	1f3c7f9d 	svcne	0x003c7f9d
    12dc:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    12e0:	035eac00 	cmpeq	lr, #0, 24
    12e4:	21412e7a 	hvccs	4842	; 0x12ea
    12e8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    12ec:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    12f0:	95032000 	strls	r2, [r3, #-0]
    12f4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    12f8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    12fc:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1300:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1304:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    1308:	7f9c033d 	svcvc	0x009c033d
    130c:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1310:	7f9d0320 	svcvc	0x009d0320
    1314:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1318:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    131c:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1320:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1324:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1328:	2000ec03 	andcs	lr, r0, r3, lsl #24
    132c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1328 <__RW_SIZE__+0xd94>
    1330:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1334:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1338:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    133c:	7f94033d 	svcvc	0x0094033d
    1340:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1344:	7f950320 	svcvc	0x00950320
    1348:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    134c:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1350:	21393056 	teqcs	r9, r6, asr r0
    1354:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1358:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    135c:	95032000 	strls	r2, [r3, #-0]
    1360:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1364:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1368:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    136c:	033d2d21 	teqeq	sp, #2112	; 0x840
    1370:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1374:	032000ec 	teqeq	r0, #236	; 0xec
    1378:	1f3c7f95 	svcne	0x003c7f95
    137c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1380:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1384:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1388:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    138c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1390:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 138c <__RW_SIZE__+0xdf8>
    1394:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1398:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    139c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    13a0:	7f94033d 	svcvc	0x0094033d
    13a4:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    13a8:	7f950320 	svcvc	0x00950320
    13ac:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    13b0:	ac00ec03 	stcge	12, cr14, [r0], {3}
    13b4:	21393056 	teqcs	r9, r6, asr r0
    13b8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    13bc:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    13c0:	95032000 	strls	r2, [r3, #-0]
    13c4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    13c8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    13cc:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    13d0:	033d2d21 	teqeq	sp, #2112	; 0x840
    13d4:	03207f94 	teqeq	r0, #148, 30	; 0x250
    13d8:	032000ec 	teqeq	r0, #236	; 0xec
    13dc:	1f3c7f95 	svcne	0x003c7f95
    13e0:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    13e4:	3056ac00 	subscc	sl, r6, r0, lsl #24
    13e8:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    13ec:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    13f0:	2000ec03 	andcs	lr, r0, r3, lsl #24
    13f4:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 13f0 <__RW_SIZE__+0xe5c>
    13f8:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    13fc:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1400:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1404:	7f94033d 	svcvc	0x0094033d
    1408:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    140c:	7f950320 	svcvc	0x00950320
    1410:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1414:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1418:	21393056 	teqcs	r9, r6, asr r0
    141c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1420:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1424:	95032000 	strls	r2, [r3, #-0]
    1428:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    142c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1430:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1434:	033d2d21 	teqeq	sp, #2112	; 0x840
    1438:	03207f94 	teqeq	r0, #148, 30	; 0x250
    143c:	032000ec 	teqeq	r0, #236	; 0xec
    1440:	1f3c7f95 	svcne	0x003c7f95
    1444:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1448:	3056ac00 	subscc	sl, r6, r0, lsl #24
    144c:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1450:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1454:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1458:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1454 <__RW_SIZE__+0xec0>
    145c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1460:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1464:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1468:	7f94033d 	svcvc	0x0094033d
    146c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1470:	7f950320 	svcvc	0x00950320
    1474:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1478:	ac00ec03 	stcge	12, cr14, [r0], {3}
    147c:	21393056 	teqcs	r9, r6, asr r0
    1480:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1484:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1488:	95032000 	strls	r2, [r3, #-0]
    148c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1490:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1494:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1498:	032e0a03 	teqeq	lr, #12288	; 0x3000
    149c:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    14a0:	7f9c033d 	svcvc	0x009c033d
    14a4:	00e40320 	rsceq	r0, r4, r0, lsr #6
    14a8:	7f9d0320 	svcvc	0x009d0320
    14ac:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    14b0:	d600e403 	strle	lr, [r0], -r3, lsl #8
    14b4:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    14b8:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    14bc:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    14c0:	2000eb03 	andcs	lr, r0, r3, lsl #22
    14c4:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 14c0 <__RW_SIZE__+0xf2c>
    14c8:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    14cc:	3056ac00 	subscc	sl, r6, r0, lsl #24
    14d0:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    14d4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    14d8:	2000ec03 	andcs	lr, r0, r3, lsl #24
    14dc:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 14d8 <__RW_SIZE__+0xf44>
    14e0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    14e4:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    14e8:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    14ec:	7f94033d 	svcvc	0x0094033d
    14f0:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    14f4:	7f950320 	svcvc	0x00950320
    14f8:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    14fc:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1500:	21393056 	teqcs	r9, r6, asr r0
    1504:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1508:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    150c:	95032000 	strls	r2, [r3, #-0]
    1510:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1514:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1518:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    151c:	033d2d21 	teqeq	sp, #2112	; 0x840
    1520:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1524:	032000ec 	teqeq	r0, #236	; 0xec
    1528:	1f3c7f95 	svcne	0x003c7f95
    152c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1530:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1534:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1538:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    153c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1540:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 153c <__RW_SIZE__+0xfa8>
    1544:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1548:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    154c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1550:	7f94033d 	svcvc	0x0094033d
    1554:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1558:	7f950320 	svcvc	0x00950320
    155c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1560:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1564:	21393056 	teqcs	r9, r6, asr r0
    1568:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    156c:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1570:	95032000 	strls	r2, [r3, #-0]
    1574:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1578:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    157c:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1580:	033d2d21 	teqeq	sp, #2112	; 0x840
    1584:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1588:	032000ec 	teqeq	r0, #236	; 0xec
    158c:	1f3c7f95 	svcne	0x003c7f95
    1590:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1594:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1598:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    159c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    15a0:	2000ec03 	andcs	lr, r0, r3, lsl #24
    15a4:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 15a0 <__RW_SIZE__+0x100c>
    15a8:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    15ac:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    15b0:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    15b4:	7f94033d 	svcvc	0x0094033d
    15b8:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    15bc:	7f950320 	svcvc	0x00950320
    15c0:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    15c4:	ac00ec03 	stcge	12, cr14, [r0], {3}
    15c8:	21393056 	teqcs	r9, r6, asr r0
    15cc:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    15d0:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    15d4:	95032000 	strls	r2, [r3, #-0]
    15d8:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    15dc:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    15e0:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    15e4:	033d2d21 	teqeq	sp, #2112	; 0x840
    15e8:	03207f94 	teqeq	r0, #148, 30	; 0x250
    15ec:	032000ec 	teqeq	r0, #236	; 0xec
    15f0:	1f3c7f95 	svcne	0x003c7f95
    15f4:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    15f8:	3056ac00 	subscc	sl, r6, r0, lsl #24
    15fc:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1600:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1604:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1608:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1604 <__RW_SIZE__+0x1070>
    160c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1610:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1614:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1618:	7f94033d 	svcvc	0x0094033d
    161c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1620:	7f950320 	svcvc	0x00950320
    1624:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1628:	ac00ec03 	stcge	12, cr14, [r0], {3}
    162c:	03587603 	cmpeq	r8, #3145728	; 0x300000
    1630:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
    1634:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
    1638:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    163c:	2000e403 	andcs	lr, r0, r3, lsl #8
    1640:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 163c <__RW_SIZE__+0x10a8>
    1644:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1648:	5ed600e4 	cdppl	0, 13, cr0, cr6, cr4, {7}
    164c:	412e7a03 	teqmi	lr, r3, lsl #20
    1650:	033d2d21 	teqeq	sp, #2112	; 0x840
    1654:	03207f95 	teqeq	r0, #596	; 0x254
    1658:	032000eb 	teqeq	r0, #235	; 0xeb
    165c:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
    1660:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1664:	393056d6 	ldmdbcc	r0!, {r1, r2, r4, r6, r7, r9, sl, ip, lr}
    1668:	033d2d21 	teqeq	sp, #2112	; 0x840
    166c:	03207f95 	teqeq	r0, #596	; 0x254
    1670:	032000eb 	teqeq	r0, #235	; 0xeb
    1674:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
    1678:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    167c:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1680:	033d2d21 	teqeq	sp, #2112	; 0x840
    1684:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1688:	032000ec 	teqeq	r0, #236	; 0xec
    168c:	1f3c7f95 	svcne	0x003c7f95
    1690:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1694:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1698:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    169c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    16a0:	2000ec03 	andcs	lr, r0, r3, lsl #24
    16a4:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 16a0 <__RW_SIZE__+0x110c>
    16a8:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    16ac:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    16b0:	0a035876 	beq	d7890 <__RW_SIZE__+0xd72fc>
    16b4:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    16b8:	033d2d21 	teqeq	sp, #2112	; 0x840
    16bc:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    16c0:	032000e4 	teqeq	r0, #228	; 0xe4
    16c4:	1f3c7f9d 	svcne	0x003c7f9d
    16c8:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    16cc:	035ed600 	cmpeq	lr, #0, 12
    16d0:	21412e7a 	hvccs	4842	; 0x12ea
    16d4:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    16d8:	eb03207f 	bl	c98dc <__RW_SIZE__+0xc9348>
    16dc:	94032000 	strls	r2, [r3], #-0
    16e0:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    16e4:	d600ec03 	strle	lr, [r0], -r3, lsl #24
    16e8:	21393056 	teqcs	r9, r6, asr r0
    16ec:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    16f0:	eb03207f 	bl	c98f4 <__RW_SIZE__+0xc9360>
    16f4:	94032000 	strls	r2, [r3], #-0
    16f8:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    16fc:	d600ec03 	strle	lr, [r0], -r3, lsl #24
    1700:	21393056 	teqcs	r9, r6, asr r0
    1704:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    1708:	eb03207f 	bl	c990c <__RW_SIZE__+0xc9378>
    170c:	94032000 	strls	r2, [r3], #-0
    1710:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    1714:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1718:	21393056 	teqcs	r9, r6, asr r0
    171c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1720:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1724:	95032000 	strls	r2, [r3, #-0]
    1728:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    172c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1730:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1734:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1738:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    173c:	7f9c033d 	svcvc	0x009c033d
    1740:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1744:	7f9d0320 	svcvc	0x009d0320
    1748:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    174c:	9e00e403 	cdpls	4, 0, cr14, cr0, cr3, {0}
    1750:	587fbb03 	ldmdapl	pc!, {r0, r1, r8, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    1754:	2e00c503 	cfsh32cs	mvfx12, mvfx0, #3
    1758:	3c7fbb03 	ldclcc	11, cr11, [pc], #-12	; 1754 <__RW_SIZE__+0x11c0>
    175c:	ba00c203 	blt	31f70 <__RW_SIZE__+0x319dc>
    1760:	033d2d59 	teqeq	sp, #5696	; 0x1640
    1764:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
    1768:	034a00e4 	movteq	r0, #41188	; 0xa0e4
    176c:	032e7f9c 	teqeq	lr, #156, 30	; 0x270
    1770:	032000e4 	teqeq	r0, #228	; 0xe4
    1774:	1f207f9d 	svcne	0x00207f9d
    1778:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    177c:	f6039e00 			; <UNDEFINED> instruction: 0xf6039e00
    1780:	ed038201 	sfm	f0, 1, [r3, #-4]
    1784:	d8032e7e 	stmdale	r3, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    1788:	c0033c7e 	andgt	r3, r3, lr, ror ip
    178c:	3f83d602 	svccc	0x0083d602
    1790:	207dfe03 	rsbscs	pc, sp, r3, lsl #28
    1794:	03583c03 	cmpeq	r8, #768	; 0x300
    1798:	3c032e44 	stccc	14, cr2, [r3], {68}	; 0x44
    179c:	2e45032e 	cdpcs	3, 4, cr0, cr5, cr14, {1}
    17a0:	032e3b03 	teqeq	lr, #3072	; 0xc00
    17a4:	212d2045 	teqcs	sp, r5, asr #32
    17a8:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    17ac:	5800e403 	stmdapl	r0, {r0, r1, sl, sp, lr, pc}
    17b0:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 17ac <__RW_SIZE__+0x1218>
    17b4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    17b8:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
    17bc:	412e7a03 	teqmi	lr, r3, lsl #20
    17c0:	033d2d21 	teqeq	sp, #2112	; 0x840
    17c4:	4c032034 	stcmi	0, cr2, [r3], {52}	; 0x34
    17c8:	7f950320 	svcvc	0x00950320
    17cc:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    17d0:	ac00ec03 	stcge	12, cr14, [r0], {3}
    17d4:	2f473064 	svccs	0x00473064
    17d8:	94034b2d 	strls	r4, [r3], #-2861	; 0xfffff4d3
    17dc:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    17e0:	95032000 	strls	r2, [r3, #-0]
    17e4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    17e8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    17ec:	473064ac 	ldrmi	r6, [r0, -ip, lsr #9]!
    17f0:	034b2d2f 	movteq	r2, #48431	; 0xbd2f
    17f4:	032e7f95 	teqeq	lr, #596	; 0x254
    17f8:	032000eb 	teqeq	r0, #235	; 0xeb
    17fc:	214a7f94 			; <UNDEFINED> instruction: 0x214a7f94
    1800:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1804:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1808:	033d2d21 	teqeq	sp, #2112	; 0x840
    180c:	03207f95 	teqeq	r0, #596	; 0x254
    1810:	032000eb 	teqeq	r0, #235	; 0xeb
    1814:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
    1818:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    181c:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1820:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1824:	c2033c75 	andgt	r3, r3, #29952	; 0x7500
    1828:	be032000 	cdplt	0, 0, cr2, cr3, cr0, {0}
    182c:	033d207f 	teqeq	sp, #127	; 0x7f
    1830:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
    1834:	032000e4 	teqeq	r0, #228	; 0xe4
    1838:	1f3c7f9d 	svcne	0x003c7f9d
    183c:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1840:	035eac00 	cmpeq	lr, #0, 24
    1844:	21412e7a 	hvccs	4842	; 0x12ea
    1848:	3a033d2d 	bcc	d0d04 <__RW_SIZE__+0xd0770>
    184c:	20460320 	subcs	r0, r6, r0, lsr #6
    1850:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 184c <__RW_SIZE__+0x12b8>
    1854:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1858:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    185c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1860:	7f94033d 	svcvc	0x0094033d
    1864:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1868:	7f950320 	svcvc	0x00950320
    186c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1870:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1874:	21393056 	teqcs	r9, r6, asr r0
    1878:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    187c:	eb03207f 	bl	c9a80 <__RW_SIZE__+0xc94ec>
    1880:	94032000 	strls	r2, [r3], #-0
    1884:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    1888:	ac00ec03 	stcge	12, cr14, [r0], {3}
    188c:	21393056 	teqcs	r9, r6, asr r0
    1890:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    1894:	eb03207f 	bl	c9a98 <__RW_SIZE__+0xc9504>
    1898:	94032000 	strls	r2, [r3], #-0
    189c:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    18a0:	ac00ec03 	stcge	12, cr14, [r0], {3}
    18a4:	03587603 	cmpeq	r8, #3145728	; 0x300000
    18a8:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
    18ac:	2037033c 	eorscs	r0, r7, ip, lsr r3
    18b0:	3d204903 	stccc	9, cr4, [r0, #-12]!
    18b4:	3c7f9c03 	ldclcc	12, cr9, [pc], #-12	; 18b0 <__RW_SIZE__+0x131c>
    18b8:	2000e403 	andcs	lr, r0, r3, lsl #8
    18bc:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 18b8 <__RW_SIZE__+0x1324>
    18c0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    18c4:	03ac00e4 			; <UNDEFINED> instruction: 0x03ac00e4
    18c8:	2603585a 			; <UNDEFINED> instruction: 0x2603585a
    18cc:	3c59032e 	mrrccc	3, 2, r0, r9, cr14
    18d0:	213d2d21 	teqcs	sp, r1, lsr #26
    18d4:	3c41031f 	mcrrcc	3, 1, r0, r1, cr15
    18d8:	aa3d211f 	bge	f49d5c <__RW_SIZE__+0xf497c8>
    18dc:	c1033d2f 	tstgt	r3, pc, lsr #26
    18e0:	a5037400 	strge	r7, [r3, #-1024]	; 0xfffffc00
    18e4:	02028202 	andeq	r8, r2, #536870912	; 0x20000000
    18e8:	9b010100 	blls	41cf0 <__RW_SIZE__+0x4175c>
    18ec:	02000000 	andeq	r0, r0, #0
    18f0:	00007d00 	andeq	r7, r0, r0, lsl #26
    18f4:	fb010200 	blx	420fe <__RW_SIZE__+0x41b6a>
    18f8:	01000d0e 	tsteq	r0, lr, lsl #26
    18fc:	00010101 	andeq	r0, r1, r1, lsl #2
    1900:	00010000 	andeq	r0, r1, r0
    1904:	3a430100 	bcc	10c1d0c <__RW_SIZE__+0x10c1778>
    1908:	646f435c 	strbtvs	r4, [pc], #-860	; 1910 <__RW_SIZE__+0x137c>
    190c:	756f5365 	strbvc	r5, [pc, #-869]!	; 15af <__RW_SIZE__+0x101b>
    1910:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    1914:	6f535c79 	svcvs	0x00535c79
    1918:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    191c:	47207972 			; <UNDEFINED> instruction: 0x47207972
    1920:	4c202b2b 	stcmi	11, cr2, [r0], #-172	; 0xffffff54
    1924:	2f657469 	svccs	0x00657469
    1928:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    192c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1930:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1934:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    1938:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    193c:	6c000065 	stcvs	0, cr0, [r0], {101}	; 0x65
    1940:	632e6465 	teqvs	lr, #1694498816	; 0x65000000
    1944:	00000000 	andeq	r0, r0, r0
    1948:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    194c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1950:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1954:	73000000 	movwvc	r0, #0
    1958:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    195c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1960:	63000001 	movwvs	r0, #1
    1964:	5f65726f 	svcpl	0x0065726f
    1968:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    196c:	00000068 	andeq	r0, r0, r8, rrx
    1970:	05000000 	streq	r0, [r0, #-0]
    1974:	006dc402 	rsbeq	ip, sp, r2, lsl #8
    1978:	59131508 	ldmdbpl	r3, {r3, r8, sl, ip}
    197c:	6a833d2d 	bvs	fe0d0e38 <MSP_BASE+0xde0cbe38>
    1980:	a213da13 	andsge	sp, r3, #77824	; 0x13000
    1984:	00090213 	andeq	r0, r9, r3, lsl r2
    1988:	064c0101 	strbeq	r0, [ip], -r1, lsl #2
    198c:	00020000 	andeq	r0, r2, r0
    1990:	000000b4 	strheq	r0, [r0], -r4
    1994:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1998:	0101000d 	tsteq	r1, sp
    199c:	00000101 	andeq	r0, r0, r1, lsl #2
    19a0:	00000100 	andeq	r0, r0, r0, lsl #2
    19a4:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
    19a8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    19ac:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    19b0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    19b4:	756f535c 	strbvc	r5, [pc, #-860]!	; 1660 <__RW_SIZE__+0x10cc>
    19b8:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    19bc:	2b472079 	blcs	11c9ba8 <__RW_SIZE__+0x11c9614>
    19c0:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
    19c4:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
    19c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    19cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    19d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    19d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    19d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    19dc:	616d0000 	cmnvs	sp, r0
    19e0:	632e6e69 	teqvs	lr, #1680	; 0x690
    19e4:	00000000 	andeq	r0, r0, r0
    19e8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    19ec:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    19f0:	00000100 	andeq	r0, r0, r0, lsl #2
    19f4:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    19f8:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    19fc:	0000682e 	andeq	r6, r0, lr, lsr #16
    1a00:	74730000 	ldrbtvc	r0, [r3], #-0
    1a04:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1a08:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    1a0c:	00000068 	andeq	r0, r0, r8, rrx
    1a10:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    1a14:	5f656369 	svcpl	0x00656369
    1a18:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1a1c:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	2e64636c 	cdpcs	3, 6, cr6, cr4, cr12, {3}
    1a28:	00000068 	andeq	r0, r0, r8, rrx
    1a2c:	61726700 	cmnvs	r2, r0, lsl #14
    1a30:	63696870 	cmnvs	r9, #112, 16	; 0x700000
    1a34:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1a38:	73000000 	movwvc	r0, #0
    1a3c:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    1a40:	00682e62 	rsbeq	r2, r8, r2, ror #28
    1a44:	00000001 	andeq	r0, r0, r1
    1a48:	38020500 	stmdacc	r2, {r8, sl}
    1a4c:	0308006e 	movweq	r0, #32878	; 0x806e
    1a50:	210100cd 	smlabtcs	r1, sp, r0, r0
    1a54:	4c2f2f2f 	stcmi	15, cr2, [pc], #-188	; 19a0 <__RW_SIZE__+0x140c>
    1a58:	32212d83 	eorcc	r2, r1, #8384	; 0x20c0
    1a5c:	f715f715 	pldw	[r5, -r5, lsl r7]
    1a60:	0823f715 	stmdaeq	r3!, {r0, r2, r4, r8, r9, sl, ip, sp, lr, pc}
    1a64:	242c221e 	strtcs	r2, [ip], #-542	; 0xfffffde2
    1a68:	30212f08 	eorcc	r2, r1, r8, lsl #30
    1a6c:	2b30221c 	blcs	c0a2e4 <__RW_SIZE__+0xc09d50>
    1a70:	3c790322 	ldclcc	3, cr0, [r9], #-136	; 0xffffff78
    1a74:	23740f03 	cmncs	r4, #3, 30
    1a78:	2c221e08 	stccs	14, cr1, [r2], #-32	; 0xffffffe0
    1a7c:	3b130824 	blcc	4c3b14 <__RW_SIZE__+0x4c3580>
    1a80:	2f1fc930 	svccs	0x001fc930
    1a84:	033c7903 	teqeq	ip, #49152	; 0xc000
    1a88:	7616660e 	ldrvc	r6, [r6], -lr, lsl #12
    1a8c:	1c3a304c 	ldcne	0, cr3, [sl], #-304	; 0xfffffed0
    1a90:	483e4c76 	ldmdami	lr!, {r1, r2, r4, r5, r6, sl, fp, lr}
    1a94:	3e4c761c 	mcrcc	6, 2, r7, cr12, cr12, {0}
    1a98:	3e761c48 	cdpcc	12, 7, cr1, cr6, cr8, {2}
    1a9c:	761c483e 			; <UNDEFINED> instruction: 0x761c483e
    1aa0:	0c034c3e 	stceq	12, cr4, [r3], {62}	; 0x3e
    1aa4:	301f3d4a 	andscc	r3, pc, sl, asr #26
    1aa8:	301f3d56 	andscc	r3, pc, r6, asr sp	; <UNPREDICTABLE>
    1aac:	301f3d56 	andscc	r3, pc, r6, asr sp	; <UNPREDICTABLE>
    1ab0:	301f3d56 	andscc	r3, pc, r6, asr sp	; <UNPREDICTABLE>
    1ab4:	221f2f56 	andscs	r2, pc, #344	; 0x158
    1ab8:	3f587603 	svccc	0x00587603
    1abc:	3b2c302c 	blcc	b0db74 <__RW_SIZE__+0xb0d5e0>
    1ac0:	2c302c3f 	ldccs	12, cr2, [r0], #-252	; 0xffffff04
    1ac4:	302c3f3b 	eorcc	r3, ip, fp, lsr pc
    1ac8:	2c3f3b2c 	ldccs	11, cr3, [pc], #-176	; 1a20 <__RW_SIZE__+0x148c>
    1acc:	3d3b2c30 	ldccc	12, cr2, [fp, #-192]!	; 0xffffff40
    1ad0:	03301e3e 	teqeq	r0, #992	; 0x3e0
    1ad4:	76153c0f 	ldrvc	r3, [r5], -pc, lsl #24
    1ad8:	46301f3d 	shasxmi	r1, r0, sp
    1adc:	301f3d76 	andscc	r3, pc, r6, ror sp	; <UNPREDICTABLE>
    1ae0:	1f3d7646 	svcne	0x003d7646
    1ae4:	3d764630 	ldclcc	6, cr4, [r6, #-192]!	; 0xffffff40
    1ae8:	7646301f 			; <UNDEFINED> instruction: 0x7646301f
    1aec:	5e301f3d 	mrcpl	15, 1, r1, cr0, cr13, {1}
    1af0:	08236323 	stmdaeq	r3!, {r0, r1, r5, r8, r9, sp, lr}
    1af4:	848e2be9 	strhi	r2, [lr], #3049	; 0xbe9
    1af8:	84aa84aa 	strthi	r8, [sl], #1194	; 0x4aa
    1afc:	3faf84aa 	svccc	0x00af84aa
    1b00:	00304841 	eorseq	r4, r0, r1, asr #16
    1b04:	06010402 	streq	r0, [r1], -r2, lsl #8
    1b08:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1b0c:	7d590605 	ldclvc	6, cr0, [r9, #-20]	; 0xffffffec
    1b10:	08234d36 	stmdaeq	r3!, {r1, r2, r4, r5, r8, sl, fp, lr}
    1b14:	2e76037c 	mrccs	3, 3, r0, cr6, cr12, {3}
    1b18:	3e1f7524 	cfmul64cc	mvdx7, mvdx15, mvdx4
    1b1c:	2421211e 	strtcs	r2, [r1], #-286	; 0xfffffee2
    1b20:	032e7603 	teqeq	lr, #3145728	; 0x300000
    1b24:	1512080d 	ldrne	r0, [r2, #-2061]	; 0xfffff7f3
    1b28:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1b2c:	1f2f6837 	svcne	0x002f6837
    1b30:	2f683723 	svccs	0x00683723
    1b34:	6837231f 	ldmdavs	r7!, {r0, r1, r2, r3, r4, r8, r9, sp}
    1b38:	37231f2f 	strcc	r1, [r3, -pc, lsr #30]!
    1b3c:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1b40:	1f2f6837 	svcne	0x002f6837
    1b44:	2f683723 	svccs	0x00683723
    1b48:	6837231f 	ldmdavs	r7!, {r0, r1, r2, r3, r4, r8, r9, sp}
    1b4c:	37231f2f 	strcc	r1, [r3, -pc, lsr #30]!
    1b50:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1b54:	1f2f6837 	svcne	0x002f6837
    1b58:	55235f23 	strpl	r5, [r3, #-3875]!	; 0xfffff0dd
    1b5c:	17440223 	strbne	r0, [r4, -r3, lsr #4]
    1b60:	8e768e2b 	cdphi	14, 7, cr8, cr6, cr11, {1}
    1b64:	8e768e76 	mrchi	14, 3, r8, cr6, cr6, {3}
    1b68:	8e768e76 	mrchi	14, 3, r8, cr6, cr6, {3}
    1b6c:	8e848e76 	mcrhi	14, 4, r8, cr4, cr6, {3}
    1b70:	93848e84 	orrls	r8, r4, #132, 28	; 0x840
    1b74:	572f213f 			; <UNDEFINED> instruction: 0x572f213f
    1b78:	251b2140 	ldrcs	r2, [fp, #-320]	; 0xfffffec0
    1b7c:	312f2f2a 	teqcc	pc, sl, lsr #30
    1b80:	2e7ed903 	cdpcs	9, 7, cr13, cr14, cr3, {0}
    1b84:	9e03a6a6 	cfmadd32ls	mvax5, mvfx10, mvfx3, mvfx6
    1b88:	2f20ba01 	svccs	0x0020ba01
    1b8c:	01040200 	mrseq	r0, R12_usr
    1b90:	3d063c06 	stccc	12, cr3, [r6, #-24]	; 0xffffffe8
    1b94:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
    1b98:	001f0104 	andseq	r0, pc, r4, lsl #2
    1b9c:	75010402 	strvc	r0, [r1, #-1026]	; 0xfffffbfe
    1ba0:	01040200 	mrseq	r0, R12_usr
    1ba4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    1ba8:	21314b01 	teqcs	r1, r1, lsl #22
    1bac:	13082181 	movwne	r2, #33153	; 0x8181
    1bb0:	153f3d08 	ldrne	r3, [pc, #-3336]!	; eb0 <__RW_SIZE__+0x91c>
    1bb4:	0824b0e6 	stmdaeq	r4!, {r1, r2, r5, r6, r7, ip, sp, pc}
    1bb8:	2e76037c 	mrccs	3, 3, r0, cr6, cr12, {3}
    1bbc:	211e4c24 	tstcs	lr, r4, lsr #24
    1bc0:	2421211f 	strtcs	r2, [r1], #-287	; 0xfffffee1
    1bc4:	032e7603 	teqeq	lr, #3145728	; 0x300000
    1bc8:	0903f20d 	stmdbeq	r3, {r0, r2, r3, r9, ip, sp, lr, pc}
    1bcc:	20770366 	rsbscs	r0, r7, r6, ror #6
    1bd0:	03200903 	teqeq	r0, #49152	; 0xc000
    1bd4:	2b039e55 	blcs	e9530 <__RW_SIZE__+0xe8f9c>
    1bd8:	3c550320 	mrrccc	3, 2, r0, r5, cr0
    1bdc:	03202b03 	teqeq	r0, #3072	; 0xc00
    1be0:	2b033c55 	blcs	d0d3c <__RW_SIZE__+0xd07a8>
    1be4:	20550320 	subscs	r0, r5, r0, lsr #6
    1be8:	03582b03 	cmpeq	r8, #3072	; 0xc00
    1bec:	2b035855 	blcs	d7d48 <__RW_SIZE__+0xd77b4>
    1bf0:	2e550320 	cdpcs	3, 5, cr0, cr5, cr0, {1}
    1bf4:	032e2b03 	teqeq	lr, #3072	; 0xc00
    1bf8:	2d03ac55 	stccs	12, cr10, [r3, #-340]	; 0xfffffeac
    1bfc:	53035808 	movwpl	r5, #14344	; 0x3808
    1c00:	582d0320 	stmdapl	sp!, {r5, r8, r9}
    1c04:	40587a03 	subsmi	r7, r8, r3, lsl #20
    1c08:	032e5503 	teqeq	lr, #12582912	; 0xc00000
    1c0c:	55032e2b 	strpl	r2, [r3, #-3627]	; 0xfffff1d5
    1c10:	202b032e 	eorcs	r0, fp, lr, lsr #6
    1c14:	03205503 	teqeq	r0, #12582912	; 0xc00000
    1c18:	5503ac2b 	strpl	sl, [r3, #-3115]	; 0xfffff3d5
    1c1c:	9e2b0358 	mcrls	3, 1, r0, cr11, cr8, {2}
    1c20:	03585503 	cmpeq	r8, #12582912	; 0xc00000
    1c24:	55039e2b 	strpl	r9, [r3, #-3627]	; 0xfffff1d5
    1c28:	2e2b0320 	cdpcs	3, 2, cr0, cr11, cr0, {1}
    1c2c:	032e5503 	teqeq	lr, #12582912	; 0xc00000
    1c30:	5503202b 	strpl	r2, [r3, #-43]	; 0xffffffd5
    1c34:	ac2b0320 	stcge	3, cr0, [fp], #-128	; 0xffffff80
    1c38:	03205503 	teqeq	r0, #12582912	; 0xc00000
    1c3c:	55032e2b 	strpl	r2, [r3, #-3627]	; 0xfffff1d5
    1c40:	202b032e 	eorcs	r0, fp, lr, lsr #6
    1c44:	03205503 	teqeq	r0, #12582912	; 0xc00000
    1c48:	032fe42d 	teqeq	pc, #754974720	; 0x2d000000
    1c4c:	11032e77 	tstne	r3, r7, ror lr
    1c50:	084a0382 	stmdaeq	sl, {r1, r7, r8, r9}^
    1c54:	d63e0320 	ldrtle	r0, [lr], -r0, lsr #6
    1c58:	00207803 	eoreq	r7, r0, r3, lsl #16
    1c5c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c60:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    1c64:	4a030601 	bmi	c3470 <__RW_SIZE__+0xc2edc>
    1c68:	064a062e 	strbeq	r0, [sl], -lr, lsr #12
    1c6c:	00903803 	addseq	r3, r0, r3, lsl #16
    1c70:	06010402 	streq	r0, [r1], -r2, lsl #8
    1c74:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    1c78:	412f0601 	teqmi	pc, r1, lsl #12
    1c7c:	033c7603 	teqeq	ip, #3145728	; 0x300000
    1c80:	bc032e10 	stclt	14, cr2, [r3], {16}
    1c84:	c403c87f 	strgt	ip, [r3], #-2175	; 0xfffff781
    1c88:	bc037400 	cfstrslt	mvf7, [r3], {-0}
    1c8c:	c403587f 	strgt	r5, [r3], #-2175	; 0xfffff781
    1c90:	bc035800 	stclt	8, cr5, [r3], {-0}
    1c94:	c403ac7f 	strgt	sl, [r3], #-3199	; 0xfffff381
    1c98:	bc035800 	stclt	8, cr5, [r3], {-0}
    1c9c:	c403ac7f 	strgt	sl, [r3], #-3199	; 0xfffff381
    1ca0:	bc035800 	stclt	8, cr5, [r3], {-0}
    1ca4:	c403ac7f 	strgt	sl, [r3], #-3199	; 0xfffff381
    1ca8:	02004a00 	andeq	r4, r0, #0, 20
    1cac:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
    1cb0:	01040200 	mrseq	r0, R12_usr
    1cb4:	7fbc0306 	svcvc	0x00bc0306
    1cb8:	00d0034a 	sbcseq	r0, r0, sl, asr #6
    1cbc:	7fb0034a 	svcvc	0x00b0034a
    1cc0:	00d2032e 	sbcseq	r0, r2, lr, lsr #6
    1cc4:	03302a9e 	teqeq	r0, #647168	; 0x9e000
    1cc8:	032e7fb0 	teqeq	lr, #176, 30	; 0x2c0
    1ccc:	2fac00d2 	svccs	0x00ac00d2
    1cd0:	2e780321 	cdpcs	3, 7, cr0, cr8, cr1, {1}
    1cd4:	03580c03 	cmpeq	r8, #768	; 0x300
    1cd8:	034a7fa8 	movteq	r7, #44968	; 0xafa8
    1cdc:	53034a2d 	movwpl	r4, #14893	; 0x3a2d
    1ce0:	662d034a 	strtvs	r0, [sp], -sl, asr #6
    1ce4:	2e52032f 	cdpcs	3, 5, cr0, cr2, cr15, {1}
    1ce8:	2f662d03 	svccs	0x00662d03
    1cec:	032e5203 	teqeq	lr, #805306368	; 0x30000000
    1cf0:	032d662e 	teqeq	sp, #48234496	; 0x2e00000
    1cf4:	c6033c53 			; <UNDEFINED> instruction: 0xc6033c53
    1cf8:	2f3d8200 	svccs	0x003d8200
    1cfc:	2e7fb803 	cdpcs	8, 7, cr11, cr15, cr3, {0}
    1d00:	8200c603 	andhi	ip, r0, #3145728	; 0x300000
    1d04:	b8032f3d 	stmdalt	r3, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    1d08:	c6032e7f 			; <UNDEFINED> instruction: 0xc6032e7f
    1d0c:	3d3dac00 	ldccc	12, cr10, [sp, #-0]
    1d10:	2e7fb803 	cdpcs	8, 7, cr11, cr15, cr3, {0}
    1d14:	ac00c603 	stcge	6, cr12, [r0], {3}
    1d18:	b8033d3d 	stmdalt	r3, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    1d1c:	c6032e7f 			; <UNDEFINED> instruction: 0xc6032e7f
    1d20:	3d3dac00 	ldccc	12, cr10, [sp, #-0]
    1d24:	302e7203 	eorcc	r7, lr, r3, lsl #4
    1d28:	01040200 	mrseq	r0, R12_usr
    1d2c:	02003c06 	andeq	r3, r0, #1536	; 0x600
    1d30:	2f060104 	svccs	0x00060104
    1d34:	01040200 	mrseq	r0, R12_usr
    1d38:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
    1d3c:	20032f01 	andcs	r2, r3, r1, lsl #30
    1d40:	485a2774 	ldmdami	sl, {r2, r4, r5, r6, r8, r9, sl, sp}^
    1d44:	30484122 	subcc	r4, r8, r2, lsr #2
    1d48:	21224c1e 	teqcs	r2, lr, lsl ip
    1d4c:	00ae212d 	adceq	r2, lr, sp, lsr #2
    1d50:	06010402 	streq	r0, [r1], -r2, lsl #8
    1d54:	5b350674 	blpl	d4372c <__RW_SIZE__+0xd43198>
    1d58:	004b842b 	subeq	r8, fp, fp, lsr #8
    1d5c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1d60:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    1d64:	00220603 	eoreq	r0, r2, r3, lsl #12
    1d68:	06010402 	streq	r0, [r1], -r2, lsl #8
    1d6c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1d70:	03310601 	teqeq	r1, #1048576	; 0x100000
    1d74:	1e2e7ed1 	mcrne	14, 1, r7, cr14, cr1, {6}
    1d78:	2c1e1f31 	ldccs	15, cr1, [lr], {49}	; 0x31
    1d7c:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    1d80:	01b10302 			; <UNDEFINED> instruction: 0x01b10302
    1d84:	40012802 	andmi	r2, r1, r2, lsl #16
    1d88:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    1d8c:	06820601 	streq	r0, [r2], r1, lsl #12
    1d90:	907ed603 	rsbsls	sp, lr, r3, lsl #12
    1d94:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1d98:	1f2f6837 	svcne	0x002f6837
    1d9c:	2f683723 	svccs	0x00683723
    1da0:	6837231f 	ldmdavs	r7!, {r0, r1, r2, r3, r4, r8, r9, sp}
    1da4:	37231f2f 	strcc	r1, [r3, -pc, lsr #30]!
    1da8:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1dac:	1f2f6837 	svcne	0x002f6837
    1db0:	2f683723 	svccs	0x00683723
    1db4:	6837231f 	ldmdavs	r7!, {r0, r1, r2, r3, r4, r8, r9, sp}
    1db8:	37231f2f 	strcc	r1, [r3, -pc, lsr #30]!
    1dbc:	231f2f68 	tstcs	pc, #104, 30	; 0x1a0
    1dc0:	1f2f6837 	svcne	0x002f6837
    1dc4:	7faa0323 	svcvc	0x00aa0323
    1dc8:	305a763c 	subscc	r7, sl, ip, lsr r6
    1dcc:	5a762a3a 	bpl	1d8c6bc <__RW_SIZE__+0x1d8c128>
    1dd0:	762a483e 			; <UNDEFINED> instruction: 0x762a483e
    1dd4:	2a483e5a 	bcs	1211744 <__RW_SIZE__+0x12111b0>
    1dd8:	483e5a76 	ldmdami	lr!, {r1, r2, r4, r5, r6, r9, fp, ip, lr}
    1ddc:	3e5a762a 	cdpcc	6, 5, cr7, cr10, cr10, {1}
    1de0:	2e1b0348 	cdpcs	3, 1, cr0, cr11, cr8, {2}
    1de4:	301f3d76 	andscc	r3, pc, r6, ror sp	; <UNPREDICTABLE>
    1de8:	1f3d7646 	svcne	0x003d7646
    1dec:	3d764630 	ldclcc	6, cr4, [r6, #-192]!	; 0xffffff40
    1df0:	7646301f 			; <UNDEFINED> instruction: 0x7646301f
    1df4:	46301f3d 	shasxmi	r1, r0, sp
    1df8:	301f3d76 	andscc	r3, pc, r6, ror sp	; <UNPREDICTABLE>
    1dfc:	4a01e103 	bmi	7a210 <__RW_SIZE__+0x79c7c>
    1e00:	2d2d3030 	stccs	0, cr3, [sp, #-192]!	; 0xffffff40
    1e04:	321f1f22 	andscc	r1, pc, #34, 30	; 0x88
    1e08:	2c2f2f1c 	stccs	15, cr2, [pc], #-112	; 1da0 <__RW_SIZE__+0x180c>
    1e0c:	03503432 	cmpeq	r0, #838860800	; 0x32000000
    1e10:	38587efc 	ldmdacc	r8, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}^
    1e14:	2e018d03 	cdpcs	13, 0, cr8, cr1, cr3, {0}
    1e18:	2e7ef303 	cdpcs	3, 7, cr15, cr14, cr3, {0}
    1e1c:	20018f03 	andcs	r8, r1, r3, lsl #30
    1e20:	4a7ef103 	bmi	1fbe234 <__RW_SIZE__+0x1fbdca0>
    1e24:	02018b03 	andeq	r8, r1, #3072	; 0xc00
    1e28:	03350127 	teqeq	r5, #-1073741815	; 0xc0000009
    1e2c:	a3034a4f 	movwge	r4, #14927	; 0x3a4f
    1e30:	1f3d2e7e 	svcne	0x003d2e7e
    1e34:	1f3d5630 	svcne	0x003d5630
    1e38:	1f3d5630 	svcne	0x003d5630
    1e3c:	1f3d5630 	svcne	0x003d5630
    1e40:	1f2f5630 	svcne	0x002f5630
    1e44:	01e90322 	mvneq	r0, r2, lsr #6
    1e48:	7f870358 	svcvc	0x00870358
    1e4c:	bb03a03c 	bllt	e9f44 <__RW_SIZE__+0xe99b0>
    1e50:	6724ac7f 			; <UNDEFINED> instruction: 0x6724ac7f
    1e54:	00c5032f 	sbceq	r0, r5, pc, lsr #6
    1e58:	1f59243c 	svcne	0x0059243c
    1e5c:	df032d30 	svcle	0x00032d30
    1e60:	8e083c7e 	mcrhi	12, 0, r3, cr8, cr14, {3}
    1e64:	02a30322 	adceq	r0, r3, #-2013265920	; 0x88000000
    1e68:	7dcd033c 	stclvc	3, cr0, [sp, #240]	; 0xf0
    1e6c:	2256084a 	subscs	r0, r6, #4849664	; 0x4a0000
    1e70:	2e02ad03 	cdpcs	13, 0, cr10, cr2, cr3, {0}
    1e74:	4a7dfd03 	bmi	1f81288 <__RW_SIZE__+0x1f80cf4>
    1e78:	2c302c3f 	ldccs	12, cr2, [r0], #-252	; 0xffffff04
    1e7c:	302c3f3b 	eorcc	r3, ip, fp, lsr pc
    1e80:	2c3f3b2c 	ldccs	11, cr3, [pc], #-176	; 1dd8 <__RW_SIZE__+0x1844>
    1e84:	3f3b2c30 	svccc	0x003b2c30
    1e88:	3b2c302c 	blcc	b0df40 <__RW_SIZE__+0xb0d9ac>
    1e8c:	301e3e3d 	andscc	r3, lr, sp, lsr lr
    1e90:	3c01d903 	stccc	9, cr13, [r1], {3}
    1e94:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
    1e98:	06820601 	streq	r0, [r2], r1, lsl #12
    1e9c:	7ed9033d 	mrcvc	3, 6, r0, cr9, cr13, {1}
    1ea0:	00cb03ac 	sbceq	r0, fp, ip, lsr #7
    1ea4:	7ed203f2 	mrcvc	3, 6, r0, cr2, cr2, {7}
    1ea8:	320824ba 	andcc	r2, r8, #-1174405120	; 0xba000000
    1eac:	2a30211d 	bcs	c0a328 <__RW_SIZE__+0xc09d94>
    1eb0:	03222d22 	teqeq	r2, #2176	; 0x880
    1eb4:	08247409 	stmdaeq	r4!, {r0, r3, sl, ip, sp, lr}
    1eb8:	c9303b13 	ldmdbgt	r0!, {r0, r1, r4, r8, r9, fp, ip, sp}
    1ebc:	97032f1f 	smladls	r3, pc, pc, r2	; <UNPREDICTABLE>
    1ec0:	e4033c01 	str	r3, [r3], #-3073	; 0xfffff3ff
    1ec4:	70034a7e 	andvc	r4, r3, lr, ror sl
    1ec8:	2e0e032e 	cdpcs	3, 0, cr0, cr14, cr14, {1}
    1ecc:	034a7003 	movteq	r7, #40963	; 0xa003
    1ed0:	304a02c7 	subcc	r0, sl, r7, asr #5
    1ed4:	032f212c 	teqeq	pc, #44, 2
    1ed8:	03587eb9 	cmpeq	r8, #2960	; 0xb90
    1edc:	032e01c7 	teqeq	lr, #-1073741775	; 0xc0000031
    1ee0:	032e7eb9 	teqeq	lr, #2960	; 0xb90
    1ee4:	032e01c7 	teqeq	lr, #-1073741775	; 0xc0000031
    1ee8:	034a7eb9 	movteq	r7, #44729	; 0xaeb9
    1eec:	014c024c 	cmpeq	ip, ip, asr #4
    1ef0:	2e020d03 	cdpcs	13, 0, cr0, cr2, cr3, {0}
    1ef4:	91304801 	teqls	r0, r1, lsl #16
    1ef8:	00c7037d 	sbceq	r0, r7, sp, ror r3
    1efc:	034b082e 	movteq	r0, #47150	; 0xb82e
    1f00:	03f201af 	mvnseq	r0, #-1073741781	; 0xc000002b
    1f04:	8e3c7eb6 	mrchi	14, 1, r7, cr12, cr6, {5}
    1f08:	8e848e84 	cdphi	14, 8, cr8, cr4, cr4, {4}
    1f0c:	8e848e84 	cdphi	14, 8, cr8, cr4, cr4, {4}
    1f10:	8e848e84 	cdphi	14, 8, cr8, cr4, cr4, {4}
    1f14:	8e848e84 	cdphi	14, 8, cr8, cr4, cr4, {4}
    1f18:	904a0384 	subls	r0, sl, r4, lsl #7
    1f1c:	aa928e92 	bge	fe4a596c <MSP_BASE+0xde4a096c>
    1f20:	aa92aa92 	bge	fe4ac970 <MSP_BASE+0xde4a7970>
    1f24:	02810392 	addeq	r0, r1, #1207959554	; 0x48000002
    1f28:	e52f2fd6 	str	r2, [pc, #-4054]!	; f5a <__RW_SIZE__+0x9c6>
    1f2c:	2f2f4de5 	svccs	0x002f4de5
    1f30:	3d3fd7e5 	ldccc	7, cr13, [pc, #-916]!	; 1ba4 <__RW_SIZE__+0x1610>
    1f34:	2f3d682f 	svccs	0x003d682f
    1f38:	9b03913d 	blls	e6434 <__RW_SIZE__+0xe5ea0>
    1f3c:	012a027e 	teqeq	sl, lr, ror r2
    1f40:	ac01e903 	stcge	9, cr14, [r1], {3}
    1f44:	2f586e03 	svccs	0x00586e03
    1f48:	ac2403ad 	stcge	3, cr0, [r4], #-692	; 0xfffffd4c
    1f4c:	221d2130 	andscs	r2, sp, #48, 2
    1f50:	2e690367 	cdpcs	3, 6, cr0, cr9, cr7, {3}
    1f54:	2f206703 	svccs	0x00206703
    1f58:	e41b03bb 	ldr	r0, [fp], #-955	; 0xfffffc45
    1f5c:	2e0e0370 	mcrcs	3, 0, r0, cr14, cr0, {3}
    1f60:	2f2e4f03 	svccs	0x002e4f03
    1f64:	907eb903 	rsbsls	fp, lr, r3, lsl #18
    1f68:	32024c03 	andcc	r4, r2, #768	; 0x300
    1f6c:	080d0301 	stmdaeq	sp, {r0, r8, r9}
    1f70:	91302c82 	teqls	r0, r2, lsl #25
    1f74:	00c7037d 	sbceq	r0, r7, sp, ror r3
    1f78:	0321082e 	teqeq	r1, #3014656	; 0x2e0000
    1f7c:	e603f26c 	str	pc, [r3], -ip, ror #4
    1f80:	9e032001 	cdpls	0, 0, cr2, cr3, cr1, {0}
    1f84:	e2033c7e 	and	r3, r3, #32256	; 0x7e00
    1f88:	9a032001 	bls	c9f94 <__RW_SIZE__+0xc9a00>
    1f8c:	03252e7e 	teqeq	r5, #2016	; 0x7e0
    1f90:	032001e1 	teqeq	r0, #1073741880	; 0x40000038
    1f94:	2f207e9b 	svccs	0x00207e9b
    1f98:	e203302f 	and	r3, r3, #47	; 0x2f
    1f9c:	9f032e01 	svcls	0x00032e01
    1fa0:	e3032e7e 	movw	r2, #15998	; 0x3e7e
    1fa4:	f6032e01 			; <UNDEFINED> instruction: 0xf6032e01
    1fa8:	44082e7c 	strmi	r2, [r8], #-3708	; 0xfffff184
    1fac:	02fa03a6 	rscseq	r0, sl, #-1744830462	; 0x98000002
    1fb0:	7ddc039e 	ldclvc	3, cr0, [ip, #632]	; 0x278
    1fb4:	ba340358 	blt	d02d1c <__RW_SIZE__+0xd02788>
    1fb8:	5a8e5a8e 	bpl	fe3989f8 <MSP_BASE+0xde3939f8>
    1fbc:	5a8e5a8e 	bpl	fe3989fc <MSP_BASE+0xde3939fc>
    1fc0:	5a8e5a8e 	bpl	fe398a00 <MSP_BASE+0xde393a00>
    1fc4:	5a8e5a8e 	bpl	fe398a04 <MSP_BASE+0xde393a04>
    1fc8:	5a904a03 	bpl	fe4147dc <MSP_BASE+0xde40f7dc>
    1fcc:	5aaa5a8e 	bpl	fea98a0c <MSP_BASE+0xdea93a0c>
    1fd0:	34035aaa 	strcc	r5, [r3], #-2730	; 0xfffff556
    1fd4:	000c02ba 			; <UNDEFINED> instruction: 0x000c02ba
    1fd8:	00520101 	subseq	r0, r2, r1, lsl #2
    1fdc:	00020000 	andeq	r0, r2, r0
    1fe0:	0000002e 	andeq	r0, r0, lr, lsr #32
    1fe4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1fe8:	0101000d 	tsteq	r1, sp
    1fec:	00000101 	andeq	r0, r0, r1, lsl #2
    1ff0:	00000100 	andeq	r0, r0, r0, lsl #2
    1ff4:	75720001 	ldrbvc	r0, [r2, #-1]!
    1ff8:	6d69746e 	cfstrdvs	mvd7, [r9, #-440]!	; 0xfffffe48
    1ffc:	00632e65 	rsbeq	r2, r3, r5, ror #28
    2000:	63000000 	movwvs	r0, #0
    2004:	5f65726f 	svcpl	0x0065726f
    2008:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    200c:	00000068 	andeq	r0, r0, r8, rrx
    2010:	05000000 	streq	r0, [r0, #-0]
    2014:	008cc802 	addeq	ip, ip, r2, lsl #16
    2018:	03271508 	teqeq	r7, #8, 10	; 0x2000000
    201c:	5b275879 	blpl	9d8208 <__RW_SIZE__+0x9d7c74>
    2020:	242c3e4c 	strtcs	r3, [ip], #-3660	; 0xfffff1b4
    2024:	01040200 	mrseq	r0, R12_usr
    2028:	023c7703 	eorseq	r7, ip, #786432	; 0xc0000
    202c:	01010009 	tsteq	r1, r9
    2030:	00000242 	andeq	r0, r0, r2, asr #4
    2034:	00990002 	addseq	r0, r9, r2
    2038:	01020000 	mrseq	r0, (UNDEF: 2)
    203c:	000d0efb 	strdeq	r0, [sp], -fp
    2040:	01010101 	tsteq	r1, r1, lsl #2
    2044:	01000000 	mrseq	r0, (UNDEF: 0)
    2048:	43010000 	movwmi	r0, #4096	; 0x1000
    204c:	6f435c3a 	svcvs	0x00435c3a
    2050:	6f536564 	svcvs	0x00536564
    2054:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2058:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
    205c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2060:	20797265 	rsbscs	r7, r9, r5, ror #4
    2064:	202b2b47 	eorcs	r2, fp, r7, asr #22
    2068:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
    206c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2070:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2074:	61652d65 	cmnvs	r5, r5, ror #26
    2078:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    207c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2080:	00006564 	andeq	r6, r0, r4, ror #10
    2084:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2088:	30316632 	eorscc	r6, r1, r2, lsr r6
    208c:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xfffff088
    2090:	0000632e 	andeq	r6, r0, lr, lsr #6
    2094:	6f630000 	svcvs	0x00630000
    2098:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    209c:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    20a0:	00000000 	andeq	r0, r0, r0
    20a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    20a8:	30316632 	eorscc	r6, r1, r2, lsr r6
    20ac:	00682e78 	rsbeq	r2, r8, r8, ror lr
    20b0:	73000000 	movwvc	r0, #0
    20b4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    20b8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    20bc:	64000001 	strvs	r0, [r0], #-1
    20c0:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    20c4:	72645f65 	rsbvc	r5, r4, #404	; 0x194
    20c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    20cc:	0000682e 	andeq	r6, r0, lr, lsr #16
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	8d0c0205 	sfmhi	f0, 4, [ip, #-20]	; 0xffffffec
    20d8:	25030800 	strcs	r0, [r3, #-2048]	; 0xfffff800
    20dc:	202b2301 	eorcs	r2, fp, r1, lsl #6
    20e0:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    20e4:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    20e8:	00aa0204 	adceq	r0, sl, r4, lsl #4
    20ec:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    20f0:	02040200 	andeq	r0, r4, #0, 4
    20f4:	7003402c 	andvc	r4, r3, ip, lsr #32
    20f8:	03c9214a 	biceq	r2, r9, #-2147483630	; 0x80000012
    20fc:	2d13ba2a 	vldrcs	s22, [r3, #-168]	; 0xffffff58
    2100:	580c0321 	stmdapl	ip, {r0, r5, r8, r9}
    2104:	2d212d21 	stccs	13, cr2, [r1, #-132]!	; 0xffffff7c
    2108:	2e5a032f 	cdpcs	3, 5, cr0, cr10, cr15, {1}
    210c:	08767575 	ldmdaeq	r6!, {r0, r2, r4, r5, r6, r8, sl, ip, sp, lr}^
    2110:	85255622 	strhi	r5, [r5, #-1570]!	; 0xfffff9de
    2114:	741d03ad 	ldrvc	r0, [sp], #-941	; 0xfffffc53
    2118:	75917591 	ldrvc	r7, [r1, #1425]	; 0x591
    211c:	d7825903 	strle	r5, [r2, r3, lsl #18]
    2120:	13e43303 	mvnne	r3, #201326592	; 0xc000000
    2124:	0c03212d 	stfeqs	f2, [r3], {45}	; 0x2d
    2128:	212d1358 	teqcs	sp, r8, asr r3
    212c:	13580c03 	cmpne	r8, #768	; 0x300
    2130:	0c03212d 	stfeqs	f2, [r3], {45}	; 0x2d
    2134:	212d1358 	teqcs	sp, r8, asr r3
    2138:	13580c03 	cmpne	r8, #768	; 0x300
    213c:	0c03212d 	stfeqs	f2, [r3], {45}	; 0x2d
    2140:	212d1358 	teqcs	sp, r8, asr r3
    2144:	13580e03 	cmpne	r8, #3, 28	; 0x30
    2148:	21820b03 	orrcs	r0, r2, r3, lsl #22
    214c:	213c0b03 	teqcs	ip, r3, lsl #22
    2150:	213c0b03 	teqcs	ip, r3, lsl #22
    2154:	213c0b03 	teqcs	ip, r3, lsl #22
    2158:	213c0b03 	teqcs	ip, r3, lsl #22
    215c:	213c0b03 	teqcs	ip, r3, lsl #22
    2160:	213c0b03 	teqcs	ip, r3, lsl #22
    2164:	213c0b03 	teqcs	ip, r3, lsl #22
    2168:	213c0b03 	teqcs	ip, r3, lsl #22
    216c:	223c0e03 	eorscs	r0, ip, #3, 28	; 0x30
    2170:	03020430 	movweq	r0, #9264	; 0x2430
    2174:	042e09da 	strteq	r0, [lr], #-2522	; 0xfffff626
    2178:	76a40301 	strtvc	r0, [r4], r1, lsl #6
    217c:	04213d2e 	strteq	r3, [r1], #-3374	; 0xfffff2d2
    2180:	09da0302 	ldmibeq	sl, {r1, r8, r9}^
    2184:	0301043c 	movweq	r0, #5180	; 0x143c
    2188:	214a76a4 	smlaltbcs	r7, sl, r4, r6
    218c:	03020421 	movweq	r0, #9249	; 0x2421
    2190:	042009da 	strteq	r0, [r0], #-2522	; 0xfffff626
    2194:	76a80301 	strtvc	r0, [r8], r1, lsl #6
    2198:	3c0a032e 	stccc	3, cr0, [sl], {46}	; 0x2e
    219c:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21a0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21a4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21a8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21ac:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21b0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21b4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21b8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21bc:	3c0c0321 	stccc	3, cr0, [ip], {33}	; 0x21
    21c0:	3c0c0321 	stccc	3, cr0, [ip], {33}	; 0x21
    21c4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21c8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21cc:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    21d0:	03020423 	movweq	r0, #9251	; 0x2423
    21d4:	04d608ad 	ldrbeq	r0, [r6], #2221	; 0x8ad
    21d8:	77d30301 	ldrbvc	r0, [r3, r1, lsl #6]
    21dc:	04214b2e 	strteq	r4, [r1], #-2862	; 0xfffff4d2
    21e0:	08ab0302 	stmiaeq	fp!, {r1, r8, r9}
    21e4:	03010420 	movweq	r0, #5152	; 0x1420
    21e8:	214a77d3 	ldrdcs	r7, [sl, #-115]	; 0xffffff8d
    21ec:	03020421 	movweq	r0, #9249	; 0x2421
    21f0:	042008ab 	strteq	r0, [r0], #-2219	; 0xfffff755
    21f4:	77d70301 	ldrbvc	r0, [r7, r1, lsl #6]
    21f8:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    21fc:	3c0c0321 	stccc	3, cr0, [ip], {33}	; 0x21
    2200:	3c0c0321 	stccc	3, cr0, [ip], {33}	; 0x21
    2204:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    2208:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    220c:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    2210:	3c0d0321 	stccc	3, cr0, [sp], {33}	; 0x21
    2214:	212d5913 	teqcs	sp, r3, lsl r9
    2218:	219e0b03 	orrscs	r0, lr, r3, lsl #22
    221c:	213c0b03 	teqcs	ip, r3, lsl #22
    2220:	213c0b03 	teqcs	ip, r3, lsl #22
    2224:	213c0b03 	teqcs	ip, r3, lsl #22
    2228:	213c0b03 	teqcs	ip, r3, lsl #22
    222c:	213c0b03 	teqcs	ip, r3, lsl #22
    2230:	213c0e03 	teqcs	ip, r3, lsl #28
    2234:	580b0367 	stmdapl	fp, {r0, r1, r2, r5, r6, r8, r9}
    2238:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    223c:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    2240:	03020423 	movweq	r0, #9251	; 0x2423
    2244:	04d606d3 	ldrbeq	r0, [r6], #1747	; 0x6d3
    2248:	79ad0301 	stmibvc	sp!, {r0, r8, r9}
    224c:	04214b2e 	strteq	r4, [r1], #-2862	; 0xfffff4d2
    2250:	06d10302 	ldrbeq	r0, [r1], r2, lsl #6
    2254:	0301042e 	movweq	r0, #5166	; 0x142e
    2258:	214a79ad 	smlaltbcs	r7, sl, sp, r9
    225c:	03020421 	movweq	r0, #9249	; 0x2421
    2260:	042006d1 	strteq	r0, [r0], #-1745	; 0xfffff92f
    2264:	79b10301 	ldmibvc	r1!, {r0, r8, r9}
    2268:	3c0a032e 	stccc	3, cr0, [sl], {46}	; 0x2e
    226c:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    2270:	00020221 	andeq	r0, r2, r1, lsr #4
    2274:	009d0101 	addseq	r0, sp, r1, lsl #2
    2278:	00020000 	andeq	r0, r2, r0
    227c:	00000072 	andeq	r0, r0, r2, ror r0
    2280:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2284:	0101000d 	tsteq	r1, sp
    2288:	00000101 	andeq	r0, r0, r1, lsl #2
    228c:	00000100 	andeq	r0, r0, r0, lsl #2
    2290:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
    2294:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    2298:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    229c:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    22a0:	756f535c 	strbvc	r5, [pc, #-860]!	; 1f4c <__RW_SIZE__+0x19b8>
    22a4:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    22a8:	2b472079 	blcs	11ca494 <__RW_SIZE__+0x11c9f00>
    22ac:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
    22b0:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
    22b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    22b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    22bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    22c0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    22c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    22c8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    22cc:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
    22d0:	00632e6b 	rsbeq	r2, r3, fp, ror #28
    22d4:	63000000 	movwvs	r0, #0
    22d8:	5f65726f 	svcpl	0x0065726f
    22dc:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    22e0:	00000068 	andeq	r0, r0, r8, rrx
    22e4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    22e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    22ec:	00010068 	andeq	r0, r1, r8, rrx
    22f0:	05000000 	streq	r0, [r0, #-0]
    22f4:	00915002 	addseq	r5, r1, r2
    22f8:	67211508 	strvs	r1, [r1, -r8, lsl #10]!
    22fc:	21211fe5 	teqcs	r1, r5, ror #31
    2300:	218313b0 			; <UNDEFINED> instruction: 0x218313b0
    2304:	3221211e 	eorcc	r2, r1, #-2147483641	; 0x80000007
    2308:	59138613 	ldmdbpl	r3, {r0, r1, r4, r9, sl, pc}
    230c:	23591323 	cmpcs	r9, #-1946157056	; 0x8c000000
    2310:	03025913 	movweq	r5, #10515	; 0x2913
    2314:	3a010100 	bcc	4271c <__RW_SIZE__+0x42188>
    2318:	02000001 	andeq	r0, r0, #1
    231c:	00007f00 	andeq	r7, r0, r0, lsl #30
    2320:	fb010200 	blx	42b2a <__RW_SIZE__+0x42596>
    2324:	01000d0e 	tsteq	r0, lr, lsl #26
    2328:	00010101 	andeq	r0, r1, r1, lsl #2
    232c:	00010000 	andeq	r0, r1, r0
    2330:	3a430100 	bcc	10c2738 <__RW_SIZE__+0x10c21a4>
    2334:	646f435c 	strbtvs	r4, [pc], #-860	; 233c <__RW_SIZE__+0x1da8>
    2338:	756f5365 	strbvc	r5, [pc, #-869]!	; 1fdb <__RW_SIZE__+0x1a47>
    233c:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    2340:	6f535c79 	svcvs	0x00535c79
    2344:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2348:	47207972 			; <UNDEFINED> instruction: 0x47207972
    234c:	4c202b2b 	stcmi	11, cr2, [r0], #-172	; 0xffffff54
    2350:	2f657469 	svccs	0x00657469
    2354:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2358:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    235c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2360:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    2364:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2368:	74000065 	strvc	r0, [r0], #-101	; 0xffffff9b
    236c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    2370:	0000632e 	andeq	r6, r0, lr, lsr #6
    2374:	6f630000 	svcvs	0x00630000
    2378:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    237c:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    2380:	00000000 	andeq	r0, r0, r0
    2384:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2388:	30316632 	eorscc	r6, r1, r2, lsr r6
    238c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2390:	73000000 	movwvc	r0, #0
    2394:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2398:	00682e74 	rsbeq	r2, r8, r4, ror lr
    239c:	00000001 	andeq	r0, r0, r1
    23a0:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    23a4:	1a080091 	bne	2025f0 <__RW_SIZE__+0x20205c>
    23a8:	212f5a24 	teqcs	pc, r4, lsr #20
    23ac:	222c302a 	eorcs	r3, ip, #42	; 0x2a
    23b0:	7a032121 	bvc	ca83c <__RW_SIZE__+0xca2a8>
    23b4:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
    23b8:	2b233520 	blcs	8cf840 <__RW_SIZE__+0x8cf2ac>
    23bc:	2c232b31 	stccs	11, cr2, [r3], #-196	; 0xffffff3c
    23c0:	3e4c1e22 	cdpcc	14, 4, cr1, cr12, cr2, {1}
    23c4:	02006759 	andeq	r6, r0, #23330816	; 0x1640000
    23c8:	37590104 	ldrbcc	r0, [r9, -r4, lsl #2]
    23cc:	1d23d744 	stcne	7, cr13, [r3, #-272]!	; 0xfffffef0
    23d0:	0200674b 	andeq	r6, r0, #19660800	; 0x12c0000
    23d4:	5a590104 	bpl	16427ec <__RW_SIZE__+0x1642258>
    23d8:	21592c22 	cmpcs	r9, r2, lsr #24
    23dc:	364b592d 	strbcc	r5, [fp], -sp, lsr #18
    23e0:	03020421 	movweq	r0, #9249	; 0x2421
    23e4:	04200bbe 	strteq	r0, [r0], #-3006	; 0xfffff442
    23e8:	74d50301 	ldrbvc	r0, [r5], #769	; 0x301
    23ec:	03020466 	movweq	r0, #9318	; 0x2466
    23f0:	042e0bab 	strteq	r0, [lr], #-2987	; 0xfffff455
    23f4:	74d50301 	ldrbvc	r0, [r5], #769	; 0x301
    23f8:	592c3e2e 	stmdbpl	ip!, {r1, r2, r3, r5, r9, sl, fp, ip, sp}
    23fc:	4c592d21 	mrrcmi	13, 2, r2, r9, cr1
    2400:	4e2e6b03 	vmulmi.f64	d6, d14, d3
    2404:	4c3a242a 	cfldrsmi	mvf2, [sl], #-168	; 0xffffff58
    2408:	2b21301c 	blcs	84e480 <__RW_SIZE__+0x84deec>
    240c:	22212122 	eorcs	r2, r1, #-2147483640	; 0x80000008
    2410:	de030204 	cdple	2, 0, cr0, cr3, cr4, {0}
    2414:	0104200b 	tsteq	r4, fp
    2418:	2e74a203 	cdpcs	2, 7, cr10, cr4, cr3, {0}
    241c:	0302044b 	movweq	r0, #9291	; 0x244b
    2420:	04200bdd 	strteq	r0, [r0], #-3037	; 0xfffff423
    2424:	74a30301 	strtvc	r0, [r3], #769	; 0x301
    2428:	0302042e 	movweq	r0, #9262	; 0x242e
    242c:	043c0bdd 	ldrteq	r0, [ip], #-3037	; 0xfffff423
    2430:	74a30301 	strtvc	r0, [r3], #769	; 0x301
    2434:	0302042e 	movweq	r0, #9262	; 0x242e
    2438:	04200bdd 	strteq	r0, [r0], #-3037	; 0xfffff423
    243c:	74a50301 	strtvc	r0, [r5], #769	; 0x301
    2440:	0302042e 	movweq	r0, #9262	; 0x242e
    2444:	04580ba6 	ldrbeq	r0, [r8], #-2982	; 0xfffff45a
    2448:	74dc0301 	ldrbvc	r0, [ip], #769	; 0x301
    244c:	580a0320 	stmdapl	sl, {r5, r8, r9}
    2450:	01000202 	tsteq	r0, r2, lsl #4
    2454:	00027a01 	andeq	r7, r2, r1, lsl #20
    2458:	18000200 	stmdane	r0, {r9}
    245c:	02000001 	andeq	r0, r0, #1
    2460:	0d0efb01 	vstreq	d15, [lr, #-4]
    2464:	01010100 	mrseq	r0, (UNDEF: 17)
    2468:	00000001 	andeq	r0, r0, r1
    246c:	01000001 	tsteq	r0, r1
    2470:	435c3a43 	cmpmi	ip, #274432	; 0x43000
    2474:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
    2478:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    247c:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
    2480:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2484:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    2488:	2b2b4720 	blcs	ad4110 <__RW_SIZE__+0xad3b7c>
    248c:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
    2490:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    2494:	6f6e2d6d 	svcvs	0x006e2d6d
    2498:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    249c:	2f696261 	svccs	0x00696261
    24a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    24a4:	00656475 	rsbeq	r6, r5, r5, ror r4
    24a8:	435c3a43 	cmpmi	ip, #274432	; 0x43000
    24ac:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
    24b0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    24b4:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
    24b8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    24bc:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    24c0:	2b2b4720 	blcs	ad4148 <__RW_SIZE__+0xad3bb4>
    24c4:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
    24c8:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    24cc:	63672f62 	cmnvs	r7, #392	; 0x188
    24d0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    24d4:	6f6e2d6d 	svcvs	0x006e2d6d
    24d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    24dc:	2f696261 	svccs	0x00696261
    24e0:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    24e4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    24e8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    24ec:	75000065 	strvc	r0, [r0, #-101]	; 0xffffff9b
    24f0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    24f4:	00000063 	andeq	r0, r0, r3, rrx
    24f8:	726f6300 	rsbvc	r6, pc, #0, 6
    24fc:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    2500:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    2504:	73000000 	movwvc	r0, #0
    2508:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    250c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2510:	0000682e 	andeq	r6, r0, lr, lsr #16
    2514:	74730000 	ldrbtvc	r0, [r3], #-0
    2518:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    251c:	0100682e 	tsteq	r0, lr, lsr #16
    2520:	74730000 	ldrbtvc	r0, [r3], #-0
    2524:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2528:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    252c:	74730000 	ldrbtvc	r0, [r3], #-0
    2530:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    2534:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2538:	74630000 	strbtvc	r0, [r3], #-0
    253c:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    2540:	00010068 	andeq	r0, r1, r8, rrx
    2544:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2548:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    254c:	00000100 	andeq	r0, r0, r0, lsl #2
    2550:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2554:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    2558:	00000100 	andeq	r0, r0, r0, lsl #2
    255c:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    2560:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    2564:	00000100 	andeq	r0, r0, r0, lsl #2
    2568:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    256c:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    2570:	00003e6e 	andeq	r3, r0, lr, ror #28
    2574:	00000000 	andeq	r0, r0, r0
    2578:	93a00205 	movls	r0, #1342177280	; 0x50000000
    257c:	251a0800 	ldrcs	r0, [sl, #-2048]	; 0xfffff800
    2580:	213d2c5a 	teqcs	sp, sl, asr ip
    2584:	4c673d2d 	stclmi	13, cr3, [r7], #-180	; 0xffffff4c
    2588:	083d1308 	ldmdaeq	sp!, {r3, r8, r9, ip}
    258c:	68302f59 	ldmdavs	r0!, {r0, r3, r4, r6, r8, r9, sl, fp, sp}
    2590:	212d211e 	teqcs	sp, lr, lsl r1
    2594:	136a2121 	cmnne	sl, #1073741832	; 0x40000008
    2598:	01040200 	mrseq	r0, R12_usr
    259c:	0029ad34 	eoreq	sl, r9, r4, lsr sp
    25a0:	06010402 	streq	r0, [r1], -r2, lsl #8
    25a4:	5275064a 	rsbspl	r0, r5, #77594624	; 0x4a00000
    25a8:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
    25ac:	75341d4b 	ldrvc	r1, [r4, #-3403]!	; 0xfffff2b5
    25b0:	72034e25 	andvc	r4, r3, #592	; 0x250
    25b4:	1003752e 	andne	r7, r3, lr, lsr #10
    25b8:	2d413c3c 	stclcs	12, cr3, [r1, #-240]	; 0xffffff10
    25bc:	2e740321 	cdpcs	3, 7, cr0, cr4, cr1, {1}
    25c0:	593c7603 	ldmdbpl	ip!, {r0, r1, r9, sl, ip, sp, lr}
    25c4:	2575341d 	ldrbcs	r3, [r5, #-1053]!	; 0xfffffbe3
    25c8:	034a0f03 	movteq	r0, #44803	; 0xaf03
    25cc:	03755867 	cmneq	r5, #6750208	; 0x670000
    25d0:	84132e1b 	ldrhi	r2, [r3], #-3611	; 0xfffff1e5
    25d4:	75033134 	strvc	r3, [r3, #-308]	; 0xfffffecc
    25d8:	04020001 	streq	r0, [r2], #-1
    25dc:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
    25e0:	2e0f033e 	mcrcs	3, 0, r0, cr15, cr14, {1}
    25e4:	69032331 	stmdbvs	r3, {r0, r4, r5, r8, r9, sp}
    25e8:	2e170320 	cdpcs	3, 1, cr0, cr7, cr0, {1}
    25ec:	20650324 	rsbcs	r0, r5, r4, lsr #6
    25f0:	032e6403 	teqeq	lr, #50331648	; 0x3000000
    25f4:	033e201c 	teqeq	lr, #28
    25f8:	0a032e0f 	beq	cde3c <__RW_SIZE__+0xcd8a8>
    25fc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    2600:	40031f4b 	andmi	r1, r3, fp, asr #30
    2604:	00c7033c 	sbceq	r0, r7, ip, lsr r3
    2608:	7fb90320 	svcvc	0x00b90320
    260c:	3775263c 			; <UNDEFINED> instruction: 0x3775263c
    2610:	00c90375 	sbceq	r0, r9, r5, ror r3
    2614:	7fb6032e 	svcvc	0x00b6032e
    2618:	00ca0320 	sbceq	r0, sl, r0, lsr #6
    261c:	7fb6032e 	svcvc	0x00b6032e
    2620:	75319120 	ldrvc	r9, [r1, #-288]!	; 0xfffffee0
    2624:	3c00ca03 	stccc	10, cr12, [r0], {3}
    2628:	3e2e0903 	cdpcc	9, 2, cr0, cr14, cr3, {0}
    262c:	7503493f 	strvc	r4, [r3, #-2367]	; 0xfffff6c1
    2630:	0d032220 	sfmeq	f2, 4, [r3, #-128]	; 0xffffff80
    2634:	2e72032e 	cdpcs	3, 7, cr0, cr2, cr14, {1}
    2638:	4c201403 	cfstrsmi	mvf1, [r0], #-12
    263c:	5f22221e 	svcpl	0x0022221e
    2640:	03667103 	cmneq	r6, #-1073741824	; 0xc0000000
    2644:	03524a19 	cmpeq	r2, #102400	; 0x19000
    2648:	03362e78 	teqeq	r6, #120, 28	; 0x780
    264c:	3d223c78 	stccc	12, cr3, [r2, #-480]!	; 0xfffffe20
    2650:	031b212d 	tsteq	fp, #1073741835	; 0x4000000b
    2654:	03403c0e 	movteq	r3, #3086	; 0xc0e
    2658:	0c032e62 	stceq	14, cr2, [r3], {98}	; 0x62
    265c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    2660:	4a670301 	bmi	19c326c <__RW_SIZE__+0x19c2cd8>
    2664:	01040200 	mrseq	r0, R12_usr
    2668:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    266c:	02002d01 	andeq	r2, r0, #1, 26	; 0x40
    2670:	031e0104 	tsteq	lr, #4, 2
    2674:	003d2e13 	eorseq	r2, sp, r3, lsl lr
    2678:	06010402 	streq	r0, [r1], -r2, lsl #8
    267c:	7403062e 	strvc	r0, [r3], #-1582	; 0xfffff9d2
    2680:	4a26032e 	bmi	983340 <__RW_SIZE__+0x982dac>
    2684:	09034815 	stmdbeq	r3, {r0, r2, r4, fp, lr}
    2688:	03020420 	movweq	r0, #9248	; 0x2420
    268c:	04200ab2 	strteq	r0, [r0], #-2738	; 0xfffff54e
    2690:	75ce0301 	strbvc	r0, [lr, #769]	; 0x301
    2694:	0302042e 	movweq	r0, #9262	; 0x242e
    2698:	044a0ab2 	strbeq	r0, [sl], #-2738	; 0xfffff54e
    269c:	75ce0301 	strbvc	r0, [lr, #769]	; 0x301
    26a0:	0302043c 	movweq	r0, #9276	; 0x243c
    26a4:	04200ab2 	strteq	r0, [r0], #-2738	; 0xfffff54e
    26a8:	75c70301 	strbvc	r0, [r7, #769]	; 0x301
    26ac:	0302043c 	movweq	r0, #9276	; 0x243c
    26b0:	04200ae1 	strteq	r0, [r0], #-2785	; 0xfffff51f
    26b4:	759f0301 	ldrvc	r0, [pc, #769]	; 29bd <__RW_SIZE__+0x2429>
    26b8:	0302042e 	movweq	r0, #9262	; 0x242e
    26bc:	04200ae1 	strteq	r0, [r0], #-2785	; 0xfffff51f
    26c0:	759f0301 	ldrvc	r0, [pc, #769]	; 29c9 <__RW_SIZE__+0x2435>
    26c4:	0302043c 	movweq	r0, #9276	; 0x243c
    26c8:	033c0ae1 	teqeq	ip, #921600	; 0xe1000
    26cc:	02022e4b 	andeq	r2, r2, #1200	; 0x4b0
    26d0:	7c010100 	stfvcs	f0, [r1], {-0}
    26d4:	02000000 	andeq	r0, r0, #0
    26d8:	00001d00 	andeq	r1, r0, r0, lsl #26
    26dc:	fb010200 	blx	42ee6 <__RW_SIZE__+0x42952>
    26e0:	01000d0e 	tsteq	r0, lr, lsl #26
    26e4:	00010101 	andeq	r0, r1, r1, lsl #2
    26e8:	00010000 	andeq	r0, r1, r0
    26ec:	63000100 	movwvs	r0, #256	; 0x100
    26f0:	2e307472 	mrccs	4, 1, r7, cr0, cr2, {3}
    26f4:	00000073 	andeq	r0, r0, r3, ror r0
    26f8:	05000000 	streq	r0, [r0, #-0]
    26fc:	0030ec02 	eorseq	lr, r0, r2, lsl #24
    2700:	00fb0308 	rscseq	r0, fp, r8, lsl #6
    2704:	22212101 	eorcs	r2, r1, #1073741824	; 0x40000000
    2708:	21212321 	teqcs	r1, r1, lsr #6
    270c:	21232f2f 	teqcs	r3, pc, lsr #30
    2710:	2f212130 	svccs	0x00212130
    2714:	21200a03 	teqcs	r0, r3, lsl #20
    2718:	3030212f 	eorscc	r2, r0, pc, lsr #2
    271c:	222f2f27 	eorcs	r2, pc, #39, 30	; 0x9c
    2720:	21222f2f 	teqcs	r2, pc, lsr #30
    2724:	2f302f21 	svccs	0x00302f21
    2728:	2122212f 	teqcs	r2, pc, lsr #2
    272c:	21302f21 	teqcs	r0, r1, lsr #30
    2730:	1b032f2f 	blne	ce3f4 <__RW_SIZE__+0xcde60>
    2734:	21012802 	tstcs	r1, r2, lsl #16
    2738:	2f21212f 	svccs	0x0021212f
    273c:	7f98032f 	svcvc	0x0098032f
    2740:	032f2f20 	teqeq	pc, #32, 30	; 0x80
    2744:	10032e0d 	andne	r2, r3, sp, lsl #28
    2748:	1203302e 	andne	r3, r3, #46	; 0x2e
    274c:	0202302e 	andeq	r3, r2, #46	; 0x2e
    2750:	Address 0x00002750 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
       4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
       8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
       c:	44420074 	strbmi	r0, [r2], #-116	; 0xffffff8c
      10:	43005243 	movwmi	r5, #579	; 0x243
      14:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      18:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      1c:	6963636b 	stmdbvs	r3!, {r0, r1, r3, r5, r6, r8, r9, sp, lr}^
      20:	5c637473 	cfstrdpl	mvd7, [r3], #-460	; 0xfffffe34
      24:	6b736544 	blvs	1cd953c <__RW_SIZE__+0x1cd8fa8>
      28:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
      2c:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
      30:	4f52505f 	svcmi	0x0052505f
      34:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
      38:	3139395c 	teqcc	r9, ip, asr r9
      3c:	6554202e 	ldrbvs	r2, [r4, #-46]	; 0xffffffd2
      40:	00317473 	eorseq	r7, r1, r3, ror r4
      44:	53414c46 	movtpl	r4, #7238	; 0x1c46
      48:	79545f48 	ldmdbvc	r4, {r3, r6, r8, r9, sl, fp, ip, lr}^
      4c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      50:	48410066 	stmdami	r1, {r1, r2, r5, r6}^
      54:	524e4542 	subpl	r4, lr, #276824064	; 0x10800000
      58:	50525700 	subspl	r5, r2, r0, lsl #14
      5c:	6c630052 	stclvs	0, cr0, [r3], #-328	; 0xfffffeb8
      60:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
      64:	50410063 	subpl	r0, r1, r3, rrx
      68:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
      6c:	73005254 	movwvc	r5, #596	; 0x254
      70:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
      74:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      78:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      7c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      80:	54490074 	strbpl	r0, [r9], #-116	; 0xffffff8c
      84:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      88:	66667542 	strbtvs	r7, [r6], -r2, asr #10
      8c:	4f007265 	svcmi	0x00007265
      90:	454b5450 	strbmi	r5, [fp, #-1104]	; 0xfffffbb0
      94:	75005259 	strvc	r5, [r0, #-601]	; 0xfffffda7
      98:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      9c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      a0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
      a4:	53455200 	movtpl	r5, #20992	; 0x5200
      a8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
      ac:	50410044 	subpl	r0, r1, r4, asr #32
      b0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
      b4:	50410052 	subpl	r0, r1, r2, asr r0
      b8:	4e453142 	dvfmism	f3, f5, f2
      bc:	50410052 	subpl	r0, r1, r2, asr r0
      c0:	53523242 	cmppl	r2, #536870916	; 0x20000004
      c4:	6c005254 	sfmvs	f5, 4, [r0], {84}	; 0x54
      c8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      cc:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      d0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      d4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      d8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      dc:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
      e0:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
      e4:	43006570 	movwmi	r6, #1392	; 0x570
      e8:	6b636f6c 	blvs	18dbea0 <__RW_SIZE__+0x18db90c>
      ec:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
      f0:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
      f4:	2074726f 	rsbscs	r7, r4, pc, ror #4
      f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
      fc:	5f434352 	svcpl	0x00434352
     100:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     104:	00666544 	rsbeq	r6, r6, r4, asr #10
     108:	20554e47 	subscs	r4, r5, r7, asr #28
     10c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     110:	20312e38 	eorscs	r2, r1, r8, lsr lr
     114:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
     118:	6f633d75 	svcvs	0x00633d75
     11c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
     120:	20336d2d 	eorscs	r6, r3, sp, lsr #26
     124:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     128:	20626d75 	rsbcs	r6, r2, r5, ror sp
     12c:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     130:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     134:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     138:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     13c:	616d2d20 	cmnvs	sp, r0, lsr #26
     140:	20736370 	rsbscs	r6, r3, r0, ror r3
     144:	6f6e6d2d 	svcvs	0x006e6d2d
     148:	7568742d 	strbvc	r7, [r8, #-1069]!	; 0xfffffbd3
     14c:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
     150:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     154:	6b726f77 	blvs	1c9bf38 <__RW_SIZE__+0x1c9b9a4>
     158:	20672d20 	rsbcs	r2, r7, r0, lsr #26
     15c:	20334f2d 	eorscs	r4, r3, sp, lsr #30
     160:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     164:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     168:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     16c:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
     170:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
     174:	662d206e 	strtvs	r2, [sp], -lr, rrx
     178:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     17c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     180:	6168632d 	cmnvs	r8, sp, lsr #6
     184:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
     188:	732d6f6e 	teqvc	sp, #440	; 0x1b8
     18c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     190:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
     194:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     198:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
     19c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; c <shift+0xc>
     1a0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
     1a4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
     1a8:	33746e69 	cmncc	r4, #1680	; 0x690
     1ac:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     1b0:	54535f5f 	ldrbpl	r5, [r3], #-3935	; 0xfffff0a1
     1b4:	48584552 	ldmdami	r8, {r1, r4, r6, r8, sl, lr}^
     1b8:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
     1bc:	5f5f0072 	svcpl	0x005f0072
     1c0:	5f746573 	svcpl	0x00746573
     1c4:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xfffff0bd
     1c8:	004c4f52 	subeq	r4, ip, r2, asr pc
     1cc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
     1d0:	5f5f0065 	svcpl	0x005f0065
     1d4:	4552444c 	ldrbmi	r4, [r2, #-1100]	; 0xfffffbb4
     1d8:	70005758 	andvc	r5, r0, r8, asr r7
     1dc:	614d6972 	hvcvs	54930	; 0xd692
     1e0:	74006b73 	strvc	r6, [r0], #-2931	; 0xfffff48d
     1e4:	664f706f 	strbvs	r7, [pc], -pc, rrx
     1e8:	636f7250 	cmnvs	pc, #80, 4
     1ec:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     1f0:	6166006b 	cmnvs	r6, fp, rrx
     1f4:	4d746c75 	ldclmi	12, cr6, [r4, #-468]!	; 0xfffffe2c
     1f8:	006b7361 	rsbeq	r7, fp, r1, ror #6
     1fc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     200:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
     204:	5f00632e 	svcpl	0x0000632e
     208:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     20c:	50534d5f 	subspl	r4, r3, pc, asr sp
     210:	735f5f00 	cmpvc	pc, #0, 30
     214:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; 88 <shift+0x88>
     218:	5f005053 	svcpl	0x00005053
     21c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     220:	5053505f 	subspl	r5, r3, pc, asr r0
     224:	735f5f00 	cmpvc	pc, #0, 30
     228:	505f7465 	subspl	r7, pc, r5, ror #8
     22c:	5f005053 	svcpl	0x00005053
     230:	5645525f 			; <UNDEFINED> instruction: 0x5645525f
     234:	5f003631 	svcpl	0x00003631
     238:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     23c:	4952505f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, ip, lr}^
     240:	4b53414d 	blmi	14d077c <__RW_SIZE__+0x14d01e8>
     244:	735f5f00 	cmpvc	pc, #0, 30
     248:	465f7465 	ldrbmi	r7, [pc], -r5, ror #8
     24c:	544c5541 	strbpl	r5, [ip], #-1345	; 0xfffffabf
     250:	4b53414d 	blmi	14d078c <__RW_SIZE__+0x14d01f8>
     254:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
     258:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 90 <shift+0x90>
     25c:	735f5f00 	cmpvc	pc, #0, 30
     260:	425f7465 	subsmi	r7, pc, #1694498816	; 0x65000000
     264:	50455341 	subpl	r5, r5, r1, asr #6
     268:	75004952 	strvc	r4, [r0, #-2386]	; 0xfffff6ae
     26c:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     270:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
     274:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     278:	5f5f0074 	svcpl	0x005f0074
     27c:	53564552 	cmppl	r6, #343932928	; 0x14800000
     280:	6f740048 	svcvs	0x00740048
     284:	4d664f70 	stclmi	15, cr4, [r6, #-448]!	; 0xfffffe40
     288:	536e6961 	cmnpl	lr, #1589248	; 0x184000
     28c:	6b636174 	blvs	18d8864 <__RW_SIZE__+0x18d82d0>
     290:	735f5f00 	cmpvc	pc, #0, 30
     294:	505f7465 	subspl	r7, pc, r5, ror #8
     298:	414d4952 	cmpmi	sp, r2, asr r9
     29c:	5f004b53 	svcpl	0x00004b53
     2a0:	5645525f 			; <UNDEFINED> instruction: 0x5645525f
     2a4:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
     2a8:	435f7465 	cmpmi	pc, #1694498816	; 0x65000000
     2ac:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
     2b0:	5f004c4f 	svcpl	0x00004c4f
     2b4:	4942525f 	stmdbmi	r2, {r0, r1, r2, r3, r4, r6, r9, ip, lr}^
     2b8:	5f5f0054 	svcpl	0x005f0054
     2bc:	5f746567 	svcpl	0x00746567
     2c0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
     2c4:	00495250 	subeq	r5, r9, r0, asr r2
     2c8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     2cc:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2d4 <__ZI_SIZE__+0x118>
     2d0:	535f5f00 	cmppl	pc, #0, 30
     2d4:	58455254 	stmdapl	r5, {r2, r4, r6, r9, ip, lr}^
     2d8:	5f5f0057 	svcpl	0x005f0057
     2dc:	4552444c 	ldrbmi	r4, [r2, #-1100]	; 0xfffffbb4
     2e0:	5f004258 	svcpl	0x00004258
     2e4:	5254535f 	subspl	r5, r4, #2080374785	; 0x7c000001
     2e8:	00425845 	subeq	r5, r2, r5, asr #16
     2ec:	65675f5f 	strbvs	r5, [r7, #-3935]!	; 0xfffff0a1
     2f0:	41465f74 	hvcmi	26100	; 0x65f4
     2f4:	4d544c55 	ldclmi	12, cr4, [r4, #-340]	; 0xfffffeac
     2f8:	004b5341 	subeq	r5, fp, r1, asr #6
     2fc:	444c5f5f 	strbmi	r5, [ip], #-3935	; 0xfffff0a1
     300:	48584552 	ldmdami	r8, {r1, r4, r6, r8, sl, lr}^
     304:	676e6500 	strbvs	r6, [lr, -r0, lsl #10]!
     308:	36317838 			; <UNDEFINED> instruction: 0x36317838
     30c:	61726700 	cmnvs	r2, r0, lsl #14
     310:	63696870 	cmnvs	r9, #112, 16	; 0x700000
     314:	00632e73 	rsbeq	r2, r3, r3, ror lr
     318:	6f636b62 	svcvs	0x00636b62
     31c:	00726f6c 	rsbseq	r6, r2, ip, ror #30
     320:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     324:	6c00676e 	stcvs	7, cr6, [r0], {110}	; 0x6e
     328:	00706f6f 	rsbseq	r6, r0, pc, ror #30
     32c:	5f64634c 	svcpl	0x0064634c
     330:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
     334:	5f006674 	svcpl	0x00006674
     338:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0xfffff8a1
     33c:	61765f63 	cmnvs	r6, r3, ror #30
     340:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     344:	5f5f0074 	svcpl	0x005f0074
     348:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
     34c:	00747369 	rsbseq	r7, r4, r9, ror #6
     350:	5f64634c 	svcpl	0x0064634c
     354:	73747550 	cmnvc	r4, #80, 10	; 0x14000000
     358:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     35c:	634c0070 	movtvs	r0, #49264	; 0xc070
     360:	75505f64 	ldrbvc	r5, [r0, #-3940]	; 0xfffff09c
     364:	69505f74 	ldmdbvs	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     368:	006c6578 	rsbeq	r6, ip, r8, ror r5
     36c:	70615f5f 	rsbvc	r5, r1, pc, asr pc
     370:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     374:	676e455f 			; <UNDEFINED> instruction: 0x676e455f
     378:	7475505f 	ldrbtvc	r5, [r5], #-95	; 0xffffffa1
     37c:	6f006863 	svcvs	0x00006863
     380:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
     384:	69620074 	stmdbvs	r2!, {r2, r4, r5, r6}^
     388:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
     38c:	7376006b 	cmnvc	r6, #107	; 0x6b
     390:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     394:	55006674 	strpl	r6, [r0, #-1652]	; 0xfffff98c
     398:	4c5f4253 	lfmmi	f4, 2, [pc], {83}	; 0x53
     39c:	41435f50 	cmpmi	r3, r0, asr pc
     3a0:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     3a4:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     3a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3ac:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     3b0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     3b4:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     3b8:	52495f45 	subpl	r5, r9, #276	; 0x114
     3bc:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     3c0:	5f31414d 	svcpl	0x0031414d
     3c4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     3c8:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
     3cc:	5152495f 	cmppl	r2, pc, asr r9
     3d0:	3249006e 	subcc	r0, r9, #110	; 0x6e
     3d4:	455f3243 	ldrbmi	r3, [pc, #-579]	; 199 <shift+0x199>
     3d8:	52495f52 	subpl	r5, r9, #328	; 0x148
     3dc:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     3e0:	5f344d49 	svcpl	0x00344d49
     3e4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3e8:	414d4400 	cmpmi	sp, r0, lsl #8
     3ec:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     3f0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     3f4:	495f326c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     3f8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3fc:	53414c46 	movtpl	r4, #7238	; 0x1c46
     400:	52495f48 	subpl	r5, r9, #72, 30	; 0x120
     404:	4d006e51 	stcmi	14, cr6, [r0, #-324]	; 0xfffffebc
     408:	00525041 	subseq	r5, r2, r1, asr #32
     40c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     410:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     414:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     418:	31495458 	cmpcc	r9, r8, asr r4
     41c:	30315f35 	eorscc	r5, r1, r5, lsr pc
     420:	5152495f 	cmppl	r2, pc, asr r9
     424:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
     428:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     42c:	5152495f 	cmppl	r2, pc, asr r9
     430:	6f4a006e 	svcvs	0x004a006e
     434:	6f505f67 	svcvs	0x00505f67
     438:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     43c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     440:	5f434352 	svcpl	0x00434352
     444:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     448:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     44c:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
     450:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     454:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     458:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     45c:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     460:	00524553 	subseq	r4, r2, r3, asr r5
     464:	314d4954 	cmpcc	sp, r4, asr r9
     468:	4b52425f 	blmi	1490dec <__RW_SIZE__+0x1490858>
     46c:	5152495f 	cmppl	r2, pc, asr r9
     470:	5352006e 	cmppl	r2, #110	; 0x6e
     474:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     478:	53003144 	movwpl	r3, #324	; 0x144
     47c:	5f314950 	svcpl	0x00314950
     480:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     484:	414d4400 	cmpmi	sp, r0, lsl #8
     488:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     48c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     490:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     494:	006e5152 	rsbeq	r5, lr, r2, asr r1
     498:	4349564e 	movtmi	r5, #38478	; 0x964e
     49c:	616e455f 	cmnvs	lr, pc, asr r5
     4a0:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     4a4:	4b005152 	blmi	149f4 <__RW_SIZE__+0x14460>
     4a8:	435f7965 	cmpmi	pc, #1654784	; 0x194000
     4ac:	6b636568 	blvs	18d9a54 <__RW_SIZE__+0x18d94c0>
     4b0:	706e495f 	rsbvc	r4, lr, pc, asr r9
     4b4:	43007475 	movwmi	r7, #1141	; 0x475
     4b8:	5f314e41 	svcpl	0x00314e41
     4bc:	5f315852 	svcpl	0x00315852
     4c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4c4:	42535500 	subsmi	r5, r3, #0, 10
     4c8:	5f50485f 	svcpl	0x0050485f
     4cc:	314e4143 	cmpcc	lr, r3, asr #2
     4d0:	5f58545f 	svcpl	0x0058545f
     4d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4d8:	51524900 	cmppl	r2, r0, lsl #18
     4dc:	79545f6e 	ldmdbvc	r4, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     4e0:	55006570 	strpl	r6, [r0, #-1392]	; 0xfffffa90
     4e4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     4e8:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     4ec:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     4f0:	32495458 	subcc	r5, r9, #88, 8	; 0x58000000
     4f4:	5152495f 	cmppl	r2, pc, asr r9
     4f8:	6f4a006e 	svcvs	0x004a006e
     4fc:	65475f67 	strbvs	r5, [r7, #-3943]	; 0xfffff099
     500:	72505f74 	subsvc	r5, r0, #116, 30	; 0x1d0
     504:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
     508:	32490064 	subcc	r0, r9, #100	; 0x64
     50c:	455f3243 	ldrbmi	r3, [pc, #-579]	; 2d1 <__ZI_SIZE__+0x115>
     510:	52495f56 	subpl	r5, r9, #344	; 0x158
     514:	41006e51 	tstmi	r0, r1, asr lr
     518:	5f4f4946 	svcpl	0x004f4946
     51c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     520:	00666544 	rsbeq	r6, r6, r4, asr #10
     524:	31414d44 	cmpcc	r1, r4, asr #26
     528:	6168435f 	cmnvs	r8, pc, asr r3
     52c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     530:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
     534:	4e006e51 	mcrmi	14, 0, r6, cr0, cr1, {2}
     538:	5f434956 	svcpl	0x00434956
     53c:	61656c43 	cmnvs	r5, r3, asr #24
     540:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
     544:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     548:	00515249 	subseq	r5, r1, r9, asr #4
     54c:	334d4954 	movtcc	r4, #55636	; 0xd954
     550:	5152495f 	cmppl	r2, pc, asr r9
     554:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     558:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     55c:	6e6e6168 	powvsez	f6, f6, #0.0
     560:	5f316c65 	svcpl	0x00316c65
     564:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     568:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     56c:	00524349 	subseq	r4, r2, r9, asr #6
     570:	57425355 	smlsldpl	r5, r2, r5, r3
     574:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     578:	52495f70 	subpl	r5, r9, #112, 30	; 0x1c0
     57c:	57006e51 	smlsdpl	r0, r1, lr, r6
     580:	5f474457 	svcpl	0x00474457
     584:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     588:	73754200 	cmnvc	r5, #0, 4
     58c:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
     590:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
     594:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     598:	34495458 	strbcc	r5, [r9], #-1112	; 0xfffffba8
     59c:	5152495f 	cmppl	r2, pc, asr r9
     5a0:	5650006e 	ldrbpl	r0, [r0], -lr, rrx
     5a4:	52495f44 	subpl	r5, r9, #68, 30	; 0x110
     5a8:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     5ac:	00525043 	subseq	r5, r2, r3, asr #32
     5b0:	5f676f4a 	svcpl	0x00676f4a
     5b4:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     5b8:	79654b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, lr}^
     5bc:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
     5c0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     5c4:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
     5c8:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     5cc:	6e6e6168 	powvsez	f6, f6, #0.0
     5d0:	5f336c65 	svcpl	0x00336c65
     5d4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     5d8:	43324900 	teqmi	r2, #0, 18
     5dc:	56455f31 			; <UNDEFINED> instruction: 0x56455f31
     5e0:	5152495f 	cmppl	r2, pc, asr r9
     5e4:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     5e8:	555f314d 	ldrbpl	r3, [pc, #-333]	; 4a3 <MSP_SIZE+0xa3>
     5ec:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     5f0:	53006e51 	movwpl	r6, #3665	; 0xe51
     5f4:	00524954 	subseq	r4, r2, r4, asr r9
     5f8:	5f435452 	svcpl	0x00435452
     5fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     600:	53455200 	movtpl	r5, #20992	; 0x5200
     604:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     608:	52003044 	andpl	r3, r0, #68	; 0x44
     60c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     610:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     614:	53455200 	movtpl	r5, #20992	; 0x5200
     618:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     61c:	52003344 	andpl	r3, r0, #68, 6	; 0x10000001
     620:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     624:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
     628:	53455200 	movtpl	r5, #20992	; 0x5200
     62c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     630:	45003544 	strmi	r3, [r0, #-1348]	; 0xfffffabc
     634:	5f495458 	svcpl	0x00495458
     638:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     63c:	00666544 	rsbeq	r6, r6, r4, asr #10
     640:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     644:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     648:	006e5152 	rsbeq	r5, lr, r2, asr r1
     64c:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     650:	616b7361 	cmnvs	fp, r1, ror #6
     654:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     658:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     65c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     660:	314d4954 	cmpcc	sp, r4, asr r9
     664:	5f43435f 	svcpl	0x0043435f
     668:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     66c:	53545200 	cmppl	r4, #0, 4
     670:	58450052 	stmdapl	r5, {r1, r4, r6}^
     674:	5f314954 	svcpl	0x00314954
     678:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     67c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     680:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     684:	54006570 	strpl	r6, [r0], #-1392	; 0xfffffa90
     688:	5f314d49 	svcpl	0x00314d49
     68c:	5f475254 	svcpl	0x00475254
     690:	5f4d4f43 	svcpl	0x004d4f43
     694:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     698:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     69c:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     6a0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     6a4:	32490066 	subcc	r0, r9, #102	; 0x66
     6a8:	455f3143 	ldrbmi	r3, [pc, #-323]	; 56d <MSP_SIZE+0x16d>
     6ac:	52495f52 	subpl	r5, r9, #328	; 0x148
     6b0:	6a006e51 	bvs	1bffc <__RW_SIZE__+0x1ba68>
     6b4:	6b5f676f 	blvs	17da478 <__RW_SIZE__+0x17d9ee4>
     6b8:	632e7965 	teqvs	lr, #1654784	; 0x194000
     6bc:	73795300 	cmnvc	r9, #0, 6
     6c0:	6b636954 	blvs	18dac18 <__RW_SIZE__+0x18da684>
     6c4:	5152495f 	cmppl	r2, pc, asr r9
     6c8:	414d006e 	cmpmi	sp, lr, rrx
     6cc:	00325250 	eorseq	r5, r2, r0, asr r2
     6d0:	45495753 	strbmi	r5, [r9, #-1875]	; 0xfffff8ad
     6d4:	49540052 	ldmdbmi	r4, {r1, r4, r6}^
     6d8:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     6dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6e0:	52535446 	subspl	r5, r3, #1174405120	; 0x46000000
     6e4:	676f4a00 	strbvs	r4, [pc, -r0, lsl #20]!
     6e8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     6ec:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     6f0:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     6f4:	6c61435f 	stclvs	3, cr4, [r1], #-380	; 0xfffffe84
     6f8:	6544006d 	strbvs	r0, [r4, #-109]	; 0xffffff93
     6fc:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     700:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     704:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     708:	006e5152 	rsbeq	r5, lr, r2, asr r1
     70c:	67617355 			; <UNDEFINED> instruction: 0x67617355
     710:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
     714:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     718:	006e5152 	rsbeq	r5, lr, r2, asr r1
     71c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     720:	5f355f39 	svcpl	0x00355f39
     724:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     728:	43565300 	cmpmi	r6, #0, 6
     72c:	5f6c6c61 	svcpl	0x006c6c61
     730:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     734:	676f4a00 	strbvs	r4, [pc, -r0, lsl #20]!
     738:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     73c:	616e455f 	cmnvs	lr, pc, asr r5
     740:	00656c62 	rsbeq	r6, r5, r2, ror #24
     744:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     748:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     74c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     750:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     754:	00524241 	subseq	r4, r2, r1, asr #4
     758:	31414d44 	cmpcc	r1, r4, asr #26
     75c:	6168435f 	cmnvs	r8, pc, asr r3
     760:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     764:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
     768:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     76c:	33495458 	movtcc	r5, #37976	; 0x9458
     770:	5152495f 	cmppl	r2, pc, asr r9
     774:	5349006e 	movtpl	r0, #36974	; 0x906e
     778:	41005250 	tstmi	r0, r0, asr r2
     77c:	5f314344 	svcpl	0x00314344
     780:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     784:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
     788:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     78c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     790:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     794:	00524356 	subseq	r4, r2, r6, asr r3
     798:	5f676f4a 	svcpl	0x00676f4a
     79c:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     7a0:	79654b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, lr}^
     7a4:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     7a8:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     7ac:	4d415400 	cfstrdmi	mvd5, [r1, #-0]
     7b0:	5f524550 	svcpl	0x00524550
     7b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7b8:	4b434c00 	blmi	10d37c0 <__RW_SIZE__+0x10d322c>
     7bc:	54520052 	ldrbpl	r0, [r2], #-82	; 0xffffffae
     7c0:	616c4143 	cmnvs	ip, r3, asr #2
     7c4:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     7c8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7cc:	5f79654b 	svcpl	0x0079654b
     7d0:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     7d4:	79654b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, lr}^
     7d8:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     7dc:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     7e0:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
     7e4:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     7e8:	654b5f74 	strbvs	r5, [fp, #-3956]	; 0xfffff08c
     7ec:	65525f79 	ldrbvs	r5, [r2, #-3961]	; 0xfffff087
     7f0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     7f4:	4b006465 	blmi	19990 <__RW_SIZE__+0x193fc>
     7f8:	505f7965 	subspl	r7, pc, r5, ror #18
     7fc:	5f6c6c6f 	svcpl	0x006c6c6f
     800:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     804:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
     808:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     80c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     810:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     814:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     818:	69445f43 	stmdbvs	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     81c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     820:	51524965 	cmppl	r2, r5, ror #18
     824:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
     828:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     82c:	616e455f 	cmnvs	lr, pc, asr r5
     830:	00656c62 	rsbeq	r6, r5, r2, ror #24
     834:	5f64634c 	svcpl	0x0064634c
     838:	6c6c6946 	stclvs	9, cr6, [ip], #-280	; 0xfffffee8
     83c:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     840:	726c435f 	rsbvc	r4, ip, #2080374785	; 0x7c000001
     844:	7263535f 	rsbvc	r5, r3, #2080374785	; 0x7c000001
     848:	006e6565 	rsbeq	r6, lr, r5, ror #10
     84c:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     850:	00524746 	subseq	r4, r2, r6, asr #14
     854:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     858:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     85c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     860:	58540074 	ldmdapl	r4, {r2, r4, r5, r6}^
     864:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
     868:	43585200 	cmpmi	r8, #0, 4
     86c:	00524352 	subseq	r4, r2, r2, asr r3
     870:	5f64634c 	svcpl	0x0064634c
     874:	5f746553 	svcpl	0x00746553
     878:	70736944 	rsbsvc	r6, r3, r4, asr #18
     87c:	5f79616c 	svcpl	0x0079616c
     880:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     884:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
     888:	73006874 	movwvc	r6, #2164	; 0x874
     88c:	63797465 	cmnvs	r9, #1694498816	; 0x65000000
     890:	5f00646d 	svcpl	0x0000646d
     894:	31495053 	qdaddcc	r5, r3, r9
     898:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     89c:	425f6574 	subsmi	r6, pc, #116, 10	; 0x1d000000
     8a0:	00657479 	rsbeq	r7, r5, r9, ror r4
     8a4:	5f64634c 	svcpl	0x0064634c
     8a8:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
     8ac:	786f425f 	stmdavc	pc!, {r0, r1, r2, r3, r4, r6, r9, lr}^	; <UNPREDICTABLE>
     8b0:	74614400 	strbtvc	r4, [r1], #-1024	; 0xfffffc00
     8b4:	634c0061 	movtvs	r0, #49249	; 0xc061
     8b8:	72575f64 	subsvc	r5, r7, #100, 30	; 0x190
     8bc:	5f657469 	svcpl	0x00657469
     8c0:	5f4d4152 	svcpl	0x004d4152
     8c4:	70657250 	rsbvc	r7, r5, r0, asr r2
     8c8:	00657261 	rsbeq	r7, r5, r1, ror #4
     8cc:	78746573 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     8d0:	00646d63 	rsbeq	r6, r4, r3, ror #26
     8d4:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
     8d8:	6c007468 	cfstrsvs	mvf7, [r0], {104}	; 0x68
     8dc:	65646463 	strbvs	r6, [r4, #-1123]!	; 0xfffffb9d
     8e0:	4f500076 	svcmi	0x00500076
     8e4:	5f544e49 	svcpl	0x00544e49
     8e8:	4f4c4f43 	svcmi	0x004c4f43
     8ec:	72770052 	rsbsvc	r0, r7, #82	; 0x52
     8f0:	6d636d61 	stclvs	13, cr6, [r3, #-388]!	; 0xfffffe7c
     8f4:	535f0064 	cmppl	pc, #100	; 0x64
     8f8:	5f314950 	svcpl	0x00314950
     8fc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     900:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     904:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     908:	44434c00 	strbmi	r4, [r3], #-3072	; 0xfffff400
     90c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     910:	00474946 	subeq	r4, r7, r6, asr #18
     914:	4b434142 	blmi	10d0e24 <__RW_SIZE__+0x10d0890>
     918:	4c4f435f 	mcrrmi	3, 5, r4, pc, cr15
     91c:	5300524f 	movwpl	r5, #591	; 0x24f
     920:	545f4950 	ldrbpl	r4, [pc], #-2384	; 928 <__RW_SIZE__+0x394>
     924:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     928:	6c006665 	stcvs	6, cr6, [r0], {101}	; 0x65
     92c:	632e6463 	teqvs	lr, #1660944384	; 0x63000000
     930:	53324900 	teqpl	r2, #0, 18
     934:	4c005250 	sfmmi	f5, 4, [r0], {80}	; 0x50
     938:	575f6463 	ldrbpl	r6, [pc, -r3, ror #8]
     93c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     940:	7461445f 	strbtvc	r4, [r1], #-1119	; 0xfffffba1
     944:	36315f61 	ldrtcc	r5, [r1], -r1, ror #30
     948:	00746942 	rsbseq	r6, r4, r2, asr #18
     94c:	50435243 	subpl	r5, r3, r3, asr #4
     950:	634c0052 	movtvs	r0, #49234	; 0xc052
     954:	52575f64 	subspl	r5, r7, #100, 30	; 0x190
     958:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
     95c:	53455200 	movtpl	r5, #20992	; 0x5200
     960:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     964:	52003144 	andpl	r3, r0, #68, 2
     968:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     96c:	36444556 			; <UNDEFINED> instruction: 0x36444556
     970:	53455200 	movtpl	r5, #20992	; 0x5200
     974:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     978:	52003744 	andpl	r3, r0, #68, 14	; 0x1100000
     97c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     980:	38444556 	stmdacc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     984:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     988:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     98c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     990:	634c0065 	movtvs	r0, #49253	; 0xc065
     994:	72575f64 	subsvc	r5, r7, #100, 30	; 0x190
     998:	5f657469 	svcpl	0x00657469
     99c:	00676552 	rsbeq	r6, r7, r2, asr r5
     9a0:	5f64634c 	svcpl	0x0064634c
     9a4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     9a8:	634c0074 	movtvs	r0, #49268	; 0xc074
     9ac:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xfffff09c
     9b0:	69575f74 	ldmdbvs	r7, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     9b4:	776f646e 	strbvc	r6, [pc, -lr, ror #8]!
     9b8:	634c0073 	movtvs	r0, #49267	; 0xc073
     9bc:	50475f64 	subpl	r5, r7, r4, ror #30
     9c0:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     9c4:	0074696e 	rsbseq	r6, r4, lr, ror #18
     9c8:	5f64634c 	svcpl	0x0064634c
     9cc:	445f5257 	ldrbmi	r5, [pc], #-599	; 9d4 <__RW_SIZE__+0x440>
     9d0:	00415441 	subeq	r5, r1, r1, asr #8
     9d4:	5f64634c 	svcpl	0x0064634c
     9d8:	5f746553 	svcpl	0x00746553
     9dc:	73727543 	cmnvc	r2, #281018368	; 0x10c00000
     9e0:	4c00726f 	sfmmi	f7, 4, [r0], {111}	; 0x6f
     9e4:	445f6463 	ldrbmi	r6, [pc], #-1123	; 9ec <__RW_SIZE__+0x458>
     9e8:	5f776172 	svcpl	0x00776172
     9ec:	6b636142 	blvs	18d8efc <__RW_SIZE__+0x18d8968>
     9f0:	6c6f435f 	stclvs	3, cr4, [pc], #-380	; 87c <__RW_SIZE__+0x2e8>
     9f4:	4c00726f 	sfmmi	f7, 4, [r0], {111}	; 0x6f
     9f8:	415f4445 	cmpmi	pc, r5, asr #8
     9fc:	4f5f6c6c 	svcmi	0x005f6c6c
     a00:	4c006666 	stcmi	6, cr6, [r0], {102}	; 0x66
     a04:	445f4445 	ldrbmi	r4, [pc], #-1093	; a0c <__RW_SIZE__+0x478>
     a08:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     a0c:	6c007961 	stcvs	9, cr7, [r0], {97}	; 0x61
     a10:	632e6465 	teqvs	lr, #1694498816	; 0x65000000
     a14:	44454c00 	strbmi	r4, [r5], #-3072	; 0xfffff400
     a18:	6c6c415f 	stfvse	f4, [ip], #-380	; 0xfffffe84
     a1c:	006e4f5f 	rsbeq	r4, lr, pc, asr pc
     a20:	5f44454c 	svcpl	0x0044454c
     a24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a28:	45544900 	ldrbmi	r4, [r4, #-2304]	; 0xfffff700
     a2c:	50555f4d 	subspl	r5, r5, sp, asr #30
     a30:	72696600 	rsbvc	r6, r9, #0, 12
     a34:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     a38:	76726574 			; <UNDEFINED> instruction: 0x76726574
     a3c:	42006c61 	andmi	r6, r0, #24832	; 0x6100
     a40:	454c4c55 	strbmi	r4, [ip, #-3157]	; 0xfffff3ab
     a44:	6f4a0054 	svcvs	0x004a0054
     a48:	656b5f67 	strbvs	r5, [fp, #-3943]!	; 0xfffff099
     a4c:	6e695f79 	mcrvs	15, 3, r5, cr9, cr9, {3}
     a50:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
     a54:	5f676e69 	svcpl	0x00676e69
     a58:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
     a5c:	454e4500 	strbmi	r4, [lr, #-1280]	; 0xfffffb00
     a60:	5500594d 	strpl	r5, [r0, #-2381]	; 0xfffff6b3
     a64:	31747261 	cmncc	r4, r1, ror #4
     a68:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     a6c:	6f620074 	svcvs	0x00620074
     a70:	695f626d 	ldmdbvs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     a74:	006d6574 	rsbeq	r6, sp, r4, ror r5
     a78:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     a7c:	5059545f 	subspl	r5, r9, pc, asr r4
     a80:	50430045 	subpl	r0, r3, r5, asr #32
     a84:	00444955 	subeq	r4, r4, r5, asr r9
     a88:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     a8c:	6f747300 	svcvs	0x00747300
     a90:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a94:	0072656d 	rsbseq	r6, r2, sp, ror #10
     a98:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
     a9c:	55006576 	strpl	r6, [r0, #-1398]	; 0xfffffa8a
     aa0:	31747261 	cmncc	r4, r1, ror #4
     aa4:	5f58525f 	svcpl	0x0058525f
     aa8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     aac:	70757272 	rsbsvc	r7, r5, r2, ror r2
     ab0:	6e455f74 	mcrvs	15, 2, r5, cr5, cr4, {3}
     ab4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ab8:	72694600 	rsbvc	r4, r9, #0, 12
     abc:	6e455f65 	cdpvs	15, 4, cr5, cr5, cr5, {3}
     ac0:	5f796d65 	svcpl	0x00796d65
     ac4:	6c6c7542 	cfstr64vs	mvdx7, [ip], #-264	; 0xfffffef8
     ac8:	49007465 	stmdbmi	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     acc:	5f6d6574 	svcpl	0x006d6574
     ad0:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
     ad4:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
     ad8:	695f6465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     adc:	006d6574 	rsbeq	r6, sp, r4, ror r5
     ae0:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     ae4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     ae8:	49007961 	stmdbmi	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     aec:	5f4d4554 	svcpl	0x004d4554
     af0:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     af4:	72440044 	subvc	r0, r4, #68	; 0x44
     af8:	485f7761 	ldmdami	pc, {r0, r5, r6, r8, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     afc:	47004455 	smlsdmi	r0, r5, r4, r4
     b00:	5f656d61 	svcpl	0x00656d61
     b04:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b08:	41464200 	mrsmi	r4, (UNDEF: 102)
     b0c:	79530052 	ldmdbvc	r3, {r1, r4, r6}^
     b10:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     b14:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     b18:	46410074 			; <UNDEFINED> instruction: 0x46410074
     b1c:	55005253 	strpl	r5, [r0, #-595]	; 0xfffffdad
     b20:	425f6573 	subsmi	r6, pc, #482344960	; 0x1cc00000
     b24:	00626d6f 	rsbeq	r6, r2, pc, ror #26
     b28:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
     b2c:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
     b30:	00657461 	rsbeq	r7, r5, r1, ror #8
     b34:	5f424353 	svcpl	0x00424353
     b38:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     b3c:	65684300 	strbvs	r4, [r8, #-768]!	; 0xfffffd00
     b40:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
     b44:	696c6c6f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
     b48:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     b4c:	41545300 	cmpmi	r4, r0, lsl #6
     b50:	535f4554 	cmppl	pc, #84, 10	; 0x15000000
     b54:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
     b58:	5f707500 	svcpl	0x00707500
     b5c:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     b60:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
     b64:	54560064 	ldrbpl	r0, [r6], #-100	; 0xffffff9c
     b68:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
     b6c:	00525343 	subseq	r5, r2, r3, asr #6
     b70:	77617053 			; <UNDEFINED> instruction: 0x77617053
     b74:	6e455f6e 	cdpvs	15, 4, cr5, cr5, cr14, {3}
     b78:	00796d65 	rsbseq	r6, r9, r5, ror #26
     b7c:	43524941 	cmpmi	r2, #1064960	; 0x104000
     b80:	46440052 			; <UNDEFINED> instruction: 0x46440052
     b84:	4d005253 	sfmmi	f5, 4, [r0, #-332]	; 0xfffffeb4
     b88:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
     b8c:	4d414700 	stclmi	7, cr4, [r1, #-0]
     b90:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xfffff0bb
     b94:	00455441 	subeq	r5, r5, r1, asr #8
     b98:	6e69616d 	powvsez	f6, f1, #5.0
     b9c:	5300632e 	movwpl	r6, #814	; 0x32e
     ba0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     ba4:	525f6b63 	subspl	r6, pc, #101376	; 0x18c00
     ba8:	49006e75 	stmdbmi	r0, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}
     bac:	5f6d6574 	svcpl	0x006d6574
     bb0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     bb4:	6c754200 	lfmvs	f4, 2, [r5], #-0
     bb8:	5f74656c 	svcpl	0x0074656c
     bbc:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
     bc0:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     bc4:	75620052 	strbvc	r0, [r2, #-82]!	; 0xffffffae
     bc8:	74656c6c 	strbtvc	r6, [r5], #-3180	; 0xfffff394
     bcc:	6f745f73 	svcvs	0x00745f73
     bd0:	7269665f 	rsbvc	r6, r9, #99614720	; 0x5f00000
     bd4:	54490065 	strbpl	r0, [r9], #-101	; 0xffffff9b
     bd8:	42004d45 	andmi	r4, r0, #4416	; 0x1140
     bdc:	656c6c75 	strbvs	r6, [ip, #-3189]!	; 0xfffff38b
     be0:	70555f74 	subsvc	r5, r5, r4, ror pc
     be4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     be8:	45544900 	ldrbmi	r4, [r4, #-2304]	; 0xfffff700
     bec:	4f425f4d 	svcmi	0x00425f4d
     bf0:	4500424d 	strmi	r4, [r0, #-589]	; 0xfffffdb3
     bf4:	796d656e 	stmdbvc	sp!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     bf8:	6172445f 	cmnvs	r2, pc, asr r4
     bfc:	46430077 			; <UNDEFINED> instruction: 0x46430077
     c00:	47005253 	smlsdmi	r0, r3, r2, r5
     c04:	5f656d61 	svcpl	0x00656d61
     c08:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     c0c:	7263535f 	rsbvc	r5, r3, #2080374785	; 0x7c000001
     c10:	006e6565 	rsbeq	r6, lr, r5, ror #10
     c14:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     c18:	7065525f 	rsbvc	r5, r5, pc, asr r2
     c1c:	5f746165 	svcpl	0x00746165
     c20:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     c24:	70757272 	rsbsvc	r7, r5, r2, ror r2
     c28:	6e455f74 	mcrvs	15, 2, r5, cr5, cr4, {3}
     c2c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c30:	6d614700 	stclvs	7, cr4, [r1, #-0]
     c34:	72445f65 	subvc	r5, r4, #404	; 0x194
     c38:	42007761 	andmi	r7, r0, #25427968	; 0x1840000
     c3c:	656c6c75 	strbvs	r6, [ip, #-3189]!	; 0xfffff38b
     c40:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     c44:	65007469 	strvs	r7, [r0, #-1129]	; 0xfffffb97
     c48:	696d656e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     c4c:	53007365 	movwpl	r7, #869	; 0x365
     c50:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     c54:	7263535f 	rsbvc	r5, r3, #2080374785	; 0x7c000001
     c58:	006e6565 	rsbeq	r6, lr, r5, ror #10
     c5c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	; 0xfffffedc
     c60:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
     c64:	00657461 	rsbeq	r7, r5, r1, ror #8
     c68:	53434853 	movtpl	r4, #14419	; 0x3853
     c6c:	54530052 	ldrbpl	r0, [r3], #-82	; 0xffffffae
     c70:	5f455441 	svcpl	0x00455441
     c74:	59414c50 	stmdbpl	r1, {r4, r6, sl, fp, lr}^
     c78:	676f4a00 	strbvs	r4, [pc, -r0, lsl #20]!
     c7c:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
     c80:	41545300 	cmpmi	r4, r0, lsl #6
     c84:	475f4554 			; <UNDEFINED> instruction: 0x475f4554
     c88:	4f454d41 	svcmi	0x00454d41
     c8c:	00524556 	subseq	r4, r2, r6, asr r5
     c90:	6e69614d 	powvsem	f6, f1, #5.0
     c94:	6c6f4300 	stclvs	3, cr4, [pc], #-0	; c9c <__RW_SIZE__+0x708>
     c98:	6973696c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
     c9c:	555f6e6f 	ldrbpl	r6, [pc, #-3695]	; fffffe35 <MSP_BASE+0xdfffae35>
     ca0:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     ca4:	6e450065 	cdpvs	0, 4, cr0, cr5, cr5, {3}
     ca8:	5f796d65 	svcpl	0x00796d65
     cac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     cb0:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     cb4:	6f635f6d 	svcvs	0x00635f6d
     cb8:	00726f6c 	rsbseq	r6, r2, ip, ror #30
     cbc:	6c6c7562 	cfstr64vs	mvdx7, [ip], #-392	; 0xfffffe78
     cc0:	00737465 	rsbseq	r7, r3, r5, ror #8
     cc4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     cc8:	785f7265 	ldmdavc	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     ccc:	616c7000 	cmnvs	ip, r0
     cd0:	5f726579 	svcpl	0x00726579
     cd4:	61670079 	smcvs	28681	; 0x7009
     cd8:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
     cdc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     ce0:	72615500 	rsbvc	r5, r1, #0, 10
     ce4:	505f3174 	subspl	r3, pc, r4, ror r1	; <UNPREDICTABLE>
     ce8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
     cec:	6e650066 	cdpvs	0, 6, cr0, cr5, cr6, {3}
     cf0:	5f796d65 	svcpl	0x00796d65
     cf4:	65726966 	ldrbvs	r6, [r2, #-2406]!	; 0xfffff69a
     cf8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     cfc:	46007265 	strmi	r7, [r0], -r5, ror #4
     d00:	5f657269 	svcpl	0x00657269
     d04:	6c6c7542 	cfstr64vs	mvdx7, [ip], #-264	; 0xfffffef8
     d08:	70007465 	andvc	r7, r0, r5, ror #8
     d0c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     d10:	696c5f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d14:	45006566 	strmi	r6, [r0, #-1382]	; 0xfffffa9a
     d18:	796d656e 	stmdbvc	sp!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     d1c:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
     d20:	00657461 	rsbeq	r7, r5, r1, ror #8
     d24:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
     d28:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
     d2c:	69006465 	stmdbvs	r0, {r0, r2, r5, r6, sl, sp, lr}
     d30:	5f6d6574 	svcpl	0x006d6574
     d34:	77617073 			; <UNDEFINED> instruction: 0x77617073
     d38:	69745f6e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d3c:	0072656d 	rsbseq	r6, r2, sp, ror #10
     d40:	77617053 			; <UNDEFINED> instruction: 0x77617053
     d44:	74495f6e 	strbvc	r5, [r9], #-3950	; 0xfffff092
     d48:	48006d65 	stmdami	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     d4c:	00525346 	subseq	r5, r2, r6, asr #6
     d50:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     d54:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
     d58:	70007061 	andvc	r7, r0, r1, rrx
     d5c:	48766572 	ldmdami	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     d60:	00706165 	rsbseq	r6, r0, r5, ror #2
     d64:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     d68:	70616548 	rsbvc	r6, r1, r8, asr #10
     d6c:	6e757200 	cdpvs	2, 7, cr7, cr5, cr0, {0}
     d70:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     d74:	5f00632e 	svcpl	0x0000632e
     d78:	6b726273 	blvs	1c9974c <__RW_SIZE__+0x1c991b8>
     d7c:	5a5f5f00 	bpl	17d8984 <__RW_SIZE__+0x17d83f0>
     d80:	494c5f49 	stmdbmi	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     d84:	5f54494d 	svcpl	0x0054494d
     d88:	5845005f 	stmdapl	r5, {r0, r1, r2, r3, r4, r6}^
     d8c:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     d90:	5f30315f 	svcpl	0x0030315f
     d94:	0054554c 	subseq	r5, r4, ip, asr #10
     d98:	5f494d4e 	svcpl	0x00494d4e
     d9c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     da0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     da4:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
     da8:	62654400 	rsbvs	r4, r5, #0, 8
     dac:	6f4d6775 	svcvs	0x004d6775
     db0:	61485f6e 	cmpvs	r8, lr, ror #30
     db4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     db8:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     dbc:	5f344954 	svcpl	0x00344954
     dc0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dc4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     dc8:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
     dcc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     dd0:	78725f31 	ldmdavc	r2!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     dd4:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     dd8:	4d440061 	stclmi	0, cr0, [r4, #-388]	; 0xfffffe7c
     ddc:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     de0:	6e6e6168 	powvsez	f6, f6, #0.0
     de4:	5f376c65 	svcpl	0x00376c65
     de8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     df0:	57007265 	strpl	r7, [r0, -r5, ror #4]
     df4:	5f474457 	svcpl	0x00474457
     df8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dfc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     e00:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     e04:	545f4d49 	ldrbpl	r4, [pc], #-3401	; e0c <__RW_SIZE__+0x878>
     e08:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     e0c:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
     e10:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     e14:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     e18:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e1c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e20:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     e24:	525f746c 	subspl	r7, pc, #108, 8	; 0x6c000000
     e28:	726f7065 	rsbvc	r7, pc, #101	; 0x65
     e2c:	43430074 	movtmi	r0, #12404	; 0x3074
     e30:	43003252 	movwmi	r3, #594	; 0x252
     e34:	535f4e41 	cmppl	pc, #1040	; 0x410
     e38:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     e3c:	61485152 	cmpvs	r8, r2, asr r1
     e40:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     e44:	32490072 	subcc	r0, r9, #114	; 0x72
     e48:	455f3243 	ldrbmi	r3, [pc, #-579]	; c0d <__RW_SIZE__+0x679>
     e4c:	52495f52 	subpl	r5, r9, #328	; 0x148
     e50:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e54:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e58:	4d434300 	stclmi	3, cr4, [r3, #-0]
     e5c:	43003152 	movwmi	r3, #338	; 0x152
     e60:	32524d43 	subscc	r4, r2, #4288	; 0x10c0
     e64:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     e68:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     e6c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e70:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e74:	44565000 	ldrbmi	r5, [r6], #-0
     e78:	5152495f 	cmppl	r2, pc, asr r9
     e7c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e80:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e84:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     e88:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     e8c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e90:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e94:	53455200 	movtpl	r5, #20992	; 0x5200
     e98:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     e9c:	00303144 	eorseq	r3, r0, r4, asr #2
     ea0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     ea4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     ea8:	52003131 	andpl	r3, r0, #1073741836	; 0x4000000c
     eac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     eb0:	31444556 	cmpcc	r4, r6, asr r5
     eb4:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     eb8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     ebc:	33314445 	teqcc	r1, #1157627904	; 0x45000000
     ec0:	53455200 	movtpl	r5, #20992	; 0x5200
     ec4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     ec8:	00343144 	eorseq	r3, r4, r4, asr #2
     ecc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     ed0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     ed4:	53003531 	movwpl	r3, #1329	; 0x531
     ed8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     edc:	465f6b63 	ldrbmi	r6, [pc], -r3, ror #22
     ee0:	0067616c 	rsbeq	r6, r7, ip, ror #2
     ee4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     ee8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     eec:	52003731 	andpl	r3, r0, #12845056	; 0xc40000
     ef0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     ef4:	31444556 	cmpcc	r4, r6, asr r5
     ef8:	45520038 	ldrbmi	r0, [r2, #-56]	; 0xffffffc8
     efc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     f00:	39314445 	ldmdbcc	r1!, {r0, r2, r6, sl, lr}
     f04:	61735500 	cmnvs	r3, r0, lsl #10
     f08:	61466567 	cmpvs	r6, r7, ror #10
     f0c:	5f746c75 	svcpl	0x00746c75
     f10:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     f14:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f18:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
     f1c:	41535500 	cmpmi	r3, r0, lsl #10
     f20:	5f315452 	svcpl	0x00315452
     f24:	725f7872 	subsvc	r7, pc, #7471104	; 0x720000
     f28:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     f2c:	42535500 	subsmi	r5, r3, #0, 10
     f30:	5f50485f 	svcpl	0x0050485f
     f34:	5f4e4143 	svcpl	0x004e4143
     f38:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     f3c:	61485152 	cmpvs	r8, r2, asr r1
     f40:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f44:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f48:	555f314d 	ldrbpl	r3, [pc, #-333]	; e03 <__RW_SIZE__+0x86f>
     f4c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     f50:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f54:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f58:	414d4400 	cmpmi	sp, r0, lsl #8
     f5c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     f60:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     f64:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     f68:	61485152 	cmpvs	r8, r2, asr r1
     f6c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f70:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f74:	495f334d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     f78:	61485152 	cmpvs	r8, r2, asr r1
     f7c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f80:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     f84:	5f394954 	svcpl	0x00394954
     f88:	554c5f35 	strbpl	r5, [ip, #-3893]	; 0xfffff0cb
     f8c:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
     f90:	545f314d 	ldrbpl	r3, [pc], #-333	; f98 <__RW_SIZE__+0xa04>
     f94:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     f98:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
     f9c:	61485152 	cmpvs	r8, r2, asr r1
     fa0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fa4:	44420072 	strbmi	r0, [r2], #-114	; 0xffffff8e
     fa8:	55005254 	strpl	r5, [r0, #-596]	; 0xfffffdac
     fac:	61574253 	cmpvs	r7, r3, asr r2
     fb0:	7055656b 	subsvc	r6, r5, fp, ror #10
     fb4:	5152495f 	cmppl	r2, pc, asr r9
     fb8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     fbc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     fc0:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     fc4:	7078655f 	rsbsvc	r6, r8, pc, asr r5
     fc8:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
     fcc:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     fd0:	616e614d 	cmnvs	lr, sp, asr #2
     fd4:	485f6567 	ldmdami	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     fd8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fdc:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     fe0:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     fe4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     fe8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     fec:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     ff0:	414c4600 	cmpmi	ip, r0, lsl #12
     ff4:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     ff8:	61485152 	cmpvs	r8, r2, asr r1
     ffc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1000:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
    1004:	5f304954 	svcpl	0x00304954
    1008:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    100c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1010:	41007265 	tstmi	r0, r5, ror #4
    1014:	5f314344 	svcpl	0x00314344
    1018:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    101c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1020:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1024:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1028:	3158525f 	cmpcc	r8, pc, asr r2
    102c:	5152495f 	cmppl	r2, pc, asr r9
    1030:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1034:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1038:	32495053 	subcc	r5, r9, #83	; 0x53
    103c:	5152495f 	cmppl	r2, pc, asr r9
    1040:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1044:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1048:	31414d44 	cmpcc	r1, r4, asr #26
    104c:	6168435f 	cmnvs	r8, pc, asr r3
    1050:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1054:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    1058:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    105c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1060:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1064:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1068:	61485152 	cmpvs	r8, r2, asr r1
    106c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1070:	65500072 	ldrbvs	r0, [r0, #-114]	; 0xffffff8e
    1074:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
    1078:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    107c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1080:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1084:	31663233 	cmncc	r6, r3, lsr r2
    1088:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    108c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1090:	31414d44 	cmpcc	r1, r4, asr #26
    1094:	6168435f 	cmnvs	r8, pc, asr r3
    1098:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    109c:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    10a0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10a4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10a8:	53455200 	movtpl	r5, #20992	; 0x5200
    10ac:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    10b0:	55003944 	strpl	r3, [r0, #-2372]	; 0xfffff6bc
    10b4:	31747261 	cmncc	r4, r1, ror #4
    10b8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    10bc:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    10c0:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
    10c4:	43435200 	movtmi	r5, #12800	; 0x3200
    10c8:	5152495f 	cmppl	r2, pc, asr r9
    10cc:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    10d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10d4:	31414d44 	cmpcc	r1, r4, asr #26
    10d8:	6168435f 	cmnvs	r8, pc, asr r3
    10dc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    10e0:	52495f36 	subpl	r5, r9, #54, 30	; 0xd8
    10e4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    10e8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    10ec:	43545200 	cmpmi	r4, #0, 4
    10f0:	5152495f 	cmppl	r2, pc, asr r9
    10f4:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    10f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    10fc:	5f435653 	svcpl	0x00435653
    1100:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1104:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1108:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    110c:	75445f6b 	strbvc	r5, [r4, #-3947]	; 0xfffff095
    1110:	5400706d 	strpl	r7, [r0], #-109	; 0xffffff93
    1114:	5f344d49 	svcpl	0x00344d49
    1118:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    111c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1120:	53007265 	movwpl	r7, #613	; 0x265
    1124:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1128:	485f6b63 	ldmdami	pc, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    112c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1130:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1134:	5f314d49 	svcpl	0x00314d49
    1138:	5f4b5242 	svcpl	0x004b5242
    113c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1140:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1144:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    1148:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    114c:	495f6469 	ldmdbmi	pc, {r0, r3, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
    1150:	53005253 	movwpl	r5, #595	; 0x253
    1154:	0052434d 	subseq	r4, r2, sp, asr #6
    1158:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
    115c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1160:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    1164:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1168:	61745300 	cmnvs	r4, r0, lsl #6
    116c:	725f6b63 	subsvc	r6, pc, #101376	; 0x18c00
    1170:	49006765 	stmdbmi	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    1174:	5f324332 	svcpl	0x00324332
    1178:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    117c:	61485152 	cmpvs	r8, r2, asr r1
    1180:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1184:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
    1188:	49005241 	stmdbmi	r0, {r0, r6, r9, ip, lr}
    118c:	5f314332 	svcpl	0x00314332
    1190:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1194:	61485152 	cmpvs	r8, r2, asr r1
    1198:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    119c:	53550072 	cmppl	r5, #114	; 0x72
    11a0:	504c5f42 	subpl	r5, ip, r2, asr #30
    11a4:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
    11a8:	3058525f 	subscc	r5, r8, pc, asr r2
    11ac:	5152495f 	cmppl	r2, pc, asr r9
    11b0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    11b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11b8:	314d4954 	cmpcc	sp, r4, asr r9
    11bc:	5f43435f 	svcpl	0x0043435f
    11c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    11c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11c8:	43007265 	movwmi	r7, #613	; 0x265
    11cc:	00315243 	eorseq	r5, r1, r3, asr #4
    11d0:	33524343 	cmpcc	r2, #201326593	; 0xc000001
    11d4:	52434300 	subpl	r4, r3, #0, 6
    11d8:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
    11dc:	56524553 			; <UNDEFINED> instruction: 0x56524553
    11e0:	36314445 	ldrtcc	r4, [r1], -r5, asr #8
    11e4:	414d4400 	cmpmi	sp, r0, lsl #8
    11e8:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    11ec:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    11f0:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    11f4:	61485152 	cmpvs	r8, r2, asr r1
    11f8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    11fc:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
    1200:	5f324954 	svcpl	0x00324954
    1204:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1208:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    120c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1210:	45504d41 	ldrbmi	r4, [r0, #-3393]	; 0xfffff2bf
    1214:	52495f52 	subpl	r5, r9, #328	; 0x148
    1218:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    121c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1220:	414d4400 	cmpmi	sp, r0, lsl #8
    1224:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
    1228:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
    122c:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1230:	61485152 	cmpvs	r8, r2, asr r1
    1234:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1238:	53550072 	cmppl	r5, #114	; 0x72
    123c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
    1240:	5152495f 	cmppl	r2, pc, asr r9
    1244:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1248:	0072656c 	rsbseq	r6, r2, ip, ror #10
    124c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1250:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
    1254:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
    1258:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    125c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1260:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1264:	355f3949 	ldrbcc	r3, [pc, #-2377]	; 923 <__RW_SIZE__+0x38f>
    1268:	5152495f 	cmppl	r2, pc, asr r9
    126c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1270:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1274:	41435452 	cmpmi	r3, r2, asr r4
    1278:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    127c:	5152495f 	cmppl	r2, pc, asr r9
    1280:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1284:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1288:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    128c:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1290:	61485152 	cmpvs	r8, r2, asr r1
    1294:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1298:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    129c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    12a0:	31433249 	cmpcc	r3, r9, asr #4
    12a4:	5f56455f 	svcpl	0x0056455f
    12a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    12ac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    12b0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    12b4:	5f324d49 	svcpl	0x00324d49
    12b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    12bc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    12c0:	53007265 	movwpl	r7, #613	; 0x265
    12c4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    12c8:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    12cc:	00706f74 	rsbseq	r6, r0, r4, ror pc
    12d0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    12d4:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    12d8:	41430063 	cmpmi	r3, r3, rrx
    12dc:	0042494c 	subeq	r4, r2, ip, asr #18
    12e0:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    12e4:	5f6b6369 	svcpl	0x006b6369
    12e8:	63656843 	cmnvs	r5, #4390912	; 0x430000
    12ec:	69545f6b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    12f0:	756f656d 	strbvc	r6, [pc, #-1389]!	; d8b <__RW_SIZE__+0x7f7>
    12f4:	54430074 	strbpl	r0, [r3], #-116	; 0xffffff8c
    12f8:	4c004c52 	stcmi	12, cr4, [r0], {82}	; 0x52
    12fc:	0044414f 	subeq	r4, r4, pc, asr #2
    1300:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    1304:	5f6b6369 	svcpl	0x006b6369
    1308:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    130c:	65736d00 	ldrbvs	r6, [r3, #-3328]!	; 0xfffff300
    1310:	79530063 	ldmdbvc	r3, {r0, r1, r5, r6}^
    1314:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1318:	534f5f6b 	movtpl	r5, #65387	; 0xff6b
    131c:	6369545f 	cmnvs	r9, #1593835520	; 0x5f000000
    1320:	7953006b 	ldmdbvc	r3, {r0, r1, r3, r5, r6}^
    1324:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1328:	65475f6b 	strbvs	r5, [r7, #-3947]	; 0xfffff095
    132c:	69545f74 	ldmdbvs	r4, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1330:	5300656d 	movwpl	r6, #1389	; 0x56d
    1334:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1338:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    133c:	4c5f7465 	cfldrdmi	mvd7, [pc], {101}	; 0x65
    1340:	5f64616f 	svcpl	0x0064616f
    1344:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1348:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    134c:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
    1350:	2e72656d 	cdpcs	5, 7, cr6, cr2, cr13, {3}
    1354:	49540063 	ldmdbmi	r4, {r0, r1, r5, r6}^
    1358:	445f324d 	ldrbmi	r3, [pc], #-589	; 1360 <__RW_SIZE__+0xdcc>
    135c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1360:	7a697300 	bvc	1a5df68 <__RW_SIZE__+0x1a5d9d4>
    1364:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1368:	74635f5f 	strbtvc	r5, [r3], #-3935	; 0xfffff0a1
    136c:	5f657079 	svcpl	0x00657079
    1370:	5f727470 	svcpl	0x00727470
    1374:	696d005f 	stmdbvs	sp!, {r0, r1, r2, r3, r4, r6}^
    1378:	0073756e 	rsbseq	r7, r3, lr, ror #10
    137c:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
    1380:	72617500 	rsbvc	r7, r1, #0, 10
    1384:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1388:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    138c:	7300656c 	movwvc	r6, #1388	; 0x56c
    1390:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1394:	73003267 	movwvc	r3, #615	; 0x267
    1398:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    139c:	6155006e 	cmpvs	r5, lr, rrx
    13a0:	5f317472 	svcpl	0x00317472
    13a4:	5f746547 	svcpl	0x00746547
    13a8:	5f746e49 	svcpl	0x00746e49
    13ac:	006d754e 	rsbeq	r7, sp, lr, asr #10
    13b0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    13b4:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    13b8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    13bc:	61550066 	cmpvs	r5, r6, rrx
    13c0:	5f317472 	svcpl	0x00317472
    13c4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    13c8:	7479425f 	ldrbtvc	r4, [r9], #-607	; 0xfffffda1
    13cc:	61620065 	cmnvs	r2, r5, rrx
    13d0:	55006573 	strpl	r6, [r0, #-1395]	; 0xfffffa8d
    13d4:	31747261 	cmncc	r4, r1, ror #4
    13d8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    13dc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    13e0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    13e4:	74726155 	ldrbtvc	r6, [r2], #-341	; 0xfffffeab
    13e8:	65475f31 	strbvs	r5, [r7, #-3889]	; 0xfffff0cf
    13ec:	68435f74 	stmdavs	r3, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    13f0:	55007261 	strpl	r7, [r0, #-609]	; 0xfffffd9f
    13f4:	31747261 	cmncc	r4, r1, ror #4
    13f8:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    13fc:	74535f64 	ldrbvc	r5, [r3], #-3940	; 0xfffff09c
    1400:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    1404:	61726600 	cmnvs	r2, r0, lsl #12
    1408:	74610063 	strbtvc	r0, [r1], #-99	; 0xffffff9d
    140c:	6d00696f 	stcvs	9, cr6, [r0, #-444]	; 0xfffffe44
    1410:	00746e61 	rsbseq	r6, r4, r1, ror #28
    1414:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    1418:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    141c:	61620078 	smcvs	8200	; 0x2008
    1420:	Address 0x00001420 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__RW_SIZE__+0x10d0790>
   4:	6f532820 	svcvs	0x00532820
   8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
   c:	43207972 	teqmi	r0, #1867776	; 0x1c8000
  10:	4265646f 	rsbmi	r6, r5, #1862270976	; 0x6f000000
  14:	68636e65 	stmdavs	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  18:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
  1c:	30322065 	eorscc	r2, r2, r5, rrx
  20:	312e3331 	teqcc	lr, r1, lsr r3
  24:	34322d31 	ldrtcc	r2, [r2], #-3377	; 0xfffff2cf
  28:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  2c:	00312e38 	eorseq	r2, r1, r8, lsr lr

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__RW_SIZE__+0x45aa8>
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
      1c:	00000070 	andeq	r0, r0, r0, ror r0
      20:	0000000c 	andeq	r0, r0, ip
      24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      28:	7c020001 	stcvc	0, cr0, [r2], {1}
      2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000020 	andeq	r0, r0, r0, lsr #32
      38:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
      3c:	00000008 	andeq	r0, r0, r8
      40:	0000000c 	andeq	r0, r0, ip
      44:	00000020 	andeq	r0, r0, r0, lsr #32
      48:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
      4c:	00000006 	andeq	r0, r0, r6
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000020 	andeq	r0, r0, r0, lsr #32
      58:	0800326c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip, sp}
      5c:	00000008 	andeq	r0, r0, r8
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000020 	andeq	r0, r0, r0, lsr #32
      68:	08003274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp}
      6c:	00000006 	andeq	r0, r0, r6
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000020 	andeq	r0, r0, r0, lsr #32
      78:	0800327c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip, sp}
      7c:	00000006 	andeq	r0, r0, r6
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000020 	andeq	r0, r0, r0, lsr #32
      88:	08003284 	stmdaeq	r0, {r2, r7, r9, ip, sp}
      8c:	00000006 	andeq	r0, r0, r6
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000020 	andeq	r0, r0, r0, lsr #32
      98:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
      9c:	00000006 	andeq	r0, r0, r6
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000020 	andeq	r0, r0, r0, lsr #32
      a8:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
      ac:	00000006 	andeq	r0, r0, r6
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000020 	andeq	r0, r0, r0, lsr #32
      b8:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
      bc:	00000006 	andeq	r0, r0, r6
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000020 	andeq	r0, r0, r0, lsr #32
      c8:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
      cc:	00000006 	andeq	r0, r0, r6
      d0:	0000000c 	andeq	r0, r0, ip
      d4:	00000020 	andeq	r0, r0, r0, lsr #32
      d8:	080032ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip, sp}
      dc:	00000006 	andeq	r0, r0, r6
      e0:	0000000c 	andeq	r0, r0, ip
      e4:	00000020 	andeq	r0, r0, r0, lsr #32
      e8:	080032b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, sp}
      ec:	00000006 	andeq	r0, r0, r6
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	00000020 	andeq	r0, r0, r0, lsr #32
      f8:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
      fc:	00000004 	andeq	r0, r0, r4
     100:	0000000c 	andeq	r0, r0, ip
     104:	00000020 	andeq	r0, r0, r0, lsr #32
     108:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
     10c:	00000004 	andeq	r0, r0, r4
     110:	0000000c 	andeq	r0, r0, ip
     114:	00000020 	andeq	r0, r0, r0, lsr #32
     118:	080032c4 	stmdaeq	r0, {r2, r6, r7, r9, ip, sp}
     11c:	00000004 	andeq	r0, r0, r4
     120:	0000000c 	andeq	r0, r0, ip
     124:	00000020 	andeq	r0, r0, r0, lsr #32
     128:	080032c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp}
     12c:	00000006 	andeq	r0, r0, r6
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000020 	andeq	r0, r0, r0, lsr #32
     138:	080032d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, sp}
     13c:	00000008 	andeq	r0, r0, r8
     140:	0000000c 	andeq	r0, r0, ip
     144:	00000020 	andeq	r0, r0, r0, lsr #32
     148:	080032d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp}
     14c:	00000008 	andeq	r0, r0, r8
     150:	0000000c 	andeq	r0, r0, ip
     154:	00000020 	andeq	r0, r0, r0, lsr #32
     158:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
     15c:	00000006 	andeq	r0, r0, r6
     160:	0000000c 	andeq	r0, r0, ip
     164:	00000020 	andeq	r0, r0, r0, lsr #32
     168:	080032e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp}
     16c:	00000008 	andeq	r0, r0, r8
     170:	0000000c 	andeq	r0, r0, ip
     174:	00000020 	andeq	r0, r0, r0, lsr #32
     178:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     17c:	00000008 	andeq	r0, r0, r8
     180:	0000000c 	andeq	r0, r0, ip
     184:	00000020 	andeq	r0, r0, r0, lsr #32
     188:	080032f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp}
     18c:	00000006 	andeq	r0, r0, r6
     190:	0000000c 	andeq	r0, r0, ip
     194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     198:	7c020001 	stcvc	0, cr0, [r2], {1}
     19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1a0:	00000024 	andeq	r0, r0, r4, lsr #32
     1a4:	00000190 	muleq	r0, r0, r1
     1a8:	08003300 	stmdaeq	r0, {r8, r9, ip, sp}
     1ac:	000001fa 	strdeq	r0, [r0], -sl
     1b0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     1b4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     1b8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     1bc:	8a048905 	bhi	1225d8 <__RW_SIZE__+0x122044>
     1c0:	8e028b03 	vmlahi.f64	d8, d2, d3
     1c4:	700e4501 	andvc	r4, lr, r1, lsl #10
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
     1cc:	00000190 	muleq	r0, r0, r1
     1d0:	080034fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp}
     1d4:	0000022c 	andeq	r0, r0, ip, lsr #4
     1d8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     1dc:	86088509 	strhi	r8, [r8], -r9, lsl #10
     1e0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     1e4:	8a048905 	bhi	122600 <__RW_SIZE__+0x12206c>
     1e8:	8e028b03 	vmlahi.f64	d8, d2, d3
     1ec:	800e4101 	andhi	r4, lr, r1, lsl #2
     1f0:	00000001 	andeq	r0, r0, r1
     1f4:	00000028 	andeq	r0, r0, r8, lsr #32
     1f8:	00000190 	muleq	r0, r0, r1
     1fc:	08003728 	stmdaeq	r0, {r3, r5, r8, r9, sl, ip, sp}
     200:	00000256 	andeq	r0, r0, r6, asr r2
     204:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     208:	86088509 	strhi	r8, [r8], -r9, lsl #10
     20c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     210:	8a048905 	bhi	12262c <__RW_SIZE__+0x122098>
     214:	8e028b03 	vmlahi.f64	d8, d2, d3
     218:	900e4101 	andls	r4, lr, r1, lsl #2
     21c:	00000003 	andeq	r0, r0, r3
     220:	0000000c 	andeq	r0, r0, ip
     224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     228:	7c020001 	stcvc	0, cr0, [r2], {1}
     22c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     230:	0000000c 	andeq	r0, r0, ip
     234:	00000220 	andeq	r0, r0, r0, lsr #4
     238:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
     23c:	0000007c 	andeq	r0, r0, ip, ror r0
     240:	00000018 	andeq	r0, r0, r8, lsl r0
     244:	00000220 	andeq	r0, r0, r0, lsr #4
     248:	080039fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, sp}
     24c:	00000066 	andeq	r0, r0, r6, rrx
     250:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     254:	86028503 	strhi	r8, [r2], -r3, lsl #10
     258:	00000001 	andeq	r0, r0, r1
     25c:	0000000c 	andeq	r0, r0, ip
     260:	00000220 	andeq	r0, r0, r0, lsr #4
     264:	08003a64 	stmdaeq	r0, {r2, r5, r6, r9, fp, ip, sp}
     268:	00000034 	andeq	r0, r0, r4, lsr r0
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	00000220 	andeq	r0, r0, r0, lsr #4
     274:	08003a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, ip, sp}
     278:	0000003c 	andeq	r0, r0, ip, lsr r0
     27c:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     280:	00000001 	andeq	r0, r0, r1
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	00000220 	andeq	r0, r0, r0, lsr #4
     28c:	08003ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, sp}
     290:	0000003c 	andeq	r0, r0, ip, lsr r0
     294:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     298:	00000001 	andeq	r0, r0, r1
     29c:	00000018 	andeq	r0, r0, r8, lsl r0
     2a0:	00000220 	andeq	r0, r0, r0, lsr #4
     2a4:	08003b10 	stmdaeq	r0, {r4, r8, r9, fp, ip, sp}
     2a8:	000000f8 	strdeq	r0, [r0], -r8
     2ac:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     2b0:	86028503 	strhi	r8, [r2], -r3, lsl #10
     2b4:	00000001 	andeq	r0, r0, r1
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
     2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2c8:	0000000c 	andeq	r0, r0, ip
     2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2d0:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
     2d4:	0000004e 	andeq	r0, r0, lr, asr #32
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2e0:	08003c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, sp}
     2e4:	00000012 	andeq	r0, r0, r2, lsl r0
     2e8:	0000000c 	andeq	r0, r0, ip
     2ec:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2f0:	08003c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip, sp}
     2f4:	00000014 	andeq	r0, r0, r4, lsl r0
     2f8:	0000000c 	andeq	r0, r0, ip
     2fc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     300:	08003c80 	stmdaeq	r0, {r7, sl, fp, ip, sp}
     304:	00000016 	andeq	r0, r0, r6, lsl r0
     308:	00000014 	andeq	r0, r0, r4, lsl r0
     30c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     310:	08003c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip, sp}
     314:	0000008a 	andeq	r0, r0, sl, lsl #1
     318:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     31c:	00000001 	andeq	r0, r0, r1
     320:	0000000c 	andeq	r0, r0, ip
     324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     328:	7c020001 	stcvc	0, cr0, [r2], {1}
     32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     330:	0000000c 	andeq	r0, r0, ip
     334:	00000320 	andeq	r0, r0, r0, lsr #6
     338:	08003d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, sp}
     33c:	00000042 	andeq	r0, r0, r2, asr #32
     340:	00000014 	andeq	r0, r0, r4, lsl r0
     344:	00000320 	andeq	r0, r0, r0, lsr #6
     348:	08003d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, ip, sp}
     34c:	000000a2 	andeq	r0, r0, r2, lsr #1
     350:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     354:	00000001 	andeq	r0, r0, r1
     358:	00000014 	andeq	r0, r0, r4, lsl r0
     35c:	00000320 	andeq	r0, r0, r0, lsr #6
     360:	08003e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, ip, sp}
     364:	0000007a 	andeq	r0, r0, sl, ror r0
     368:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     36c:	00000001 	andeq	r0, r0, r1
     370:	00000010 	andeq	r0, r0, r0, lsl r0
     374:	00000320 	andeq	r0, r0, r0, lsr #6
     378:	08003e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip, sp}
     37c:	00000062 	andeq	r0, r0, r2, rrx
     380:	00080e46 	andeq	r0, r8, r6, asr #28
     384:	0000000c 	andeq	r0, r0, ip
     388:	00000320 	andeq	r0, r0, r0, lsr #6
     38c:	08003eec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp}
     390:	00000052 	andeq	r0, r0, r2, asr r0
     394:	0000000c 	andeq	r0, r0, ip
     398:	00000320 	andeq	r0, r0, r0, lsr #6
     39c:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
     3a0:	00000052 	andeq	r0, r0, r2, asr r0
     3a4:	00000014 	andeq	r0, r0, r4, lsl r0
     3a8:	00000320 	andeq	r0, r0, r0, lsr #6
     3ac:	08003f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, sp}
     3b0:	00000336 	andeq	r0, r0, r6, lsr r3
     3b4:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	0000000c 	andeq	r0, r0, ip
     3c0:	00000320 	andeq	r0, r0, r0, lsr #6
     3c4:	080042cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr}
     3c8:	0000005e 	andeq	r0, r0, lr, asr r0
     3cc:	00000018 	andeq	r0, r0, r8, lsl r0
     3d0:	00000320 	andeq	r0, r0, r0, lsr #6
     3d4:	0800432c 	stmdaeq	r0, {r2, r3, r5, r8, r9, lr}
     3d8:	00000364 	andeq	r0, r0, r4, ror #6
     3dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     3e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     3e4:	00018702 	andeq	r8, r1, r2, lsl #14
     3e8:	00000020 	andeq	r0, r0, r0, lsr #32
     3ec:	00000320 	andeq	r0, r0, r0, lsr #6
     3f0:	08004690 	stmdaeq	r0, {r4, r7, r9, sl, lr}
     3f4:	000000b8 	strheq	r0, [r0], -r8
     3f8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3fc:	86078508 	strhi	r8, [r7], -r8, lsl #10
     400:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     404:	8a038904 	bhi	e281c <__RW_SIZE__+0xe2288>
     408:	00018e02 	andeq	r8, r1, r2, lsl #28
     40c:	00000018 	andeq	r0, r0, r8, lsl r0
     410:	00000320 	andeq	r0, r0, r0, lsr #6
     414:	08004748 	stmdaeq	r0, {r3, r6, r8, r9, sl, lr}
     418:	00000342 	andeq	r0, r0, r2, asr #6
     41c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     420:	86038504 	strhi	r8, [r3], -r4, lsl #10
     424:	00018702 	andeq	r8, r1, r2, lsl #14
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	00000320 	andeq	r0, r0, r0, lsr #6
     430:	08004a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, lr}
     434:	00000094 	muleq	r0, r4, r0
     438:	83180e41 	tsthi	r8, #1040	; 0x410
     43c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     440:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     444:	00018e02 	andeq	r8, r1, r2, lsl #28
     448:	0000000c 	andeq	r0, r0, ip
     44c:	00000320 	andeq	r0, r0, r0, lsr #6
     450:	08004b20 	stmdaeq	r0, {r5, r8, r9, fp, lr}
     454:	00000006 	andeq	r0, r0, r6
     458:	0000001c 	andeq	r0, r0, ip, lsl r0
     45c:	00000320 	andeq	r0, r0, r0, lsr #6
     460:	08004b28 	stmdaeq	r0, {r3, r5, r8, r9, fp, lr}
     464:	000000b4 	strheq	r0, [r0], -r4
     468:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     46c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     470:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     474:	00018e02 	andeq	r8, r1, r2, lsl #28
     478:	00000018 	andeq	r0, r0, r8, lsl r0
     47c:	00000320 	andeq	r0, r0, r0, lsr #6
     480:	08004bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp, lr}
     484:	00001e26 	andeq	r1, r0, r6, lsr #28
     488:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     48c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     490:	200e7301 	andcs	r7, lr, r1, lsl #6
     494:	00000018 	andeq	r0, r0, r8, lsl r0
     498:	00000320 	andeq	r0, r0, r0, lsr #6
     49c:	08006a04 	stmdaeq	r0, {r2, r9, fp, sp, lr}
     4a0:	000003c0 	andeq	r0, r0, r0, asr #7
     4a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     4a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     4ac:	00018702 	andeq	r8, r1, r2, lsl #14
     4b0:	0000000c 	andeq	r0, r0, ip
     4b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4b8:	7c020001 	stcvc	0, cr0, [r2], {1}
     4bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4c0:	0000000c 	andeq	r0, r0, ip
     4c4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     4c8:	08006dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, sp, lr}
     4cc:	0000002e 	andeq	r0, r0, lr, lsr #32
     4d0:	0000000c 	andeq	r0, r0, ip
     4d4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     4d8:	08006df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
     4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4e0:	0000000c 	andeq	r0, r0, ip
     4e4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     4e8:	08006e10 	stmdaeq	r0, {r4, r9, sl, fp, sp, lr}
     4ec:	00000012 	andeq	r0, r0, r2, lsl r0
     4f0:	0000000c 	andeq	r0, r0, ip
     4f4:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
     4f8:	08006e24 	stmdaeq	r0, {r2, r5, r9, sl, fp, sp, lr}
     4fc:	00000012 	andeq	r0, r0, r2, lsl r0
     500:	0000000c 	andeq	r0, r0, ip
     504:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     508:	7c020001 	stcvc	0, cr0, [r2], {1}
     50c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     510:	00000014 	andeq	r0, r0, r4, lsl r0
     514:	00000500 	andeq	r0, r0, r0, lsl #10
     518:	08006e38 	stmdaeq	r0, {r3, r4, r5, r9, sl, fp, sp, lr}
     51c:	00000030 	andeq	r0, r0, r0, lsr r0
     520:	83080e41 	movwhi	r0, #36417	; 0x8e41
     524:	00018e02 	andeq	r8, r1, r2, lsl #28
     528:	0000000c 	andeq	r0, r0, ip
     52c:	00000500 	andeq	r0, r0, r0, lsl #10
     530:	08006e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, sp, lr}
     534:	00000020 	andeq	r0, r0, r0, lsr #32
     538:	0000000c 	andeq	r0, r0, ip
     53c:	00000500 	andeq	r0, r0, r0, lsl #10
     540:	08006e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, sp, lr}
     544:	00000020 	andeq	r0, r0, r0, lsr #32
     548:	0000000c 	andeq	r0, r0, ip
     54c:	00000500 	andeq	r0, r0, r0, lsl #10
     550:	08006ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, sp, lr}
     554:	00000020 	andeq	r0, r0, r0, lsr #32
     558:	00000018 	andeq	r0, r0, r8, lsl r0
     55c:	00000500 	andeq	r0, r0, r0, lsl #10
     560:	08006ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, sp, lr}
     564:	0000007a 	andeq	r0, r0, sl, ror r0
     568:	83100e41 	tsthi	r0, #1040	; 0x410
     56c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
     574:	00000018 	andeq	r0, r0, r8, lsl r0
     578:	00000500 	andeq	r0, r0, r0, lsl #10
     57c:	08006f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, sp, lr}
     580:	0000008c 	andeq	r0, r0, ip, lsl #1
     584:	83100e41 	tsthi	r0, #1040	; 0x410
     588:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     58c:	00018e02 	andeq	r8, r1, r2, lsl #28
     590:	0000000c 	andeq	r0, r0, ip
     594:	00000500 	andeq	r0, r0, r0, lsl #10
     598:	08006fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, sp, lr}
     59c:	00000198 	muleq	r0, r8, r1
     5a0:	0000000c 	andeq	r0, r0, ip
     5a4:	00000500 	andeq	r0, r0, r0, lsl #10
     5a8:	08007168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp, lr}
     5ac:	000000ac 	andeq	r0, r0, ip, lsr #1
     5b0:	00000018 	andeq	r0, r0, r8, lsl r0
     5b4:	00000500 	andeq	r0, r0, r0, lsl #10
     5b8:	08007214 	stmdaeq	r0, {r2, r4, r9, ip, sp, lr}
     5bc:	00000102 	andeq	r0, r0, r2, lsl #2
     5c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5c4:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
     5c8:	0000100e 	andeq	r1, r0, lr
     5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d0:	00000500 	andeq	r0, r0, r0, lsl #10
     5d4:	08007318 	stmdaeq	r0, {r3, r4, r8, r9, ip, sp, lr}
     5d8:	00000040 	andeq	r0, r0, r0, asr #32
     5dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     5e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     5e4:	42018e02 	andmi	r8, r1, #2, 28
     5e8:	0000180e 	andeq	r1, r0, lr, lsl #16
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
     5f0:	00000500 	andeq	r0, r0, r0, lsl #10
     5f4:	08007358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp, lr}
     5f8:	0000007a 	andeq	r0, r0, sl, ror r0
     5fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     600:	00018502 	andeq	r8, r1, r2, lsl #10
     604:	0000000c 	andeq	r0, r0, ip
     608:	00000500 	andeq	r0, r0, r0, lsl #10
     60c:	080073d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, ip, sp, lr}
     610:	00000106 	andeq	r0, r0, r6, lsl #2
     614:	00000018 	andeq	r0, r0, r8, lsl r0
     618:	00000500 	andeq	r0, r0, r0, lsl #10
     61c:	080074dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp, lr}
     620:	000001d6 	ldrdeq	r0, [r0], -r6
     624:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     628:	46018e02 	strmi	r8, [r1], -r2, lsl #28
     62c:	0000100e 	andeq	r1, r0, lr
     630:	00000018 	andeq	r0, r0, r8, lsl r0
     634:	00000500 	andeq	r0, r0, r0, lsl #10
     638:	080076b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, ip, sp, lr}
     63c:	0000006e 	andeq	r0, r0, lr, rrx
     640:	83100e41 	tsthi	r0, #1040	; 0x410
     644:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     648:	00018e02 	andeq	r8, r1, r2, lsl #28
     64c:	00000018 	andeq	r0, r0, r8, lsl r0
     650:	00000500 	andeq	r0, r0, r0, lsl #10
     654:	08007724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip, sp, lr}
     658:	00000032 	andeq	r0, r0, r2, lsr r0
     65c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     660:	86028503 	strhi	r8, [r2], -r3, lsl #10
     664:	00000001 	andeq	r0, r0, r1
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	00000500 	andeq	r0, r0, r0, lsl #10
     670:	08007758 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, ip, sp, lr}
     674:	00000062 	andeq	r0, r0, r2, rrx
     678:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     67c:	49018e02 	stmdbmi	r1, {r1, r9, sl, fp, pc}
     680:	0000200e 	andeq	r2, r0, lr
     684:	0000000c 	andeq	r0, r0, ip
     688:	00000500 	andeq	r0, r0, r0, lsl #10
     68c:	080077bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
     690:	00000034 	andeq	r0, r0, r4, lsr r0
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	00000500 	andeq	r0, r0, r0, lsl #10
     69c:	080077f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
     6a0:	00000070 	andeq	r0, r0, r0, ror r0
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6a8:	00018502 	andeq	r8, r1, r2, lsl #10
     6ac:	00000024 	andeq	r0, r0, r4, lsr #32
     6b0:	00000500 	andeq	r0, r0, r0, lsl #10
     6b4:	08007860 	stmdaeq	r0, {r5, r6, fp, ip, sp, lr}
     6b8:	00000430 	andeq	r0, r0, r0, lsr r4
     6bc:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     6c0:	86078508 	strhi	r8, [r7], -r8, lsl #10
     6c4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     6c8:	8a038904 	bhi	e2ae0 <__RW_SIZE__+0xe254c>
     6cc:	46018b02 	strmi	r8, [r1], -r2, lsl #22
     6d0:	0000780e 	andeq	r7, r0, lr, lsl #16
     6d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6d8:	00000500 	andeq	r0, r0, r0, lsl #10
     6dc:	08007c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp, lr}
     6e0:	00000764 	andeq	r0, r0, r4, ror #14
     6e4:	83180e41 	tsthi	r8, #1040	; 0x410
     6e8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     6ec:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     6f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6f4:	00000020 	andeq	r0, r0, r0, lsr #32
     6f8:	00000500 	andeq	r0, r0, r0, lsl #10
     6fc:	080083f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, pc}
     700:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     704:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     708:	86058506 	strhi	r8, [r5], -r6, lsl #10
     70c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     710:	43018e02 	movwmi	r8, #7682	; 0x1e02
     714:	0000300e 	andeq	r3, r0, lr
     718:	00000014 	andeq	r0, r0, r4, lsl r0
     71c:	00000500 	andeq	r0, r0, r0, lsl #10
     720:	080087a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, pc}
     724:	0000004a 	andeq	r0, r0, sl, asr #32
     728:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
     72c:	180e4101 	stmdane	lr, {r0, r8, lr}
     730:	00000014 	andeq	r0, r0, r4, lsl r0
     734:	00000500 	andeq	r0, r0, r0, lsl #10
     738:	080087f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, pc}
     73c:	00000048 	andeq	r0, r0, r8, asr #32
     740:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
     744:	180e4101 	stmdane	lr, {r0, r8, lr}
     748:	00000024 	andeq	r0, r0, r4, lsr #32
     74c:	00000500 	andeq	r0, r0, r0, lsl #10
     750:	08008838 	stmdaeq	r0, {r3, r4, r5, fp, pc}
     754:	00000490 	muleq	r0, r0, r4
     758:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     75c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     760:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     764:	8a048905 	bhi	122b80 <__RW_SIZE__+0x1225ec>
     768:	8e028b03 	vmlahi.f64	d8, d2, d3
     76c:	580e4101 	stmdapl	lr, {r0, r8, lr}
     770:	0000000c 	andeq	r0, r0, ip
     774:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     778:	7c020001 	stcvc	0, cr0, [r2], {1}
     77c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     780:	00000014 	andeq	r0, r0, r4, lsl r0
     784:	00000770 	andeq	r0, r0, r0, ror r7
     788:	08008cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, pc}
     78c:	00000044 	andeq	r0, r0, r4, asr #32
     790:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     794:	00000001 	andeq	r0, r0, r1
     798:	0000000c 	andeq	r0, r0, ip
     79c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7a0:	7c020001 	stcvc	0, cr0, [r2], {1}
     7a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7ac:	00000798 	muleq	r0, r8, r7
     7b0:	08008d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, pc}
     7b4:	00000038 	andeq	r0, r0, r8, lsr r0
     7b8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     7bc:	86048505 	strhi	r8, [r4], -r5, lsl #10
     7c0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     7c4:	200e4301 	andcs	r4, lr, r1, lsl #6
     7c8:	00000014 	andeq	r0, r0, r4, lsl r0
     7cc:	00000798 	muleq	r0, r8, r7
     7d0:	08008d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, pc}
     7d4:	00000032 	andeq	r0, r0, r2, lsr r0
     7d8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     7e0:	00000014 	andeq	r0, r0, r4, lsl r0
     7e4:	00000798 	muleq	r0, r8, r7
     7e8:	08008d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, pc}
     7ec:	00000010 	andeq	r0, r0, r0, lsl r0
     7f0:	83080e43 	movwhi	r0, #36419	; 0x8e43
     7f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7f8:	00000014 	andeq	r0, r0, r4, lsl r0
     7fc:	00000798 	muleq	r0, r8, r7
     800:	08008d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, pc}
     804:	0000012a 	andeq	r0, r0, sl, lsr #2
     808:	83080e44 	movwhi	r0, #36420	; 0x8e44
     80c:	00018e02 	andeq	r8, r1, r2, lsl #28
     810:	00000014 	andeq	r0, r0, r4, lsl r0
     814:	00000798 	muleq	r0, r8, r7
     818:	08008eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, pc}
     81c:	00000010 	andeq	r0, r0, r0, lsl r0
     820:	83080e43 	movwhi	r0, #36419	; 0x8e43
     824:	00018e02 	andeq	r8, r1, r2, lsl #28
     828:	00000014 	andeq	r0, r0, r4, lsl r0
     82c:	00000798 	muleq	r0, r8, r7
     830:	08008ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, pc}
     834:	00000010 	andeq	r0, r0, r0, lsl r0
     838:	83080e43 	movwhi	r0, #36419	; 0x8e43
     83c:	00018e02 	andeq	r8, r1, r2, lsl #28
     840:	00000014 	andeq	r0, r0, r4, lsl r0
     844:	00000798 	muleq	r0, r8, r7
     848:	08008ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp, pc}
     84c:	00000010 	andeq	r0, r0, r0, lsl r0
     850:	83080e43 	movwhi	r0, #36419	; 0x8e43
     854:	00018e02 	andeq	r8, r1, r2, lsl #28
     858:	00000014 	andeq	r0, r0, r4, lsl r0
     85c:	00000798 	muleq	r0, r8, r7
     860:	08008ee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, pc}
     864:	00000010 	andeq	r0, r0, r0, lsl r0
     868:	83080e43 	movwhi	r0, #36419	; 0x8e43
     86c:	00018e02 	andeq	r8, r1, r2, lsl #28
     870:	00000014 	andeq	r0, r0, r4, lsl r0
     874:	00000798 	muleq	r0, r8, r7
     878:	08008ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, pc}
     87c:	00000010 	andeq	r0, r0, r0, lsl r0
     880:	83080e43 	movwhi	r0, #36419	; 0x8e43
     884:	00018e02 	andeq	r8, r1, r2, lsl #28
     888:	00000014 	andeq	r0, r0, r4, lsl r0
     88c:	00000798 	muleq	r0, r8, r7
     890:	08008f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, pc}
     894:	00000010 	andeq	r0, r0, r0, lsl r0
     898:	83080e43 	movwhi	r0, #36419	; 0x8e43
     89c:	00018e02 	andeq	r8, r1, r2, lsl #28
     8a0:	0000000c 	andeq	r0, r0, ip
     8a4:	00000798 	muleq	r0, r8, r7
     8a8:	08008f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, pc}
     8ac:	0000000e 	andeq	r0, r0, lr
     8b0:	00000014 	andeq	r0, r0, r4, lsl r0
     8b4:	00000798 	muleq	r0, r8, r7
     8b8:	08008f24 	stmdaeq	r0, {r2, r5, r8, r9, sl, fp, pc}
     8bc:	00000006 	andeq	r0, r0, r6
     8c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8c8:	00000014 	andeq	r0, r0, r4, lsl r0
     8cc:	00000798 	muleq	r0, r8, r7
     8d0:	08008f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, pc}
     8d4:	00000006 	andeq	r0, r0, r6
     8d8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8e0:	00000014 	andeq	r0, r0, r4, lsl r0
     8e4:	00000798 	muleq	r0, r8, r7
     8e8:	08008f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, pc}
     8ec:	00000006 	andeq	r0, r0, r6
     8f0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f8:	00000014 	andeq	r0, r0, r4, lsl r0
     8fc:	00000798 	muleq	r0, r8, r7
     900:	08008f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, pc}
     904:	00000006 	andeq	r0, r0, r6
     908:	83080e41 	movwhi	r0, #36417	; 0x8e41
     90c:	00018e02 	andeq	r8, r1, r2, lsl #28
     910:	00000014 	andeq	r0, r0, r4, lsl r0
     914:	00000798 	muleq	r0, r8, r7
     918:	08008f44 	stmdaeq	r0, {r2, r6, r8, r9, sl, fp, pc}
     91c:	00000006 	andeq	r0, r0, r6
     920:	83080e41 	movwhi	r0, #36417	; 0x8e41
     924:	00018e02 	andeq	r8, r1, r2, lsl #28
     928:	00000014 	andeq	r0, r0, r4, lsl r0
     92c:	00000798 	muleq	r0, r8, r7
     930:	08008f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, pc}
     934:	00000006 	andeq	r0, r0, r6
     938:	83080e41 	movwhi	r0, #36417	; 0x8e41
     93c:	00018e02 	andeq	r8, r1, r2, lsl #28
     940:	00000014 	andeq	r0, r0, r4, lsl r0
     944:	00000798 	muleq	r0, r8, r7
     948:	08008f54 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, fp, pc}
     94c:	00000006 	andeq	r0, r0, r6
     950:	83080e41 	movwhi	r0, #36417	; 0x8e41
     954:	00018e02 	andeq	r8, r1, r2, lsl #28
     958:	00000014 	andeq	r0, r0, r4, lsl r0
     95c:	00000798 	muleq	r0, r8, r7
     960:	08008f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, pc}
     964:	00000006 	andeq	r0, r0, r6
     968:	83080e41 	movwhi	r0, #36417	; 0x8e41
     96c:	00018e02 	andeq	r8, r1, r2, lsl #28
     970:	00000014 	andeq	r0, r0, r4, lsl r0
     974:	00000798 	muleq	r0, r8, r7
     978:	08008f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, pc}
     97c:	00000006 	andeq	r0, r0, r6
     980:	83080e41 	movwhi	r0, #36417	; 0x8e41
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
     988:	00000018 	andeq	r0, r0, r8, lsl r0
     98c:	00000798 	muleq	r0, r8, r7
     990:	08008f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, pc}
     994:	00000032 	andeq	r0, r0, r2, lsr r0
     998:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     99c:	86028503 	strhi	r8, [r2], -r3, lsl #10
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000014 	andeq	r0, r0, r4, lsl r0
     9a8:	00000798 	muleq	r0, r8, r7
     9ac:	08008fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, pc}
     9b0:	00000006 	andeq	r0, r0, r6
     9b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9bc:	00000014 	andeq	r0, r0, r4, lsl r0
     9c0:	00000798 	muleq	r0, r8, r7
     9c4:	08008fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, pc}
     9c8:	00000006 	andeq	r0, r0, r6
     9cc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d4:	00000014 	andeq	r0, r0, r4, lsl r0
     9d8:	00000798 	muleq	r0, r8, r7
     9dc:	08008fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, pc}
     9e0:	00000006 	andeq	r0, r0, r6
     9e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9ec:	00000014 	andeq	r0, r0, r4, lsl r0
     9f0:	00000798 	muleq	r0, r8, r7
     9f4:	08008fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, pc}
     9f8:	00000006 	andeq	r0, r0, r6
     9fc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a00:	00018e02 	andeq	r8, r1, r2, lsl #28
     a04:	00000014 	andeq	r0, r0, r4, lsl r0
     a08:	00000798 	muleq	r0, r8, r7
     a0c:	08008fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, pc}
     a10:	00000006 	andeq	r0, r0, r6
     a14:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a18:	00018e02 	andeq	r8, r1, r2, lsl #28
     a1c:	00000014 	andeq	r0, r0, r4, lsl r0
     a20:	00000798 	muleq	r0, r8, r7
     a24:	08008fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, pc}
     a28:	00000006 	andeq	r0, r0, r6
     a2c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a30:	00018e02 	andeq	r8, r1, r2, lsl #28
     a34:	00000014 	andeq	r0, r0, r4, lsl r0
     a38:	00000798 	muleq	r0, r8, r7
     a3c:	08008fd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, fp, pc}
     a40:	00000006 	andeq	r0, r0, r6
     a44:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a48:	00018e02 	andeq	r8, r1, r2, lsl #28
     a4c:	00000014 	andeq	r0, r0, r4, lsl r0
     a50:	00000798 	muleq	r0, r8, r7
     a54:	08008fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, pc}
     a58:	00000006 	andeq	r0, r0, r6
     a5c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a60:	00018e02 	andeq	r8, r1, r2, lsl #28
     a64:	00000014 	andeq	r0, r0, r4, lsl r0
     a68:	00000798 	muleq	r0, r8, r7
     a6c:	08008fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, pc}
     a70:	00000006 	andeq	r0, r0, r6
     a74:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a78:	00018e02 	andeq	r8, r1, r2, lsl #28
     a7c:	00000014 	andeq	r0, r0, r4, lsl r0
     a80:	00000798 	muleq	r0, r8, r7
     a84:	08008fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, pc}
     a88:	00000006 	andeq	r0, r0, r6
     a8c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a90:	00018e02 	andeq	r8, r1, r2, lsl #28
     a94:	00000014 	andeq	r0, r0, r4, lsl r0
     a98:	00000798 	muleq	r0, r8, r7
     a9c:	08008ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aa0:	00000006 	andeq	r0, r0, r6
     aa4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     aa8:	00018e02 	andeq	r8, r1, r2, lsl #28
     aac:	00000014 	andeq	r0, r0, r4, lsl r0
     ab0:	00000798 	muleq	r0, r8, r7
     ab4:	08008ff8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ab8:	00000006 	andeq	r0, r0, r6
     abc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	00000014 	andeq	r0, r0, r4, lsl r0
     ac8:	00000798 	muleq	r0, r8, r7
     acc:	08009000 	stmdaeq	r0, {ip, pc}
     ad0:	00000006 	andeq	r0, r0, r6
     ad4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
     adc:	00000018 	andeq	r0, r0, r8, lsl r0
     ae0:	00000798 	muleq	r0, r8, r7
     ae4:	08009008 	stmdaeq	r0, {r3, ip, pc}
     ae8:	00000044 	andeq	r0, r0, r4, asr #32
     aec:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     af0:	86028503 	strhi	r8, [r2], -r3, lsl #10
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000014 	andeq	r0, r0, r4, lsl r0
     afc:	00000798 	muleq	r0, r8, r7
     b00:	0800904c 	stmdaeq	r0, {r2, r3, r6, ip, pc}
     b04:	00000006 	andeq	r0, r0, r6
     b08:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b10:	00000014 	andeq	r0, r0, r4, lsl r0
     b14:	00000798 	muleq	r0, r8, r7
     b18:	08009054 	stmdaeq	r0, {r2, r4, r6, ip, pc}
     b1c:	00000006 	andeq	r0, r0, r6
     b20:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b24:	00018e02 	andeq	r8, r1, r2, lsl #28
     b28:	00000014 	andeq	r0, r0, r4, lsl r0
     b2c:	00000798 	muleq	r0, r8, r7
     b30:	0800905c 	stmdaeq	r0, {r2, r3, r4, r6, ip, pc}
     b34:	00000006 	andeq	r0, r0, r6
     b38:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b3c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b40:	00000014 	andeq	r0, r0, r4, lsl r0
     b44:	00000798 	muleq	r0, r8, r7
     b48:	08009064 	stmdaeq	r0, {r2, r5, r6, ip, pc}
     b4c:	00000006 	andeq	r0, r0, r6
     b50:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b54:	00018e02 	andeq	r8, r1, r2, lsl #28
     b58:	00000014 	andeq	r0, r0, r4, lsl r0
     b5c:	00000798 	muleq	r0, r8, r7
     b60:	0800906c 	stmdaeq	r0, {r2, r3, r5, r6, ip, pc}
     b64:	00000006 	andeq	r0, r0, r6
     b68:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b6c:	00018e02 	andeq	r8, r1, r2, lsl #28
     b70:	00000014 	andeq	r0, r0, r4, lsl r0
     b74:	00000798 	muleq	r0, r8, r7
     b78:	08009074 	stmdaeq	r0, {r2, r4, r5, r6, ip, pc}
     b7c:	00000006 	andeq	r0, r0, r6
     b80:	83080e41 	movwhi	r0, #36417	; 0x8e41
     b84:	00018e02 	andeq	r8, r1, r2, lsl #28
     b88:	0000000c 	andeq	r0, r0, ip
     b8c:	00000798 	muleq	r0, r8, r7
     b90:	0800907c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, pc}
     b94:	00000022 	andeq	r0, r0, r2, lsr #32
     b98:	00000014 	andeq	r0, r0, r4, lsl r0
     b9c:	00000798 	muleq	r0, r8, r7
     ba0:	080090a0 	stmdaeq	r0, {r5, r7, ip, pc}
     ba4:	00000006 	andeq	r0, r0, r6
     ba8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bac:	00018e02 	andeq	r8, r1, r2, lsl #28
     bb0:	00000014 	andeq	r0, r0, r4, lsl r0
     bb4:	00000798 	muleq	r0, r8, r7
     bb8:	080090a8 	stmdaeq	r0, {r3, r5, r7, ip, pc}
     bbc:	00000006 	andeq	r0, r0, r6
     bc0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc8:	00000014 	andeq	r0, r0, r4, lsl r0
     bcc:	00000798 	muleq	r0, r8, r7
     bd0:	080090b0 	stmdaeq	r0, {r4, r5, r7, ip, pc}
     bd4:	00000006 	andeq	r0, r0, r6
     bd8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bdc:	00018e02 	andeq	r8, r1, r2, lsl #28
     be0:	00000014 	andeq	r0, r0, r4, lsl r0
     be4:	00000798 	muleq	r0, r8, r7
     be8:	080090b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, pc}
     bec:	00000006 	andeq	r0, r0, r6
     bf0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bf4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf8:	00000014 	andeq	r0, r0, r4, lsl r0
     bfc:	00000798 	muleq	r0, r8, r7
     c00:	080090c0 	stmdaeq	r0, {r6, r7, ip, pc}
     c04:	00000006 	andeq	r0, r0, r6
     c08:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c10:	00000014 	andeq	r0, r0, r4, lsl r0
     c14:	00000798 	muleq	r0, r8, r7
     c18:	080090c8 	stmdaeq	r0, {r3, r6, r7, ip, pc}
     c1c:	00000006 	andeq	r0, r0, r6
     c20:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c24:	00018e02 	andeq	r8, r1, r2, lsl #28
     c28:	00000014 	andeq	r0, r0, r4, lsl r0
     c2c:	00000798 	muleq	r0, r8, r7
     c30:	080090d0 	stmdaeq	r0, {r4, r6, r7, ip, pc}
     c34:	00000016 	andeq	r0, r0, r6, lsl r0
     c38:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c3c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c40:	00000014 	andeq	r0, r0, r4, lsl r0
     c44:	00000798 	muleq	r0, r8, r7
     c48:	080090e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, pc}
     c4c:	00000006 	andeq	r0, r0, r6
     c50:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c54:	00018e02 	andeq	r8, r1, r2, lsl #28
     c58:	00000014 	andeq	r0, r0, r4, lsl r0
     c5c:	00000798 	muleq	r0, r8, r7
     c60:	080090f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, pc}
     c64:	00000006 	andeq	r0, r0, r6
     c68:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c6c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c70:	00000018 	andeq	r0, r0, r8, lsl r0
     c74:	00000798 	muleq	r0, r8, r7
     c78:	080090f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, pc}
     c7c:	00000046 	andeq	r0, r0, r6, asr #32
     c80:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     c84:	86028503 	strhi	r8, [r2], -r3, lsl #10
     c88:	00000001 	andeq	r0, r0, r1
     c8c:	00000014 	andeq	r0, r0, r4, lsl r0
     c90:	00000798 	muleq	r0, r8, r7
     c94:	08009140 	stmdaeq	r0, {r6, r8, ip, pc}
     c98:	00000006 	andeq	r0, r0, r6
     c9c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ca0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca4:	00000014 	andeq	r0, r0, r4, lsl r0
     ca8:	00000798 	muleq	r0, r8, r7
     cac:	08009148 	stmdaeq	r0, {r3, r6, r8, ip, pc}
     cb0:	00000006 	andeq	r0, r0, r6
     cb4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cc4:	7c020001 	stcvc	0, cr0, [r2], {1}
     cc8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ccc:	00000014 	andeq	r0, r0, r4, lsl r0
     cd0:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     cd4:	08009150 	stmdaeq	r0, {r4, r6, r8, ip, pc}
     cd8:	00000048 	andeq	r0, r0, r8, asr #32
     cdc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     ce0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ce4:	0000000c 	andeq	r0, r0, ip
     ce8:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     cec:	08009198 	stmdaeq	r0, {r3, r4, r7, r8, ip, pc}
     cf0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf4:	0000000c 	andeq	r0, r0, ip
     cf8:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     cfc:	080091b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, pc}
     d00:	0000000e 	andeq	r0, r0, lr
     d04:	0000000c 	andeq	r0, r0, ip
     d08:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     d0c:	080091c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, pc}
     d10:	0000000c 	andeq	r0, r0, ip
     d14:	0000000c 	andeq	r0, r0, ip
     d18:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     d1c:	080091d0 	stmdaeq	r0, {r4, r6, r7, r8, ip, pc}
     d20:	0000000c 	andeq	r0, r0, ip
     d24:	0000000c 	andeq	r0, r0, ip
     d28:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     d2c:	080091dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, pc}
     d30:	00000010 	andeq	r0, r0, r0, lsl r0
     d34:	0000000c 	andeq	r0, r0, ip
     d38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d3c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d44:	00000018 	andeq	r0, r0, r8, lsl r0
     d48:	00000d34 	andeq	r0, r0, r4, lsr sp
     d4c:	080091f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip, pc}
     d50:	000000f4 	strdeq	r0, [r0], -r4
     d54:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     d58:	86028503 	strhi	r8, [r2], -r3, lsl #10
     d5c:	00000001 	andeq	r0, r0, r1
     d60:	00000014 	andeq	r0, r0, r4, lsl r0
     d64:	00000d34 	andeq	r0, r0, r4, lsr sp
     d68:	080092e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, pc}
     d6c:	000000b6 	strheq	r0, [r0], -r6
     d70:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d74:	00018502 	andeq	r8, r1, r2, lsl #10
     d78:	0000000c 	andeq	r0, r0, ip
     d7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d80:	7c020001 	stcvc	0, cr0, [r2], {1}
     d84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d88:	00000018 	andeq	r0, r0, r8, lsl r0
     d8c:	00000d78 	andeq	r0, r0, r8, ror sp
     d90:	080093a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, pc}
     d94:	000000b8 	strheq	r0, [r0], -r8
     d98:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     d9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     da0:	00018e02 	andeq	r8, r1, r2, lsl #28
     da4:	0000000c 	andeq	r0, r0, ip
     da8:	00000d78 	andeq	r0, r0, r8, ror sp
     dac:	08009458 	stmdaeq	r0, {r3, r4, r6, sl, ip, pc}
     db0:	0000003a 	andeq	r0, r0, sl, lsr r0
     db4:	00000014 	andeq	r0, r0, r4, lsl r0
     db8:	00000d78 	andeq	r0, r0, r8, ror sp
     dbc:	08009494 	stmdaeq	r0, {r2, r4, r7, sl, ip, pc}
     dc0:	00000042 	andeq	r0, r0, r2, asr #32
     dc4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     dc8:	00018502 	andeq	r8, r1, r2, lsl #10
     dcc:	00000024 	andeq	r0, r0, r4, lsr #32
     dd0:	00000d78 	andeq	r0, r0, r8, ror sp
     dd4:	080094d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, ip, pc}
     dd8:	00000060 	andeq	r0, r0, r0, rrx
     ddc:	80100e41 	andshi	r0, r0, r1, asr #28
     de0:	82038104 	andhi	r8, r3, #4, 2
     de4:	41018302 	tstmi	r1, r2, lsl #6
     de8:	07841c0e 	streq	r1, [r4, lr, lsl #24]
     dec:	058e0685 	streq	r0, [lr, #1669]	; 0x685
     df0:	02a80e41 	adceq	r0, r8, #1040	; 0x410
     df4:	0000000c 	andeq	r0, r0, ip
     df8:	00000d78 	andeq	r0, r0, r8, ror sp
     dfc:	08009538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, pc}
     e00:	00000016 	andeq	r0, r0, r6, lsl r0
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	00000d78 	andeq	r0, r0, r8, ror sp
     e0c:	08009550 	stmdaeq	r0, {r4, r6, r8, sl, ip, pc}
     e10:	00000018 	andeq	r0, r0, r8, lsl r0
     e14:	0000001c 	andeq	r0, r0, ip, lsl r0
     e18:	00000d78 	andeq	r0, r0, r8, ror sp
     e1c:	08009568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, pc}
     e20:	0000009c 	muleq	r0, ip, r0
     e24:	83180e41 	tsthi	r8, #1040	; 0x410
     e28:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e2c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e30:	00018e02 	andeq	r8, r1, r2, lsl #28
     e34:	0000001c 	andeq	r0, r0, ip, lsl r0
     e38:	00000d78 	andeq	r0, r0, r8, ror sp
     e3c:	08009604 	stmdaeq	r0, {r2, r9, sl, ip, pc}
     e40:	000000ba 	strheq	r0, [r0], -sl
     e44:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     e48:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e4c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e50:	380e4101 	stmdacc	lr, {r0, r8, lr}
     e54:	0000000c 	andeq	r0, r0, ip
     e58:	00000d78 	andeq	r0, r0, r8, ror sp
     e5c:	080096c0 	stmdaeq	r0, {r6, r7, r9, sl, ip, pc}
     e60:	00000042 	andeq	r0, r0, r2, asr #32
     e64:	0000000c 	andeq	r0, r0, ip
     e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e74:	0000000c 	andeq	r0, r0, ip
     e78:	00000e64 	andeq	r0, r0, r4, ror #28
     e7c:	08009708 	stmdaeq	r0, {r3, r8, r9, sl, ip, pc}
     e80:	00000008 	andeq	r0, r0, r8
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	00000e64 	andeq	r0, r0, r4, ror #28
     e8c:	08009710 	stmdaeq	r0, {r4, r8, r9, sl, ip, pc}
     e90:	00000008 	andeq	r0, r0, r8
     e94:	0000000c 	andeq	r0, r0, ip
     e98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     ea0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ea4:	00000018 	andeq	r0, r0, r8, lsl r0
     ea8:	00000e94 	muleq	r0, r4, lr
     eac:	08009718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, pc}
     eb0:	0000005a 	andeq	r0, r0, sl, asr r0
     eb4:	83100e41 	tsthi	r0, #1040	; 0x410
     eb8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     ebc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ec0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ec4:	00000e94 	muleq	r0, r4, lr
     ec8:	08009774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, pc}
     ecc:	0000009c 	muleq	r0, ip, r0
     ed0:	83180e41 	tsthi	r8, #1040	; 0x410
     ed4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     ed8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     edc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ee0:	0000000c 	andeq	r0, r0, ip
     ee4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ee8:	7c020001 	stcvc	0, cr0, [r2], {1}
     eec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef0:	0000000c 	andeq	r0, r0, ip
     ef4:	00000ee0 	andeq	r0, r0, r0, ror #29
     ef8:	08009810 	stmdaeq	r0, {r4, fp, ip, pc}
     efc:	0000005e 	andeq	r0, r0, lr, asr r0
     f00:	0000000c 	andeq	r0, r0, ip
     f04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f08:	7c020001 	stcvc	0, cr0, [r2], {1}
     f0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f10:	00000024 	andeq	r0, r0, r4, lsr #32
     f14:	00000f00 	andeq	r0, r0, r0, lsl #30
     f18:	08009870 	stmdaeq	r0, {r4, r5, r6, fp, ip, pc}
     f1c:	0000013c 	andeq	r0, r0, ip, lsr r1
     f20:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     f24:	86088509 	strhi	r8, [r8], -r9, lsl #10
     f28:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     f2c:	8a048905 	bhi	123348 <__RW_SIZE__+0x122db4>
     f30:	8e028b03 	vmlahi.f64	d8, d2, d3
     f34:	380e4301 	stmdacc	lr, {r0, r8, r9, lr}
     f38:	00000014 	andeq	r0, r0, r4, lsl r0
     f3c:	00000f00 	andeq	r0, r0, r0, lsl #30
     f40:	080099ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, fp, ip, pc}
     f44:	0000001a 	andeq	r0, r0, sl, lsl r0
     f48:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f4c:	00018502 	andeq	r8, r1, r2, lsl #10
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f58:	7c020001 	stcvc	0, cr0, [r2], {1}
     f5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f60:	00000018 	andeq	r0, r0, r8, lsl r0
     f64:	00000f50 	andeq	r0, r0, r0, asr pc
     f68:	080099c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip, pc}
     f6c:	00000032 	andeq	r0, r0, r2, lsr r0
     f70:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f74:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f78:	780e4101 	stmdavc	lr, {r0, r8, lr}
     f7c:	00000014 	andeq	r0, r0, r4, lsl r0
     f80:	00000f50 	andeq	r0, r0, r0, asr pc
     f84:	080099fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, pc}
     f88:	0000001a 	andeq	r0, r0, sl, lsl r0
     f8c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f90:	00018502 	andeq	r8, r1, r2, lsl #10
     f94:	0000000c 	andeq	r0, r0, ip
     f98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa4:	0000000c 	andeq	r0, r0, ip
     fa8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fac:	08009a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, pc}
     fb0:	00000010 	andeq	r0, r0, r0, lsl r0
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     fbc:	08009a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, pc}
     fc0:	00000010 	andeq	r0, r0, r0, lsl r0
     fc4:	0000000c 	andeq	r0, r0, ip
     fc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fcc:	7c020001 	stcvc	0, cr0, [r2], {1}
     fd0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fd4:	00000024 	andeq	r0, r0, r4, lsr #32
     fd8:	00000fc4 	andeq	r0, r0, r4, asr #31
     fdc:	08009a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, pc}
     fe0:	0000056e 	andeq	r0, r0, lr, ror #10
     fe4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     fe8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     fec:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     ff0:	8a048905 	bhi	12340c <__RW_SIZE__+0x122e78>
     ff4:	8e028b03 	vmlahi.f64	d8, d2, d3
     ff8:	300e4401 	andcc	r4, lr, r1, lsl #8
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1004:	7c020001 	stcvc	0, cr0, [r2], {1}
    1008:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	00000ffc 	strdeq	r0, [r0], -ip
    1014:	08009fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip, pc}
    1018:	00000002 	andeq	r0, r0, r2
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	00000ffc 	strdeq	r0, [r0], -ip
    1024:	08009fac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, fp, ip, pc}
    1028:	00000002 	andeq	r0, r0, r2
    102c:	0000000c 	andeq	r0, r0, ip
    1030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1034:	7c020001 	stcvc	0, cr0, [r2], {1}
    1038:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    103c:	00000018 	andeq	r0, r0, r8, lsl r0
    1040:	0000102c 	andeq	r1, r0, ip, lsr #32
    1044:	08009fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip, pc}
    1048:	00000026 	andeq	r0, r0, r6, lsr #32
    104c:	83100e41 	tsthi	r0, #1040	; 0x410
    1050:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1054:	00018e02 	andeq	r8, r1, r2, lsl #28
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1060:	7c020001 	stcvc	0, cr0, [r2], {1}
    1064:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1068:	00000028 	andeq	r0, r0, r8, lsr #32
    106c:	00001058 	andeq	r1, r0, r8, asr r0
    1070:	08009fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
    1074:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
    1078:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    107c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1080:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1084:	8a048905 	bhi	1234a0 <__RW_SIZE__+0x122f0c>
    1088:	8e028b03 	vmlahi.f64	d8, d2, d3
    108c:	c80e4101 	stmdagt	lr, {r0, r8, lr}
    1090:	00000002 	andeq	r0, r0, r2
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    109c:	7c020001 	stcvc	0, cr0, [r2], {1}
    10a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10a4:	00000024 	andeq	r0, r0, r4, lsr #32
    10a8:	00001094 	muleq	r0, r4, r0
    10ac:	0800b490 	stmdaeq	r0, {r4, r7, sl, ip, sp, pc}
    10b0:	0000014a 	andeq	r0, r0, sl, asr #2
    10b4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    10b8:	86088509 	strhi	r8, [r8], -r9, lsl #10
    10bc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    10c0:	8a048905 	bhi	1234dc <__RW_SIZE__+0x122f48>
    10c4:	8e028b03 	vmlahi.f64	d8, d2, d3
    10c8:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
    10cc:	00000028 	andeq	r0, r0, r8, lsr #32
    10d0:	00001094 	muleq	r0, r4, r0
    10d4:	0800b5dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
    10d8:	00000f8a 	andeq	r0, r0, sl, lsl #31
    10dc:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    10e0:	86088509 	strhi	r8, [r8], -r9, lsl #10
    10e4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    10e8:	8a048905 	bhi	123504 <__RW_SIZE__+0x122f70>
    10ec:	8e028b03 	vmlahi.f64	d8, d2, d3
    10f0:	900e4101 	andls	r4, lr, r1, lsl #2
    10f4:	00000001 	andeq	r0, r0, r1
    10f8:	0000000c 	andeq	r0, r0, ip
    10fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1100:	7c020001 	stcvc	0, cr0, [r2], {1}
    1104:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1108:	0000001c 	andeq	r0, r0, ip, lsl r0
    110c:	000010f8 	strdeq	r1, [r0], -r8
    1110:	0800c568 	stmdaeq	r0, {r3, r5, r6, r8, sl, lr, pc}
    1114:	000000a2 	andeq	r0, r0, r2, lsr #1
    1118:	83180e41 	tsthi	r8, #1040	; 0x410
    111c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1120:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1124:	00018e02 	andeq	r8, r1, r2, lsl #28
    1128:	0000001c 	andeq	r0, r0, ip, lsl r0
    112c:	000010f8 	strdeq	r1, [r0], -r8
    1130:	0800c60c 	stmdaeq	r0, {r2, r3, r9, sl, lr, pc}
    1134:	00000198 	muleq	r0, r8, r1
    1138:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    113c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1140:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1144:	00018e02 	andeq	r8, r1, r2, lsl #28
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1150:	7c020001 	stcvc	0, cr0, [r2], {1}
    1154:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1158:	00000014 	andeq	r0, r0, r4, lsl r0
    115c:	00001148 	andeq	r1, r0, r8, asr #2
    1160:	0800c7a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, lr, pc}
    1164:	00000052 	andeq	r0, r0, r2, asr r0
    1168:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    116c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00001148 	andeq	r1, r0, r8, asr #2
    1178:	0800c7f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sl, lr, pc}
    117c:	0000000a 	andeq	r0, r0, sl
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	00001148 	andeq	r1, r0, r8, asr #2
    1188:	0800c804 	stmdaeq	r0, {r2, fp, lr, pc}
    118c:	0000000c 	andeq	r0, r0, ip
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00001148 	andeq	r1, r0, r8, asr #2
    1198:	0800c810 	stmdaeq	r0, {r4, fp, lr, pc}
    119c:	00000008 	andeq	r0, r0, r8
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00001148 	andeq	r1, r0, r8, asr #2
    11a8:	0800c818 	stmdaeq	r0, {r3, r4, fp, lr, pc}
    11ac:	00000004 	andeq	r0, r0, r4
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00001148 	andeq	r1, r0, r8, asr #2
    11b8:	0800c81c 	stmdaeq	r0, {r2, r3, r4, fp, lr, pc}
    11bc:	00000008 	andeq	r0, r0, r8
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	00001148 	andeq	r1, r0, r8, asr #2
    11c8:	0800c824 	stmdaeq	r0, {r2, r5, fp, lr, pc}
    11cc:	00000012 	andeq	r0, r0, r2, lsl r0
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	00001148 	andeq	r1, r0, r8, asr #2
    11d8:	0800c838 	stmdaeq	r0, {r3, r4, r5, fp, lr, pc}
    11dc:	00000008 	andeq	r0, r0, r8
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f0:	00000018 	andeq	r0, r0, r8, lsl r0
    11f4:	000011e0 	andeq	r1, r0, r0, ror #3
    11f8:	0800c840 	stmdaeq	r0, {r6, fp, lr, pc}
    11fc:	00000090 	muleq	r0, r0, r0
    1200:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
    1204:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1208:	00000001 	andeq	r0, r0, r1
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1214:	7c020001 	stcvc	0, cr0, [r2], {1}
    1218:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    121c:	00000018 	andeq	r0, r0, r8, lsl r0
    1220:	0000120c 	andeq	r1, r0, ip, lsl #4
    1224:	0800c8d0 	stmdaeq	r0, {r4, r6, r7, fp, lr, pc}
    1228:	000000a6 	andeq	r0, r0, r6, lsr #1
    122c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1230:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1234:	00018702 	andeq	r8, r1, r2, lsl #14
    1238:	0000000c 	andeq	r0, r0, ip
    123c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1240:	7c020001 	stcvc	0, cr0, [r2], {1}
    1244:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1248:	00000018 	andeq	r0, r0, r8, lsl r0
    124c:	00001238 	andeq	r1, r0, r8, lsr r2
    1250:	0800c978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, lr, pc}
    1254:	0000006c 	andeq	r0, r0, ip, rrx
    1258:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    125c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1260:	00018e02 	andeq	r8, r1, r2, lsl #28
    1264:	00000018 	andeq	r0, r0, r8, lsl r0
    1268:	00001238 	andeq	r1, r0, r8, lsr r2
    126c:	0800c9e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, lr, pc}
    1270:	00000036 	andeq	r0, r0, r6, lsr r0
    1274:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1278:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    127c:	180e4301 	stmdane	lr, {r0, r8, r9, lr}
    1280:	00000024 	andeq	r0, r0, r4, lsr #32
    1284:	00001238 	andeq	r1, r0, r8, lsr r2
    1288:	0800ca1c 	stmdaeq	r0, {r2, r3, r4, r9, fp, lr, pc}
    128c:	0000008c 	andeq	r0, r0, ip, lsl #1
    1290:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    1294:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1298:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    129c:	8a038904 	bhi	e36b4 <__RW_SIZE__+0xe3120>
    12a0:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    12a4:	0000280e 	andeq	r2, r0, lr, lsl #16
    12a8:	00000020 	andeq	r0, r0, r0, lsr #32
    12ac:	00001238 	andeq	r1, r0, r8, lsr r2
    12b0:	0800caa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr, pc}
    12b4:	00000098 	muleq	r0, r8, r0
    12b8:	83200e42 	teqhi	r0, #1056	; 0x420
    12bc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    12c0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    12c4:	89038804 	stmdbhi	r3, {r2, fp, pc}
    12c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	00001238 	andeq	r1, r0, r8, lsr r2
    12d4:	0800cb40 	stmdaeq	r0, {r6, r8, r9, fp, lr, pc}
    12d8:	0000003c 	andeq	r0, r0, ip, lsr r0
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	00001238 	andeq	r1, r0, r8, lsr r2
    12e4:	0800cb7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, lr, pc}
    12e8:	00000056 	andeq	r0, r0, r6, asr r0
    12ec:	00000014 	andeq	r0, r0, r4, lsl r0
    12f0:	00001238 	andeq	r1, r0, r8, lsr r2
    12f4:	0800cbd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, lr, pc}
    12f8:	00000012 	andeq	r0, r0, r2, lsl r0
    12fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1300:	00018e02 	andeq	r8, r1, r2, lsl #28
    1304:	00000024 	andeq	r0, r0, r4, lsr #32
    1308:	00001238 	andeq	r1, r0, r8, lsr r2
    130c:	0800cbe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, fp, lr, pc}
    1310:	00000140 	andeq	r0, r0, r0, asr #2
    1314:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1318:	86088509 	strhi	r8, [r8], -r9, lsl #10
    131c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1320:	8a048905 	bhi	12373c <__RW_SIZE__+0x1231a8>
    1324:	8e028b03 	vmlahi.f64	d8, d2, d3
    1328:	380e4301 	stmdacc	lr, {r0, r8, r9, lr}
    132c:	00000020 	andeq	r0, r0, r0, lsr #32
    1330:	00001238 	andeq	r1, r0, r8, lsr r2
    1334:	0800cd28 	stmdaeq	r0, {r3, r5, r8, sl, fp, lr, pc}
    1338:	000000b8 	strheq	r0, [r0], -r8
    133c:	841c0e44 	ldrhi	r0, [ip], #-3652	; 0xfffff1bc
    1340:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1344:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1348:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    134c:	280e4201 	stmdacs	lr, {r0, r9, lr}
    1350:	00000024 	andeq	r0, r0, r4, lsr #32
    1354:	00001238 	andeq	r1, r0, r8, lsr r2
    1358:	0800cde0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, lr, pc}
    135c:	000000b6 	strheq	r0, [r0], -r6
    1360:	83280e42 	teqhi	r8, #1056	; 0x420
    1364:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    1368:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    136c:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    1370:	8b038a04 	blhi	e3b88 <__RW_SIZE__+0xe35f4>
    1374:	00018e02 	andeq	r8, r1, r2, lsl #28
    1378:	00000014 	andeq	r0, r0, r4, lsl r0
    137c:	00001238 	andeq	r1, r0, r8, lsr r2
    1380:	0800ce98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, lr, pc}
    1384:	00000042 	andeq	r0, r0, r2, asr #32
    1388:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
    138c:	00000001 	andeq	r0, r0, r1
    1390:	00000024 	andeq	r0, r0, r4, lsr #32
    1394:	00001238 	andeq	r1, r0, r8, lsr r2
    1398:	0800cedc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp, lr, pc}
    139c:	000000ea 	andeq	r0, r0, sl, ror #1
    13a0:	83280e42 	teqhi	r8, #1056	; 0x420
    13a4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    13a8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    13ac:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    13b0:	8b038a04 	blhi	e3bc8 <__RW_SIZE__+0xe3634>
    13b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b8:	0000000c 	andeq	r0, r0, ip
    13bc:	00001238 	andeq	r1, r0, r8, lsr r2
    13c0:	0800cfc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, lr, pc}
    13c4:	00000042 	andeq	r0, r0, r2, asr #32
    13c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13cc:	00001238 	andeq	r1, r0, r8, lsr r2
    13d0:	0800d00c 	stmdaeq	r0, {r2, r3, ip, lr, pc}
    13d4:	000000ac 	andeq	r0, r0, ip, lsr #1
    13d8:	83180e41 	tsthi	r8, #1040	; 0x410
    13dc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    13e0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    13e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13e8:	00000020 	andeq	r0, r0, r0, lsr #32
    13ec:	00001238 	andeq	r1, r0, r8, lsr r2
    13f0:	0800d0b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, lr, pc}
    13f4:	000000ba 	strheq	r0, [r0], -sl
    13f8:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    13fc:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1400:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1404:	41018e02 	tstmi	r1, r2, lsl #28
    1408:	0000200e 	andeq	r2, r0, lr
    140c:	00000020 	andeq	r0, r0, r0, lsr #32
    1410:	00001238 	andeq	r1, r0, r8, lsr r2
    1414:	0800d174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, lr, pc}
    1418:	0000005e 	andeq	r0, r0, lr, asr r0
    141c:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    1420:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1424:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1428:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    142c:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1430:	00000014 	andeq	r0, r0, r4, lsl r0
    1434:	00001238 	andeq	r1, r0, r8, lsr r2
    1438:	0800d1d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, lr, pc}
    143c:	00000034 	andeq	r0, r0, r4, lsr r0
    1440:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1444:	00018e02 	andeq	r8, r1, r2, lsl #28
    1448:	00000018 	andeq	r0, r0, r8, lsl r0
    144c:	00001238 	andeq	r1, r0, r8, lsr r2
    1450:	0800d208 	stmdaeq	r0, {r3, r9, ip, lr, pc}
    1454:	00000046 	andeq	r0, r0, r6, asr #32
    1458:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    145c:	86028503 	strhi	r8, [r2], -r3, lsl #10
    1460:	00000001 	andeq	r0, r0, r1
    1464:	00000014 	andeq	r0, r0, r4, lsl r0
    1468:	00001238 	andeq	r1, r0, r8, lsr r2
    146c:	0800d250 	stmdaeq	r0, {r4, r6, r9, ip, lr, pc}
    1470:	0000005e 	andeq	r0, r0, lr, asr r0
    1474:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
    1478:	00000001 	andeq	r0, r0, r1
    147c:	0000000c 	andeq	r0, r0, ip
    1480:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1484:	7c020001 	stcvc	0, cr0, [r2], {1}
    1488:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
    1490:	0000147c 	andeq	r1, r0, ip, ror r4
    1494:	0800d2b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, lr, pc}
    1498:	0000001a 	andeq	r0, r0, sl, lsl r0
    149c:	83100e41 	tsthi	r0, #1040	; 0x410
    14a0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    14a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    14a8:	00000018 	andeq	r0, r0, r8, lsl r0
    14ac:	0000147c 	andeq	r1, r0, ip, ror r4
    14b0:	0800d2cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, lr, pc}
    14b4:	000000d6 	ldrdeq	r0, [r0], -r6
    14b8:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
    14bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    14c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c4:	0000000c 	andeq	r0, r0, ip
    14c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    14d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14d4:	0000000c 	andeq	r0, r0, ip
    14d8:	000014c4 	andeq	r1, r0, r4, asr #9
    14dc:	0800d3a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip, lr, pc}
    14e0:	00000050 	andeq	r0, r0, r0, asr r0
    14e4:	0000000c 	andeq	r0, r0, ip
    14e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    14f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14f4:	00000024 	andeq	r0, r0, r4, lsr #32
    14f8:	000014e4 	andeq	r1, r0, r4, ror #9
    14fc:	0800d630 	stmdaeq	r0, {r4, r5, r9, sl, ip, lr, pc}
    1500:	00000104 	andeq	r0, r0, r4, lsl #2
    1504:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1508:	86088509 	strhi	r8, [r8], -r9, lsl #10
    150c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1510:	8a048905 	bhi	12392c <__RW_SIZE__+0x123398>
    1514:	8e028b03 	vmlahi.f64	d8, d2, d3
    1518:	300e4301 	andcc	r4, lr, r1, lsl #6
    151c:	00000028 	andeq	r0, r0, r8, lsr #32
    1520:	000014e4 	andeq	r1, r0, r4, ror #9
    1524:	0800d734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, ip, lr, pc}
    1528:	00000adc 	ldrdeq	r0, [r0], -ip
    152c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1530:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1534:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1538:	8a048905 	bhi	123954 <__RW_SIZE__+0x1233c0>
    153c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1540:	f00e4101 			; <UNDEFINED> instruction: 0xf00e4101
    1544:	00000001 	andeq	r0, r0, r1
    1548:	0000000c 	andeq	r0, r0, ip
    154c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1550:	7c020001 	stcvc	0, cr0, [r2], {1}
    1554:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1558:	00000014 	andeq	r0, r0, r4, lsl r0
    155c:	00001548 	andeq	r1, r0, r8, asr #10
    1560:	0800e210 	stmdaeq	r0, {r4, r9, sp, lr, pc}
    1564:	00000062 	andeq	r0, r0, r2, rrx
    1568:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    156c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1570:	0000000c 	andeq	r0, r0, ip
    1574:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1578:	7c020001 	stcvc	0, cr0, [r2], {1}
    157c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1580:	00000018 	andeq	r0, r0, r8, lsl r0
    1584:	00001570 	andeq	r1, r0, r0, ror r5
    1588:	0800e274 	stmdaeq	r0, {r2, r4, r5, r6, r9, sp, lr, pc}
    158c:	000000ce 	andeq	r0, r0, lr, asr #1
    1590:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1594:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1598:	00018702 	andeq	r8, r1, r2, lsl #14
    159c:	0000000c 	andeq	r0, r0, ip
    15a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    15a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15ac:	00000018 	andeq	r0, r0, r8, lsl r0
    15b0:	0000159c 	muleq	r0, ip, r5
    15b4:	0800e344 	stmdaeq	r0, {r2, r6, r8, r9, sp, lr, pc}
    15b8:	0000009e 	muleq	r0, lr, r0
    15bc:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    15c0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15c4:	00018702 	andeq	r8, r1, r2, lsl #14
    15c8:	0000000c 	andeq	r0, r0, ip
    15cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15d8:	00000024 	andeq	r0, r0, r4, lsr #32
    15dc:	000015c8 	andeq	r1, r0, r8, asr #11
    15e0:	0800e3e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sp, lr, pc}
    15e4:	000003ea 	andeq	r0, r0, sl, ror #7
    15e8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    15ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
    15f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    15f4:	8a048905 	bhi	123a10 <__RW_SIZE__+0x12347c>
    15f8:	8e028b03 	vmlahi.f64	d8, d2, d3
    15fc:	300e4201 	andcc	r4, lr, r1, lsl #4
    1600:	0000000c 	andeq	r0, r0, ip
    1604:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1608:	7c010001 	stcvc	0, cr0, [r1], {1}
    160c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1610:	0000000c 	andeq	r0, r0, ip
    1614:	00001600 	andeq	r1, r0, r0, lsl #12
    1618:	0800e7d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sl, sp, lr, pc}
    161c:	0000025c 	andeq	r0, r0, ip, asr r2
    1620:	0000000c 	andeq	r0, r0, ip
    1624:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1628:	7c010001 	stcvc	0, cr0, [r1], {1}
    162c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1630:	00000014 	andeq	r0, r0, r4, lsl r0
    1634:	00001620 	andeq	r1, r0, r0, lsr #12
    1638:	0800f381 	stmdaeq	r0, {r0, r7, r8, r9, ip, sp, lr, pc}
    163c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1640:	0e038e5e 	mcreq	14, 0, r8, cr3, cr14, {2}
    1644:	00000010 	andeq	r0, r0, r0, lsl r0
    1648:	0000000c 	andeq	r0, r0, ip
    164c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1650:	7c020001 	stcvc	0, cr0, [r2], {1}
    1654:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1658:	00000020 	andeq	r0, r0, r0, lsr #32
    165c:	00001648 	andeq	r1, r0, r8, asr #12
    1660:	0800f3ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, lr, pc}
    1664:	00000030 	andeq	r0, r0, r0, lsr r0
    1668:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    166c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1670:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1674:	8a038904 	bhi	e3a8c <__RW_SIZE__+0xe34f8>
    1678:	00018e02 	andeq	r8, r1, r2, lsl #28
    167c:	00000020 	andeq	r0, r0, r0, lsr #32
    1680:	00001648 	andeq	r1, r0, r8, asr #12
    1684:	0800f3dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp, lr, pc}
    1688:	00000030 	andeq	r0, r0, r0, lsr r0
    168c:	83200e42 	teqhi	r0, #1056	; 0x420
    1690:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    1694:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    1698:	89038804 	stmdbhi	r3, {r2, fp, pc}
    169c:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a0:	0000000c 	andeq	r0, r0, ip
    16a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a8:	7c020001 	stcvc	0, cr0, [r2], {1}
    16ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b0:	00000024 	andeq	r0, r0, r4, lsr #32
    16b4:	000016a0 	andeq	r1, r0, r0, lsr #13
    16b8:	0800f40c 	stmdaeq	r0, {r2, r3, sl, ip, sp, lr, pc}
    16bc:	00000352 	andeq	r0, r0, r2, asr r3
    16c0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    16c4:	86088509 	strhi	r8, [r8], -r9, lsl #10
    16c8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    16cc:	8a048905 	bhi	123ae8 <__RW_SIZE__+0x123554>
    16d0:	8e028b03 	vmlahi.f64	d8, d2, d3
    16d4:	380e4c01 	stmdacc	lr, {r0, sl, fp, lr}
    16d8:	0000000c 	andeq	r0, r0, ip
    16dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16e8:	00000024 	andeq	r0, r0, r4, lsr #32
    16ec:	000016d8 	ldrdeq	r1, [r0], -r8
    16f0:	0800f760 	stmdaeq	r0, {r5, r6, r8, r9, sl, ip, sp, lr, pc}
    16f4:	00000300 	andeq	r0, r0, r0, lsl #6
    16f8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    16fc:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1700:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1704:	8a048905 	bhi	123b20 <__RW_SIZE__+0x12358c>
    1708:	8e028b03 	vmlahi.f64	d8, d2, d3
    170c:	300e4201 	andcc	r4, lr, r1, lsl #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
       4:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
       8:	9f300002 	svcls	0x00300002
       c:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
      10:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
      14:	00500001 	subseq	r0, r0, r1
      18:	00000000 	andeq	r0, r0, r0
      1c:	6c000000 	stcvs	0, cr0, [r0], {-0}
      20:	74080032 	strvc	r0, [r8], #-50	; 0xffffffce
      24:	02080032 	andeq	r0, r8, #50	; 0x32
      28:	749f3000 	ldrvc	r3, [pc], #0	; 30 <shift+0x30>
      2c:	74080032 	strvc	r0, [r8], #-50	; 0xffffffce
      30:	01080032 	tsteq	r8, r2, lsr r0
      34:	00005000 	andeq	r5, r0, r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	327c0000 	rsbscc	r0, ip, #0
      40:	32800800 	addcc	r0, r0, #0, 16
      44:	00020800 	andeq	r0, r2, r0, lsl #16
      48:	32809f30 	addcc	r9, r0, #48, 30	; 0xc0
      4c:	32820800 	addcc	r0, r2, #0, 16
      50:	00010800 	andeq	r0, r1, r0, lsl #16
      54:	00000050 	andeq	r0, r0, r0, asr r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	00328c00 	eorseq	r8, r2, r0, lsl #24
      60:	00329008 	eorseq	r9, r2, r8
      64:	30000208 	andcc	r0, r0, r8, lsl #4
      68:	0032909f 	mlaseq	r2, pc, r0, r9	; <UNPREDICTABLE>
      6c:	00329208 	eorseq	r9, r2, r8, lsl #4
      70:	50000108 	andpl	r0, r0, r8, lsl #2
	...
      7c:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
      80:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
      84:	9f300002 	svcls	0x00300002
      88:	080032a0 	stmdaeq	r0, {r5, r7, r9, ip, sp}
      8c:	080032a2 	stmdaeq	r0, {r1, r5, r7, r9, ip, sp}
      90:	00500001 	subseq	r0, r0, r1
      94:	00000000 	andeq	r0, r0, r0
      98:	ac000000 	stcge	0, cr0, [r0], {-0}
      9c:	b0080032 	andlt	r0, r8, r2, lsr r0
      a0:	02080032 	andeq	r0, r8, #50	; 0x32
      a4:	b09f3000 	addslt	r3, pc, r0
      a8:	b2080032 	andlt	r0, r8, #50	; 0x32
      ac:	01080032 	tsteq	r8, r2, lsr r0
      b0:	00005000 	andeq	r5, r0, r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	32bc0000 	adcscc	r0, ip, #0
      bc:	32be0800 	adcscc	r0, lr, #0, 16
      c0:	00010800 	andeq	r0, r1, r0, lsl #16
      c4:	0032be50 	eorseq	fp, r2, r0, asr lr
      c8:	0032c008 	eorseq	ip, r2, r8
      cc:	f3000408 	vshl.u8	d0, d8, d0
      d0:	009f5001 	addseq	r5, pc, r1
      d4:	00000000 	andeq	r0, r0, r0
      d8:	bc000000 	stclt	0, cr0, [r0], {-0}
      dc:	be080032 	mcrlt	0, 0, r0, cr8, cr2, {1}
      e0:	02080032 	andeq	r0, r8, #50	; 0x32
      e4:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
      e8:	c0080032 	andgt	r0, r8, r2, lsr r0
      ec:	01080032 	tsteq	r8, r2, lsr r0
      f0:	00005000 	andeq	r5, r0, r0
      f4:	00000000 	andeq	r0, r0, r0
      f8:	32c00000 	sbccc	r0, r0, #0
      fc:	32c20800 	sbccc	r0, r2, #0, 16
     100:	00010800 	andeq	r0, r1, r0, lsl #16
     104:	0032c250 	eorseq	ip, r2, r0, asr r2
     108:	0032c408 	eorseq	ip, r2, r8, lsl #8
     10c:	f3000408 	vshl.u8	d0, d8, d0
     110:	009f5001 	addseq	r5, pc, r1
     114:	00000000 	andeq	r0, r0, r0
     118:	c0000000 	andgt	r0, r0, r0
     11c:	c2080032 	andgt	r0, r8, #50	; 0x32
     120:	02080032 	andeq	r0, r8, #50	; 0x32
     124:	c29f3000 	addsgt	r3, pc, #0
     128:	c4080032 	strgt	r0, [r8], #-50	; 0xffffffce
     12c:	01080032 	tsteq	r8, r2, lsr r0
     130:	00005000 	andeq	r5, r0, r0
     134:	00000000 	andeq	r0, r0, r0
     138:	32c40000 	sbccc	r0, r4, #0
     13c:	32c60800 	sbccc	r0, r6, #0, 16
     140:	00010800 	andeq	r0, r1, r0, lsl #16
     144:	0032c650 	eorseq	ip, r2, r0, asr r6
     148:	0032c808 	eorseq	ip, r2, r8, lsl #16
     14c:	f3000408 	vshl.u8	d0, d8, d0
     150:	009f5001 	addseq	r5, pc, r1
     154:	00000000 	andeq	r0, r0, r0
     158:	c4000000 	strgt	r0, [r0], #-0
     15c:	c6080032 			; <UNDEFINED> instruction: 0xc6080032
     160:	02080032 	andeq	r0, r8, #50	; 0x32
     164:	c69f3000 	ldrgt	r3, [pc], r0
     168:	c8080032 	stmdagt	r8, {r1, r4, r5}
     16c:	01080032 	tsteq	r8, r2, lsr r0
     170:	00005000 	andeq	r5, r0, r0
     174:	00000000 	andeq	r0, r0, r0
     178:	32c80000 	sbccc	r0, r8, #0
     17c:	32cc0800 	sbccc	r0, ip, #0, 16
     180:	00010800 	andeq	r0, r1, r0, lsl #16
     184:	0032cc50 	eorseq	ip, r2, r0, asr ip
     188:	0032ce08 	eorseq	ip, r2, r8, lsl #28
     18c:	f3000408 	vshl.u8	d0, d8, d0
     190:	009f5001 	addseq	r5, pc, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     19c:	cc080032 	stcgt	0, cr0, [r8], {50}	; 0x32
     1a0:	02080032 	andeq	r0, r8, #50	; 0x32
     1a4:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
     1a8:	ce080032 	mcrgt	0, 0, r0, cr8, cr2, {1}
     1ac:	01080032 	tsteq	r8, r2, lsr r0
     1b0:	00005000 	andeq	r5, r0, r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	32d00000 	sbcscc	r0, r0, #0
     1bc:	32d40800 	sbcscc	r0, r4, #0, 16
     1c0:	00010800 	andeq	r0, r1, r0, lsl #16
     1c4:	0032d450 	eorseq	sp, r2, r0, asr r4
     1c8:	0032d808 	eorseq	sp, r2, r8, lsl #16
     1cc:	f3000408 	vshl.u8	d0, d8, d0
     1d0:	009f5001 	addseq	r5, pc, r1
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	d0000000 	andle	r0, r0, r0
     1dc:	d4080032 	strle	r0, [r8], #-50	; 0xffffffce
     1e0:	02080032 	andeq	r0, r8, #50	; 0x32
     1e4:	d49f3000 	ldrle	r3, [pc], #0	; 1ec <__ZI_SIZE__+0x30>
     1e8:	d8080032 	stmdale	r8, {r1, r4, r5}
     1ec:	01080032 	tsteq	r8, r2, lsr r0
     1f0:	00005000 	andeq	r5, r0, r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	32d80000 	sbcscc	r0, r8, #0
     1fc:	32dc0800 	sbcscc	r0, ip, #0, 16
     200:	00010800 	andeq	r0, r1, r0, lsl #16
     204:	0032dc50 	eorseq	sp, r2, r0, asr ip
     208:	0032e008 	eorseq	lr, r2, r8
     20c:	f3000408 	vshl.u8	d0, d8, d0
     210:	009f5001 	addseq	r5, pc, r1
     214:	00000000 	andeq	r0, r0, r0
     218:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     21c:	dc080032 	stcle	0, cr0, [r8], {50}	; 0x32
     220:	02080032 	andeq	r0, r8, #50	; 0x32
     224:	dc9f3000 	ldcle	0, cr3, [pc], {0}
     228:	e0080032 	and	r0, r8, r2, lsr r0
     22c:	01080032 	tsteq	r8, r2, lsr r0
     230:	00005000 	andeq	r5, r0, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	32e00000 	rsccc	r0, r0, #0
     23c:	32e40800 	rsccc	r0, r4, #0, 16
     240:	00010800 	andeq	r0, r1, r0, lsl #16
     244:	0032e450 	eorseq	lr, r2, r0, asr r4
     248:	0032e608 	eorseq	lr, r2, r8, lsl #12
     24c:	f3000408 	vshl.u8	d0, d8, d0
     250:	009f5001 	addseq	r5, pc, r1
     254:	00000000 	andeq	r0, r0, r0
     258:	e0000000 	and	r0, r0, r0
     25c:	e4080032 	str	r0, [r8], #-50	; 0xffffffce
     260:	02080032 	andeq	r0, r8, #50	; 0x32
     264:	e49f3000 	ldr	r3, [pc], #0	; 26c <__ZI_SIZE__+0xb0>
     268:	e6080032 			; <UNDEFINED> instruction: 0xe6080032
     26c:	01080032 	tsteq	r8, r2, lsr r0
     270:	00005000 	andeq	r5, r0, r0
     274:	00000000 	andeq	r0, r0, r0
     278:	32e80000 	rsccc	r0, r8, #0
     27c:	32ee0800 	rsccc	r0, lr, #0, 16
     280:	00010800 	andeq	r0, r1, r0, lsl #16
     284:	0032ee50 	eorseq	lr, r2, r0, asr lr
     288:	0032f008 	eorseq	pc, r2, r8
     28c:	f3000408 	vshl.u8	d0, d8, d0
     290:	009f5001 	addseq	r5, pc, r1
     294:	00000000 	andeq	r0, r0, r0
     298:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     29c:	ee080032 	mcr	0, 0, r0, cr8, cr2, {1}
     2a0:	02080032 	andeq	r0, r8, #50	; 0x32
     2a4:	ee9f3000 	cdp	0, 9, cr3, cr15, cr0, {0}
     2a8:	f0080032 			; <UNDEFINED> instruction: 0xf0080032
     2ac:	01080032 	tsteq	r8, r2, lsr r0
     2b0:	00005000 	andeq	r5, r0, r0
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	32f00000 	rscscc	r0, r0, #0
     2bc:	32f60800 	rscscc	r0, r6, #0, 16
     2c0:	00010800 	andeq	r0, r1, r0, lsl #16
     2c4:	0032f650 	eorseq	pc, r2, r0, asr r6	; <UNPREDICTABLE>
     2c8:	0032f808 	eorseq	pc, r2, r8, lsl #16
     2cc:	f3000408 	vshl.u8	d0, d8, d0
     2d0:	009f5001 	addseq	r5, pc, r1
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     2dc:	f6080032 			; <UNDEFINED> instruction: 0xf6080032
     2e0:	02080032 	andeq	r0, r8, #50	; 0x32
     2e4:	f69f3000 			; <UNDEFINED> instruction: 0xf69f3000
     2e8:	f8080032 			; <UNDEFINED> instruction: 0xf8080032
     2ec:	01080032 	tsteq	r8, r2, lsr r0
     2f0:	00005000 	andeq	r5, r0, r0
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	32f80000 	rscscc	r0, r8, #0
     2fc:	32fc0800 	rscscc	r0, ip, #0, 16
     300:	00010800 	andeq	r0, r1, r0, lsl #16
     304:	0032fc50 	eorseq	pc, r2, r0, asr ip	; <UNPREDICTABLE>
     308:	0032fe08 	eorseq	pc, r2, r8, lsl #28
     30c:	f3000408 	vshl.u8	d0, d8, d0
     310:	009f5001 	addseq	r5, pc, r1
     314:	00000000 	andeq	r0, r0, r0
     318:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     31c:	fc080032 	stc2	0, cr0, [r8], {50}	; 0x32
     320:	02080032 	andeq	r0, r8, #50	; 0x32
     324:	fc9f3000 	ldc2	0, cr3, [pc], {0}
     328:	fe080032 	mcr2	0, 0, r0, cr8, cr2, {1}
     32c:	01080032 	tsteq	r8, r2, lsr r0
     330:	00005000 	andeq	r5, r0, r0
	...
     33c:	00140000 	andseq	r0, r4, r0
     340:	00010000 	andeq	r0, r1, r0
     344:	00001450 	andeq	r1, r0, r0, asr r4
     348:	00006400 	andeq	r6, r0, r0, lsl #8
     34c:	58000100 	stmdapl	r0, {r8}
     350:	00000064 	andeq	r0, r0, r4, rrx
     354:	000001fa 	strdeq	r0, [r0], -sl
     358:	01f30004 	mvnseq	r0, r4
     35c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     368:	00160000 	andseq	r0, r6, r0
     36c:	00010000 	andeq	r0, r1, r0
     370:	00001651 	andeq	r1, r0, r1, asr r6
     374:	00005c00 	andeq	r5, r0, r0, lsl #24
     378:	59000100 	stmdbpl	r0, {r8}
     37c:	0000005c 	andeq	r0, r0, ip, asr r0
     380:	000001fa 	strdeq	r0, [r0], -sl
     384:	01f30004 	mvnseq	r0, r4
     388:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     394:	002c0000 	eoreq	r0, ip, r0
     398:	00010000 	andeq	r0, r1, r0
     39c:	00002c52 	andeq	r2, r0, r2, asr ip
     3a0:	00008800 	andeq	r8, r0, r0, lsl #16
     3a4:	5c000100 	stfpls	f0, [r0], {-0}
     3a8:	00000088 	andeq	r0, r0, r8, lsl #1
     3ac:	000001fa 	strdeq	r0, [r0], -sl
     3b0:	01f30004 	mvnseq	r0, r4
     3b4:	00009f52 	andeq	r9, r0, r2, asr pc
	...
     3c0:	002e0000 	eoreq	r0, lr, r0
     3c4:	00010000 	andeq	r0, r1, r0
     3c8:	00002e53 	andeq	r2, r0, r3, asr lr
     3cc:	00007e00 	andeq	r7, r0, r0, lsl #28
     3d0:	5a000100 	bpl	7d8 <__RW_SIZE__+0x244>
     3d4:	0000007e 	andeq	r0, r0, lr, ror r0
     3d8:	000001fa 	strdeq	r0, [r0], -sl
     3dc:	01f30004 	mvnseq	r0, r4
     3e0:	00009f53 	andeq	r9, r0, r3, asr pc
	...
     3ec:	01440000 	mrseq	r0, (UNDEF: 68)
     3f0:	00020000 	andeq	r0, r2, r0
     3f4:	01440091 	swpbeq	r0, r1, [r4]
     3f8:	01fa0000 	mvnseq	r0, r0
     3fc:	00020000 	andeq	r0, r2, r0
     400:	00000091 	muleq	r0, r1, r0
	...
     40c:	01440000 	mrseq	r0, (UNDEF: 68)
     410:	00020000 	andeq	r0, r2, r0
     414:	01440491 			; <UNDEFINED> instruction: 0x01440491
     418:	01fa0000 	mvnseq	r0, r0
     41c:	00020000 	andeq	r0, r2, r0
     420:	00000491 	muleq	r0, r1, r4
	...
     42c:	01440000 	mrseq	r0, (UNDEF: 68)
     430:	00020000 	andeq	r0, r2, r0
     434:	01440891 			; <UNDEFINED> instruction: 0x01440891
     438:	01fa0000 	mvnseq	r0, r0
     43c:	00020000 	andeq	r0, r2, r0
     440:	00000891 	muleq	r0, r1, r8
     444:	00000000 	andeq	r0, r0, r0
     448:	001c0000 	andseq	r0, ip, r0
     44c:	00220000 	eoreq	r0, r2, r0
     450:	00050000 	andeq	r0, r5, r0
     454:	24340075 	ldrtcs	r0, [r4], #-117	; 0xffffff8b
     458:	0000229f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     45c:	0001fa00 	andeq	pc, r1, r0, lsl #20
     460:	91000600 	tstls	r0, r0, lsl #12
     464:	24340600 	ldrtcs	r0, [r4], #-1536	; 0xfffffa00
     468:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     46c:	00000000 	andeq	r0, r0, r0
     470:	00008800 	andeq	r8, r0, r0, lsl #16
     474:	0000aa00 	andeq	sl, r0, r0, lsl #20
     478:	30000200 	andcc	r0, r0, r0, lsl #4
     47c:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     480:	0000c200 	andeq	ip, r0, r0, lsl #4
     484:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     488:	000000c2 	andeq	r0, r0, r2, asr #1
     48c:	000000c4 	andeq	r0, r0, r4, asr #1
     490:	01740003 	cmneq	r4, r3
     494:	0000c49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     498:	00012000 	andeq	r2, r1, r0
     49c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     4a0:	00000120 	andeq	r0, r0, r0, lsr #2
     4a4:	00000124 	andeq	r0, r0, r4, lsr #2
     4a8:	7f740003 	svcvc	0x00740003
     4ac:	0001449f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     4b0:	0001fa00 	andeq	pc, r1, r0, lsl #20
     4b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     4c0:	00000088 	andeq	r0, r0, r8, lsl #1
     4c4:	0000012c 	andeq	r0, r0, ip, lsr #2
     4c8:	98910003 	ldmls	r1, {r0, r1}
     4cc:	00012c7f 	andeq	r2, r1, pc, ror ip
     4d0:	00013800 	andeq	r3, r1, r0, lsl #16
     4d4:	91000800 	tstls	r0, r0, lsl #16
     4d8:	01947f98 			; <UNDEFINED> instruction: 0x01947f98
     4dc:	449f0123 	ldrmi	r0, [pc], #291	; 4e4 <MSP_SIZE+0xe4>
     4e0:	fa000001 	blx	4ec <MSP_SIZE+0xec>
     4e4:	03000001 	movweq	r0, #1
     4e8:	7f989100 	svcvc	0x00989100
	...
     4f4:	000001fc 	strdeq	r0, [r0], -ip
     4f8:	0000020a 	andeq	r0, r0, sl, lsl #4
     4fc:	0a500001 	beq	1400508 <__RW_SIZE__+0x13fff74>
     500:	68000002 	stmdavs	r0, {r1}
     504:	03000003 	movweq	r0, #3
     508:	7fa49100 	svcvc	0x00a49100
     50c:	00000368 	andeq	r0, r0, r8, ror #6
     510:	0000036c 	andeq	r0, r0, ip, ror #6
     514:	6c520001 	mrrcvs	0, 0, r0, r2, cr1
     518:	28000003 	stmdacs	r0, {r0, r1}
     51c:	03000004 	movweq	r0, #4
     520:	7fa49100 	svcvc	0x00a49100
	...
     52c:	000001fc 	strdeq	r0, [r0], -ip
     530:	0000024c 	andeq	r0, r0, ip, asr #4
     534:	4c510001 	mrrcmi	0, 0, r0, r1, cr1
     538:	28000002 	stmdacs	r0, {r1}
     53c:	04000004 	streq	r0, [r0], #-4
     540:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     544:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     548:	00000000 	andeq	r0, r0, r0
     54c:	0001fc00 	andeq	pc, r1, r0, lsl #24
     550:	00024000 	andeq	r4, r2, r0
     554:	52000100 	andpl	r0, r0, #0, 2
     558:	00000240 	andeq	r0, r0, r0, asr #4
     55c:	00000428 	andeq	r0, r0, r8, lsr #8
     560:	01f30004 	mvnseq	r0, r4
     564:	00009f52 	andeq	r9, r0, r2, asr pc
     568:	00000000 	andeq	r0, r0, r0
     56c:	01fc0000 	mvnseq	r0, r0
     570:	02580000 	subseq	r0, r8, #0
     574:	00010000 	andeq	r0, r1, r0
     578:	00025853 	andeq	r5, r2, r3, asr r8
     57c:	00042800 	andeq	r2, r4, r0, lsl #16
     580:	f3000400 	vshl.u8	d0, d0, d0
     584:	009f5301 	addseq	r5, pc, r1, lsl #6
     588:	00000000 	andeq	r0, r0, r0
     58c:	fc000000 	stc2	0, cr0, [r0], {-0}
     590:	0a000001 	beq	59c <__RW_SIZE__+0x8>
     594:	02000002 	andeq	r0, r0, #2
     598:	0a009100 	beq	249a0 <__RW_SIZE__+0x2440c>
     59c:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     5a0:	01000002 	tsteq	r0, r2
     5a4:	026e5400 	rsbeq	r5, lr, #0, 8
     5a8:	03620000 	cmneq	r2, #0
     5ac:	00070000 	andeq	r0, r7, r0
     5b0:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
     5b4:	729f0123 	addsvc	r0, pc, #-1073741816	; 0xc0000008
     5b8:	28000003 	stmdacs	r0, {r0, r1}
     5bc:	07000004 	streq	r0, [r0, -r4]
     5c0:	7fa89100 	svcvc	0x00a89100
     5c4:	9f012306 	svcls	0x00012306
	...
     5d0:	000001fc 	strdeq	r0, [r0], -ip
     5d4:	00000372 	andeq	r0, r0, r2, ror r3
     5d8:	04910002 	ldreq	r0, [r1], #2
     5dc:	00000372 	andeq	r0, r0, r2, ror r3
     5e0:	00000428 	andeq	r0, r0, r8, lsr #8
     5e4:	04910002 	ldreq	r0, [r1], #2
	...
     5f0:	000001fc 	strdeq	r0, [r0], -ip
     5f4:	00000372 	andeq	r0, r0, r2, ror r3
     5f8:	08910002 	ldmeq	r1, {r1}
     5fc:	00000372 	andeq	r0, r0, r2, ror r3
     600:	00000428 	andeq	r0, r0, r8, lsr #8
     604:	08910002 	ldmeq	r1, {r1}
	...
     610:	0000026e 	andeq	r0, r0, lr, ror #4
     614:	0000027a 	andeq	r0, r0, sl, ror r2
     618:	00750006 	rsbseq	r0, r5, r6
     61c:	9f1aff08 	svcls	0x001aff08
	...
     628:	0000026e 	andeq	r0, r0, lr, ror #4
     62c:	0000036c 	andeq	r0, r0, ip, ror #6
     630:	08910002 	ldmeq	r1, {r1}
     634:	00000372 	andeq	r0, r0, r2, ror r3
     638:	00000428 	andeq	r0, r0, r8, lsr #8
     63c:	08910002 	ldmeq	r1, {r1}
	...
     648:	0000026e 	andeq	r0, r0, lr, ror #4
     64c:	0000036c 	andeq	r0, r0, ip, ror #6
     650:	04910002 	ldreq	r0, [r1], #2
     654:	00000372 	andeq	r0, r0, r2, ror r3
     658:	00000428 	andeq	r0, r0, r8, lsr #8
     65c:	04910002 	ldreq	r0, [r1], #2
	...
     668:	0000026e 	andeq	r0, r0, lr, ror #4
     66c:	0000036c 	andeq	r0, r0, ip, ror #6
     670:	01f30004 	mvnseq	r0, r4
     674:	03729f51 	cmneq	r2, #324	; 0x144
     678:	04280000 	strteq	r0, [r8], #-0
     67c:	00040000 	andeq	r0, r4, r0
     680:	9f5101f3 	svcls	0x005101f3
	...
     68c:	0000026e 	andeq	r0, r0, lr, ror #4
     690:	00000368 	andeq	r0, r0, r8, ror #6
     694:	a4910003 	ldrge	r0, [r1], #3
     698:	0003727f 	andeq	r7, r3, pc, ror r2
     69c:	00042800 	andeq	r2, r4, r0, lsl #16
     6a0:	91000300 	mrsls	r0, LR_irq
     6a4:	00007fa4 	andeq	r7, r0, r4, lsr #31
     6a8:	00000000 	andeq	r0, r0, r0
     6ac:	027e0000 	rsbseq	r0, lr, #0
     6b0:	036c0000 	cmneq	ip, #0
     6b4:	00020000 	andeq	r0, r2, r0
     6b8:	03729f30 	cmneq	r2, #48, 30	; 0xc0
     6bc:	04280000 	strteq	r0, [r8], #-0
     6c0:	00020000 	andeq	r0, r2, r0
     6c4:	00009f30 	andeq	r9, r0, r0, lsr pc
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	02a20000 	adceq	r0, r2, #0
     6d0:	02c20000 	sbceq	r0, r2, #0
     6d4:	00020000 	andeq	r0, r2, r0
     6d8:	02c29f30 	sbceq	r9, r2, #48, 30	; 0xc0
     6dc:	02dc0000 	sbcseq	r0, ip, #0
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	0002dc54 	andeq	sp, r2, r4, asr ip
     6e8:	0002de00 	andeq	sp, r2, r0, lsl #28
     6ec:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     6f0:	02de9f01 	sbcseq	r9, lr, #1, 30
     6f4:	033a0000 	teqeq	sl, #0
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	00033a54 	andeq	r3, r3, r4, asr sl
     700:	00033e00 	andeq	r3, r3, r0, lsl #28
     704:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     708:	03729f7f 	cmneq	r2, #508	; 0x1fc
     70c:	04280000 	strteq	r0, [r8], #-0
     710:	00010000 	andeq	r0, r1, r0
     714:	00000054 	andeq	r0, r0, r4, asr r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	0002a200 	andeq	sl, r2, r0, lsl #4
     720:	00034600 	andeq	r4, r3, r0, lsl #12
     724:	91000300 	mrsls	r0, LR_irq
     728:	03467f88 	movteq	r7, #28552	; 0x6f88
     72c:	03520000 	cmpeq	r2, #0
     730:	00080000 	andeq	r0, r8, r0
     734:	947f8891 	ldrbtls	r8, [pc], #-2193	; 73c <__RW_SIZE__+0x1a8>
     738:	9f012301 	svcls	0x00012301
     73c:	00000372 	andeq	r0, r0, r2, ror r3
     740:	00000428 	andeq	r0, r0, r8, lsr #8
     744:	88910003 	ldmhi	r1, {r0, r1}
     748:	0000007f 	andeq	r0, r0, pc, ror r0
     74c:	00000000 	andeq	r0, r0, r0
     750:	00042800 	andeq	r2, r4, r0, lsl #16
     754:	00043800 	andeq	r3, r4, r0, lsl #16
     758:	50000100 	andpl	r0, r0, r0, lsl #2
     75c:	00000438 	andeq	r0, r0, r8, lsr r4
     760:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     764:	9c910003 	ldcls	0, cr0, [r1], {3}
     768:	0004b47d 	andeq	fp, r4, sp, ror r4
     76c:	00067e00 	andeq	r7, r6, r0, lsl #28
     770:	f3000400 	vshl.u8	d0, d0, d0
     774:	009f5001 	addseq	r5, pc, r1
     778:	00000000 	andeq	r0, r0, r0
     77c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     780:	3c000004 	stccc	0, cr0, [r0], {4}
     784:	01000004 	tsteq	r0, r4
     788:	043c5100 	ldrteq	r5, [ip], #-256	; 0xffffff00
     78c:	04840000 	streq	r0, [r4], #0
     790:	00010000 	andeq	r0, r1, r0
     794:	00048459 	andeq	r8, r4, r9, asr r4
     798:	00067e00 	andeq	r7, r6, r0, lsl #28
     79c:	f3000400 	vshl.u8	d0, d0, d0
     7a0:	009f5101 	addseq	r5, pc, r1, lsl #2
     7a4:	00000000 	andeq	r0, r0, r0
     7a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7ac:	3a000004 	bcc	7c4 <__RW_SIZE__+0x230>
     7b0:	01000004 	tsteq	r0, r4
     7b4:	043a5200 	ldrteq	r5, [sl], #-512	; 0xfffffe00
     7b8:	04b40000 	ldrteq	r0, [r4], #0
     7bc:	00010000 	andeq	r0, r1, r0
     7c0:	0004b458 	andeq	fp, r4, r8, asr r4
     7c4:	00067e00 	andeq	r7, r6, r0, lsl #28
     7c8:	f3000400 	vshl.u8	d0, d0, d0
     7cc:	009f5201 	addseq	r5, pc, r1, lsl #4
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7d8:	49000004 	stmdbmi	r0, {r2}
     7dc:	01000004 	tsteq	r0, r4
     7e0:	04495300 	strbeq	r5, [r9], #-768	; 0xfffffd00
     7e4:	047a0000 	ldrbteq	r0, [sl], #-0
     7e8:	00010000 	andeq	r0, r1, r0
     7ec:	00047a5a 	andeq	r7, r4, sl, asr sl
     7f0:	00067e00 	andeq	r7, r6, r0, lsl #28
     7f4:	f3000400 	vshl.u8	d0, d0, d0
     7f8:	009f5301 	addseq	r5, pc, r1, lsl #6
     7fc:	00000000 	andeq	r0, r0, r0
     800:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     804:	c4000004 	strgt	r0, [r0], #-4
     808:	02000005 	andeq	r0, r0, #5
     80c:	c4009100 	strgt	r9, [r0], #-256	; 0xffffff00
     810:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     814:	02000006 	andeq	r0, r0, #6
     818:	00009100 	andeq	r9, r0, r0, lsl #2
     81c:	00000000 	andeq	r0, r0, r0
     820:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     824:	c4000004 	strgt	r0, [r0], #-4
     828:	02000005 	andeq	r0, r0, #5
     82c:	c4049100 	strgt	r9, [r4], #-256	; 0xffffff00
     830:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     834:	02000006 	andeq	r0, r0, #6
     838:	00049100 	andeq	r9, r4, r0, lsl #2
     83c:	00000000 	andeq	r0, r0, r0
     840:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     844:	c4000004 	strgt	r0, [r0], #-4
     848:	02000005 	andeq	r0, r0, #5
     84c:	c4089100 	strgt	r9, [r8], #-256	; 0xffffff00
     850:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     854:	02000006 	andeq	r0, r0, #6
     858:	00089100 	andeq	r9, r8, r0, lsl #2
     85c:	00000000 	andeq	r0, r0, r0
     860:	4a000000 	bmi	868 <__RW_SIZE__+0x2d4>
     864:	72000004 	andvc	r0, r0, #4
     868:	01000004 	tsteq	r0, r4
     86c:	04725400 	ldrbteq	r5, [r2], #-1024	; 0xfffffc00
     870:	067e0000 	ldrbteq	r0, [lr], -r0
     874:	00020000 	andeq	r0, r2, r0
     878:	00000491 	muleq	r0, r1, r4
     87c:	00000000 	andeq	r0, r0, r0
     880:	044a0000 	strbeq	r0, [sl], #-0
     884:	04960000 	ldreq	r0, [r6], #0
     888:	00010000 	andeq	r0, r1, r0
     88c:	0004965b 	andeq	r9, r4, fp, asr r6
     890:	00067e00 	andeq	r7, r6, r0, lsl #28
     894:	91000200 	mrsls	r0, R8_usr
	...
     8a0:	00044a00 	andeq	r4, r4, r0, lsl #20
     8a4:	00047400 	andeq	r7, r4, r0, lsl #8
     8a8:	91000400 	tstls	r0, r0, lsl #8
     8ac:	749f7dd8 	ldrvc	r7, [pc], #3544	; 8b4 <__RW_SIZE__+0x320>
     8b0:	80000004 	andhi	r0, r0, r4
     8b4:	01000004 	tsteq	r0, r4
     8b8:	04805300 	streq	r5, [r0], #768	; 0x300
     8bc:	04b40000 	ldrteq	r0, [r4], #0
     8c0:	00030000 	andeq	r0, r3, r0
     8c4:	b47da091 	ldrbtlt	sl, [sp], #-145	; 0xffffff6f
     8c8:	b2000004 	andlt	r0, r0, #4
     8cc:	07000005 	streq	r0, [r0, -r5]
     8d0:	7da09100 	stfvcd	f1, [r0]
     8d4:	9f012306 	svcls	0x00012306
     8d8:	000005c4 	andeq	r0, r0, r4, asr #11
     8dc:	0000067e 	andeq	r0, r0, lr, ror r6
     8e0:	a0910007 	addsge	r0, r1, r7
     8e4:	0123067d 	teqeq	r3, sp, ror r6
     8e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8ec:	00000000 	andeq	r0, r0, r0
     8f0:	00044a00 	andeq	r4, r4, r0, lsl #20
     8f4:	00047a00 	andeq	r7, r4, r0, lsl #20
     8f8:	5a000100 	bpl	d00 <__RW_SIZE__+0x76c>
     8fc:	0000047a 	andeq	r0, r0, sl, ror r4
     900:	0000067e 	andeq	r0, r0, lr, ror r6
     904:	01f30004 	mvnseq	r0, r4
     908:	00009f53 	andeq	r9, r0, r3, asr pc
     90c:	00000000 	andeq	r0, r0, r0
     910:	044a0000 	strbeq	r0, [sl], #-0
     914:	04b40000 	ldrteq	r0, [r4], #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	0004b458 	andeq	fp, r4, r8, asr r4
     920:	00067e00 	andeq	r7, r6, r0, lsl #28
     924:	f3000400 	vshl.u8	d0, d0, d0
     928:	009f5201 	addseq	r5, pc, r1, lsl #4
     92c:	00000000 	andeq	r0, r0, r0
     930:	4a000000 	bmi	938 <__RW_SIZE__+0x3a4>
     934:	84000004 	strhi	r0, [r0], #-4
     938:	01000004 	tsteq	r0, r4
     93c:	04845900 	streq	r5, [r4], #2304	; 0x900
     940:	067e0000 	ldrbteq	r0, [lr], -r0
     944:	00040000 	andeq	r0, r4, r0
     948:	9f5101f3 	svcls	0x005101f3
	...
     954:	0000044a 	andeq	r0, r0, sl, asr #8
     958:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     95c:	9c910003 	ldcls	0, cr0, [r1], {3}
     960:	0005b87d 	andeq	fp, r5, sp, ror r8
     964:	0005be00 	andeq	fp, r5, r0, lsl #28
     968:	52000100 	andpl	r0, r0, #0, 2
     96c:	000005be 			; <UNDEFINED> instruction: 0x000005be
     970:	0000067e 	andeq	r0, r0, lr, ror r6
     974:	9c910003 	ldcls	0, cr0, [r1], {3}
     978:	0000007d 	andeq	r0, r0, sp, ror r0
     97c:	00000000 	andeq	r0, r0, r0
     980:	0004b400 	andeq	fp, r4, r0, lsl #8
     984:	0004c000 	andeq	ip, r4, r0
     988:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
     98c:	1aff0800 	bne	fffc2994 <MSP_BASE+0xdffbd994>
     990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     994:	00000000 	andeq	r0, r0, r0
     998:	0004b400 	andeq	fp, r4, r0, lsl #8
     99c:	0005be00 	andeq	fp, r5, r0, lsl #28
     9a0:	91000200 	mrsls	r0, R8_usr
     9a4:	0005c404 	andeq	ip, r5, r4, lsl #8
     9a8:	00067e00 	andeq	r7, r6, r0, lsl #28
     9ac:	91000200 	mrsls	r0, R8_usr
     9b0:	00000004 	andeq	r0, r0, r4
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	0004b400 	andeq	fp, r4, r0, lsl #8
     9bc:	0005be00 	andeq	fp, r5, r0, lsl #28
     9c0:	91000200 	mrsls	r0, R8_usr
     9c4:	0005c400 	andeq	ip, r5, r0, lsl #8
     9c8:	00067e00 	andeq	r7, r6, r0, lsl #28
     9cc:	91000200 	mrsls	r0, R8_usr
	...
     9d8:	0004b400 	andeq	fp, r4, r0, lsl #8
     9dc:	0005be00 	andeq	fp, r5, r0, lsl #28
     9e0:	f3000400 	vshl.u8	d0, d0, d0
     9e4:	c49f5101 	ldrgt	r5, [pc], #257	; 9ec <__RW_SIZE__+0x458>
     9e8:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     9ec:	04000006 	streq	r0, [r0], #-6
     9f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     9f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	0004b400 	andeq	fp, r4, r0, lsl #8
     a00:	0005b800 	andeq	fp, r5, r0, lsl #16
     a04:	91000300 	mrsls	r0, LR_irq
     a08:	05c47d9c 	strbeq	r7, [r4, #3484]	; 0xd9c
     a0c:	067e0000 	ldrbteq	r0, [lr], -r0
     a10:	00030000 	andeq	r0, r3, r0
     a14:	007d9c91 			; <UNDEFINED> instruction: 0x007d9c91
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	c2000000 	andgt	r0, r0, #0
     a20:	be000004 	cdplt	0, 0, cr0, cr0, cr4, {0}
     a24:	02000005 	andeq	r0, r0, #5
     a28:	c49f3000 	ldrgt	r3, [pc], #0	; a30 <__RW_SIZE__+0x49c>
     a2c:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     a30:	02000006 	andeq	r0, r0, #6
     a34:	009f3000 	addseq	r3, pc, r0
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     a40:	0c000004 	stceq	0, cr0, [r0], {4}
     a44:	02000005 	andeq	r0, r0, #5
     a48:	0c9f3000 	ldceq	0, cr3, [pc], {0}
     a4c:	26000005 	strcs	r0, [r0], -r5
     a50:	01000005 	tsteq	r0, r5
     a54:	05265400 	streq	r5, [r6, #-1024]!	; 0xfffffc00
     a58:	05280000 	streq	r0, [r8, #-0]!
     a5c:	00030000 	andeq	r0, r3, r0
     a60:	289f0174 	ldmcs	pc, {r2, r4, r5, r6, r8}	; <UNPREDICTABLE>
     a64:	86000005 	strhi	r0, [r0], -r5
     a68:	01000005 	tsteq	r0, r5
     a6c:	05865400 	streq	r5, [r6, #1024]	; 0x400
     a70:	058a0000 	streq	r0, [sl]
     a74:	00030000 	andeq	r0, r3, r0
     a78:	c49f7f74 	ldrgt	r7, [pc], #3956	; a80 <__RW_SIZE__+0x4ec>
     a7c:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     a80:	01000006 	tsteq	r0, r6
     a84:	00005400 	andeq	r5, r0, r0, lsl #8
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	04e80000 	strbteq	r0, [r8], #0
     a90:	05960000 	ldreq	r0, [r6]
     a94:	00030000 	andeq	r0, r3, r0
     a98:	967d8091 			; <UNDEFINED> instruction: 0x967d8091
     a9c:	a2000005 	andge	r0, r0, #5
     aa0:	08000005 	stmdaeq	r0, {r0, r2}
     aa4:	7d809100 	stfvcd	f1, [r0]
     aa8:	01230194 			; <UNDEFINED> instruction: 0x01230194
     aac:	0005c49f 	muleq	r5, pc, r4	; <UNPREDICTABLE>
     ab0:	00067e00 	andeq	r7, r6, r0, lsl #28
     ab4:	91000300 	mrsls	r0, LR_irq
     ab8:	00007d80 	andeq	r7, r0, r0, lsl #27
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	00b00000 	adcseq	r0, r0, r0
     ac4:	00b40000 	adcseq	r0, r4, r0
     ac8:	00020000 	andeq	r0, r2, r0
     acc:	00009f30 	andeq	r9, r0, r0, lsr pc
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	008e0000 	addeq	r0, lr, r0
     ad8:	00900000 	addseq	r0, r0, r0
     adc:	00020000 	andeq	r0, r2, r0
     ae0:	00909f30 	addseq	r9, r0, r0, lsr pc
     ae4:	00920000 	addseq	r0, r2, r0
     ae8:	000a0000 	andeq	r0, sl, r0
     aec:	1a380073 	bne	e00cc0 <__RW_SIZE__+0xe0072c>
     af0:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     af4:	00929f1a 	addseq	r9, r2, sl, lsl pc
     af8:	00960000 	addseq	r0, r6, r0
     afc:	00140000 	andseq	r0, r4, r0
     b00:	35200070 	strcc	r0, [r0, #-112]!	; 0xffffff90
     b04:	311a3725 	tstcc	sl, r5, lsr #14
     b08:	38007324 	stmdacc	r0, {r2, r5, r8, r9, ip, sp, lr}
     b0c:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     b10:	9f211aff 	svcls	0x00211aff
     b14:	00000096 	muleq	r0, r6, r0
     b18:	000000a0 	andeq	r0, r0, r0, lsr #1
     b1c:	00700013 	rsbseq	r0, r0, r3, lsl r0
     b20:	1a372535 	bne	dc9ffc <__RW_SIZE__+0xdc9a68>
     b24:	00732431 	rsbseq	r2, r3, r1, lsr r4
     b28:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     b2c:	211aff08 	tstcs	sl, r8, lsl #30
     b30:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b34:	0000a400 	andeq	sl, r0, r0, lsl #8
     b38:	70001400 	andvc	r1, r0, r0, lsl #8
     b3c:	37253500 	strcc	r3, [r5, -r0, lsl #10]!
     b40:	7324311a 	teqvc	r4, #-2147483642	; 0x80000006
     b44:	1a382000 	bne	e08b4c <__RW_SIZE__+0xe085b8>
     b48:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     b4c:	b09f211a 	addslt	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
     b50:	e2000000 	and	r0, r0, #0
     b54:	01000000 	mrseq	r0, (UNDEF: 0)
     b58:	00005000 	andeq	r5, r0, r0
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	00b40000 	adcseq	r0, r4, r0
     b64:	00b60000 	adcseq	r0, r6, r0
     b68:	00020000 	andeq	r0, r2, r0
     b6c:	00b69f30 	adcseq	r9, r6, r0, lsr pc
     b70:	00b80000 	adcseq	r0, r8, r0
     b74:	000a0000 	andeq	r0, sl, r0
     b78:	1a380074 	bne	e00d50 <__RW_SIZE__+0xe007bc>
     b7c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     b80:	00b89f1a 	adcseq	r9, r8, sl, lsl pc
     b84:	00ba0000 	adcseq	r0, sl, r0
     b88:	00140000 	andseq	r0, r4, r0
     b8c:	35200071 	strcc	r0, [r0, #-113]!	; 0xffffff8f
     b90:	311a3725 	tstcc	sl, r5, lsr #14
     b94:	38007424 	stmdacc	r0, {r2, r5, sl, ip, sp, lr}
     b98:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     b9c:	9f211aff 	svcls	0x00211aff
     ba0:	000000ba 	strheq	r0, [r0], -sl
     ba4:	000000bc 	strheq	r0, [r0], -ip
     ba8:	0071001e 	rsbseq	r0, r1, lr, lsl r0
     bac:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     bb0:	7524311a 	strvc	r3, [r4, #-282]!	; 0xfffffee6
     bb4:	253d2000 	ldrcs	r2, [sp, #-0]!
     bb8:	24341a33 	ldrtcs	r1, [r4], #-2611	; 0xfffff5cd
     bbc:	38007421 	stmdacc	r0, {r0, r5, sl, ip, sp, lr}
     bc0:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     bc4:	9f211aff 	svcls	0x00211aff
     bc8:	000000bc 	strheq	r0, [r0], -ip
     bcc:	000000be 	strheq	r0, [r0], -lr
     bd0:	0071001d 	rsbseq	r0, r1, sp, lsl r0
     bd4:	1a372535 	bne	dca0b0 <__RW_SIZE__+0xdc9b1c>
     bd8:	00752431 	rsbseq	r2, r5, r1, lsr r4
     bdc:	33253d20 	teqcc	r5, #32, 26	; 0x800
     be0:	2124341a 	teqcs	r4, sl, lsl r4
     be4:	1a380074 	bne	e00dbc <__RW_SIZE__+0xe00828>
     be8:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     bec:	be9f211a 	mrclt	1, 4, r2, cr15, cr10, {0}
     bf0:	c2000000 	andgt	r0, r0, #0
     bf4:	1c000000 	stcne	0, cr0, [r0], {-0}
     bf8:	35007100 	strcc	r7, [r0, #-256]	; 0xffffff00
     bfc:	311a3725 	tstcc	sl, r5, lsr #14
     c00:	3d007524 	cfstr32cc	mvfx7, [r0, #-144]	; 0xffffff70
     c04:	341a3325 	ldrcc	r3, [sl], #-805	; 0xfffffcdb
     c08:	00742124 	rsbseq	r2, r4, r4, lsr #2
     c0c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     c10:	211aff08 	tstcs	sl, r8, lsl #30
     c14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	0000e400 	andeq	lr, r0, r0, lsl #8
     c20:	0000f600 	andeq	pc, r0, r0, lsl #12
     c24:	30000200 	andcc	r0, r0, r0, lsl #4
     c28:	0000f69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     c2c:	0000f800 	andeq	pc, r0, r0, lsl #16
     c30:	71000a00 	tstvc	r0, r0, lsl #20
     c34:	301a3800 	andscc	r3, sl, r0, lsl #16
     c38:	1aff0829 	bne	fffc2ce4 <MSP_BASE+0xdffbdce4>
     c3c:	0000f89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     c40:	0000fa00 	andeq	pc, r0, r0, lsl #20
     c44:	70001400 	andvc	r1, r0, r0, lsl #8
     c48:	25352000 	ldrcs	r2, [r5, #-0]!
     c4c:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     c50:	1a380071 	bne	e00e1c <__RW_SIZE__+0xe00888>
     c54:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     c58:	fa9f211a 	blx	fe7c90c8 <MSP_BASE+0xde7c40c8>
     c5c:	fc000000 	stc2	0, cr0, [r0], {-0}
     c60:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     c64:	20007000 	andcs	r7, r0, r0
     c68:	1a372535 	bne	dca144 <__RW_SIZE__+0xdc9bb0>
     c6c:	00722431 	rsbseq	r2, r2, r1, lsr r4
     c70:	33253d20 	teqcc	r5, #32, 26	; 0x800
     c74:	2124341a 	teqcs	r4, sl, lsl r4
     c78:	1a380071 	bne	e00e44 <__RW_SIZE__+0xe008b0>
     c7c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     c80:	fc9f211a 	ldc2	1, cr2, [pc], {26}
     c84:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     c88:	1d000000 	stcne	0, cr0, [r0, #-0]
     c8c:	35007000 	strcc	r7, [r0, #-0]
     c90:	311a3725 	tstcc	sl, r5, lsr #14
     c94:	20007224 	andcs	r7, r0, r4, lsr #4
     c98:	1a33253d 	bne	cca194 <__RW_SIZE__+0xcc9c00>
     c9c:	71212434 	teqvc	r1, r4, lsr r4
     ca0:	301a3800 	andscc	r3, sl, r0, lsl #16
     ca4:	1aff0829 	bne	fffc2d50 <MSP_BASE+0xdffbdd50>
     ca8:	00fe9f21 	rscseq	r9, lr, r1, lsr #30
     cac:	01020000 	mrseq	r0, (UNDEF: 2)
     cb0:	001c0000 	andseq	r0, ip, r0
     cb4:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     cb8:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     cbc:	253d0072 	ldrcs	r0, [sp, #-114]!	; 0xffffff8e
     cc0:	24341a33 	ldrtcs	r1, [r4], #-2611	; 0xfffff5cd
     cc4:	38007121 	stmdacc	r0, {r0, r5, r8, ip, sp, lr}
     cc8:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     ccc:	9f211aff 	svcls	0x00211aff
	...
     cd8:	00000118 	andeq	r0, r0, r8, lsl r1
     cdc:	0000012a 	andeq	r0, r0, sl, lsr #2
     ce0:	9f300002 	svcls	0x00300002
	...
     cec:	0000012a 	andeq	r0, r0, sl, lsr #2
     cf0:	0000012c 	andeq	r0, r0, ip, lsr #2
     cf4:	9f300002 	svcls	0x00300002
     cf8:	0000012c 	andeq	r0, r0, ip, lsr #2
     cfc:	0000012e 	andeq	r0, r0, lr, lsr #2
     d00:	0073000a 	rsbseq	r0, r3, sl
     d04:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     d08:	9f1aff08 	svcls	0x001aff08
     d0c:	0000012e 	andeq	r0, r0, lr, lsr #2
     d10:	00000132 	andeq	r0, r0, r2, lsr r1
     d14:	00700014 	rsbseq	r0, r0, r4, lsl r0
     d18:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     d1c:	7324311a 	teqvc	r4, #-2147483642	; 0x80000006
     d20:	301a3800 	andscc	r3, sl, r0, lsl #16
     d24:	1aff0829 	bne	fffc2dd0 <MSP_BASE+0xdffbddd0>
     d28:	01329f21 	teqeq	r2, r1, lsr #30
     d2c:	013c0000 	teqeq	ip, r0
     d30:	00130000 	andseq	r0, r3, r0
     d34:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     d38:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     d3c:	1a380073 	bne	e00f10 <__RW_SIZE__+0xe0097c>
     d40:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     d44:	3c9f211a 	ldfccs	f2, [pc], {26}
     d48:	40000001 	andmi	r0, r0, r1
     d4c:	14000001 	strne	r0, [r0], #-1
     d50:	35007000 	strcc	r7, [r0, #-0]
     d54:	311a3725 	tstcc	sl, r5, lsr #14
     d58:	20007324 	andcs	r7, r0, r4, lsr #6
     d5c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     d60:	211aff08 	tstcs	sl, r8, lsl #30
     d64:	00014a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
     d68:	00014c00 	andeq	r4, r1, r0, lsl #24
     d6c:	70000600 	andvc	r0, r0, r0, lsl #12
     d70:	21007300 	mrscs	r7, LR_irq
     d74:	00014c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     d78:	00015400 	andeq	r5, r1, r0, lsl #8
     d7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d88:	00000166 	andeq	r0, r0, r6, ror #2
     d8c:	00000168 	andeq	r0, r0, r8, ror #2
     d90:	9f300002 	svcls	0x00300002
     d94:	00000168 	andeq	r0, r0, r8, ror #2
     d98:	0000016a 	andeq	r0, r0, sl, ror #2
     d9c:	0072000a 	rsbseq	r0, r2, sl
     da0:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     da4:	9f1aff08 	svcls	0x001aff08
     da8:	0000016a 	andeq	r0, r0, sl, ror #2
     dac:	0000016c 	andeq	r0, r0, ip, ror #2
     db0:	00700014 	rsbseq	r0, r0, r4, lsl r0
     db4:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     db8:	7224311a 	eorvc	r3, r4, #-2147483642	; 0x80000006
     dbc:	301a3800 	andscc	r3, sl, r0, lsl #16
     dc0:	1aff0829 	bne	fffc2e6c <MSP_BASE+0xdffbde6c>
     dc4:	016c9f21 	cmneq	ip, r1, lsr #30
     dc8:	016e0000 	cmneq	lr, r0
     dcc:	001e0000 	andseq	r0, lr, r0
     dd0:	35200070 	strcc	r0, [r0, #-112]!	; 0xffffff90
     dd4:	311a3725 	tstcc	sl, r5, lsr #14
     dd8:	20007124 	andcs	r7, r0, r4, lsr #2
     ddc:	1a33253d 	bne	cca2d8 <__RW_SIZE__+0xcc9d44>
     de0:	72212434 	eorvc	r2, r1, #52, 8	; 0x34000000
     de4:	301a3800 	andscc	r3, sl, r0, lsl #16
     de8:	1aff0829 	bne	fffc2e94 <MSP_BASE+0xdffbde94>
     dec:	016e9f21 	cmneq	lr, r1, lsr #30
     df0:	01700000 	cmneq	r0, r0
     df4:	001d0000 	andseq	r0, sp, r0
     df8:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     dfc:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     e00:	3d200071 	stccc	0, cr0, [r0, #-452]!	; 0xfffffe3c
     e04:	341a3325 	ldrcc	r3, [sl], #-805	; 0xfffffcdb
     e08:	00722124 	rsbseq	r2, r2, r4, lsr #2
     e0c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     e10:	211aff08 	tstcs	sl, r8, lsl #30
     e14:	0001709f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     e18:	00017400 	andeq	r7, r1, r0, lsl #8
     e1c:	70001c00 	andvc	r1, r0, r0, lsl #24
     e20:	37253500 	strcc	r3, [r5, -r0, lsl #10]!
     e24:	7124311a 	teqvc	r4, sl, lsl r1
     e28:	33253d00 	teqcc	r5, #0, 26
     e2c:	2124341a 	teqcs	r4, sl, lsl r4
     e30:	1a380072 	bne	e01000 <__RW_SIZE__+0xe00a6c>
     e34:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     e38:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
     e3c:	00000000 	andeq	r0, r0, r0
     e40:	90000000 	andls	r0, r0, r0
     e44:	a4000001 	strge	r0, [r0], #-1
     e48:	01000001 	tsteq	r0, r1
     e4c:	01a45000 			; <UNDEFINED> instruction: 0x01a45000
     e50:	01d20000 	bicseq	r0, r2, r0
     e54:	00040000 	andeq	r0, r4, r0
     e58:	9f5001f3 	svcls	0x005001f3
     e5c:	000001d2 	ldrdeq	r0, [r0], -r2
     e60:	000001f2 	strdeq	r0, [r0], -r2
     e64:	f2500001 	vhadd.s16	d16, d0, d1
     e68:	88000001 	stmdahi	r0, {r0}
     e6c:	04000002 	streq	r0, [r0], #-2
     e70:	5001f300 	andpl	pc, r1, r0, lsl #6
     e74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	00019400 	andeq	r9, r1, r0, lsl #8
     e80:	0001d200 	andeq	sp, r1, r0, lsl #4
     e84:	39000200 	stmdbcc	r0, {r9}
     e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	0001ae00 	andeq	sl, r1, r0, lsl #28
     e94:	0001d200 	andeq	sp, r1, r0, lsl #4
     e98:	47000200 	strmi	r0, [r0, -r0, lsl #4]
     e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	0001b400 	andeq	fp, r1, r0, lsl #8
     ea8:	0001d200 	andeq	sp, r1, r0, lsl #4
     eac:	08000300 	stmdaeq	r0, {r8, r9}
     eb0:	00009f28 	andeq	r9, r0, r8, lsr #30
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	00900000 	addseq	r0, r0, r0
     ebc:	00f40000 	rscseq	r0, r4, r0
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	0000f450 	andeq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
     ec8:	00011a00 	andeq	r1, r1, r0, lsl #20
     ecc:	f3000400 	vshl.u8	d0, d0, d0
     ed0:	009f5001 	addseq	r5, pc, r1
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	94000000 	strls	r0, [r0], #-0
     edc:	aa000000 	bge	ee4 <__RW_SIZE__+0x950>
     ee0:	02000000 	andeq	r0, r0, #0
     ee4:	009f4700 	addseq	r4, pc, r0, lsl #14
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	44000000 	strmi	r0, [r0], #-0
     ef0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     ef4:	01000000 	mrseq	r0, (UNDEF: 0)
     ef8:	007c5000 	rsbseq	r5, ip, r0
     efc:	00e60000 	rsceq	r0, r6, r0
     f00:	00040000 	andeq	r0, r4, r0
     f04:	9f5001f3 	svcls	0x005001f3
	...
     f10:	00000044 	andeq	r0, r0, r4, asr #32
     f14:	000000b2 	strheq	r0, [r0], -r2
     f18:	b2510001 	subslt	r0, r1, #1
     f1c:	e6000000 	str	r0, [r0], -r0
     f20:	04000000 	streq	r0, [r0], #-0
     f24:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00006400 	andeq	r6, r0, r0, lsl #8
     f34:	00007c00 	andeq	r7, r0, r0, lsl #24
     f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f44:	0000006e 	andeq	r0, r0, lr, rrx
     f48:	0000007c 	andeq	r0, r0, ip, ror r0
     f4c:	00500001 	subseq	r0, r0, r1
     f50:	00000000 	andeq	r0, r0, r0
     f54:	a2000000 	andge	r0, r0, #0
     f58:	b2000000 	andlt	r0, r0, #0
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
     f60:	00005100 	andeq	r5, r0, r0, lsl #2
     f64:	00000000 	andeq	r0, r0, r0
     f68:	00e80000 	rsceq	r0, r8, r0
     f6c:	01360000 	teqeq	r6, r0
     f70:	00010000 	andeq	r0, r1, r0
     f74:	00013650 	andeq	r3, r1, r0, asr r6
     f78:	00016200 	andeq	r6, r1, r0, lsl #4
     f7c:	f3000400 	vshl.u8	d0, d0, d0
     f80:	009f5001 	addseq	r5, pc, r1
     f84:	00000000 	andeq	r0, r0, r0
     f88:	12000000 	andne	r0, r0, #0
     f8c:	26000001 	strcs	r0, [r0], -r1
     f90:	01000001 	tsteq	r0, r1
     f94:	01265400 	teqeq	r6, r0, lsl #8
     f98:	01360000 	teqeq	r6, r0
     f9c:	00050000 	andeq	r0, r5, r0
     fa0:	25380070 	ldrcs	r0, [r8, #-112]!	; 0xffffff90
     fa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	00013400 	andeq	r3, r1, r0, lsl #8
     fb0:	00013600 	andeq	r3, r1, r0, lsl #12
     fb4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fc0:	000001c8 	andeq	r0, r0, r8, asr #3
     fc4:	000001f4 	strdeq	r0, [r0], -r4
     fc8:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     fcc:	1a000001 	bne	fd8 <__RW_SIZE__+0xa44>
     fd0:	04000002 	streq	r0, [r0], #-2
     fd4:	5001f300 	andpl	pc, r1, r0, lsl #6
     fd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	0001f000 	andeq	pc, r1, r0
     fe4:	0001f400 	andeq	pc, r1, r0, lsl #8
     fe8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ff4:	00000270 	andeq	r0, r0, r0, ror r2
     ff8:	0000029e 	muleq	r0, lr, r2
     ffc:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    1000:	46000002 	strmi	r0, [r0], -r2
    1004:	04000003 	streq	r0, [r0], #-3
    1008:	5001f300 	andpl	pc, r1, r0, lsl #6
    100c:	0003469f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1010:	00034800 	andeq	r4, r3, r0, lsl #16
    1014:	50000100 	andpl	r0, r0, r0, lsl #2
    1018:	00000348 	andeq	r0, r0, r8, asr #6
    101c:	000003de 	ldrdeq	r0, [r0], -lr
    1020:	01f30004 	mvnseq	r0, r4
    1024:	03de9f50 	bicseq	r9, lr, #80, 30	; 0x140
    1028:	03e00000 	mvneq	r0, #0
    102c:	00010000 	andeq	r0, r1, r0
    1030:	0003e050 	andeq	lr, r3, r0, asr r0
    1034:	00047600 	andeq	r7, r4, r0, lsl #12
    1038:	f3000400 	vshl.u8	d0, d0, d0
    103c:	769f5001 	ldrvc	r5, [pc], r1
    1040:	7a000004 	bvc	1058 <__RW_SIZE__+0xac4>
    1044:	01000004 	tsteq	r0, r4
    1048:	047a5000 	ldrbteq	r5, [sl], #-0
    104c:	050e0000 	streq	r0, [lr, #-0]
    1050:	00040000 	andeq	r0, r4, r0
    1054:	9f5001f3 	svcls	0x005001f3
    1058:	0000050e 	andeq	r0, r0, lr, lsl #10
    105c:	00000512 	andeq	r0, r0, r2, lsl r5
    1060:	12500001 	subsne	r0, r0, #1
    1064:	a6000005 	strge	r0, [r0], -r5
    1068:	04000005 	streq	r0, [r0], #-5
    106c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1070:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1074:	00000000 	andeq	r0, r0, r0
    1078:	0002a600 	andeq	sl, r2, r0, lsl #12
    107c:	00033000 	andeq	r3, r3, r0
    1080:	08000300 	stmdaeq	r0, {r8, r9}
    1084:	00009fe8 	andeq	r9, r0, r8, ror #31
    1088:	00000000 	andeq	r0, r0, r0
    108c:	02a60000 	adceq	r0, r6, #0
    1090:	03300000 	teqeq	r0, #0
    1094:	00030000 	andeq	r0, r3, r0
    1098:	009f3608 	addseq	r3, pc, r8, lsl #12
    109c:	00000000 	andeq	r0, r0, r0
    10a0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    10a4:	30000002 	andcc	r0, r0, r2
    10a8:	03000003 	movweq	r0, #3
    10ac:	9f360800 	svcls	0x00360800
	...
    10b8:	00000302 	andeq	r0, r0, r2, lsl #6
    10bc:	00000330 	andeq	r0, r0, r0, lsr r3
    10c0:	e8090003 	stmda	r9, {r0, r1}
    10c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	00031800 	andeq	r1, r3, r0, lsl #16
    10d0:	00033000 	andeq	r3, r3, r0
    10d4:	09000300 	stmdbeq	r0, {r8, r9}
    10d8:	00009fe8 	andeq	r9, r0, r8, ror #31
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	03520000 	cmpeq	r2, #0
    10e4:	03de0000 	bicseq	r0, lr, #0
    10e8:	00020000 	andeq	r0, r2, r0
    10ec:	00009f38 	andeq	r9, r0, r8, lsr pc
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	03520000 	cmpeq	r2, #0
    10f8:	03de0000 	bicseq	r0, lr, #0
    10fc:	00030000 	andeq	r0, r3, r0
    1100:	009f3608 	addseq	r3, pc, r8, lsl #12
    1104:	00000000 	andeq	r0, r0, r0
    1108:	7a000000 	bvc	1110 <__RW_SIZE__+0xb7c>
    110c:	de000003 	cdple	0, 0, cr0, cr0, cr3, {0}
    1110:	03000003 	movweq	r0, #3
    1114:	9f360800 	svcls	0x00360800
	...
    1120:	000003ae 	andeq	r0, r0, lr, lsr #7
    1124:	000003de 	ldrdeq	r0, [r0], -lr
    1128:	9f380002 	svcls	0x00380002
	...
    1134:	000003c4 	andeq	r0, r0, r4, asr #7
    1138:	000003de 	ldrdeq	r0, [r0], -lr
    113c:	9f380002 	svcls	0x00380002
	...
    1148:	000003ea 	andeq	r0, r0, sl, ror #7
    114c:	00000476 	andeq	r0, r0, r6, ror r4
    1150:	c8080003 	stmdagt	r8, {r0, r1}
    1154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0003ea00 	andeq	lr, r3, r0, lsl #20
    1160:	00047600 	andeq	r7, r4, r0, lsl #12
    1164:	08000300 	stmdaeq	r0, {r8, r9}
    1168:	00009f36 	andeq	r9, r0, r6, lsr pc
    116c:	00000000 	andeq	r0, r0, r0
    1170:	04120000 	ldreq	r0, [r2], #-0
    1174:	04760000 	ldrbteq	r0, [r6], #-0
    1178:	00030000 	andeq	r0, r3, r0
    117c:	009f3608 	addseq	r3, pc, r8, lsl #12
    1180:	00000000 	andeq	r0, r0, r0
    1184:	46000000 	strmi	r0, [r0], -r0
    1188:	76000004 	strvc	r0, [r0], -r4
    118c:	03000004 	movweq	r0, #4
    1190:	9fc80900 	svcls	0x00c80900
	...
    119c:	0000045c 	andeq	r0, r0, ip, asr r4
    11a0:	00000476 	andeq	r0, r0, r6, ror r4
    11a4:	c8090003 	stmdagt	r9, {r0, r1}
    11a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	00048200 	andeq	r8, r4, r0, lsl #4
    11b4:	00050e00 	andeq	r0, r5, r0, lsl #28
    11b8:	08000300 	stmdaeq	r0, {r8, r9}
    11bc:	00009f68 	andeq	r9, r0, r8, ror #30
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	04820000 	streq	r0, [r2], #0
    11c8:	050e0000 	streq	r0, [lr, #-0]
    11cc:	00030000 	andeq	r0, r3, r0
    11d0:	009f3608 	addseq	r3, pc, r8, lsl #12
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	aa000000 	bge	11e0 <__RW_SIZE__+0xc4c>
    11dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    11e0:	03000005 	movweq	r0, #5
    11e4:	9f360800 	svcls	0x00360800
	...
    11f0:	000004de 	ldrdeq	r0, [r0], -lr
    11f4:	0000050e 	andeq	r0, r0, lr, lsl #10
    11f8:	68080003 	stmdavs	r8, {r0, r1}
    11fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1200:	00000000 	andeq	r0, r0, r0
    1204:	0004f400 	andeq	pc, r4, r0, lsl #8
    1208:	00050e00 	andeq	r0, r5, r0, lsl #28
    120c:	08000300 	stmdaeq	r0, {r8, r9}
    1210:	00009f68 	andeq	r9, r0, r8, ror #30
    1214:	00000000 	andeq	r0, r0, r0
    1218:	05c40000 	strbeq	r0, [r4]
    121c:	05d60000 	ldrbeq	r0, [r6]
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000051 	andeq	r0, r0, r1, asr r0
    1228:	00000000 	andeq	r0, r0, r0
    122c:	00060800 	andeq	r0, r6, r0, lsl #16
    1230:	0006e600 	andeq	lr, r6, r0, lsl #12
    1234:	50000100 	andpl	r0, r0, r0, lsl #2
    1238:	000006e6 	andeq	r0, r0, r6, ror #13
    123c:	0000096c 	andeq	r0, r0, ip, ror #18
    1240:	01f30004 	mvnseq	r0, r4
    1244:	00009f50 	andeq	r9, r0, r0, asr pc
    1248:	00000000 	andeq	r0, r0, r0
    124c:	06080000 	streq	r0, [r8], -r0
    1250:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    1254:	00010000 	andeq	r0, r1, r0
    1258:	00085a51 	andeq	r5, r8, r1, asr sl
    125c:	00096c00 	andeq	r6, r9, r0, lsl #24
    1260:	f3000400 	vshl.u8	d0, d0, d0
    1264:	009f5101 	addseq	r5, pc, r1, lsl #2
    1268:	00000000 	andeq	r0, r0, r0
    126c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1270:	7a000006 	bvc	1290 <__RW_SIZE__+0xcfc>
    1274:	01000007 	tsteq	r0, r7
    1278:	077a5200 	ldrbeq	r5, [sl, -r0, lsl #4]!
    127c:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    1280:	00040000 	andeq	r0, r4, r0
    1284:	9f5201f3 	svcls	0x005201f3
	...
    1290:	00000608 	andeq	r0, r0, r8, lsl #12
    1294:	000008ee 	andeq	r0, r0, lr, ror #17
    1298:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    129c:	6c000008 	stcvs	0, cr0, [r0], {8}
    12a0:	04000009 	streq	r0, [r0], #-9
    12a4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    12a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	00062600 	andeq	r2, r6, r0, lsl #12
    12b4:	00063c00 	andeq	r3, r6, r0, lsl #24
    12b8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    12c4:	000006d2 	ldrdeq	r0, [r0], -r2
    12c8:	000006e6 	andeq	r0, r0, r6, ror #13
    12cc:	00500001 	subseq	r0, r0, r1
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	6a000000 	bvs	12dc <__RW_SIZE__+0xd48>
    12d8:	7a000007 	bvc	12fc <__RW_SIZE__+0xd68>
    12dc:	01000007 	tsteq	r0, r7
    12e0:	00005200 	andeq	r5, r0, r0, lsl #4
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	07b80000 	ldreq	r0, [r8, r0]!
    12ec:	07c60000 	strbeq	r0, [r6, r0]
    12f0:	00010000 	andeq	r0, r1, r0
    12f4:	00000056 	andeq	r0, r0, r6, asr r0
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	00084a00 	andeq	r4, r8, r0, lsl #20
    1300:	00085a00 	andeq	r5, r8, r0, lsl #20
    1304:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1310:	000008de 	ldrdeq	r0, [r0], -lr
    1314:	000008ee 	andeq	r0, r0, lr, ror #17
    1318:	00530001 	subseq	r0, r3, r1
    131c:	00000000 	andeq	r0, r0, r0
    1320:	2c000000 	stccs	0, cr0, [r0], {-0}
    1324:	3a000009 	bcc	1350 <__RW_SIZE__+0xdbc>
    1328:	01000009 	tsteq	r0, r9
    132c:	00005000 	andeq	r5, r0, r0
    1330:	00000000 	andeq	r0, r0, r0
    1334:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    1338:	09830000 	stmibeq	r3, {}	; <UNPREDICTABLE>
    133c:	00010000 	andeq	r0, r1, r0
    1340:	00098350 	andeq	r8, r9, r0, asr r3
    1344:	000a2400 	andeq	r2, sl, r0, lsl #8
    1348:	f3000400 	vshl.u8	d0, d0, d0
    134c:	009f5001 	addseq	r5, pc, r1
    1350:	00000000 	andeq	r0, r0, r0
    1354:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1358:	83000009 	movwhi	r0, #9
    135c:	01000009 	tsteq	r0, r9
    1360:	09835100 	stmibeq	r3, {r8, ip, lr}
    1364:	0a240000 	beq	90136c <__RW_SIZE__+0x900dd8>
    1368:	00040000 	andeq	r0, r4, r0
    136c:	9f5101f3 	svcls	0x005101f3
	...
    1378:	0000096c 	andeq	r0, r0, ip, ror #18
    137c:	00000983 	andeq	r0, r0, r3, lsl #19
    1380:	83520001 	cmphi	r2, #1
    1384:	24000009 	strcs	r0, [r0], #-9
    1388:	0400000a 	streq	r0, [r0], #-10
    138c:	5201f300 	andpl	pc, r1, #0, 6
    1390:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1394:	00000000 	andeq	r0, r0, r0
    1398:	00096c00 	andeq	r6, r9, r0, lsl #24
    139c:	00098300 	andeq	r8, r9, r0, lsl #6
    13a0:	53000100 	movwpl	r0, #256	; 0x100
    13a4:	00000983 	andeq	r0, r0, r3, lsl #19
    13a8:	00000a24 	andeq	r0, r0, r4, lsr #20
    13ac:	01f30004 	mvnseq	r0, r4
    13b0:	00009f53 	andeq	r9, r0, r3, asr pc
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    13bc:	0a200000 	beq	8013c4 <__RW_SIZE__+0x800e30>
    13c0:	00020000 	andeq	r0, r2, r0
    13c4:	0a200091 	beq	801610 <__RW_SIZE__+0x80107c>
    13c8:	0a240000 	beq	9013d0 <__RW_SIZE__+0x900e3c>
    13cc:	00020000 	andeq	r0, r2, r0
    13d0:	0000007d 	andeq	r0, r0, sp, ror r0
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    13dc:	09ac0000 	stmibeq	ip!, {}	; <UNPREDICTABLE>
    13e0:	00020000 	andeq	r0, r2, r0
    13e4:	09ac9f30 	stmibeq	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}
    13e8:	09fc0000 	ldmibeq	ip!, {}^	; <UNPREDICTABLE>
    13ec:	00010000 	andeq	r0, r1, r0
    13f0:	0009fc59 	andeq	pc, r9, r9, asr ip	; <UNPREDICTABLE>
    13f4:	000a0000 	andeq	r0, sl, r0
    13f8:	79000300 	stmdbvc	r0, {r8, r9}
    13fc:	0a009f7f 	beq	29200 <__RW_SIZE__+0x28c6c>
    1400:	0a040000 	beq	101408 <__RW_SIZE__+0x100e74>
    1404:	00010000 	andeq	r0, r1, r0
    1408:	00000059 	andeq	r0, r0, r9, asr r0
    140c:	00000000 	andeq	r0, r0, r0
    1410:	0009ac00 	andeq	sl, r9, r0, lsl #24
    1414:	0009b000 	andeq	fp, r9, r0
    1418:	30000200 	andcc	r0, r0, r0, lsl #4
    141c:	0009b09f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
    1420:	0009ec00 	andeq	lr, r9, r0, lsl #24
    1424:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1428:	000009ec 	andeq	r0, r0, ip, ror #19
    142c:	000009ee 	andeq	r0, r0, lr, ror #19
    1430:	7f740003 	svcvc	0x00740003
    1434:	0009ee9f 	muleq	r9, pc, lr	; <UNPREDICTABLE>
    1438:	0009f800 	andeq	pc, r9, r0, lsl #16
    143c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1448:	0000097c 	andeq	r0, r0, ip, ror r9
    144c:	00000a20 	andeq	r0, r0, r0, lsr #20
    1450:	00550001 	subseq	r0, r5, r1
    1454:	00000000 	andeq	r0, r0, r0
    1458:	7c000000 	stcvc	0, cr0, [r0], {-0}
    145c:	20000009 	andcs	r0, r0, r9
    1460:	0100000a 	tsteq	r0, sl
    1464:	00005600 	andeq	r5, r0, r0, lsl #12
    1468:	00000000 	andeq	r0, r0, r0
    146c:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
    1470:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
    1474:	00010000 	andeq	r0, r1, r0
    1478:	00000058 	andeq	r0, r0, r8, asr r0
    147c:	00000000 	andeq	r0, r0, r0
    1480:	000a2400 	andeq	r2, sl, r0, lsl #8
    1484:	000ae800 	andeq	lr, sl, r0, lsl #16
    1488:	50000100 	andpl	r0, r0, r0, lsl #2
    148c:	00000ae8 	andeq	r0, r0, r8, ror #21
    1490:	00000d66 	andeq	r0, r0, r6, ror #26
    1494:	01f30004 	mvnseq	r0, r4
    1498:	00009f50 	andeq	r9, r0, r0, asr pc
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	0a240000 	beq	9014a8 <__RW_SIZE__+0x900f14>
    14a4:	0c580000 	mraeq	r0, r8, acc0
    14a8:	00010000 	andeq	r0, r1, r0
    14ac:	000c5851 	andeq	r5, ip, r1, asr r8
    14b0:	000d6600 	andeq	r6, sp, r0, lsl #12
    14b4:	f3000400 	vshl.u8	d0, d0, d0
    14b8:	009f5101 	addseq	r5, pc, r1, lsl #2
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	52000000 	andpl	r0, r0, #0
    14c4:	5800000a 	stmdapl	r0, {r1, r3}
    14c8:	0100000c 	tsteq	r0, ip
    14cc:	00005100 	andeq	r5, r0, r0, lsl #2
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	0a520000 	beq	14814dc <__RW_SIZE__+0x1480f48>
    14d8:	0ae80000 	beq	ffa014e0 <MSP_BASE+0xdf9fc4e0>
    14dc:	00010000 	andeq	r0, r1, r0
    14e0:	00000050 	andeq	r0, r0, r0, asr r0
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	000a5200 	andeq	r5, sl, r0, lsl #4
    14ec:	000a5400 	andeq	r5, sl, r0, lsl #8
    14f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    14fc:	00000a9e 	muleq	r0, lr, sl
    1500:	00000b60 	andeq	r0, r0, r0, ror #22
    1504:	00560001 	subseq	r0, r6, r1
    1508:	00000000 	andeq	r0, r0, r0
    150c:	a4000000 	strge	r0, [r0], #-0
    1510:	6000000a 	andvs	r0, r0, sl
    1514:	0100000b 	tsteq	r0, fp
    1518:	00005600 	andeq	r5, r0, r0, lsl #12
    151c:	00000000 	andeq	r0, r0, r0
    1520:	0ad80000 	beq	ff601528 <MSP_BASE+0xdf5fc528>
    1524:	0ae80000 	beq	ffa0152c <MSP_BASE+0xdf9fc52c>
    1528:	00010000 	andeq	r0, r1, r0
    152c:	00000050 	andeq	r0, r0, r0, asr r0
    1530:	00000000 	andeq	r0, r0, r0
    1534:	000b2200 	andeq	r2, fp, r0, lsl #4
    1538:	000b6000 	andeq	r6, fp, r0
    153c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1548:	00000b38 	andeq	r0, r0, r8, lsr fp
    154c:	00000b60 	andeq	r0, r0, r0, ror #22
    1550:	00560001 	subseq	r0, r6, r1
    1554:	00000000 	andeq	r0, r0, r0
    1558:	b6000000 	strlt	r0, [r0], -r0
    155c:	c400000b 	strgt	r0, [r0], #-11
    1560:	0100000b 	tsteq	r0, fp
    1564:	00005500 	andeq	r5, r0, r0, lsl #10
    1568:	00000000 	andeq	r0, r0, r0
    156c:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    1570:	0cd00000 	ldcleq	0, cr0, [r0], {0}
    1574:	00010000 	andeq	r0, r1, r0
    1578:	00000055 	andeq	r0, r0, r5, asr r0
    157c:	00000000 	andeq	r0, r0, r0
    1580:	000c1400 	andeq	r1, ip, r0, lsl #8
    1584:	000cd000 	andeq	sp, ip, r0
    1588:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1594:	00000c48 	andeq	r0, r0, r8, asr #24
    1598:	00000c58 	andeq	r0, r0, r8, asr ip
    159c:	00510001 	subseq	r0, r1, r1
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	92000000 	andls	r0, r0, #0
    15a8:	d000000c 	andle	r0, r0, ip
    15ac:	0100000c 	tsteq	r0, ip
    15b0:	00005500 	andeq	r5, r0, r0, lsl #10
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	0ca80000 	stceq	0, cr0, [r8]
    15bc:	0cd00000 	ldcleq	0, cr0, [r0], {0}
    15c0:	00010000 	andeq	r0, r1, r0
    15c4:	00000055 	andeq	r0, r0, r5, asr r0
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	000d2600 	andeq	r2, sp, r0, lsl #12
    15d0:	000d6400 	andeq	r6, sp, r0, lsl #8
    15d4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    15e0:	00000d3a 	andeq	r0, r0, sl, lsr sp
    15e4:	00000d64 	andeq	r0, r0, r4, ror #26
    15e8:	00540001 	subseq	r0, r4, r1
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    15f4:	7c00000d 	stcvc	0, cr0, [r0], {13}
    15f8:	0100000d 	tsteq	r0, sp
    15fc:	0d7c5000 	ldcleq	0, cr5, [ip, #-0]
    1600:	0dfc0000 	ldcleq	0, cr0, [ip]
    1604:	00040000 	andeq	r0, r4, r0
    1608:	9f5001f3 	svcls	0x005001f3
	...
    1614:	00000daa 	andeq	r0, r0, sl, lsr #27
    1618:	00000dc0 	andeq	r0, r0, r0, asr #27
    161c:	9f300002 	svcls	0x00300002
    1620:	00000dc0 	andeq	r0, r0, r0, asr #27
    1624:	00000dea 	andeq	r0, r0, sl, ror #27
    1628:	00500001 	subseq	r0, r0, r1
    162c:	00000000 	andeq	r0, r0, r0
    1630:	a4000000 	strge	r0, [r0], #-0
    1634:	b000000d 	andlt	r0, r0, sp
    1638:	0100000d 	tsteq	r0, sp
    163c:	00005500 	andeq	r5, r0, r0, lsl #10
    1640:	00000000 	andeq	r0, r0, r0
    1644:	0dc00000 	stcleq	0, cr0, [r0]
    1648:	0dea0000 	stcleq	0, cr0, [sl]
    164c:	00010000 	andeq	r0, r1, r0
    1650:	00000056 	andeq	r0, r0, r6, asr r0
    1654:	00000000 	andeq	r0, r0, r0
    1658:	000e0400 	andeq	r0, lr, r0, lsl #8
    165c:	000e3400 	andeq	r3, lr, r0, lsl #8
    1660:	50000100 	andpl	r0, r0, r0, lsl #2
    1664:	00000e34 	andeq	r0, r0, r4, lsr lr
    1668:	00000e5a 	andeq	r0, r0, sl, asr lr
    166c:	5a560001 	bpl	1581678 <__RW_SIZE__+0x15810e4>
    1670:	b800000e 	stmdalt	r0, {r1, r2, r3}
    1674:	0400000e 	streq	r0, [r0], #-14
    1678:	5001f300 	andpl	pc, r1, r0, lsl #6
    167c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1680:	00000000 	andeq	r0, r0, r0
    1684:	000e0400 	andeq	r0, lr, r0, lsl #8
    1688:	000e3600 	andeq	r3, lr, r0, lsl #12
    168c:	51000100 	mrspl	r0, (UNDEF: 16)
    1690:	00000e36 	andeq	r0, r0, r6, lsr lr
    1694:	00000e4c 	andeq	r0, r0, ip, asr #28
    1698:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    169c:	b800000e 	stmdalt	r0, {r1, r2, r3}
    16a0:	0400000e 	streq	r0, [r0], #-14
    16a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    16a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	000e0400 	andeq	r0, lr, r0, lsl #8
    16b4:	000e0c00 	andeq	r0, lr, r0, lsl #24
    16b8:	52000100 	andpl	r0, r0, #0, 2
    16bc:	00000e0c 	andeq	r0, r0, ip, lsl #28
    16c0:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
    16c4:	01f30004 	mvnseq	r0, r4
    16c8:	00009f52 	andeq	r9, r0, r2, asr pc
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    16d4:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    16d8:	00010000 	andeq	r0, r1, r0
    16dc:	000e0a53 	andeq	r0, lr, r3, asr sl
    16e0:	000eb800 	andeq	fp, lr, r0, lsl #16
    16e4:	f3000400 	vshl.u8	d0, d0, d0
    16e8:	009f5301 	addseq	r5, pc, r1, lsl #6
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	70000000 	andvc	r0, r0, r0
    16f4:	7a00000e 	bvc	1734 <__RW_SIZE__+0x11a0>
    16f8:	0200000e 	andeq	r0, r0, #14
    16fc:	7a9f3000 	bvc	fe7cd704 <MSP_BASE+0xde7c8704>
    1700:	a400000e 	strge	r0, [r0], #-14
    1704:	0100000e 	tsteq	r0, lr
    1708:	00005000 	andeq	r5, r0, r0
    170c:	00000000 	andeq	r0, r0, r0
    1710:	0e700000 	cdpeq	0, 7, cr0, cr0, cr0, {0}
    1714:	0e760000 	cdpeq	0, 7, cr0, cr6, cr0, {0}
    1718:	00010000 	andeq	r0, r1, r0
    171c:	00000055 	andeq	r0, r0, r5, asr r0
    1720:	00000000 	andeq	r0, r0, r0
    1724:	000e7000 	andeq	r7, lr, r0
    1728:	000e7a00 	andeq	r7, lr, r0, lsl #20
    172c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1730:	00000e7a 	andeq	r0, r0, sl, ror lr
    1734:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
    1738:	01f30016 	mvnseq	r0, r6, lsl r0
    173c:	5001f352 	andpl	pc, r1, r2, asr r3	; <UNPREDICTABLE>
    1740:	121c3122 	andsne	r3, ip, #-2147483640	; 0x80000008
    1744:	16013f0a 	strne	r3, [r1], -sl, lsl #30
    1748:	01282d14 	teqeq	r8, r4, lsl sp
    174c:	9f131600 	svcls	0x00131600
	...
    1758:	00000e7a 	andeq	r0, r0, sl, ror lr
    175c:	00000ea4 	andeq	r0, r0, r4, lsr #29
    1760:	00560001 	subseq	r0, r6, r1
    1764:	00000000 	andeq	r0, r0, r0
    1768:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    176c:	a700000e 	strge	r0, [r0, -lr]
    1770:	0100002c 	tsteq	r0, ip, lsr #32
    1774:	2ca75000 	stccs	0, cr5, [r7]
    1778:	2cde0000 	ldclcs	0, cr0, [lr], {0}
    177c:	00040000 	andeq	r0, r4, r0
    1780:	9f5001f3 	svcls	0x005001f3
	...
    178c:	00002ce0 	andeq	r2, r0, r0, ror #25
    1790:	00002dac 	andeq	r2, r0, ip, lsr #27
    1794:	ac500001 	mrrcge	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1798:	a000002d 	andge	r0, r0, sp, lsr #32
    179c:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    17a0:	5001f300 	andpl	pc, r1, r0, lsl #6
    17a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17a8:	00000000 	andeq	r0, r0, r0
    17ac:	002ce000 	eoreq	lr, ip, r0
    17b0:	002f2800 	eoreq	r2, pc, r0, lsl #16
    17b4:	51000100 	mrspl	r0, (UNDEF: 16)
    17b8:	00002f28 	andeq	r2, r0, r8, lsr #30
    17bc:	000030a0 	andeq	r3, r0, r0, lsr #1
    17c0:	01f30004 	mvnseq	r0, r4
    17c4:	00009f51 	andeq	r9, r0, r1, asr pc
    17c8:	00000000 	andeq	r0, r0, r0
    17cc:	2ce00000 	stclcs	0, cr0, [r0]
    17d0:	30760000 	rsbscc	r0, r6, r0
    17d4:	00010000 	andeq	r0, r1, r0
    17d8:	00307652 	eorseq	r7, r0, r2, asr r6
    17dc:	0030a000 	eorseq	sl, r0, r0
    17e0:	f3000400 	vshl.u8	d0, d0, d0
    17e4:	009f5201 	addseq	r5, pc, r1, lsl #4
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    17f0:	2800002d 	stmdacs	r0, {r0, r2, r3, r5}
    17f4:	0100002f 	tsteq	r0, pc, lsr #32
    17f8:	00005100 	andeq	r5, r0, r0, lsl #2
    17fc:	00000000 	andeq	r0, r0, r0
    1800:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    1804:	2dac0000 	stccs	0, cr0, [ip]
    1808:	00010000 	andeq	r0, r1, r0
    180c:	00000050 	andeq	r0, r0, r0, asr r0
    1810:	00000000 	andeq	r0, r0, r0
    1814:	002d0e00 	eoreq	r0, sp, r0, lsl #28
    1818:	002d1000 	eoreq	r1, sp, r0
    181c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1828:	00002d5a 	andeq	r2, r0, sl, asr sp
    182c:	00002e30 	andeq	r2, r0, r0, lsr lr
    1830:	00570001 	subseq	r0, r7, r1
    1834:	00000000 	andeq	r0, r0, r0
    1838:	60000000 	andvs	r0, r0, r0
    183c:	3000002d 	andcc	r0, r0, sp, lsr #32
    1840:	0100002e 	tsteq	r0, lr, lsr #32
    1844:	00005700 	andeq	r5, r0, r0, lsl #14
    1848:	00000000 	andeq	r0, r0, r0
    184c:	2d980000 	ldccs	0, cr0, [r8]
    1850:	2dac0000 	stccs	0, cr0, [ip]
    1854:	00010000 	andeq	r0, r1, r0
    1858:	00000050 	andeq	r0, r0, r0, asr r0
    185c:	00000000 	andeq	r0, r0, r0
    1860:	002dea00 	eoreq	lr, sp, r0, lsl #20
    1864:	002e3000 	eoreq	r3, lr, r0
    1868:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1874:	00002e08 	andeq	r2, r0, r8, lsl #28
    1878:	00002e30 	andeq	r2, r0, r0, lsr lr
    187c:	00570001 	subseq	r0, r7, r1
    1880:	00000000 	andeq	r0, r0, r0
    1884:	86000000 	strhi	r0, [r0], -r0
    1888:	9400002e 	strls	r0, [r0], #-46	; 0xffffffd2
    188c:	0100002e 	tsteq	r0, lr, lsr #32
    1890:	00005600 	andeq	r5, r0, r0, lsl #12
    1894:	00000000 	andeq	r0, r0, r0
    1898:	2ede0000 	cdpcs	0, 13, cr0, cr14, cr0, {0}
    189c:	2f880000 	svccs	0x00880000
    18a0:	00010000 	andeq	r0, r1, r0
    18a4:	00000056 	andeq	r0, r0, r6, asr r0
    18a8:	00000000 	andeq	r0, r0, r0
    18ac:	002ee400 	eoreq	lr, lr, r0, lsl #8
    18b0:	002f8800 	eoreq	r8, pc, r0, lsl #16
    18b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    18c0:	00002f18 	andeq	r2, r0, r8, lsl pc
    18c4:	00002f28 	andeq	r2, r0, r8, lsr #30
    18c8:	00510001 	subseq	r0, r1, r1
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	62000000 	andvs	r0, r0, #0
    18d4:	8800002f 	stmdahi	r0, {r0, r1, r2, r3, r5}
    18d8:	0100002f 	tsteq	r0, pc, lsr #32
    18dc:	00005600 	andeq	r5, r0, r0, lsl #12
    18e0:	00000000 	andeq	r0, r0, r0
    18e4:	2f780000 	svccs	0x00780000
    18e8:	2f880000 	svccs	0x00880000
    18ec:	00010000 	andeq	r0, r1, r0
    18f0:	00000056 	andeq	r0, r0, r6, asr r0
    18f4:	00000000 	andeq	r0, r0, r0
    18f8:	002ff600 	eoreq	pc, pc, r0, lsl #12
    18fc:	00300400 	eorseq	r0, r0, r0, lsl #8
    1900:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    190c:	0000303e 	andeq	r3, r0, lr, lsr r0
    1910:	00003076 	andeq	r3, r0, r6, ror r0
    1914:	00520001 	subseq	r0, r2, r1
    1918:	00000000 	andeq	r0, r0, r0
    191c:	74000000 	strvc	r0, [r0], #-0
    1920:	76000030 			; <UNDEFINED> instruction: 0x76000030
    1924:	01000030 	tsteq	r0, r0, lsr r0
    1928:	00005200 	andeq	r5, r0, r0, lsl #4
    192c:	00000000 	andeq	r0, r0, r0
    1930:	00300000 	eorseq	r0, r0, r0
    1934:	003c0000 	eorseq	r0, ip, r0
    1938:	00010000 	andeq	r0, r1, r0
    193c:	00003c50 	andeq	r3, r0, r0, asr ip
    1940:	00004000 	andeq	r4, r0, r0
    1944:	70000400 	andvc	r0, r0, r0, lsl #8
    1948:	409f2000 	addsmi	r2, pc, r0
    194c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1950:	04000000 	streq	r0, [r0], #-0
    1954:	5001f300 	andpl	pc, r1, r0, lsl #6
    1958:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    195c:	00000000 	andeq	r0, r0, r0
    1960:	00003000 	andeq	r3, r0, r0
    1964:	00003c00 	andeq	r3, r0, r0, lsl #24
    1968:	30000200 	andcc	r0, r0, r0, lsl #4
    196c:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1970:	00003e00 	andeq	r3, r0, r0, lsl #28
    1974:	31000200 	mrscc	r0, R8_usr
    1978:	00003e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    197c:	00004000 	andeq	r4, r0, r0
    1980:	32000200 	andcc	r0, r0, #0, 4
    1984:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1988:	00004200 	andeq	r4, r0, r0, lsl #4
    198c:	33000200 	movwcc	r0, #512	; 0x200
    1990:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1994:	00004400 	andeq	r4, r0, r0, lsl #8
    1998:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    199c:	0000449f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    19a0:	00004600 	andeq	r4, r0, r0, lsl #12
    19a4:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    19a8:	0000469f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    19ac:	00004800 	andeq	r4, r0, r0, lsl #16
    19b0:	36000200 	strcc	r0, [r0], -r0, lsl #4
    19b4:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    19b8:	00004a00 	andeq	r4, r0, r0, lsl #20
    19bc:	37000200 	strcc	r0, [r0, -r0, lsl #4]
    19c0:	00004a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    19c4:	00004c00 	andeq	r4, r0, r0, lsl #24
    19c8:	38000200 	stmdacc	r0, {r9}
    19cc:	00004c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    19d0:	00004e00 	andeq	r4, r0, r0, lsl #28
    19d4:	39000200 	stmdbcc	r0, {r9}
    19d8:	00004e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    19dc:	00005000 	andeq	r5, r0, r0
    19e0:	3a000200 	bcc	21e8 <__RW_SIZE__+0x1c54>
    19e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    19e8:	00000000 	andeq	r0, r0, r0
    19ec:	00005000 	andeq	r5, r0, r0
    19f0:	00005e00 	andeq	r5, r0, r0, lsl #28
    19f4:	30000200 	andcc	r0, r0, r0, lsl #4
    19f8:	00005e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    19fc:	00006200 	andeq	r6, r0, r0, lsl #4
    1a00:	31000200 	mrscc	r0, R8_usr
    1a04:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1a08:	00006600 	andeq	r6, r0, r0, lsl #12
    1a0c:	32000200 	andcc	r0, r0, #0, 4
    1a10:	0000669f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1a14:	00006a00 	andeq	r6, r0, r0, lsl #20
    1a18:	33000200 	movwcc	r0, #512	; 0x200
    1a1c:	00006a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1a20:	00006e00 	andeq	r6, r0, r0, lsl #28
    1a24:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1a28:	00006e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1a2c:	00007000 	andeq	r7, r0, r0
    1a30:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    1a34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a38:	00000000 	andeq	r0, r0, r0
    1a3c:	00007000 	andeq	r7, r0, r0
    1a40:	00007e00 	andeq	r7, r0, r0, lsl #28
    1a44:	30000200 	andcc	r0, r0, r0, lsl #4
    1a48:	00007e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1a4c:	00008200 	andeq	r8, r0, r0, lsl #4
    1a50:	31000200 	mrscc	r0, R8_usr
    1a54:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1a58:	00008600 	andeq	r8, r0, r0, lsl #12
    1a5c:	32000200 	andcc	r0, r0, #0, 4
    1a60:	0000869f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1a64:	00008a00 	andeq	r8, r0, r0, lsl #20
    1a68:	33000200 	movwcc	r0, #512	; 0x200
    1a6c:	00008a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1a70:	00008e00 	andeq	r8, r0, r0, lsl #28
    1a74:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1a78:	00008e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1a7c:	00009000 	andeq	r9, r0, r0
    1a80:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    1a84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a88:	00000000 	andeq	r0, r0, r0
    1a8c:	00009000 	andeq	r9, r0, r0
    1a90:	0000a000 	andeq	sl, r0, r0
    1a94:	30000200 	andcc	r0, r0, r0, lsl #4
    1a98:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1a9c:	0000a600 	andeq	sl, r0, r0, lsl #12
    1aa0:	31000200 	mrscc	r0, R8_usr
    1aa4:	0000a69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1aa8:	0000ac00 	andeq	sl, r0, r0, lsl #24
    1aac:	32000200 	andcc	r0, r0, #0, 4
    1ab0:	0000ac9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1ab4:	0000b200 	andeq	fp, r0, r0, lsl #4
    1ab8:	33000200 	movwcc	r0, #512	; 0x200
    1abc:	0000b29f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    1ac0:	0000bc00 	andeq	fp, r0, r0, lsl #24
    1ac4:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1ac8:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    1acc:	0000be00 	andeq	fp, r0, r0, lsl #28
    1ad0:	33000200 	movwcc	r0, #512	; 0x200
    1ad4:	0000fe9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1ad8:	00010200 	andeq	r0, r1, r0, lsl #4
    1adc:	30000200 	andcc	r0, r0, r0, lsl #4
    1ae0:	0001029f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    1ae4:	00010600 	andeq	r0, r1, r0, lsl #12
    1ae8:	31000200 	mrscc	r0, R8_usr
    1aec:	0001069f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    1af0:	00010a00 	andeq	r0, r1, r0, lsl #20
    1af4:	32000200 	andcc	r0, r0, #0, 4
    1af8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1afc:	00000000 	andeq	r0, r0, r0
    1b00:	00010c00 	andeq	r0, r1, r0, lsl #24
    1b04:	00011c00 	andeq	r1, r1, r0, lsl #24
    1b08:	30000200 	andcc	r0, r0, r0, lsl #4
    1b0c:	00011c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1b10:	00012200 	andeq	r2, r1, r0, lsl #4
    1b14:	31000200 	mrscc	r0, R8_usr
    1b18:	0001229f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    1b1c:	00012800 	andeq	r2, r1, r0, lsl #16
    1b20:	32000200 	andcc	r0, r0, #0, 4
    1b24:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1b28:	00012e00 	andeq	r2, r1, r0, lsl #28
    1b2c:	33000200 	movwcc	r0, #512	; 0x200
    1b30:	00012e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    1b34:	00013800 	andeq	r3, r1, r0, lsl #16
    1b38:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1b3c:	0001389f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1b40:	00013a00 	andeq	r3, r1, r0, lsl #20
    1b44:	33000200 	movwcc	r0, #512	; 0x200
    1b48:	00018c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1b4c:	00019000 	andeq	r9, r1, r0
    1b50:	30000200 	andcc	r0, r0, r0, lsl #4
    1b54:	0001909f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1b58:	00019400 	andeq	r9, r1, r0, lsl #8
    1b5c:	31000200 	mrscc	r0, R8_usr
    1b60:	0001949f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
    1b64:	00019800 	andeq	r9, r1, r0, lsl #16
    1b68:	32000200 	andcc	r0, r0, #0, 4
    1b6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	00019800 	andeq	r9, r1, r0, lsl #16
    1b78:	0001ba00 	andeq	fp, r1, r0, lsl #20
    1b7c:	30000200 	andcc	r0, r0, r0, lsl #4
    1b80:	0001ba9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    1b84:	0001e000 	andeq	lr, r1, r0
    1b88:	31000200 	mrscc	r0, R8_usr
    1b8c:	0001e09f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    1b90:	00020600 	andeq	r0, r2, r0, lsl #12
    1b94:	32000200 	andcc	r0, r0, #0, 4
    1b98:	0002069f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    1b9c:	00022a00 	andeq	r2, r2, r0, lsl #20
    1ba0:	33000200 	movwcc	r0, #512	; 0x200
    1ba4:	00022a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    1ba8:	00026200 	andeq	r6, r2, r0, lsl #4
    1bac:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1bb0:	0002649f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    1bb4:	00027a00 	andeq	r7, r2, r0, lsl #20
    1bb8:	33000200 	movwcc	r0, #512	; 0x200
    1bbc:	00027a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    1bc0:	00029000 	andeq	r9, r2, r0
    1bc4:	32000200 	andcc	r0, r0, #0, 4
    1bc8:	0002909f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1bcc:	0002a600 	andeq	sl, r2, r0, lsl #12
    1bd0:	31000200 	mrscc	r0, R8_usr
    1bd4:	0002a69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    1bd8:	0002d000 	andeq	sp, r2, r0
    1bdc:	30000200 	andcc	r0, r0, r0, lsl #4
    1be0:	0002d09f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    1be4:	0002e800 	andeq	lr, r2, r0, lsl #16
    1be8:	31000200 	mrscc	r0, R8_usr
    1bec:	0002e89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    1bf0:	00030000 	andeq	r0, r3, r0
    1bf4:	32000200 	andcc	r0, r0, #0, 4
    1bf8:	0003009f 	muleq	r3, pc, r0	; <UNPREDICTABLE>
    1bfc:	00031800 	andeq	r1, r3, r0, lsl #16
    1c00:	33000200 	movwcc	r0, #512	; 0x200
    1c04:	0003189f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1c08:	00033000 	andeq	r3, r3, r0
    1c0c:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1c10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	00033000 	andeq	r3, r3, r0
    1c1c:	00035200 	andeq	r5, r3, r0, lsl #4
    1c20:	30000200 	andcc	r0, r0, r0, lsl #4
    1c24:	0003529f 	muleq	r3, pc, r2	; <UNPREDICTABLE>
    1c28:	00037400 	andeq	r7, r3, r0, lsl #8
    1c2c:	31000200 	mrscc	r0, R8_usr
    1c30:	0003749f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    1c34:	00039600 	andeq	r9, r3, r0, lsl #12
    1c38:	32000200 	andcc	r0, r0, #0, 4
    1c3c:	0003969f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1c40:	0003b800 	andeq	fp, r3, r0, lsl #16
    1c44:	33000200 	movwcc	r0, #512	; 0x200
    1c48:	0003b89f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    1c4c:	0003da00 	andeq	sp, r3, r0, lsl #20
    1c50:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1c54:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1c60:	0003ee00 	andeq	lr, r3, r0, lsl #28
    1c64:	30000200 	andcc	r0, r0, r0, lsl #4
    1c68:	0003ee9f 	muleq	r3, pc, lr	; <UNPREDICTABLE>
    1c6c:	0003fc00 	andeq	pc, r3, r0, lsl #24
    1c70:	31000200 	mrscc	r0, R8_usr
    1c74:	0003fc9f 	muleq	r3, pc, ip	; <UNPREDICTABLE>
    1c78:	00040c00 	andeq	r0, r4, r0, lsl #24
    1c7c:	32000200 	andcc	r0, r0, #0, 4
    1c80:	00040c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    1c84:	00041c00 	andeq	r1, r4, r0, lsl #24
    1c88:	33000200 	movwcc	r0, #512	; 0x200
    1c8c:	00041c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
    1c90:	00043000 	andeq	r3, r4, r0
    1c94:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1c98:	0004309f 	muleq	r4, pc, r0	; <UNPREDICTABLE>
    1c9c:	00044200 	andeq	r4, r4, r0, lsl #4
    1ca0:	30000200 	andcc	r0, r0, r0, lsl #4
    1ca4:	0004429f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    1ca8:	00046800 	andeq	r6, r4, r0, lsl #16
    1cac:	31000200 	mrscc	r0, R8_usr
    1cb0:	0004689f 	muleq	r4, pc, r8	; <UNPREDICTABLE>
    1cb4:	00048e00 	andeq	r8, r4, r0, lsl #28
    1cb8:	32000200 	andcc	r0, r0, #0, 4
    1cbc:	00048e9f 	muleq	r4, pc, lr	; <UNPREDICTABLE>
    1cc0:	0004b400 	andeq	fp, r4, r0, lsl #8
    1cc4:	33000200 	movwcc	r0, #512	; 0x200
    1cc8:	0004b49f 	muleq	r4, pc, r4	; <UNPREDICTABLE>
    1ccc:	0004da00 	andeq	sp, r4, r0, lsl #20
    1cd0:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    1cd4:	0004da9f 	muleq	r4, pc, sl	; <UNPREDICTABLE>
    1cd8:	0004de00 	andeq	sp, r4, r0, lsl #28
    1cdc:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    1ce0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ce4:	00000000 	andeq	r0, r0, r0
    1ce8:	0004e000 	andeq	lr, r4, r0
    1cec:	0004ee00 	andeq	lr, r4, r0, lsl #28
    1cf0:	30000200 	andcc	r0, r0, r0, lsl #4
    1cf4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	00050400 	andeq	r0, r5, r0, lsl #8
    1d00:	00050e00 	andeq	r0, r5, r0, lsl #28
    1d04:	53000100 	movwpl	r0, #256	; 0x100
    1d08:	0000050e 	andeq	r0, r0, lr, lsl #10
    1d0c:	00000511 	andeq	r0, r0, r1, lsl r5
    1d10:	007d0002 	rsbseq	r0, sp, r2
	...
    1d1c:	00000520 	andeq	r0, r0, r0, lsr #10
    1d20:	0000052e 	andeq	r0, r0, lr, lsr #10
    1d24:	9f300002 	svcls	0x00300002
    1d28:	0000052e 	andeq	r0, r0, lr, lsr #10
    1d2c:	00000532 	andeq	r0, r0, r2, lsr r5
    1d30:	9f310002 	svcls	0x00310002
    1d34:	00000532 	andeq	r0, r0, r2, lsr r5
    1d38:	00000536 	andeq	r0, r0, r6, lsr r5
    1d3c:	9f320002 	svcls	0x00320002
    1d40:	00000536 	andeq	r0, r0, r6, lsr r5
    1d44:	0000053a 	andeq	r0, r0, sl, lsr r5
    1d48:	9f330002 	svcls	0x00330002
    1d4c:	0000053a 	andeq	r0, r0, sl, lsr r5
    1d50:	0000053e 	andeq	r0, r0, lr, lsr r5
    1d54:	9f340002 	svcls	0x00340002
    1d58:	0000053e 	andeq	r0, r0, lr, lsr r5
    1d5c:	00000542 	andeq	r0, r0, r2, asr #10
    1d60:	9f350002 	svcls	0x00350002
    1d64:	00000542 	andeq	r0, r0, r2, asr #10
    1d68:	00000546 	andeq	r0, r0, r6, asr #10
    1d6c:	9f360002 	svcls	0x00360002
    1d70:	00000546 	andeq	r0, r0, r6, asr #10
    1d74:	0000054a 	andeq	r0, r0, sl, asr #10
    1d78:	9f370002 	svcls	0x00370002
    1d7c:	0000054a 	andeq	r0, r0, sl, asr #10
    1d80:	0000054e 	andeq	r0, r0, lr, asr #10
    1d84:	9f380002 	svcls	0x00380002
    1d88:	0000054e 	andeq	r0, r0, lr, asr #10
    1d8c:	00000556 	andeq	r0, r0, r6, asr r5
    1d90:	9f390002 	svcls	0x00390002
    1d94:	00000556 	andeq	r0, r0, r6, asr r5
    1d98:	00000558 	andeq	r0, r0, r8, asr r5
    1d9c:	9f380002 	svcls	0x00380002
    1da0:	0000057a 	andeq	r0, r0, sl, ror r5
    1da4:	0000057e 	andeq	r0, r0, lr, ror r5
    1da8:	9f310002 	svcls	0x00310002
    1dac:	0000057e 	andeq	r0, r0, lr, ror r5
    1db0:	00000582 	andeq	r0, r0, r2, lsl #11
    1db4:	9f320002 	svcls	0x00320002
    1db8:	00000582 	andeq	r0, r0, r2, lsl #11
    1dbc:	00000586 	andeq	r0, r0, r6, lsl #11
    1dc0:	9f330002 	svcls	0x00330002
    1dc4:	00000586 	andeq	r0, r0, r6, lsl #11
    1dc8:	0000058a 	andeq	r0, r0, sl, lsl #11
    1dcc:	9f340002 	svcls	0x00340002
    1dd0:	0000058a 	andeq	r0, r0, sl, lsl #11
    1dd4:	0000058e 	andeq	r0, r0, lr, lsl #11
    1dd8:	9f350002 	svcls	0x00350002
    1ddc:	0000058e 	andeq	r0, r0, lr, lsl #11
    1de0:	00000592 	muleq	r0, r2, r5
    1de4:	9f360002 	svcls	0x00360002
    1de8:	00000592 	muleq	r0, r2, r5
    1dec:	00000596 	muleq	r0, r6, r5
    1df0:	9f370002 	svcls	0x00370002
    1df4:	00000596 	muleq	r0, r6, r5
    1df8:	0000059a 	muleq	r0, sl, r5
    1dfc:	9f390002 	svcls	0x00390002
	...
    1e08:	0000059c 	muleq	r0, ip, r5
    1e0c:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    1e10:	9f300002 	svcls	0x00300002
    1e14:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    1e18:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e1c:	9f310002 	svcls	0x00310002
    1e20:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e24:	000005ea 	andeq	r0, r0, sl, ror #11
    1e28:	9f320002 	svcls	0x00320002
    1e2c:	000005ea 	andeq	r0, r0, sl, ror #11
    1e30:	00000604 	andeq	r0, r0, r4, lsl #12
    1e34:	9f330002 	svcls	0x00330002
    1e38:	00000604 	andeq	r0, r0, r4, lsl #12
    1e3c:	0000061e 	andeq	r0, r0, lr, lsl r6
    1e40:	9f340002 	svcls	0x00340002
    1e44:	0000061e 	andeq	r0, r0, lr, lsl r6
    1e48:	00000638 	andeq	r0, r0, r8, lsr r6
    1e4c:	9f350002 	svcls	0x00350002
    1e50:	00000638 	andeq	r0, r0, r8, lsr r6
    1e54:	00000652 	andeq	r0, r0, r2, asr r6
    1e58:	9f360002 	svcls	0x00360002
    1e5c:	00000652 	andeq	r0, r0, r2, asr r6
    1e60:	0000066c 	andeq	r0, r0, ip, ror #12
    1e64:	9f370002 	svcls	0x00370002
    1e68:	0000066c 	andeq	r0, r0, ip, ror #12
    1e6c:	00000686 	andeq	r0, r0, r6, lsl #13
    1e70:	9f380002 	svcls	0x00380002
    1e74:	00000686 	andeq	r0, r0, r6, lsl #13
    1e78:	000006a0 	andeq	r0, r0, r0, lsr #13
    1e7c:	9f390002 	svcls	0x00390002
	...
    1e88:	000006a4 	andeq	r0, r0, r4, lsr #13
    1e8c:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    1e90:	9f300002 	svcls	0x00300002
    1e94:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
    1e98:	000006c4 	andeq	r0, r0, r4, asr #13
    1e9c:	9f310002 	svcls	0x00310002
    1ea0:	000006c4 	andeq	r0, r0, r4, asr #13
    1ea4:	000006d2 	ldrdeq	r0, [r0], -r2
    1ea8:	9f320002 	svcls	0x00320002
    1eac:	000006d2 	ldrdeq	r0, [r0], -r2
    1eb0:	000006e0 	andeq	r0, r0, r0, ror #13
    1eb4:	9f330002 	svcls	0x00330002
    1eb8:	000006e0 	andeq	r0, r0, r0, ror #13
    1ebc:	000006ee 	andeq	r0, r0, lr, ror #13
    1ec0:	9f340002 	svcls	0x00340002
    1ec4:	000006ee 	andeq	r0, r0, lr, ror #13
    1ec8:	000006fc 	strdeq	r0, [r0], -ip
    1ecc:	9f350002 	svcls	0x00350002
    1ed0:	000006fc 	strdeq	r0, [r0], -ip
    1ed4:	0000070a 	andeq	r0, r0, sl, lsl #14
    1ed8:	9f360002 	svcls	0x00360002
    1edc:	0000070a 	andeq	r0, r0, sl, lsl #14
    1ee0:	0000071a 	andeq	r0, r0, sl, lsl r7
    1ee4:	9f370002 	svcls	0x00370002
    1ee8:	0000071a 	andeq	r0, r0, sl, lsl r7
    1eec:	0000072a 	andeq	r0, r0, sl, lsr #14
    1ef0:	9f380002 	svcls	0x00380002
    1ef4:	0000072a 	andeq	r0, r0, sl, lsr #14
    1ef8:	0000073e 	andeq	r0, r0, lr, lsr r7
    1efc:	9f390002 	svcls	0x00390002
    1f00:	0000073e 	andeq	r0, r0, lr, lsr r7
    1f04:	00000750 	andeq	r0, r0, r0, asr r7
    1f08:	9f300002 	svcls	0x00300002
    1f0c:	00000750 	andeq	r0, r0, r0, asr r7
    1f10:	00000770 	andeq	r0, r0, r0, ror r7
    1f14:	9f310002 	svcls	0x00310002
    1f18:	00000770 	andeq	r0, r0, r0, ror r7
    1f1c:	00000790 	muleq	r0, r0, r7
    1f20:	9f320002 	svcls	0x00320002
    1f24:	00000790 	muleq	r0, r0, r7
    1f28:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    1f2c:	9f330002 	svcls	0x00330002
    1f30:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
    1f34:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f38:	9f340002 	svcls	0x00340002
    1f3c:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f40:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f44:	9f350002 	svcls	0x00350002
    1f48:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f4c:	00000810 	andeq	r0, r0, r0, lsl r8
    1f50:	9f360002 	svcls	0x00360002
    1f54:	00000810 	andeq	r0, r0, r0, lsl r8
    1f58:	00000832 	andeq	r0, r0, r2, lsr r8
    1f5c:	9f370002 	svcls	0x00370002
    1f60:	00000832 	andeq	r0, r0, r2, lsr r8
    1f64:	00000854 	andeq	r0, r0, r4, asr r8
    1f68:	9f380002 	svcls	0x00380002
    1f6c:	00000854 	andeq	r0, r0, r4, asr r8
    1f70:	00000876 	andeq	r0, r0, r6, ror r8
    1f74:	9f390002 	svcls	0x00390002
    1f78:	00000876 	andeq	r0, r0, r6, ror r8
    1f7c:	0000087a 	andeq	r0, r0, sl, ror r8
    1f80:	9f3a0002 	svcls	0x003a0002
	...
    1f8c:	000008ac 	andeq	r0, r0, ip, lsr #17
    1f90:	000008ae 	andeq	r0, r0, lr, lsr #17
    1f94:	9f300002 	svcls	0x00300002
    1f98:	000008ae 	andeq	r0, r0, lr, lsr #17
    1f9c:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    1fa0:	9f310002 	svcls	0x00310002
    1fa4:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    1fa8:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    1fac:	9f320002 	svcls	0x00320002
    1fb0:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
    1fb4:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    1fb8:	9f330002 	svcls	0x00330002
    1fbc:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    1fc0:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    1fc4:	9f340002 	svcls	0x00340002
    1fc8:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
    1fcc:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1fd0:	9f350002 	svcls	0x00350002
    1fd4:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1fd8:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    1fdc:	9f360002 	svcls	0x00360002
    1fe0:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
    1fe4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    1fe8:	9f370002 	svcls	0x00370002
    1fec:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    1ff0:	000008be 			; <UNDEFINED> instruction: 0x000008be
    1ff4:	9f380002 	svcls	0x00380002
    1ff8:	000008be 			; <UNDEFINED> instruction: 0x000008be
    1ffc:	000008c0 	andeq	r0, r0, r0, asr #17
    2000:	9f390002 	svcls	0x00390002
    2004:	000008c0 	andeq	r0, r0, r0, asr #17
    2008:	000008ea 	andeq	r0, r0, sl, ror #17
    200c:	9f3a0002 	svcls	0x003a0002
	...
    2018:	000008c0 	andeq	r0, r0, r0, asr #17
    201c:	000008c4 	andeq	r0, r0, r4, asr #17
    2020:	9f300002 	svcls	0x00300002
    2024:	000008c4 	andeq	r0, r0, r4, asr #17
    2028:	000008c8 	andeq	r0, r0, r8, asr #17
    202c:	9f310002 	svcls	0x00310002
    2030:	000008c8 	andeq	r0, r0, r8, asr #17
    2034:	000008cc 	andeq	r0, r0, ip, asr #17
    2038:	9f320002 	svcls	0x00320002
    203c:	000008cc 	andeq	r0, r0, ip, asr #17
    2040:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2044:	9f330002 	svcls	0x00330002
    2048:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    204c:	000008d4 	ldrdeq	r0, [r0], -r4
    2050:	9f340002 	svcls	0x00340002
    2054:	000008d4 	ldrdeq	r0, [r0], -r4
    2058:	000008ea 	andeq	r0, r0, sl, ror #17
    205c:	9f350002 	svcls	0x00350002
	...
    2068:	000008d4 	ldrdeq	r0, [r0], -r4
    206c:	000008d8 	ldrdeq	r0, [r0], -r8
    2070:	9f300002 	svcls	0x00300002
    2074:	000008d8 	ldrdeq	r0, [r0], -r8
    2078:	000008dc 	ldrdeq	r0, [r0], -ip
    207c:	9f310002 	svcls	0x00310002
    2080:	000008dc 	ldrdeq	r0, [r0], -ip
    2084:	000008e0 	andeq	r0, r0, r0, ror #17
    2088:	9f320002 	svcls	0x00320002
    208c:	000008e0 	andeq	r0, r0, r0, ror #17
    2090:	000008e4 	andeq	r0, r0, r4, ror #17
    2094:	9f330002 	svcls	0x00330002
    2098:	000008e4 	andeq	r0, r0, r4, ror #17
    209c:	000008e8 	andeq	r0, r0, r8, ror #17
    20a0:	9f340002 	svcls	0x00340002
    20a4:	000008e8 	andeq	r0, r0, r8, ror #17
    20a8:	000008ea 	andeq	r0, r0, sl, ror #17
    20ac:	9f350002 	svcls	0x00350002
	...
    20b8:	000008ec 	andeq	r0, r0, ip, ror #17
    20bc:	000008fa 	strdeq	r0, [r0], -sl
    20c0:	fa500001 	blx	14020cc <__RW_SIZE__+0x1401b38>
    20c4:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    20c8:	04000009 	streq	r0, [r0], #-9
    20cc:	5001f300 	andpl	pc, r1, r0, lsl #6
    20d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	0008ec00 	andeq	lr, r8, r0, lsl #24
    20dc:	0008fe00 	andeq	pc, r8, r0, lsl #28
    20e0:	52000100 	andpl	r0, r0, #0, 2
    20e4:	000008fe 	strdeq	r0, [r0], -lr
    20e8:	00000904 	andeq	r0, r0, r4, lsl #18
    20ec:	01f30004 	mvnseq	r0, r4
    20f0:	09049f52 	stmdbeq	r4, {r1, r4, r6, r8, r9, sl, fp, ip, pc}
    20f4:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    20f8:	00010000 	andeq	r0, r1, r0
    20fc:	00090652 	andeq	r0, r9, r2, asr r6
    2100:	00091e00 	andeq	r1, r9, r0, lsl #28
    2104:	f3000400 	vshl.u8	d0, d0, d0
    2108:	009f5201 	addseq	r5, pc, r1, lsl #4
    210c:	00000000 	andeq	r0, r0, r0
    2110:	ec000000 	stc	0, cr0, [r0], {-0}
    2114:	12000008 	andne	r0, r0, #8
    2118:	01000009 	tsteq	r0, r9
    211c:	09125300 	ldmdbeq	r2, {r8, r9, ip, lr}
    2120:	091e0000 	ldmdbeq	lr, {}	; <UNPREDICTABLE>
    2124:	00040000 	andeq	r0, r4, r0
    2128:	9f5301f3 	svcls	0x005301f3
	...
    2134:	000008ec 	andeq	r0, r0, ip, ror #17
    2138:	00000900 	andeq	r0, r0, r0, lsl #18
    213c:	00910002 	addseq	r0, r1, r2
    2140:	00000900 	andeq	r0, r0, r0, lsl #18
    2144:	00000904 	andeq	r0, r0, r4, lsl #18
    2148:	007d0002 	rsbseq	r0, sp, r2
    214c:	00000904 	andeq	r0, r0, r4, lsl #18
    2150:	00000914 	andeq	r0, r0, r4, lsl r9
    2154:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
    2158:	00000914 	andeq	r0, r0, r4, lsl r9
    215c:	0000091e 	andeq	r0, r0, lr, lsl r9
    2160:	007d0002 	rsbseq	r0, sp, r2
	...
    216c:	000008ec 	andeq	r0, r0, ip, ror #17
    2170:	00000900 	andeq	r0, r0, r0, lsl #18
    2174:	04910002 	ldreq	r0, [r1], #2
    2178:	00000900 	andeq	r0, r0, r0, lsl #18
    217c:	00000904 	andeq	r0, r0, r4, lsl #18
    2180:	047d0002 	ldrbteq	r0, [sp], #-2
    2184:	00000904 	andeq	r0, r0, r4, lsl #18
    2188:	00000914 	andeq	r0, r0, r4, lsl r9
    218c:	107d0002 	rsbsne	r0, sp, r2
    2190:	00000914 	andeq	r0, r0, r4, lsl r9
    2194:	0000091e 	andeq	r0, r0, lr, lsl r9
    2198:	047d0002 	ldrbteq	r0, [sp], #-2
	...
    21a4:	000008ec 	andeq	r0, r0, ip, ror #17
    21a8:	00000900 	andeq	r0, r0, r0, lsl #18
    21ac:	08910002 	ldmeq	r1, {r1}
    21b0:	00000900 	andeq	r0, r0, r0, lsl #18
    21b4:	00000904 	andeq	r0, r0, r4, lsl #18
    21b8:	087d0002 	ldmdaeq	sp!, {r1}^
    21bc:	00000904 	andeq	r0, r0, r4, lsl #18
    21c0:	00000914 	andeq	r0, r0, r4, lsl r9
    21c4:	147d0002 	ldrbtne	r0, [sp], #-2
    21c8:	00000914 	andeq	r0, r0, r4, lsl r9
    21cc:	0000091e 	andeq	r0, r0, lr, lsl r9
    21d0:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    21dc:	000008ec 	andeq	r0, r0, ip, ror #17
    21e0:	00000900 	andeq	r0, r0, r0, lsl #18
    21e4:	0c910002 	ldceq	0, cr0, [r1], {2}
    21e8:	00000900 	andeq	r0, r0, r0, lsl #18
    21ec:	00000904 	andeq	r0, r0, r4, lsl #18
    21f0:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
    21f4:	00000904 	andeq	r0, r0, r4, lsl #18
    21f8:	00000914 	andeq	r0, r0, r4, lsl r9
    21fc:	187d0002 	ldmdane	sp!, {r1}^
    2200:	00000914 	andeq	r0, r0, r4, lsl r9
    2204:	0000091e 	andeq	r0, r0, lr, lsl r9
    2208:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
	...
    2214:	00000984 	andeq	r0, r0, r4, lsl #19
    2218:	00000992 	muleq	r0, r2, r9
    221c:	9f300002 	svcls	0x00300002
    2220:	00000992 	muleq	r0, r2, r9
    2224:	00000996 	muleq	r0, r6, r9
    2228:	9f310002 	svcls	0x00310002
    222c:	00000996 	muleq	r0, r6, r9
    2230:	0000099a 	muleq	r0, sl, r9
    2234:	9f320002 	svcls	0x00320002
    2238:	0000099a 	muleq	r0, sl, r9
    223c:	0000099e 	muleq	r0, lr, r9
    2240:	9f330002 	svcls	0x00330002
    2244:	0000099e 	muleq	r0, lr, r9
    2248:	000009a2 	andeq	r0, r0, r2, lsr #19
    224c:	9f340002 	svcls	0x00340002
    2250:	000009a2 	andeq	r0, r0, r2, lsr #19
    2254:	000009a4 	andeq	r0, r0, r4, lsr #19
    2258:	9f300002 	svcls	0x00300002
    225c:	000009a4 	andeq	r0, r0, r4, lsr #19
    2260:	000009a6 	andeq	r0, r0, r6, lsr #19
    2264:	9f310002 	svcls	0x00310002
    2268:	000009a6 	andeq	r0, r0, r6, lsr #19
    226c:	000009a8 	andeq	r0, r0, r8, lsr #19
    2270:	9f320002 	svcls	0x00320002
    2274:	000009a8 	andeq	r0, r0, r8, lsr #19
    2278:	000009aa 	andeq	r0, r0, sl, lsr #19
    227c:	9f330002 	svcls	0x00330002
    2280:	000009aa 	andeq	r0, r0, sl, lsr #19
    2284:	000009ac 	andeq	r0, r0, ip, lsr #19
    2288:	9f340002 	svcls	0x00340002
    228c:	000009ac 	andeq	r0, r0, ip, lsr #19
    2290:	000009ae 	andeq	r0, r0, lr, lsr #19
    2294:	9f350002 	svcls	0x00350002
    2298:	000009ae 	andeq	r0, r0, lr, lsr #19
    229c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    22a0:	9f360002 	svcls	0x00360002
    22a4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    22a8:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    22ac:	9f370002 	svcls	0x00370002
    22b0:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    22b4:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    22b8:	9f380002 	svcls	0x00380002
    22bc:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    22c0:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    22c4:	9f390002 	svcls	0x00390002
    22c8:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    22cc:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    22d0:	9f3a0002 	svcls	0x003a0002
	...
    22dc:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    22e0:	000009fc 	strdeq	r0, [r0], -ip
    22e4:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    22e8:	08000009 	stmdaeq	r0, {r0, r3}
    22ec:	0300000a 	movweq	r0, #10
    22f0:	9f7a7000 	svcls	0x007a7000
    22f4:	00000a08 	andeq	r0, r0, r8, lsl #20
    22f8:	00000a28 	andeq	r0, r0, r8, lsr #20
    22fc:	00500001 	subseq	r0, r0, r1
    2300:	00000000 	andeq	r0, r0, r0
    2304:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2308:	fe000009 	cdp2	0, 0, cr0, cr0, cr9, {0}
    230c:	01000009 	tsteq	r0, r9
    2310:	09fe5100 	ldmibeq	lr!, {r8, ip, lr}^
    2314:	0a080000 	beq	20231c <__RW_SIZE__+0x201d88>
    2318:	00030000 	andeq	r0, r3, r0
    231c:	089f7071 	ldmeq	pc, {r0, r4, r5, r6, ip, sp, lr}	; <UNPREDICTABLE>
    2320:	2800000a 	stmdacs	r0, {r1, r3}
    2324:	0100000a 	tsteq	r0, sl
    2328:	00005100 	andeq	r5, r0, r0, lsl #2
    232c:	00000000 	andeq	r0, r0, r0
    2330:	09b80000 	ldmibeq	r8!, {}	; <UNPREDICTABLE>
    2334:	09c60000 	stmibeq	r6, {}^	; <UNPREDICTABLE>
    2338:	00020000 	andeq	r0, r2, r0
    233c:	09c69f30 	stmibeq	r6, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2340:	09ca0000 	stmibeq	sl, {}^	; <UNPREDICTABLE>
    2344:	00020000 	andeq	r0, r2, r0
    2348:	09ca9f31 	stmibeq	sl, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
    234c:	09ce0000 	stmibeq	lr, {}^	; <UNPREDICTABLE>
    2350:	00020000 	andeq	r0, r2, r0
    2354:	09ce9f32 	stmibeq	lr, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    2358:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
    235c:	00020000 	andeq	r0, r2, r0
    2360:	09d29f33 	ldmibeq	r2, {r0, r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    2364:	09d60000 	ldmibeq	r6, {}^	; <UNPREDICTABLE>
    2368:	00020000 	andeq	r0, r2, r0
    236c:	09d69f34 	ldmibeq	r6, {r2, r4, r5, r8, r9, sl, fp, ip, pc}^
    2370:	09da0000 	ldmibeq	sl, {}^	; <UNPREDICTABLE>
    2374:	00020000 	andeq	r0, r2, r0
    2378:	09da9f35 	ldmibeq	sl, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}^
    237c:	09de0000 	ldmibeq	lr, {}^	; <UNPREDICTABLE>
    2380:	00020000 	andeq	r0, r2, r0
    2384:	09de9f36 	ldmibeq	lr, {r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}^
    2388:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
    238c:	00020000 	andeq	r0, r2, r0
    2390:	09e29f37 	stmibeq	r2!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}^
    2394:	09e60000 	stmibeq	r6!, {}^	; <UNPREDICTABLE>
    2398:	00020000 	andeq	r0, r2, r0
    239c:	09e69f38 	stmibeq	r6!, {r3, r4, r5, r8, r9, sl, fp, ip, pc}^
    23a0:	09ee0000 	stmibeq	lr!, {}^	; <UNPREDICTABLE>
    23a4:	00020000 	andeq	r0, r2, r0
    23a8:	09ee9f39 	stmibeq	lr!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, pc}^
    23ac:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
    23b0:	00020000 	andeq	r0, r2, r0
    23b4:	0a089f38 	beq	22a09c <__RW_SIZE__+0x229b08>
    23b8:	0a0c0000 	beq	3023c0 <__RW_SIZE__+0x301e2c>
    23bc:	00020000 	andeq	r0, r2, r0
    23c0:	0a0c9f31 	beq	32a08c <__RW_SIZE__+0x329af8>
    23c4:	0a100000 	beq	4023cc <__RW_SIZE__+0x401e38>
    23c8:	00020000 	andeq	r0, r2, r0
    23cc:	0a109f32 	beq	42a09c <__RW_SIZE__+0x429b08>
    23d0:	0a140000 	beq	5023d8 <__RW_SIZE__+0x501e44>
    23d4:	00020000 	andeq	r0, r2, r0
    23d8:	0a149f33 	beq	52a0ac <__RW_SIZE__+0x529b18>
    23dc:	0a180000 	beq	6023e4 <__RW_SIZE__+0x601e50>
    23e0:	00020000 	andeq	r0, r2, r0
    23e4:	0a189f34 	beq	62a0bc <__RW_SIZE__+0x629b28>
    23e8:	0a1c0000 	beq	7023f0 <__RW_SIZE__+0x701e5c>
    23ec:	00020000 	andeq	r0, r2, r0
    23f0:	0a1c9f35 	beq	72a0cc <__RW_SIZE__+0x729b38>
    23f4:	0a200000 	beq	8023fc <__RW_SIZE__+0x801e68>
    23f8:	00020000 	andeq	r0, r2, r0
    23fc:	0a209f36 	beq	82a0dc <__RW_SIZE__+0x829b48>
    2400:	0a240000 	beq	902408 <__RW_SIZE__+0x901e74>
    2404:	00020000 	andeq	r0, r2, r0
    2408:	0a249f37 	beq	92a0ec <__RW_SIZE__+0x929b58>
    240c:	0a280000 	beq	a02414 <__RW_SIZE__+0xa01e80>
    2410:	00020000 	andeq	r0, r2, r0
    2414:	00009f39 	andeq	r9, r0, r9, lsr pc
    2418:	00000000 	andeq	r0, r0, r0
    241c:	0a280000 	beq	a02424 <__RW_SIZE__+0xa01e90>
    2420:	0ad60000 	beq	ff582428 <MSP_BASE+0xdf57d428>
    2424:	00020000 	andeq	r0, r2, r0
    2428:	0c4e9f30 	mcrreq	15, 3, r9, lr, cr0
    242c:	0c620000 	stcleq	0, cr0, [r2], #-0
    2430:	00020000 	andeq	r0, r2, r0
    2434:	0c629f30 	stcleq	15, cr9, [r2], #-192	; 0xffffff40
    2438:	0c820000 	stceq	0, cr0, [r2], {0}
    243c:	00020000 	andeq	r0, r2, r0
    2440:	0c829f31 	stceq	15, cr9, [r2], {49}	; 0x31
    2444:	0ca20000 	stceq	0, cr0, [r2]
    2448:	00020000 	andeq	r0, r2, r0
    244c:	0ca29f32 	stceq	15, cr9, [r2], #200	; 0xc8
    2450:	0cc00000 	stcleq	0, cr0, [r0], {0}
    2454:	00020000 	andeq	r0, r2, r0
    2458:	0cc09f33 	stcleq	15, cr9, [r0], {51}	; 0x33
    245c:	0cde0000 	ldcleq	0, cr0, [lr], {0}
    2460:	00020000 	andeq	r0, r2, r0
    2464:	0cde9f34 	ldcleq	15, cr9, [lr], {52}	; 0x34
    2468:	0cfa0000 	ldcleq	0, cr0, [sl]
    246c:	00020000 	andeq	r0, r2, r0
    2470:	0d829f35 	stceq	15, cr9, [r2, #212]	; 0xd4
    2474:	0da00000 	stceq	0, cr0, [r0]
    2478:	00020000 	andeq	r0, r2, r0
    247c:	0da09f34 	stceq	15, cr9, [r0, #208]!	; 0xd0
    2480:	0dbe0000 	ldceq	0, cr0, [lr]
    2484:	00020000 	andeq	r0, r2, r0
    2488:	0dbe9f33 	ldceq	15, cr9, [lr, #204]!	; 0xcc
    248c:	0de40000 	stcleq	0, cr0, [r4]
    2490:	00020000 	andeq	r0, r2, r0
    2494:	0de49f32 	stcleq	15, cr9, [r4, #200]!	; 0xc8
    2498:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    249c:	00020000 	andeq	r0, r2, r0
    24a0:	0e0a9f31 	mcreq	15, 0, r9, cr10, cr1, {1}
    24a4:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    24a8:	00020000 	andeq	r0, r2, r0
    24ac:	00009f30 	andeq	r9, r0, r0, lsr pc
    24b0:	00000000 	andeq	r0, r0, r0
    24b4:	0adc0000 	beq	ff7024bc <MSP_BASE+0xdf6fd4bc>
    24b8:	0b020000 	bleq	824c0 <__RW_SIZE__+0x81f2c>
    24bc:	00020000 	andeq	r0, r2, r0
    24c0:	0b029f30 	bleq	aa188 <__RW_SIZE__+0xa9bf4>
    24c4:	0b200000 	bleq	8024cc <__RW_SIZE__+0x801f38>
    24c8:	00020000 	andeq	r0, r2, r0
    24cc:	0b209f31 	bleq	82a198 <__RW_SIZE__+0x829c04>
    24d0:	0b3e0000 	bleq	f824d8 <__RW_SIZE__+0xf81f44>
    24d4:	00020000 	andeq	r0, r2, r0
    24d8:	0b3e9f32 	bleq	faa1a8 <__RW_SIZE__+0xfa9c14>
    24dc:	0b620000 	bleq	18824e4 <__RW_SIZE__+0x1881f50>
    24e0:	00020000 	andeq	r0, r2, r0
    24e4:	0b629f33 	bleq	18aa1b8 <__RW_SIZE__+0x18a9c24>
    24e8:	0b940000 	bleq	fe5024f0 <MSP_BASE+0xde4fd4f0>
    24ec:	00020000 	andeq	r0, r2, r0
    24f0:	0d349f34 	ldceq	15, cr9, [r4, #-208]!	; 0xffffff30
    24f4:	0d440000 	stcleq	0, cr0, [r4, #-0]
    24f8:	00020000 	andeq	r0, r2, r0
    24fc:	0d449f33 	stcleq	15, cr9, [r4, #-204]	; 0xffffff34
    2500:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    2504:	00020000 	andeq	r0, r2, r0
    2508:	0d589f32 	ldcleq	15, cr9, [r8, #-200]	; 0xffffff38
    250c:	0d6c0000 	stcleq	0, cr0, [ip, #-0]
    2510:	00020000 	andeq	r0, r2, r0
    2514:	0d6c9f31 	stcleq	15, cr9, [ip, #-196]!	; 0xffffff3c
    2518:	0d820000 	stceq	0, cr0, [r2]
    251c:	00020000 	andeq	r0, r2, r0
    2520:	00009f30 	andeq	r9, r0, r0, lsr pc
    2524:	00000000 	andeq	r0, r0, r0
    2528:	0aec0000 	beq	ffb02530 <MSP_BASE+0xdfafd530>
    252c:	0b020000 	bleq	82534 <__RW_SIZE__+0x81fa0>
    2530:	00020000 	andeq	r0, r2, r0
    2534:	0b0c9f40 	bleq	32a23c <__RW_SIZE__+0x329ca8>
    2538:	0b200000 	bleq	802540 <__RW_SIZE__+0x801fac>
    253c:	00020000 	andeq	r0, r2, r0
    2540:	0b2a9f40 	bleq	aaa248 <__RW_SIZE__+0xaa9cb4>
    2544:	0b3e0000 	bleq	f8254c <__RW_SIZE__+0xf81fb8>
    2548:	00020000 	andeq	r0, r2, r0
    254c:	0b4c9f40 	bleq	132a254 <__RW_SIZE__+0x1329cc0>
    2550:	0b620000 	bleq	1882558 <__RW_SIZE__+0x1881fc4>
    2554:	00020000 	andeq	r0, r2, r0
    2558:	0b709f40 	bleq	1c2a260 <__RW_SIZE__+0x1c29ccc>
    255c:	0b940000 	bleq	fe502564 <MSP_BASE+0xde4fd564>
    2560:	00020000 	andeq	r0, r2, r0
    2564:	0d349f40 	ldceq	15, cr9, [r4, #-256]!	; 0xffffff00
    2568:	0d820000 	stceq	0, cr0, [r2]
    256c:	00020000 	andeq	r0, r2, r0
    2570:	00009f40 	andeq	r9, r0, r0, asr #30
    2574:	00000000 	andeq	r0, r0, r0
    2578:	0aec0000 	beq	ffb02580 <MSP_BASE+0xdfafd580>
    257c:	0b020000 	bleq	82584 <__RW_SIZE__+0x81ff0>
    2580:	00050000 	andeq	r0, r5, r0
    2584:	00062003 	andeq	r2, r6, r3
    2588:	000b0c20 	andeq	r0, fp, r0, lsr #24
    258c:	000b2000 	andeq	r2, fp, r0
    2590:	03000500 	movweq	r0, #1280	; 0x500
    2594:	20000634 	andcs	r0, r0, r4, lsr r6
    2598:	00000b2a 	andeq	r0, r0, sl, lsr #22
    259c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    25a0:	48030005 	stmdami	r3, {r0, r2}
    25a4:	4c200006 	stcmi	0, cr0, [r0], #-24	; 0xffffffe8
    25a8:	6200000b 	andvs	r0, r0, #11
    25ac:	0500000b 	streq	r0, [r0, #-11]
    25b0:	065c0300 	ldrbeq	r0, [ip], -r0, lsl #6
    25b4:	0b702000 	bleq	1c0a5bc <__RW_SIZE__+0x1c0a028>
    25b8:	0b940000 	bleq	fe5025c0 <MSP_BASE+0xde4fd5c0>
    25bc:	00050000 	andeq	r0, r5, r0
    25c0:	00067003 	andeq	r7, r6, r3
    25c4:	000d3420 	andeq	r3, sp, r0, lsr #8
    25c8:	000d4400 	andeq	r4, sp, r0, lsl #8
    25cc:	03000500 	movweq	r0, #1280	; 0x500
    25d0:	2000065c 	andcs	r0, r0, ip, asr r6
    25d4:	00000d44 	andeq	r0, r0, r4, asr #26
    25d8:	00000d58 	andeq	r0, r0, r8, asr sp
    25dc:	48030005 	stmdami	r3, {r0, r2}
    25e0:	58200006 	stmdapl	r0!, {r1, r2}
    25e4:	6c00000d 	stcvs	0, cr0, [r0], {13}
    25e8:	0500000d 	streq	r0, [r0, #-13]
    25ec:	06340300 	ldrteq	r0, [r4], -r0, lsl #6
    25f0:	0d6c2000 	stcleq	0, cr2, [ip, #-0]
    25f4:	0d820000 	stceq	0, cr0, [r2]
    25f8:	00050000 	andeq	r0, r5, r0
    25fc:	00062003 	andeq	r2, r6, r3
    2600:	00000020 	andeq	r0, r0, r0, lsr #32
    2604:	00000000 	andeq	r0, r0, r0
    2608:	000aec00 	andeq	lr, sl, r0, lsl #24
    260c:	000b0200 	andeq	r0, fp, r0, lsl #4
    2610:	03000500 	movweq	r0, #1280	; 0x500
    2614:	2000061c 	andcs	r0, r0, ip, lsl r6
    2618:	00000b0c 	andeq	r0, r0, ip, lsl #22
    261c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2620:	30030005 	andcc	r0, r3, r5
    2624:	2a200006 	bcs	802644 <__RW_SIZE__+0x8020b0>
    2628:	3e00000b 	cdpcc	0, 0, cr0, cr0, cr11, {0}
    262c:	0500000b 	streq	r0, [r0, #-11]
    2630:	06440300 	strbeq	r0, [r4], -r0, lsl #6
    2634:	0b4c2000 	bleq	130a63c <__RW_SIZE__+0x130a0a8>
    2638:	0b620000 	bleq	1882640 <__RW_SIZE__+0x18820ac>
    263c:	00050000 	andeq	r0, r5, r0
    2640:	00065803 	andeq	r5, r6, r3, lsl #16
    2644:	000b7020 	andeq	r7, fp, r0, lsr #32
    2648:	000b9400 	andeq	r9, fp, r0, lsl #8
    264c:	03000500 	movweq	r0, #1280	; 0x500
    2650:	2000066c 	andcs	r0, r0, ip, ror #12
    2654:	00000d34 	andeq	r0, r0, r4, lsr sp
    2658:	00000d44 	andeq	r0, r0, r4, asr #26
    265c:	58030005 	stmdapl	r3, {r0, r2}
    2660:	44200006 	strtmi	r0, [r0], #-6
    2664:	5800000d 	stmdapl	r0, {r0, r2, r3}
    2668:	0500000d 	streq	r0, [r0, #-13]
    266c:	06440300 	strbeq	r0, [r4], -r0, lsl #6
    2670:	0d582000 	ldcleq	0, cr2, [r8, #-0]
    2674:	0d6c0000 	stcleq	0, cr0, [ip, #-0]
    2678:	00050000 	andeq	r0, r5, r0
    267c:	00063003 	andeq	r3, r6, r3
    2680:	000d6c20 	andeq	r6, sp, r0, lsr #24
    2684:	000d8200 	andeq	r8, sp, r0, lsl #4
    2688:	03000500 	movweq	r0, #1280	; 0x500
    268c:	2000061c 	andcs	r0, r0, ip, lsl r6
	...
    2698:	00000aec 	andeq	r0, r0, ip, ror #21
    269c:	00000b02 	andeq	r0, r0, r2, lsl #22
    26a0:	9f380002 	svcls	0x00380002
    26a4:	00000b0c 	andeq	r0, r0, ip, lsl #22
    26a8:	00000b20 	andeq	r0, r0, r0, lsr #22
    26ac:	9f380002 	svcls	0x00380002
    26b0:	00000b2a 	andeq	r0, r0, sl, lsr #22
    26b4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    26b8:	9f380002 	svcls	0x00380002
    26bc:	00000b4c 	andeq	r0, r0, ip, asr #22
    26c0:	00000b62 	andeq	r0, r0, r2, ror #22
    26c4:	9f380002 	svcls	0x00380002
    26c8:	00000b70 	andeq	r0, r0, r0, ror fp
    26cc:	00000b94 	muleq	r0, r4, fp
    26d0:	9f380002 	svcls	0x00380002
    26d4:	00000d34 	andeq	r0, r0, r4, lsr sp
    26d8:	00000d82 	andeq	r0, r0, r2, lsl #27
    26dc:	9f380002 	svcls	0x00380002
	...
    26e8:	00000aec 	andeq	r0, r0, ip, ror #21
    26ec:	00000b02 	andeq	r0, r0, r2, lsl #22
    26f0:	9f340002 	svcls	0x00340002
    26f4:	00000b0c 	andeq	r0, r0, ip, lsl #22
    26f8:	00000b20 	andeq	r0, r0, r0, lsr #22
    26fc:	9f340002 	svcls	0x00340002
    2700:	00000b2a 	andeq	r0, r0, sl, lsr #22
    2704:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2708:	9f340002 	svcls	0x00340002
    270c:	00000b4c 	andeq	r0, r0, ip, asr #22
    2710:	00000b62 	andeq	r0, r0, r2, ror #22
    2714:	9f340002 	svcls	0x00340002
    2718:	00000b70 	andeq	r0, r0, r0, ror fp
    271c:	00000b94 	muleq	r0, r4, fp
    2720:	9f340002 	svcls	0x00340002
    2724:	00000d34 	andeq	r0, r0, r4, lsr sp
    2728:	00000d82 	andeq	r0, r0, r2, lsl #27
    272c:	9f340002 	svcls	0x00340002
	...
    2738:	00000aec 	andeq	r0, r0, ip, ror #21
    273c:	00000b02 	andeq	r0, r0, r2, lsl #22
    2740:	0c550001 	mrrceq	0, 0, r0, r5, cr1
    2744:	2000000b 	andcs	r0, r0, fp
    2748:	0100000b 	tsteq	r0, fp
    274c:	0b2a5a00 	bleq	a98f54 <__RW_SIZE__+0xa989c0>
    2750:	0b3e0000 	bleq	f82758 <__RW_SIZE__+0xf821c4>
    2754:	00010000 	andeq	r0, r1, r0
    2758:	000b4c5a 	andeq	r4, fp, sl, asr ip
    275c:	000b6200 	andeq	r6, fp, r0, lsl #4
    2760:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2764:	00000b70 	andeq	r0, r0, r0, ror fp
    2768:	00000b94 	muleq	r0, r4, fp
    276c:	34550001 	ldrbcc	r0, [r5], #-1
    2770:	4400000d 	strmi	r0, [r0], #-13
    2774:	0100000d 	tsteq	r0, sp
    2778:	0d445500 	cfstr64eq	mvdx5, [r4, #-0]
    277c:	0d4a0000 	stcleq	0, cr0, [sl, #-0]
    2780:	00010000 	andeq	r0, r1, r0
    2784:	000d4a5a 	andeq	r4, sp, sl, asr sl
    2788:	000d5400 	andeq	r5, sp, r0, lsl #8
    278c:	73000200 	movwvc	r0, #512	; 0x200
    2790:	000d547c 	andeq	r5, sp, ip, ror r4
    2794:	000d5800 	andeq	r5, sp, r0, lsl #16
    2798:	7a000300 	bvc	33a0 <__RW_SIZE__+0x2e0c>
    279c:	0d589f78 	ldcleq	15, cr9, [r8, #-480]	; 0xfffffe20
    27a0:	0d5e0000 	ldcleq	0, cr0, [lr, #-0]
    27a4:	00010000 	andeq	r0, r1, r0
    27a8:	000d5e5a 	andeq	r5, sp, sl, asr lr
    27ac:	000d6800 	andeq	r6, sp, r0, lsl #16
    27b0:	73000200 	movwvc	r0, #512	; 0x200
    27b4:	000d687c 	andeq	r6, sp, ip, ror r8
    27b8:	000d6c00 	andeq	r6, sp, r0, lsl #24
    27bc:	7a000300 	bvc	33c4 <__RW_SIZE__+0x2e30>
    27c0:	0d6c9f78 	stcleq	15, cr9, [ip, #-480]!	; 0xfffffe20
    27c4:	0d820000 	stceq	0, cr0, [r2]
    27c8:	00010000 	andeq	r0, r1, r0
    27cc:	00000055 	andeq	r0, r0, r5, asr r0
    27d0:	00000000 	andeq	r0, r0, r0
    27d4:	000aec00 	andeq	lr, sl, r0, lsl #24
    27d8:	000af400 	andeq	pc, sl, r0, lsl #8
    27dc:	50000100 	andpl	r0, r0, r0, lsl #2
    27e0:	00000af4 	strdeq	r0, [r0], -r4
    27e4:	00000b02 	andeq	r0, r0, r2, lsl #22
    27e8:	78730002 	ldmdavc	r3!, {r1}^
    27ec:	00000b0c 	andeq	r0, r0, ip, lsl #22
    27f0:	00000b14 	andeq	r0, r0, r4, lsl fp
    27f4:	14500001 	ldrbne	r0, [r0], #-1
    27f8:	2000000b 	andcs	r0, r0, fp
    27fc:	0200000b 	andeq	r0, r0, #11
    2800:	2a787300 	bcs	1e1f408 <__RW_SIZE__+0x1e1ee74>
    2804:	3200000b 	andcc	r0, r0, #11
    2808:	0100000b 	tsteq	r0, fp
    280c:	0b325000 	bleq	c96814 <__RW_SIZE__+0xc96280>
    2810:	0b3e0000 	bleq	f82818 <__RW_SIZE__+0xf82284>
    2814:	00020000 	andeq	r0, r2, r0
    2818:	0b4c7873 	bleq	13209ec <__RW_SIZE__+0x1320458>
    281c:	0b540000 	bleq	1502824 <__RW_SIZE__+0x1502290>
    2820:	00010000 	andeq	r0, r1, r0
    2824:	000b5450 	andeq	r5, fp, r0, asr r4
    2828:	000b6200 	andeq	r6, fp, r0, lsl #4
    282c:	73000200 	movwvc	r0, #512	; 0x200
    2830:	000b7078 	andeq	r7, fp, r8, ror r0
    2834:	000b7800 	andeq	r7, fp, r0, lsl #16
    2838:	50000100 	andpl	r0, r0, r0, lsl #2
    283c:	00000b78 	andeq	r0, r0, r8, ror fp
    2840:	00000b92 	muleq	r0, r2, fp
    2844:	78730002 	ldmdavc	r3!, {r1}^
    2848:	00000d34 	andeq	r0, r0, r4, lsr sp
    284c:	00000d42 	andeq	r0, r0, r2, asr #26
    2850:	78730002 	ldmdavc	r3!, {r1}^
    2854:	00000d44 	andeq	r0, r0, r4, asr #26
    2858:	00000d54 	andeq	r0, r0, r4, asr sp
    285c:	78730002 	ldmdavc	r3!, {r1}^
    2860:	00000d58 	andeq	r0, r0, r8, asr sp
    2864:	00000d68 	andeq	r0, r0, r8, ror #26
    2868:	78730002 	ldmdavc	r3!, {r1}^
    286c:	00000d6c 	andeq	r0, r0, ip, ror #26
    2870:	00000d7e 	andeq	r0, r0, lr, ror sp
    2874:	78730002 	ldmdavc	r3!, {r1}^
	...
    2880:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2884:	00000c20 	andeq	r0, r0, r0, lsr #24
    2888:	9f3a0002 	svcls	0x003a0002
    288c:	00000e30 	andeq	r0, r0, r0, lsr lr
    2890:	00000e58 	andeq	r0, r0, r8, asr lr
    2894:	9f3a0002 	svcls	0x003a0002
	...
    28a0:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    28a4:	00000c20 	andeq	r0, r0, r0, lsr #24
    28a8:	305b0001 	subscc	r0, fp, r1
    28ac:	5800000e 	stmdapl	r0, {r1, r2, r3}
    28b0:	0100000e 	tsteq	r0, lr
    28b4:	00005b00 	andeq	r5, r0, r0, lsl #22
    28b8:	00000000 	andeq	r0, r0, r0
    28bc:	0bf00000 	bleq	ffc028c4 <MSP_BASE+0xdfbfd8c4>
    28c0:	0c000000 	stceq	0, cr0, [r0], {-0}
    28c4:	00010000 	andeq	r0, r1, r0
    28c8:	000c0054 	andeq	r0, ip, r4, asr r0
    28cc:	000c2000 	andeq	r2, ip, r0
    28d0:	73000200 	movwvc	r0, #512	; 0x200
    28d4:	000e3000 	andeq	r3, lr, r0
    28d8:	000e5800 	andeq	r5, lr, r0, lsl #16
    28dc:	73000200 	movwvc	r0, #512	; 0x200
	...
    28e8:	000bf000 	andeq	pc, fp, r0
    28ec:	000c2000 	andeq	r2, ip, r0
    28f0:	40000200 	andmi	r0, r0, r0, lsl #4
    28f4:	000e309f 	muleq	lr, pc, r0	; <UNPREDICTABLE>
    28f8:	000e5800 	andeq	r5, lr, r0, lsl #16
    28fc:	40000200 	andmi	r0, r0, r0, lsl #4
    2900:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2904:	00000000 	andeq	r0, r0, r0
    2908:	000bf000 	andeq	pc, fp, r0
    290c:	000c2000 	andeq	r2, ip, r0
    2910:	03000500 	movweq	r0, #1280	; 0x500
    2914:	20000008 	andcs	r0, r0, r8
    2918:	00000e30 	andeq	r0, r0, r0, lsr lr
    291c:	00000e58 	andeq	r0, r0, r8, asr lr
    2920:	08030005 	stmdaeq	r3, {r0, r2}
    2924:	00200000 	eoreq	r0, r0, r0
    2928:	00000000 	andeq	r0, r0, r0
    292c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    2930:	2000000b 	andcs	r0, r0, fp
    2934:	0500000c 	streq	r0, [r0, #-12]
    2938:	00040300 	andeq	r0, r4, r0, lsl #6
    293c:	0e302000 	cdpeq	0, 3, cr2, cr0, cr0, {0}
    2940:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
    2944:	00050000 	andeq	r0, r5, r0
    2948:	00000403 	andeq	r0, r0, r3, lsl #8
    294c:	00000020 	andeq	r0, r0, r0, lsr #32
    2950:	00000000 	andeq	r0, r0, r0
    2954:	000c5800 	andeq	r5, ip, r0, lsl #16
    2958:	000c6200 	andeq	r6, ip, r0, lsl #4
    295c:	40000200 	andmi	r0, r0, r0, lsl #4
    2960:	000c789f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
    2964:	000c8200 	andeq	r8, ip, r0, lsl #4
    2968:	40000200 	andmi	r0, r0, r0, lsl #4
    296c:	000c989f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
    2970:	000ca200 	andeq	sl, ip, r0, lsl #4
    2974:	40000200 	andmi	r0, r0, r0, lsl #4
    2978:	000cb89f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
    297c:	000cc000 	andeq	ip, ip, r0
    2980:	40000200 	andmi	r0, r0, r0, lsl #4
    2984:	000cd69f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
    2988:	000cde00 	andeq	sp, ip, r0, lsl #28
    298c:	40000200 	andmi	r0, r0, r0, lsl #4
    2990:	000d829f 	muleq	sp, pc, r2	; <UNPREDICTABLE>
    2994:	000e3000 	andeq	r3, lr, r0
    2998:	40000200 	andmi	r0, r0, r0, lsl #4
    299c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    29a0:	00000000 	andeq	r0, r0, r0
    29a4:	000c5800 	andeq	r5, ip, r0, lsl #16
    29a8:	000c6200 	andeq	r6, ip, r0, lsl #4
    29ac:	5a000100 	bpl	2db4 <__RW_SIZE__+0x2820>
    29b0:	00000c78 	andeq	r0, r0, r8, ror ip
    29b4:	00000c82 	andeq	r0, r0, r2, lsl #25
    29b8:	985a0001 	ldmdals	sl, {r0}^
    29bc:	a200000c 	andge	r0, r0, #12
    29c0:	0100000c 	tsteq	r0, ip
    29c4:	0cb85a00 	vldmiaeq	r8!, {s10-s9}
    29c8:	0cc00000 	stcleq	0, cr0, [r0], {0}
    29cc:	00010000 	andeq	r0, r1, r0
    29d0:	000cd65a 	andeq	sp, ip, sl, asr r6
    29d4:	000cde00 	andeq	sp, ip, r0, lsl #28
    29d8:	59000100 	stmdbpl	r0, {r8}
    29dc:	00000d82 	andeq	r0, r0, r2, lsl #27
    29e0:	00000da0 	andeq	r0, r0, r0, lsr #27
    29e4:	a0590001 	subsge	r0, r9, r1
    29e8:	3000000d 	andcc	r0, r0, sp
    29ec:	0100000e 	tsteq	r0, lr
    29f0:	00005a00 	andeq	r5, r0, r0, lsl #20
    29f4:	00000000 	andeq	r0, r0, r0
    29f8:	0c580000 	mraeq	r0, r8, acc0
    29fc:	0c620000 	stcleq	0, cr0, [r2], #-0
    2a00:	00010000 	andeq	r0, r1, r0
    2a04:	000c7854 	andeq	r7, ip, r4, asr r8
    2a08:	000c8200 	andeq	r8, ip, r0, lsl #4
    2a0c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a10:	00000c98 	muleq	r0, r8, ip
    2a14:	00000ca2 	andeq	r0, r0, r2, lsr #25
    2a18:	b8540001 	ldmdalt	r4, {r0}^
    2a1c:	c000000c 	andgt	r0, r0, ip
    2a20:	0100000c 	tsteq	r0, ip
    2a24:	0cd65400 	cfldrdeq	mvd5, [r6], {0}
    2a28:	0cde0000 	ldcleq	0, cr0, [lr], {0}
    2a2c:	00010000 	andeq	r0, r1, r0
    2a30:	000d8254 	andeq	r8, sp, r4, asr r2
    2a34:	000da800 	andeq	sl, sp, r0, lsl #16
    2a38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a3c:	00000da8 	andeq	r0, r0, r8, lsr #27
    2a40:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
    2a44:	58030005 	stmdapl	r3, {r0, r2}
    2a48:	be200006 	cdplt	0, 2, cr0, cr0, cr6, {0}
    2a4c:	c800000d 	stmdagt	r0, {r0, r2, r3}
    2a50:	0100000d 	tsteq	r0, sp
    2a54:	0dc85400 	cfstrdeq	mvd5, [r8]
    2a58:	0de40000 	stcleq	0, cr0, [r4]
    2a5c:	00050000 	andeq	r0, r5, r0
    2a60:	00064403 	andeq	r4, r6, r3, lsl #8
    2a64:	000de420 	andeq	lr, sp, r0, lsr #8
    2a68:	000dee00 	andeq	lr, sp, r0, lsl #28
    2a6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a70:	00000dee 	andeq	r0, r0, lr, ror #27
    2a74:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2a78:	30030005 	andcc	r0, r3, r5
    2a7c:	0a200006 	beq	802a9c <__RW_SIZE__+0x802508>
    2a80:	1400000e 	strne	r0, [r0], #-14
    2a84:	0100000e 	tsteq	r0, lr
    2a88:	0e145400 	cfmulseq	mvf5, mvf4, mvf0
    2a8c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    2a90:	00050000 	andeq	r0, r5, r0
    2a94:	00061c03 	andeq	r1, r6, r3, lsl #24
    2a98:	00000020 	andeq	r0, r0, r0, lsr #32
    2a9c:	00000000 	andeq	r0, r0, r0
    2aa0:	000c5800 	andeq	r5, ip, r0, lsl #16
    2aa4:	000c6200 	andeq	r6, ip, r0, lsl #4
    2aa8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2aac:	00000c78 	andeq	r0, r0, r8, ror ip
    2ab0:	00000c82 	andeq	r0, r0, r2, lsl #25
    2ab4:	08030005 	stmdaeq	r3, {r0, r2}
    2ab8:	98200000 	stmdals	r0!, {}	; <UNPREDICTABLE>
    2abc:	a200000c 	andge	r0, r0, #12
    2ac0:	0500000c 	streq	r0, [r0, #-12]
    2ac4:	00080300 	andeq	r0, r8, r0, lsl #6
    2ac8:	0cb82000 	ldceq	0, cr2, [r8]
    2acc:	0cc00000 	stcleq	0, cr0, [r0], {0}
    2ad0:	00050000 	andeq	r0, r5, r0
    2ad4:	00000803 	andeq	r0, r0, r3, lsl #16
    2ad8:	000cd620 	andeq	sp, ip, r0, lsr #12
    2adc:	000cde00 	andeq	sp, ip, r0, lsl #28
    2ae0:	03000500 	movweq	r0, #1280	; 0x500
    2ae4:	20000008 	andcs	r0, r0, r8
    2ae8:	00000d82 	andeq	r0, r0, r2, lsl #27
    2aec:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2af0:	08030005 	stmdaeq	r3, {r0, r2}
    2af4:	0a200000 	beq	802afc <__RW_SIZE__+0x802568>
    2af8:	3000000e 	andcc	r0, r0, lr
    2afc:	0100000e 	tsteq	r0, lr
    2b00:	00005500 	andeq	r5, r0, r0, lsl #10
    2b04:	00000000 	andeq	r0, r0, r0
    2b08:	0c580000 	mraeq	r0, r8, acc0
    2b0c:	0c620000 	stcleq	0, cr0, [r2], #-0
    2b10:	00010000 	andeq	r0, r1, r0
    2b14:	000c7853 	andeq	r7, ip, r3, asr r8
    2b18:	000c8200 	andeq	r8, ip, r0, lsl #4
    2b1c:	03000500 	movweq	r0, #1280	; 0x500
    2b20:	20000004 	andcs	r0, r0, r4
    2b24:	00000c98 	muleq	r0, r8, ip
    2b28:	00000ca2 	andeq	r0, r0, r2, lsr #25
    2b2c:	04030005 	streq	r0, [r3], #-5
    2b30:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
    2b34:	c000000c 	andgt	r0, r0, ip
    2b38:	0500000c 	streq	r0, [r0, #-12]
    2b3c:	00040300 	andeq	r0, r4, r0, lsl #6
    2b40:	0cd62000 	ldcleq	0, cr2, [r6], {0}
    2b44:	0cde0000 	ldcleq	0, cr0, [lr], {0}
    2b48:	00050000 	andeq	r0, r5, r0
    2b4c:	00000403 	andeq	r0, r0, r3, lsl #8
    2b50:	000d8220 	andeq	r8, sp, r0, lsr #4
    2b54:	000e0a00 	andeq	r0, lr, r0, lsl #20
    2b58:	03000500 	movweq	r0, #1280	; 0x500
    2b5c:	20000004 	andcs	r0, r0, r4
    2b60:	00000e0a 	andeq	r0, r0, sl, lsl #28
    2b64:	00000e30 	andeq	r0, r0, r0, lsr lr
    2b68:	00530001 	subseq	r0, r3, r1
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	02000000 	andeq	r0, r0, #0
    2b74:	2000000d 	andcs	r0, r0, sp
    2b78:	0200000d 	andeq	r0, r0, #13
    2b7c:	009f3800 	addseq	r3, pc, r0, lsl #16
    2b80:	00000000 	andeq	r0, r0, r0
    2b84:	02000000 	andeq	r0, r0, #0
    2b88:	2000000d 	andcs	r0, r0, sp
    2b8c:	0200000d 	andeq	r0, r0, #13
    2b90:	009f3400 	addseq	r3, pc, r0, lsl #8
    2b94:	00000000 	andeq	r0, r0, r0
    2b98:	02000000 	andeq	r0, r0, #0
    2b9c:	2000000d 	andcs	r0, r0, sp
    2ba0:	0100000d 	tsteq	r0, sp
    2ba4:	00005b00 	andeq	r5, r0, r0, lsl #22
    2ba8:	00000000 	andeq	r0, r0, r0
    2bac:	0d020000 	stceq	0, cr0, [r2, #-0]
    2bb0:	0d200000 	stceq	0, cr0, [r0, #-0]
    2bb4:	00010000 	andeq	r0, r1, r0
    2bb8:	00000054 	andeq	r0, r0, r4, asr r0
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	000d0200 	andeq	r0, sp, r0, lsl #4
    2bc4:	000d2000 	andeq	r2, sp, r0
    2bc8:	40000200 	andmi	r0, r0, r0, lsl #4
    2bcc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2bd0:	00000000 	andeq	r0, r0, r0
    2bd4:	000d0200 	andeq	r0, sp, r0, lsl #4
    2bd8:	000d2000 	andeq	r2, sp, r0
    2bdc:	03000500 	movweq	r0, #1280	; 0x500
    2be0:	20000008 	andcs	r0, r0, r8
	...
    2bec:	00000d02 	andeq	r0, r0, r2, lsl #26
    2bf0:	00000d20 	andeq	r0, r0, r0, lsr #26
    2bf4:	04030005 	streq	r0, [r3], #-5
    2bf8:	00200000 	eoreq	r0, r0, r0
    2bfc:	00000000 	andeq	r0, r0, r0
    2c00:	e2000000 	and	r0, r0, #0
    2c04:	3a00000e 	bcc	2c44 <__RW_SIZE__+0x26b0>
    2c08:	01000012 	tsteq	r0, r2, lsl r0
    2c0c:	12be5500 	adcsne	r5, lr, #0, 10
    2c10:	13740000 	cmnne	r4, #0
    2c14:	00010000 	andeq	r0, r1, r0
    2c18:	0013d455 	andseq	sp, r3, r5, asr r4
    2c1c:	00140200 	andseq	r0, r4, r0, lsl #4
    2c20:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2c24:	0000140e 	andeq	r1, r0, lr, lsl #8
    2c28:	00001486 	andeq	r1, r0, r6, lsl #9
    2c2c:	c6550001 	ldrbgt	r0, [r5], -r1
    2c30:	e6000014 			; <UNDEFINED> instruction: 0xe6000014
    2c34:	01000014 	tsteq	r0, r4, lsl r0
    2c38:	14fe5500 	ldrbtne	r5, [lr], #1280	; 0x500
    2c3c:	15000000 	strne	r0, [r0, #-0]
    2c40:	00010000 	andeq	r0, r1, r0
    2c44:	0015a855 	andseq	sl, r5, r5, asr r8
    2c48:	0015aa00 	andseq	sl, r5, r0, lsl #20
    2c4c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2c50:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    2c54:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    2c58:	b8550001 	ldmdalt	r5, {r0}^
    2c5c:	ba000015 	blt	2cb8 <__RW_SIZE__+0x2724>
    2c60:	01000015 	tsteq	r0, r5, lsl r0
    2c64:	00005500 	andeq	r5, r0, r0, lsl #10
    2c68:	00000000 	andeq	r0, r0, r0
    2c6c:	0eea0000 	cdpeq	0, 14, cr0, cr10, cr0, {0}
    2c70:	120d0000 	andne	r0, sp, #0
    2c74:	00010000 	andeq	r0, r1, r0
    2c78:	0012c250 	andseq	ip, r2, r0, asr r2
    2c7c:	00137400 	andseq	r7, r3, r0, lsl #8
    2c80:	50000100 	andpl	r0, r0, r0, lsl #2
    2c84:	0000140e 	andeq	r1, r0, lr, lsl #8
    2c88:	00001486 	andeq	r1, r0, r6, lsl #9
    2c8c:	c6500001 	ldrbgt	r0, [r0], -r1
    2c90:	e6000014 			; <UNDEFINED> instruction: 0xe6000014
    2c94:	01000014 	tsteq	r0, r4, lsl r0
    2c98:	00005000 	andeq	r5, r0, r0
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	0efc0000 	cdpeq	0, 15, cr0, cr12, cr0, {0}
    2ca4:	0f120000 	svceq	0x00120000
    2ca8:	00020000 	andeq	r0, r2, r0
    2cac:	0f129f30 	svceq	0x00129f30
    2cb0:	0f680000 	svceq	0x00680000
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	00135c52 	andseq	r5, r3, r2, asr ip
    2cbc:	00137400 	andseq	r7, r3, r0, lsl #8
    2cc0:	52000100 	andpl	r0, r0, #0, 2
    2cc4:	000014c6 	andeq	r1, r0, r6, asr #9
    2cc8:	000014e6 	andeq	r1, r0, r6, ror #9
    2ccc:	00520001 	subseq	r0, r2, r1
    2cd0:	00000000 	andeq	r0, r0, r0
    2cd4:	12000000 	andne	r0, r0, #0
    2cd8:	1a00000f 	bne	2d1c <__RW_SIZE__+0x2788>
    2cdc:	0200000f 	andeq	r0, r0, #15
    2ce0:	1a9f3000 	bne	fe7cece8 <MSP_BASE+0xde7c9ce8>
    2ce4:	2200000f 	andcs	r0, r0, #15
    2ce8:	0200000f 	andeq	r0, r0, #15
    2cec:	229f3100 	addscs	r3, pc, #0, 2
    2cf0:	2a00000f 	bcs	2d34 <__RW_SIZE__+0x27a0>
    2cf4:	0200000f 	andeq	r0, r0, #15
    2cf8:	2a9f3200 	bcs	fe7cf500 <MSP_BASE+0xde7ca500>
    2cfc:	3200000f 	andcc	r0, r0, #15
    2d00:	0200000f 	andeq	r0, r0, #15
    2d04:	329f3300 	addscc	r3, pc, #0, 6
    2d08:	3a00000f 	bcc	2d4c <__RW_SIZE__+0x27b8>
    2d0c:	0200000f 	andeq	r0, r0, #15
    2d10:	3a9f3400 	bcc	fe7cfd18 <MSP_BASE+0xde7cad18>
    2d14:	4200000f 	andmi	r0, r0, #15
    2d18:	0200000f 	andeq	r0, r0, #15
    2d1c:	429f3500 	addsmi	r3, pc, #0, 10
    2d20:	4a00000f 	bmi	2d64 <__RW_SIZE__+0x27d0>
    2d24:	0200000f 	andeq	r0, r0, #15
    2d28:	4a9f3600 	bmi	fe7d0530 <MSP_BASE+0xde7cb530>
    2d2c:	5200000f 	andpl	r0, r0, #15
    2d30:	0200000f 	andeq	r0, r0, #15
    2d34:	529f3700 	addspl	r3, pc, #0, 14
    2d38:	5a00000f 	bpl	2d7c <__RW_SIZE__+0x27e8>
    2d3c:	0200000f 	andeq	r0, r0, #15
    2d40:	5a9f3800 	bpl	fe7d0d48 <MSP_BASE+0xde7cbd48>
    2d44:	6200000f 	andvs	r0, r0, #15
    2d48:	0200000f 	andeq	r0, r0, #15
    2d4c:	5c9f3900 	ldcpl	9, cr3, [pc], {0}
    2d50:	5e000013 	mcrpl	0, 0, r0, cr0, cr3, {0}
    2d54:	02000013 	andeq	r0, r0, #19
    2d58:	c69f3900 	ldrgt	r3, [pc], r0, lsl #18
    2d5c:	ca000014 	bgt	2db4 <__RW_SIZE__+0x2820>
    2d60:	02000014 	andeq	r0, r0, #20
    2d64:	ca9f3100 	bgt	fe7cf16c <MSP_BASE+0xde7ca16c>
    2d68:	ce000014 	mcrgt	0, 0, r0, cr0, cr4, {0}
    2d6c:	02000014 	andeq	r0, r0, #20
    2d70:	ce9f3200 	cdpgt	2, 9, cr3, cr15, cr0, {0}
    2d74:	d2000014 	andle	r0, r0, #20
    2d78:	02000014 	andeq	r0, r0, #20
    2d7c:	d29f3300 	addsle	r3, pc, #0, 6
    2d80:	d6000014 			; <UNDEFINED> instruction: 0xd6000014
    2d84:	02000014 	andeq	r0, r0, #20
    2d88:	d69f3400 	ldrle	r3, [pc], r0, lsl #8
    2d8c:	da000014 	ble	2de4 <__RW_SIZE__+0x2850>
    2d90:	02000014 	andeq	r0, r0, #20
    2d94:	da9f3500 	ble	fe7d019c <MSP_BASE+0xde7cb19c>
    2d98:	de000014 	mcrle	0, 0, r0, cr0, cr4, {0}
    2d9c:	02000014 	andeq	r0, r0, #20
    2da0:	de9f3600 	cdple	6, 9, cr3, cr15, cr0, {0}
    2da4:	e2000014 	and	r0, r0, #20
    2da8:	02000014 	andeq	r0, r0, #20
    2dac:	e29f3700 	adds	r3, pc, #0, 14
    2db0:	e6000014 			; <UNDEFINED> instruction: 0xe6000014
    2db4:	02000014 	andeq	r0, r0, #20
    2db8:	009f3800 	addseq	r3, pc, r0, lsl #16
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    2dc4:	a800000f 	stmdage	r0, {r0, r1, r2, r3}
    2dc8:	0200000f 	andeq	r0, r0, #15
    2dcc:	a89f3000 	ldmge	pc, {ip, sp}	; <UNPREDICTABLE>
    2dd0:	c200000f 	andgt	r0, r0, #15
    2dd4:	0200000f 	andeq	r0, r0, #15
    2dd8:	c29f3100 	addsgt	r3, pc, #0, 2
    2ddc:	dc00000f 	stcle	0, cr0, [r0], {15}
    2de0:	0200000f 	andeq	r0, r0, #15
    2de4:	dc9f3200 	lfmle	f3, 4, [pc], {0}
    2de8:	f600000f 			; <UNDEFINED> instruction: 0xf600000f
    2dec:	0200000f 	andeq	r0, r0, #15
    2df0:	f69f3300 			; <UNDEFINED> instruction: 0xf69f3300
    2df4:	1000000f 	andne	r0, r0, pc
    2df8:	02000010 	andeq	r0, r0, #16
    2dfc:	109f3400 	addsne	r3, pc, r0, lsl #8
    2e00:	2a000010 	bcs	2e48 <__RW_SIZE__+0x28b4>
    2e04:	02000010 	andeq	r0, r0, #16
    2e08:	2a9f3500 	bcs	fe7d0210 <MSP_BASE+0xde7cb210>
    2e0c:	44000010 	strmi	r0, [r0], #-16
    2e10:	02000010 	andeq	r0, r0, #16
    2e14:	449f3600 	ldrmi	r3, [pc], #1536	; 2e1c <__RW_SIZE__+0x2888>
    2e18:	5e000010 	mcrpl	0, 0, r0, cr0, cr0, {0}
    2e1c:	02000010 	andeq	r0, r0, #16
    2e20:	5e9f3700 	cdppl	7, 9, cr3, cr15, cr0, {0}
    2e24:	78000010 	stmdavc	r0, {r4}
    2e28:	02000010 	andeq	r0, r0, #16
    2e2c:	789f3800 	ldmvc	pc, {fp, ip, sp}	; <UNPREDICTABLE>
    2e30:	92000010 	andls	r0, r0, #16
    2e34:	02000010 	andeq	r0, r0, #16
    2e38:	929f3900 	addsls	r3, pc, #0, 18
    2e3c:	be000010 	mcrlt	0, 0, r0, cr0, cr0, {0}
    2e40:	02000012 	andeq	r0, r0, #18
    2e44:	c29f3a00 	addsgt	r3, pc, #0, 20
    2e48:	2c000012 	stccs	0, cr0, [r0], {18}
    2e4c:	02000013 	andeq	r0, r0, #19
    2e50:	749f3a00 	ldrvc	r3, [pc], #2560	; 2e58 <__RW_SIZE__+0x28c4>
    2e54:	86000013 			; <UNDEFINED> instruction: 0x86000013
    2e58:	02000014 	andeq	r0, r0, #20
    2e5c:	e69f3a00 	ldr	r3, [pc], r0, lsl #20
    2e60:	bc000014 	stclt	0, cr0, [r0], {20}
    2e64:	02000015 	andeq	r0, r0, #21
    2e68:	009f3a00 	addseq	r3, pc, r0, lsl #20
    2e6c:	00000000 	andeq	r0, r0, r0
    2e70:	92000000 	andls	r0, r0, #0
    2e74:	b8000010 	stmdalt	r0, {r4}
    2e78:	02000010 	andeq	r0, r0, #16
    2e7c:	b89f3000 	ldmlt	pc, {ip, sp}	; <UNPREDICTABLE>
    2e80:	e2000010 	and	r0, r0, #16
    2e84:	02000010 	andeq	r0, r0, #16
    2e88:	e29f3100 	adds	r3, pc, #0, 2
    2e8c:	0c000010 	stceq	0, cr0, [r0], {16}
    2e90:	02000011 	andeq	r0, r0, #17
    2e94:	0c9f3200 	lfmeq	f3, 4, [pc], {0}
    2e98:	36000011 			; <UNDEFINED> instruction: 0x36000011
    2e9c:	02000011 	andeq	r0, r0, #17
    2ea0:	369f3300 	ldrcc	r3, [pc], r0, lsl #6
    2ea4:	60000011 	andvs	r0, r0, r1, lsl r0
    2ea8:	02000011 	andeq	r0, r0, #17
    2eac:	609f3400 	addsvs	r3, pc, r0, lsl #8
    2eb0:	be000011 	mcrlt	0, 0, r0, cr0, cr1, {0}
    2eb4:	02000012 	andeq	r0, r0, #18
    2eb8:	c29f3500 	addsgt	r3, pc, #0, 10
    2ebc:	d8000012 	stmdale	r0, {r1, r4}
    2ec0:	02000012 	andeq	r0, r0, #18
    2ec4:	d89f3400 	ldmle	pc, {sl, ip, sp}	; <UNPREDICTABLE>
    2ec8:	ee000012 	mcr	0, 0, r0, cr0, cr2, {0}
    2ecc:	02000012 	andeq	r0, r0, #18
    2ed0:	ee9f3300 	cdp	3, 9, cr3, cr15, cr0, {0}
    2ed4:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    2ed8:	02000013 	andeq	r0, r0, #19
    2edc:	049f3200 	ldreq	r3, [pc], #512	; 2ee4 <__RW_SIZE__+0x2950>
    2ee0:	1a000013 	bne	2f34 <__RW_SIZE__+0x29a0>
    2ee4:	02000013 	andeq	r0, r0, #19
    2ee8:	1a9f3100 	bne	fe7cf2f0 <MSP_BASE+0xde7ca2f0>
    2eec:	2c000013 	stccs	0, cr0, [r0], {19}
    2ef0:	02000013 	andeq	r0, r0, #19
    2ef4:	749f3000 	ldrvc	r3, [pc], #0	; 2efc <__RW_SIZE__+0x2968>
    2ef8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2efc:	02000014 	andeq	r0, r0, #20
    2f00:	0e9f3500 	cdpeq	5, 9, cr3, cr15, cr0, {0}
    2f04:	26000014 			; <UNDEFINED> instruction: 0x26000014
    2f08:	02000014 	andeq	r0, r0, #20
    2f0c:	269f3000 	ldrcs	r3, [pc], r0
    2f10:	3e000014 	mcrcc	0, 0, r0, cr0, cr4, {0}
    2f14:	02000014 	andeq	r0, r0, #20
    2f18:	3e9f3100 	fmlcce	f3, f7, f0
    2f1c:	56000014 			; <UNDEFINED> instruction: 0x56000014
    2f20:	02000014 	andeq	r0, r0, #20
    2f24:	569f3200 	ldrpl	r3, [pc], r0, lsl #4
    2f28:	6e000014 	mcrvs	0, 0, r0, cr0, cr4, {0}
    2f2c:	02000014 	andeq	r0, r0, #20
    2f30:	6e9f3300 	cdpvs	3, 9, cr3, cr15, cr0, {0}
    2f34:	86000014 			; <UNDEFINED> instruction: 0x86000014
    2f38:	02000014 	andeq	r0, r0, #20
    2f3c:	e69f3400 	ldr	r3, [pc], r0, lsl #8
    2f40:	bc000014 	stclt	0, cr0, [r0], {20}
    2f44:	02000015 	andeq	r0, r0, #21
    2f48:	009f3500 	addseq	r3, pc, r0, lsl #10
    2f4c:	00000000 	andeq	r0, r0, r0
    2f50:	60000000 	andvs	r0, r0, r0
    2f54:	82000011 	andhi	r0, r0, #17
    2f58:	02000011 	andeq	r0, r0, #17
    2f5c:	829f3000 	addshi	r3, pc, #0
    2f60:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
    2f64:	02000011 	andeq	r0, r0, #17
    2f68:	a49f3100 	ldrge	r3, [pc], #256	; 2f70 <__RW_SIZE__+0x29dc>
    2f6c:	c6000011 			; <UNDEFINED> instruction: 0xc6000011
    2f70:	02000011 	andeq	r0, r0, #17
    2f74:	c69f3200 	ldrgt	r3, [pc], r0, lsl #4
    2f78:	e8000011 	stmda	r0, {r0, r4}
    2f7c:	02000011 	andeq	r0, r0, #17
    2f80:	e89f3300 	ldm	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
    2f84:	0a000011 	beq	2fd0 <__RW_SIZE__+0x2a3c>
    2f88:	02000012 	andeq	r0, r0, #18
    2f8c:	0a9f3400 	beq	fe7cff94 <MSP_BASE+0xde7caf94>
    2f90:	be000012 	mcrlt	0, 0, r0, cr0, cr2, {0}
    2f94:	02000012 	andeq	r0, r0, #18
    2f98:	749f3500 	ldrvc	r3, [pc], #1280	; 2fa0 <__RW_SIZE__+0x2a0c>
    2f9c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2fa0:	02000014 	andeq	r0, r0, #20
    2fa4:	e69f3500 	ldr	r3, [pc], r0, lsl #10
    2fa8:	bc000014 	stclt	0, cr0, [r0], {20}
    2fac:	02000015 	andeq	r0, r0, #21
    2fb0:	009f3500 	addseq	r3, pc, r0, lsl #10
    2fb4:	00000000 	andeq	r0, r0, r0
    2fb8:	64000000 	strvs	r0, [r0], #-0
    2fbc:	b0000012 	andlt	r0, r0, r2, lsl r0
    2fc0:	01000012 	tsteq	r0, r2, lsl r0
    2fc4:	13745500 	cmnne	r4, #0, 10
    2fc8:	13820000 	orrne	r0, r2, #0
    2fcc:	00010000 	andeq	r0, r1, r0
    2fd0:	00138255 	andseq	r8, r3, r5, asr r2
    2fd4:	00139000 	andseq	r9, r3, r0
    2fd8:	73000200 	movwvc	r0, #512	; 0x200
    2fdc:	0014e67c 	andseq	lr, r4, ip, ror r6
    2fe0:	0014fe00 	andseq	pc, r4, r0, lsl #28
    2fe4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2fe8:	0000159c 	muleq	r0, ip, r5
    2fec:	000015a4 	andeq	r1, r0, r4, lsr #11
    2ff0:	00550001 	subseq	r0, r5, r1
    2ff4:	00000000 	andeq	r0, r0, r0
    2ff8:	64000000 	strvs	r0, [r0], #-0
    2ffc:	b0000012 	andlt	r0, r0, r2, lsl r0
    3000:	01000012 	tsteq	r0, r2, lsl r0
    3004:	13745700 	cmnne	r4, #0, 14
    3008:	13800000 	orrne	r0, r0, #0
    300c:	00010000 	andeq	r0, r1, r0
    3010:	00138057 	andseq	r8, r3, r7, asr r0
    3014:	00139000 	andseq	r9, r3, r0
    3018:	73000200 	movwvc	r0, #512	; 0x200
    301c:	0014e678 	andseq	lr, r4, r8, ror r6
    3020:	0014fe00 	andseq	pc, r4, r0, lsl #28
    3024:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    3028:	0000159c 	muleq	r0, ip, r5
    302c:	000015a4 	andeq	r1, r0, r4, lsr #11
    3030:	00570001 	subseq	r0, r7, r1
    3034:	00000000 	andeq	r0, r0, r0
    3038:	64000000 	strvs	r0, [r0], #-0
    303c:	6a000012 	bvs	308c <__RW_SIZE__+0x2af8>
    3040:	02000012 	andeq	r0, r0, #18
    3044:	6a9f3000 	bvs	fe7cf04c <MSP_BASE+0xde7ca04c>
    3048:	72000012 	andvc	r0, r0, #18
    304c:	02000012 	andeq	r0, r0, #18
    3050:	729f3100 	addsvc	r3, pc, #0, 2
    3054:	7a000012 	bvc	30a4 <__RW_SIZE__+0x2b10>
    3058:	02000012 	andeq	r0, r0, #18
    305c:	7a9f3200 	bvc	fe7cf864 <MSP_BASE+0xde7ca864>
    3060:	82000012 	andhi	r0, r0, #18
    3064:	02000012 	andeq	r0, r0, #18
    3068:	829f3300 	addshi	r3, pc, #0, 6
    306c:	8a000012 	bhi	30bc <__RW_SIZE__+0x2b28>
    3070:	02000012 	andeq	r0, r0, #18
    3074:	8a9f3400 	bhi	fe7d007c <MSP_BASE+0xde7cb07c>
    3078:	92000012 	andls	r0, r0, #18
    307c:	02000012 	andeq	r0, r0, #18
    3080:	929f3500 	addsls	r3, pc, #0, 10
    3084:	9a000012 	bls	30d4 <__RW_SIZE__+0x2b40>
    3088:	02000012 	andeq	r0, r0, #18
    308c:	9a9f3600 	bls	fe7d0894 <MSP_BASE+0xde7cb894>
    3090:	a2000012 	andge	r0, r0, #18
    3094:	02000012 	andeq	r0, r0, #18
    3098:	a29f3700 	addsge	r3, pc, #0, 14
    309c:	a8000012 	stmdage	r0, {r1, r4}
    30a0:	02000012 	andeq	r0, r0, #18
    30a4:	a89f3800 	ldmge	pc, {fp, ip, sp}	; <UNPREDICTABLE>
    30a8:	b0000012 	andlt	r0, r0, r2, lsl r0
    30ac:	02000012 	andeq	r0, r0, #18
    30b0:	749f3900 	ldrvc	r3, [pc], #2304	; 30b8 <__RW_SIZE__+0x2b24>
    30b4:	76000013 			; <UNDEFINED> instruction: 0x76000013
    30b8:	02000013 	andeq	r0, r0, #19
    30bc:	e69f3800 	ldr	r3, [pc], r0, lsl #16
    30c0:	ea000014 	b	3118 <__RW_SIZE__+0x2b84>
    30c4:	02000014 	andeq	r0, r0, #20
    30c8:	ea9f3100 	b	fe7cf4d0 <MSP_BASE+0xde7ca4d0>
    30cc:	ee000014 	mcr	0, 0, r0, cr0, cr4, {0}
    30d0:	02000014 	andeq	r0, r0, #20
    30d4:	ee9f3200 	cdp	2, 9, cr3, cr15, cr0, {0}
    30d8:	f2000014 	vqadd.s8	d0, d0, d4
    30dc:	02000014 	andeq	r0, r0, #20
    30e0:	f29f3300 	vsubw.s16	<illegal reg q1.5>, <illegal reg q7.5>, d0
    30e4:	f6000014 			; <UNDEFINED> instruction: 0xf6000014
    30e8:	02000014 	andeq	r0, r0, #20
    30ec:	f69f3400 			; <UNDEFINED> instruction: 0xf69f3400
    30f0:	fa000014 	blx	3148 <__RW_SIZE__+0x2bb4>
    30f4:	02000014 	andeq	r0, r0, #20
    30f8:	fa9f3500 	blx	fe7d0500 <MSP_BASE+0xde7cb500>
    30fc:	fe000014 	mcr2	0, 0, r0, cr0, cr4, {0}
    3100:	02000014 	andeq	r0, r0, #20
    3104:	9c9f3600 	ldcls	6, cr3, [pc], {0}
    3108:	a0000015 	andge	r0, r0, r5, lsl r0
    310c:	02000015 	andeq	r0, r0, #21
    3110:	a09f3700 	addsge	r3, pc, r0, lsl #14
    3114:	a4000015 	strge	r0, [r0], #-21	; 0xffffffeb
    3118:	02000015 	andeq	r0, r0, #21
    311c:	009f3900 	addseq	r3, pc, r0, lsl #18
    3120:	00000000 	andeq	r0, r0, r0
    3124:	32000000 	andcc	r0, r0, #0
    3128:	36000013 			; <UNDEFINED> instruction: 0x36000013
    312c:	02000013 	andeq	r0, r0, #19
    3130:	369f3000 	ldrcc	r3, [pc], r0
    3134:	3a000013 	bcc	3188 <__RW_SIZE__+0x2bf4>
    3138:	02000013 	andeq	r0, r0, #19
    313c:	3a9f3100 	bcc	fe7cf544 <MSP_BASE+0xde7ca544>
    3140:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    3144:	02000013 	andeq	r0, r0, #19
    3148:	3e9f3200 	cdpcc	2, 9, cr3, cr15, cr0, {0}
    314c:	42000013 	andmi	r0, r0, #19
    3150:	02000013 	andeq	r0, r0, #19
    3154:	429f3300 	addsmi	r3, pc, #0, 6
    3158:	46000013 			; <UNDEFINED> instruction: 0x46000013
    315c:	02000013 	andeq	r0, r0, #19
    3160:	469f3400 	ldrmi	r3, [pc], r0, lsl #8
    3164:	48000013 	stmdami	r0, {r0, r1, r4}
    3168:	02000013 	andeq	r0, r0, #19
    316c:	489f3000 	ldmmi	pc, {ip, sp}	; <UNPREDICTABLE>
    3170:	4a000013 	bmi	31c4 <__RW_SIZE__+0x2c30>
    3174:	02000013 	andeq	r0, r0, #19
    3178:	4a9f3100 	bmi	fe7cf580 <MSP_BASE+0xde7ca580>
    317c:	4c000013 	stcmi	0, cr0, [r0], {19}
    3180:	02000013 	andeq	r0, r0, #19
    3184:	4c9f3200 	lfmmi	f3, 4, [pc], {0}
    3188:	4e000013 	mcrmi	0, 0, r0, cr0, cr3, {0}
    318c:	02000013 	andeq	r0, r0, #19
    3190:	4e9f3300 	cdpmi	3, 9, cr3, cr15, cr0, {0}
    3194:	50000013 	andpl	r0, r0, r3, lsl r0
    3198:	02000013 	andeq	r0, r0, #19
    319c:	509f3400 	addspl	r3, pc, r0, lsl #8
    31a0:	52000013 	andpl	r0, r0, #19
    31a4:	02000013 	andeq	r0, r0, #19
    31a8:	529f3500 	addspl	r3, pc, #0, 10
    31ac:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
    31b0:	02000013 	andeq	r0, r0, #19
    31b4:	549f3600 	ldrpl	r3, [pc], #1536	; 31bc <__RW_SIZE__+0x2c28>
    31b8:	56000013 			; <UNDEFINED> instruction: 0x56000013
    31bc:	02000013 	andeq	r0, r0, #19
    31c0:	569f3700 	ldrpl	r3, [pc], r0, lsl #14
    31c4:	58000013 	stmdapl	r0, {r0, r1, r4}
    31c8:	02000013 	andeq	r0, r0, #19
    31cc:	589f3800 	ldmpl	pc, {fp, ip, sp}	; <UNPREDICTABLE>
    31d0:	5a000013 	bpl	3224 <__RW_SIZE__+0x2c90>
    31d4:	02000013 	andeq	r0, r0, #19
    31d8:	5a9f3900 	bpl	fe7d15e0 <MSP_BASE+0xde7cc5e0>
    31dc:	5c000013 	stcpl	0, cr0, [r0], {19}
    31e0:	02000013 	andeq	r0, r0, #19
    31e4:	009f3a00 	addseq	r3, pc, r0, lsl #20
    31e8:	00000000 	andeq	r0, r0, r0
    31ec:	90000000 	andls	r0, r0, r0
    31f0:	a2000013 	andge	r0, r0, #19
    31f4:	02000013 	andeq	r0, r0, #19
    31f8:	a29f3000 	addsge	r3, pc, #0
    31fc:	ac000013 	stcge	0, cr0, [r0], {19}
    3200:	02000013 	andeq	r0, r0, #19
    3204:	ac9f3100 	ldfges	f3, [pc], {0}
    3208:	b6000013 			; <UNDEFINED> instruction: 0xb6000013
    320c:	02000013 	andeq	r0, r0, #19
    3210:	b69f3200 	ldrlt	r3, [pc], r0, lsl #4
    3214:	c0000013 	andgt	r0, r0, r3, lsl r0
    3218:	02000013 	andeq	r0, r0, #19
    321c:	c09f3300 	addsgt	r3, pc, r0, lsl #6
    3220:	cc000013 	stcgt	0, cr0, [r0], {19}
    3224:	02000013 	andeq	r0, r0, #19
    3228:	489f3400 	ldmmi	pc, {sl, ip, sp}	; <UNPREDICTABLE>
    322c:	4a000015 	bmi	3288 <__RW_SIZE__+0x2cf4>
    3230:	02000015 	andeq	r0, r0, #21
    3234:	a49f3300 	ldrge	r3, [pc], #768	; 323c <__RW_SIZE__+0x2ca8>
    3238:	a8000015 	stmdage	r0, {r0, r2, r4}
    323c:	02000015 	andeq	r0, r0, #21
    3240:	ac9f3000 	ldcge	0, cr3, [pc], {0}
    3244:	b0000015 	andlt	r0, r0, r5, lsl r0
    3248:	02000015 	andeq	r0, r0, #21
    324c:	b09f3100 	addslt	r3, pc, r0, lsl #2
    3250:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    3254:	02000015 	andeq	r0, r0, #21
    3258:	009f3200 	addseq	r3, pc, r0, lsl #4
    325c:	00000000 	andeq	r0, r0, r0
    3260:	d4000000 	strle	r0, [r0], #-0
    3264:	de000013 	mcrle	0, 0, r0, cr0, cr3, {0}
    3268:	02000013 	andeq	r0, r0, #19
    326c:	de9f3000 	cdple	0, 9, cr3, cr15, cr0, {0}
    3270:	e8000013 	stmda	r0, {r0, r1, r4}
    3274:	02000013 	andeq	r0, r0, #19
    3278:	e89f3100 	ldm	pc, {r8, ip, sp}	; <UNPREDICTABLE>
    327c:	f2000013 	vqadd.s8	d0, d0, d3
    3280:	02000013 	andeq	r0, r0, #19
    3284:	f29f3200 	vsubl.s16	<illegal reg q1.5>, d15, d0
    3288:	fc000013 	stc2	0, cr0, [r0], {19}
    328c:	02000013 	andeq	r0, r0, #19
    3290:	fc9f3300 	ldc2	3, cr3, [pc], {0}
    3294:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3298:	02000014 	andeq	r0, r0, #20
    329c:	fe9f3400 	cdp2	4, 9, cr3, cr15, cr0, {0}
    32a0:	00000014 	andeq	r0, r0, r4, lsl r0
    32a4:	02000015 	andeq	r0, r0, #21
    32a8:	a89f3300 	ldmge	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
    32ac:	ac000015 	stcge	0, cr0, [r0], {21}
    32b0:	02000015 	andeq	r0, r0, #21
    32b4:	b49f3000 	ldrlt	r3, [pc], #0	; 32bc <__RW_SIZE__+0x2d28>
    32b8:	b8000015 	stmdalt	r0, {r0, r2, r4}
    32bc:	02000015 	andeq	r0, r0, #21
    32c0:	b89f3200 	ldmlt	pc, {r9, ip, sp}	; <UNPREDICTABLE>
    32c4:	bc000015 	stclt	0, cr0, [r0], {21}
    32c8:	02000015 	andeq	r0, r0, #21
    32cc:	009f3100 	addseq	r3, pc, r0, lsl #2
    32d0:	00000000 	andeq	r0, r0, r0
    32d4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    32d8:	f0000015 			; <UNDEFINED> instruction: 0xf0000015
    32dc:	02000015 	andeq	r0, r0, #21
    32e0:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    32e4:	00000015 	andeq	r0, r0, r5, lsl r0
    32e8:	02000016 	andeq	r0, r0, #22
    32ec:	009f3100 	addseq	r3, pc, r0, lsl #2
    32f0:	10000016 	andne	r0, r0, r6, lsl r0
    32f4:	02000016 	andeq	r0, r0, #22
    32f8:	109f3200 	addsne	r3, pc, r0, lsl #4
    32fc:	20000016 	andcs	r0, r0, r6, lsl r0
    3300:	02000016 	andeq	r0, r0, #22
    3304:	209f3300 	addscs	r3, pc, r0, lsl #6
    3308:	30000016 	andcc	r0, r0, r6, lsl r0
    330c:	02000016 	andeq	r0, r0, #22
    3310:	309f3400 	addscc	r3, pc, r0, lsl #8
    3314:	40000016 	andmi	r0, r0, r6, lsl r0
    3318:	02000016 	andeq	r0, r0, #22
    331c:	409f3500 	addsmi	r3, pc, r0, lsl #10
    3320:	50000016 	andpl	r0, r0, r6, lsl r0
    3324:	02000016 	andeq	r0, r0, #22
    3328:	509f3600 	addspl	r3, pc, r0, lsl #12
    332c:	60000016 	andvs	r0, r0, r6, lsl r0
    3330:	02000016 	andeq	r0, r0, #22
    3334:	609f3700 	addsvs	r3, pc, r0, lsl #14
    3338:	70000016 	andvc	r0, r0, r6, lsl r0
    333c:	02000016 	andeq	r0, r0, #22
    3340:	709f3800 	addsvc	r3, pc, r0, lsl #16
    3344:	80000016 	andhi	r0, r0, r6, lsl r0
    3348:	02000016 	andeq	r0, r0, #22
    334c:	809f3900 	addshi	r3, pc, r0, lsl #18
    3350:	5e000016 	mcrpl	0, 0, r0, cr0, cr6, {0}
    3354:	02000017 	andeq	r0, r0, #23
    3358:	5e9f3a00 	vfnmspl.f32	s6, s30, s0
    335c:	70000017 	andvc	r0, r0, r7, lsl r0
    3360:	02000017 	andeq	r0, r0, #23
    3364:	709f3000 	addsvc	r3, pc, r0
    3368:	92000017 	andls	r0, r0, #23
    336c:	02000017 	andeq	r0, r0, #23
    3370:	929f3100 	addsls	r3, pc, #0, 2
    3374:	b4000017 	strlt	r0, [r0], #-23	; 0xffffffe9
    3378:	02000017 	andeq	r0, r0, #23
    337c:	b49f3200 	ldrlt	r3, [pc], #512	; 3384 <__RW_SIZE__+0x2df0>
    3380:	d6000017 			; <UNDEFINED> instruction: 0xd6000017
    3384:	02000017 	andeq	r0, r0, #23
    3388:	d69f3300 	ldrle	r3, [pc], r0, lsl #6
    338c:	f8000017 			; <UNDEFINED> instruction: 0xf8000017
    3390:	02000017 	andeq	r0, r0, #23
    3394:	f89f3400 			; <UNDEFINED> instruction: 0xf89f3400
    3398:	1a000017 	bne	33fc <__RW_SIZE__+0x2e68>
    339c:	02000018 	andeq	r0, r0, #24
    33a0:	1a9f3500 	bne	fe7d07a8 <MSP_BASE+0xde7cb7a8>
    33a4:	3c000018 	stccc	0, cr0, [r0], {24}
    33a8:	02000018 	andeq	r0, r0, #24
    33ac:	3c9f3600 	ldccc	6, cr3, [pc], {0}
    33b0:	5e000018 	mcrpl	0, 0, r0, cr0, cr8, {0}
    33b4:	02000018 	andeq	r0, r0, #24
    33b8:	5e9f3700 	cdppl	7, 9, cr3, cr15, cr0, {0}
    33bc:	80000018 	andhi	r0, r0, r8, lsl r0
    33c0:	02000018 	andeq	r0, r0, #24
    33c4:	809f3800 	addshi	r3, pc, r0, lsl #16
    33c8:	a2000018 	andge	r0, r0, #24
    33cc:	02000018 	andeq	r0, r0, #24
    33d0:	a29f3900 	addsge	r3, pc, #0, 18
    33d4:	6c000018 	stcvs	0, cr0, [r0], {24}
    33d8:	02000019 	andeq	r0, r0, #25
    33dc:	009f3a00 	addseq	r3, pc, r0, lsl #20
    33e0:	00000000 	andeq	r0, r0, r0
    33e4:	80000000 	andhi	r0, r0, r0
    33e8:	92000016 	andls	r0, r0, #22
    33ec:	02000016 	andeq	r0, r0, #22
    33f0:	929f3000 	addsls	r3, pc, #0
    33f4:	a4000016 	strge	r0, [r0], #-22	; 0xffffffea
    33f8:	02000016 	andeq	r0, r0, #22
    33fc:	a49f3100 	ldrge	r3, [pc], #256	; 3404 <__RW_SIZE__+0x2e70>
    3400:	b6000016 			; <UNDEFINED> instruction: 0xb6000016
    3404:	02000016 	andeq	r0, r0, #22
    3408:	b69f3200 	ldrlt	r3, [pc], r0, lsl #4
    340c:	c8000016 	stmdagt	r0, {r1, r2, r4}
    3410:	02000016 	andeq	r0, r0, #22
    3414:	c89f3300 	ldmgt	pc, {r8, r9, ip, sp}	; <UNPREDICTABLE>
    3418:	da000016 	ble	3478 <__RW_SIZE__+0x2ee4>
    341c:	02000016 	andeq	r0, r0, #22
    3420:	da9f3400 	ble	fe7d0428 <MSP_BASE+0xde7cb428>
    3424:	5e000016 	mcrpl	0, 0, r0, cr0, cr6, {0}
    3428:	02000017 	andeq	r0, r0, #23
    342c:	a29f3500 	addsge	r3, pc, #0, 10
    3430:	c6000018 			; <UNDEFINED> instruction: 0xc6000018
    3434:	02000018 	andeq	r0, r0, #24
    3438:	c69f3000 	ldrgt	r3, [pc], r0
    343c:	ee000018 	mcr	0, 0, r0, cr0, cr8, {0}
    3440:	02000018 	andeq	r0, r0, #24
    3444:	ee9f3100 	fmle	f3, f7, f0
    3448:	16000018 			; <UNDEFINED> instruction: 0x16000018
    344c:	02000019 	andeq	r0, r0, #25
    3450:	169f3200 	ldrne	r3, [pc], r0, lsl #4
    3454:	3e000019 	mcrcc	0, 0, r0, cr0, cr9, {0}
    3458:	02000019 	andeq	r0, r0, #25
    345c:	3e9f3300 	cdpcc	3, 9, cr3, cr15, cr0, {0}
    3460:	6c000019 	stcvs	0, cr0, [r0], {25}
    3464:	02000019 	andeq	r0, r0, #25
    3468:	009f3400 	addseq	r3, pc, r0, lsl #8
    346c:	00000000 	andeq	r0, r0, r0
    3470:	fa000000 	blx	3478 <__RW_SIZE__+0x2ee4>
    3474:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    3478:	01000017 	tsteq	r0, r7, lsl r0
    347c:	17045300 	strne	r5, [r4, -r0, lsl #6]
    3480:	17070000 	strne	r0, [r7, -r0]
    3484:	00020000 	andeq	r0, r2, r0
    3488:	0000007d 	andeq	r0, r0, sp, ror r0
    348c:	00000000 	andeq	r0, r0, r0
    3490:	1b5e0000 	blne	1783498 <__RW_SIZE__+0x1782f04>
    3494:	1b680000 	blne	1a0349c <__RW_SIZE__+0x1a02f08>
    3498:	00020000 	andeq	r0, r2, r0
    349c:	1b689f30 	blne	1a2b164 <__RW_SIZE__+0x1a2abd0>
    34a0:	1b720000 	blne	1c834a8 <__RW_SIZE__+0x1c82f14>
    34a4:	00020000 	andeq	r0, r2, r0
    34a8:	1b729f31 	blne	1cab174 <__RW_SIZE__+0x1caabe0>
    34ac:	1b7c0000 	blne	1f034b4 <__RW_SIZE__+0x1f02f20>
    34b0:	00020000 	andeq	r0, r2, r0
    34b4:	1b7c9f32 	blne	1f2b184 <__RW_SIZE__+0x1f2abf0>
    34b8:	1b860000 	blne	fe1834c0 <MSP_BASE+0xde17e4c0>
    34bc:	00020000 	andeq	r0, r2, r0
    34c0:	1b869f33 	blne	fe1ab194 <MSP_BASE+0xde1a6194>
    34c4:	1b900000 	blne	fe4034cc <MSP_BASE+0xde3fe4cc>
    34c8:	00020000 	andeq	r0, r2, r0
    34cc:	1b909f34 	blne	fe42b1a4 <MSP_BASE+0xde4261a4>
    34d0:	1b9a0000 	blne	fe6834d8 <MSP_BASE+0xde67e4d8>
    34d4:	00020000 	andeq	r0, r2, r0
    34d8:	1b9a9f35 	blne	fe6ab1b4 <MSP_BASE+0xde6a61b4>
    34dc:	1ba40000 	blne	fe9034e4 <MSP_BASE+0xde8fe4e4>
    34e0:	00020000 	andeq	r0, r2, r0
    34e4:	1ba49f36 	blne	fe92b1c4 <MSP_BASE+0xde9261c4>
    34e8:	1bae0000 	blne	feb834f0 <MSP_BASE+0xdeb7e4f0>
    34ec:	00020000 	andeq	r0, r2, r0
    34f0:	1bae9f37 	blne	febab1d4 <MSP_BASE+0xdeba61d4>
    34f4:	1bb80000 	blne	fee034fc <MSP_BASE+0xdedfe4fc>
    34f8:	00020000 	andeq	r0, r2, r0
    34fc:	1bb89f38 	blne	fee2b1e4 <MSP_BASE+0xdee261e4>
    3500:	1bc20000 	blne	ff083508 <MSP_BASE+0xdf07e508>
    3504:	00020000 	andeq	r0, r2, r0
    3508:	1bc29f39 	blne	ff0ab1f4 <MSP_BASE+0xdf0a61f4>
    350c:	1c660000 	stclne	0, cr0, [r6], #-0
    3510:	00020000 	andeq	r0, r2, r0
    3514:	1cf09f3a 	ldclne	15, cr9, [r0], #232	; 0xe8
    3518:	1d080000 	stcne	0, cr0, [r8, #-0]
    351c:	00020000 	andeq	r0, r2, r0
    3520:	1d089f3a 	stcne	15, cr9, [r8, #-232]	; 0xffffff18
    3524:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3528:	00020000 	andeq	r0, r2, r0
    352c:	1d1a9f31 	ldcne	15, cr9, [sl, #-196]	; 0xffffff3c
    3530:	1d360000 	ldcne	0, cr0, [r6, #-0]
    3534:	00020000 	andeq	r0, r2, r0
    3538:	1d369f32 	ldcne	15, cr9, [r6, #-200]!	; 0xffffff38
    353c:	1d520000 	ldclne	0, cr0, [r2, #-0]
    3540:	00020000 	andeq	r0, r2, r0
    3544:	1d529f33 	ldclne	15, cr9, [r2, #-204]	; 0xffffff34
    3548:	1d6e0000 	stclne	0, cr0, [lr, #-0]
    354c:	00020000 	andeq	r0, r2, r0
    3550:	1d6e9f34 	stclne	15, cr9, [lr, #-208]!	; 0xffffff30
    3554:	1d8a0000 	stcne	0, cr0, [sl]
    3558:	00020000 	andeq	r0, r2, r0
    355c:	1d8a9f35 	stcne	15, cr9, [sl, #212]	; 0xd4
    3560:	1da60000 	stcne	0, cr0, [r6]
    3564:	00020000 	andeq	r0, r2, r0
    3568:	1da69f36 	stcne	15, cr9, [r6, #216]!	; 0xd8
    356c:	1dc20000 	stclne	0, cr0, [r2]
    3570:	00020000 	andeq	r0, r2, r0
    3574:	1dc29f37 	stclne	15, cr9, [r2, #220]	; 0xdc
    3578:	1dde0000 	ldclne	0, cr0, [lr]
    357c:	00020000 	andeq	r0, r2, r0
    3580:	1dde9f38 	ldclne	15, cr9, [lr, #224]	; 0xe0
    3584:	1dfa0000 	ldclne	0, cr0, [sl]
    3588:	00020000 	andeq	r0, r2, r0
    358c:	1dfa9f39 	ldclne	15, cr9, [sl, #228]!	; 0xe4
    3590:	1e780000 	cdpne	0, 7, cr0, cr8, cr0, {0}
    3594:	00020000 	andeq	r0, r2, r0
    3598:	1e789f3a 	mrcne	15, 3, r9, cr8, cr10, {1}
    359c:	1e900000 	cdpne	0, 9, cr0, cr0, cr0, {0}
    35a0:	00020000 	andeq	r0, r2, r0
    35a4:	00009f30 	andeq	r9, r0, r0, lsr pc
    35a8:	00000000 	andeq	r0, r0, r0
    35ac:	1bc20000 	blne	ff0835b4 <MSP_BASE+0xdf07e5b4>
    35b0:	1bcc0000 	blne	ff3035b8 <MSP_BASE+0xdf2fe5b8>
    35b4:	00020000 	andeq	r0, r2, r0
    35b8:	1bcc9f30 	blne	ff32b280 <MSP_BASE+0xdf326280>
    35bc:	1bd60000 	blne	ff5835c4 <MSP_BASE+0xdf57e5c4>
    35c0:	00020000 	andeq	r0, r2, r0
    35c4:	1bd69f31 	blne	ff5ab290 <MSP_BASE+0xdf5a6290>
    35c8:	1be00000 	blne	ff8035d0 <MSP_BASE+0xdf7fe5d0>
    35cc:	00020000 	andeq	r0, r2, r0
    35d0:	1be09f32 	blne	ff82b2a0 <MSP_BASE+0xdf8262a0>
    35d4:	1bea0000 	blne	ffa835dc <MSP_BASE+0xdfa7e5dc>
    35d8:	00020000 	andeq	r0, r2, r0
    35dc:	1bea9f33 	blne	ffaab2b0 <MSP_BASE+0xdfaa62b0>
    35e0:	1c660000 	stclne	0, cr0, [r6], #-0
    35e4:	00020000 	andeq	r0, r2, r0
    35e8:	1cf09f34 	ldclne	15, cr9, [r0], #208	; 0xd0
    35ec:	1d080000 	stcne	0, cr0, [r8, #-0]
    35f0:	00020000 	andeq	r0, r2, r0
    35f4:	1dfa9f34 	ldclne	15, cr9, [sl, #208]!	; 0xd0
    35f8:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
    35fc:	00020000 	andeq	r0, r2, r0
    3600:	1e169f30 	mrcne	15, 0, r9, cr6, cr0, {1}
    3604:	1e360000 	cdpne	0, 3, cr0, cr6, cr0, {0}
    3608:	00020000 	andeq	r0, r2, r0
    360c:	1e369f31 	mrcne	15, 1, r9, cr6, cr1, {1}
    3610:	1e560000 	cdpne	0, 5, cr0, cr6, cr0, {0}
    3614:	00020000 	andeq	r0, r2, r0
    3618:	1e569f32 	mrcne	15, 2, r9, cr6, cr2, {1}
    361c:	1e780000 	cdpne	0, 7, cr0, cr8, cr0, {0}
    3620:	00020000 	andeq	r0, r2, r0
    3624:	00009f33 	andeq	r9, r0, r3, lsr pc
    3628:	00000000 	andeq	r0, r0, r0
    362c:	1bf20000 	blne	ffc83634 <MSP_BASE+0xdfc7e634>
    3630:	1bf80000 	blne	ffe03638 <MSP_BASE+0xdfdfe638>
    3634:	00020000 	andeq	r0, r2, r0
    3638:	00009f30 	andeq	r9, r0, r0, lsr pc
    363c:	00000000 	andeq	r0, r0, r0
    3640:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    3644:	1c180000 	ldcne	0, cr0, [r8], {-0}
    3648:	00010000 	andeq	r0, r1, r0
    364c:	001c1853 	andseq	r1, ip, r3, asr r8
    3650:	001c1b00 	andseq	r1, ip, r0, lsl #22
    3654:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    3660:	001c9200 	andseq	r9, ip, r0, lsl #4
    3664:	001c9a00 	andseq	r9, ip, r0, lsl #20
    3668:	30000200 	andcc	r0, r0, r0, lsl #4
    366c:	001c9a9f 	mulseq	ip, pc, sl	; <UNPREDICTABLE>
    3670:	001c9e00 	andseq	r9, ip, r0, lsl #28
    3674:	31000200 	mrscc	r0, R8_usr
    3678:	001c9e9f 	mulseq	ip, pc, lr	; <UNPREDICTABLE>
    367c:	001ca200 	andseq	sl, ip, r0, lsl #4
    3680:	32000200 	andcc	r0, r0, #0, 4
    3684:	001ca29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    3688:	001ca600 	andseq	sl, ip, r0, lsl #12
    368c:	33000200 	movwcc	r0, #512	; 0x200
    3690:	001ca69f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    3694:	001caa00 	andseq	sl, ip, r0, lsl #20
    3698:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    369c:	001caa9f 	mulseq	ip, pc, sl	; <UNPREDICTABLE>
    36a0:	001cae00 	andseq	sl, ip, r0, lsl #28
    36a4:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    36a8:	001cae9f 	mulseq	ip, pc, lr	; <UNPREDICTABLE>
    36ac:	001cb200 	andseq	fp, ip, r0, lsl #4
    36b0:	36000200 	strcc	r0, [r0], -r0, lsl #4
    36b4:	001cb29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    36b8:	001cb600 	andseq	fp, ip, r0, lsl #12
    36bc:	37000200 	strcc	r0, [r0, -r0, lsl #4]
    36c0:	001cb69f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    36c4:	001cba00 	andseq	fp, ip, r0, lsl #20
    36c8:	38000200 	stmdacc	r0, {r9}
    36cc:	001cba9f 	mulseq	ip, pc, sl	; <UNPREDICTABLE>
    36d0:	001cbe00 	andseq	fp, ip, r0, lsl #28
    36d4:	39000200 	stmdbcc	r0, {r9}
    36d8:	001cbe9f 	mulseq	ip, pc, lr	; <UNPREDICTABLE>
    36dc:	001cf000 	andseq	pc, ip, r0
    36e0:	3a000200 	bcc	3ee8 <__RW_SIZE__+0x3954>
    36e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36e8:	00000000 	andeq	r0, r0, r0
    36ec:	001cbe00 	andseq	fp, ip, r0, lsl #28
    36f0:	001cc200 	andseq	ip, ip, r0, lsl #4
    36f4:	30000200 	andcc	r0, r0, r0, lsl #4
    36f8:	001cc29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    36fc:	001cc600 	andseq	ip, ip, r0, lsl #12
    3700:	31000200 	mrscc	r0, R8_usr
    3704:	001cc69f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    3708:	001cca00 	andseq	ip, ip, r0, lsl #20
    370c:	32000200 	andcc	r0, r0, #0, 4
    3710:	001cca9f 	mulseq	ip, pc, sl	; <UNPREDICTABLE>
    3714:	001cce00 	andseq	ip, ip, r0, lsl #28
    3718:	33000200 	movwcc	r0, #512	; 0x200
    371c:	001cce9f 	mulseq	ip, pc, lr	; <UNPREDICTABLE>
    3720:	001cd200 	andseq	sp, ip, r0, lsl #4
    3724:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    3728:	001cd29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    372c:	001cf000 	andseq	pc, ip, r0
    3730:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    3734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3738:	00000000 	andeq	r0, r0, r0
    373c:	001cd200 	andseq	sp, ip, r0, lsl #4
    3740:	001cd600 	andseq	sp, ip, r0, lsl #12
    3744:	30000200 	andcc	r0, r0, r0, lsl #4
    3748:	001cd69f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    374c:	001cda00 	andseq	sp, ip, r0, lsl #20
    3750:	31000200 	mrscc	r0, R8_usr
    3754:	001cda9f 	mulseq	ip, pc, sl	; <UNPREDICTABLE>
    3758:	001cde00 	andseq	sp, ip, r0, lsl #28
    375c:	32000200 	andcc	r0, r0, #0, 4
    3760:	001cde9f 	mulseq	ip, pc, lr	; <UNPREDICTABLE>
    3764:	001ce200 	andseq	lr, ip, r0, lsl #4
    3768:	33000200 	movwcc	r0, #512	; 0x200
    376c:	001ce29f 	mulseq	ip, pc, r2	; <UNPREDICTABLE>
    3770:	001ce600 	andseq	lr, ip, r0, lsl #12
    3774:	34000200 	strcc	r0, [r0], #-512	; 0xfffffe00
    3778:	001ce69f 	mulseq	ip, pc, r6	; <UNPREDICTABLE>
    377c:	001cf000 	andseq	pc, ip, r0
    3780:	35000200 	strcc	r0, [r0, #-512]	; 0xfffffe00
    3784:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3790:	00001400 	andeq	r1, r0, r0, lsl #8
    3794:	50000100 	andpl	r0, r0, r0, lsl #2
    3798:	00000014 	andeq	r0, r0, r4, lsl r0
    379c:	0000001a 	andeq	r0, r0, sl, lsl r0
    37a0:	1a520001 	bne	14837ac <__RW_SIZE__+0x1483218>
    37a4:	1c000000 	stcne	0, cr0, [r0], {-0}
    37a8:	03000000 	movweq	r0, #0
    37ac:	9f797200 	svcls	0x00797200
    37b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    37b4:	00000032 	andeq	r0, r0, r2, lsr r0
    37b8:	01f30004 	mvnseq	r0, r4
    37bc:	00329f50 	eorseq	r9, r2, r0, asr pc
    37c0:	003c0000 	eorseq	r0, ip, r0
    37c4:	00010000 	andeq	r0, r1, r0
    37c8:	00003c50 	andeq	r3, r0, r0, asr ip
    37cc:	00004400 	andeq	r4, r0, r0, lsl #8
    37d0:	52000100 	andpl	r0, r0, #0, 2
	...
    37dc:	00000018 	andeq	r0, r0, r8, lsl r0
    37e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    37e4:	00500001 	subseq	r0, r0, r1
    37e8:	00000000 	andeq	r0, r0, r0
    37ec:	20000000 	andcs	r0, r0, r0
    37f0:	32000000 	andcc	r0, r0, #0
    37f4:	01000000 	mrseq	r0, (UNDEF: 0)
    37f8:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3804:	000e0000 	andeq	r0, lr, r0
    3808:	00010000 	andeq	r0, r1, r0
    380c:	00000e50 	andeq	r0, r0, r0, asr lr
    3810:	00003400 	andeq	r3, r0, r0, lsl #8
    3814:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3818:	00000034 	andeq	r0, r0, r4, lsr r0
    381c:	00000038 	andeq	r0, r0, r8, lsr r0
    3820:	01f30004 	mvnseq	r0, r4
    3824:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3830:	000e0000 	andeq	r0, lr, r0
    3834:	00010000 	andeq	r0, r1, r0
    3838:	00000e51 	andeq	r0, r0, r1, asr lr
    383c:	00003400 	andeq	r3, r0, r0, lsl #8
    3840:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    3844:	00000034 	andeq	r0, r0, r4, lsr r0
    3848:	00000038 	andeq	r0, r0, r8, lsr r0
    384c:	01f30004 	mvnseq	r0, r4
    3850:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    385c:	000e0000 	andeq	r0, lr, r0
    3860:	00020000 	andeq	r0, r2, r0
    3864:	000e9f30 	andeq	r9, lr, r0, lsr pc
    3868:	00260000 	eoreq	r0, r6, r0
    386c:	00010000 	andeq	r0, r1, r0
    3870:	00002654 	andeq	r2, r0, r4, asr r6
    3874:	00002900 	andeq	r2, r0, r0, lsl #18
    3878:	52000100 	andpl	r0, r0, #0, 2
    387c:	00000029 	andeq	r0, r0, r9, lsr #32
    3880:	0000002a 	andeq	r0, r0, sl, lsr #32
    3884:	7f740003 	svcvc	0x00740003
    3888:	00002a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    388c:	00003400 	andeq	r3, r0, r0, lsl #8
    3890:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3894:	00000034 	andeq	r0, r0, r4, lsr r0
    3898:	00000038 	andeq	r0, r0, r8, lsr r0
    389c:	00530001 	subseq	r0, r3, r1
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	7c000000 	stcvc	0, cr0, [r0], {-0}
    38a8:	82000000 	andhi	r0, r0, #0
    38ac:	01000000 	mrseq	r0, (UNDEF: 0)
    38b0:	00825000 	addeq	r5, r2, r0
    38b4:	00fe0000 	rscseq	r0, lr, r0
    38b8:	00010000 	andeq	r0, r1, r0
    38bc:	0000fe54 	andeq	pc, r0, r4, asr lr	; <UNPREDICTABLE>
    38c0:	00016e00 	andeq	r6, r1, r0, lsl #28
    38c4:	f3000400 	vshl.u8	d0, d0, d0
    38c8:	6e9f5001 	cdpvs	0, 9, cr5, cr15, cr1, {0}
    38cc:	a6000001 	strge	r0, [r0], -r1
    38d0:	01000001 	tsteq	r0, r1
    38d4:	00005400 	andeq	r5, r0, r0, lsl #8
    38d8:	00000000 	andeq	r0, r0, r0
    38dc:	007c0000 	rsbseq	r0, ip, r0
    38e0:	008f0000 	addeq	r0, pc, r0
    38e4:	00010000 	andeq	r0, r1, r0
    38e8:	00008f51 	andeq	r8, r0, r1, asr pc
    38ec:	0001a600 	andeq	sl, r1, r0, lsl #12
    38f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    38fc:	0000007c 	andeq	r0, r0, ip, ror r0
    3900:	0000008f 	andeq	r0, r0, pc, lsl #1
    3904:	8f520001 	svchi	0x00520001
    3908:	a6000000 	strge	r0, [r0], -r0
    390c:	01000001 	tsteq	r0, r1
    3910:	00005600 	andeq	r5, r0, r0, lsl #12
    3914:	00000000 	andeq	r0, r0, r0
    3918:	00900000 	addseq	r0, r0, r0
    391c:	00fe0000 	rscseq	r0, lr, r0
    3920:	00010000 	andeq	r0, r1, r0
    3924:	0000fe54 	andeq	pc, r0, r4, asr lr	; <UNPREDICTABLE>
    3928:	00016e00 	andeq	r6, r1, r0, lsl #28
    392c:	f3000400 	vshl.u8	d0, d0, d0
    3930:	6e9f5001 	cdpvs	0, 9, cr5, cr15, cr1, {0}
    3934:	a6000001 	strge	r0, [r0], -r1
    3938:	01000001 	tsteq	r0, r1
    393c:	00005400 	andeq	r5, r0, r0, lsl #8
    3940:	00000000 	andeq	r0, r0, r0
    3944:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    3948:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    394c:	00010000 	andeq	r0, r1, r0
    3950:	0001ac50 	andeq	sl, r1, r0, asr ip
    3954:	0001b800 	andeq	fp, r1, r0, lsl #16
    3958:	f3000400 	vshl.u8	d0, d0, d0
    395c:	009f5001 	addseq	r5, pc, r1
    3960:	00000000 	andeq	r0, r0, r0
    3964:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    3968:	b5000001 	strlt	r0, [r0, #-1]
    396c:	01000001 	tsteq	r0, r1
    3970:	01b55100 			; <UNDEFINED> instruction: 0x01b55100
    3974:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    3978:	00040000 	andeq	r0, r4, r0
    397c:	9f5101f3 	svcls	0x005101f3
	...
    3988:	000001a8 	andeq	r0, r0, r8, lsr #3
    398c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
    3990:	b5520001 	ldrblt	r0, [r2, #-1]
    3994:	b8000001 	stmdalt	r0, {r0}
    3998:	04000001 	streq	r0, [r0], #-1
    399c:	5201f300 	andpl	pc, r1, #0, 6
    39a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39a4:	00000000 	andeq	r0, r0, r0
    39a8:	0001b800 	andeq	fp, r1, r0, lsl #16
    39ac:	0001bc00 	andeq	fp, r1, r0, lsl #24
    39b0:	50000100 	andpl	r0, r0, r0, lsl #2
    39b4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    39b8:	000001c8 	andeq	r0, r0, r8, asr #3
    39bc:	01f30004 	mvnseq	r0, r4
    39c0:	00009f50 	andeq	r9, r0, r0, asr pc
    39c4:	00000000 	andeq	r0, r0, r0
    39c8:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    39cc:	01c50000 	biceq	r0, r5, r0
    39d0:	00010000 	andeq	r0, r1, r0
    39d4:	0001c551 	andeq	ip, r1, r1, asr r5
    39d8:	0001c800 	andeq	ip, r1, r0, lsl #16
    39dc:	f3000400 	vshl.u8	d0, d0, d0
    39e0:	009f5101 	addseq	r5, pc, r1, lsl #2
    39e4:	00000000 	andeq	r0, r0, r0
    39e8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    39ec:	c5000001 	strgt	r0, [r0, #-1]
    39f0:	01000001 	tsteq	r0, r1
    39f4:	01c55200 	biceq	r5, r5, r0, lsl #4
    39f8:	01c80000 	biceq	r0, r8, r0
    39fc:	00040000 	andeq	r0, r4, r0
    3a00:	9f5201f3 	svcls	0x005201f3
	...
    3a0c:	000001c8 	andeq	r0, r0, r8, asr #3
    3a10:	000001cc 	andeq	r0, r0, ip, asr #3
    3a14:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3a18:	d8000001 	stmdale	r0, {r0}
    3a1c:	04000001 	streq	r0, [r0], #-1
    3a20:	5001f300 	andpl	pc, r1, r0, lsl #6
    3a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a28:	00000000 	andeq	r0, r0, r0
    3a2c:	0001c800 	andeq	ip, r1, r0, lsl #16
    3a30:	0001d500 	andeq	sp, r1, r0, lsl #10
    3a34:	51000100 	mrspl	r0, (UNDEF: 16)
    3a38:	000001d5 	ldrdeq	r0, [r0], -r5
    3a3c:	000001d8 	ldrdeq	r0, [r0], -r8
    3a40:	01f30004 	mvnseq	r0, r4
    3a44:	00009f51 	andeq	r9, r0, r1, asr pc
    3a48:	00000000 	andeq	r0, r0, r0
    3a4c:	01c80000 	biceq	r0, r8, r0
    3a50:	01d50000 	bicseq	r0, r5, r0
    3a54:	00010000 	andeq	r0, r1, r0
    3a58:	0001d552 	andeq	sp, r1, r2, asr r5
    3a5c:	0001d800 	andeq	sp, r1, r0, lsl #16
    3a60:	f3000400 	vshl.u8	d0, d0, d0
    3a64:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3a70:	11000000 	mrsne	r0, (UNDEF: 0)
    3a74:	01000000 	mrseq	r0, (UNDEF: 0)
    3a78:	00115000 	andseq	r5, r1, r0
    3a7c:	00480000 	subeq	r0, r8, r0
    3a80:	00040000 	andeq	r0, r4, r0
    3a84:	9f5001f3 	svcls	0x005001f3
	...
    3a90:	00000048 	andeq	r0, r0, r8, asr #32
    3a94:	00000050 	andeq	r0, r0, r0, asr r0
    3a98:	50500001 	subspl	r0, r0, r1
    3a9c:	64000000 	strvs	r0, [r0], #-0
    3aa0:	04000000 	streq	r0, [r0], #-0
    3aa4:	5001f300 	andpl	pc, r1, r0, lsl #6
    3aa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ab4:	00002e00 	andeq	r2, r0, r0, lsl #28
    3ab8:	50000100 	andpl	r0, r0, r0, lsl #2
    3abc:	0000002e 	andeq	r0, r0, lr, lsr #32
    3ac0:	000000f4 	strdeq	r0, [r0], -r4
    3ac4:	01f30004 	mvnseq	r0, r4
    3ac8:	00009f50 	andeq	r9, r0, r0, asr pc
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	004e0000 	subeq	r0, lr, r0
    3ad4:	00540000 	subseq	r0, r4, r0
    3ad8:	00020000 	andeq	r0, r2, r0
    3adc:	00549f30 	subseq	r9, r4, r0, lsr pc
    3ae0:	00800000 	addeq	r0, r0, r0
    3ae4:	00010000 	andeq	r0, r1, r0
    3ae8:	00000051 	andeq	r0, r0, r1, asr r0
    3aec:	00000000 	andeq	r0, r0, r0
    3af0:	0000f400 	andeq	pc, r0, r0, lsl #8
    3af4:	00016400 	andeq	r6, r1, r0, lsl #8
    3af8:	50000100 	andpl	r0, r0, r0, lsl #2
    3afc:	00000164 	andeq	r0, r0, r4, ror #2
    3b00:	000001aa 	andeq	r0, r0, sl, lsr #3
    3b04:	01f30004 	mvnseq	r0, r4
    3b08:	00009f50 	andeq	r9, r0, r0, asr pc
    3b0c:	00000000 	andeq	r0, r0, r0
    3b10:	00f40000 	rscseq	r0, r4, r0
    3b14:	01040000 	mrseq	r0, (UNDEF: 4)
    3b18:	00010000 	andeq	r0, r1, r0
    3b1c:	00010451 	andeq	r0, r1, r1, asr r4
    3b20:	00013c00 	andeq	r3, r1, r0, lsl #24
    3b24:	f3000400 	vshl.u8	d0, d0, d0
    3b28:	3c9f5101 	ldfccs	f5, [pc], {1}
    3b2c:	48000001 	stmdami	r0, {r0}
    3b30:	01000001 	tsteq	r0, r1
    3b34:	01485100 	mrseq	r5, (UNDEF: 88)
    3b38:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    3b3c:	00040000 	andeq	r0, r4, r0
    3b40:	9f5101f3 	svcls	0x005101f3
	...
    3b4c:	000000f8 	strdeq	r0, [r0], -r8
    3b50:	0000013c 	andeq	r0, r0, ip, lsr r1
    3b54:	9f4e0002 	svcls	0x004e0002
	...
    3b64:	00000039 	andeq	r0, r0, r9, lsr r0
    3b68:	39500001 	ldmdbcc	r0, {r0}^
    3b6c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3b70:	04000000 	streq	r0, [r0], #-0
    3b74:	5001f300 	andpl	pc, r1, r0, lsl #6
    3b78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b7c:	00000000 	andeq	r0, r0, r0
    3b80:	00005800 	andeq	r5, r0, r0, lsl #16
    3b84:	0000b000 	andeq	fp, r0, r0
    3b88:	54000600 	strpl	r0, [r0], #-1536	; 0xfffffa00
    3b8c:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    3b90:	00000004 	andeq	r0, r0, r4
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	00005e00 	andeq	r5, r0, r0, lsl #28
    3b9c:	00006100 	andeq	r6, r0, r0, lsl #2
    3ba0:	50000100 	andpl	r0, r0, r0, lsl #2
    3ba4:	00000061 	andeq	r0, r0, r1, rrx
    3ba8:	0000008a 	andeq	r0, r0, sl, lsl #1
    3bac:	8a560001 	bhi	1583bb8 <__RW_SIZE__+0x1583624>
    3bb0:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    3bb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3bb8:	34007000 	strcc	r7, [r0], #-0
    3bbc:	22007625 	andcs	r7, r0, #38797312	; 0x2500000
    3bc0:	00008e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    3bc4:	0000b000 	andeq	fp, r0, r0
    3bc8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3bd4:	0000008a 	andeq	r0, r0, sl, lsl #1
    3bd8:	00000092 	muleq	r0, r2, r0
    3bdc:	00700005 	rsbseq	r0, r0, r5
    3be0:	929f1a3f 	addsls	r1, pc, #258048	; 0x3f000
    3be4:	96000000 	strls	r0, [r0], -r0
    3be8:	01000000 	mrseq	r0, (UNDEF: 0)
    3bec:	00005000 	andeq	r5, r0, r0
    3bf0:	00000000 	andeq	r0, r0, r0
    3bf4:	00f40000 	rscseq	r0, r4, r0
    3bf8:	01040000 	mrseq	r0, (UNDEF: 4)
    3bfc:	00010000 	andeq	r0, r1, r0
    3c00:	00010450 	andeq	r0, r1, r0, asr r4
    3c04:	00011c00 	andeq	r1, r1, r0, lsl #24
    3c08:	70000300 	andvc	r0, r0, r0, lsl #6
    3c0c:	011c9f01 	tsteq	ip, r1, lsl #30
    3c10:	01200000 	teqeq	r0, r0
    3c14:	00010000 	andeq	r0, r1, r0
    3c18:	00012450 	andeq	r2, r1, r0, asr r4
    3c1c:	00013600 	andeq	r3, r1, r0, lsl #12
    3c20:	70000300 	andvc	r0, r0, r0, lsl #6
    3c24:	00009f01 	andeq	r9, r0, r1, lsl #30
    3c28:	00000000 	andeq	r0, r0, r0
    3c2c:	01040000 	mrseq	r0, (UNDEF: 4)
    3c30:	011c0000 	tsteq	ip, r0
    3c34:	00010000 	andeq	r0, r1, r0
    3c38:	00012454 	andeq	r2, r1, r4, asr r4
    3c3c:	00013600 	andeq	r3, r1, r0, lsl #12
    3c40:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3c4c:	0000014e 	andeq	r0, r0, lr, asr #2
    3c50:	0000015a 	andeq	r0, r0, sl, asr r1
    3c54:	c0910004 	addsgt	r0, r1, r4
    3c58:	015a9f7d 	cmpeq	sl, sp, ror pc
    3c5c:	01600000 	cmneq	r0, r0
    3c60:	00010000 	andeq	r0, r1, r0
    3c64:	00016054 	andeq	r6, r1, r4, asr r0
    3c68:	00017800 	andeq	r7, r1, r0, lsl #16
    3c6c:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3c70:	01789f01 	cmneq	r8, r1, lsl #30
    3c74:	017c0000 	cmneq	ip, r0
    3c78:	00010000 	andeq	r0, r1, r0
    3c7c:	00018654 	andeq	r8, r1, r4, asr r6
    3c80:	00019800 	andeq	r9, r1, r0, lsl #16
    3c84:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3c88:	00009f01 	andeq	r9, r0, r1, lsl #30
    3c8c:	00000000 	andeq	r0, r0, r0
    3c90:	01600000 	cmneq	r0, r0
    3c94:	01780000 	cmneq	r8, r0
    3c98:	00010000 	andeq	r0, r1, r0
    3c9c:	00018650 	andeq	r8, r1, r0, asr r6
    3ca0:	00019800 	andeq	r9, r1, r0, lsl #16
    3ca4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3cb0:	000001c8 	andeq	r0, r0, r8, asr #3
    3cb4:	000001d8 	ldrdeq	r0, [r0], -r8
    3cb8:	d8500001 	ldmdale	r0, {r0}^
    3cbc:	fc000001 	stc2	0, cr0, [r0], {1}
    3cc0:	01000001 	tsteq	r0, r1
    3cc4:	01fc5600 	mvnseq	r5, r0, lsl #12
    3cc8:	02000000 	andeq	r0, r0, #0
    3ccc:	00030000 	andeq	r0, r3, r0
    3cd0:	009f0176 	addseq	r0, pc, r6, ror r1	; <UNPREDICTABLE>
    3cd4:	64000002 	strvs	r0, [r0], #-2
    3cd8:	01000002 	tsteq	r0, r2
    3cdc:	00005600 	andeq	r5, r0, r0, lsl #12
    3ce0:	00000000 	andeq	r0, r0, r0
    3ce4:	01d00000 	bicseq	r0, r0, r0
    3ce8:	01d80000 	bicseq	r0, r8, r0
    3cec:	00010000 	andeq	r0, r1, r0
    3cf0:	0001d850 	andeq	sp, r1, r0, asr r8
    3cf4:	00026400 	andeq	r6, r2, r0, lsl #8
    3cf8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    3d04:	0000020a 	andeq	r0, r0, sl, lsl #4
    3d08:	0000021c 	andeq	r0, r0, ip, lsl r2
    3d0c:	20530001 	subscs	r0, r3, r1
    3d10:	32000002 	andcc	r0, r0, #2
    3d14:	01000002 	tsteq	r0, r2
    3d18:	00005300 	andeq	r5, r0, r0, lsl #6
    3d1c:	00000000 	andeq	r0, r0, r0
    3d20:	02680000 	rsbeq	r0, r8, #0
    3d24:	02740000 	rsbseq	r0, r4, #0
    3d28:	00010000 	andeq	r0, r1, r0
    3d2c:	0002745d 	andeq	r7, r2, sp, asr r4
    3d30:	00028400 	andeq	r8, r2, r0, lsl #8
    3d34:	91000300 	mrsls	r0, LR_irq
    3d38:	02849f49 	addeq	r9, r4, #292	; 0x124
    3d3c:	031e0000 	tsteq	lr, #0
    3d40:	00010000 	andeq	r0, r1, r0
    3d44:	00000055 	andeq	r0, r0, r5, asr r0
    3d48:	00000000 	andeq	r0, r0, r0
    3d4c:	00026800 	andeq	r6, r2, r0, lsl #16
    3d50:	00028a00 	andeq	r8, r2, r0, lsl #20
    3d54:	3a000200 	bcc	455c <__RW_SIZE__+0x3fc8>
    3d58:	00028a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    3d5c:	0002a600 	andeq	sl, r2, r0, lsl #12
    3d60:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3d64:	000002f8 	strdeq	r0, [r0], -r8
    3d68:	0000030a 	andeq	r0, r0, sl, lsl #6
    3d6c:	9f3a0002 	svcls	0x003a0002
    3d70:	0000030a 	andeq	r0, r0, sl, lsl #6
    3d74:	0000031e 	andeq	r0, r0, lr, lsl r3
    3d78:	00540001 	subseq	r0, r4, r1
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3d84:	74000002 	strvc	r0, [r0], #-2
    3d88:	02000002 	andeq	r0, r0, #2
    3d8c:	749f3000 	ldrvc	r3, [pc], #0	; 3d94 <__RW_SIZE__+0x3800>
    3d90:	84000002 	strhi	r0, [r0], #-2
    3d94:	02000002 	andeq	r0, r0, #2
    3d98:	849f3100 	ldrhi	r3, [pc], #256	; 3da0 <__RW_SIZE__+0x380c>
    3d9c:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    3da0:	01000003 	tsteq	r0, r3
    3da4:	00005600 	andeq	r5, r0, r0, lsl #12
    3da8:	00000000 	andeq	r0, r0, r0
    3dac:	02680000 	rsbeq	r0, r8, #0
    3db0:	02b60000 	adcseq	r0, r6, #0
    3db4:	00020000 	andeq	r0, r2, r0
    3db8:	02b69f30 	adcseq	r9, r6, #48, 30	; 0xc0
    3dbc:	02cc0000 	sbceq	r0, ip, #0
    3dc0:	00010000 	andeq	r0, r1, r0
    3dc4:	0002dc54 	andeq	sp, r2, r4, asr ip
    3dc8:	0002e200 	andeq	lr, r2, r0, lsl #4
    3dcc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3dd0:	000002ec 	andeq	r0, r0, ip, ror #5
    3dd4:	00000310 	andeq	r0, r0, r0, lsl r3
    3dd8:	9f300002 	svcls	0x00300002
    3ddc:	00000310 	andeq	r0, r0, r0, lsl r3
    3de0:	00000316 	andeq	r0, r0, r6, lsl r3
    3de4:	16500001 	ldrbne	r0, [r0], -r1
    3de8:	18000003 	stmdane	r0, {r0, r1}
    3dec:	04000003 	streq	r0, [r0], #-3
    3df0:	1f007000 	svcne	0x00007000
    3df4:	0003189f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    3df8:	00031e00 	andeq	r1, r3, r0, lsl #28
    3dfc:	30000200 	andcc	r0, r0, r0, lsl #4
    3e00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e04:	00000000 	andeq	r0, r0, r0
    3e08:	00029600 	andeq	r9, r2, r0, lsl #12
    3e0c:	0002a200 	andeq	sl, r2, r0, lsl #4
    3e10:	50000100 	andpl	r0, r0, r0, lsl #2
    3e14:	000002ec 	andeq	r0, r0, ip, ror #5
    3e18:	000002f2 	strdeq	r0, [r0], -r2
    3e1c:	7f700003 	svcvc	0x00700003
    3e20:	0002f29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    3e24:	0002f800 	andeq	pc, r2, r0, lsl #16
    3e28:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    3e2c:	00000318 	andeq	r0, r0, r8, lsl r3
    3e30:	0000031c 	andeq	r0, r0, ip, lsl r3
    3e34:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3e38:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    3e3c:	01000003 	tsteq	r0, r3
    3e40:	00005700 	andeq	r5, r0, r0, lsl #14
    3e44:	00000000 	andeq	r0, r0, r0
    3e48:	02b60000 	adcseq	r0, r6, #0
    3e4c:	02e20000 	rsceq	r0, r2, #0
    3e50:	00010000 	andeq	r0, r1, r0
    3e54:	0002ec53 	andeq	lr, r2, r3, asr ip
    3e58:	0002f800 	andeq	pc, r2, r0, lsl #16
    3e5c:	30000200 	andcc	r0, r0, r0, lsl #4
    3e60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e64:	00000000 	andeq	r0, r0, r0
    3e68:	00032000 	andeq	r2, r3, r0
    3e6c:	00033e00 	andeq	r3, r3, r0, lsl #28
    3e70:	50000100 	andpl	r0, r0, r0, lsl #2
    3e74:	0000033e 	andeq	r0, r0, lr, lsr r3
    3e78:	00000346 	andeq	r0, r0, r6, asr #6
    3e7c:	01f30004 	mvnseq	r0, r4
    3e80:	03469f50 	movteq	r9, #28496	; 0x6f50
    3e84:	03480000 	movteq	r0, #32768	; 0x8000
    3e88:	00010000 	andeq	r0, r1, r0
    3e8c:	00034850 	andeq	r4, r3, r0, asr r8
    3e90:	00036200 	andeq	r6, r3, r0, lsl #4
    3e94:	f3000400 	vshl.u8	d0, d0, d0
    3e98:	009f5001 	addseq	r5, pc, r1
    3e9c:	00000000 	andeq	r0, r0, r0
    3ea0:	40000000 	andmi	r0, r0, r0
    3ea4:	46000003 	strmi	r0, [r0], -r3
    3ea8:	03000003 	movweq	r0, #3
    3eac:	9f250800 	svcls	0x00250800
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
       4:	080032fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, ip, sp}
	...
      10:	0000022a 	andeq	r0, r0, sl, lsr #4
      14:	00000358 	andeq	r0, r0, r8, asr r3
      18:	00000374 	andeq	r0, r0, r4, ror r3
      1c:	00000428 	andeq	r0, r0, r8, lsr #8
	...
      28:	0000044a 	andeq	r0, r0, sl, asr #8
      2c:	000005be 			; <UNDEFINED> instruction: 0x000005be
      30:	000005c6 	andeq	r0, r0, r6, asr #11
      34:	0000067e 	andeq	r0, r0, lr, ror r6
	...
      40:	00000466 	andeq	r0, r0, r6, ror #8
      44:	000005a8 	andeq	r0, r0, r8, lsr #11
      48:	000005c6 	andeq	r0, r0, r6, asr #11
      4c:	0000067e 	andeq	r0, r0, lr, ror r6
	...
      58:	00000194 	muleq	r0, r4, r1
      5c:	000001a0 	andeq	r0, r0, r0, lsr #3
      60:	000001ac 	andeq	r0, r0, ip, lsr #3
      64:	000001ae 	andeq	r0, r0, lr, lsr #3
	...
      70:	000001a0 	andeq	r0, r0, r0, lsr #3
      74:	000001a4 	andeq	r0, r0, r4, lsr #3
      78:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
      7c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
	...
      88:	000001a4 	andeq	r0, r0, r4, lsr #3
      8c:	000001a8 	andeq	r0, r0, r8, lsr #3
      90:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
      94:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
	...
      a0:	0000020e 	andeq	r0, r0, lr, lsl #4
      a4:	00000212 	andeq	r0, r0, r2, lsl r2
      a8:	00000226 	andeq	r0, r0, r6, lsr #4
      ac:	0000022a 	andeq	r0, r0, sl, lsr #4
      b0:	00000232 	andeq	r0, r0, r2, lsr r2
      b4:	00000236 	andeq	r0, r0, r6, lsr r2
      b8:	0000025a 	andeq	r0, r0, sl, asr r2
      bc:	0000025e 	andeq	r0, r0, lr, asr r2
	...
      c8:	0000024a 	andeq	r0, r0, sl, asr #4
      cc:	0000024e 	andeq	r0, r0, lr, asr #4
      d0:	0000025e 	andeq	r0, r0, lr, asr r2
      d4:	00000262 	andeq	r0, r0, r2, ror #4
	...
      e0:	00000252 	andeq	r0, r0, r2, asr r2
      e4:	00000256 	andeq	r0, r0, r6, asr r2
      e8:	00000262 	andeq	r0, r0, r2, ror #4
      ec:	00000266 	andeq	r0, r0, r6, ror #4
	...
      f8:	000000fc 	strdeq	r0, [r0], -ip
      fc:	00000100 	andeq	r0, r0, r0, lsl #2
     100:	00000102 	andeq	r0, r0, r2, lsl #2
     104:	0000010a 	andeq	r0, r0, sl, lsl #2
     108:	0000010e 	andeq	r0, r0, lr, lsl #2
     10c:	00000112 	andeq	r0, r0, r2, lsl r1
	...
     118:	00000046 	andeq	r0, r0, r6, asr #32
     11c:	00000098 	muleq	r0, r8, r0
     120:	0000009c 	muleq	r0, ip, r0
     124:	000000a2 	andeq	r0, r0, r2, lsr #1
	...
     130:	00000060 	andeq	r0, r0, r0, rrx
     134:	00000068 	andeq	r0, r0, r8, rrx
     138:	0000006e 	andeq	r0, r0, lr, rrx
     13c:	0000008e 	andeq	r0, r0, lr, lsl #1
	...
     148:	00000098 	muleq	r0, r8, r0
     14c:	0000009c 	muleq	r0, ip, r0
     150:	000000a2 	andeq	r0, r0, r2, lsr #1
     154:	000000e0 	andeq	r0, r0, r0, ror #1
	...
     160:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     164:	000000b2 	strheq	r0, [r0], -r2
     168:	000000b8 	strheq	r0, [r0], -r8
     16c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
     178:	00000104 	andeq	r0, r0, r4, lsl #2
     17c:	00000108 	andeq	r0, r0, r8, lsl #2
     180:	0000010c 	andeq	r0, r0, ip, lsl #2
     184:	00000110 	andeq	r0, r0, r0, lsl r1
     188:	00000114 	andeq	r0, r0, r4, lsl r1
     18c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
     198:	00000170 	andeq	r0, r0, r0, ror r1
     19c:	00000172 	andeq	r0, r0, r2, ror r1
     1a0:	00000178 	andeq	r0, r0, r8, ror r1
     1a4:	00000194 	muleq	r0, r4, r1
	...
     1b0:	0000019e 	muleq	r0, lr, r1
     1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
     1b8:	000001a6 	andeq	r0, r0, r6, lsr #3
     1bc:	000001c2 	andeq	r0, r0, r2, asr #3
	...
     1c8:	000001e2 	andeq	r0, r0, r2, ror #3
     1cc:	000001ea 	andeq	r0, r0, sl, ror #3
     1d0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d4:	00000208 	andeq	r0, r0, r8, lsl #4
	...
     1e0:	00000236 	andeq	r0, r0, r6, lsr r2
     1e4:	0000023e 	andeq	r0, r0, lr, lsr r2
     1e8:	00000244 	andeq	r0, r0, r4, asr #4
     1ec:	0000025c 	andeq	r0, r0, ip, asr r2
	...
     1f8:	000002a0 	andeq	r0, r0, r0, lsr #5
     1fc:	000002a4 	andeq	r0, r0, r4, lsr #5
     200:	000002a8 	andeq	r0, r0, r8, lsr #5
     204:	00000340 	andeq	r0, r0, r0, asr #6
	...
     210:	000002a0 	andeq	r0, r0, r0, lsr #5
     214:	000002a4 	andeq	r0, r0, r4, lsr #5
     218:	000002a8 	andeq	r0, r0, r8, lsr #5
     21c:	000002f8 	strdeq	r0, [r0], -r8
     220:	000002fc 	strdeq	r0, [r0], -ip
     224:	00000302 	andeq	r0, r0, r2, lsl #6
	...
     230:	000002be 			; <UNDEFINED> instruction: 0x000002be
     234:	000002c6 	andeq	r0, r0, r6, asr #5
     238:	000002ca 	andeq	r0, r0, sl, asr #5
     23c:	000002cc 	andeq	r0, r0, ip, asr #5
     240:	000002ce 	andeq	r0, r0, lr, asr #5
     244:	000002ee 	andeq	r0, r0, lr, ror #5
	...
     250:	000002f8 	strdeq	r0, [r0], -r8
     254:	000002fc 	strdeq	r0, [r0], -ip
     258:	00000302 	andeq	r0, r0, r2, lsl #6
     25c:	00000340 	andeq	r0, r0, r0, asr #6
	...
     268:	00000310 	andeq	r0, r0, r0, lsl r3
     26c:	00000312 	andeq	r0, r0, r2, lsl r3
     270:	00000318 	andeq	r0, r0, r8, lsl r3
     274:	00000330 	andeq	r0, r0, r0, lsr r3
	...
     280:	0000034c 	andeq	r0, r0, ip, asr #6
     284:	00000350 	andeq	r0, r0, r0, asr r3
     288:	00000354 	andeq	r0, r0, r4, asr r3
     28c:	000003de 	ldrdeq	r0, [r0], -lr
	...
     298:	0000034c 	andeq	r0, r0, ip, asr #6
     29c:	00000350 	andeq	r0, r0, r0, asr r3
     2a0:	00000354 	andeq	r0, r0, r4, asr r3
     2a4:	000003a4 	andeq	r0, r0, r4, lsr #7
     2a8:	000003a8 	andeq	r0, r0, r8, lsr #7
     2ac:	000003ae 	andeq	r0, r0, lr, lsr #7
	...
     2b8:	0000036a 	andeq	r0, r0, sl, ror #6
     2bc:	00000372 	andeq	r0, r0, r2, ror r3
     2c0:	00000376 	andeq	r0, r0, r6, ror r3
     2c4:	00000378 	andeq	r0, r0, r8, ror r3
     2c8:	0000037a 	andeq	r0, r0, sl, ror r3
     2cc:	0000039a 	muleq	r0, sl, r3
	...
     2d8:	000003a4 	andeq	r0, r0, r4, lsr #7
     2dc:	000003a8 	andeq	r0, r0, r8, lsr #7
     2e0:	000003ae 	andeq	r0, r0, lr, lsr #7
     2e4:	000003de 	ldrdeq	r0, [r0], -lr
	...
     2f0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     2f4:	000003be 			; <UNDEFINED> instruction: 0x000003be
     2f8:	000003c4 	andeq	r0, r0, r4, asr #7
     2fc:	000003de 	ldrdeq	r0, [r0], -lr
	...
     308:	000003e4 	andeq	r0, r0, r4, ror #7
     30c:	000003e8 	andeq	r0, r0, r8, ror #7
     310:	000003ec 	andeq	r0, r0, ip, ror #7
     314:	00000476 	andeq	r0, r0, r6, ror r4
	...
     320:	000003e4 	andeq	r0, r0, r4, ror #7
     324:	000003e8 	andeq	r0, r0, r8, ror #7
     328:	000003ec 	andeq	r0, r0, ip, ror #7
     32c:	0000043c 	andeq	r0, r0, ip, lsr r4
     330:	00000440 	andeq	r0, r0, r0, asr #8
     334:	00000446 	andeq	r0, r0, r6, asr #8
	...
     340:	00000402 	andeq	r0, r0, r2, lsl #8
     344:	0000040a 	andeq	r0, r0, sl, lsl #8
     348:	0000040e 	andeq	r0, r0, lr, lsl #8
     34c:	00000410 	andeq	r0, r0, r0, lsl r4
     350:	00000412 	andeq	r0, r0, r2, lsl r4
     354:	00000432 	andeq	r0, r0, r2, lsr r4
	...
     360:	0000043c 	andeq	r0, r0, ip, lsr r4
     364:	00000440 	andeq	r0, r0, r0, asr #8
     368:	00000446 	andeq	r0, r0, r6, asr #8
     36c:	00000476 	andeq	r0, r0, r6, ror r4
	...
     378:	00000454 	andeq	r0, r0, r4, asr r4
     37c:	00000456 	andeq	r0, r0, r6, asr r4
     380:	0000045c 	andeq	r0, r0, ip, asr r4
     384:	00000476 	andeq	r0, r0, r6, ror r4
	...
     390:	0000047c 	andeq	r0, r0, ip, ror r4
     394:	00000480 	andeq	r0, r0, r0, lsl #9
     398:	00000484 	andeq	r0, r0, r4, lsl #9
     39c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     3a8:	0000047c 	andeq	r0, r0, ip, ror r4
     3ac:	00000480 	andeq	r0, r0, r0, lsl #9
     3b0:	00000484 	andeq	r0, r0, r4, lsl #9
     3b4:	000004d4 	ldrdeq	r0, [r0], -r4
     3b8:	000004d8 	ldrdeq	r0, [r0], -r8
     3bc:	000004de 	ldrdeq	r0, [r0], -lr
	...
     3c8:	0000049a 	muleq	r0, sl, r4
     3cc:	000004a2 	andeq	r0, r0, r2, lsr #9
     3d0:	000004a6 	andeq	r0, r0, r6, lsr #9
     3d4:	000004a8 	andeq	r0, r0, r8, lsr #9
     3d8:	000004aa 	andeq	r0, r0, sl, lsr #9
     3dc:	000004ca 	andeq	r0, r0, sl, asr #9
	...
     3e8:	000004d4 	ldrdeq	r0, [r0], -r4
     3ec:	000004d8 	ldrdeq	r0, [r0], -r8
     3f0:	000004de 	ldrdeq	r0, [r0], -lr
     3f4:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     400:	000004ec 	andeq	r0, r0, ip, ror #9
     404:	000004ee 	andeq	r0, r0, lr, ror #9
     408:	000004f4 	strdeq	r0, [r0], -r4
     40c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     418:	00000514 	andeq	r0, r0, r4, lsl r5
     41c:	00000518 	andeq	r0, r0, r8, lsl r5
     420:	0000051c 	andeq	r0, r0, ip, lsl r5
     424:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     430:	00000514 	andeq	r0, r0, r4, lsl r5
     434:	00000518 	andeq	r0, r0, r8, lsl r5
     438:	0000051c 	andeq	r0, r0, ip, lsl r5
     43c:	0000056c 	andeq	r0, r0, ip, ror #10
     440:	00000570 	andeq	r0, r0, r0, ror r5
     444:	00000576 	andeq	r0, r0, r6, ror r5
	...
     450:	00000532 	andeq	r0, r0, r2, lsr r5
     454:	0000053a 	andeq	r0, r0, sl, lsr r5
     458:	0000053e 	andeq	r0, r0, lr, lsr r5
     45c:	00000540 	andeq	r0, r0, r0, asr #10
     460:	00000542 	andeq	r0, r0, r2, asr #10
     464:	00000562 	andeq	r0, r0, r2, ror #10
	...
     470:	0000056c 	andeq	r0, r0, ip, ror #10
     474:	00000570 	andeq	r0, r0, r0, ror r5
     478:	00000576 	andeq	r0, r0, r6, ror r5
     47c:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     488:	00000584 	andeq	r0, r0, r4, lsl #11
     48c:	00000586 	andeq	r0, r0, r6, lsl #11
     490:	0000058c 	andeq	r0, r0, ip, lsl #11
     494:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     4a0:	000005a8 	andeq	r0, r0, r8, lsr #11
     4a4:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     4a8:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     4ac:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     4b0:	000005be 			; <UNDEFINED> instruction: 0x000005be
     4b4:	000005c2 	andeq	r0, r0, r2, asr #11
     4b8:	000005c4 	andeq	r0, r0, r4, asr #11
     4bc:	00000606 	andeq	r0, r0, r6, lsl #12
	...
     4c8:	000005cc 	andeq	r0, r0, ip, asr #11
     4cc:	000005d6 	ldrdeq	r0, [r0], -r6
     4d0:	000005dc 	ldrdeq	r0, [r0], -ip
     4d4:	000005f4 	strdeq	r0, [r0], -r4
	...
     4e0:	0000060a 	andeq	r0, r0, sl, lsl #12
     4e4:	00000614 	andeq	r0, r0, r4, lsl r6
     4e8:	00000618 	andeq	r0, r0, r8, lsl r6
     4ec:	0000061c 	andeq	r0, r0, ip, lsl r6
     4f0:	00000620 	andeq	r0, r0, r0, lsr #12
     4f4:	00000624 	andeq	r0, r0, r4, lsr #12
     4f8:	00000626 	andeq	r0, r0, r6, lsr #12
     4fc:	00000670 	andeq	r0, r0, r0, ror r6
     500:	00000674 	andeq	r0, r0, r4, ror r6
     504:	0000067c 	andeq	r0, r0, ip, ror r6
	...
     510:	00000632 	andeq	r0, r0, r2, lsr r6
     514:	0000063c 	andeq	r0, r0, ip, lsr r6
     518:	00000644 	andeq	r0, r0, r4, asr #12
     51c:	00000664 	andeq	r0, r0, r4, ror #12
	...
     528:	00000670 	andeq	r0, r0, r0, ror r6
     52c:	00000674 	andeq	r0, r0, r4, ror r6
     530:	0000067c 	andeq	r0, r0, ip, ror r6
     534:	0000068e 	andeq	r0, r0, lr, lsl #13
     538:	00000692 	muleq	r0, r2, r6
     53c:	000006c6 	andeq	r0, r0, r6, asr #13
     540:	000006ca 	andeq	r0, r0, sl, asr #13
     544:	000006d2 	ldrdeq	r0, [r0], -r2
	...
     550:	000006c6 	andeq	r0, r0, r6, asr #13
     554:	000006ca 	andeq	r0, r0, sl, asr #13
     558:	000006d2 	ldrdeq	r0, [r0], -r2
     55c:	00000716 	andeq	r0, r0, r6, lsl r7
     560:	0000071a 	andeq	r0, r0, sl, lsl r7
     564:	00000720 	andeq	r0, r0, r0, lsr #14
	...
     570:	000006e4 	andeq	r0, r0, r4, ror #13
     574:	000006e6 	andeq	r0, r0, r6, ror #13
     578:	000006ec 	andeq	r0, r0, ip, ror #13
     57c:	0000070c 	andeq	r0, r0, ip, lsl #14
	...
     588:	00000716 	andeq	r0, r0, r6, lsl r7
     58c:	0000071a 	andeq	r0, r0, sl, lsl r7
     590:	00000720 	andeq	r0, r0, r0, lsr #14
     594:	0000072e 	andeq	r0, r0, lr, lsr #14
     598:	00000730 	andeq	r0, r0, r0, lsr r7
     59c:	00000760 	andeq	r0, r0, r0, ror #14
     5a0:	00000764 	andeq	r0, r0, r4, ror #14
     5a4:	0000076a 	andeq	r0, r0, sl, ror #14
	...
     5b0:	00000760 	andeq	r0, r0, r0, ror #14
     5b4:	00000764 	andeq	r0, r0, r4, ror #14
     5b8:	0000076a 	andeq	r0, r0, sl, ror #14
     5bc:	000007aa 	andeq	r0, r0, sl, lsr #15
     5c0:	000007ae 	andeq	r0, r0, lr, lsr #15
     5c4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
	...
     5d0:	00000778 	andeq	r0, r0, r8, ror r7
     5d4:	0000077a 	andeq	r0, r0, sl, ror r7
     5d8:	00000780 	andeq	r0, r0, r0, lsl #15
     5dc:	000007a0 	andeq	r0, r0, r0, lsr #15
	...
     5e8:	000007aa 	andeq	r0, r0, sl, lsr #15
     5ec:	000007ae 	andeq	r0, r0, lr, lsr #15
     5f0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     5f4:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     5f8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     5fc:	000007f6 	strdeq	r0, [r0], -r6
     600:	000007fa 	strdeq	r0, [r0], -sl
     604:	00000800 	andeq	r0, r0, r0, lsl #16
	...
     610:	000007c4 	andeq	r0, r0, r4, asr #15
     614:	000007c6 	andeq	r0, r0, r6, asr #15
     618:	000007cc 	andeq	r0, r0, ip, asr #15
     61c:	000007ec 	andeq	r0, r0, ip, ror #15
	...
     628:	000007f6 	strdeq	r0, [r0], -r6
     62c:	000007fa 	strdeq	r0, [r0], -sl
     630:	00000800 	andeq	r0, r0, r0, lsl #16
     634:	0000080e 	andeq	r0, r0, lr, lsl #16
     638:	00000810 	andeq	r0, r0, r0, lsl r8
     63c:	00000840 	andeq	r0, r0, r0, asr #16
     640:	00000844 	andeq	r0, r0, r4, asr #16
     644:	0000084a 	andeq	r0, r0, sl, asr #16
	...
     650:	00000840 	andeq	r0, r0, r0, asr #16
     654:	00000844 	andeq	r0, r0, r4, asr #16
     658:	0000084a 	andeq	r0, r0, sl, asr #16
     65c:	0000088a 	andeq	r0, r0, sl, lsl #17
     660:	0000088e 	andeq	r0, r0, lr, lsl #17
     664:	00000894 	muleq	r0, r4, r8
	...
     670:	00000858 	andeq	r0, r0, r8, asr r8
     674:	0000085a 	andeq	r0, r0, sl, asr r8
     678:	00000860 	andeq	r0, r0, r0, ror #16
     67c:	00000880 	andeq	r0, r0, r0, lsl #17
	...
     688:	0000088a 	andeq	r0, r0, sl, lsl #17
     68c:	0000088e 	andeq	r0, r0, lr, lsl #17
     690:	00000894 	muleq	r0, r4, r8
     694:	000008a2 	andeq	r0, r0, r2, lsr #17
     698:	000008a4 	andeq	r0, r0, r4, lsr #17
     69c:	000008d4 	ldrdeq	r0, [r0], -r4
     6a0:	000008d8 	ldrdeq	r0, [r0], -r8
     6a4:	000008de 	ldrdeq	r0, [r0], -lr
	...
     6b0:	000008d4 	ldrdeq	r0, [r0], -r4
     6b4:	000008d8 	ldrdeq	r0, [r0], -r8
     6b8:	000008de 	ldrdeq	r0, [r0], -lr
     6bc:	0000091e 	andeq	r0, r0, lr, lsl r9
     6c0:	00000922 	andeq	r0, r0, r2, lsr #18
     6c4:	00000928 	andeq	r0, r0, r8, lsr #18
	...
     6d0:	000008ec 	andeq	r0, r0, ip, ror #17
     6d4:	000008ee 	andeq	r0, r0, lr, ror #17
     6d8:	000008f4 	strdeq	r0, [r0], -r4
     6dc:	00000914 	andeq	r0, r0, r4, lsl r9
	...
     6e8:	0000091e 	andeq	r0, r0, lr, lsl r9
     6ec:	00000922 	andeq	r0, r0, r2, lsr #18
     6f0:	00000928 	andeq	r0, r0, r8, lsr #18
     6f4:	00000968 	andeq	r0, r0, r8, ror #18
	...
     700:	0000091e 	andeq	r0, r0, lr, lsl r9
     704:	00000922 	andeq	r0, r0, r2, lsr #18
     708:	00000928 	andeq	r0, r0, r8, lsr #18
     70c:	0000092a 	andeq	r0, r0, sl, lsr #18
     710:	0000092c 	andeq	r0, r0, ip, lsr #18
     714:	00000968 	andeq	r0, r0, r8, ror #18
	...
     720:	00000938 	andeq	r0, r0, r8, lsr r9
     724:	0000093a 	andeq	r0, r0, sl, lsr r9
     728:	00000940 	andeq	r0, r0, r0, asr #18
     72c:	00000958 	andeq	r0, r0, r8, asr r9
	...
     738:	00000988 	andeq	r0, r0, r8, lsl #19
     73c:	000009a8 	andeq	r0, r0, r8, lsr #19
     740:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     744:	000009ea 	andeq	r0, r0, sl, ror #19
     748:	000009ee 	andeq	r0, r0, lr, ror #19
     74c:	000009f2 	strdeq	r0, [r0], -r2
     750:	000009f4 	strdeq	r0, [r0], -r4
     754:	000009f6 	strdeq	r0, [r0], -r6
	...
     760:	00000990 	muleq	r0, r0, r9
     764:	00000994 	muleq	r0, r4, r9
     768:	0000099c 	muleq	r0, ip, r9
     76c:	000009a8 	andeq	r0, r0, r8, lsr #19
     770:	000009c0 	andeq	r0, r0, r0, asr #19
     774:	000009d8 	ldrdeq	r0, [r0], -r8
	...
     780:	00000a26 	andeq	r0, r0, r6, lsr #20
     784:	00000a30 	andeq	r0, r0, r0, lsr sl
     788:	00000a34 	andeq	r0, r0, r4, lsr sl
     78c:	00000a38 	andeq	r0, r0, r8, lsr sl
     790:	00000a3c 	andeq	r0, r0, ip, lsr sl
     794:	00000a40 	andeq	r0, r0, r0, asr #20
     798:	00000a42 	andeq	r0, r0, r2, asr #20
     79c:	00000a84 	andeq	r0, r0, r4, lsl #21
     7a0:	00000a88 	andeq	r0, r0, r8, lsl #21
     7a4:	00000a8e 	andeq	r0, r0, lr, lsl #21
	...
     7b0:	00000a4a 	andeq	r0, r0, sl, asr #20
     7b4:	00000a54 	andeq	r0, r0, r4, asr sl
     7b8:	00000a5a 	andeq	r0, r0, sl, asr sl
     7bc:	00000a7a 	andeq	r0, r0, sl, ror sl
	...
     7c8:	00000a84 	andeq	r0, r0, r4, lsl #21
     7cc:	00000a88 	andeq	r0, r0, r8, lsl #21
     7d0:	00000a8e 	andeq	r0, r0, lr, lsl #21
     7d4:	00000a9c 	muleq	r0, ip, sl
     7d8:	00000a9e 	muleq	r0, lr, sl
     7dc:	00000ace 	andeq	r0, r0, lr, asr #21
     7e0:	00000ad2 	ldrdeq	r0, [r0], -r2
     7e4:	00000ad8 	ldrdeq	r0, [r0], -r8
	...
     7f0:	00000ace 	andeq	r0, r0, lr, asr #21
     7f4:	00000ad2 	ldrdeq	r0, [r0], -r2
     7f8:	00000ad8 	ldrdeq	r0, [r0], -r8
     7fc:	00000b18 	andeq	r0, r0, r8, lsl fp
     800:	00000b1c 	andeq	r0, r0, ip, lsl fp
     804:	00000b22 	andeq	r0, r0, r2, lsr #22
	...
     810:	00000ae6 	andeq	r0, r0, r6, ror #21
     814:	00000ae8 	andeq	r0, r0, r8, ror #21
     818:	00000aee 	andeq	r0, r0, lr, ror #21
     81c:	00000b0e 	andeq	r0, r0, lr, lsl #22
	...
     828:	00000b18 	andeq	r0, r0, r8, lsl fp
     82c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     830:	00000b22 	andeq	r0, r0, r2, lsr #22
     834:	00000b60 	andeq	r0, r0, r0, ror #22
     838:	00000b64 	andeq	r0, r0, r4, ror #22
     83c:	00000b6a 	andeq	r0, r0, sl, ror #22
	...
     848:	00000b30 	andeq	r0, r0, r0, lsr fp
     84c:	00000b32 	andeq	r0, r0, r2, lsr fp
     850:	00000b38 	andeq	r0, r0, r8, lsr fp
     854:	00000b56 	andeq	r0, r0, r6, asr fp
	...
     860:	00000b60 	andeq	r0, r0, r0, ror #22
     864:	00000b64 	andeq	r0, r0, r4, ror #22
     868:	00000b6a 	andeq	r0, r0, sl, ror #22
     86c:	00000ba8 	andeq	r0, r0, r8, lsr #23
     870:	00000bac 	andeq	r0, r0, ip, lsr #23
     874:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
	...
     880:	00000b78 	andeq	r0, r0, r8, ror fp
     884:	00000b7a 	andeq	r0, r0, sl, ror fp
     888:	00000b80 	andeq	r0, r0, r0, lsl #23
     88c:	00000b9e 	muleq	r0, lr, fp
	...
     898:	00000ba8 	andeq	r0, r0, r8, lsr #23
     89c:	00000bac 	andeq	r0, r0, ip, lsr #23
     8a0:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
     8a4:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
     8a8:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
     8ac:	00000bf4 	strdeq	r0, [r0], -r4
     8b0:	00000bf8 	strdeq	r0, [r0], -r8
     8b4:	00000bfe 	strdeq	r0, [r0], -lr
	...
     8c0:	00000bc2 	andeq	r0, r0, r2, asr #23
     8c4:	00000bc4 	andeq	r0, r0, r4, asr #23
     8c8:	00000bca 	andeq	r0, r0, sl, asr #23
     8cc:	00000bea 	andeq	r0, r0, sl, ror #23
	...
     8d8:	00000bf4 	strdeq	r0, [r0], -r4
     8dc:	00000bf8 	strdeq	r0, [r0], -r8
     8e0:	00000bfe 	strdeq	r0, [r0], -lr
     8e4:	00000c0c 	andeq	r0, r0, ip, lsl #24
     8e8:	00000c0e 	andeq	r0, r0, lr, lsl #24
     8ec:	00000c3e 	andeq	r0, r0, lr, lsr ip
     8f0:	00000c42 	andeq	r0, r0, r2, asr #24
     8f4:	00000c48 	andeq	r0, r0, r8, asr #24
	...
     900:	00000c3e 	andeq	r0, r0, lr, lsr ip
     904:	00000c42 	andeq	r0, r0, r2, asr #24
     908:	00000c48 	andeq	r0, r0, r8, asr #24
     90c:	00000c88 	andeq	r0, r0, r8, lsl #25
     910:	00000c8c 	andeq	r0, r0, ip, lsl #25
     914:	00000c92 	muleq	r0, r2, ip
	...
     920:	00000c56 	andeq	r0, r0, r6, asr ip
     924:	00000c58 	andeq	r0, r0, r8, asr ip
     928:	00000c5e 	andeq	r0, r0, lr, asr ip
     92c:	00000c7e 	andeq	r0, r0, lr, ror ip
	...
     938:	00000c88 	andeq	r0, r0, r8, lsl #25
     93c:	00000c8c 	andeq	r0, r0, ip, lsl #25
     940:	00000c92 	muleq	r0, r2, ip
     944:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     948:	00000cd4 	ldrdeq	r0, [r0], -r4
     94c:	00000cda 	ldrdeq	r0, [r0], -sl
	...
     958:	00000ca0 	andeq	r0, r0, r0, lsr #25
     95c:	00000ca2 	andeq	r0, r0, r2, lsr #25
     960:	00000ca8 	andeq	r0, r0, r8, lsr #25
     964:	00000cc6 	andeq	r0, r0, r6, asr #25
	...
     970:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     974:	00000cd4 	ldrdeq	r0, [r0], -r4
     978:	00000cda 	ldrdeq	r0, [r0], -sl
     97c:	00000d18 	andeq	r0, r0, r8, lsl sp
     980:	00000d1c 	andeq	r0, r0, ip, lsl sp
     984:	00000d22 	andeq	r0, r0, r2, lsr #26
	...
     990:	00000ce8 	andeq	r0, r0, r8, ror #25
     994:	00000cea 	andeq	r0, r0, sl, ror #25
     998:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     99c:	00000d0e 	andeq	r0, r0, lr, lsl #26
	...
     9a8:	00000d18 	andeq	r0, r0, r8, lsl sp
     9ac:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9b0:	00000d22 	andeq	r0, r0, r2, lsr #26
     9b4:	00000d62 	andeq	r0, r0, r2, ror #26
	...
     9c0:	00000d18 	andeq	r0, r0, r8, lsl sp
     9c4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9c8:	00000d22 	andeq	r0, r0, r2, lsr #26
     9cc:	00000d24 	andeq	r0, r0, r4, lsr #26
     9d0:	00000d26 	andeq	r0, r0, r6, lsr #26
     9d4:	00000d62 	andeq	r0, r0, r2, ror #26
	...
     9e0:	00000d32 	andeq	r0, r0, r2, lsr sp
     9e4:	00000d34 	andeq	r0, r0, r4, lsr sp
     9e8:	00000d3a 	andeq	r0, r0, sl, lsr sp
     9ec:	00000d52 	andeq	r0, r0, r2, asr sp
	...
     9f8:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
     9fc:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
     a00:	00000dc0 	andeq	r0, r0, r0, asr #27
     a04:	00000dd6 	ldrdeq	r0, [r0], -r6
	...
     a10:	00000e6a 	andeq	r0, r0, sl, ror #28
     a14:	00000e6e 	andeq	r0, r0, lr, ror #28
     a18:	00000e70 	andeq	r0, r0, r0, ror lr
     a1c:	00000e76 	andeq	r0, r0, r6, ror lr
     a20:	00000e7a 	andeq	r0, r0, sl, ror lr
     a24:	00000e90 	muleq	r0, r0, lr
	...
     a30:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
     a34:	00000f00 	andeq	r0, r0, r0, lsl #30
     a38:	00000f04 	andeq	r0, r0, r4, lsl #30
     a3c:	00000f0c 	andeq	r0, r0, ip, lsl #30
	...
     a48:	00000f00 	andeq	r0, r0, r0, lsl #30
     a4c:	00000f04 	andeq	r0, r0, r4, lsl #30
     a50:	00000f0c 	andeq	r0, r0, ip, lsl #30
     a54:	00000f1e 	andeq	r0, r0, lr, lsl pc
     a58:	00000f20 	andeq	r0, r0, r0, lsr #30
     a5c:	00000f2c 	andeq	r0, r0, ip, lsr #30
     a60:	00000f2e 	andeq	r0, r0, lr, lsr #30
     a64:	00000f3a 	andeq	r0, r0, sl, lsr pc
     a68:	00000f3e 	andeq	r0, r0, lr, lsr pc
     a6c:	00000f48 	andeq	r0, r0, r8, asr #30
	...
     a78:	00000f2c 	andeq	r0, r0, ip, lsr #30
     a7c:	00000f2e 	andeq	r0, r0, lr, lsr #30
     a80:	00000f3a 	andeq	r0, r0, sl, lsr pc
     a84:	00000f3e 	andeq	r0, r0, lr, lsr pc
     a88:	00000f4a 	andeq	r0, r0, sl, asr #30
     a8c:	00000f4e 	andeq	r0, r0, lr, asr #30
     a90:	00000f54 	andeq	r0, r0, r4, asr pc
     a94:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
	...
     aa0:	00000f2c 	andeq	r0, r0, ip, lsr #30
     aa4:	00000f2e 	andeq	r0, r0, lr, lsr #30
     aa8:	00000f3a 	andeq	r0, r0, sl, lsr pc
     aac:	00000f3e 	andeq	r0, r0, lr, lsr pc
     ab0:	00000f4a 	andeq	r0, r0, sl, asr #30
     ab4:	00000f4e 	andeq	r0, r0, lr, asr #30
     ab8:	00000f5c 	andeq	r0, r0, ip, asr pc
     abc:	00000f70 	andeq	r0, r0, r0, ror pc
	...
     ac8:	00000f7a 	andeq	r0, r0, sl, ror pc
     acc:	00000f7c 	andeq	r0, r0, ip, ror pc
     ad0:	00000f82 	andeq	r0, r0, r2, lsl #31
     ad4:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
	...
     ae0:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
     ae4:	00000ff8 	strdeq	r0, [r0], -r8
     ae8:	00000ffc 	strdeq	r0, [r0], -ip
     aec:	00001002 	andeq	r1, r0, r2
	...
     af8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     afc:	00000fc0 	andeq	r0, r0, r0, asr #31
     b00:	00000fc4 	andeq	r0, r0, r4, asr #31
     b04:	00000fc6 	andeq	r0, r0, r6, asr #31
     b08:	00000fc8 	andeq	r0, r0, r8, asr #31
     b0c:	00000fee 	andeq	r0, r0, lr, ror #31
	...
     b18:	00000ff8 	strdeq	r0, [r0], -r8
     b1c:	00000ffc 	strdeq	r0, [r0], -ip
     b20:	00001002 	andeq	r1, r0, r2
     b24:	00001040 	andeq	r1, r0, r0, asr #32
     b28:	00001044 	andeq	r1, r0, r4, asr #32
     b2c:	0000104a 	andeq	r1, r0, sl, asr #32
	...
     b38:	00001010 	andeq	r1, r0, r0, lsl r0
     b3c:	00001012 	andeq	r1, r0, r2, lsl r0
     b40:	00001018 	andeq	r1, r0, r8, lsl r0
     b44:	00001036 	andeq	r1, r0, r6, lsr r0
	...
     b50:	00001040 	andeq	r1, r0, r0, asr #32
     b54:	00001044 	andeq	r1, r0, r4, asr #32
     b58:	0000104a 	andeq	r1, r0, sl, asr #32
     b5c:	0000108a 	andeq	r1, r0, sl, lsl #1
     b60:	0000108e 	andeq	r1, r0, lr, lsl #1
     b64:	00001094 	muleq	r0, r4, r0
	...
     b70:	00001058 	andeq	r1, r0, r8, asr r0
     b74:	0000105a 	andeq	r1, r0, sl, asr r0
     b78:	00001060 	andeq	r1, r0, r0, rrx
     b7c:	00001080 	andeq	r1, r0, r0, lsl #1
	...
     b88:	0000108a 	andeq	r1, r0, sl, lsl #1
     b8c:	0000108e 	andeq	r1, r0, lr, lsl #1
     b90:	00001094 	muleq	r0, r4, r0
     b94:	000010d4 	ldrdeq	r1, [r0], -r4
     b98:	000010d8 	ldrdeq	r1, [r0], -r8
     b9c:	000010de 	ldrdeq	r1, [r0], -lr
	...
     ba8:	000010a2 	andeq	r1, r0, r2, lsr #1
     bac:	000010a4 	andeq	r1, r0, r4, lsr #1
     bb0:	000010aa 	andeq	r1, r0, sl, lsr #1
     bb4:	000010ca 	andeq	r1, r0, sl, asr #1
	...
     bc0:	000010d4 	ldrdeq	r1, [r0], -r4
     bc4:	000010d8 	ldrdeq	r1, [r0], -r8
     bc8:	000010de 	ldrdeq	r1, [r0], -lr
     bcc:	0000111e 	andeq	r1, r0, lr, lsl r1
     bd0:	00001122 	andeq	r1, r0, r2, lsr #2
     bd4:	00001128 	andeq	r1, r0, r8, lsr #2
	...
     be0:	000010ec 	andeq	r1, r0, ip, ror #1
     be4:	000010ee 	andeq	r1, r0, lr, ror #1
     be8:	000010f4 	strdeq	r1, [r0], -r4
     bec:	00001114 	andeq	r1, r0, r4, lsl r1
	...
     bf8:	0000111e 	andeq	r1, r0, lr, lsl r1
     bfc:	00001122 	andeq	r1, r0, r2, lsr #2
     c00:	00001128 	andeq	r1, r0, r8, lsr #2
     c04:	00001168 	andeq	r1, r0, r8, ror #2
     c08:	0000116c 	andeq	r1, r0, ip, ror #2
     c0c:	00001172 	andeq	r1, r0, r2, ror r1
	...
     c18:	00001136 	andeq	r1, r0, r6, lsr r1
     c1c:	00001138 	andeq	r1, r0, r8, lsr r1
     c20:	0000113e 	andeq	r1, r0, lr, lsr r1
     c24:	0000115e 	andeq	r1, r0, lr, asr r1
	...
     c30:	00001168 	andeq	r1, r0, r8, ror #2
     c34:	0000116c 	andeq	r1, r0, ip, ror #2
     c38:	00001172 	andeq	r1, r0, r2, ror r1
     c3c:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
     c40:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     c44:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
	...
     c50:	00001180 	andeq	r1, r0, r0, lsl #3
     c54:	00001182 	andeq	r1, r0, r2, lsl #3
     c58:	00001188 	andeq	r1, r0, r8, lsl #3
     c5c:	000011a8 	andeq	r1, r0, r8, lsr #3
	...
     c68:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
     c6c:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     c70:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     c74:	000011fc 	strdeq	r1, [r0], -ip
     c78:	00001200 	andeq	r1, r0, r0, lsl #4
     c7c:	00001206 	andeq	r1, r0, r6, lsl #4
	...
     c88:	000011ca 	andeq	r1, r0, sl, asr #3
     c8c:	000011cc 	andeq	r1, r0, ip, asr #3
     c90:	000011d2 	ldrdeq	r1, [r0], -r2
     c94:	000011f2 	strdeq	r1, [r0], -r2
	...
     ca0:	000011fc 	strdeq	r1, [r0], -ip
     ca4:	00001200 	andeq	r1, r0, r0, lsl #4
     ca8:	00001206 	andeq	r1, r0, r6, lsl #4
     cac:	00001246 	andeq	r1, r0, r6, asr #4
     cb0:	0000124a 	andeq	r1, r0, sl, asr #4
     cb4:	00001250 	andeq	r1, r0, r0, asr r2
	...
     cc0:	00001214 	andeq	r1, r0, r4, lsl r2
     cc4:	00001216 	andeq	r1, r0, r6, lsl r2
     cc8:	0000121c 	andeq	r1, r0, ip, lsl r2
     ccc:	0000123c 	andeq	r1, r0, ip, lsr r2
	...
     cd8:	00001246 	andeq	r1, r0, r6, asr #4
     cdc:	0000124a 	andeq	r1, r0, sl, asr #4
     ce0:	00001250 	andeq	r1, r0, r0, asr r2
     ce4:	00001290 	muleq	r0, r0, r2
     ce8:	00001294 	muleq	r0, r4, r2
     cec:	0000129a 	muleq	r0, sl, r2
	...
     cf8:	0000125e 	andeq	r1, r0, lr, asr r2
     cfc:	00001260 	andeq	r1, r0, r0, ror #4
     d00:	00001266 	andeq	r1, r0, r6, ror #4
     d04:	00001286 	andeq	r1, r0, r6, lsl #5
	...
     d10:	00001290 	muleq	r0, r0, r2
     d14:	00001294 	muleq	r0, r4, r2
     d18:	0000129a 	muleq	r0, sl, r2
     d1c:	000012da 	ldrdeq	r1, [r0], -sl
     d20:	000012de 	ldrdeq	r1, [r0], -lr
     d24:	000012e4 	andeq	r1, r0, r4, ror #5
	...
     d30:	000012a8 	andeq	r1, r0, r8, lsr #5
     d34:	000012aa 	andeq	r1, r0, sl, lsr #5
     d38:	000012b0 			; <UNDEFINED> instruction: 0x000012b0
     d3c:	000012d0 	ldrdeq	r1, [r0], -r0
	...
     d48:	000012da 	ldrdeq	r1, [r0], -sl
     d4c:	000012de 	ldrdeq	r1, [r0], -lr
     d50:	000012e4 	andeq	r1, r0, r4, ror #5
     d54:	00001324 	andeq	r1, r0, r4, lsr #6
     d58:	00001328 	andeq	r1, r0, r8, lsr #6
     d5c:	0000132e 	andeq	r1, r0, lr, lsr #6
	...
     d68:	000012f2 	strdeq	r1, [r0], -r2
     d6c:	000012f4 	strdeq	r1, [r0], -r4
     d70:	000012fa 	strdeq	r1, [r0], -sl
     d74:	0000131a 	andeq	r1, r0, sl, lsl r3
	...
     d80:	00001324 	andeq	r1, r0, r4, lsr #6
     d84:	00001328 	andeq	r1, r0, r8, lsr #6
     d88:	0000132e 	andeq	r1, r0, lr, lsr #6
     d8c:	0000136e 	andeq	r1, r0, lr, ror #6
     d90:	00001372 	andeq	r1, r0, r2, ror r3
     d94:	00001378 	andeq	r1, r0, r8, ror r3
	...
     da0:	0000133c 	andeq	r1, r0, ip, lsr r3
     da4:	0000133e 	andeq	r1, r0, lr, lsr r3
     da8:	00001344 	andeq	r1, r0, r4, asr #6
     dac:	00001364 	andeq	r1, r0, r4, ror #6
	...
     db8:	0000136e 	andeq	r1, r0, lr, ror #6
     dbc:	00001372 	andeq	r1, r0, r2, ror r3
     dc0:	00001378 	andeq	r1, r0, r8, ror r3
     dc4:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     dc8:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     dcc:	000013c2 	andeq	r1, r0, r2, asr #7
	...
     dd8:	00001386 	andeq	r1, r0, r6, lsl #7
     ddc:	00001388 	andeq	r1, r0, r8, lsl #7
     de0:	0000138e 	andeq	r1, r0, lr, lsl #7
     de4:	000013ae 	andeq	r1, r0, lr, lsr #7
	...
     df0:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     df4:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     df8:	000013c2 	andeq	r1, r0, r2, asr #7
     dfc:	00001402 	andeq	r1, r0, r2, lsl #8
     e00:	00001406 	andeq	r1, r0, r6, lsl #8
     e04:	0000140c 	andeq	r1, r0, ip, lsl #8
	...
     e10:	000013d0 	ldrdeq	r1, [r0], -r0
     e14:	000013d2 	ldrdeq	r1, [r0], -r2
     e18:	000013d8 	ldrdeq	r1, [r0], -r8
     e1c:	000013f8 	strdeq	r1, [r0], -r8
	...
     e28:	00001402 	andeq	r1, r0, r2, lsl #8
     e2c:	00001406 	andeq	r1, r0, r6, lsl #8
     e30:	0000140c 	andeq	r1, r0, ip, lsl #8
     e34:	00001452 	andeq	r1, r0, r2, asr r4
     e38:	00001456 	andeq	r1, r0, r6, asr r4
     e3c:	0000145c 	andeq	r1, r0, ip, asr r4
	...
     e48:	0000141a 	andeq	r1, r0, sl, lsl r4
     e4c:	0000141c 	andeq	r1, r0, ip, lsl r4
     e50:	00001422 	andeq	r1, r0, r2, lsr #8
     e54:	00001448 	andeq	r1, r0, r8, asr #8
	...
     e60:	00001452 	andeq	r1, r0, r2, asr r4
     e64:	00001456 	andeq	r1, r0, r6, asr r4
     e68:	0000145c 	andeq	r1, r0, ip, asr r4
     e6c:	0000149a 	muleq	r0, sl, r4
     e70:	0000149e 	muleq	r0, lr, r4
     e74:	000014a4 	andeq	r1, r0, r4, lsr #9
	...
     e80:	0000146a 	andeq	r1, r0, sl, ror #8
     e84:	0000146c 	andeq	r1, r0, ip, ror #8
     e88:	00001472 	andeq	r1, r0, r2, ror r4
     e8c:	00001490 	muleq	r0, r0, r4
	...
     e98:	0000149a 	muleq	r0, sl, r4
     e9c:	0000149e 	muleq	r0, lr, r4
     ea0:	000014a4 	andeq	r1, r0, r4, lsr #9
     ea4:	000014e4 	andeq	r1, r0, r4, ror #9
     ea8:	000014e8 	andeq	r1, r0, r8, ror #9
     eac:	000014ee 	andeq	r1, r0, lr, ror #9
	...
     eb8:	000014b2 			; <UNDEFINED> instruction: 0x000014b2
     ebc:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
     ec0:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
     ec4:	000014da 	ldrdeq	r1, [r0], -sl
	...
     ed0:	000014e4 	andeq	r1, r0, r4, ror #9
     ed4:	000014e8 	andeq	r1, r0, r8, ror #9
     ed8:	000014ee 	andeq	r1, r0, lr, ror #9
     edc:	0000152e 	andeq	r1, r0, lr, lsr #10
     ee0:	00001532 	andeq	r1, r0, r2, lsr r5
     ee4:	00001538 	andeq	r1, r0, r8, lsr r5
	...
     ef0:	000014fc 	strdeq	r1, [r0], -ip
     ef4:	000014fe 	strdeq	r1, [r0], -lr
     ef8:	00001504 	andeq	r1, r0, r4, lsl #10
     efc:	00001524 	andeq	r1, r0, r4, lsr #10
	...
     f08:	0000152e 	andeq	r1, r0, lr, lsr #10
     f0c:	00001532 	andeq	r1, r0, r2, lsr r5
     f10:	00001538 	andeq	r1, r0, r8, lsr r5
     f14:	00001578 	andeq	r1, r0, r8, ror r5
     f18:	0000157c 	andeq	r1, r0, ip, ror r5
     f1c:	00001582 	andeq	r1, r0, r2, lsl #11
	...
     f28:	00001546 	andeq	r1, r0, r6, asr #10
     f2c:	00001548 	andeq	r1, r0, r8, asr #10
     f30:	0000154e 	andeq	r1, r0, lr, asr #10
     f34:	0000156e 	andeq	r1, r0, lr, ror #10
	...
     f40:	00001578 	andeq	r1, r0, r8, ror r5
     f44:	0000157c 	andeq	r1, r0, ip, ror r5
     f48:	00001582 	andeq	r1, r0, r2, lsl #11
     f4c:	000015c2 	andeq	r1, r0, r2, asr #11
     f50:	000015c6 	andeq	r1, r0, r6, asr #11
     f54:	000015cc 	andeq	r1, r0, ip, asr #11
	...
     f60:	00001590 	muleq	r0, r0, r5
     f64:	00001592 	muleq	r0, r2, r5
     f68:	00001598 	muleq	r0, r8, r5
     f6c:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
	...
     f78:	000015c2 	andeq	r1, r0, r2, asr #11
     f7c:	000015c6 	andeq	r1, r0, r6, asr #11
     f80:	000015cc 	andeq	r1, r0, ip, asr #11
     f84:	00001612 	andeq	r1, r0, r2, lsl r6
     f88:	00001616 	andeq	r1, r0, r6, lsl r6
     f8c:	0000161c 	andeq	r1, r0, ip, lsl r6
	...
     f98:	000015da 	ldrdeq	r1, [r0], -sl
     f9c:	000015dc 	ldrdeq	r1, [r0], -ip
     fa0:	000015e2 	andeq	r1, r0, r2, ror #11
     fa4:	00001608 	andeq	r1, r0, r8, lsl #12
	...
     fb0:	00001612 	andeq	r1, r0, r2, lsl r6
     fb4:	00001616 	andeq	r1, r0, r6, lsl r6
     fb8:	0000161c 	andeq	r1, r0, ip, lsl r6
     fbc:	00001660 	andeq	r1, r0, r0, ror #12
     fc0:	00001664 	andeq	r1, r0, r4, ror #12
     fc4:	0000166a 	andeq	r1, r0, sl, ror #12
	...
     fd0:	0000162a 	andeq	r1, r0, sl, lsr #12
     fd4:	0000162c 	andeq	r1, r0, ip, lsr #12
     fd8:	00001632 	andeq	r1, r0, r2, lsr r6
     fdc:	00001656 	andeq	r1, r0, r6, asr r6
	...
     fe8:	00001660 	andeq	r1, r0, r0, ror #12
     fec:	00001664 	andeq	r1, r0, r4, ror #12
     ff0:	0000166a 	andeq	r1, r0, sl, ror #12
     ff4:	000016a8 	andeq	r1, r0, r8, lsr #13
     ff8:	000016ac 	andeq	r1, r0, ip, lsr #13
     ffc:	000016b2 			; <UNDEFINED> instruction: 0x000016b2
	...
    1008:	00001678 	andeq	r1, r0, r8, ror r6
    100c:	0000167a 	andeq	r1, r0, sl, ror r6
    1010:	00001680 	andeq	r1, r0, r0, lsl #13
    1014:	0000169e 	muleq	r0, lr, r6
	...
    1020:	000016a8 	andeq	r1, r0, r8, lsr #13
    1024:	000016ac 	andeq	r1, r0, ip, lsr #13
    1028:	000016b2 			; <UNDEFINED> instruction: 0x000016b2
    102c:	000016f2 	strdeq	r1, [r0], -r2
    1030:	000016f6 	strdeq	r1, [r0], -r6
    1034:	000016fc 	strdeq	r1, [r0], -ip
	...
    1040:	000016c0 	andeq	r1, r0, r0, asr #13
    1044:	000016c2 	andeq	r1, r0, r2, asr #13
    1048:	000016c8 	andeq	r1, r0, r8, asr #13
    104c:	000016e8 	andeq	r1, r0, r8, ror #13
	...
    1058:	000016f2 	strdeq	r1, [r0], -r2
    105c:	000016f6 	strdeq	r1, [r0], -r6
    1060:	000016fc 	strdeq	r1, [r0], -ip
    1064:	0000173c 	andeq	r1, r0, ip, lsr r7
    1068:	00001740 	andeq	r1, r0, r0, asr #14
    106c:	00001746 	andeq	r1, r0, r6, asr #14
	...
    1078:	0000170a 	andeq	r1, r0, sl, lsl #14
    107c:	0000170c 	andeq	r1, r0, ip, lsl #14
    1080:	00001712 	andeq	r1, r0, r2, lsl r7
    1084:	00001732 	andeq	r1, r0, r2, lsr r7
	...
    1090:	0000173c 	andeq	r1, r0, ip, lsr r7
    1094:	00001740 	andeq	r1, r0, r0, asr #14
    1098:	00001746 	andeq	r1, r0, r6, asr #14
    109c:	00001786 	andeq	r1, r0, r6, lsl #15
    10a0:	0000178a 	andeq	r1, r0, sl, lsl #15
    10a4:	00001790 	muleq	r0, r0, r7
	...
    10b0:	00001754 	andeq	r1, r0, r4, asr r7
    10b4:	00001756 	andeq	r1, r0, r6, asr r7
    10b8:	0000175c 	andeq	r1, r0, ip, asr r7
    10bc:	0000177c 	andeq	r1, r0, ip, ror r7
	...
    10c8:	00001786 	andeq	r1, r0, r6, lsl #15
    10cc:	0000178a 	andeq	r1, r0, sl, lsl #15
    10d0:	00001790 	muleq	r0, r0, r7
    10d4:	000017d0 	ldrdeq	r1, [r0], -r0
    10d8:	000017d4 	ldrdeq	r1, [r0], -r4
    10dc:	000017da 	ldrdeq	r1, [r0], -sl
	...
    10e8:	0000179e 	muleq	r0, lr, r7
    10ec:	000017a0 	andeq	r1, r0, r0, lsr #15
    10f0:	000017a6 	andeq	r1, r0, r6, lsr #15
    10f4:	000017c6 	andeq	r1, r0, r6, asr #15
	...
    1100:	000017d0 	ldrdeq	r1, [r0], -r0
    1104:	000017d4 	ldrdeq	r1, [r0], -r4
    1108:	000017da 	ldrdeq	r1, [r0], -sl
    110c:	0000181a 	andeq	r1, r0, sl, lsl r8
    1110:	0000181e 	andeq	r1, r0, lr, lsl r8
    1114:	00001824 	andeq	r1, r0, r4, lsr #16
	...
    1120:	000017e8 	andeq	r1, r0, r8, ror #15
    1124:	000017ea 	andeq	r1, r0, sl, ror #15
    1128:	000017f0 	strdeq	r1, [r0], -r0
    112c:	00001810 	andeq	r1, r0, r0, lsl r8
	...
    1138:	0000181a 	andeq	r1, r0, sl, lsl r8
    113c:	0000181e 	andeq	r1, r0, lr, lsl r8
    1140:	00001824 	andeq	r1, r0, r4, lsr #16
    1144:	00001864 	andeq	r1, r0, r4, ror #16
    1148:	00001868 	andeq	r1, r0, r8, ror #16
    114c:	0000186e 	andeq	r1, r0, lr, ror #16
	...
    1158:	00001832 	andeq	r1, r0, r2, lsr r8
    115c:	00001834 	andeq	r1, r0, r4, lsr r8
    1160:	0000183a 	andeq	r1, r0, sl, lsr r8
    1164:	0000185a 	andeq	r1, r0, sl, asr r8
	...
    1170:	00001864 	andeq	r1, r0, r4, ror #16
    1174:	00001868 	andeq	r1, r0, r8, ror #16
    1178:	0000186e 	andeq	r1, r0, lr, ror #16
    117c:	000018ae 	andeq	r1, r0, lr, lsr #17
    1180:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    1184:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
	...
    1190:	0000187c 	andeq	r1, r0, ip, ror r8
    1194:	0000187e 	andeq	r1, r0, lr, ror r8
    1198:	00001884 	andeq	r1, r0, r4, lsl #17
    119c:	000018a4 	andeq	r1, r0, r4, lsr #17
	...
    11a8:	000018ae 	andeq	r1, r0, lr, lsr #17
    11ac:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    11b0:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
    11b4:	000018f8 	strdeq	r1, [r0], -r8
    11b8:	000018fc 	strdeq	r1, [r0], -ip
    11bc:	00001902 	andeq	r1, r0, r2, lsl #18
	...
    11c8:	000018c6 	andeq	r1, r0, r6, asr #17
    11cc:	000018c8 	andeq	r1, r0, r8, asr #17
    11d0:	000018ce 	andeq	r1, r0, lr, asr #17
    11d4:	000018ee 	andeq	r1, r0, lr, ror #17
	...
    11e0:	000018f8 	strdeq	r1, [r0], -r8
    11e4:	000018fc 	strdeq	r1, [r0], -ip
    11e8:	00001902 	andeq	r1, r0, r2, lsl #18
    11ec:	00001942 	andeq	r1, r0, r2, asr #18
    11f0:	00001946 	andeq	r1, r0, r6, asr #18
    11f4:	0000194c 	andeq	r1, r0, ip, asr #18
	...
    1200:	00001910 	andeq	r1, r0, r0, lsl r9
    1204:	00001912 	andeq	r1, r0, r2, lsl r9
    1208:	00001918 	andeq	r1, r0, r8, lsl r9
    120c:	00001938 	andeq	r1, r0, r8, lsr r9
	...
    1218:	00001942 	andeq	r1, r0, r2, asr #18
    121c:	00001946 	andeq	r1, r0, r6, asr #18
    1220:	0000194c 	andeq	r1, r0, ip, asr #18
    1224:	0000198c 	andeq	r1, r0, ip, lsl #19
    1228:	00001990 	muleq	r0, r0, r9
    122c:	00001996 	muleq	r0, r6, r9
	...
    1238:	0000195a 	andeq	r1, r0, sl, asr r9
    123c:	0000195c 	andeq	r1, r0, ip, asr r9
    1240:	00001962 	andeq	r1, r0, r2, ror #18
    1244:	00001982 	andeq	r1, r0, r2, lsl #19
	...
    1250:	0000198c 	andeq	r1, r0, ip, lsl #19
    1254:	00001990 	muleq	r0, r0, r9
    1258:	00001996 	muleq	r0, r6, r9
    125c:	000019d6 	ldrdeq	r1, [r0], -r6
    1260:	000019da 	ldrdeq	r1, [r0], -sl
    1264:	000019e0 	andeq	r1, r0, r0, ror #19
	...
    1270:	000019a4 	andeq	r1, r0, r4, lsr #19
    1274:	000019a6 	andeq	r1, r0, r6, lsr #19
    1278:	000019ac 	andeq	r1, r0, ip, lsr #19
    127c:	000019cc 	andeq	r1, r0, ip, asr #19
	...
    1288:	000019d6 	ldrdeq	r1, [r0], -r6
    128c:	000019da 	ldrdeq	r1, [r0], -sl
    1290:	000019e0 	andeq	r1, r0, r0, ror #19
    1294:	00001a20 	andeq	r1, r0, r0, lsr #20
    1298:	00001a24 	andeq	r1, r0, r4, lsr #20
    129c:	00001a2a 	andeq	r1, r0, sl, lsr #20
	...
    12a8:	000019ee 	andeq	r1, r0, lr, ror #19
    12ac:	000019f0 	strdeq	r1, [r0], -r0
    12b0:	000019f6 	strdeq	r1, [r0], -r6
    12b4:	00001a16 	andeq	r1, r0, r6, lsl sl
	...
    12c0:	00001a20 	andeq	r1, r0, r0, lsr #20
    12c4:	00001a24 	andeq	r1, r0, r4, lsr #20
    12c8:	00001a2a 	andeq	r1, r0, sl, lsr #20
    12cc:	00001a6a 	andeq	r1, r0, sl, ror #20
    12d0:	00001a6e 	andeq	r1, r0, lr, ror #20
    12d4:	00001a74 	andeq	r1, r0, r4, ror sl
	...
    12e0:	00001a38 	andeq	r1, r0, r8, lsr sl
    12e4:	00001a3a 	andeq	r1, r0, sl, lsr sl
    12e8:	00001a40 	andeq	r1, r0, r0, asr #20
    12ec:	00001a60 	andeq	r1, r0, r0, ror #20
	...
    12f8:	00001a6a 	andeq	r1, r0, sl, ror #20
    12fc:	00001a6e 	andeq	r1, r0, lr, ror #20
    1300:	00001a74 	andeq	r1, r0, r4, ror sl
    1304:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    1308:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    130c:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
	...
    1318:	00001a82 	andeq	r1, r0, r2, lsl #21
    131c:	00001a84 	andeq	r1, r0, r4, lsl #21
    1320:	00001a8a 	andeq	r1, r0, sl, lsl #21
    1324:	00001aaa 	andeq	r1, r0, sl, lsr #21
	...
    1330:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    1334:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    1338:	00001abe 			; <UNDEFINED> instruction: 0x00001abe
    133c:	00001afe 	strdeq	r1, [r0], -lr
    1340:	00001b02 	andeq	r1, r0, r2, lsl #22
    1344:	00001b08 	andeq	r1, r0, r8, lsl #22
	...
    1350:	00001acc 	andeq	r1, r0, ip, asr #21
    1354:	00001ace 	andeq	r1, r0, lr, asr #21
    1358:	00001ad4 	ldrdeq	r1, [r0], -r4
    135c:	00001af4 	strdeq	r1, [r0], -r4
	...
    1368:	00001afe 	strdeq	r1, [r0], -lr
    136c:	00001b02 	andeq	r1, r0, r2, lsl #22
    1370:	00001b08 	andeq	r1, r0, r8, lsl #22
    1374:	00001b48 	andeq	r1, r0, r8, asr #22
    1378:	00001b4c 	andeq	r1, r0, ip, asr #22
    137c:	00001b52 	andeq	r1, r0, r2, asr fp
	...
    1388:	00001b16 	andeq	r1, r0, r6, lsl fp
    138c:	00001b18 	andeq	r1, r0, r8, lsl fp
    1390:	00001b1e 	andeq	r1, r0, lr, lsl fp
    1394:	00001b3e 	andeq	r1, r0, lr, lsr fp
	...
    13a0:	00001b48 	andeq	r1, r0, r8, asr #22
    13a4:	00001b4c 	andeq	r1, r0, ip, asr #22
    13a8:	00001b52 	andeq	r1, r0, r2, asr fp
    13ac:	00001b92 	muleq	r0, r2, fp
    13b0:	00001b96 	muleq	r0, r6, fp
    13b4:	00001b9c 	muleq	r0, ip, fp
	...
    13c0:	00001b60 	andeq	r1, r0, r0, ror #22
    13c4:	00001b62 	andeq	r1, r0, r2, ror #22
    13c8:	00001b68 	andeq	r1, r0, r8, ror #22
    13cc:	00001b88 	andeq	r1, r0, r8, lsl #23
	...
    13d8:	00001b92 	muleq	r0, r2, fp
    13dc:	00001b96 	muleq	r0, r6, fp
    13e0:	00001b9c 	muleq	r0, ip, fp
    13e4:	00001bdc 	ldrdeq	r1, [r0], -ip
    13e8:	00001be0 	andeq	r1, r0, r0, ror #23
    13ec:	00001be6 	andeq	r1, r0, r6, ror #23
	...
    13f8:	00001baa 	andeq	r1, r0, sl, lsr #23
    13fc:	00001bac 	andeq	r1, r0, ip, lsr #23
    1400:	00001bb2 			; <UNDEFINED> instruction: 0x00001bb2
    1404:	00001bd2 	ldrdeq	r1, [r0], -r2
	...
    1410:	00001bdc 	ldrdeq	r1, [r0], -ip
    1414:	00001be0 	andeq	r1, r0, r0, ror #23
    1418:	00001be6 	andeq	r1, r0, r6, ror #23
    141c:	00001c26 	andeq	r1, r0, r6, lsr #24
    1420:	00001c2a 	andeq	r1, r0, sl, lsr #24
    1424:	00001c30 	andeq	r1, r0, r0, lsr ip
	...
    1430:	00001bf4 	strdeq	r1, [r0], -r4
    1434:	00001bf6 	strdeq	r1, [r0], -r6
    1438:	00001bfc 	strdeq	r1, [r0], -ip
    143c:	00001c1c 	andeq	r1, r0, ip, lsl ip
	...
    1448:	00001c26 	andeq	r1, r0, r6, lsr #24
    144c:	00001c2a 	andeq	r1, r0, sl, lsr #24
    1450:	00001c30 	andeq	r1, r0, r0, lsr ip
    1454:	00001c70 	andeq	r1, r0, r0, ror ip
    1458:	00001c74 	andeq	r1, r0, r4, ror ip
    145c:	00001c7a 	andeq	r1, r0, sl, ror ip
	...
    1468:	00001c3e 	andeq	r1, r0, lr, lsr ip
    146c:	00001c40 	andeq	r1, r0, r0, asr #24
    1470:	00001c46 	andeq	r1, r0, r6, asr #24
    1474:	00001c66 	andeq	r1, r0, r6, ror #24
	...
    1480:	00001c70 	andeq	r1, r0, r0, ror ip
    1484:	00001c74 	andeq	r1, r0, r4, ror ip
    1488:	00001c7a 	andeq	r1, r0, sl, ror ip
    148c:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
    1490:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    1494:	00001cc4 	andeq	r1, r0, r4, asr #25
	...
    14a0:	00001c88 	andeq	r1, r0, r8, lsl #25
    14a4:	00001c8a 	andeq	r1, r0, sl, lsl #25
    14a8:	00001c90 	muleq	r0, r0, ip
    14ac:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
	...
    14b8:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
    14bc:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    14c0:	00001cc4 	andeq	r1, r0, r4, asr #25
    14c4:	00001d0a 	andeq	r1, r0, sl, lsl #26
    14c8:	00001d0e 	andeq	r1, r0, lr, lsl #26
    14cc:	00001d14 	andeq	r1, r0, r4, lsl sp
	...
    14d8:	00001cd2 	ldrdeq	r1, [r0], -r2
    14dc:	00001cd4 	ldrdeq	r1, [r0], -r4
    14e0:	00001cda 	ldrdeq	r1, [r0], -sl
    14e4:	00001d00 	andeq	r1, r0, r0, lsl #26
	...
    14f0:	00001d0a 	andeq	r1, r0, sl, lsl #26
    14f4:	00001d0e 	andeq	r1, r0, lr, lsl #26
    14f8:	00001d14 	andeq	r1, r0, r4, lsl sp
    14fc:	00001d52 	andeq	r1, r0, r2, asr sp
    1500:	00001d56 	andeq	r1, r0, r6, asr sp
    1504:	00001d5c 	andeq	r1, r0, ip, asr sp
	...
    1510:	00001d22 	andeq	r1, r0, r2, lsr #26
    1514:	00001d24 	andeq	r1, r0, r4, lsr #26
    1518:	00001d2a 	andeq	r1, r0, sl, lsr #26
    151c:	00001d48 	andeq	r1, r0, r8, asr #26
	...
    1528:	00001d52 	andeq	r1, r0, r2, asr sp
    152c:	00001d56 	andeq	r1, r0, r6, asr sp
    1530:	00001d5c 	andeq	r1, r0, ip, asr sp
    1534:	00001d9c 	muleq	r0, ip, sp
    1538:	00001da0 	andeq	r1, r0, r0, lsr #27
    153c:	00001da6 	andeq	r1, r0, r6, lsr #27
	...
    1548:	00001d6a 	andeq	r1, r0, sl, ror #26
    154c:	00001d6c 	andeq	r1, r0, ip, ror #26
    1550:	00001d72 	andeq	r1, r0, r2, ror sp
    1554:	00001d92 	muleq	r0, r2, sp
	...
    1560:	00001d9c 	muleq	r0, ip, sp
    1564:	00001da0 	andeq	r1, r0, r0, lsr #27
    1568:	00001da6 	andeq	r1, r0, r6, lsr #27
    156c:	00001de6 	andeq	r1, r0, r6, ror #27
    1570:	00001dea 	andeq	r1, r0, sl, ror #27
    1574:	00001df0 	strdeq	r1, [r0], -r0
	...
    1580:	00001db4 			; <UNDEFINED> instruction: 0x00001db4
    1584:	00001db6 			; <UNDEFINED> instruction: 0x00001db6
    1588:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    158c:	00001ddc 	ldrdeq	r1, [r0], -ip
	...
    1598:	00001de6 	andeq	r1, r0, r6, ror #27
    159c:	00001dea 	andeq	r1, r0, sl, ror #27
    15a0:	00001df0 	strdeq	r1, [r0], -r0
    15a4:	00001e30 	andeq	r1, r0, r0, lsr lr
    15a8:	00001e34 	andeq	r1, r0, r4, lsr lr
    15ac:	00001e3a 	andeq	r1, r0, sl, lsr lr
	...
    15b8:	00001dfe 	strdeq	r1, [r0], -lr
    15bc:	00001e00 	andeq	r1, r0, r0, lsl #28
    15c0:	00001e06 	andeq	r1, r0, r6, lsl #28
    15c4:	00001e26 	andeq	r1, r0, r6, lsr #28
	...
    15d0:	00001e30 	andeq	r1, r0, r0, lsr lr
    15d4:	00001e34 	andeq	r1, r0, r4, lsr lr
    15d8:	00001e3a 	andeq	r1, r0, sl, lsr lr
    15dc:	00001e7a 	andeq	r1, r0, sl, ror lr
    15e0:	00001e7e 	andeq	r1, r0, lr, ror lr
    15e4:	00001e84 	andeq	r1, r0, r4, lsl #29
	...
    15f0:	00001e48 	andeq	r1, r0, r8, asr #28
    15f4:	00001e4a 	andeq	r1, r0, sl, asr #28
    15f8:	00001e50 	andeq	r1, r0, r0, asr lr
    15fc:	00001e70 	andeq	r1, r0, r0, ror lr
	...
    1608:	00001e7a 	andeq	r1, r0, sl, ror lr
    160c:	00001e7e 	andeq	r1, r0, lr, ror lr
    1610:	00001e84 	andeq	r1, r0, r4, lsl #29
    1614:	00001eca 	andeq	r1, r0, sl, asr #29
    1618:	00001ece 	andeq	r1, r0, lr, asr #29
    161c:	00001ed4 	ldrdeq	r1, [r0], -r4
	...
    1628:	00001e92 	muleq	r0, r2, lr
    162c:	00001e94 	muleq	r0, r4, lr
    1630:	00001e9a 	muleq	r0, sl, lr
    1634:	00001ec0 	andeq	r1, r0, r0, asr #29
	...
    1640:	00001eca 	andeq	r1, r0, sl, asr #29
    1644:	00001ece 	andeq	r1, r0, lr, asr #29
    1648:	00001ed4 	ldrdeq	r1, [r0], -r4
    164c:	00001f12 	andeq	r1, r0, r2, lsl pc
    1650:	00001f16 	andeq	r1, r0, r6, lsl pc
    1654:	00001f1c 	andeq	r1, r0, ip, lsl pc
	...
    1660:	00001ee2 	andeq	r1, r0, r2, ror #29
    1664:	00001ee4 	andeq	r1, r0, r4, ror #29
    1668:	00001eea 	andeq	r1, r0, sl, ror #29
    166c:	00001f08 	andeq	r1, r0, r8, lsl #30
	...
    1678:	00001f12 	andeq	r1, r0, r2, lsl pc
    167c:	00001f16 	andeq	r1, r0, r6, lsl pc
    1680:	00001f1c 	andeq	r1, r0, ip, lsl pc
    1684:	00001f5c 	andeq	r1, r0, ip, asr pc
    1688:	00001f60 	andeq	r1, r0, r0, ror #30
    168c:	00001f66 	andeq	r1, r0, r6, ror #30
	...
    1698:	00001f2a 	andeq	r1, r0, sl, lsr #30
    169c:	00001f2c 	andeq	r1, r0, ip, lsr #30
    16a0:	00001f32 	andeq	r1, r0, r2, lsr pc
    16a4:	00001f52 	andeq	r1, r0, r2, asr pc
	...
    16b0:	00001f5c 	andeq	r1, r0, ip, asr pc
    16b4:	00001f60 	andeq	r1, r0, r0, ror #30
    16b8:	00001f66 	andeq	r1, r0, r6, ror #30
    16bc:	00001fa6 	andeq	r1, r0, r6, lsr #31
    16c0:	00001faa 	andeq	r1, r0, sl, lsr #31
    16c4:	00001fb0 			; <UNDEFINED> instruction: 0x00001fb0
	...
    16d0:	00001f74 	andeq	r1, r0, r4, ror pc
    16d4:	00001f76 	andeq	r1, r0, r6, ror pc
    16d8:	00001f7c 	andeq	r1, r0, ip, ror pc
    16dc:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
	...
    16e8:	00001fa6 	andeq	r1, r0, r6, lsr #31
    16ec:	00001faa 	andeq	r1, r0, sl, lsr #31
    16f0:	00001fb0 			; <UNDEFINED> instruction: 0x00001fb0
    16f4:	00001ff0 	strdeq	r1, [r0], -r0
    16f8:	00001ff4 	strdeq	r1, [r0], -r4
    16fc:	00001ffa 	strdeq	r1, [r0], -sl
	...
    1708:	00001fbe 			; <UNDEFINED> instruction: 0x00001fbe
    170c:	00001fc0 	andeq	r1, r0, r0, asr #31
    1710:	00001fc6 	andeq	r1, r0, r6, asr #31
    1714:	00001fe6 	andeq	r1, r0, r6, ror #31
	...
    1720:	00001ff0 	strdeq	r1, [r0], -r0
    1724:	00001ff4 	strdeq	r1, [r0], -r4
    1728:	00001ffa 	strdeq	r1, [r0], -sl
    172c:	0000203a 	andeq	r2, r0, sl, lsr r0
    1730:	0000203e 	andeq	r2, r0, lr, lsr r0
    1734:	00002044 	andeq	r2, r0, r4, asr #32
	...
    1740:	00002008 	andeq	r2, r0, r8
    1744:	0000200a 	andeq	r2, r0, sl
    1748:	00002010 	andeq	r2, r0, r0, lsl r0
    174c:	00002030 	andeq	r2, r0, r0, lsr r0
	...
    1758:	0000203a 	andeq	r2, r0, sl, lsr r0
    175c:	0000203e 	andeq	r2, r0, lr, lsr r0
    1760:	00002044 	andeq	r2, r0, r4, asr #32
    1764:	00002084 	andeq	r2, r0, r4, lsl #1
    1768:	00002088 	andeq	r2, r0, r8, lsl #1
    176c:	0000208e 	andeq	r2, r0, lr, lsl #1
	...
    1778:	00002052 	andeq	r2, r0, r2, asr r0
    177c:	00002054 	andeq	r2, r0, r4, asr r0
    1780:	0000205a 	andeq	r2, r0, sl, asr r0
    1784:	0000207a 	andeq	r2, r0, sl, ror r0
	...
    1790:	00002084 	andeq	r2, r0, r4, lsl #1
    1794:	00002088 	andeq	r2, r0, r8, lsl #1
    1798:	0000208e 	andeq	r2, r0, lr, lsl #1
    179c:	000020ce 	andeq	r2, r0, lr, asr #1
    17a0:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    17a4:	000020d8 	ldrdeq	r2, [r0], -r8
	...
    17b0:	0000209c 	muleq	r0, ip, r0
    17b4:	0000209e 	muleq	r0, lr, r0
    17b8:	000020a4 	andeq	r2, r0, r4, lsr #1
    17bc:	000020c4 	andeq	r2, r0, r4, asr #1
	...
    17c8:	000020ce 	andeq	r2, r0, lr, asr #1
    17cc:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    17d0:	000020d8 	ldrdeq	r2, [r0], -r8
    17d4:	00002118 	andeq	r2, r0, r8, lsl r1
    17d8:	0000211c 	andeq	r2, r0, ip, lsl r1
    17dc:	00002122 	andeq	r2, r0, r2, lsr #2
	...
    17e8:	000020e6 	andeq	r2, r0, r6, ror #1
    17ec:	000020e8 	andeq	r2, r0, r8, ror #1
    17f0:	000020ee 	andeq	r2, r0, lr, ror #1
    17f4:	0000210e 	andeq	r2, r0, lr, lsl #2
	...
    1800:	00002118 	andeq	r2, r0, r8, lsl r1
    1804:	0000211c 	andeq	r2, r0, ip, lsl r1
    1808:	00002122 	andeq	r2, r0, r2, lsr #2
    180c:	00002162 	andeq	r2, r0, r2, ror #2
    1810:	00002166 	andeq	r2, r0, r6, ror #2
    1814:	0000216c 	andeq	r2, r0, ip, ror #2
	...
    1820:	00002130 	andeq	r2, r0, r0, lsr r1
    1824:	00002132 	andeq	r2, r0, r2, lsr r1
    1828:	00002138 	andeq	r2, r0, r8, lsr r1
    182c:	00002158 	andeq	r2, r0, r8, asr r1
	...
    1838:	00002162 	andeq	r2, r0, r2, ror #2
    183c:	00002166 	andeq	r2, r0, r6, ror #2
    1840:	0000216c 	andeq	r2, r0, ip, ror #2
    1844:	000021ac 	andeq	r2, r0, ip, lsr #3
    1848:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    184c:	000021b6 			; <UNDEFINED> instruction: 0x000021b6
	...
    1858:	0000217a 	andeq	r2, r0, sl, ror r1
    185c:	0000217c 	andeq	r2, r0, ip, ror r1
    1860:	00002182 	andeq	r2, r0, r2, lsl #3
    1864:	000021a2 	andeq	r2, r0, r2, lsr #3
	...
    1870:	000021ac 	andeq	r2, r0, ip, lsr #3
    1874:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    1878:	000021b6 			; <UNDEFINED> instruction: 0x000021b6
    187c:	000021f6 	strdeq	r2, [r0], -r6
    1880:	000021fa 	strdeq	r2, [r0], -sl
    1884:	00002200 	andeq	r2, r0, r0, lsl #4
	...
    1890:	000021c4 	andeq	r2, r0, r4, asr #3
    1894:	000021c6 	andeq	r2, r0, r6, asr #3
    1898:	000021cc 	andeq	r2, r0, ip, asr #3
    189c:	000021ec 	andeq	r2, r0, ip, ror #3
	...
    18a8:	000021f6 	strdeq	r2, [r0], -r6
    18ac:	000021fa 	strdeq	r2, [r0], -sl
    18b0:	00002200 	andeq	r2, r0, r0, lsl #4
    18b4:	00002240 	andeq	r2, r0, r0, asr #4
    18b8:	00002244 	andeq	r2, r0, r4, asr #4
    18bc:	0000224a 	andeq	r2, r0, sl, asr #4
	...
    18c8:	0000220e 	andeq	r2, r0, lr, lsl #4
    18cc:	00002210 	andeq	r2, r0, r0, lsl r2
    18d0:	00002216 	andeq	r2, r0, r6, lsl r2
    18d4:	00002236 	andeq	r2, r0, r6, lsr r2
	...
    18e0:	00002240 	andeq	r2, r0, r0, asr #4
    18e4:	00002244 	andeq	r2, r0, r4, asr #4
    18e8:	0000224a 	andeq	r2, r0, sl, asr #4
    18ec:	0000228a 	andeq	r2, r0, sl, lsl #5
    18f0:	0000228e 	andeq	r2, r0, lr, lsl #5
    18f4:	00002294 	muleq	r0, r4, r2
	...
    1900:	00002258 	andeq	r2, r0, r8, asr r2
    1904:	0000225a 	andeq	r2, r0, sl, asr r2
    1908:	00002260 	andeq	r2, r0, r0, ror #4
    190c:	00002280 	andeq	r2, r0, r0, lsl #5
	...
    1918:	0000228a 	andeq	r2, r0, sl, lsl #5
    191c:	0000228e 	andeq	r2, r0, lr, lsl #5
    1920:	00002294 	muleq	r0, r4, r2
    1924:	000022d4 	ldrdeq	r2, [r0], -r4
    1928:	000022d8 	ldrdeq	r2, [r0], -r8
    192c:	000022de 	ldrdeq	r2, [r0], -lr
	...
    1938:	000022a2 	andeq	r2, r0, r2, lsr #5
    193c:	000022a4 	andeq	r2, r0, r4, lsr #5
    1940:	000022aa 	andeq	r2, r0, sl, lsr #5
    1944:	000022ca 	andeq	r2, r0, sl, asr #5
	...
    1950:	000022d4 	ldrdeq	r2, [r0], -r4
    1954:	000022d8 	ldrdeq	r2, [r0], -r8
    1958:	000022de 	ldrdeq	r2, [r0], -lr
    195c:	0000231e 	andeq	r2, r0, lr, lsl r3
    1960:	00002322 	andeq	r2, r0, r2, lsr #6
    1964:	00002328 	andeq	r2, r0, r8, lsr #6
	...
    1970:	000022ec 	andeq	r2, r0, ip, ror #5
    1974:	000022ee 	andeq	r2, r0, lr, ror #5
    1978:	000022f4 	strdeq	r2, [r0], -r4
    197c:	00002314 	andeq	r2, r0, r4, lsl r3
	...
    1988:	0000231e 	andeq	r2, r0, lr, lsl r3
    198c:	00002322 	andeq	r2, r0, r2, lsr #6
    1990:	00002328 	andeq	r2, r0, r8, lsr #6
    1994:	00002368 	andeq	r2, r0, r8, ror #6
    1998:	0000236c 	andeq	r2, r0, ip, ror #6
    199c:	00002372 	andeq	r2, r0, r2, ror r3
	...
    19a8:	00002336 	andeq	r2, r0, r6, lsr r3
    19ac:	00002338 	andeq	r2, r0, r8, lsr r3
    19b0:	0000233e 	andeq	r2, r0, lr, lsr r3
    19b4:	0000235e 	andeq	r2, r0, lr, asr r3
	...
    19c0:	00002368 	andeq	r2, r0, r8, ror #6
    19c4:	0000236c 	andeq	r2, r0, ip, ror #6
    19c8:	00002372 	andeq	r2, r0, r2, ror r3
    19cc:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    19d0:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    19d4:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
	...
    19e0:	00002380 	andeq	r2, r0, r0, lsl #7
    19e4:	00002382 	andeq	r2, r0, r2, lsl #7
    19e8:	00002388 	andeq	r2, r0, r8, lsl #7
    19ec:	000023a8 	andeq	r2, r0, r8, lsr #7
	...
    19f8:	000023b2 			; <UNDEFINED> instruction: 0x000023b2
    19fc:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    1a00:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
    1a04:	000023fc 	strdeq	r2, [r0], -ip
    1a08:	00002400 	andeq	r2, r0, r0, lsl #8
    1a0c:	00002406 	andeq	r2, r0, r6, lsl #8
	...
    1a18:	000023ca 	andeq	r2, r0, sl, asr #7
    1a1c:	000023cc 	andeq	r2, r0, ip, asr #7
    1a20:	000023d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1a24:	000023f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    1a30:	000023fc 	strdeq	r2, [r0], -ip
    1a34:	00002400 	andeq	r2, r0, r0, lsl #8
    1a38:	00002406 	andeq	r2, r0, r6, lsl #8
    1a3c:	00002446 	andeq	r2, r0, r6, asr #8
    1a40:	0000244a 	andeq	r2, r0, sl, asr #8
    1a44:	00002450 	andeq	r2, r0, r0, asr r4
	...
    1a50:	00002414 	andeq	r2, r0, r4, lsl r4
    1a54:	00002416 	andeq	r2, r0, r6, lsl r4
    1a58:	0000241c 	andeq	r2, r0, ip, lsl r4
    1a5c:	0000243c 	andeq	r2, r0, ip, lsr r4
	...
    1a68:	00002446 	andeq	r2, r0, r6, asr #8
    1a6c:	0000244a 	andeq	r2, r0, sl, asr #8
    1a70:	00002450 	andeq	r2, r0, r0, asr r4
    1a74:	00002496 	muleq	r0, r6, r4
    1a78:	0000249a 	muleq	r0, sl, r4
    1a7c:	000024a0 	andeq	r2, r0, r0, lsr #9
	...
    1a88:	0000245e 	andeq	r2, r0, lr, asr r4
    1a8c:	00002460 	andeq	r2, r0, r0, ror #8
    1a90:	00002466 	andeq	r2, r0, r6, ror #8
    1a94:	0000248c 	andeq	r2, r0, ip, lsl #9
	...
    1aa0:	00002496 	muleq	r0, r6, r4
    1aa4:	0000249a 	muleq	r0, sl, r4
    1aa8:	000024a0 	andeq	r2, r0, r0, lsr #9
    1aac:	000024de 	ldrdeq	r2, [r0], -lr
    1ab0:	000024e2 	andeq	r2, r0, r2, ror #9
    1ab4:	000024e8 	andeq	r2, r0, r8, ror #9
	...
    1ac0:	000024ae 	andeq	r2, r0, lr, lsr #9
    1ac4:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    1ac8:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
    1acc:	000024d4 	ldrdeq	r2, [r0], -r4
	...
    1ad8:	000024de 	ldrdeq	r2, [r0], -lr
    1adc:	000024e2 	andeq	r2, r0, r2, ror #9
    1ae0:	000024e8 	andeq	r2, r0, r8, ror #9
    1ae4:	00002528 	andeq	r2, r0, r8, lsr #10
    1ae8:	0000252c 	andeq	r2, r0, ip, lsr #10
    1aec:	00002532 	andeq	r2, r0, r2, lsr r5
	...
    1af8:	000024f6 	strdeq	r2, [r0], -r6
    1afc:	000024f8 	strdeq	r2, [r0], -r8
    1b00:	000024fe 	strdeq	r2, [r0], -lr
    1b04:	0000251e 	andeq	r2, r0, lr, lsl r5
	...
    1b10:	00002528 	andeq	r2, r0, r8, lsr #10
    1b14:	0000252c 	andeq	r2, r0, ip, lsr #10
    1b18:	00002532 	andeq	r2, r0, r2, lsr r5
    1b1c:	00002572 	andeq	r2, r0, r2, ror r5
    1b20:	00002576 	andeq	r2, r0, r6, ror r5
    1b24:	0000257c 	andeq	r2, r0, ip, ror r5
	...
    1b30:	00002540 	andeq	r2, r0, r0, asr #10
    1b34:	00002542 	andeq	r2, r0, r2, asr #10
    1b38:	00002548 	andeq	r2, r0, r8, asr #10
    1b3c:	00002568 	andeq	r2, r0, r8, ror #10
	...
    1b48:	00002572 	andeq	r2, r0, r2, ror r5
    1b4c:	00002576 	andeq	r2, r0, r6, ror r5
    1b50:	0000257c 	andeq	r2, r0, ip, ror r5
    1b54:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    1b58:	000025c0 	andeq	r2, r0, r0, asr #11
    1b5c:	000025c6 	andeq	r2, r0, r6, asr #11
	...
    1b68:	0000258a 	andeq	r2, r0, sl, lsl #11
    1b6c:	0000258c 	andeq	r2, r0, ip, lsl #11
    1b70:	00002592 	muleq	r0, r2, r5
    1b74:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
	...
    1b80:	000025bc 			; <UNDEFINED> instruction: 0x000025bc
    1b84:	000025c0 	andeq	r2, r0, r0, asr #11
    1b88:	000025c6 	andeq	r2, r0, r6, asr #11
    1b8c:	00002606 	andeq	r2, r0, r6, lsl #12
    1b90:	0000260a 	andeq	r2, r0, sl, lsl #12
    1b94:	00002610 	andeq	r2, r0, r0, lsl r6
	...
    1ba0:	000025d4 	ldrdeq	r2, [r0], -r4
    1ba4:	000025d6 	ldrdeq	r2, [r0], -r6
    1ba8:	000025dc 	ldrdeq	r2, [r0], -ip
    1bac:	000025fc 	strdeq	r2, [r0], -ip
	...
    1bb8:	00002606 	andeq	r2, r0, r6, lsl #12
    1bbc:	0000260a 	andeq	r2, r0, sl, lsl #12
    1bc0:	00002610 	andeq	r2, r0, r0, lsl r6
    1bc4:	00002650 	andeq	r2, r0, r0, asr r6
    1bc8:	00002654 	andeq	r2, r0, r4, asr r6
    1bcc:	0000265a 	andeq	r2, r0, sl, asr r6
	...
    1bd8:	0000261e 	andeq	r2, r0, lr, lsl r6
    1bdc:	00002620 	andeq	r2, r0, r0, lsr #12
    1be0:	00002626 	andeq	r2, r0, r6, lsr #12
    1be4:	00002646 	andeq	r2, r0, r6, asr #12
	...
    1bf0:	00002650 	andeq	r2, r0, r0, asr r6
    1bf4:	00002654 	andeq	r2, r0, r4, asr r6
    1bf8:	0000265a 	andeq	r2, r0, sl, asr r6
    1bfc:	0000269a 	muleq	r0, sl, r6
    1c00:	0000269e 	muleq	r0, lr, r6
    1c04:	000026a4 	andeq	r2, r0, r4, lsr #13
	...
    1c10:	00002668 	andeq	r2, r0, r8, ror #12
    1c14:	0000266a 	andeq	r2, r0, sl, ror #12
    1c18:	00002670 	andeq	r2, r0, r0, ror r6
    1c1c:	00002690 	muleq	r0, r0, r6
	...
    1c28:	0000269a 	muleq	r0, sl, r6
    1c2c:	0000269e 	muleq	r0, lr, r6
    1c30:	000026a4 	andeq	r2, r0, r4, lsr #13
    1c34:	000026e4 	andeq	r2, r0, r4, ror #13
    1c38:	000026e8 	andeq	r2, r0, r8, ror #13
    1c3c:	000026ee 	andeq	r2, r0, lr, ror #13
	...
    1c48:	000026b2 			; <UNDEFINED> instruction: 0x000026b2
    1c4c:	000026b4 			; <UNDEFINED> instruction: 0x000026b4
    1c50:	000026ba 			; <UNDEFINED> instruction: 0x000026ba
    1c54:	000026da 	ldrdeq	r2, [r0], -sl
	...
    1c60:	000026e4 	andeq	r2, r0, r4, ror #13
    1c64:	000026e8 	andeq	r2, r0, r8, ror #13
    1c68:	000026ee 	andeq	r2, r0, lr, ror #13
    1c6c:	0000272e 	andeq	r2, r0, lr, lsr #14
    1c70:	00002732 	andeq	r2, r0, r2, lsr r7
    1c74:	00002738 	andeq	r2, r0, r8, lsr r7
	...
    1c80:	000026fc 	strdeq	r2, [r0], -ip
    1c84:	000026fe 	strdeq	r2, [r0], -lr
    1c88:	00002704 	andeq	r2, r0, r4, lsl #14
    1c8c:	00002724 	andeq	r2, r0, r4, lsr #14
	...
    1c98:	0000272e 	andeq	r2, r0, lr, lsr #14
    1c9c:	00002732 	andeq	r2, r0, r2, lsr r7
    1ca0:	00002738 	andeq	r2, r0, r8, lsr r7
    1ca4:	00002778 	andeq	r2, r0, r8, ror r7
    1ca8:	0000277c 	andeq	r2, r0, ip, ror r7
    1cac:	00002782 	andeq	r2, r0, r2, lsl #15
	...
    1cb8:	00002746 	andeq	r2, r0, r6, asr #14
    1cbc:	00002748 	andeq	r2, r0, r8, asr #14
    1cc0:	0000274e 	andeq	r2, r0, lr, asr #14
    1cc4:	0000276e 	andeq	r2, r0, lr, ror #14
	...
    1cd0:	00002778 	andeq	r2, r0, r8, ror r7
    1cd4:	0000277c 	andeq	r2, r0, ip, ror r7
    1cd8:	00002782 	andeq	r2, r0, r2, lsl #15
    1cdc:	000027c2 	andeq	r2, r0, r2, asr #15
    1ce0:	000027c6 	andeq	r2, r0, r6, asr #15
    1ce4:	000027cc 	andeq	r2, r0, ip, asr #15
	...
    1cf0:	00002790 	muleq	r0, r0, r7
    1cf4:	00002792 	muleq	r0, r2, r7
    1cf8:	00002798 	muleq	r0, r8, r7
    1cfc:	000027b8 			; <UNDEFINED> instruction: 0x000027b8
	...
    1d08:	000027c2 	andeq	r2, r0, r2, asr #15
    1d0c:	000027c6 	andeq	r2, r0, r6, asr #15
    1d10:	000027cc 	andeq	r2, r0, ip, asr #15
    1d14:	0000280c 	andeq	r2, r0, ip, lsl #16
    1d18:	00002810 	andeq	r2, r0, r0, lsl r8
    1d1c:	00002816 	andeq	r2, r0, r6, lsl r8
	...
    1d28:	000027da 	ldrdeq	r2, [r0], -sl
    1d2c:	000027dc 	ldrdeq	r2, [r0], -ip
    1d30:	000027e2 	andeq	r2, r0, r2, ror #15
    1d34:	00002802 	andeq	r2, r0, r2, lsl #16
	...
    1d40:	0000280c 	andeq	r2, r0, ip, lsl #16
    1d44:	00002810 	andeq	r2, r0, r0, lsl r8
    1d48:	00002816 	andeq	r2, r0, r6, lsl r8
    1d4c:	00002856 	andeq	r2, r0, r6, asr r8
    1d50:	0000285a 	andeq	r2, r0, sl, asr r8
    1d54:	00002860 	andeq	r2, r0, r0, ror #16
	...
    1d60:	00002824 	andeq	r2, r0, r4, lsr #16
    1d64:	00002826 	andeq	r2, r0, r6, lsr #16
    1d68:	0000282c 	andeq	r2, r0, ip, lsr #16
    1d6c:	0000284c 	andeq	r2, r0, ip, asr #16
	...
    1d78:	00002856 	andeq	r2, r0, r6, asr r8
    1d7c:	0000285a 	andeq	r2, r0, sl, asr r8
    1d80:	00002860 	andeq	r2, r0, r0, ror #16
    1d84:	000028a0 	andeq	r2, r0, r0, lsr #17
    1d88:	000028a4 	andeq	r2, r0, r4, lsr #17
    1d8c:	000028aa 	andeq	r2, r0, sl, lsr #17
	...
    1d98:	0000286e 	andeq	r2, r0, lr, ror #16
    1d9c:	00002870 	andeq	r2, r0, r0, ror r8
    1da0:	00002876 	andeq	r2, r0, r6, ror r8
    1da4:	00002896 	muleq	r0, r6, r8
	...
    1db0:	000028a0 	andeq	r2, r0, r0, lsr #17
    1db4:	000028a4 	andeq	r2, r0, r4, lsr #17
    1db8:	000028aa 	andeq	r2, r0, sl, lsr #17
    1dbc:	000028ea 	andeq	r2, r0, sl, ror #17
    1dc0:	000028ee 	andeq	r2, r0, lr, ror #17
    1dc4:	000028f4 	strdeq	r2, [r0], -r4
	...
    1dd0:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
    1dd4:	000028ba 			; <UNDEFINED> instruction: 0x000028ba
    1dd8:	000028c0 	andeq	r2, r0, r0, asr #17
    1ddc:	000028e0 	andeq	r2, r0, r0, ror #17
	...
    1de8:	000028ea 	andeq	r2, r0, sl, ror #17
    1dec:	000028ee 	andeq	r2, r0, lr, ror #17
    1df0:	000028f4 	strdeq	r2, [r0], -r4
    1df4:	0000293a 	andeq	r2, r0, sl, lsr r9
    1df8:	0000293e 	andeq	r2, r0, lr, lsr r9
    1dfc:	00002944 	andeq	r2, r0, r4, asr #18
	...
    1e08:	00002902 	andeq	r2, r0, r2, lsl #18
    1e0c:	00002904 	andeq	r2, r0, r4, lsl #18
    1e10:	0000290a 	andeq	r2, r0, sl, lsl #18
    1e14:	00002930 	andeq	r2, r0, r0, lsr r9
	...
    1e20:	0000293a 	andeq	r2, r0, sl, lsr r9
    1e24:	0000293e 	andeq	r2, r0, lr, lsr r9
    1e28:	00002944 	andeq	r2, r0, r4, asr #18
    1e2c:	00002988 	andeq	r2, r0, r8, lsl #19
    1e30:	0000298c 	andeq	r2, r0, ip, lsl #19
    1e34:	00002992 	muleq	r0, r2, r9
	...
    1e40:	00002952 	andeq	r2, r0, r2, asr r9
    1e44:	00002954 	andeq	r2, r0, r4, asr r9
    1e48:	0000295a 	andeq	r2, r0, sl, asr r9
    1e4c:	0000297e 	andeq	r2, r0, lr, ror r9
	...
    1e58:	00002988 	andeq	r2, r0, r8, lsl #19
    1e5c:	0000298c 	andeq	r2, r0, ip, lsl #19
    1e60:	00002992 	muleq	r0, r2, r9
    1e64:	000029d0 	ldrdeq	r2, [r0], -r0
    1e68:	000029d4 	ldrdeq	r2, [r0], -r4
    1e6c:	000029da 	ldrdeq	r2, [r0], -sl
	...
    1e78:	000029a0 	andeq	r2, r0, r0, lsr #19
    1e7c:	000029a2 	andeq	r2, r0, r2, lsr #19
    1e80:	000029a8 	andeq	r2, r0, r8, lsr #19
    1e84:	000029c6 	andeq	r2, r0, r6, asr #19
	...
    1e90:	000029d0 	ldrdeq	r2, [r0], -r0
    1e94:	000029d4 	ldrdeq	r2, [r0], -r4
    1e98:	000029da 	ldrdeq	r2, [r0], -sl
    1e9c:	00002a1a 	andeq	r2, r0, sl, lsl sl
    1ea0:	00002a1e 	andeq	r2, r0, lr, lsl sl
    1ea4:	00002a24 	andeq	r2, r0, r4, lsr #20
	...
    1eb0:	000029e8 	andeq	r2, r0, r8, ror #19
    1eb4:	000029ea 	andeq	r2, r0, sl, ror #19
    1eb8:	000029f0 	strdeq	r2, [r0], -r0
    1ebc:	00002a10 	andeq	r2, r0, r0, lsl sl
	...
    1ec8:	00002a1a 	andeq	r2, r0, sl, lsl sl
    1ecc:	00002a1e 	andeq	r2, r0, lr, lsl sl
    1ed0:	00002a24 	andeq	r2, r0, r4, lsr #20
    1ed4:	00002a64 	andeq	r2, r0, r4, ror #20
    1ed8:	00002a68 	andeq	r2, r0, r8, ror #20
    1edc:	00002a6e 	andeq	r2, r0, lr, ror #20
	...
    1ee8:	00002a32 	andeq	r2, r0, r2, lsr sl
    1eec:	00002a34 	andeq	r2, r0, r4, lsr sl
    1ef0:	00002a3a 	andeq	r2, r0, sl, lsr sl
    1ef4:	00002a5a 	andeq	r2, r0, sl, asr sl
	...
    1f00:	00002a64 	andeq	r2, r0, r4, ror #20
    1f04:	00002a68 	andeq	r2, r0, r8, ror #20
    1f08:	00002a6e 	andeq	r2, r0, lr, ror #20
    1f0c:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
    1f10:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    1f14:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
	...
    1f20:	00002a7c 	andeq	r2, r0, ip, ror sl
    1f24:	00002a7e 	andeq	r2, r0, lr, ror sl
    1f28:	00002a84 	andeq	r2, r0, r4, lsl #21
    1f2c:	00002aaa 	andeq	r2, r0, sl, lsr #21
	...
    1f38:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
    1f3c:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    1f40:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
    1f44:	00002b02 	andeq	r2, r0, r2, lsl #22
    1f48:	00002b06 	andeq	r2, r0, r6, lsl #22
    1f4c:	00002b0c 	andeq	r2, r0, ip, lsl #22
	...
    1f58:	00002acc 	andeq	r2, r0, ip, asr #21
    1f5c:	00002ace 	andeq	r2, r0, lr, asr #21
    1f60:	00002ad4 	ldrdeq	r2, [r0], -r4
    1f64:	00002af8 	strdeq	r2, [r0], -r8
	...
    1f70:	00002b02 	andeq	r2, r0, r2, lsl #22
    1f74:	00002b06 	andeq	r2, r0, r6, lsl #22
    1f78:	00002b0c 	andeq	r2, r0, ip, lsl #22
    1f7c:	00002b50 	andeq	r2, r0, r0, asr fp
    1f80:	00002b54 	andeq	r2, r0, r4, asr fp
    1f84:	00002b5a 	andeq	r2, r0, sl, asr fp
	...
    1f90:	00002b1a 	andeq	r2, r0, sl, lsl fp
    1f94:	00002b1c 	andeq	r2, r0, ip, lsl fp
    1f98:	00002b22 	andeq	r2, r0, r2, lsr #22
    1f9c:	00002b46 	andeq	r2, r0, r6, asr #22
	...
    1fa8:	00002b50 	andeq	r2, r0, r0, asr fp
    1fac:	00002b54 	andeq	r2, r0, r4, asr fp
    1fb0:	00002b5a 	andeq	r2, r0, sl, asr fp
    1fb4:	00002b98 	muleq	r0, r8, fp
    1fb8:	00002b9c 	muleq	r0, ip, fp
    1fbc:	00002ba2 	andeq	r2, r0, r2, lsr #23
	...
    1fc8:	00002b68 	andeq	r2, r0, r8, ror #22
    1fcc:	00002b6a 	andeq	r2, r0, sl, ror #22
    1fd0:	00002b70 	andeq	r2, r0, r0, ror fp
    1fd4:	00002b8e 	andeq	r2, r0, lr, lsl #23
	...
    1fe0:	00002b98 	muleq	r0, r8, fp
    1fe4:	00002b9c 	muleq	r0, ip, fp
    1fe8:	00002ba2 	andeq	r2, r0, r2, lsr #23
    1fec:	00002be2 	andeq	r2, r0, r2, ror #23
    1ff0:	00002be6 	andeq	r2, r0, r6, ror #23
    1ff4:	00002bec 	andeq	r2, r0, ip, ror #23
	...
    2000:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
    2004:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
    2008:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
    200c:	00002bd8 	ldrdeq	r2, [r0], -r8
	...
    2018:	00002be2 	andeq	r2, r0, r2, ror #23
    201c:	00002be6 	andeq	r2, r0, r6, ror #23
    2020:	00002bec 	andeq	r2, r0, ip, ror #23
    2024:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2028:	00002c2e 	andeq	r2, r0, lr, lsr #24
    202c:	00002c34 	andeq	r2, r0, r4, lsr ip
	...
    2038:	00002bfa 	strdeq	r2, [r0], -sl
    203c:	00002bfc 	strdeq	r2, [r0], -ip
    2040:	00002c02 	andeq	r2, r0, r2, lsl #24
    2044:	00002c20 	andeq	r2, r0, r0, lsr #24
	...
    2050:	00002c2a 	andeq	r2, r0, sl, lsr #24
    2054:	00002c2e 	andeq	r2, r0, lr, lsr #24
    2058:	00002c34 	andeq	r2, r0, r4, lsr ip
    205c:	00002c4c 	andeq	r2, r0, ip, asr #24
	...
    2068:	00002c66 	andeq	r2, r0, r6, ror #24
    206c:	00002c6e 	andeq	r2, r0, lr, ror #24
    2070:	00002c72 	andeq	r2, r0, r2, ror ip
    2074:	00002c74 	andeq	r2, r0, r4, ror ip
    2078:	00002c76 	andeq	r2, r0, r6, ror ip
    207c:	00002c94 	muleq	r0, r4, ip
	...
    2088:	00002ce2 	andeq	r2, r0, r2, ror #25
    208c:	00003034 	andeq	r3, r0, r4, lsr r0
    2090:	00003038 	andeq	r3, r0, r8, lsr r0
    2094:	0000303e 	andeq	r3, r0, lr, lsr r0
	...
    20a0:	00002ce2 	andeq	r2, r0, r2, ror #25
    20a4:	00002cec 	andeq	r2, r0, ip, ror #25
    20a8:	00002cf0 	strdeq	r2, [r0], -r0
    20ac:	00002cf4 	strdeq	r2, [r0], -r4
    20b0:	00002cf8 	strdeq	r2, [r0], -r8
    20b4:	00002cfc 	strdeq	r2, [r0], -ip
    20b8:	00002cfe 	strdeq	r2, [r0], -lr
    20bc:	00002d40 	andeq	r2, r0, r0, asr #26
    20c0:	00002d44 	andeq	r2, r0, r4, asr #26
    20c4:	00002d4a 	andeq	r2, r0, sl, asr #26
	...
    20d0:	00002d06 	andeq	r2, r0, r6, lsl #26
    20d4:	00002d10 	andeq	r2, r0, r0, lsl sp
    20d8:	00002d16 	andeq	r2, r0, r6, lsl sp
    20dc:	00002d36 	andeq	r2, r0, r6, lsr sp
	...
    20e8:	00002d40 	andeq	r2, r0, r0, asr #26
    20ec:	00002d44 	andeq	r2, r0, r4, asr #26
    20f0:	00002d4a 	andeq	r2, r0, sl, asr #26
    20f4:	00002d58 	andeq	r2, r0, r8, asr sp
    20f8:	00002d5a 	andeq	r2, r0, sl, asr sp
    20fc:	00002d8c 	andeq	r2, r0, ip, lsl #27
    2100:	00002d90 	muleq	r0, r0, sp
    2104:	00002d98 	muleq	r0, r8, sp
	...
    2110:	00002d8c 	andeq	r2, r0, ip, lsl #27
    2114:	00002d90 	muleq	r0, r0, sp
    2118:	00002d98 	muleq	r0, r8, sp
    211c:	00002dde 	ldrdeq	r2, [r0], -lr
    2120:	00002de2 	andeq	r2, r0, r2, ror #27
    2124:	00002dea 	andeq	r2, r0, sl, ror #27
	...
    2130:	00002daa 	andeq	r2, r0, sl, lsr #27
    2134:	00002dac 	andeq	r2, r0, ip, lsr #27
    2138:	00002db2 			; <UNDEFINED> instruction: 0x00002db2
    213c:	00002dd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    2148:	00002dde 	ldrdeq	r2, [r0], -lr
    214c:	00002de2 	andeq	r2, r0, r2, ror #27
    2150:	00002dea 	andeq	r2, r0, sl, ror #27
    2154:	00002e30 	andeq	r2, r0, r0, lsr lr
    2158:	00002e34 	andeq	r2, r0, r4, lsr lr
    215c:	00002e3a 	andeq	r2, r0, sl, lsr lr
	...
    2168:	00002dfe 	strdeq	r2, [r0], -lr
    216c:	00002e00 	andeq	r2, r0, r0, lsl #28
    2170:	00002e08 	andeq	r2, r0, r8, lsl #28
    2174:	00002e26 	andeq	r2, r0, r6, lsr #28
	...
    2180:	00002e30 	andeq	r2, r0, r0, lsr lr
    2184:	00002e34 	andeq	r2, r0, r4, lsr lr
    2188:	00002e3a 	andeq	r2, r0, sl, lsr lr
    218c:	00002e78 	andeq	r2, r0, r8, ror lr
    2190:	00002e7c 	andeq	r2, r0, ip, ror lr
    2194:	00002e82 	andeq	r2, r0, r2, lsl #29
	...
    21a0:	00002e48 	andeq	r2, r0, r8, asr #28
    21a4:	00002e4a 	andeq	r2, r0, sl, asr #28
    21a8:	00002e50 	andeq	r2, r0, r0, asr lr
    21ac:	00002e6e 	andeq	r2, r0, lr, ror #28
	...
    21b8:	00002e78 	andeq	r2, r0, r8, ror lr
    21bc:	00002e7c 	andeq	r2, r0, ip, ror lr
    21c0:	00002e82 	andeq	r2, r0, r2, lsl #29
    21c4:	00002e84 	andeq	r2, r0, r4, lsl #29
    21c8:	00002e86 	andeq	r2, r0, r6, lsl #29
    21cc:	00002ec4 	andeq	r2, r0, r4, asr #29
    21d0:	00002ec8 	andeq	r2, r0, r8, asr #29
    21d4:	00002ece 	andeq	r2, r0, lr, asr #29
	...
    21e0:	00002e92 	muleq	r0, r2, lr
    21e4:	00002e94 	muleq	r0, r4, lr
    21e8:	00002e9a 	muleq	r0, sl, lr
    21ec:	00002eba 			; <UNDEFINED> instruction: 0x00002eba
	...
    21f8:	00002ec4 	andeq	r2, r0, r4, asr #29
    21fc:	00002ec8 	andeq	r2, r0, r8, asr #29
    2200:	00002ece 	andeq	r2, r0, lr, asr #29
    2204:	00002edc 	ldrdeq	r2, [r0], -ip
    2208:	00002ede 	ldrdeq	r2, [r0], -lr
    220c:	00002f0e 	andeq	r2, r0, lr, lsl #30
    2210:	00002f12 	andeq	r2, r0, r2, lsl pc
    2214:	00002f18 	andeq	r2, r0, r8, lsl pc
	...
    2220:	00002f0e 	andeq	r2, r0, lr, lsl #30
    2224:	00002f12 	andeq	r2, r0, r2, lsl pc
    2228:	00002f18 	andeq	r2, r0, r8, lsl pc
    222c:	00002f58 	andeq	r2, r0, r8, asr pc
    2230:	00002f5c 	andeq	r2, r0, ip, asr pc
    2234:	00002f62 	andeq	r2, r0, r2, ror #30
	...
    2240:	00002f26 	andeq	r2, r0, r6, lsr #30
    2244:	00002f28 	andeq	r2, r0, r8, lsr #30
    2248:	00002f2e 	andeq	r2, r0, lr, lsr #30
    224c:	00002f4e 	andeq	r2, r0, lr, asr #30
	...
    2258:	00002f58 	andeq	r2, r0, r8, asr pc
    225c:	00002f5c 	andeq	r2, r0, ip, asr pc
    2260:	00002f62 	andeq	r2, r0, r2, ror #30
    2264:	00002fa0 	andeq	r2, r0, r0, lsr #31
    2268:	00002fa4 	andeq	r2, r0, r4, lsr #31
    226c:	00002faa 	andeq	r2, r0, sl, lsr #31
	...
    2278:	00002f70 	andeq	r2, r0, r0, ror pc
    227c:	00002f72 	andeq	r2, r0, r2, ror pc
    2280:	00002f78 	andeq	r2, r0, r8, ror pc
    2284:	00002f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
	...
    2290:	00002fa0 	andeq	r2, r0, r0, lsr #31
    2294:	00002fa4 	andeq	r2, r0, r4, lsr #31
    2298:	00002faa 	andeq	r2, r0, sl, lsr #31
    229c:	00002fe8 	andeq	r2, r0, r8, ror #31
    22a0:	00002fec 	andeq	r2, r0, ip, ror #31
    22a4:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    22b0:	00002fb8 			; <UNDEFINED> instruction: 0x00002fb8
    22b4:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
    22b8:	00002fc0 	andeq	r2, r0, r0, asr #31
    22bc:	00002fde 	ldrdeq	r2, [r0], -lr
	...
    22c8:	00002fe8 	andeq	r2, r0, r8, ror #31
    22cc:	00002fec 	andeq	r2, r0, ip, ror #31
    22d0:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    22d4:	00003034 	andeq	r3, r0, r4, lsr r0
    22d8:	00003038 	andeq	r3, r0, r8, lsr r0
    22dc:	0000303e 	andeq	r3, r0, lr, lsr r0
	...
    22e8:	00002fe8 	andeq	r2, r0, r8, ror #31
    22ec:	00002fec 	andeq	r2, r0, ip, ror #31
    22f0:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    22f4:	00002ff4 	strdeq	r2, [r0], -r4
    22f8:	00002ff6 	strdeq	r2, [r0], -r6
    22fc:	00003034 	andeq	r3, r0, r4, lsr r0
    2300:	00003038 	andeq	r3, r0, r8, lsr r0
    2304:	0000303e 	andeq	r3, r0, lr, lsr r0
	...
    2310:	00003002 	andeq	r3, r0, r2
    2314:	00003004 	andeq	r3, r0, r4
    2318:	0000300a 	andeq	r3, r0, sl
    231c:	0000302a 	andeq	r3, r0, sl, lsr #32
	...
    2328:	00003034 	andeq	r3, r0, r4, lsr r0
    232c:	00003038 	andeq	r3, r0, r8, lsr r0
    2330:	0000303e 	andeq	r3, r0, lr, lsr r0
    2334:	0000309c 	muleq	r0, ip, r0
	...
    2340:	000003de 	ldrdeq	r0, [r0], -lr
    2344:	000003ea 	andeq	r0, r0, sl, ror #7
    2348:	000003ec 	andeq	r0, r0, ip, ror #7
    234c:	0000042c 	andeq	r0, r0, ip, lsr #8
    2350:	00000430 	andeq	r0, r0, r0, lsr r4
    2354:	000004da 	ldrdeq	r0, [r0], -sl
	...
    2360:	000004e6 	andeq	r0, r0, r6, ror #9
    2364:	000004ee 	andeq	r0, r0, lr, ror #9
    2368:	000004f2 	strdeq	r0, [r0], -r2
    236c:	00000514 	andeq	r0, r0, r4, lsl r5
	...
    2378:	00000522 	andeq	r0, r0, r2, lsr #10
    237c:	00000552 	andeq	r0, r0, r2, asr r5
    2380:	00000556 	andeq	r0, r0, r6, asr r5
    2384:	00000576 	andeq	r0, r0, r6, ror r5
    2388:	0000057a 	andeq	r0, r0, sl, ror r5
    238c:	0000059a 	muleq	r0, sl, r5
	...
    2398:	000006a6 	andeq	r0, r0, r6, lsr #13
    239c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    23a0:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    23a4:	0000073a 	andeq	r0, r0, sl, lsr r7
    23a8:	0000073e 	andeq	r0, r0, lr, lsr r7
    23ac:	00000876 	andeq	r0, r0, r6, ror r8
	...
    23b8:	00000a4c 	andeq	r0, r0, ip, asr #20
    23bc:	00000a4e 	andeq	r0, r0, lr, asr #20
    23c0:	00000a54 	andeq	r0, r0, r4, asr sl
    23c4:	00000a56 	andeq	r0, r0, r6, asr sl
    23c8:	00000a5c 	andeq	r0, r0, ip, asr sl
    23cc:	00000a5e 	andeq	r0, r0, lr, asr sl
    23d0:	00000a60 	andeq	r0, r0, r0, ror #20
    23d4:	00000a6a 	andeq	r0, r0, sl, ror #20
    23d8:	00000a74 	andeq	r0, r0, r4, ror sl
    23dc:	00000a76 	andeq	r0, r0, r6, ror sl
    23e0:	00000a7a 	andeq	r0, r0, sl, ror sl
    23e4:	00000a7e 	andeq	r0, r0, lr, ror sl
    23e8:	00000a94 	muleq	r0, r4, sl
    23ec:	00000ac0 	andeq	r0, r0, r0, asr #21
    23f0:	00000ac2 	andeq	r0, r0, r2, asr #21
    23f4:	00000acc 	andeq	r0, r0, ip, asr #21
    23f8:	00000ae0 	andeq	r0, r0, r0, ror #21
    23fc:	00000ae4 	andeq	r0, r0, r4, ror #21
    2400:	00000ae8 	andeq	r0, r0, r8, ror #21
    2404:	00000aea 	andeq	r0, r0, sl, ror #21
    2408:	00000aec 	andeq	r0, r0, ip, ror #21
    240c:	00000b02 	andeq	r0, r0, r2, lsl #22
    2410:	00000b0c 	andeq	r0, r0, ip, lsl #22
    2414:	00000b20 	andeq	r0, r0, r0, lsr #22
    2418:	00000b2a 	andeq	r0, r0, sl, lsr #22
    241c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    2420:	00000b40 	andeq	r0, r0, r0, asr #22
    2424:	00000b44 	andeq	r0, r0, r4, asr #22
    2428:	00000b48 	andeq	r0, r0, r8, asr #22
    242c:	00000b4a 	andeq	r0, r0, sl, asr #22
    2430:	00000b4c 	andeq	r0, r0, ip, asr #22
    2434:	00000b62 	andeq	r0, r0, r2, ror #22
    2438:	00000b64 	andeq	r0, r0, r4, ror #22
    243c:	00000b68 	andeq	r0, r0, r8, ror #22
    2440:	00000b6c 	andeq	r0, r0, ip, ror #22
    2444:	00000b6e 	andeq	r0, r0, lr, ror #22
    2448:	00000b70 	andeq	r0, r0, r0, ror fp
    244c:	00000b8e 	andeq	r0, r0, lr, lsl #23
    2450:	00000d34 	andeq	r0, r0, r4, lsr sp
    2454:	00000d3c 	andeq	r0, r0, ip, lsr sp
    2458:	00000d44 	andeq	r0, r0, r4, asr #26
    245c:	00000d50 	andeq	r0, r0, r0, asr sp
    2460:	00000d58 	andeq	r0, r0, r8, asr sp
    2464:	00000d64 	andeq	r0, r0, r4, ror #26
    2468:	00000d6c 	andeq	r0, r0, ip, ror #26
    246c:	00000d78 	andeq	r0, r0, r8, ror sp
	...
    2478:	00000bca 	andeq	r0, r0, sl, asr #23
    247c:	00000be6 	andeq	r0, r0, r6, ror #23
    2480:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2484:	00000c0a 	andeq	r0, r0, sl, lsl #24
	...
    2490:	00000c40 	andeq	r0, r0, r0, asr #24
    2494:	00000c4e 	andeq	r0, r0, lr, asr #24
    2498:	00000c58 	andeq	r0, r0, r8, asr ip
    249c:	00000c62 	andeq	r0, r0, r2, ror #24
    24a0:	00000c78 	andeq	r0, r0, r8, ror ip
    24a4:	00000c82 	andeq	r0, r0, r2, lsl #25
    24a8:	00000c98 	muleq	r0, r8, ip
    24ac:	00000ca2 	andeq	r0, r0, r2, lsr #25
    24b0:	00000cb8 			; <UNDEFINED> instruction: 0x00000cb8
    24b4:	00000cc0 	andeq	r0, r0, r0, asr #25
    24b8:	00000cd6 	ldrdeq	r0, [r0], -r6
    24bc:	00000cde 	ldrdeq	r0, [r0], -lr
    24c0:	00000d82 	andeq	r0, r0, r2, lsl #27
    24c4:	00000d92 	muleq	r0, r2, sp
    24c8:	00000da0 	andeq	r0, r0, r0, lsr #27
    24cc:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
    24d0:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
    24d4:	00000dd4 	ldrdeq	r0, [r0], -r4
    24d8:	00000de4 	andeq	r0, r0, r4, ror #27
    24dc:	00000dfa 	strdeq	r0, [r0], -sl
    24e0:	00000e0a 	andeq	r0, r0, sl, lsl #28
    24e4:	00000e20 	andeq	r0, r0, r0, lsr #28
	...
    24f0:	00000ce2 	andeq	r0, r0, r2, ror #25
    24f4:	00000cf6 	strdeq	r0, [r0], -r6
    24f8:	00000d02 	andeq	r0, r0, r2, lsl #26
    24fc:	00000d18 	andeq	r0, r0, r8, lsl sp
	...
    2508:	00000efc 	strdeq	r0, [r0], -ip
    250c:	00000f6c 	andeq	r0, r0, ip, ror #30
    2510:	0000135c 	andeq	r1, r0, ip, asr r3
    2514:	00001374 	andeq	r1, r0, r4, ror r3
    2518:	000014c6 	andeq	r1, r0, r6, asr #9
    251c:	000014e6 	andeq	r1, r0, r6, ror #9
	...
    2528:	00000f00 	andeq	r0, r0, r0, lsl #30
    252c:	00000f62 	andeq	r0, r0, r2, ror #30
    2530:	0000135c 	andeq	r1, r0, ip, asr r3
    2534:	00001374 	andeq	r1, r0, r4, ror r3
    2538:	000014c6 	andeq	r1, r0, r6, asr #9
    253c:	000014e6 	andeq	r1, r0, r6, ror #9
	...
    2548:	00001092 	muleq	r0, r2, r0
    254c:	00001160 	andeq	r1, r0, r0, ror #2
    2550:	000012c2 	andeq	r1, r0, r2, asr #5
    2554:	0000132c 	andeq	r1, r0, ip, lsr #6
    2558:	0000140e 	andeq	r1, r0, lr, lsl #8
    255c:	00001486 	andeq	r1, r0, r6, lsl #9
	...
    2568:	0000124c 	andeq	r1, r0, ip, asr #4
    256c:	000012be 			; <UNDEFINED> instruction: 0x000012be
    2570:	00001374 	andeq	r1, r0, r4, ror r3
    2574:	00001390 	muleq	r0, r0, r3
    2578:	000014e6 	andeq	r1, r0, r6, ror #9
    257c:	000014fe 	strdeq	r1, [r0], -lr
    2580:	0000159c 	muleq	r0, ip, r5
    2584:	000015a4 	andeq	r1, r0, r4, lsr #11
	...
    2590:	0000124c 	andeq	r1, r0, ip, asr #4
    2594:	00001256 	andeq	r1, r0, r6, asr r2
    2598:	0000125a 	andeq	r1, r0, sl, asr r2
    259c:	0000125c 	andeq	r1, r0, ip, asr r2
    25a0:	00001264 	andeq	r1, r0, r4, ror #4
    25a4:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
    25a8:	00001374 	andeq	r1, r0, r4, ror r3
    25ac:	00001390 	muleq	r0, r0, r3
    25b0:	000014e6 	andeq	r1, r0, r6, ror #9
    25b4:	000014fe 	strdeq	r1, [r0], -lr
    25b8:	0000159c 	muleq	r0, ip, r5
    25bc:	000015a4 	andeq	r1, r0, r4, lsr #11
	...
    25c8:	00001390 	muleq	r0, r0, r3
    25cc:	000013cc 	andeq	r1, r0, ip, asr #7
    25d0:	00001548 	andeq	r1, r0, r8, asr #10
    25d4:	0000159c 	muleq	r0, ip, r5
    25d8:	000015a4 	andeq	r1, r0, r4, lsr #11
    25dc:	000015a8 	andeq	r1, r0, r8, lsr #11
    25e0:	000015ac 	andeq	r1, r0, ip, lsr #11
    25e4:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
	...
    25f0:	000013d4 	ldrdeq	r1, [r0], -r4
    25f4:	00001406 	andeq	r1, r0, r6, lsl #8
    25f8:	000014fe 	strdeq	r1, [r0], -lr
    25fc:	00001548 	andeq	r1, r0, r8, asr #10
    2600:	000015a8 	andeq	r1, r0, r8, lsr #11
    2604:	000015ac 	andeq	r1, r0, ip, lsr #11
    2608:	000015b4 			; <UNDEFINED> instruction: 0x000015b4
    260c:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
	...
    2618:	000015d4 	ldrdeq	r1, [r0], -r4
    261c:	000015d8 	ldrdeq	r1, [r0], -r8
    2620:	000015dc 	ldrdeq	r1, [r0], -ip
    2624:	000015e0 	andeq	r1, r0, r0, ror #11
    2628:	000015e8 	andeq	r1, r0, r8, ror #11
    262c:	00001680 	andeq	r1, r0, r0, lsl #13
    2630:	0000175e 	andeq	r1, r0, lr, asr r7
    2634:	000018a2 	andeq	r1, r0, r2, lsr #17
	...
    2640:	00001680 	andeq	r1, r0, r0, lsl #13
    2644:	000016dc 	ldrdeq	r1, [r0], -ip
    2648:	000018a2 	andeq	r1, r0, r2, lsr #17
    264c:	0000196c 	andeq	r1, r0, ip, ror #18
	...
    2658:	000016dc 	ldrdeq	r1, [r0], -ip
    265c:	000016e4 	andeq	r1, r0, r4, ror #13
    2660:	000016e8 	andeq	r1, r0, r8, ror #13
    2664:	0000170a 	andeq	r1, r0, sl, lsl #14
	...
    2670:	00001a8c 	andeq	r1, r0, ip, lsl #21
    2674:	00001aa2 	andeq	r1, r0, r2, lsr #21
    2678:	00001b48 	andeq	r1, r0, r8, asr #22
    267c:	00001c66 	andeq	r1, r0, r6, ror #24
    2680:	00001cf0 	strdeq	r1, [r0], -r0
    2684:	00001e90 	muleq	r0, r0, lr
	...
    2690:	00001a8c 	andeq	r1, r0, ip, lsl #21
    2694:	00001aa2 	andeq	r1, r0, r2, lsr #21
    2698:	00001b5e 	andeq	r1, r0, lr, asr fp
    269c:	00001bc2 	andeq	r1, r0, r2, asr #23
    26a0:	00001d08 	andeq	r1, r0, r8, lsl #26
    26a4:	00001dfa 	strdeq	r1, [r0], -sl
    26a8:	00001e78 	andeq	r1, r0, r8, ror lr
    26ac:	00001e90 	muleq	r0, r0, lr
	...
    26b8:	00001bc2 	andeq	r1, r0, r2, asr #23
    26bc:	00001bf4 	strdeq	r1, [r0], -r4
    26c0:	00001cf0 	strdeq	r1, [r0], -r0
    26c4:	00001d08 	andeq	r1, r0, r8, lsl #26
    26c8:	00001dfa 	strdeq	r1, [r0], -sl
    26cc:	00001e78 	andeq	r1, r0, r8, ror lr
	...
    26d8:	00001bf4 	strdeq	r1, [r0], -r4
    26dc:	00001bf8 	strdeq	r1, [r0], -r8
    26e0:	00001bfc 	strdeq	r1, [r0], -ip
    26e4:	00001c1e 	andeq	r1, r0, lr, lsl ip
	...
    26f0:	00001c66 	andeq	r1, r0, r6, ror #24
    26f4:	00001c68 	andeq	r1, r0, r8, ror #24
    26f8:	00001c6e 	andeq	r1, r0, lr, ror #24
    26fc:	00001c70 	andeq	r1, r0, r0, ror ip
    2700:	00001c74 	andeq	r1, r0, r4, ror ip
    2704:	00001c78 	andeq	r1, r0, r8, ror ip
    2708:	00001c7a 	andeq	r1, r0, sl, ror ip
    270c:	00001c8a 	andeq	r1, r0, sl, lsl #25
    2710:	00001c8e 	andeq	r1, r0, lr, lsl #25
    2714:	00001c92 	muleq	r0, r2, ip
    2718:	00001c96 	muleq	r0, r6, ip
    271c:	00001ce6 	andeq	r1, r0, r6, ror #25
	...
    2728:	00000090 	muleq	r0, r0, r0
    272c:	0000011e 	andeq	r0, r0, lr, lsl r1
    2730:	0000016e 	andeq	r0, r0, lr, ror #2
    2734:	000001a6 	andeq	r0, r0, r6, lsr #3
	...
    2740:	0000026a 	andeq	r0, r0, sl, ror #4
    2744:	0000026e 	andeq	r0, r0, lr, ror #4
    2748:	0000027c 	andeq	r0, r0, ip, ror r2
    274c:	00000284 	andeq	r0, r0, r4, lsl #5
    2750:	0000028a 	andeq	r0, r0, sl, lsl #5
    2754:	0000028e 	andeq	r0, r0, lr, lsl #5
	...
    2760:	0000031a 	andeq	r0, r0, sl, lsl r3
    2764:	0000031e 	andeq	r0, r0, lr, lsl r3
    2768:	0000032a 	andeq	r0, r0, sl, lsr #6
    276c:	00000332 	andeq	r0, r0, r2, lsr r3
    2770:	00000338 	andeq	r0, r0, r8, lsr r3
    2774:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
    2780:	0000040a 	andeq	r0, r0, sl, lsl #8
    2784:	0000040e 	andeq	r0, r0, lr, lsl #8
    2788:	0000041c 	andeq	r0, r0, ip, lsl r4
    278c:	00000424 	andeq	r0, r0, r4, lsr #8
    2790:	0000042a 	andeq	r0, r0, sl, lsr #8
    2794:	0000042e 	andeq	r0, r0, lr, lsr #8
	...
    27a0:	000000f8 	strdeq	r0, [r0], -r8
    27a4:	00000104 	andeq	r0, r0, r4, lsl #2
    27a8:	00000108 	andeq	r0, r0, r8, lsl #2
    27ac:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
    27b8:	0000016e 	andeq	r0, r0, lr, ror #2
    27bc:	00000172 	andeq	r0, r0, r2, ror r1
    27c0:	0000017c 	andeq	r0, r0, ip, ror r1
    27c4:	00000180 	andeq	r0, r0, r0, lsl #3
    27c8:	00000186 	andeq	r0, r0, r6, lsl #3
    27cc:	0000018a 	andeq	r0, r0, sl, lsl #3
    27d0:	0000018c 	andeq	r0, r0, ip, lsl #3
    27d4:	00000190 	muleq	r0, r0, r1
	...
    27e0:	000000fa 	strdeq	r0, [r0], -sl
    27e4:	00000118 	andeq	r0, r0, r8, lsl r1
    27e8:	00000124 	andeq	r0, r0, r4, lsr #2
    27ec:	00000136 	andeq	r0, r0, r6, lsr r1
	...
    27f8:	0000014e 	andeq	r0, r0, lr, asr #2
    27fc:	0000017c 	andeq	r0, r0, ip, ror r1
    2800:	00000186 	andeq	r0, r0, r6, lsl #3
    2804:	00000198 	muleq	r0, r8, r1
	...
    2810:	00000154 	andeq	r0, r0, r4, asr r1
    2814:	00000174 	andeq	r0, r0, r4, ror r1
    2818:	00000186 	andeq	r0, r0, r6, lsl #3
    281c:	00000198 	muleq	r0, r8, r1
	...
    2828:	000001ca 	andeq	r0, r0, sl, asr #3
    282c:	000001ce 	andeq	r0, r0, lr, asr #3
    2830:	000001d2 	ldrdeq	r0, [r0], -r2
    2834:	000001d6 	ldrdeq	r0, [r0], -r6
    2838:	000001d8 	ldrdeq	r0, [r0], -r8
    283c:	000001e6 	andeq	r0, r0, r6, ror #3
	...
    2848:	000001ca 	andeq	r0, r0, sl, asr #3
    284c:	000001ce 	andeq	r0, r0, lr, asr #3
    2850:	000001d2 	ldrdeq	r0, [r0], -r2
    2854:	000001d6 	ldrdeq	r0, [r0], -r6
    2858:	000001d8 	ldrdeq	r0, [r0], -r8
    285c:	000001e2 	andeq	r0, r0, r2, ror #3
	...
    2868:	000001d6 	ldrdeq	r0, [r0], -r6
    286c:	000001d8 	ldrdeq	r0, [r0], -r8
    2870:	00000202 	andeq	r0, r0, r2, lsl #4
    2874:	00000204 	andeq	r0, r0, r4, lsl #4
    2878:	0000020a 	andeq	r0, r0, sl, lsl #4
    287c:	00000232 	andeq	r0, r0, r2, lsr r2
	...
    2888:	00000234 	andeq	r0, r0, r4, lsr r2
    288c:	00000238 	andeq	r0, r0, r8, lsr r2
    2890:	0000023a 	andeq	r0, r0, sl, lsr r2
    2894:	00000264 	andeq	r0, r0, r4, ror #4
	...
    28a0:	0000032c 	andeq	r0, r0, ip, lsr #6
    28a4:	00000330 	andeq	r0, r0, r0, lsr r3
    28a8:	00000338 	andeq	r0, r0, r8, lsr r3
    28ac:	0000033e 	andeq	r0, r0, lr, lsr r3
    28b0:	00000340 	andeq	r0, r0, r0, asr #6
    28b4:	00000346 	andeq	r0, r0, r6, asr #6
	...
    28c0:	00000348 	andeq	r0, r0, r8, asr #6
    28c4:	0000034c 	andeq	r0, r0, ip, asr #6
    28c8:	0000034e 	andeq	r0, r0, lr, asr #6
    28cc:	00000354 	andeq	r0, r0, r4, asr r3
    28d0:	0000035a 	andeq	r0, r0, sl, asr r3
    28d4:	0000035e 	andeq	r0, r0, lr, asr r3
	...
