
.\rom_0x08003000.elf:     file format elf32-littlearm
.\rom_0x08003000.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08003000

Program Header:
0x70000001 off    0x0000dc48 vaddr 0x0800dc48 paddr 0x0800dc48 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**15
         filesz 0x0000f220 memsz 0x0000f220 flags r-x
    LOAD off    0x00010000 vaddr 0x20000000 paddr 0x0800f220 align 2**15
         filesz 0x00000588 memsz 0x000005f8 flags rw-
private flags = 5000202: [Version5 EABI] [soft-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac48  08003000  08003000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800dc48  0800dc48  0000dc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       000015d0  0800dc50  0800dc50  0000dc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000588  20000000  0800f220  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000070  20000588  0800f7a8  00010588  2**2
                  ALLOC
  5 .debug_info   00007440  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001679  00000000  00000000  000179c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001c0  00000000  00000000  00019048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d8  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000121a  00000000  00000000  0001b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000030  00000000  00000000  0001c5fa  2**0
                  CONTENTS, READONLY
 11 .ARM.attributes 00000031  00000000  00000000  0001c62a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000014a8  00000000  00000000  0001c65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000020ef  00000000  00000000  0001db04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024f0  00000000  00000000  0001fbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08003000 l    d  .text	00000000 .text
0800dc48 l    d  .ARM.exidx	00000000 .ARM.exidx
0800dc50 l    d  .rodata	00000000 .rodata
20000000 l    d  .data	00000000 .data
20000588 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 crt0.o
20004fff l       *ABS*	00000000 RAM_END
20004c00 l       *ABS*	00000000 PSP_BASE
20004c00 l       *ABS*	00000000 MSP_LIMIT
20005000 l       *ABS*	00000000 MSP_BASE
00000400 l       *ABS*	00000000 MSP_SIZE
08003179 l       .text	00000000 _PSR
0800313a l       .text	00000000 _loop
0800316c l       .text	00000000 fmt
0800317d l       .text	00000000 _r0
08003181 l       .text	00000000 _r1
08003185 l       .text	00000000 _r2
08003189 l       .text	00000000 _r3
0800318d l       .text	00000000 _r4
08003191 l       .text	00000000 _r5
08003195 l       .text	00000000 _r6
08003199 l       .text	00000000 _r7
0800319d l       .text	00000000 _r8
080031a1 l       .text	00000000 _r9
080031a5 l       .text	00000000 _r10
080031a9 l       .text	00000000 _r11
080031ad l       .text	00000000 _r12
080031b1 l       .text	00000000 _PSP
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 core_cm3.c
00000000 l    df *ABS*	00000000 graphics.c
0800dc50 l       .rodata	00000000 .LANCHOR0
00000000 l    df *ABS*	00000000 jog_key.c
00000000 l    df *ABS*	00000000 key.c
00000000 l    df *ABS*	00000000 lcd.c
20000588 l       .bss	00000000 .LANCHOR0
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
0800ec58 l       .rodata	00000000 .LANCHOR0
0800ec58 l     O .rodata	0000000c color
00000000 l    df *ABS*	00000000 runtime.c
20000598 l       .bss	00000000 .LANCHOR0
20000598 l     O .bss	00000004 heap.4848
00000000 l    df *ABS*	00000000 stm32f10x_it.c
08006fec l     F .text	00000038 Stack_Dump
2000059c l       .bss	00000000 .LANCHOR1
0800ec64 l       .rodata	00000000 .LANCHOR0
0800ec64 l     O .rodata	00000020 Stack_reg
0800ec84 l     O .rodata	00000020 EXTI9_5_LUT.4985
0800eca4 l     O .rodata	00000010 EXTI15_10_LUT.5040
00000000 l    df *ABS*	00000000 systick.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 impure.c
2000000c l     O .data	000000f0 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
0800edbc l       .rodata	00000000 .LANCHOR0
0800edbc l     O .rodata	00000010 blanks.6752
0800edcc l     O .rodata	00000010 zeroes.6753
00000000 l    df *ABS*	00000000 dtoa.c
080090b8 l     F .text	0000014a quorem
00000000 l    df *ABS*	00000000 locale.c
200000fc l       .data	00000000 .LANCHOR0
200000fc l     O .data	00000020 lc_ctype_charset
20000120 l     O .data	00000020 lc_message_charset
20000140 l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
20000178 l       .data	00000000 .LANCHOR0
200005c0 l       .bss	00000000 .LANCHOR1
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800ede0 l       .rodata	00000000 .LANCHOR0
0800ede0 l     O .rodata	0000000c p05.5301
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
0800ef08 l       .rodata	00000000 .LANCHOR0
0800ef08 l     O .rodata	00000010 blanks.6696
0800ef18 l     O .rodata	00000010 zeroes.6697
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 _udivsi3.o
0800c9b8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000 shift
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 
08007244 g     F .text	00000006 EXTI2_IRQHandler
0800328c g     F .text	00000006 __set_PRIMASK
0800b158 g     F .text	00000034 _mprec_log10
0800b1d4 g     F .text	0000005e __any_on
0800eeb8 g     O .rodata	00000028 __mprec_tinytens
0800d49c g     F .text	00000012 .hidden __aeabi_dcmple
0800c8c4 g     F .text	0000001a cleanup_glue
0800d5c4 g     F .text	00000030 .hidden __gnu_uldivmod_helper
08003c00 g     F .text	00000026 Key_Poll_Init
0800d3d8 g     F .text	0000007a .hidden __cmpdf2
080071d4 g     F .text	00000010 DebugMon_Handler
0800d3d8 g     F .text	0000007a .hidden __eqdf2
20000000 g     O .data	00000002 BACK_COLOR
0800d5f4 g     F .text	00000352 .hidden __divdi3
0800cf48 g     F .text	0000005a .hidden __floatdidf
08007be4 g     F .text	0000001a vsprintf
08007344 g     F .text	00000006 TIM1_CC_IRQHandler
08007068 g     F .text	0000012a HardFault_Handler
0800a190 g     F .text	00000052 _setlocale_r
0800dc58 g     O .rodata	00001000 eng8x16
08003a5c g     F .text	00000034 Jog_Get_Pressed
0800a8f8 g     F .text	00000002 __malloc_unlock
0800429c g     F .text	0000005e Lcd_Write_RAM_Prepare
200005b0 g     O .bss	00000004 USART1_rx_data
08003294 g     F .text	00000006 __get_FAULTMASK
080071f4 g     F .text	0000000e SysTick_Handler
080032b4 g     F .text	00000004 __REV
0800720c g     F .text	00000006 PVD_IRQHandler
0800c368 g     F .text	000000ce memmove
08003e58 g     F .text	00000062 Lcd_Reset
080071e4 g     F .text	00000010 PendSV_Handler
08007058 g     F .text	00000010 NMI_Handler
0800a8fc g     F .text	0000006c _Balloc
0800724c g     F .text	00000032 EXTI3_IRQHandler
0800d3c8 g     F .text	0000008a .hidden __gtdf2
080032f0 g     F .text	00000006 __STREXW
080032d8 g     F .text	00000006 __LDREXW
200005f4 g     O .bss	00000004 errno
0800d464 g     F .text	00000010 .hidden __aeabi_cdcmple
20000594 g     O .bss	00000002 POINT_COLOR
080074b0 g     F .text	0000000c SysTick_Get_Load_Time
08006e3c g     F .text	0000016c Main
08003ebc g     F .text	00000052 Lcd_WR_REG
0800a84c g     F .text	000000a6 memcpy
0800d454 g     F .text	00000020 .hidden __aeabi_cdrcmple
08006dc8 g     F .text	0000001c LED_Display
08004af0 g     F .text	00000006 Lcd_Clr_Screen
08007c00 g     F .text	000014b4 _svfprintf_r
0800ced8 g     F .text	00000022 .hidden __floatsidf
0800d3d0 g     F .text	00000082 .hidden __ltdf2
080072c8 g     F .text	00000006 USB_HP_CAN_TX_IRQHandler
08003f10 g     F .text	00000052 Lcd_WR_DATA
08007234 g     F .text	00000006 EXTI0_IRQHandler
08006df8 g     F .text	00000012 LED_All_Off
08007390 g     F .text	00000006 I2C2_EV_IRQHandler
2000059c g     O .bss	00000004 SysTick_Flag
0800d568 g     F .text	00000000 .hidden __aeabi_uldivmod
0800b234 g     F .text	00000050 __fpclassifyd
0800b0f8 g     F .text	0000005e __ratio
080032c0 g     F .text	00000006 __RBIT
20000000 g       .data	00000000 __RW_BASE__
0800a22c g     F .text	00000010 malloc
0800c9b8 g     F .text	0000025c .hidden __udivsi3
0800edf0 g     O .rodata	000000c8 __mprec_tens
080071b4 g     F .text	00000010 UsageFault_Handler
0800329c g     F .text	00000006 __set_FAULTMASK
0800a1e4 g     F .text	0000000a __locale_charset
0800d528 g     F .text	00000040 .hidden __fixunsdfsi
080072c0 g     F .text	00000006 ADC1_2_IRQHandler
200005c0 g     O .bss	00000004 __malloc_top_pad
2000011c g     O .data	00000004 __mb_cur_max
0800ceb8 g     F .text	0000001e .hidden __aeabi_ui2d
0800a208 g     F .text	00000008 _localeconv_r
080034f4 g     F .text	0000022c Lcd_Puts
0800ab58 g     F .text	00000012 __i2b
08004660 g     F .text	000000b8 Lcd_Fill
080073a0 g     F .text	00000006 SPI1_IRQHandler
080072e0 g     F .text	00000006 CAN_SCE_IRQHandler
0800cc34 g     F .text	00000000 .hidden __aeabi_drsub
0800b284 g     F .text	00000026 _sbrk_r
08007214 g     F .text	00000006 TAMPER_IRQHandler
08006d98 g     F .text	0000002e LED_Init
0800d488 g     F .text	00000012 .hidden __aeabi_dcmplt
080031ec g     F .text	00000068 Clock_Init
200005ec g     O .bss	00000004 __malloc_max_sbrked_mem
0800cefc g     F .text	0000003a .hidden __extendsfdf2
0800d1f8 g     F .text	000001d0 .hidden __aeabi_ddiv
0800cc40 g     F .text	00000276 .hidden __adddf3
20000588 g       .data	00000000 __RW_LIMIT__
080077b8 g     F .text	00000060 Uart1_Printf
0800af90 g     F .text	000000ac __b2d
0800cfa4 g     F .text	00000254 .hidden __aeabi_dmul
080032a4 g     F .text	00000006 __get_CONTROL
0800edb8 g     O .rodata	00000004 _global_impure_ptr
0800c4d8 g     F .text	000003ea _realloc_r
08003978 g     F .text	0000007c Jog_Poll_Init
0800d948 g     F .text	00000300 .hidden __udivdi3
080072a0 g     F .text	00000006 DMA1_Channel4_IRQHandler
0800eee0 g     O .rodata	00000028 __mprec_bigtens
0800aa2c g     F .text	00000098 __s2b
0800ceb8 g     F .text	0000001e .hidden __floatunsidf
08006fa8 g     F .text	00000044 _sbrk
0800ae1c g     F .text	00000042 __mcmp
08007818 g     F .text	00000016 Uart1_Get_Pressed
080069d8 g     F .text	000003c0 Lcd_Put_Pixel
08007b94 g     F .text	0000001a strtol
080079a0 g     F .text	00000042 Uart1_RX_Interrupt_Enable
080073d0 g     F .text	00000006 USART3_IRQHandler
0800721c g     F .text	00000006 RTC_IRQHandler
08003254 g     F .text	00000008 __get_PSP
08003c68 g     F .text	0000008a Key_ISR_Enable
0800325c g     F .text	00000006 __set_PSP
080072b8 g     F .text	00000006 DMA1_Channel7_IRQHandler
0800c8e0 g     F .text	000000d6 _reclaim_reent
0800aac4 g     F .text	0000003c __hi0bits
0800d4d8 g     F .text	0000004e .hidden __fixdfsi
08004af8 g     F .text	000000b8 Lcd_Draw_Box
08003f64 g     F .text	00000336 Lcd_Set_Display_Mode
0800735c g     F .text	00000022 TIM4_IRQHandler
0800cc40 g     F .text	00000276 .hidden __aeabi_dadd
0800d3d0 g     F .text	00000082 .hidden __ledf2
080072d8 g     F .text	00000006 CAN_RX1_IRQHandler
0800acac g     F .text	000000b8 __pow5mult
0800cf38 g     F .text	0000006a .hidden __aeabi_ul2d
200005bc g     O .bss	00000004 __nlocale_changed
00000000  w      *UND*	00000000 __sf_fake_stderr
080031b8 g     F .text	00000000 _HardFault_Handler
08007380 g     F .text	00000006 I2C1_EV_IRQHandler
080030ec g     F .text	00000000 __start
080032c8 g     F .text	00000008 __LDREXB
08003d38 g     F .text	000000a2 Lcd_Write_Reg
080079f0 g     F .text	00000008 _atoi_r
0800d4c4 g     F .text	00000012 .hidden __aeabi_dcmpgt
080072b0 g     F .text	00000006 DMA1_Channel6_IRQHandler
0800a7bc g     F .text	00000090 memchr
0800c1d0 g     F .text	00000198 _free_r
08007354 g     F .text	00000006 TIM3_IRQHandler
0800722c g     F .text	00000006 RCC_IRQHandler
0800a1f0 g     F .text	0000000c __locale_mb_cur_max
08003b08 g     F .text	000000f8 Jog_ISR_Enable
080042fc g     F .text	00000364 Lcd_Set_Windows
0800d4b0 g     F .text	00000012 .hidden __aeabi_dcmpge
0800733c g     F .text	00000006 TIM1_TRG_COM_IRQHandler
08007288 g     F .text	00000006 DMA1_Channel1_IRQHandler
08003284 g     F .text	00000006 __get_PRIMASK
200005b8 g     O .bss	00000004 __mlocale_changed
0800cc3c g     F .text	0000027a .hidden __aeabi_dsub
20000580 g     O .data	00000004 __malloc_sbrk_base
00000588 g       *ABS*	00000000 __RW_SIZE__
0800cf38 g     F .text	0000006a .hidden __floatundidf
0800ad64 g     F .text	000000b6 __lshift
0800b4e8 g     F .text	00000104 __ssprint_r
080073d8 g     F .text	00000046 EXTI15_10_IRQHandler
08003720 g     F .text	00000256 Lcd_Printf
200005ac g     O .bss	00000004 USART1_rx_ready
0800f220 g       *ABS*	00000000 __RW_LOAD_ADDR__
08007478 g     F .text	0000001c SysTick_Run
080032bc g     F .text	00000004 __REVSH
0800ab6c g     F .text	00000140 __multiply
200005c4 g     O .bss	00000028 __malloc_current_mallinfo
0800b03c g     F .text	000000ba __d2b
08003c3c g     F .text	00000014 Key_Wait_Key_Released
08003ddc g     F .text	0000007a Lcd_Write_Data_16Bit
0800ced8 g     F .text	00000022 .hidden __aeabi_i2d
08003000 g       .text	00000000 __RO_BASE__
0800cc30  w    F .text	00000002 .hidden __aeabi_ldiv0
080072e8 g     F .text	00000044 EXTI9_5_IRQHandler
0800d1f8 g     F .text	000001d0 .hidden __divdf3
0800b18c g     F .text	00000046 __copybits
20000178 g     O .data	00000408 __malloc_av_
0800cfa4 g     F .text	00000254 .hidden __muldf3
0800a8f4 g     F .text	00000002 __malloc_lock
0800c0c8 g     F .text	00000062 _calloc_r
080074d0 g     F .text	000000f4 TIM2_Delay
080073a8 g     F .text	00000006 SPI2_IRQHandler
00000000  w      *UND*	00000000 __sf_fake_stdin
080072d0 g     F .text	00000006 USB_LP_CAN_RX0_IRQHandler
0800c438 g     F .text	0000009e memset
08007194 g     F .text	00000010 MemManage_Handler
200005f0 g     O .bss	00000004 __malloc_max_total_mem
200005f4 g       .bss	00000000 __ZI_LIMIT__
08006e0c g     F .text	00000030 System_Init
0800c9b8 g     F .text	00000000 .hidden __aeabi_uidiv
080071c4 g     F .text	00000010 SVC_Handler
08007430 g     F .text	00000048 SysTick_OS_Tick
08003a90 g     F .text	0000003c Jog_Wait_Key_Pressed
080032f8 g     F .text	000001fa Lcd_Eng_Putch
08007a58 g     F .text	0000013c _strtol_r
080032ac g     F .text	00000006 __set_CONTROL
08009204 g     F .text	00000f8a _dtoa_r
0800a24c g     F .text	0000056e _malloc_r
0800cf48 g     F .text	0000005a .hidden __aeabi_l2d
08007774 g     F .text	00000042 Uart1_Send_String
08007738 g     F .text	0000003a Uart1_Send_Byte
08003c28 g     F .text	00000012 Key_Get_Pressed
08006de4 g     F .text	00000012 LED_All_On
080072a8 g     F .text	00000006 DMA1_Channel5_IRQHandler
08007280 g     F .text	00000006 EXTI4_IRQHandler
200005a0 g     O .bss	00000004 Jog_key_in
0800c12c g     F .text	000000a2 _malloc_trim_r
0800b2ac g     F .text	00000000 strcmp
08003264 g     F .text	00000008 __get_MSP
0800f220 g       .rodata	00000000 __RO_LIMIT__
0800d3d8 g     F .text	0000007a .hidden __nedf2
200005b4 g     O .bss	00000004 _PathLocale
20000588 g     O .bss	0000000c lcddev
08004718 g     F .text	00000342 Lcd_Set_Cursor
08007bb0 g     F .text	00000032 _vsprintf_r
08007298 g     F .text	00000006 DMA1_Channel3_IRQHandler
0800a210 g     F .text	00000012 setlocale
080032b8 g     F .text	00000004 __REV16
20000008 g     O .data	00000004 _impure_ptr
08007334 g     F .text	00000006 TIM1_UP_IRQHandler
0800a204 g     F .text	00000004 __locale_cjk_lang
200005a8 g     O .bss	00000004 TIM4_expired
0800b5ec g     F .text	00000adc _svfiprintf_r
00000070 g       *ABS*	00000000 __ZI_SIZE__
08007204 g     F .text	00000006 WWDG_IRQHandler
0800326c g     F .text	00000006 __set_MSP
0800af4c g     F .text	00000042 __ulp
080039f4 g     F .text	00000066 Jog_Get_Pressed_Calm
08007494 g     F .text	0000000e SysTick_Stop
08004bb0 g     F .text	00001e26 Lcd_Init
0800734c g     F .text	00000006 TIM2_IRQHandler
08003cf4 g     F .text	00000042 Lcd_GPIO_Init
0800d528 g     F .text	00000040 .hidden __aeabi_d2uiz
20000588 g       .bss	00000000 __ZI_BASE__
0800a224 g     F .text	00000008 localeconv
0800732c g     F .text	00000006 TIM1_BRK_IRQHandler
0800cc14 g     F .text	0000001a .hidden __aeabi_uidivmod
0800723c g     F .text	00000006 EXTI1_IRQHandler
0800327c g     F .text	00000006 __set_BASEPRI
0800d474 g     F .text	00000012 .hidden __aeabi_dcmpeq
08003c50 g     F .text	00000016 Key_Wait_Key_Pressed
08007680 g     F .text	000000b8 Uart1_Init
08007420 g     F .text	00000006 RTCAlarm_IRQHandler
080073c8 g     F .text	00000006 USART2_IRQHandler
20000584 g     O .data	00000004 __malloc_trim_threshold
0800a1fc g     F .text	00000008 __locale_msgcharset
080032e8 g     F .text	00000008 __STREXH
0800ae60 g     F .text	000000ea __mdiff
0800d4d8 g     F .text	0000004e .hidden __aeabi_d2iz
20000004 g     O .data	00000004 __ctype_ptr__
080032d0 g     F .text	00000008 __LDREXH
08007398 g     F .text	00000006 I2C2_ER_IRQHandler
08007290 g     F .text	00000006 DMA1_Channel2_IRQHandler
00000000  w      *UND*	00000000 __sf_fake_stdout
080079e8 g     F .text	00000008 atoi
0800ecb4 g     O .rodata	00000101 _ctype_
0800cc30  w    F .text	00000002 .hidden __aeabi_idiv0
08007848 g     F .text	0000009c Uart1_Get_String
08007224 g     F .text	00000006 FLASH_IRQHandler
08004a5c g     F .text	00000094 Lcd_Draw_Back_Color
080071a4 g     F .text	00000010 BusFault_Handler
080073b0 g     F .text	00000016 USART1_IRQHandler
080074a4 g     F .text	0000000c SysTick_Get_Time
080079f8 g     F .text	0000005e strlen
080075c4 g     F .text	000000b6 TIM4_Repeat_Interrupt_Enable
08003274 g     F .text	00000006 __get_BASEPRI
0800d464 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0800d3c8 g     F .text	0000008a .hidden __gedf2
08007830 g     F .text	00000018 Uart1_Get_Char
0800d594 g     F .text	00000030 .hidden __gnu_ldivmod_helper
08007388 g     F .text	00000006 I2C1_ER_IRQHandler
0800cefc g     F .text	0000003a .hidden __aeabi_f2d
08003acc g     F .text	0000003c Jog_Wait_Key_Released
080032e0 g     F .text	00000008 __STREXB
0800cc3c g     F .text	0000027a .hidden __subdf3
08003126 g     F .text	00000000 _Print_Reg
0800ab00 g     F .text	00000056 __lo0bits
200005a4 g     O .bss	00000004 Jog_key
08007024 g     F .text	00000032 Invalid_ISR
080078e4 g     F .text	000000ba Uart1_Get_Int_Num
080074bc g     F .text	00000010 SysTick_Check_Timeout
08007428 g     F .text	00000006 USBWakeUp_IRQHandler
0800a23c g     F .text	00000010 free
0800a9a0 g     F .text	0000008c __multadd
0800a968 g     F .text	00000036 _Bfree



Disassembly of section .text:

08003000 <__RO_BASE__>:
 8003000:	20005000 	andcs	r5, r0, r0
 8003004:	080030ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, ip, sp}
 8003008:	00000000 	andeq	r0, r0, r0
 800300c:	080031b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, sp}
	...
 800303c:	080071f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, ip, sp, lr}
 8003040:	08007205 	stmdaeq	r0, {r0, r2, r9, ip, sp, lr}
 8003044:	0800720d 	stmdaeq	r0, {r0, r2, r3, r9, ip, sp, lr}
 8003048:	08007215 	stmdaeq	r0, {r0, r2, r4, r9, ip, sp, lr}
 800304c:	0800721d 	stmdaeq	r0, {r0, r2, r3, r4, r9, ip, sp, lr}
 8003050:	08007225 	stmdaeq	r0, {r0, r2, r5, r9, ip, sp, lr}
 8003054:	0800722d 	stmdaeq	r0, {r0, r2, r3, r5, r9, ip, sp, lr}
 8003058:	08007235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip, sp, lr}
 800305c:	0800723d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, ip, sp, lr}
 8003060:	08007245 	stmdaeq	r0, {r0, r2, r6, r9, ip, sp, lr}
 8003064:	0800724d 	stmdaeq	r0, {r0, r2, r3, r6, r9, ip, sp, lr}
 8003068:	08007281 	stmdaeq	r0, {r0, r7, r9, ip, sp, lr}
 800306c:	08007289 	stmdaeq	r0, {r0, r3, r7, r9, ip, sp, lr}
 8003070:	08007291 	stmdaeq	r0, {r0, r4, r7, r9, ip, sp, lr}
 8003074:	08007299 	stmdaeq	r0, {r0, r3, r4, r7, r9, ip, sp, lr}
 8003078:	080072a1 	stmdaeq	r0, {r0, r5, r7, r9, ip, sp, lr}
 800307c:	080072a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, ip, sp, lr}
 8003080:	080072b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, ip, sp, lr}
 8003084:	080072b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, ip, sp, lr}
 8003088:	080072c1 	stmdaeq	r0, {r0, r6, r7, r9, ip, sp, lr}
	...
 800309c:	080072e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, sp, lr}
 80030a0:	0800732d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, ip, sp, lr}
 80030a4:	08007335 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, ip, sp, lr}
 80030a8:	0800733d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, ip, sp, lr}
 80030ac:	08007345 	stmdaeq	r0, {r0, r2, r6, r8, r9, ip, sp, lr}
 80030b0:	0800734d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, ip, sp, lr}
 80030b4:	08007355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, ip, sp, lr}
 80030b8:	0800735d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, ip, sp, lr}
 80030bc:	08007381 	stmdaeq	r0, {r0, r7, r8, r9, ip, sp, lr}
 80030c0:	08007389 	stmdaeq	r0, {r0, r3, r7, r8, r9, ip, sp, lr}
 80030c4:	08007391 	stmdaeq	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
 80030c8:	08007399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, ip, sp, lr}
 80030cc:	080073a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, ip, sp, lr}
 80030d0:	080073a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, ip, sp, lr}
 80030d4:	080073b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, ip, sp, lr}
 80030d8:	080073c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, sp, lr}
 80030dc:	080073d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, ip, sp, lr}
 80030e0:	080073d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, ip, sp, lr}
 80030e4:	08007421 	stmdaeq	r0, {r0, r5, sl, ip, sp, lr}
 80030e8:	08007429 	stmdaeq	r0, {r0, r3, r5, sl, ip, sp, lr}

080030ec <__start>:
	.extern __RO_LIMIT__
	.extern __RW_BASE__
	.extern __ZI_BASE__
	.extern __ZI_LIMIT__

	ldr		r0, =__RO_LIMIT__
 80030ec:	4837      	ldr	r0, [pc, #220]	; (80031cc <_HardFault_Handler+0x14>)
	ldr		r1, =__RW_BASE__
 80030ee:	4938      	ldr	r1, [pc, #224]	; (80031d0 <_HardFault_Handler+0x18>)
	ldr		r3, =__ZI_BASE__
 80030f0:	4b38      	ldr	r3, [pc, #224]	; (80031d4 <_HardFault_Handler+0x1c>)

	cmp		r0, r1
 80030f2:	4288      	cmp	r0, r1
	beq		2f
 80030f4:	d006      	beq.n	8003104 <__start+0x18>

1:
	cmp		r1, r3
 80030f6:	4299      	cmp	r1, r3
	ittt	lo
 80030f8:	bf3e      	ittt	cc
	ldrlo	r2, [r0], #4
 80030fa:	f850 2b04 	ldrcc.w	r2, [r0], #4
	strlo	r2, [r1], #4
 80030fe:	f841 2b04 	strcc.w	r2, [r1], #4
	blo		1b
 8003102:	e7f8      	bcc.n	80030f6 <__start+0xa>

2:
	ldr		r1, =__ZI_LIMIT__
 8003104:	4934      	ldr	r1, [pc, #208]	; (80031d8 <_HardFault_Handler+0x20>)
	mov		r2, #0x0
 8003106:	f04f 0200 	mov.w	r2, #0
3:
	cmp		r3, r1
 800310a:	428b      	cmp	r3, r1
	itt		lo
 800310c:	bf3c      	itt	cc
	strlo	r2, [r3], #4
 800310e:	f843 2b04 	strcc.w	r2, [r3], #4
	blo		3b
 8003112:	e7fa      	bcc.n	800310a <__start+0x1e>
	.equ PSP_BASE,	(MSP_LIMIT)
	.equ MSP_BASE,	(RAM_END + 1)
	.equ MSP_SIZE,	(1*1024)
	.equ MSP_LIMIT,	(MSP_BASE - MSP_SIZE)

	ldr		r0, =PSP_BASE
 8003114:	4831      	ldr	r0, [pc, #196]	; (80031dc <_HardFault_Handler+0x24>)
	msr		psp, r0
 8003116:	f380 8809 	msr	PSP, r0
	ldr		r0, =(0x1<<1)|(0x0<<0)
 800311a:	4831      	ldr	r0, [pc, #196]	; (80031e0 <_HardFault_Handler+0x28>)
	msr		control, r0
 800311c:	f380 8814 	msr	CONTROL, r0

	bl		Main
 8003120:	f003 fe8c 	bl	8006e3c <Main>

	b		.
 8003124:	e7fe      	b.n	8003124 <__start+0x38>

08003126 <_Print_Reg>:
    .extern	Uart1_Printf

    .global _Print_Reg
  	.type 	_Print_Reg, %function
_Print_Reg:
    PUSH	{r0-r12,lr}
 8003126:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    MRS     r1, PSR
 800312a:	f3ef 8103 	mrs	r1, PSR
    PUSH    {r0, r1}
 800312e:	b403      	push	{r0, r1}

    MOV     r6, #14
 8003130:	f04f 060e 	mov.w	r6, #14
    MOV     r4, #4
 8003134:	f04f 0404 	mov.w	r4, #4
    LDR     r5, =_PSR
 8003138:	4d2a      	ldr	r5, [pc, #168]	; (80031e4 <_HardFault_Handler+0x2c>)

0800313a <_loop>:
_loop:
    LDR     r0, =fmt
 800313a:	482b      	ldr	r0, [pc, #172]	; (80031e8 <_HardFault_Handler+0x30>)
    MOV     r1, r5
 800313c:	4629      	mov	r1, r5
    LDR     r2, [sp, r4]
 800313e:	f85d 2004 	ldr.w	r2, [sp, r4]
    BL      Uart1_Printf
 8003142:	f004 fb39 	bl	80077b8 <Uart1_Printf>

    ADD     r4, r4, #4
 8003146:	f104 0404 	add.w	r4, r4, #4
    ADD     r5, r5, #4
 800314a:	f105 0504 	add.w	r5, r5, #4
    SUBS    r6, r6, #1
 800314e:	3e01      	subs	r6, #1
    BGT     _loop
 8003150:	dcf3      	bgt.n	800313a <_loop>

    LDR     r0, =fmt
 8003152:	4825      	ldr	r0, [pc, #148]	; (80031e8 <_HardFault_Handler+0x30>)
    MOV     r1, r5
 8003154:	4629      	mov	r1, r5
    MRS     r2, psp
 8003156:	f3ef 8209 	mrs	r2, PSP
    BL      Uart1_Printf
 800315a:	f004 fb2d 	bl	80077b8 <Uart1_Printf>

    POP     {r0, r1}
 800315e:	bc03      	pop	{r0, r1}
	MSR     APSR_nzcvq, r1
 8003160:	f381 8800 	msr	CPSR_f, r1
	MSR     IEPSR, r1
 8003164:	f381 8807 	msr	IEPSR, r1
    POP		{r0-r12, pc}
 8003168:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0800316c <fmt>:
 800316c:	3a207325 	bcc	881fe08 <__RW_LOAD_ADDR__+0x810be8>
 8003170:	25783020 	ldrbcs	r3, [r8, #-32]!	; 0xffffffe0
 8003174:	0a58382e 	beq	9611234 <__RW_LOAD_ADDR__+0x1602014>
	...

08003179 <_PSR>:
 8003179:	00525350 	subseq	r5, r2, r0, asr r3

0800317d <_r0>:
 800317d:	00303052 	eorseq	r3, r0, r2, asr r0

08003181 <_r1>:
 8003181:	00313052 	eorseq	r3, r1, r2, asr r0

08003185 <_r2>:
 8003185:	00323052 	eorseq	r3, r2, r2, asr r0

08003189 <_r3>:
 8003189:	00333052 	eorseq	r3, r3, r2, asr r0

0800318d <_r4>:
 800318d:	00343052 	eorseq	r3, r4, r2, asr r0

08003191 <_r5>:
 8003191:	00353052 	eorseq	r3, r5, r2, asr r0

08003195 <_r6>:
 8003195:	00363052 	eorseq	r3, r6, r2, asr r0

08003199 <_r7>:
 8003199:	00373052 	eorseq	r3, r7, r2, asr r0

0800319d <_r8>:
 800319d:	00383052 	eorseq	r3, r8, r2, asr r0

080031a1 <_r9>:
 80031a1:	00393052 	eorseq	r3, r9, r2, asr r0

080031a5 <_r10>:
 80031a5:	00303152 	eorseq	r3, r0, r2, asr r1

080031a9 <_r11>:
 80031a9:	00313152 	eorseq	r3, r1, r2, asr r1

080031ad <_r12>:
 80031ad:	00323152 	eorseq	r3, r2, r2, asr r1

080031b1 <_PSP>:
 80031b1:	00505350 	subseq	r5, r0, r0, asr r3
 80031b5:	01bf0000 			; <UNDEFINED> instruction: 0x01bf0000

080031b8 <_HardFault_Handler>:

    .global _HardFault_Handler
  	.type 	_HardFault_Handler, %function
_HardFault_Handler:

	PUSH	{r0, lr}
 80031b8:	b501      	push	{r0, lr}
	BL    	_Print_Reg
 80031ba:	f7ff ffb4 	bl	8003126 <_Print_Reg>
	ADD   	r0, sp, #8
 80031be:	a802      	add	r0, sp, #8
	LDR   	r1, [sp, #4]
 80031c0:	9901      	ldr	r1, [sp, #4]
	MRS   	r2, psp
 80031c2:	f3ef 8209 	mrs	r2, PSP
	BL    	HardFault_Handler
 80031c6:	f003 ff4f 	bl	8007068 <HardFault_Handler>
	POP	 	{r0, pc}
 80031ca:	bd01      	pop	{r0, pc}
	.extern __RO_LIMIT__
	.extern __RW_BASE__
	.extern __ZI_BASE__
	.extern __ZI_LIMIT__

	ldr		r0, =__RO_LIMIT__
 80031cc:	0800f220 	stmdaeq	r0, {r5, r9, ip, sp, lr, pc}
	ldr		r1, =__RW_BASE__
 80031d0:	20000000 	andcs	r0, r0, r0
	ldr		r3, =__ZI_BASE__
 80031d4:	20000588 	andcs	r0, r0, r8, lsl #11
	ldrlo	r2, [r0], #4
	strlo	r2, [r1], #4
	blo		1b

2:
	ldr		r1, =__ZI_LIMIT__
 80031d8:	200005f4 	strdcs	r0, [r0], -r4
	.equ PSP_BASE,	(MSP_LIMIT)
	.equ MSP_BASE,	(RAM_END + 1)
	.equ MSP_SIZE,	(1*1024)
	.equ MSP_LIMIT,	(MSP_BASE - MSP_SIZE)

	ldr		r0, =PSP_BASE
 80031dc:	20004c00 	andcs	r4, r0, r0, lsl #24
	msr		psp, r0
	ldr		r0, =(0x1<<1)|(0x0<<0)
 80031e0:	00000002 	andeq	r0, r0, r2
    MRS     r1, PSR
    PUSH    {r0, r1}

    MOV     r6, #14
    MOV     r4, #4
    LDR     r5, =_PSR
 80031e4:	08003179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, ip, sp}
_loop:
    LDR     r0, =fmt
 80031e8:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}

080031ec <Clock_Init>:
#include "device_driver.h"

void Clock_Init(void)
{
	RCC->CR = 0x1;
 80031ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

	Macro_Set_Bit(RCC->CR, 16);
 80031f8:	681a      	ldr	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 17));
 80031fa:	4619      	mov	r1, r3

void Clock_Init(void)
{
	RCC->CR = 0x1;

	Macro_Set_Bit(RCC->CR, 16);
 80031fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003200:	601a      	str	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 17));
 8003202:	680a      	ldr	r2, [r1, #0]
 8003204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003208:	0390      	lsls	r0, r2, #14
 800320a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800320e:	d5f8      	bpl.n	8003202 <Clock_Init+0x16>

	RCC->CFGR = ((9-2)<<18)|(0<<17)|(1<<16)|(0<<11)|(4<<8)|(0<<4)|(0<<0);
 8003210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003214:	f2c0 021d 	movt	r2, #29
 8003218:	605a      	str	r2, [r3, #4]

	Macro_Set_Bit(RCC->CR, 24);
 800321a:	681a      	ldr	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 25));
 800321c:	4619      	mov	r1, r3
	Macro_Set_Bit(RCC->CR, 16);
	while(!Macro_Check_Bit_Set(RCC->CR, 17));

	RCC->CFGR = ((9-2)<<18)|(0<<17)|(1<<16)|(0<<11)|(4<<8)|(0<<4)|(0<<0);

	Macro_Set_Bit(RCC->CR, 24);
 800321e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003222:	601a      	str	r2, [r3, #0]
	while(!Macro_Check_Bit_Set(RCC->CR, 25));
 8003224:	680a      	ldr	r2, [r1, #0]
 8003226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322a:	0192      	lsls	r2, r2, #6
 800322c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003230:	d5f8      	bpl.n	8003224 <Clock_Init+0x38>

	Macro_Write_Block(FLASH->ACR, 0x3, 0x2, 0);
 8003232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003236:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800323a:	6811      	ldr	r1, [r2, #0]
 800323c:	f021 0103 	bic.w	r1, r1, #3
 8003240:	f041 0102 	orr.w	r1, r1, #2
 8003244:	6011      	str	r1, [r2, #0]
	Macro_Write_Block(RCC->CFGR, 0x3, 0x2, 0);
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	f022 0203 	bic.w	r2, r2, #3
 800324c:	f042 0202 	orr.w	r2, r2, #2
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	4770      	bx	lr

08003254 <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
 8003254:	f3ef 8009 	mrs	r0, PSP
 8003258:	4600      	mov	r0, r0
 800325a:	4770      	bx	lr

0800325c <__set_PSP>:
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
 800325c:	f380 8809 	msr	PSP, r0
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop

08003264 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
 8003264:	f3ef 8008 	mrs	r0, MSP
 8003268:	4600      	mov	r0, r0
 800326a:	4770      	bx	lr

0800326c <__set_MSP>:
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
 800326c:	f380 8808 	msr	MSP, r0
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 8003274:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  return(result);
}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 800327c:	f380 8811 	msr	BASEPRI, r0
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop

08003284 <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003284:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop

0800328c <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 800328c:	f380 8810 	msr	PRIMASK, r0
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop

08003294 <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 8003294:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 800329c:	f380 8813 	msr	FAULTMASK, r0
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80032a4:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop

080032ac <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 80032ac:	f380 8814 	msr	CONTROL, r0
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	ba00      	rev	r0, r0
  return(result);
}
 80032b6:	4770      	bx	lr

080032b8 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	ba40      	rev16	r0, r0
  return(result);
}
 80032ba:	4770      	bx	lr

080032bc <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	bac0      	revsh	r0, r0
  return(result);
}
 80032be:	4770      	bx	lr

080032c0 <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 80032c8:	e8d0 0f4f 	ldrexb	r0, [r0]
   return(result);
}
 80032cc:	b2c0      	uxtb	r0, r0
 80032ce:	4770      	bx	lr

080032d0 <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 80032d0:	e8d0 0f5f 	ldrexh	r0, [r0]
   return(result);
}
 80032d4:	b280      	uxth	r0, r0
 80032d6:	4770      	bx	lr

080032d8 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 80032d8:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 80032e0:	e8c1 0f43 	strexb	r3, r0, [r1]
 80032e4:	4618      	mov	r0, r3
   return(result);
}
 80032e6:	4770      	bx	lr

080032e8 <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 80032e8:	e8c1 0f53 	strexh	r3, r0, [r1]
 80032ec:	4618      	mov	r0, r3
   return(result);
}
 80032ee:	4770      	bx	lr

080032f0 <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 80032f0:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <Lcd_Eng_Putch>:

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 80032f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 80032fc:	f64d 4450 	movw	r4, #56400	; 0xdc50
 8003300:	f6c0 0400 	movt	r4, #2048	; 0x800

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 8003304:	b093      	sub	sp, #76	; 0x4c
 8003306:	4680      	mov	r8, r0
 8003308:	4689      	mov	r9, r1
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	6861      	ldr	r1, [r4, #4]
 800330e:	ae08      	add	r6, sp, #32
 8003310:	c603      	stmia	r6!, {r0, r1}

#define COPY(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)=*(A+loop);
#define OR(A,B) 	for(loop=0;loop<32;loop++) *(B+loop)|=*(A+loop);

void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
 8003312:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003314:	4694      	mov	ip, r2
 8003316:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800331a:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800331e:	469a      	mov	sl, r3
 8003320:	6869      	ldr	r1, [r5, #4]
 8003322:	68aa      	ldr	r2, [r5, #8]
 8003324:	68eb      	ldr	r3, [r5, #12]
 8003326:	ac0a      	add	r4, sp, #40	; 0x28
 8003328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800332a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800332c:	6928      	ldr	r0, [r5, #16]
 800332e:	6969      	ldr	r1, [r5, #20]
 8003330:	69aa      	ldr	r2, [r5, #24]
 8003332:	69eb      	ldr	r3, [r5, #28]
 8003334:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8003336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003338:	1e78      	subs	r0, r7, #1
 800333a:	4242      	negs	r2, r0
 800333c:	4142      	adcs	r2, r0
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 800333e:	1ebc      	subs	r4, r7, #2
 8003340:	4267      	negs	r7, r4
 8003342:	4167      	adcs	r7, r4
 8003344:	1e75      	subs	r5, r6, #1
 8003346:	4269      	negs	r1, r5
 8003348:	4169      	adcs	r1, r5
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800334a:	3e02      	subs	r6, #2
 800334c:	4273      	negs	r3, r6
 800334e:	4173      	adcs	r3, r6
 8003350:	fa1f f989 	uxth.w	r9, r9
 8003354:	f8cd 901c 	str.w	r9, [sp, #28]
 8003358:	fa1f f888 	uxth.w	r8, r8
 800335c:	ea02 0601 	and.w	r6, r2, r1
 8003360:	401a      	ands	r2, r3
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003362:	403b      	ands	r3, r7
 8003364:	f8cd 800c 	str.w	r8, [sp, #12]
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003368:	4039      	ands	r1, r7
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 800336a:	9306      	str	r3, [sp, #24]
 800336c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003370:	2300      	movs	r3, #0
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003372:	fa1f fa8a 	uxth.w	sl, sl
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 8003376:	fa1f f98c 	uxth.w	r9, ip
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 800337a:	9101      	str	r1, [sp, #4]
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800337c:	9204      	str	r2, [sp, #16]
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 800337e:	9302      	str	r3, [sp, #8]
 8003380:	9a02      	ldr	r2, [sp, #8]
 8003382:	9f07      	ldr	r7, [sp, #28]
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 8003384:	f108 0301 	add.w	r3, r8, #1
 8003388:	b29b      	uxth	r3, r3
 800338a:	4417      	add	r7, r2
 800338c:	b2bf      	uxth	r7, r7
 800338e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003392:	9305      	str	r3, [sp, #20]
 8003394:	ab0a      	add	r3, sp, #40	; 0x28
 8003396:	5c9d      	ldrb	r5, [r3, r2]
 8003398:	463b      	mov	r3, r7
 800339a:	2400      	movs	r4, #0
 800339c:	465f      	mov	r7, fp
 800339e:	469b      	mov	fp, r3
 80033a0:	e010      	b.n	80033c4 <Lcd_Eng_Putch+0xcc>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80033a2:	2e00      	cmp	r6, #0
 80033a4:	d152      	bne.n	800344c <Lcd_Eng_Putch+0x154>
				else if( (zx==2)&&(zy==1) )
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d157      	bne.n	800345c <Lcd_Eng_Putch+0x164>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80033ac:	9b04      	ldr	r3, [sp, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d177      	bne.n	80034a2 <Lcd_Eng_Putch+0x1aa>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80033b2:	9b06      	ldr	r3, [sp, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 8088 	bne.w	80034ca <Lcd_Eng_Putch+0x1d2>
 80033ba:	3401      	adds	r4, #1
 80033bc:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 80033be:	2c08      	cmp	r4, #8
 80033c0:	b29f      	uxth	r7, r3
 80033c2:	d02f      	beq.n	8003424 <Lcd_Eng_Putch+0x12c>
		{
			if(temp[ys]&bitmask[xs])
 80033c4:	ab08      	add	r3, sp, #32
 80033c6:	5d1a      	ldrb	r2, [r3, r4]
 80033c8:	4215      	tst	r5, r2
 80033ca:	d1ea      	bne.n	80033a2 <Lcd_Eng_Putch+0xaa>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80033cc:	2e00      	cmp	r6, #0
 80033ce:	d135      	bne.n	800343c <Lcd_Eng_Putch+0x144>
				else if( (zx==2)&&(zy==1) )
 80033d0:	9b01      	ldr	r3, [sp, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d14e      	bne.n	8003474 <Lcd_Eng_Putch+0x17c>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 80033d6:	9b04      	ldr	r3, [sp, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d157      	bne.n	800348c <Lcd_Eng_Putch+0x194>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 80033dc:	9b06      	ldr	r3, [sp, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0eb      	beq.n	80033ba <Lcd_Eng_Putch+0xc2>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 80033e2:	4638      	mov	r0, r7
 80033e4:	9905      	ldr	r1, [sp, #20]
 80033e6:	4652      	mov	r2, sl
 80033e8:	f003 faf6 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 80033ec:	f107 0c01 	add.w	ip, r7, #1
 80033f0:	fa1f fc8c 	uxth.w	ip, ip
 80033f4:	4660      	mov	r0, ip
 80033f6:	4641      	mov	r1, r8
 80033f8:	4652      	mov	r2, sl
 80033fa:	f8cd c000 	str.w	ip, [sp]
 80033fe:	f003 faeb 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 8003402:	4638      	mov	r0, r7
 8003404:	4641      	mov	r1, r8
 8003406:	4652      	mov	r2, sl
 8003408:	f003 fae6 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 800340c:	f8dd c000 	ldr.w	ip, [sp]
 8003410:	9905      	ldr	r1, [sp, #20]
 8003412:	4660      	mov	r0, ip
 8003414:	4652      	mov	r2, sl
 8003416:	3401      	adds	r4, #1
 8003418:	f003 fade 	bl	80069d8 <Lcd_Put_Pixel>
 800341c:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 800341e:	2c08      	cmp	r4, #8
 8003420:	b29f      	uxth	r7, r3
 8003422:	d1cf      	bne.n	80033c4 <Lcd_Eng_Putch+0xcc>
 8003424:	9b02      	ldr	r3, [sp, #8]
 8003426:	f108 0802 	add.w	r8, r8, #2
 800342a:	3301      	adds	r3, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 800342c:	2b10      	cmp	r3, #16
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	fa1f f888 	uxth.w	r8, r8
 8003434:	d1a4      	bne.n	8003380 <Lcd_Eng_Putch+0x88>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
				}   	
			}
		}
	}
}
 8003436:	b013      	add	sp, #76	; 0x4c
 8003438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343c:	9803      	ldr	r0, [sp, #12]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 800343e:	4659      	mov	r1, fp
 8003440:	4420      	add	r0, r4
 8003442:	b280      	uxth	r0, r0
 8003444:	4652      	mov	r2, sl
 8003446:	f003 fac7 	bl	80069d8 <Lcd_Put_Pixel>
 800344a:	e7b6      	b.n	80033ba <Lcd_Eng_Putch+0xc2>
 800344c:	9803      	ldr	r0, [sp, #12]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 800344e:	4659      	mov	r1, fp
 8003450:	4420      	add	r0, r4
 8003452:	b280      	uxth	r0, r0
 8003454:	464a      	mov	r2, r9
 8003456:	f003 fabf 	bl	80069d8 <Lcd_Put_Pixel>
 800345a:	e7ae      	b.n	80033ba <Lcd_Eng_Putch+0xc2>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 800345c:	4638      	mov	r0, r7
 800345e:	4659      	mov	r1, fp
 8003460:	464a      	mov	r2, r9
 8003462:	f003 fab9 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 8003466:	1c78      	adds	r0, r7, #1
 8003468:	b280      	uxth	r0, r0
 800346a:	4659      	mov	r1, fp
 800346c:	464a      	mov	r2, r9
 800346e:	f003 fab3 	bl	80069d8 <Lcd_Put_Pixel>
 8003472:	e7a2      	b.n	80033ba <Lcd_Eng_Putch+0xc2>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 8003474:	4638      	mov	r0, r7
 8003476:	4659      	mov	r1, fp
 8003478:	4652      	mov	r2, sl
 800347a:	f003 faad 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 800347e:	1c78      	adds	r0, r7, #1
 8003480:	b280      	uxth	r0, r0
 8003482:	4659      	mov	r1, fp
 8003484:	4652      	mov	r2, sl
 8003486:	f003 faa7 	bl	80069d8 <Lcd_Put_Pixel>
 800348a:	e796      	b.n	80033ba <Lcd_Eng_Putch+0xc2>
 800348c:	f8dd c00c 	ldr.w	ip, [sp, #12]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 8003490:	4641      	mov	r1, r8
 8003492:	44a4      	add	ip, r4
 8003494:	fa1f fc8c 	uxth.w	ip, ip
 8003498:	4660      	mov	r0, ip
 800349a:	4652      	mov	r2, sl
 800349c:	f8cd c000 	str.w	ip, [sp]
 80034a0:	e7b2      	b.n	8003408 <Lcd_Eng_Putch+0x110>
 80034a2:	f8dd c00c 	ldr.w	ip, [sp, #12]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 80034a6:	4641      	mov	r1, r8
 80034a8:	44a4      	add	ip, r4
 80034aa:	fa1f fc8c 	uxth.w	ip, ip
 80034ae:	4660      	mov	r0, ip
 80034b0:	464a      	mov	r2, r9
 80034b2:	f8cd c000 	str.w	ip, [sp]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80034b6:	f003 fa8f 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 80034ba:	f8dd c000 	ldr.w	ip, [sp]
 80034be:	9905      	ldr	r1, [sp, #20]
 80034c0:	4660      	mov	r0, ip
 80034c2:	464a      	mov	r2, r9
 80034c4:	f003 fa88 	bl	80069d8 <Lcd_Put_Pixel>
 80034c8:	e777      	b.n	80033ba <Lcd_Eng_Putch+0xc2>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 80034ca:	4638      	mov	r0, r7
 80034cc:	9905      	ldr	r1, [sp, #20]
 80034ce:	464a      	mov	r2, r9
 80034d0:	f003 fa82 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 80034d4:	f107 0c01 	add.w	ip, r7, #1
 80034d8:	fa1f fc8c 	uxth.w	ip, ip
 80034dc:	4660      	mov	r0, ip
 80034de:	4641      	mov	r1, r8
 80034e0:	464a      	mov	r2, r9
 80034e2:	f8cd c000 	str.w	ip, [sp]
 80034e6:	f003 fa77 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80034ea:	4638      	mov	r0, r7
 80034ec:	4641      	mov	r1, r8
 80034ee:	464a      	mov	r2, r9
 80034f0:	e7e1      	b.n	80034b6 <Lcd_Eng_Putch+0x1be>
 80034f2:	bf00      	nop

080034f4 <Lcd_Puts>:
		}
	}
}

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	b097      	sub	sp, #92	; 0x5c
 80034fa:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80034fc:	9009      	str	r0, [sp, #36]	; 0x24
     unsigned data;
   
     while(*str)
 80034fe:	7825      	ldrb	r5, [r4, #0]
		}
	}
}

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
 8003500:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003502:	9f22      	ldr	r7, [sp, #136]	; 0x88
     unsigned data;
   
     while(*str)
 8003504:	2d00      	cmp	r5, #0
 8003506:	f000 80ad 	beq.w	8003664 <Lcd_Puts+0x170>
 800350a:	f1b0 0901 	subs.w	r9, r0, #1
 800350e:	f1d9 0b00 	rsbs	fp, r9, #0
 8003512:	eb5b 0b09 	adcs.w	fp, fp, r9
 8003516:	f1b7 0a01 	subs.w	sl, r7, #1
 800351a:	f1da 0800 	rsbs	r8, sl, #0
 800351e:	eb58 080a 	adcs.w	r8, r8, sl
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003522:	1ebe      	subs	r6, r7, #2
 8003524:	4277      	negs	r7, r6
 8003526:	4177      	adcs	r7, r6
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003528:	f1b0 0902 	subs.w	r9, r0, #2
 800352c:	f1d9 0c00 	rsbs	ip, r9, #0
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 8003530:	fa1f fa82 	uxth.w	sl, r2
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 8003534:	ea0b 0207 	and.w	r2, fp, r7
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003538:	eb5c 0c09 	adcs.w	ip, ip, r9
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800353c:	9204      	str	r2, [sp, #16]
 800353e:	f64d 4250 	movw	r2, #56400	; 0xdc50
 8003542:	b289      	uxth	r1, r1
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003544:	fa1f f983 	uxth.w	r9, r3
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003548:	ea0c 0707 	and.w	r7, ip, r7
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 800354c:	ea0c 0308 	and.w	r3, ip, r8
 8003550:	00c0      	lsls	r0, r0, #3
 8003552:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003556:	940a      	str	r4, [sp, #40]	; 0x28
 8003558:	9107      	str	r1, [sp, #28]
 800355a:	ea0b 0608 	and.w	r6, fp, r8
 800355e:	9301      	str	r3, [sp, #4]
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003560:	9706      	str	r7, [sp, #24]
 8003562:	900b      	str	r0, [sp, #44]	; 0x2c
 8003564:	9208      	str	r2, [sp, #32]
void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 8003566:	9b08      	ldr	r3, [sp, #32]
 8003568:	ac0e      	add	r4, sp, #56	; 0x38
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8003572:	ab0c      	add	r3, sp, #48	; 0x30
 8003574:	c303      	stmia	r3!, {r0, r1}
 8003576:	f855 0f08 	ldr.w	r0, [r5, #8]!
 800357a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800357e:	6869      	ldr	r1, [r5, #4]
 8003580:	68aa      	ldr	r2, [r5, #8]
 8003582:	68eb      	ldr	r3, [r5, #12]
 8003584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003586:	69eb      	ldr	r3, [r5, #28]
 8003588:	6928      	ldr	r0, [r5, #16]
 800358a:	6969      	ldr	r1, [r5, #20]
 800358c:	69aa      	ldr	r2, [r5, #24]
 800358e:	2500      	movs	r5, #0
 8003590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003594:	9502      	str	r5, [sp, #8]
 8003596:	b29b      	uxth	r3, r3
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9f07      	ldr	r7, [sp, #28]
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 800359c:	f108 0301 	add.w	r3, r8, #1
 80035a0:	442f      	add	r7, r5
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	b2bf      	uxth	r7, r7
 80035a6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	aa0e      	add	r2, sp, #56	; 0x38
 80035ae:	463b      	mov	r3, r7
 80035b0:	5d55      	ldrb	r5, [r2, r5]
 80035b2:	465f      	mov	r7, fp
 80035b4:	2400      	movs	r4, #0
 80035b6:	469b      	mov	fp, r3
 80035b8:	e011      	b.n	80035de <Lcd_Puts+0xea>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80035ba:	2e00      	cmp	r6, #0
 80035bc:	d15d      	bne.n	800367a <Lcd_Puts+0x186>
				else if( (zx==2)&&(zy==1) )
 80035be:	9a01      	ldr	r2, [sp, #4]
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	d162      	bne.n	800368a <Lcd_Puts+0x196>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80035c4:	9b04      	ldr	r3, [sp, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8082 	bne.w	80036d0 <Lcd_Puts+0x1dc>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80035cc:	9a06      	ldr	r2, [sp, #24]
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	f040 8092 	bne.w	80036f8 <Lcd_Puts+0x204>
 80035d4:	3401      	adds	r4, #1
 80035d6:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 80035d8:	2c08      	cmp	r4, #8
 80035da:	b29f      	uxth	r7, r3
 80035dc:	d02f      	beq.n	800363e <Lcd_Puts+0x14a>
		{
			if(temp[ys]&bitmask[xs])
 80035de:	ab0c      	add	r3, sp, #48	; 0x30
 80035e0:	5d1a      	ldrb	r2, [r3, r4]
 80035e2:	4215      	tst	r5, r2
 80035e4:	d1e9      	bne.n	80035ba <Lcd_Puts+0xc6>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	d13f      	bne.n	800366a <Lcd_Puts+0x176>
				else if( (zx==2)&&(zy==1) )
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d158      	bne.n	80036a2 <Lcd_Puts+0x1ae>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 80035f0:	9a04      	ldr	r2, [sp, #16]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d161      	bne.n	80036ba <Lcd_Puts+0x1c6>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 80035f6:	9b06      	ldr	r3, [sp, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0eb      	beq.n	80035d4 <Lcd_Puts+0xe0>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 80035fc:	4638      	mov	r0, r7
 80035fe:	9905      	ldr	r1, [sp, #20]
 8003600:	464a      	mov	r2, r9
 8003602:	f003 f9e9 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 8003606:	f107 0c01 	add.w	ip, r7, #1
 800360a:	fa1f fc8c 	uxth.w	ip, ip
 800360e:	4660      	mov	r0, ip
 8003610:	4641      	mov	r1, r8
 8003612:	464a      	mov	r2, r9
 8003614:	f8cd c000 	str.w	ip, [sp]
 8003618:	f003 f9de 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 800361c:	4638      	mov	r0, r7
 800361e:	4641      	mov	r1, r8
 8003620:	464a      	mov	r2, r9
 8003622:	f003 f9d9 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 8003626:	f8dd c000 	ldr.w	ip, [sp]
 800362a:	9905      	ldr	r1, [sp, #20]
 800362c:	4660      	mov	r0, ip
 800362e:	464a      	mov	r2, r9
 8003630:	3401      	adds	r4, #1
 8003632:	f003 f9d1 	bl	80069d8 <Lcd_Put_Pixel>
 8003636:	1cbb      	adds	r3, r7, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 8003638:	2c08      	cmp	r4, #8
 800363a:	b29f      	uxth	r7, r3
 800363c:	d1cf      	bne.n	80035de <Lcd_Puts+0xea>
 800363e:	9d02      	ldr	r5, [sp, #8]
 8003640:	f108 0802 	add.w	r8, r8, #2
 8003644:	3501      	adds	r5, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 8003646:	2d10      	cmp	r5, #16
 8003648:	9502      	str	r5, [sp, #8]
 800364a:	fa1f f888 	uxth.w	r8, r8
 800364e:	d1a4      	bne.n	800359a <Lcd_Puts+0xa6>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 8003652:	9a09      	ldr	r2, [sp, #36]	; 0x24

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003654:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8003658:	930a      	str	r3, [sp, #40]	; 0x28
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 800365a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800365c:	441a      	add	r2, r3
 800365e:	9209      	str	r2, [sp, #36]	; 0x24

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003660:	2d00      	cmp	r5, #0
 8003662:	d180      	bne.n	8003566 <Lcd_Puts+0x72>
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
     } 
} 
 8003664:	b017      	add	sp, #92	; 0x5c
 8003666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366a:	9803      	ldr	r0, [sp, #12]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 800366c:	4659      	mov	r1, fp
 800366e:	4420      	add	r0, r4
 8003670:	b280      	uxth	r0, r0
 8003672:	464a      	mov	r2, r9
 8003674:	f003 f9b0 	bl	80069d8 <Lcd_Put_Pixel>
 8003678:	e7ac      	b.n	80035d4 <Lcd_Puts+0xe0>
 800367a:	9803      	ldr	r0, [sp, #12]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 800367c:	4659      	mov	r1, fp
 800367e:	4420      	add	r0, r4
 8003680:	b280      	uxth	r0, r0
 8003682:	4652      	mov	r2, sl
 8003684:	f003 f9a8 	bl	80069d8 <Lcd_Put_Pixel>
 8003688:	e7a4      	b.n	80035d4 <Lcd_Puts+0xe0>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 800368a:	4638      	mov	r0, r7
 800368c:	4659      	mov	r1, fp
 800368e:	4652      	mov	r2, sl
 8003690:	f003 f9a2 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 8003694:	1c78      	adds	r0, r7, #1
 8003696:	b280      	uxth	r0, r0
 8003698:	4659      	mov	r1, fp
 800369a:	4652      	mov	r2, sl
 800369c:	f003 f99c 	bl	80069d8 <Lcd_Put_Pixel>
 80036a0:	e798      	b.n	80035d4 <Lcd_Puts+0xe0>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 80036a2:	4638      	mov	r0, r7
 80036a4:	4659      	mov	r1, fp
 80036a6:	464a      	mov	r2, r9
 80036a8:	f003 f996 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 80036ac:	1c78      	adds	r0, r7, #1
 80036ae:	b280      	uxth	r0, r0
 80036b0:	4659      	mov	r1, fp
 80036b2:	464a      	mov	r2, r9
 80036b4:	f003 f990 	bl	80069d8 <Lcd_Put_Pixel>
 80036b8:	e78c      	b.n	80035d4 <Lcd_Puts+0xe0>
 80036ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 80036be:	4641      	mov	r1, r8
 80036c0:	44a4      	add	ip, r4
 80036c2:	fa1f fc8c 	uxth.w	ip, ip
 80036c6:	4660      	mov	r0, ip
 80036c8:	464a      	mov	r2, r9
 80036ca:	f8cd c000 	str.w	ip, [sp]
 80036ce:	e7a8      	b.n	8003622 <Lcd_Puts+0x12e>
 80036d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 80036d4:	4641      	mov	r1, r8
 80036d6:	44a4      	add	ip, r4
 80036d8:	fa1f fc8c 	uxth.w	ip, ip
 80036dc:	4660      	mov	r0, ip
 80036de:	4652      	mov	r2, sl
 80036e0:	f8cd c000 	str.w	ip, [sp]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 80036e4:	f003 f978 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 80036e8:	f8dd c000 	ldr.w	ip, [sp]
 80036ec:	9905      	ldr	r1, [sp, #20]
 80036ee:	4660      	mov	r0, ip
 80036f0:	4652      	mov	r2, sl
 80036f2:	f003 f971 	bl	80069d8 <Lcd_Put_Pixel>
 80036f6:	e76d      	b.n	80035d4 <Lcd_Puts+0xe0>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 80036f8:	4638      	mov	r0, r7
 80036fa:	9905      	ldr	r1, [sp, #20]
 80036fc:	4652      	mov	r2, sl
 80036fe:	f003 f96b 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 8003702:	f107 0c01 	add.w	ip, r7, #1
 8003706:	fa1f fc8c 	uxth.w	ip, ip
 800370a:	4660      	mov	r0, ip
 800370c:	4641      	mov	r1, r8
 800370e:	4652      	mov	r2, sl
 8003710:	f8cd c000 	str.w	ip, [sp]
 8003714:	f003 f960 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 8003718:	4638      	mov	r0, r7
 800371a:	4641      	mov	r1, r8
 800371c:	4652      	mov	r2, sl
 800371e:	e7e1      	b.n	80036e4 <Lcd_Puts+0x1f0>

08003720 <Lcd_Printf>:
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	b0db      	sub	sp, #364	; 0x16c
	va_list ap;
	char string[256];

	va_start(ap,fmt);
 8003726:	ac67      	add	r4, sp, #412	; 0x19c
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 8003728:	900b      	str	r0, [sp, #44]	; 0x2c
 800372a:	4689      	mov	r9, r1
 800372c:	4690      	mov	r8, r2
	va_list ap;
	char string[256];

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
 800372e:	a81a      	add	r0, sp, #104	; 0x68
 8003730:	4622      	mov	r2, r4
 8003732:	9966      	ldr	r1, [sp, #408]	; 0x198
void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
	va_list ap;
	char string[256];

	va_start(ap,fmt);
 8003734:	940f      	str	r4, [sp, #60]	; 0x3c
		x+=zx*ENG_FONT_X;
     } 
} 

void Lcd_Printf(int x, int y, int color, int bkcolor, int zx, int zy, const char *fmt,...)
{
 8003736:	469a      	mov	sl, r3
 8003738:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 800373c:	9c65      	ldr	r4, [sp, #404]	; 0x194
	va_list ap;
	char string[256];

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
 800373e:	f004 fa51 	bl	8007be4 <vsprintf>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 8003742:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8003746:	2d00      	cmp	r5, #0
 8003748:	f000 80b5 	beq.w	80038b6 <Lcd_Printf+0x196>
 800374c:	f1bb 0301 	subs.w	r3, fp, #1
 8003750:	f1d3 0c00 	rsbs	ip, r3, #0
 8003754:	eb5c 0c03 	adcs.w	ip, ip, r3
 8003758:	1e62      	subs	r2, r4, #1
 800375a:	4257      	negs	r7, r2
 800375c:	4157      	adcs	r7, r2
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800375e:	1ea1      	subs	r1, r4, #2
 8003760:	4248      	negs	r0, r1
 8003762:	4148      	adcs	r0, r1
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 8003764:	f1bb 0602 	subs.w	r6, fp, #2
 8003768:	4274      	negs	r4, r6
 800376a:	ab1a      	add	r3, sp, #104	; 0x68
 800376c:	4174      	adcs	r4, r6
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 800376e:	fa1f fa8a 	uxth.w	sl, sl
 8003772:	930c      	str	r3, [sp, #48]	; 0x30
 8003774:	f64d 4350 	movw	r3, #56400	; 0xdc50
 8003778:	fa1f f989 	uxth.w	r9, r9
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800377c:	ea0c 0200 	and.w	r2, ip, r0
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003780:	f8cd a00c 	str.w	sl, [sp, #12]
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003784:	4020      	ands	r0, r4
 8003786:	ea0c 0a07 	and.w	sl, ip, r7
 800378a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
				else if( (zx==2)&&(zy==1) )
 800378e:	4027      	ands	r7, r4
 8003790:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003794:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003798:	9702      	str	r7, [sp, #8]
 800379a:	ae10      	add	r6, sp, #64	; 0x40
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 800379c:	fa1f f988 	uxth.w	r9, r8
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 80037a0:	9206      	str	r2, [sp, #24]
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 80037a2:	9008      	str	r0, [sp, #32]
 80037a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80037a8:	930a      	str	r3, [sp, #40]	; 0x28
 80037aa:	4657      	mov	r7, sl
void Lcd_Eng_Putch(int x,int y,int color,int bkcolor,int data, int zx, int zy)
{
	unsigned offset,loop;
	unsigned char xs,ys;
	unsigned char temp[32];
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     
 80037ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ae:	4633      	mov	r3, r6
 80037b0:	6810      	ldr	r0, [r2, #0]
 80037b2:	6851      	ldr	r1, [r2, #4]
 80037b4:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 80037b8:	c303      	stmia	r3!, {r0, r1}
 80037ba:	f855 0f08 	ldr.w	r0, [r5, #8]!
 80037be:	ac12      	add	r4, sp, #72	; 0x48
 80037c0:	6869      	ldr	r1, [r5, #4]
 80037c2:	68aa      	ldr	r2, [r5, #8]
 80037c4:	68eb      	ldr	r3, [r5, #12]
 80037c6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80037ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037cc:	69eb      	ldr	r3, [r5, #28]
 80037ce:	6928      	ldr	r0, [r5, #16]
 80037d0:	6969      	ldr	r1, [r5, #20]
 80037d2:	69aa      	ldr	r2, [r5, #24]
 80037d4:	2500      	movs	r5, #0
 80037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037da:	9504      	str	r5, [sp, #16]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	9305      	str	r3, [sp, #20]
 80037e0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
 80037e4:	f10a 0301 	add.w	r3, sl, #1
 80037e8:	44a8      	add	r8, r5
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	fa1f f888 	uxth.w	r8, r8
 80037f0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80037f4:	9307      	str	r3, [sp, #28]
 80037f6:	aa12      	add	r2, sp, #72	; 0x48
 80037f8:	4643      	mov	r3, r8
 80037fa:	5d55      	ldrb	r5, [r2, r5]
 80037fc:	46d8      	mov	r8, fp
 80037fe:	2400      	movs	r4, #0
 8003800:	469b      	mov	fp, r3
 8003802:	e013      	b.n	800382c <Lcd_Printf+0x10c>
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 8003804:	2f00      	cmp	r7, #0
 8003806:	d161      	bne.n	80038cc <Lcd_Printf+0x1ac>
				else if( (zx==2)&&(zy==1) )
 8003808:	9a02      	ldr	r2, [sp, #8]
 800380a:	2a00      	cmp	r2, #0
 800380c:	d166      	bne.n	80038dc <Lcd_Printf+0x1bc>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
 800380e:	9b06      	ldr	r3, [sp, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 8088 	bne.w	8003926 <Lcd_Printf+0x206>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
 8003816:	9a08      	ldr	r2, [sp, #32]
 8003818:	2a00      	cmp	r2, #0
 800381a:	f040 8098 	bne.w	800394e <Lcd_Printf+0x22e>
 800381e:	3401      	adds	r4, #1
 8003820:	f108 0302 	add.w	r3, r8, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 8003824:	2c08      	cmp	r4, #8
 8003826:	fa1f f883 	uxth.w	r8, r3
 800382a:	d030      	beq.n	800388e <Lcd_Printf+0x16e>
		{
			if(temp[ys]&bitmask[xs])
 800382c:	5d32      	ldrb	r2, [r6, r4]
 800382e:	4215      	tst	r5, r2
 8003830:	d1e8      	bne.n	8003804 <Lcd_Printf+0xe4>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 8003832:	2f00      	cmp	r7, #0
 8003834:	d142      	bne.n	80038bc <Lcd_Printf+0x19c>
				else if( (zx==2)&&(zy==1) )
 8003836:	9b02      	ldr	r3, [sp, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d15c      	bne.n	80038f6 <Lcd_Printf+0x1d6>
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
				}
				else if( (zx==1)&&(zy==2) )
 800383c:	9a06      	ldr	r2, [sp, #24]
 800383e:	2a00      	cmp	r2, #0
 8003840:	d166      	bne.n	8003910 <Lcd_Printf+0x1f0>
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,bkcolor);
				}
				else if( (zx==2)&&(zy==2) )
 8003842:	9b08      	ldr	r3, [sp, #32]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ea      	beq.n	800381e <Lcd_Printf+0xfe>
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,bkcolor);
 8003848:	4640      	mov	r0, r8
 800384a:	9907      	ldr	r1, [sp, #28]
 800384c:	9a03      	ldr	r2, [sp, #12]
 800384e:	f003 f8c3 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,bkcolor);
 8003852:	f108 0c01 	add.w	ip, r8, #1
 8003856:	fa1f fc8c 	uxth.w	ip, ip
 800385a:	4660      	mov	r0, ip
 800385c:	4651      	mov	r1, sl
 800385e:	9a03      	ldr	r2, [sp, #12]
 8003860:	f8cd c004 	str.w	ip, [sp, #4]
 8003864:	f003 f8b8 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,bkcolor);
 8003868:	9a03      	ldr	r2, [sp, #12]
 800386a:	4640      	mov	r0, r8
 800386c:	4651      	mov	r1, sl
 800386e:	f003 f8b3 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,bkcolor);
 8003872:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003876:	9907      	ldr	r1, [sp, #28]
 8003878:	4660      	mov	r0, ip
 800387a:	9a03      	ldr	r2, [sp, #12]
 800387c:	3401      	adds	r4, #1
 800387e:	f003 f8ab 	bl	80069d8 <Lcd_Put_Pixel>
 8003882:	f108 0302 	add.w	r3, r8, #2
	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
	{
		for(xs=0;xs<8;xs++)
 8003886:	2c08      	cmp	r4, #8
 8003888:	fa1f f883 	uxth.w	r8, r3
 800388c:	d1ce      	bne.n	800382c <Lcd_Printf+0x10c>
 800388e:	9d04      	ldr	r5, [sp, #16]
 8003890:	f10a 0a02 	add.w	sl, sl, #2
 8003894:	3501      	adds	r5, #1
	unsigned char bitmask[]={128,64,32,16,8,4,2,1};     

	offset=(unsigned)(data*16);
	COPY(eng8x16+offset,temp);

	for(ys=0;ys<16;ys++)
 8003896:	2d10      	cmp	r5, #16
 8003898:	9504      	str	r5, [sp, #16]
 800389a:	fa1f fa8a 	uxth.w	sl, sl
 800389e:	d19f      	bne.n	80037e0 <Lcd_Printf+0xc0>

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 80038a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038a4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80038a8:	930c      	str	r3, [sp, #48]	; 0x30
     {
        data=*str++;
		Lcd_Eng_Putch(x, y, color, bkcolor, (int)data, zx, zy);
		x+=zx*ENG_FONT_X;
 80038aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038ac:	441a      	add	r2, r3
 80038ae:	920b      	str	r2, [sp, #44]	; 0x2c

void Lcd_Puts(int x, int y, int color, int bkcolor, const char *str, int zx, int zy)
{
     unsigned data;
   
     while(*str)
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	f47f af7b 	bne.w	80037ac <Lcd_Printf+0x8c>

	va_start(ap,fmt);
	vsprintf(string,fmt,ap);
	Lcd_Puts(x, y, color, bkcolor, string, zx, zy);
	va_end(ap);
}
 80038b6:	b05b      	add	sp, #364	; 0x16c
 80038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038bc:	9805      	ldr	r0, [sp, #20]
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
				}
			} 
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
 80038be:	4659      	mov	r1, fp
 80038c0:	4420      	add	r0, r4
 80038c2:	b280      	uxth	r0, r0
 80038c4:	9a03      	ldr	r2, [sp, #12]
 80038c6:	f003 f887 	bl	80069d8 <Lcd_Put_Pixel>
 80038ca:	e7a8      	b.n	800381e <Lcd_Printf+0xfe>
 80038cc:	9805      	ldr	r0, [sp, #20]
		for(xs=0;xs<8;xs++)
		{
			if(temp[ys]&bitmask[xs])
			{

				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,color);
 80038ce:	4659      	mov	r1, fp
 80038d0:	4420      	add	r0, r4
 80038d2:	b280      	uxth	r0, r0
 80038d4:	464a      	mov	r2, r9
 80038d6:	f003 f87f 	bl	80069d8 <Lcd_Put_Pixel>
 80038da:	e7a0      	b.n	800381e <Lcd_Printf+0xfe>
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
 80038dc:	4640      	mov	r0, r8
 80038de:	4659      	mov	r1, fp
 80038e0:	464a      	mov	r2, r9
 80038e2:	f003 f879 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
 80038e6:	f108 0001 	add.w	r0, r8, #1
 80038ea:	b280      	uxth	r0, r0
 80038ec:	4659      	mov	r1, fp
 80038ee:	464a      	mov	r2, r9
 80038f0:	f003 f872 	bl	80069d8 <Lcd_Put_Pixel>
 80038f4:	e793      	b.n	800381e <Lcd_Printf+0xfe>
			else
			{
				if( (zx==1)&&(zy==1) ) Lcd_Put_Pixel(x+xs,y+ys,bkcolor);
				else if( (zx==2)&&(zy==1) )
				{
					Lcd_Put_Pixel(x+2*xs,y+ys,bkcolor);
 80038f6:	4640      	mov	r0, r8
 80038f8:	4659      	mov	r1, fp
 80038fa:	9a03      	ldr	r2, [sp, #12]
 80038fc:	f003 f86c 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+ys,bkcolor);
 8003900:	f108 0001 	add.w	r0, r8, #1
 8003904:	b280      	uxth	r0, r0
 8003906:	4659      	mov	r1, fp
 8003908:	9a03      	ldr	r2, [sp, #12]
 800390a:	f003 f865 	bl	80069d8 <Lcd_Put_Pixel>
 800390e:	e786      	b.n	800381e <Lcd_Printf+0xfe>
 8003910:	f8dd c014 	ldr.w	ip, [sp, #20]
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,bkcolor);
 8003914:	4651      	mov	r1, sl
 8003916:	44a4      	add	ip, r4
 8003918:	fa1f fc8c 	uxth.w	ip, ip
 800391c:	4660      	mov	r0, ip
 800391e:	9a03      	ldr	r2, [sp, #12]
 8003920:	f8cd c004 	str.w	ip, [sp, #4]
 8003924:	e7a3      	b.n	800386e <Lcd_Printf+0x14e>
 8003926:	f8dd c014 	ldr.w	ip, [sp, #20]
					Lcd_Put_Pixel(x+2*xs,y+ys,color);
					Lcd_Put_Pixel(x+2*xs+1,y+ys,color);
				}
				else if( (zx==1)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
 800392a:	4651      	mov	r1, sl
 800392c:	44a4      	add	ip, r4
 800392e:	fa1f fc8c 	uxth.w	ip, ip
 8003932:	4660      	mov	r0, ip
 8003934:	464a      	mov	r2, r9
 8003936:	f8cd c004 	str.w	ip, [sp, #4]
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 800393a:	f003 f84d 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys+1,color);
 800393e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8003942:	9907      	ldr	r1, [sp, #28]
 8003944:	4660      	mov	r0, ip
 8003946:	464a      	mov	r2, r9
 8003948:	f003 f846 	bl	80069d8 <Lcd_Put_Pixel>
 800394c:	e767      	b.n	800381e <Lcd_Printf+0xfe>
					Lcd_Put_Pixel(x+xs,y+2*ys,color);
					Lcd_Put_Pixel(x+xs,y+2*ys+1,color);
				}
				else if( (zx==2)&&(zy==2) )
				{
					Lcd_Put_Pixel(x+2*xs,y+2*ys+1,color);
 800394e:	4640      	mov	r0, r8
 8003950:	9907      	ldr	r1, [sp, #28]
 8003952:	464a      	mov	r2, r9
 8003954:	f003 f840 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs+1,y+2*ys,color);
 8003958:	f108 0c01 	add.w	ip, r8, #1
 800395c:	fa1f fc8c 	uxth.w	ip, ip
 8003960:	4660      	mov	r0, ip
 8003962:	4651      	mov	r1, sl
 8003964:	464a      	mov	r2, r9
 8003966:	f8cd c004 	str.w	ip, [sp, #4]
 800396a:	f003 f835 	bl	80069d8 <Lcd_Put_Pixel>
					Lcd_Put_Pixel(x+2*xs,y+2*ys,color);
 800396e:	4640      	mov	r0, r8
 8003970:	4651      	mov	r1, sl
 8003972:	464a      	mov	r2, r9
 8003974:	e7e1      	b.n	800393a <Lcd_Printf+0x21a>
 8003976:	bf00      	nop

08003978 <Jog_Poll_Init>:
// PB6
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
 8003978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003980:	6999      	ldr	r1, [r3, #24]
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 8003982:	2200      	movs	r2, #0
// PB6
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
 8003984:	f041 0101 	orr.w	r1, r1, #1
 8003988:	6199      	str	r1, [r3, #24]
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable
 800398a:	6999      	ldr	r1, [r3, #24]

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 800398c:	f2c4 0201 	movt	r2, #16385	; 0x4001
// PB7

void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable
 8003990:	f041 010c 	orr.w	r1, r1, #12
 8003994:	6199      	str	r1, [r3, #24]

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 8003996:	6851      	ldr	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 8003998:	f44f 6340 	mov.w	r3, #3072	; 0xc00
void Jog_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free
 800399c:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80039a0:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80039a4:	6051      	str	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 80039a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80039aa:	6819      	ldr	r1, [r3, #0]
	Macro_Set_Bit(GPIOB->ODR, 3);

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
	Macro_Set_Bit(RCC->APB2ENR, 0); // AFIO Clock Enable
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
 80039b0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 80039b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80039b8:	6019      	str	r1, [r3, #0]
	Macro_Set_Bit(GPIOB->ODR, 3);
 80039ba:	68d9      	ldr	r1, [r3, #12]

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039bc:	f2c4 0201 	movt	r2, #16385	; 0x4001
	Macro_Set_Area(RCC->APB2ENR, 0x3, 2); // PA, PB Clock Enable

	Macro_Write_Block(AFIO->MAPR, 0x7, 0x4, 24); // JTAG Pin Free

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x8, 12); // B3 => input pullup
	Macro_Set_Bit(GPIOB->ODR, 3);
 80039c0:	f041 0108 	orr.w	r1, r1, #8
 80039c4:	60d9      	str	r1, [r3, #12]

	Macro_Write_Block(GPIOB->CRL, 0xfff, 0x888, 20); // B5,6,7 => input pullup
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80039cc:	f041 4108 	orr.w	r1, r1, #2281701376	; 0x88000000
 80039d0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80039d4:	6019      	str	r1, [r3, #0]
	Macro_Set_Area(GPIOB->ODR, 0x7, 5);
 80039d6:	68d9      	ldr	r1, [r3, #12]
 80039d8:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 80039dc:	60d9      	str	r1, [r3, #12]

	Macro_Write_Block(GPIOA->CRH, 0xff, 0x88, 20); // A13,14 => input pullup
 80039de:	6853      	ldr	r3, [r2, #4]
 80039e0:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80039e4:	f043 6308 	orr.w	r3, r3, #142606336	; 0x8800000
 80039e8:	6053      	str	r3, [r2, #4]
	Macro_Set_Area(GPIOA->ODR, 0x3, 13);
 80039ea:	68d3      	ldr	r3, [r2, #12]
 80039ec:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80039f0:	60d3      	str	r3, [r2, #12]
 80039f2:	4770      	bx	lr

080039f4 <Jog_Get_Pressed_Calm>:

	return key;
}

int Jog_Get_Pressed_Calm(void)
{
 80039f4:	b470      	push	{r4, r5, r6}
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 80039f6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 80039fa:	f44f 6600 	mov.w	r6, #2048	; 0x800
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 80039fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a02:	f2c4 0601 	movt	r6, #16385	; 0x4001
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a06:	6893      	ldr	r3, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a08:	6890      	ldr	r0, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a0a:	68b1      	ldr	r1, [r6, #8]
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a0c:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a0e:	43c9      	mvns	r1, r1
 8003a10:	f3c1 3141 	ubfx	r1, r1, #13, #2
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a14:	f083 0308 	eor.w	r3, r3, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a18:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a1c:	0109      	lsls	r1, r1, #4
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a22:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a26:	4318      	orrs	r0, r3
 8003a28:	f242 7310 	movw	r3, #10000	; 0x2710
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a2c:	6894      	ldr	r4, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a2e:	6891      	ldr	r1, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a30:	68b5      	ldr	r5, [r6, #8]
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a32:	43c9      	mvns	r1, r1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a34:	43ed      	mvns	r5, r5
 8003a36:	f3c5 3541 	ubfx	r5, r5, #13, #2
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a3a:	f084 0408 	eor.w	r4, r4, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a3e:	f3c1 1142 	ubfx	r1, r1, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a42:	012d      	lsls	r5, r5, #4
{
    // bit pattern : 543210 10RLDU

	int key = 0;
	
    key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a44:	f3c4 04c0 	ubfx	r4, r4, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a48:	ea45 0141 	orr.w	r1, r5, r1, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a4c:	4321      	orrs	r1, r4
	{
		k = Key_Check_Input();

		for(i=0; i<N; i++)
		{
			if(k != Key_Check_Input())
 8003a4e:	4288      	cmp	r0, r1
 8003a50:	d1d9      	bne.n	8003a06 <Jog_Get_Pressed_Calm+0x12>

	for(;;)
	{
		k = Key_Check_Input();

		for(i=0; i<N; i++)
 8003a52:	3b01      	subs	r3, #1
 8003a54:	d1ea      	bne.n	8003a2c <Jog_Get_Pressed_Calm+0x38>

		if(i == N) break;
	}

	return k;
}
 8003a56:	bc70      	pop	{r4, r5, r6}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <Jog_Get_Pressed>:

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a60:	f44f 6200 	mov.w	r2, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a64:	f2c4 0301 	movt	r3, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a68:	f2c4 0201 	movt	r2, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a6c:	6899      	ldr	r1, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a6e:	6898      	ldr	r0, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a70:	6892      	ldr	r2, [r2, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a72:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a74:	43d2      	mvns	r2, r2
 8003a76:	f3c2 3241 	ubfx	r2, r2, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a7a:	f081 0308 	eor.w	r3, r1, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a7e:	0112      	lsls	r2, r2, #4
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a80:	f3c0 1042 	ubfx	r0, r0, #5, #3

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003a88:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
	return key;
}
 8003a8c:	4318      	orrs	r0, r3
 8003a8e:	4770      	bx	lr

08003a90 <Jog_Wait_Key_Pressed>:

int Jog_Wait_Key_Pressed(void)
{
 8003a90:	b410      	push	{r4}

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a92:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a96:	f44f 6400 	mov.w	r4, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003a9a:	f2c4 0201 	movt	r2, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003a9e:	f2c4 0401 	movt	r4, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003aa2:	6893      	ldr	r3, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003aa4:	6890      	ldr	r0, [r2, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aa6:	68a1      	ldr	r1, [r4, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003aa8:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003aaa:	43c9      	mvns	r1, r1
 8003aac:	f3c1 3141 	ubfx	r1, r1, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ab0:	f083 0308 	eor.w	r3, r3, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ab4:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ab8:	0109      	lsls	r1, r1, #4

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003aba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003abe:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
}

int Jog_Wait_Key_Pressed(void)
{
	int key = 0;
	while(!(key = Jog_Get_Pressed()));
 8003ac2:	4318      	orrs	r0, r3
 8003ac4:	d0ed      	beq.n	8003aa2 <Jog_Wait_Key_Pressed+0x12>
	return key;
}
 8003ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <Jog_Wait_Key_Released>:

void Jog_Wait_Key_Released(void)
{
 8003acc:	b410      	push	{r4}

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ace:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ad2:	f44f 6400 	mov.w	r4, #2048	; 0x800

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ad6:	f2c4 0301 	movt	r3, #16385	; 0x4001
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ada:	f2c4 0401 	movt	r4, #16385	; 0x4001

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003ade:	689a      	ldr	r2, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ae0:	6898      	ldr	r0, [r3, #8]
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ae2:	68a1      	ldr	r1, [r4, #8]
int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003ae4:	43c0      	mvns	r0, r0
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003ae6:	43c9      	mvns	r1, r1
 8003ae8:	f3c1 3141 	ubfx	r1, r1, #13, #2

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003aec:	f082 0208 	eor.w	r2, r2, #8
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003af0:	f3c0 1042 	ubfx	r0, r0, #5, #3
	key |= (Macro_Extract_Area(~GPIOA->IDR, 0x3, 13) << 4);
 8003af4:	0109      	lsls	r1, r1, #4

int Jog_Get_Pressed(void)
{
    // bit pattern : 543210 10RLDU
	int key = 0;
	key = Macro_Check_Bit_Clear(GPIOB->IDR, 3);
 8003af6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
	key |= (Macro_Extract_Area(~GPIOB->IDR, 0x7, 5) << 1);
 8003afa:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
	return key;
}

void Jog_Wait_Key_Released(void)
{
	while(Jog_Get_Pressed());
 8003afe:	430a      	orrs	r2, r1
 8003b00:	d1ed      	bne.n	8003ade <Jog_Wait_Key_Released+0x12>
}
 8003b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <Jog_ISR_Enable>:

void Jog_ISR_Enable(int en)
{
 8003b08:	b470      	push	{r4, r5, r6}
    if(en)
 8003b0a:	b9f0      	cbnz	r0, 8003b4a <Jog_ISR_Enable+0x42>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003b0c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003b10:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003b14:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003b18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
    else
    {
    	NVIC_EnableIRQ(EXTI3_IRQn);
    	NVIC_EnableIRQ(EXTI9_5_IRQn);
    	NVIC_EnableIRQ(EXTI15_10_IRQn);
    	Macro_Clear_Bit(RCC->APB2ENR,3);
 8003b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b24:	6014      	str	r4, [r2, #0]
 8003b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003b2a:	6010      	str	r0, [r2, #0]
 8003b2c:	6051      	str	r1, [r2, #4]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	f022 0208 	bic.w	r2, r2, #8
 8003b34:	619a      	str	r2, [r3, #24]
		Macro_Clear_Bit(RCC->APB2ENR,2);
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	619a      	str	r2, [r3, #24]
		Macro_Clear_Bit(RCC->APB2ENR,0);
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	619a      	str	r2, [r3, #24]
    }
}
 8003b46:	bc70      	pop	{r4, r5, r6}
 8003b48:	4770      	bx	lr

void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
 8003b4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003b52:	6993      	ldr	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b54:	2100      	movs	r1, #0

void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
 8003b56:	f043 0308 	orr.w	r3, r3, #8
 8003b5a:	6193      	str	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,2);
 8003b5c:	6993      	ldr	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b5e:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Jog_ISR_Enable(int en)
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6193      	str	r3, [r2, #24]
        Macro_Set_Bit(RCC->APB2ENR,0);
 8003b68:	6990      	ldr	r0, [r2, #24]

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
    if(en)
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);
 8003b6e:	f040 0001 	orr.w	r0, r0, #1
 8003b72:	6190      	str	r0, [r2, #24]

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b74:	688a      	ldr	r2, [r1, #8]
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003b76:	f2c4 0301 	movt	r3, #16385	; 0x4001
    {
        Macro_Set_Bit(RCC->APB2ENR,3);
        Macro_Set_Bit(RCC->APB2ENR,2);
        Macro_Set_Bit(RCC->APB2ENR,0);

        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
 8003b7a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8003b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b82:	608a      	str	r2, [r1, #8]
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
 8003b84:	68c8      	ldr	r0, [r1, #12]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003b86:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003b8a:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8003b8e:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8003b92:	f440 5088 	orr.w	r0, r0, #4352	; 0x1100
 8003b96:	f040 0010 	orr.w	r0, r0, #16
 8003b9a:	60c8      	str	r0, [r1, #12]
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA
 8003b9c:	6948      	ldr	r0, [r1, #20]
 8003b9e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003ba2:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
 8003ba6:	6148      	str	r0, [r1, #20]

        Macro_Set_Area(EXTI->FTSR,0x3,13);
 8003ba8:	68d9      	ldr	r1, [r3, #12]
 8003baa:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003bae:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8003bb2:	60d9      	str	r1, [r3, #12]
        Macro_Set_Area(EXTI->FTSR,0x7,5);
 8003bb4:	68d9      	ldr	r1, [r3, #12]
        Macro_Set_Bit(EXTI->FTSR,3);

        EXTI->PR = (0x1<<3)|(0x7<<5)|(0x3<<13);
 8003bb6:	f246 05e8 	movw	r5, #24808	; 0x60e8
        Macro_Write_Block(AFIO->EXTICR[0],0xf,0x1,12);		// EXTI3 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[1],0xfff,0x111,4);	// EXTI5,6,7 -> PORTB
        Macro_Write_Block(AFIO->EXTICR[3],0xff,0x00,4);		// EXTI13,14 -> PORTA

        Macro_Set_Area(EXTI->FTSR,0x3,13);
        Macro_Set_Area(EXTI->FTSR,0x7,5);
 8003bba:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 8003bbe:	60d9      	str	r1, [r3, #12]
        Macro_Set_Bit(EXTI->FTSR,3);
 8003bc0:	68de      	ldr	r6, [r3, #12]
 8003bc2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003bc6:	f046 0608 	orr.w	r6, r6, #8
 8003bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bce:	60de      	str	r6, [r3, #12]

        EXTI->PR = (0x1<<3)|(0x7<<5)|(0x3<<13);
 8003bd0:	615d      	str	r5, [r3, #20]
 8003bd2:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
 8003bd6:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 8003bda:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184

        NVIC_ClearPendingIRQ(EXTI3_IRQn);
        NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
        NVIC_ClearPendingIRQ(EXTI15_10_IRQn);

        Macro_Set_Area(EXTI->IMR,0x7,5);
 8003bde:	681d      	ldr	r5, [r3, #0]
 8003be0:	f045 05e0 	orr.w	r5, r5, #224	; 0xe0
 8003be4:	601d      	str	r5, [r3, #0]
        Macro_Set_Area(EXTI->IMR,0x3,13);
 8003be6:	681d      	ldr	r5, [r3, #0]
 8003be8:	f445 45c0 	orr.w	r5, r5, #24576	; 0x6000
 8003bec:	601d      	str	r5, [r3, #0]
        Macro_Set_Bit(EXTI->IMR,3);
 8003bee:	681d      	ldr	r5, [r3, #0]
 8003bf0:	f045 0508 	orr.w	r5, r5, #8
 8003bf4:	601d      	str	r5, [r3, #0]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003bf6:	6014      	str	r4, [r2, #0]
 8003bf8:	6010      	str	r0, [r2, #0]
 8003bfa:	6051      	str	r1, [r2, #4]
    	NVIC_EnableIRQ(EXTI15_10_IRQn);
    	Macro_Clear_Bit(RCC->APB2ENR,3);
		Macro_Clear_Bit(RCC->APB2ENR,2);
		Macro_Clear_Bit(RCC->APB2ENR,0);
    }
}
 8003bfc:	bc70      	pop	{r4, r5, r6}
 8003bfe:	4770      	bx	lr

08003c00 <Key_Poll_Init>:
#include "device_driver.h"

void Key_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8003c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c08:	6991      	ldr	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
 8003c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
#include "device_driver.h"

void Key_Poll_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8003c0e:	f041 0108 	orr.w	r1, r1, #8
 8003c12:	6191      	str	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
 8003c14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c1e:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop

08003c28 <Key_Get_Pressed>:
}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c2c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c30:	6898      	ldr	r0, [r3, #8]
 8003c32:	43c0      	mvns	r0, r0
}
 8003c34:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop

08003c3c <Key_Wait_Key_Released>:
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c3c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003c40:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003c44:	6893      	ldr	r3, [r2, #8]
 8003c46:	43db      	mvns	r3, r3
}

void Key_Wait_Key_Released(void)
{
	while(Key_Get_Pressed());
 8003c48:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8003c4c:	d1fa      	bne.n	8003c44 <Key_Wait_Key_Released+0x8>
}
 8003c4e:	4770      	bx	lr

08003c50 <Key_Wait_Key_Pressed>:
	Macro_Write_Block(GPIOB->CRL, 0xff, 0x44, 24);
}

int Key_Get_Pressed(void)
{
	return Macro_Extract_Area(~GPIOB->IDR,0x3,6);
 8003c50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003c58:	6898      	ldr	r0, [r3, #8]
 8003c5a:	43c0      	mvns	r0, r0
 8003c5c:	f3c0 1081 	ubfx	r0, r0, #6, #2
	int k;

	do
	{
		k = Key_Get_Pressed();
	}while(!k);
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d0f9      	beq.n	8003c58 <Key_Wait_Key_Pressed+0x8>

	return k;
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop

08003c68 <Key_ISR_Enable>:

void Key_ISR_Enable(int en)
{
 8003c68:	b410      	push	{r4}
	if(en)
 8003c6a:	b950      	cbnz	r0, 8003c82 <Key_ISR_Enable+0x1a>
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003c6c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003c70:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	else
	{
		NVIC_DisableIRQ((IRQn_Type)23);
	}
}
 8003c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c80:	4770      	bx	lr

void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
 8003c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c8a:	699a      	ldr	r2, [r3, #24]
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003c8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00

void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
 8003c90:	f042 0208 	orr.w	r2, r2, #8
 8003c94:	619a      	str	r2, [r3, #24]
		Macro_Set_Bit(RCC->APB2ENR,0);
 8003c96:	699a      	ldr	r2, [r3, #24]

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003c98:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Key_ISR_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	619a      	str	r2, [r3, #24]

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003ca2:	680b      	ldr	r3, [r1, #0]
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003ca4:	2200      	movs	r2, #0
	if(en)
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
 8003ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003caa:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8003cae:	600b      	str	r3, [r1, #0]
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003cb0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cb4:	68d1      	ldr	r1, [r2, #12]
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	{
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
 8003cba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8003cbe:	f441 5188 	orr.w	r1, r1, #4352	; 0x1100
 8003cc2:	60d1      	str	r1, [r2, #12]
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003cc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003cc8:	68d9      	ldr	r1, [r3, #12]
		Macro_Write_Block(EXTI->IMR,0x3,0x3,6);

		EXTI->PR = (0x3<<6);
 8003cca:	20c0      	movs	r0, #192	; 0xc0
		Macro_Set_Bit(RCC->APB2ENR,3);
		Macro_Set_Bit(RCC->APB2ENR,0);

		Macro_Write_Block(GPIOB->CRL,0xff,0x44,24);
		Macro_Write_Block(AFIO->EXTICR[1],0xff,0x11,8);
		Macro_Write_Block(EXTI->FTSR,0x3,0x3,6);
 8003ccc:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8003cd0:	60d9      	str	r1, [r3, #12]
		Macro_Write_Block(EXTI->IMR,0x3,0x3,6);
 8003cd2:	681c      	ldr	r4, [r3, #0]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003cd4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003cd8:	4304      	orrs	r4, r0
 8003cda:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003cde:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8003ce2:	601c      	str	r4, [r3, #0]

		EXTI->PR = (0x3<<6);
 8003ce4:	6158      	str	r0, [r3, #20]
 8003ce6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003cea:	6011      	str	r1, [r2, #0]

	else
	{
		NVIC_DisableIRQ((IRQn_Type)23);
	}
}
 8003cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop

08003cf4 <Lcd_GPIO_Init>:
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8003cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003cfc:	6811      	ldr	r1, [r2, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8003d02:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8003d06:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8003d0a:	6011      	str	r1, [r2, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8003d0c:	6851      	ldr	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003d0e:	f2c4 0301 	movt	r3, #16385	; 0x4001
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8003d12:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8003d16:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8003d1a:	6051      	str	r1, [r2, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003d22:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003d26:	601a      	str	r2, [r3, #0]
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d2e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <Lcd_Write_Reg>:
}

void Lcd_Write_Reg(unsigned char Lcd_Reg, unsigned short Lcd_RegValue)
{
 8003d38:	b410      	push	{r4}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d42:	68dc      	ldr	r4, [r3, #12]
   Lcd_RS_DATA();
 8003d44:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003d48:	f024 0410 	bic.w	r4, r4, #16
 8003d4c:	60dc      	str	r4, [r3, #12]
   Lcd_RS_DATA();
 8003d4e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d52:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003d54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003d58:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003d5c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 8003d60:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003d62:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003d64:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003d66:	8913      	ldrh	r3, [r2, #8]
 8003d68:	079b      	lsls	r3, r3, #30
 8003d6a:	d5fc      	bpl.n	8003d66 <Lcd_Write_Reg+0x2e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003d6c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8003d70:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003d74:	8902      	ldrh	r2, [r0, #8]
 8003d76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003d7a:	0614      	lsls	r4, r2, #24
 8003d7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003d80:	d4f8      	bmi.n	8003d74 <Lcd_Write_Reg+0x3c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d86:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003d8a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003d8c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003d90:	f044 0410 	orr.w	r4, r4, #16
 8003d94:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003d96:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8003d98:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003d9c:	f024 0410 	bic.w	r4, r4, #16
 8003da0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8003da2:	68c2      	ldr	r2, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003da4:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	60c2      	str	r2, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003dac:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003dae:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003db0:	8913      	ldrh	r3, [r2, #8]
 8003db2:	0799      	lsls	r1, r3, #30
 8003db4:	d5fc      	bpl.n	8003db0 <Lcd_Write_Reg+0x78>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003db6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003dba:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003dbe:	8913      	ldrh	r3, [r2, #8]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	d4fc      	bmi.n	8003dbe <Lcd_Write_Reg+0x86>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8003dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	f042 0210 	orr.w	r2, r2, #16
 8003dd2:	60da      	str	r2, [r3, #12]

void Lcd_Write_Reg(unsigned char Lcd_Reg, unsigned short Lcd_RegValue)
{
	Lcd_WR_REG(Lcd_Reg);
	Lcd_WR_DATA(Lcd_RegValue);
}
 8003dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <Lcd_Write_Data_16Bit>:

void Lcd_Write_Data_16Bit(unsigned short Data)
{
 8003ddc:	b410      	push	{r4}
   Lcd_CS_EN();
 8003dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003de6:	68d1      	ldr	r1, [r2, #12]
   Lcd_RS_REG();
 8003de8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8003dec:	f021 0110 	bic.w	r1, r1, #16
 8003df0:	60d1      	str	r1, [r2, #12]
   Lcd_RS_REG();
 8003df2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003df6:	68da      	ldr	r2, [r3, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003df8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8003dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e00:	f2c4 0101 	movt	r1, #16385	; 0x4001

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
 8003e04:	0a04      	lsrs	r4, r0, #8
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8003e06:	60da      	str	r2, [r3, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e08:	460a      	mov	r2, r1
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e0a:	818c      	strh	r4, [r1, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e0c:	8913      	ldrh	r3, [r2, #8]
 8003e0e:	079b      	lsls	r3, r3, #30
 8003e10:	d5fc      	bpl.n	8003e0c <Lcd_Write_Data_16Bit+0x30>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003e12:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003e16:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003e1a:	890a      	ldrh	r2, [r1, #8]
 8003e1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e20:	0614      	lsls	r4, r2, #24
 8003e22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e26:	d4f8      	bmi.n	8003e1a <Lcd_Write_Data_16Bit+0x3e>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003e28:	b2c0      	uxtb	r0, r0
 8003e2a:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003e2c:	891a      	ldrh	r2, [r3, #8]
 8003e2e:	0790      	lsls	r0, r2, #30
 8003e30:	d5fc      	bpl.n	8003e2c <Lcd_Write_Data_16Bit+0x50>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003e32:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003e36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003e3a:	8913      	ldrh	r3, [r2, #8]
 8003e3c:	0619      	lsls	r1, r3, #24
 8003e3e:	d4fc      	bmi.n	8003e3a <Lcd_Write_Data_16Bit+0x5e>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8003e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	f042 0210 	orr.w	r2, r2, #16
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <Lcd_Reset>:
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8003e58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e60:	68d9      	ldr	r1, [r3, #12]

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
 8003e62:	b082      	sub	sp, #8


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e64:	2200      	movs	r2, #0
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8003e66:	f021 0110 	bic.w	r1, r1, #16
 8003e6a:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e6c:	9200      	str	r2, [sp, #0]
 8003e6e:	9b00      	ldr	r3, [sp, #0]
 8003e70:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003e74:	f2c0 0206 	movt	r2, #6
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	dc05      	bgt.n	8003e88 <Lcd_Reset+0x30>
 8003e7c:	9b00      	ldr	r3, [sp, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	9b00      	ldr	r3, [sp, #0]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	ddf9      	ble.n	8003e7c <Lcd_Reset+0x24>

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8003e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e90:	68d9      	ldr	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e92:	2200      	movs	r2, #0

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8003e94:	f041 0110 	orr.w	r1, r1, #16
 8003e98:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8003e9a:	9201      	str	r2, [sp, #4]
 8003e9c:	9b01      	ldr	r3, [sp, #4]
 8003e9e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003ea2:	f2c0 0203 	movt	r2, #3
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	dc05      	bgt.n	8003eb6 <Lcd_Reset+0x5e>
 8003eaa:	9b01      	ldr	r3, [sp, #4]
 8003eac:	3301      	adds	r3, #1
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	ddf9      	ble.n	8003eaa <Lcd_Reset+0x52>
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
	_Delay(50);
}
 8003eb6:	b002      	add	sp, #8
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <Lcd_WR_REG>:

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ec0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ec4:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 8003ec6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003eca:	f021 0110 	bic.w	r1, r1, #16
 8003ece:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8003ed0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003ed4:	68d1      	ldr	r1, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003ed6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003eda:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003ede:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003ee2:	60d1      	str	r1, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003ee4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003ee6:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003ee8:	8913      	ldrh	r3, [r2, #8]
 8003eea:	0798      	lsls	r0, r3, #30
 8003eec:	d5fc      	bpl.n	8003ee8 <Lcd_WR_REG+0x2c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003eee:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003ef2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003ef6:	8913      	ldrh	r3, [r2, #8]
 8003ef8:	0619      	lsls	r1, r3, #24
 8003efa:	d4fc      	bmi.n	8003ef6 <Lcd_WR_REG+0x3a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	f042 0210 	orr.w	r2, r2, #16
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <Lcd_WR_DATA>:
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f18:	68d9      	ldr	r1, [r3, #12]
	Lcd_RS_REG();
 8003f1a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003f1e:	f021 0110 	bic.w	r1, r1, #16
 8003f22:	60d9      	str	r1, [r3, #12]
	Lcd_RS_REG();
 8003f24:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f28:	68d1      	ldr	r1, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003f32:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003f36:	60d1      	str	r1, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f38:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003f3a:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003f3c:	8913      	ldrh	r3, [r2, #8]
 8003f3e:	0799      	lsls	r1, r3, #30
 8003f40:	d5fc      	bpl.n	8003f3c <Lcd_WR_DATA+0x2c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003f42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f46:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f4a:	8913      	ldrh	r3, [r2, #8]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	d4fc      	bmi.n	8003f4a <Lcd_WR_DATA+0x3a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8003f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	f042 0210 	orr.w	r2, r2, #16
 8003f5e:	60da      	str	r2, [r3, #12]
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop

08003f64 <Lcd_Set_Display_Mode>:
}

void Lcd_Set_Display_Mode(int mode)
{
	lcddev.dir = mode;
 8003f64:	f240 5388 	movw	r3, #1416	; 0x588
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
}

void Lcd_Set_Display_Mode(int mode)
{
 8003f68:	b410      	push	{r4}
	lcddev.dir = mode;
 8003f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
	lcddev.setxcmd=0x2A;
 8003f6e:	242a      	movs	r4, #42	; 0x2a
	lcddev.setycmd=0x2B;
 8003f70:	212b      	movs	r1, #43	; 0x2b
	lcddev.wramcmd=0x2C;
 8003f72:	222c      	movs	r2, #44	; 0x2c
	Lcd_CS_DIS();
}

void Lcd_Set_Display_Mode(int mode)
{
	lcddev.dir = mode;
 8003f74:	7118      	strb	r0, [r3, #4]
	lcddev.setxcmd=0x2A;
 8003f76:	811c      	strh	r4, [r3, #8]
	lcddev.setycmd=0x2B;
 8003f78:	8159      	strh	r1, [r3, #10]
	lcddev.wramcmd=0x2C;
 8003f7a:	80da      	strh	r2, [r3, #6]

	switch(mode)
 8003f7c:	2804      	cmp	r0, #4
 8003f7e:	d859      	bhi.n	8004034 <Lcd_Set_Display_Mode+0xd0>
 8003f80:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003f84:	00f3005b 	rscseq	r0, r3, fp, asr r0
 8003f88:	013f00a7 	teqeq	pc, r7, lsr #1
 8003f8c:	f44f0005 	vst4.8	{d16-d19}, [pc], r5
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
 8003f90:	70a0      	strb	r0, [r4, #2]
			lcddev.height=Lcd_W;
 8003f92:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 8003f98:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(0<<6)|(1<<5)); //BGR==1,MX==1,MY==0,MV==1
			break;
		case 4:
			lcddev.width=Lcd_H;
 8003f9a:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003f9c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003fa0:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 8003fa2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8003fac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003fb0:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003fb2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003fba:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003fbe:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8003fc0:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003fc2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8003fc4:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8003fc6:	8913      	ldrh	r3, [r2, #8]
 8003fc8:	0799      	lsls	r1, r3, #30
 8003fca:	d5fc      	bpl.n	8003fc6 <Lcd_Set_Display_Mode+0x62>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8003fcc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003fd0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8003fd4:	890a      	ldrh	r2, [r1, #8]
 8003fd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003fda:	0612      	lsls	r2, r2, #24
 8003fdc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003fe0:	d4f8      	bmi.n	8003fd4 <Lcd_Set_Display_Mode+0x70>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003fea:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8003fec:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8003ff0:	f040 0010 	orr.w	r0, r0, #16
 8003ff4:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003ff6:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 8003ff8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8003ffc:	f020 0010 	bic.w	r0, r0, #16
 8004000:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 8004002:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004004:	20e8      	movs	r0, #232	; 0xe8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800400c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800400e:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004010:	8913      	ldrh	r3, [r2, #8]
 8004012:	079c      	lsls	r4, r3, #30
 8004014:	d5fc      	bpl.n	8004010 <Lcd_Set_Display_Mode+0xac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004016:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800401a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800401e:	8913      	ldrh	r3, [r2, #8]
 8004020:	0618      	lsls	r0, r3, #24
 8004022:	d4fc      	bmi.n	800401e <Lcd_Set_Display_Mode+0xba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004028:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	f042 0210 	orr.w	r2, r2, #16
 8004032:	60da      	str	r2, [r3, #12]
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		default:
			break;
	}
}
 8004034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004038:	4770      	bx	lr
	lcddev.wramcmd=0x2C;

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
 800403a:	20f0      	movs	r0, #240	; 0xf0
			lcddev.height=Lcd_H;
 800403c:	f44f 72a0 	mov.w	r2, #320	; 0x140
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004040:	f44f 6100 	mov.w	r1, #2048	; 0x800

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
 8004044:	805a      	strh	r2, [r3, #2]
	lcddev.wramcmd=0x2C;

	switch(mode)
	{
		case 0:
			lcddev.width=Lcd_W;
 8004046:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004048:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800404c:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 800404e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004058:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800405c:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800405e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004062:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004066:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800406a:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800406c:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800406e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004070:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004072:	8913      	ldrh	r3, [r2, #8]
 8004074:	0799      	lsls	r1, r3, #30
 8004076:	d5fc      	bpl.n	8004072 <Lcd_Set_Display_Mode+0x10e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004078:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800407c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004080:	890a      	ldrh	r2, [r1, #8]
 8004082:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004086:	0612      	lsls	r2, r2, #24
 8004088:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800408c:	d4f8      	bmi.n	8004080 <Lcd_Set_Display_Mode+0x11c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800408e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004092:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004096:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004098:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800409c:	f040 0010 	orr.w	r0, r0, #16
 80040a0:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80040a2:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 80040a4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80040a8:	f020 0010 	bic.w	r0, r0, #16
 80040ac:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 80040ae:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040b0:	2008      	movs	r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80040b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80040b8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040ba:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80040bc:	8913      	ldrh	r3, [r2, #8]
 80040be:	079c      	lsls	r4, r3, #30
 80040c0:	d5fc      	bpl.n	80040bc <Lcd_Set_Display_Mode+0x158>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80040c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80040c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040ca:	8913      	ldrh	r3, [r2, #8]
 80040cc:	0618      	lsls	r0, r3, #24
 80040ce:	d4fc      	bmi.n	80040ca <Lcd_Set_Display_Mode+0x166>
 80040d0:	e7a8      	b.n	8004024 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
 80040d2:	20f0      	movs	r0, #240	; 0xf0
			lcddev.height=Lcd_H;
 80040d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80040d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
 80040dc:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5)); //BGR==1,MX==0,MY==1,MV==1
			break;
		case 2:
			lcddev.width=Lcd_W;
 80040de:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80040e0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80040e4:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 80040e6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 80040f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040f4:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80040f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80040fe:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004102:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004104:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004106:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004108:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800410a:	8913      	ldrh	r3, [r2, #8]
 800410c:	0799      	lsls	r1, r3, #30
 800410e:	d5fc      	bpl.n	800410a <Lcd_Set_Display_Mode+0x1a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004110:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004114:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004118:	890a      	ldrh	r2, [r1, #8]
 800411a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800411e:	0612      	lsls	r2, r2, #24
 8004120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004124:	d4f8      	bmi.n	8004118 <Lcd_Set_Display_Mode+0x1b4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800412a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800412e:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004130:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004134:	f040 0010 	orr.w	r0, r0, #16
 8004138:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800413a:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 800413c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004140:	f020 0010 	bic.w	r0, r0, #16
 8004144:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 8004146:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004148:	20c8      	movs	r0, #200	; 0xc8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004150:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004152:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004154:	8913      	ldrh	r3, [r2, #8]
 8004156:	079c      	lsls	r4, r3, #30
 8004158:	d5fc      	bpl.n	8004154 <Lcd_Set_Display_Mode+0x1f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800415a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800415e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004162:	8913      	ldrh	r3, [r2, #8]
 8004164:	0618      	lsls	r0, r3, #24
 8004166:	d4fc      	bmi.n	8004162 <Lcd_Set_Display_Mode+0x1fe>
 8004168:	e75c      	b.n	8004024 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
 800416a:	f44f 70a0 	mov.w	r0, #320	; 0x140
			lcddev.height=Lcd_W;
 800416e:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004170:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 8004174:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(0<<7)|(0<<6)|(0<<5)); //BGR==1,MX==0,MY==0,MV==0
			break;
		case 1:
			lcddev.width=Lcd_H;
 8004176:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004178:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800417c:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 800417e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004188:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800418c:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800418e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004192:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004196:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800419a:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800419c:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800419e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041a0:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80041a2:	8913      	ldrh	r3, [r2, #8]
 80041a4:	0799      	lsls	r1, r3, #30
 80041a6:	d5fc      	bpl.n	80041a2 <Lcd_Set_Display_Mode+0x23e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80041a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80041ac:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80041b0:	890a      	ldrh	r2, [r1, #8]
 80041b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80041b6:	0612      	lsls	r2, r2, #24
 80041b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80041bc:	d4f8      	bmi.n	80041b0 <Lcd_Set_Display_Mode+0x24c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80041be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041c6:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80041c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80041cc:	f040 0010 	orr.w	r0, r0, #16
 80041d0:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80041d2:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 80041d4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80041d8:	f020 0010 	bic.w	r0, r0, #16
 80041dc:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 80041de:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041e0:	2068      	movs	r0, #104	; 0x68
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80041e8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80041ea:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80041ec:	8913      	ldrh	r3, [r2, #8]
 80041ee:	079c      	lsls	r4, r3, #30
 80041f0:	d5fc      	bpl.n	80041ec <Lcd_Set_Display_Mode+0x288>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80041f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80041f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80041fa:	8913      	ldrh	r3, [r2, #8]
 80041fc:	0618      	lsls	r0, r3, #24
 80041fe:	d4fc      	bmi.n	80041fa <Lcd_Set_Display_Mode+0x296>
 8004200:	e710      	b.n	8004024 <Lcd_Set_Display_Mode+0xc0>
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
 8004202:	f44f 70a0 	mov.w	r0, #320	; 0x140
			lcddev.height=Lcd_W;
 8004206:	22f0      	movs	r2, #240	; 0xf0
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004208:	f44f 6100 	mov.w	r1, #2048	; 0x800
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
			lcddev.height=Lcd_W;
 800420c:	805a      	strh	r2, [r3, #2]
			lcddev.width=Lcd_W;
			lcddev.height=Lcd_H;
			Lcd_Write_Reg(0x36,(1<<3)|(1<<7)|(1<<6)|(0<<5)); //BGR==1,MX==1,MY==1,MV==0
			break;
		case 3:
			lcddev.width=Lcd_H;
 800420e:	8018      	strh	r0, [r3, #0]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004210:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004214:	68cb      	ldr	r3, [r1, #12]
   Lcd_RS_DATA();
 8004216:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	60cb      	str	r3, [r1, #12]
   Lcd_RS_DATA();
 8004220:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004224:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004226:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800422a:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800422e:	f420 7000 	bic.w	r0, r0, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004232:	2136      	movs	r1, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004234:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004236:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004238:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800423a:	8913      	ldrh	r3, [r2, #8]
 800423c:	0799      	lsls	r1, r3, #30
 800423e:	d5fc      	bpl.n	800423a <Lcd_Set_Display_Mode+0x2d6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004240:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004244:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004248:	890a      	ldrh	r2, [r1, #8]
 800424a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800424e:	0612      	lsls	r2, r2, #24
 8004250:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004254:	d4f8      	bmi.n	8004248 <Lcd_Set_Display_Mode+0x2e4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800425a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800425e:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004260:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004264:	f040 0010 	orr.w	r0, r0, #16
 8004268:	60d0      	str	r0, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800426a:	68d0      	ldr	r0, [r2, #12]
	Lcd_RS_REG();
 800426c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004270:	f020 0010 	bic.w	r0, r0, #16
 8004274:	60d0      	str	r0, [r2, #12]
	Lcd_RS_REG();
 8004276:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004278:	20a8      	movs	r0, #168	; 0xa8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004280:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004282:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004284:	8913      	ldrh	r3, [r2, #8]
 8004286:	079c      	lsls	r4, r3, #30
 8004288:	d5fc      	bpl.n	8004284 <Lcd_Set_Display_Mode+0x320>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800428a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800428e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004292:	8913      	ldrh	r3, [r2, #8]
 8004294:	0618      	lsls	r0, r3, #24
 8004296:	d4fc      	bmi.n	8004292 <Lcd_Set_Display_Mode+0x32e>
 8004298:	e6c4      	b.n	8004024 <Lcd_Set_Display_Mode+0xc0>
 800429a:	bf00      	nop

0800429c <Lcd_Write_RAM_Prepare>:
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800429c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042a4:	68d8      	ldr	r0, [r3, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042a6:	f240 5188 	movw	r1, #1416	; 0x588
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042aa:	f020 0010 	bic.w	r0, r0, #16
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042ae:	f2c2 0100 	movt	r1, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042b2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 80042b6:	88c9      	ldrh	r1, [r1, #6]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042bc:	60d8      	str	r0, [r3, #12]
   Lcd_RS_DATA();
 80042be:	68d0      	ldr	r0, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80042c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80042c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042c8:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80042ca:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80042ce:	60d0      	str	r0, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80042d0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80042d2:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80042d4:	8913      	ldrh	r3, [r2, #8]
 80042d6:	079b      	lsls	r3, r3, #30
 80042d8:	d5fc      	bpl.n	80042d4 <Lcd_Write_RAM_Prepare+0x38>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80042da:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80042de:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80042e2:	8913      	ldrh	r3, [r2, #8]
 80042e4:	0618      	lsls	r0, r3, #24
 80042e6:	d4fc      	bmi.n	80042e2 <Lcd_Write_RAM_Prepare+0x46>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80042e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	f042 0210 	orr.w	r2, r2, #16
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <Lcd_Set_Windows>:
{
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
 80042fc:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80042fe:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004302:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004306:	68ee      	ldr	r6, [r5, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004308:	f240 5488 	movw	r4, #1416	; 0x588
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800430c:	f026 0c10 	bic.w	ip, r6, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004310:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004314:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004318:	8927      	ldrh	r7, [r4, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800431a:	f2c4 0601 	movt	r6, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800431e:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_RS_DATA();
 8004322:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004326:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 800432a:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800432e:	b2ff      	uxtb	r7, r7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004330:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
 8004334:	f8c6 c00c 	str.w	ip, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004338:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800433a:	81af      	strh	r7, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800433c:	8935      	ldrh	r5, [r6, #8]
 800433e:	07af      	lsls	r7, r5, #30
 8004340:	d5fc      	bpl.n	800433c <Lcd_Set_Windows+0x40>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004342:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 8004346:	f2c4 0701 	movt	r7, #16385	; 0x4001
 800434a:	893e      	ldrh	r6, [r7, #8]
 800434c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004350:	0636      	lsls	r6, r6, #24
 8004352:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004356:	d4f8      	bmi.n	800434a <Lcd_Set_Windows+0x4e>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004358:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800435c:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004360:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004364:	f44f 6740 	mov.w	r7, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004368:	f04c 0c10 	orr.w	ip, ip, #16
 800436c:	f8c6 c00c 	str.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004370:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Lcd_RS_REG();
 8004374:	f2c4 0701 	movt	r7, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004378:	f02c 0c10 	bic.w	ip, ip, #16
 800437c:	f8c6 c00c 	str.w	ip, [r6, #12]
	Lcd_RS_REG();
 8004380:	68fe      	ldr	r6, [r7, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 8004382:	ea4f 2c10 	mov.w	ip, r0, lsr #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004386:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 800438a:	60fe      	str	r6, [r7, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800438c:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800438e:	f8a5 c00c 	strh.w	ip, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004392:	8935      	ldrh	r5, [r6, #8]
 8004394:	07af      	lsls	r7, r5, #30
 8004396:	d5fc      	bpl.n	8004392 <Lcd_Set_Windows+0x96>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004398:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 800439c:	f2c4 0701 	movt	r7, #16385	; 0x4001
 80043a0:	893e      	ldrh	r6, [r7, #8]
 80043a2:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80043a6:	0636      	lsls	r6, r6, #24
 80043a8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80043ac:	d4f8      	bmi.n	80043a0 <Lcd_Set_Windows+0xa4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80043ae:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80043b2:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80043b6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80043ba:	f44f 6740 	mov.w	r7, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80043be:	f04c 0c10 	orr.w	ip, ip, #16
 80043c2:	f8c6 c00c 	str.w	ip, [r6, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043c6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
	Lcd_RS_REG();
 80043ca:	f2c4 0701 	movt	r7, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80043ce:	f02c 0c10 	bic.w	ip, ip, #16
 80043d2:	f8c6 c00c 	str.w	ip, [r6, #12]
	Lcd_RS_REG();
 80043d6:	68fe      	ldr	r6, [r7, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80043d8:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80043da:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80043de:	60fe      	str	r6, [r7, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80043e0:	462e      	mov	r6, r5
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80043e2:	81a8      	strh	r0, [r5, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80043e4:	8930      	ldrh	r0, [r6, #8]
 80043e6:	0780      	lsls	r0, r0, #30
 80043e8:	d5fc      	bpl.n	80043e4 <Lcd_Set_Windows+0xe8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80043ea:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 80043ee:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80043f2:	8935      	ldrh	r5, [r6, #8]
 80043f4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80043f8:	062f      	lsls	r7, r5, #24
 80043fa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80043fe:	d4f8      	bmi.n	80043f2 <Lcd_Set_Windows+0xf6>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004400:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8004404:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004408:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800440a:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800440e:	f047 0710 	orr.w	r7, r7, #16
 8004412:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004414:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8004416:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800441a:	f027 0710 	bic.w	r7, r7, #16
 800441e:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8004420:	68f5      	ldr	r5, [r6, #12]
void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
 8004422:	0a17      	lsrs	r7, r2, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004424:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004428:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800442a:	4605      	mov	r5, r0
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800442c:	8187      	strh	r7, [r0, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800442e:	8928      	ldrh	r0, [r5, #8]
 8004430:	0786      	lsls	r6, r0, #30
 8004432:	d5fc      	bpl.n	800442e <Lcd_Set_Windows+0x132>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004434:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8004438:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800443c:	8935      	ldrh	r5, [r6, #8]
 800443e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004442:	062d      	lsls	r5, r5, #24
 8004444:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004448:	d4f8      	bmi.n	800443c <Lcd_Set_Windows+0x140>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800444a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800444e:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004452:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004454:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004458:	f047 0710 	orr.w	r7, r7, #16
 800445c:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800445e:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8004460:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004464:	f027 0710 	bic.w	r7, r7, #16
 8004468:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 800446a:	68f5      	ldr	r5, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800446c:	b2d2      	uxtb	r2, r2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800446e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004472:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004474:	4605      	mov	r5, r0
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004476:	8182      	strh	r2, [r0, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004478:	892a      	ldrh	r2, [r5, #8]
 800447a:	0797      	lsls	r7, r2, #30
 800447c:	d5fc      	bpl.n	8004478 <Lcd_Set_Windows+0x17c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800447e:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004482:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004486:	8928      	ldrh	r0, [r5, #8]
 8004488:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800448c:	0606      	lsls	r6, r0, #24
 800448e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004492:	d4f8      	bmi.n	8004486 <Lcd_Set_Windows+0x18a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004494:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004498:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800449c:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800449e:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80044a2:	f046 0610 	orr.w	r6, r6, #16
 80044a6:	60c6      	str	r6, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80044a8:	68c7      	ldr	r7, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 80044aa:	8966      	ldrh	r6, [r4, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80044ac:	f027 0710 	bic.w	r7, r7, #16
 80044b0:	60c7      	str	r7, [r0, #12]
   Lcd_RS_DATA();
 80044b2:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80044b6:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80044b8:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80044ba:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80044be:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044c0:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80044c2:	8196      	strh	r6, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80044c4:	8902      	ldrh	r2, [r0, #8]
 80044c6:	0795      	lsls	r5, r2, #30
 80044c8:	d5fc      	bpl.n	80044c4 <Lcd_Set_Windows+0x1c8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80044ca:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80044ce:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80044d2:	8928      	ldrh	r0, [r5, #8]
 80044d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80044d8:	0600      	lsls	r0, r0, #24
 80044da:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80044de:	d4f8      	bmi.n	80044d2 <Lcd_Set_Windows+0x1d6>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80044e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80044e8:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80044ea:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80044ee:	f046 0610 	orr.w	r6, r6, #16
 80044f2:	60c6      	str	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80044f4:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 80044f6:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80044fa:	f026 0610 	bic.w	r6, r6, #16
 80044fe:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8004500:	68e8      	ldr	r0, [r5, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8004502:	0a0e      	lsrs	r6, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004504:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004508:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800450a:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800450c:	8196      	strh	r6, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800450e:	8902      	ldrh	r2, [r0, #8]
 8004510:	0797      	lsls	r7, r2, #30
 8004512:	d5fc      	bpl.n	800450e <Lcd_Set_Windows+0x212>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004514:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004518:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800451c:	8928      	ldrh	r0, [r5, #8]
 800451e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004522:	0606      	lsls	r6, r0, #24
 8004524:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004528:	d4f8      	bmi.n	800451c <Lcd_Set_Windows+0x220>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800452a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800452e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004532:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004534:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004538:	f046 0610 	orr.w	r6, r6, #16
 800453c:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800453e:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8004540:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004544:	f026 0610 	bic.w	r6, r6, #16
 8004548:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 800454a:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800454c:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800454e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004552:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004554:	4610      	mov	r0, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004556:	8191      	strh	r1, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004558:	8902      	ldrh	r2, [r0, #8]
 800455a:	0795      	lsls	r5, r2, #30
 800455c:	d5fc      	bpl.n	8004558 <Lcd_Set_Windows+0x25c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800455e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8004562:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004566:	8901      	ldrh	r1, [r0, #8]
 8004568:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800456c:	0609      	lsls	r1, r1, #24
 800456e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004572:	d4f8      	bmi.n	8004566 <Lcd_Set_Windows+0x26a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004578:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800457c:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800457e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004582:	f045 0510 	orr.w	r5, r5, #16
 8004586:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004588:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 800458a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800458e:	f025 0510 	bic.w	r5, r5, #16
 8004592:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8004594:	68c1      	ldr	r1, [r0, #12]
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
	Lcd_WR_DATA(0xFF&y1);
	Lcd_WR_DATA(y2>>8);
 8004596:	0a1d      	lsrs	r5, r3, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004598:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800459c:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800459e:	4611      	mov	r1, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80045a0:	8195      	strh	r5, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80045a2:	890a      	ldrh	r2, [r1, #8]
 80045a4:	0792      	lsls	r2, r2, #30
 80045a6:	d5fc      	bpl.n	80045a2 <Lcd_Set_Windows+0x2a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80045a8:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80045ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80045b0:	8901      	ldrh	r1, [r0, #8]
 80045b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80045b6:	060f      	lsls	r7, r1, #24
 80045b8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80045bc:	d4f8      	bmi.n	80045b0 <Lcd_Set_Windows+0x2b4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80045c6:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80045c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80045cc:	f045 0510 	orr.w	r5, r5, #16
 80045d0:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80045d2:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80045d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80045d8:	f025 0510 	bic.w	r5, r5, #16
 80045dc:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80045de:	68c1      	ldr	r1, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80045e0:	b2db      	uxtb	r3, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80045e2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80045e6:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80045e8:	4611      	mov	r1, r2
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80045ea:	8193      	strh	r3, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80045ec:	890b      	ldrh	r3, [r1, #8]
 80045ee:	079e      	lsls	r6, r3, #30
 80045f0:	d5fc      	bpl.n	80045ec <Lcd_Set_Windows+0x2f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80045f2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80045f6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80045fa:	890a      	ldrh	r2, [r1, #8]
 80045fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004600:	0615      	lsls	r5, r2, #24
 8004602:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004606:	d4f8      	bmi.n	80045fa <Lcd_Set_Windows+0x2fe>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800460c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004610:	68d0      	ldr	r0, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004612:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004616:	f040 0010 	orr.w	r0, r0, #16
 800461a:	60d0      	str	r0, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800461c:	68d5      	ldr	r5, [r2, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 800461e:	88e0      	ldrh	r0, [r4, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004620:	f025 0410 	bic.w	r4, r5, #16
 8004624:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004626:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800462a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800462c:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800462e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004632:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004634:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004636:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004638:	8913      	ldrh	r3, [r2, #8]
 800463a:	0798      	lsls	r0, r3, #30
 800463c:	d5fc      	bpl.n	8004638 <Lcd_Set_Windows+0x33c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800463e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004642:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004646:	8913      	ldrh	r3, [r2, #8]
 8004648:	0619      	lsls	r1, r3, #24
 800464a:	d4fc      	bmi.n	8004646 <Lcd_Set_Windows+0x34a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800464c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004650:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	f042 0210 	orr.w	r2, r2, #16
 800465a:	60da      	str	r2, [r3, #12]
	Lcd_WR_DATA(0xFF&y1);
	Lcd_WR_DATA(y2>>8);
	Lcd_WR_DATA(0xFF&y2);

	Lcd_Write_RAM_Prepare();
}
 800465c:	bcf0      	pop	{r4, r5, r6, r7}
 800465e:	4770      	bx	lr

08004660 <Lcd_Fill>:
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;
 8004664:	1a5e      	subs	r6, r3, r1
 8004666:	3601      	adds	r6, #1
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
 8004668:	1a15      	subs	r5, r2, r0
	unsigned short height = ey - sy + 1;
 800466a:	b2b6      	uxth	r6, r6
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
 800466c:	3501      	adds	r5, #1
 800466e:	b2ad      	uxth	r5, r5
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
}

void Lcd_Fill(unsigned short sx, unsigned short sy, unsigned short ex, unsigned short ey, unsigned short color)
{
 8004670:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	unsigned short i,j;
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);
 8004674:	f7ff fe42 	bl	80042fc <Lcd_Set_Windows>

	for(i = 0; i < height; i++)
 8004678:	2e00      	cmp	r6, #0
 800467a:	d03d      	beq.n	80046f8 <Lcd_Fill+0x98>
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 800467c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   Lcd_RS_REG();
 8004680:	f44f 6740 	mov.w	r7, #3072	; 0xc00
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004684:	f44f 5340 	mov.w	r3, #12288	; 0x3000
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8004688:	f2c4 0001 	movt	r0, #16385	; 0x4001
   Lcd_RS_REG();
 800468c:	f2c4 0701 	movt	r7, #16385	; 0x4001
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004690:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004694:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8004698:	fa5f fc84 	uxtb.w	ip, r4
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
 800469c:	f04f 0900 	mov.w	r9, #0
	{
		for(j = 0; j < width; j++)
 80046a0:	b325      	cbz	r5, 80046ec <Lcd_Fill+0x8c>
 80046a2:	2400      	movs	r4, #0
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 80046a4:	68c2      	ldr	r2, [r0, #12]
 80046a6:	f022 0210 	bic.w	r2, r2, #16
 80046aa:	60c2      	str	r2, [r0, #12]
   Lcd_RS_REG();
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	60fa      	str	r2, [r7, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046b4:	f8a3 800c 	strh.w	r8, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80046b8:	891a      	ldrh	r2, [r3, #8]
 80046ba:	0792      	lsls	r2, r2, #30
 80046bc:	d5fc      	bpl.n	80046b8 <Lcd_Fill+0x58>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80046be:	8919      	ldrh	r1, [r3, #8]
 80046c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80046c4:	0609      	lsls	r1, r1, #24
 80046c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80046ca:	d4f8      	bmi.n	80046be <Lcd_Fill+0x5e>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80046cc:	f8a2 c00c 	strh.w	ip, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80046d0:	891a      	ldrh	r2, [r3, #8]
 80046d2:	0791      	lsls	r1, r2, #30
 80046d4:	d5fc      	bpl.n	80046d0 <Lcd_Fill+0x70>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80046d6:	891a      	ldrh	r2, [r3, #8]
 80046d8:	0612      	lsls	r2, r2, #24
 80046da:	d4fc      	bmi.n	80046d6 <Lcd_Fill+0x76>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 80046dc:	68c2      	ldr	r2, [r0, #12]

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 80046de:	3401      	adds	r4, #1
 80046e0:	b2a4      	uxth	r4, r4
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 80046e2:	f042 0210 	orr.w	r2, r2, #16

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 80046e6:	42a5      	cmp	r5, r4
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 80046e8:	60c2      	str	r2, [r0, #12]

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
 80046ea:	d1db      	bne.n	80046a4 <Lcd_Fill+0x44>
	unsigned short width = ex - sx + 1;
	unsigned short height = ey - sy + 1;

	Lcd_Set_Windows(sx,sy,ex,ey);

	for(i = 0; i < height; i++)
 80046ec:	f109 0901 	add.w	r9, r9, #1
 80046f0:	fa1f f989 	uxth.w	r9, r9
 80046f4:	454e      	cmp	r6, r9
 80046f6:	d1d3      	bne.n	80046a0 <Lcd_Fill+0x40>
		{
			Lcd_Write_Data_16Bit(color);
		}
	}

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
 80046f8:	f240 5388 	movw	r3, #1416	; 0x588
 80046fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004700:	881a      	ldrh	r2, [r3, #0]
 8004702:	885b      	ldrh	r3, [r3, #2]
 8004704:	3a01      	subs	r2, #1
 8004706:	3b01      	subs	r3, #1
 8004708:	2000      	movs	r0, #0
 800470a:	b292      	uxth	r2, r2
 800470c:	b29b      	uxth	r3, r3
 800470e:	4601      	mov	r1, r0
}
 8004710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		{
			Lcd_Write_Data_16Bit(color);
		}
	}

	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
 8004714:	f7ff bdf2 	b.w	80042fc <Lcd_Set_Windows>

08004718 <Lcd_Set_Cursor>:

	Lcd_Write_RAM_Prepare();
}

void Lcd_Set_Cursor(unsigned short x, unsigned short y)
{
 8004718:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800471a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800471e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004722:	68de      	ldr	r6, [r3, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004724:	f240 5288 	movw	r2, #1416	; 0x588
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004728:	f026 0610 	bic.w	r6, r6, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 800472c:	f2c2 0200 	movt	r2, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004730:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 8004734:	8915      	ldrh	r5, [r2, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004736:	f2c4 0401 	movt	r4, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800473a:	60de      	str	r6, [r3, #12]
   Lcd_RS_DATA();
 800473c:	68e6      	ldr	r6, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800473e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004742:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004746:	b2ed      	uxtb	r5, r5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004748:	f426 7600 	bic.w	r6, r6, #512	; 0x200
 800474c:	60e6      	str	r6, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800474e:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004750:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004752:	8923      	ldrh	r3, [r4, #8]
 8004754:	079d      	lsls	r5, r3, #30
 8004756:	d5fc      	bpl.n	8004752 <Lcd_Set_Cursor+0x3a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004758:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 800475c:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004760:	892c      	ldrh	r4, [r5, #8]
 8004762:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004766:	0624      	lsls	r4, r4, #24
 8004768:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800476c:	d4f8      	bmi.n	8004760 <Lcd_Set_Cursor+0x48>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800476e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004772:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004776:	68e6      	ldr	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004778:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800477c:	f046 0610 	orr.w	r6, r6, #16
 8004780:	60e6      	str	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004782:	68e6      	ldr	r6, [r4, #12]
	Lcd_RS_REG();
 8004784:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004788:	f026 0610 	bic.w	r6, r6, #16
 800478c:	60e6      	str	r6, [r4, #12]
	Lcd_RS_REG();
 800478e:	68ec      	ldr	r4, [r5, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 8004790:	0a06      	lsrs	r6, r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004792:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8004796:	60ec      	str	r4, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004798:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800479a:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800479c:	8923      	ldrh	r3, [r4, #8]
 800479e:	079b      	lsls	r3, r3, #30
 80047a0:	d5fc      	bpl.n	800479c <Lcd_Set_Cursor+0x84>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80047a2:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80047a6:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80047aa:	892c      	ldrh	r4, [r5, #8]
 80047ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047b0:	0627      	lsls	r7, r4, #24
 80047b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80047b6:	d4f8      	bmi.n	80047aa <Lcd_Set_Cursor+0x92>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80047b8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80047bc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80047c0:	68e7      	ldr	r7, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80047c2:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80047c6:	f047 0710 	orr.w	r7, r7, #16
 80047ca:	60e7      	str	r7, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80047cc:	68e7      	ldr	r7, [r4, #12]
	Lcd_RS_REG();
 80047ce:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80047d2:	f027 0710 	bic.w	r7, r7, #16
 80047d6:	60e7      	str	r7, [r4, #12]
	Lcd_RS_REG();
 80047d8:	68ec      	ldr	r4, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80047da:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80047dc:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80047e0:	60ec      	str	r4, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80047e2:	461c      	mov	r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80047e4:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80047e6:	8923      	ldrh	r3, [r4, #8]
 80047e8:	079d      	lsls	r5, r3, #30
 80047ea:	d5fc      	bpl.n	80047e6 <Lcd_Set_Cursor+0xce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80047ec:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 80047f0:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80047f4:	892c      	ldrh	r4, [r5, #8]
 80047f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047fa:	0624      	lsls	r4, r4, #24
 80047fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004800:	d4f8      	bmi.n	80047f4 <Lcd_Set_Cursor+0xdc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004802:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004806:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800480a:	68e7      	ldr	r7, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800480c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004810:	f047 0710 	orr.w	r7, r7, #16
 8004814:	60e7      	str	r7, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004816:	68e7      	ldr	r7, [r4, #12]
	Lcd_RS_REG();
 8004818:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800481c:	f027 0710 	bic.w	r7, r7, #16
 8004820:	60e7      	str	r7, [r4, #12]
	Lcd_RS_REG();
 8004822:	68ef      	ldr	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004824:	461c      	mov	r4, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004826:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 800482a:	60ef      	str	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800482c:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800482e:	8923      	ldrh	r3, [r4, #8]
 8004830:	079b      	lsls	r3, r3, #30
 8004832:	d5fc      	bpl.n	800482e <Lcd_Set_Cursor+0x116>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004834:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8004838:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800483c:	892c      	ldrh	r4, [r5, #8]
 800483e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004842:	0627      	lsls	r7, r4, #24
 8004844:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004848:	d4f8      	bmi.n	800483c <Lcd_Set_Cursor+0x124>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800484a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800484e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004852:	68e6      	ldr	r6, [r4, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004854:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004858:	f046 0610 	orr.w	r6, r6, #16
 800485c:	60e6      	str	r6, [r4, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800485e:	68e6      	ldr	r6, [r4, #12]
	Lcd_RS_REG();
 8004860:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004864:	f026 0610 	bic.w	r6, r6, #16
 8004868:	60e6      	str	r6, [r4, #12]
	Lcd_RS_REG();
 800486a:	68ee      	ldr	r6, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800486c:	461c      	mov	r4, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800486e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 8004872:	60ee      	str	r6, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004874:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004876:	8923      	ldrh	r3, [r4, #8]
 8004878:	079e      	lsls	r6, r3, #30
 800487a:	d5fc      	bpl.n	8004876 <Lcd_Set_Cursor+0x15e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800487c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8004880:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004884:	8920      	ldrh	r0, [r4, #8]
 8004886:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800488a:	0605      	lsls	r5, r0, #24
 800488c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004890:	d4f8      	bmi.n	8004884 <Lcd_Set_Cursor+0x16c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004892:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004896:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800489a:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800489c:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80048a0:	f045 0510 	orr.w	r5, r5, #16
 80048a4:	60c5      	str	r5, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80048a6:	68c6      	ldr	r6, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 80048a8:	8955      	ldrh	r5, [r2, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80048aa:	f026 0610 	bic.w	r6, r6, #16
 80048ae:	60c6      	str	r6, [r0, #12]
   Lcd_RS_DATA();
 80048b0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80048b4:	68e0      	ldr	r0, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80048b6:	b2ed      	uxtb	r5, r5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80048b8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80048bc:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80048be:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80048c0:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80048c2:	8903      	ldrh	r3, [r0, #8]
 80048c4:	079c      	lsls	r4, r3, #30
 80048c6:	d5fc      	bpl.n	80048c2 <Lcd_Set_Cursor+0x1aa>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80048c8:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80048cc:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80048d0:	8920      	ldrh	r0, [r4, #8]
 80048d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80048d6:	0600      	lsls	r0, r0, #24
 80048d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80048dc:	d4f8      	bmi.n	80048d0 <Lcd_Set_Cursor+0x1b8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80048de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048e2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80048e6:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80048e8:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80048ec:	f045 0510 	orr.w	r5, r5, #16
 80048f0:	60c5      	str	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80048f2:	68c5      	ldr	r5, [r0, #12]
	Lcd_RS_REG();
 80048f4:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80048f8:	f025 0510 	bic.w	r5, r5, #16
 80048fc:	60c5      	str	r5, [r0, #12]
	Lcd_RS_REG();
 80048fe:	68e0      	ldr	r0, [r4, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8004900:	0a0d      	lsrs	r5, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004902:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004906:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004908:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800490a:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800490c:	8903      	ldrh	r3, [r0, #8]
 800490e:	079f      	lsls	r7, r3, #30
 8004910:	d5fc      	bpl.n	800490c <Lcd_Set_Cursor+0x1f4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004912:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8004916:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800491a:	8920      	ldrh	r0, [r4, #8]
 800491c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004920:	0606      	lsls	r6, r0, #24
 8004922:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004926:	d4f8      	bmi.n	800491a <Lcd_Set_Cursor+0x202>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004928:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800492c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004930:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004932:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004936:	f046 0610 	orr.w	r6, r6, #16
 800493a:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800493c:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 800493e:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004942:	f026 0610 	bic.w	r6, r6, #16
 8004946:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8004948:	68e0      	ldr	r0, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800494a:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800494c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004950:	60e0      	str	r0, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004952:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004954:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004956:	8903      	ldrh	r3, [r0, #8]
 8004958:	079c      	lsls	r4, r3, #30
 800495a:	d5fc      	bpl.n	8004956 <Lcd_Set_Cursor+0x23e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800495c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8004960:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8004964:	8920      	ldrh	r0, [r4, #8]
 8004966:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800496a:	0600      	lsls	r0, r0, #24
 800496c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004970:	d4f8      	bmi.n	8004964 <Lcd_Set_Cursor+0x24c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004972:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004976:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800497a:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800497c:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004980:	f046 0610 	orr.w	r6, r6, #16
 8004984:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004986:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8004988:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800498c:	f026 0610 	bic.w	r6, r6, #16
 8004990:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8004992:	68e6      	ldr	r6, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004994:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004996:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 800499a:	60e6      	str	r6, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800499c:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800499e:	8903      	ldrh	r3, [r0, #8]
 80049a0:	079f      	lsls	r7, r3, #30
 80049a2:	d5fc      	bpl.n	800499e <Lcd_Set_Cursor+0x286>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80049a4:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 80049a8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80049ac:	8920      	ldrh	r0, [r4, #8]
 80049ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049b2:	0606      	lsls	r6, r0, #24
 80049b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80049b8:	d4f8      	bmi.n	80049ac <Lcd_Set_Cursor+0x294>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049be:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80049c2:	68c5      	ldr	r5, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80049c4:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80049c8:	f045 0510 	orr.w	r5, r5, #16
 80049cc:	60c5      	str	r5, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80049ce:	68c5      	ldr	r5, [r0, #12]
	Lcd_RS_REG();
 80049d0:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80049d4:	f025 0510 	bic.w	r5, r5, #16
 80049d8:	60c5      	str	r5, [r0, #12]
	Lcd_RS_REG();
 80049da:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80049dc:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80049de:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80049e2:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80049e4:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80049e6:	8903      	ldrh	r3, [r0, #8]
 80049e8:	079d      	lsls	r5, r3, #30
 80049ea:	d5fc      	bpl.n	80049e6 <Lcd_Set_Cursor+0x2ce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80049ec:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80049f0:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80049f4:	8901      	ldrh	r1, [r0, #8]
 80049f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049fa:	060c      	lsls	r4, r1, #24
 80049fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a00:	d4f8      	bmi.n	80049f4 <Lcd_Set_Cursor+0x2dc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a06:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004a0a:	68cc      	ldr	r4, [r1, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004a0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004a10:	f044 0410 	orr.w	r4, r4, #16
 8004a14:	60cc      	str	r4, [r1, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004a16:	68cd      	ldr	r5, [r1, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 8004a18:	88d4      	ldrh	r4, [r2, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004a1a:	f025 0210 	bic.w	r2, r5, #16
 8004a1e:	60ca      	str	r2, [r1, #12]
   Lcd_RS_DATA();
 8004a20:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004a24:	68c2      	ldr	r2, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004a26:	b2e1      	uxtb	r1, r4
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004a28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a2c:	60c2      	str	r2, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a2e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004a30:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004a32:	8913      	ldrh	r3, [r2, #8]
 8004a34:	0798      	lsls	r0, r3, #30
 8004a36:	d5fc      	bpl.n	8004a32 <Lcd_Set_Cursor+0x31a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004a38:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004a3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004a40:	8913      	ldrh	r3, [r2, #8]
 8004a42:	0619      	lsls	r1, r3, #24
 8004a44:	d4fc      	bmi.n	8004a40 <Lcd_Set_Cursor+0x328>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	f042 0210 	orr.w	r2, r2, #16
 8004a54:	60da      	str	r2, [r3, #12]
}

void Lcd_Set_Cursor(unsigned short x, unsigned short y)
{
	Lcd_Set_Windows(x,y,x,y);
}
 8004a56:	bcf0      	pop	{r4, r5, r6, r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <Lcd_Draw_Back_Color>:

void Lcd_Draw_Back_Color(unsigned short Color)
{
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);
 8004a5e:	f240 5788 	movw	r7, #1416	; 0x588
 8004a62:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8004a66:	883a      	ldrh	r2, [r7, #0]
 8004a68:	887b      	ldrh	r3, [r7, #2]
{
	Lcd_Set_Windows(x,y,x,y);
}

void Lcd_Draw_Back_Color(unsigned short Color)
{
 8004a6a:	4605      	mov	r5, r0
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	2000      	movs	r0, #0
 8004a70:	3b01      	subs	r3, #1
 8004a72:	4601      	mov	r1, r0
 8004a74:	b292      	uxth	r2, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f7ff fc40 	bl	80042fc <Lcd_Set_Windows>

	Lcd_CS_EN();
 8004a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004a84:	68d1      	ldr	r1, [r2, #12]
	Lcd_RS_REG();
 8004a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
 8004a8a:	f021 0110 	bic.w	r1, r1, #16
 8004a8e:	60d1      	str	r1, [r2, #12]
	Lcd_RS_REG();
 8004a90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004a94:	68da      	ldr	r2, [r3, #12]
}

void Lcd_Draw_Back_Color(unsigned short Color)
{
	unsigned int i;
	unsigned char c0 = Color >> 8;
 8004a96:	0a2e      	lsrs	r6, r5, #8
	unsigned char c1 = Color & 0xFF;

	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9c:	60da      	str	r2, [r3, #12]

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	883c      	ldrh	r4, [r7, #0]
 8004aa2:	b2ed      	uxtb	r5, r5
 8004aa4:	fb04 f403 	mul.w	r4, r4, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004aa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004aac:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	b1a4      	cbz	r4, 8004ade <Lcd_Draw_Back_Color+0x82>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ab4:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ab6:	891a      	ldrh	r2, [r3, #8]
 8004ab8:	0797      	lsls	r7, r2, #30
 8004aba:	d5fc      	bpl.n	8004ab6 <Lcd_Draw_Back_Color+0x5a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004abc:	8919      	ldrh	r1, [r3, #8]
 8004abe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004ac2:	0609      	lsls	r1, r1, #24
 8004ac4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ac8:	d4f8      	bmi.n	8004abc <Lcd_Draw_Back_Color+0x60>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004aca:	8195      	strh	r5, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004acc:	891a      	ldrh	r2, [r3, #8]
 8004ace:	0792      	lsls	r2, r2, #30
 8004ad0:	d5fc      	bpl.n	8004acc <Lcd_Draw_Back_Color+0x70>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004ad2:	891a      	ldrh	r2, [r3, #8]
 8004ad4:	0617      	lsls	r7, r2, #24
 8004ad6:	d4fc      	bmi.n	8004ad2 <Lcd_Draw_Back_Color+0x76>
	Lcd_Set_Windows(0,0,lcddev.width-1,lcddev.height-1);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < lcddev.height * lcddev.width; i++)
 8004ad8:	3001      	adds	r0, #1
 8004ada:	42a0      	cmp	r0, r4
 8004adc:	d1ea      	bne.n	8004ab4 <Lcd_Draw_Back_Color+0x58>
	{
		_SPI1_Write_Byte(c0);
		_SPI1_Write_Byte(c1);
	}

	Lcd_CS_DIS();
 8004ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	f042 0210 	orr.w	r2, r2, #16
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004af0 <Lcd_Clr_Screen>:
}

void Lcd_Clr_Screen(void)
{
	Lcd_Draw_Back_Color(BLACK);
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7ff bfb3 	b.w	8004a5c <Lcd_Draw_Back_Color>
 8004af6:	bf00      	nop

08004af8 <Lcd_Draw_Box>:
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
 8004af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;
	int xe,ye;
	xe = xs+w-1;
	ye = ys+h-1;
 8004afc:	440b      	add	r3, r1
 8004afe:	1e5f      	subs	r7, r3, #1
	if(xe >= 320) xe=319;
	if(ye >= 240) xe=239;
 8004b00:	2fef      	cmp	r7, #239	; 0xef
{
	Lcd_Draw_Back_Color(BLACK);
}

void Lcd_Draw_Box(int xs, int ys, int w, int h, unsigned short Color)
{
 8004b02:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8004b06:	bfc8      	it	gt
 8004b08:	22ef      	movgt	r2, #239	; 0xef
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4680      	mov	r8, r0
	unsigned int i;
	unsigned char c0 = Color >> 8;
 8004b0e:	ea4f 2516 	mov.w	r5, r6, lsr #8
	unsigned char c1 = Color & 0xFF;
	int xe,ye;
	xe = xs+w-1;
	ye = ys+h-1;
	if(xe >= 320) xe=319;
	if(ye >= 240) xe=239;
 8004b12:	bfc8      	it	gt
 8004b14:	4691      	movgt	r9, r2
 8004b16:	dc09      	bgt.n	8004b2c <Lcd_Draw_Box+0x34>
{
	unsigned int i;
	unsigned char c0 = Color >> 8;
	unsigned char c1 = Color & 0xFF;
	int xe,ye;
	xe = xs+w-1;
 8004b18:	4402      	add	r2, r0
 8004b1a:	f102 39ff 	add.w	r9, r2, #4294967295
 8004b1e:	f240 133f 	movw	r3, #319	; 0x13f
 8004b22:	4599      	cmp	r9, r3
 8004b24:	bfa8      	it	ge
 8004b26:	4699      	movge	r9, r3
 8004b28:	fa1f f289 	uxth.w	r2, r9
	ye = ys+h-1;
	if(xe >= 320) xe=319;
	if(ye >= 240) xe=239;

	Lcd_Set_Windows(xs, ys, xe, ye);
 8004b2c:	fa1f f088 	uxth.w	r0, r8
 8004b30:	b2a1      	uxth	r1, r4
 8004b32:	b2bb      	uxth	r3, r7
 8004b34:	f7ff fbe2 	bl	80042fc <Lcd_Set_Windows>

	Lcd_CS_EN();
 8004b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004b40:	68d1      	ldr	r1, [r2, #12]
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b42:	1b3c      	subs	r4, r7, r4
	if(xe >= 320) xe=319;
	if(ye >= 240) xe=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
 8004b44:	f021 0110 	bic.w	r1, r1, #16
	Lcd_RS_REG();
 8004b48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
	if(xe >= 320) xe=319;
	if(ye >= 240) xe=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
 8004b50:	60d1      	str	r1, [r2, #12]
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b52:	3401      	adds	r4, #1
 8004b54:	ebc8 0809 	rsb	r8, r8, r9
	if(ye >= 240) xe=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004b58:	68da      	ldr	r2, [r3, #12]

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b5a:	fb08 4404 	mla	r4, r8, r4, r4
	if(ye >= 240) xe=239;

	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	60da      	str	r2, [r3, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b68:	b2f6      	uxtb	r6, r6
 8004b6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b6e:	2000      	movs	r0, #0
 8004b70:	b1a4      	cbz	r4, 8004b9c <Lcd_Draw_Box+0xa4>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b72:	819d      	strh	r5, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004b74:	891a      	ldrh	r2, [r3, #8]
 8004b76:	0792      	lsls	r2, r2, #30
 8004b78:	d5fc      	bpl.n	8004b74 <Lcd_Draw_Box+0x7c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004b7a:	8919      	ldrh	r1, [r3, #8]
 8004b7c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004b80:	060f      	lsls	r7, r1, #24
 8004b82:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004b86:	d4f8      	bmi.n	8004b7a <Lcd_Draw_Box+0x82>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004b88:	8196      	strh	r6, [r2, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004b8a:	891a      	ldrh	r2, [r3, #8]
 8004b8c:	0791      	lsls	r1, r2, #30
 8004b8e:	d5fc      	bpl.n	8004b8a <Lcd_Draw_Box+0x92>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004b90:	891a      	ldrh	r2, [r3, #8]
 8004b92:	0612      	lsls	r2, r2, #24
 8004b94:	d4fc      	bmi.n	8004b90 <Lcd_Draw_Box+0x98>
	Lcd_Set_Windows(xs, ys, xe, ye);

	Lcd_CS_EN();
	Lcd_RS_REG();

	for(i=0; i < (xe - xs + 1) * (ye - ys + 1); i++)
 8004b96:	3001      	adds	r0, #1
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d1ea      	bne.n	8004b72 <Lcd_Draw_Box+0x7a>
	{
		_SPI1_Write_Byte(c0);
		_SPI1_Write_Byte(c1);
	}

	Lcd_CS_DIS();
 8004b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ba0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	f042 0210 	orr.w	r2, r2, #16
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004bb0 <Lcd_Init>:
}

void Lcd_Init(int mode)
{  
 8004bb0:	b530      	push	{r4, r5, lr}
unsigned short  POINT_COLOR = 0x0000;
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
 8004bb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004bba:	6991      	ldr	r1, [r2, #24]
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
unsigned short  POINT_COLOR = 0x0000;
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
 8004bc0:	f041 0104 	orr.w	r1, r1, #4
 8004bc4:	6191      	str	r1, [r2, #24]
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004bc6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004bca:	6819      	ldr	r1, [r3, #0]
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004bcc:	f44f 5440 	mov.w	r4, #12288	; 0x3000
unsigned short  BACK_COLOR = 0xFFFF;

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
 8004bd0:	b289      	uxth	r1, r1
 8004bd2:	f041 4134 	orr.w	r1, r1, #3019898880	; 0xb4000000
 8004bd6:	f441 0133 	orr.w	r1, r1, #11730944	; 0xb30000
 8004bda:	6019      	str	r1, [r3, #0]
	Macro_Set_Bit(GPIOA->ODR, 4);
 8004bdc:	68d9      	ldr	r1, [r3, #12]

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004bde:	f2c4 0401 	movt	r4, #16385	; 0x4001

static void _SPI1_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);
 8004be2:	f041 0110 	orr.w	r1, r1, #16
 8004be6:	60d9      	str	r1, [r3, #12]

	Macro_Set_Bit(RCC->APB2ENR, 12);
 8004be8:	6995      	ldr	r5, [r2, #24]
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004bea:	f44f 7141 	mov.w	r1, #772	; 0x304
{
	Macro_Set_Bit(RCC->APB2ENR, 2);
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
 8004bee:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8004bf2:	6195      	str	r5, [r2, #24]
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
 8004bf4:	8021      	strh	r1, [r4, #0]
	Macro_Set_Bit(SPI1->CR1, 6);
 8004bf6:	8822      	ldrh	r2, [r4, #0]
void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004bf8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	Macro_Write_Block(GPIOA->CRL, 0xffff, 0xb4b3, 16);
	Macro_Set_Bit(GPIOA->ODR, 4);

	Macro_Set_Bit(RCC->APB2ENR, 12);
	SPI1->CR1 = (0<<11)|(0<<10)|(1<<9)|(1<<8)|(0<<7)|(0<<3)|(1<<2)|(0<<1)|(0<<0); // 36MHz
	Macro_Set_Bit(SPI1->CR1, 6);
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	8022      	strh	r2, [r4, #0]
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8004c04:	681a      	ldr	r2, [r3, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c06:	f2c4 0101 	movt	r1, #16385	; 0x4001
#define Lcd_RST   		4
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
 8004c0a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004c0e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004c12:	601a      	str	r2, [r3, #0]
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8004c14:	685a      	ldr	r2, [r3, #4]

	Lcd_CS_DIS();
}

void Lcd_Init(int mode)
{  
 8004c16:	b085      	sub	sp, #20
#define Lcd_RS   		9

void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);
 8004c18:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8004c1c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004c20:	605a      	str	r2, [r3, #4]

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c22:	680d      	ldr	r5, [r1, #0]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c24:	2400      	movs	r4, #0
void Lcd_GPIO_Init(void)
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
 8004c26:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
 8004c2a:	f445 3540 	orr.w	r5, r5, #196608	; 0x30000
 8004c2e:	600d      	str	r5, [r1, #0]
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8004c30:	684d      	ldr	r5, [r1, #4]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c32:	f643 72ff 	movw	r2, #16383	; 0x3fff
{
	Macro_Write_Block(GPIOA->CRL, 0xf, 0x3, Lcd_CS * 4);
	Macro_Write_Block(GPIOA->CRH, 0xf, 0x3, (Lcd_LED - 8) * 4);

	Macro_Write_Block(GPIOB->CRL, 0xf, 0x3, Lcd_RST * 4);
	Macro_Write_Block(GPIOB->CRH, 0xf, 0x3, (Lcd_RS - 8) * 4);
 8004c36:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8004c3a:	f045 0530 	orr.w	r5, r5, #48	; 0x30
 8004c3e:	604d      	str	r5, [r1, #4]

void Lcd_Init(int mode)
{  
	_SPI1_Init();
	Lcd_GPIO_Init();
	Lcd_LED_OFF();
 8004c40:	68dd      	ldr	r5, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c42:	f2c0 0206 	movt	r2, #6

void Lcd_Init(int mode)
{  
	_SPI1_Init();
	Lcd_GPIO_Init();
	Lcd_LED_OFF();
 8004c46:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004c4a:	60dd      	str	r5, [r3, #12]
	Lcd_Set_Windows(0, 0, lcddev.width-1, lcddev.height-1);
}

void Lcd_Reset(void)
{
	Lcd_RST_EN();
 8004c4c:	68cb      	ldr	r3, [r1, #12]
 8004c4e:	f023 0310 	bic.w	r3, r3, #16
 8004c52:	60cb      	str	r3, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c54:	9403      	str	r4, [sp, #12]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	dc05      	bgt.n	8004c68 <Lcd_Init+0xb8>
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	9303      	str	r3, [sp, #12]
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	4293      	cmp	r3, r2
 8004c66:	ddf9      	ble.n	8004c5c <Lcd_Init+0xac>

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8004c68:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004c70:	68d9      	ldr	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c72:	2200      	movs	r2, #0

void Lcd_Reset(void)
{
	Lcd_RST_EN();
	_Delay(100);
	Lcd_RST_DIS();
 8004c74:	f041 0110 	orr.w	r1, r1, #16
 8004c78:	60d9      	str	r1, [r3, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8004c7a:	9202      	str	r2, [sp, #8]
 8004c7c:	9b02      	ldr	r3, [sp, #8]
 8004c7e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004c82:	f2c0 0203 	movt	r2, #3
 8004c86:	4293      	cmp	r3, r2
 8004c88:	dc05      	bgt.n	8004c96 <Lcd_Init+0xe6>
 8004c8a:	9b02      	ldr	r3, [sp, #8]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	9302      	str	r3, [sp, #8]
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	ddf9      	ble.n	8004c8a <Lcd_Init+0xda>
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004c9e:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 8004ca0:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004ca4:	f021 0110 	bic.w	r1, r1, #16
 8004ca8:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8004caa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004cae:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004cb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004cb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004cb8:	f424 7400 	bic.w	r4, r4, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004cbc:	21cf      	movs	r1, #207	; 0xcf
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004cbe:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004cc0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004cc2:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004cc4:	8913      	ldrh	r3, [r2, #8]
 8004cc6:	079b      	lsls	r3, r3, #30
 8004cc8:	d5fc      	bpl.n	8004cc4 <Lcd_Init+0x114>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004cca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004cce:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004cd2:	890a      	ldrh	r2, [r1, #8]
 8004cd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004cd8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	d1f5      	bne.n	8004cd2 <Lcd_Init+0x122>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cea:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004cee:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004cf0:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004cf4:	f045 0510 	orr.w	r5, r5, #16
 8004cf8:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004cfa:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8004cfc:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d00:	f025 0510 	bic.w	r5, r5, #16
 8004d04:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8004d06:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d08:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d0a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8004d0e:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d10:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d12:	890b      	ldrh	r3, [r1, #8]
 8004d14:	079d      	lsls	r5, r3, #30
 8004d16:	d5fc      	bpl.n	8004d12 <Lcd_Init+0x162>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004d18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d1c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004d20:	890a      	ldrh	r2, [r1, #8]
 8004d22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d26:	0614      	lsls	r4, r2, #24
 8004d28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004d2c:	d4f8      	bmi.n	8004d20 <Lcd_Init+0x170>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d32:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004d36:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d38:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d3c:	f044 0410 	orr.w	r4, r4, #16
 8004d40:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d42:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004d44:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d48:	f024 0410 	bic.w	r4, r4, #16
 8004d4c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004d4e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d50:	24d9      	movs	r4, #217	; 0xd9
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d56:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d58:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d5a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004d5c:	8913      	ldrh	r3, [r2, #8]
 8004d5e:	0799      	lsls	r1, r3, #30
 8004d60:	d5fc      	bpl.n	8004d5c <Lcd_Init+0x1ac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004d62:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004d66:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004d6a:	890a      	ldrh	r2, [r1, #8]
 8004d6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004d70:	0612      	lsls	r2, r2, #24
 8004d72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004d76:	d4f8      	bmi.n	8004d6a <Lcd_Init+0x1ba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004d80:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d82:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004d86:	f044 0410 	orr.w	r4, r4, #16
 8004d8a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d8c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004d8e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004d92:	f024 0410 	bic.w	r4, r4, #16
 8004d96:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004d98:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004d9a:	2430      	movs	r4, #48	; 0x30
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004da2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004da4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004da6:	8913      	ldrh	r3, [r2, #8]
 8004da8:	079d      	lsls	r5, r3, #30
 8004daa:	d5fc      	bpl.n	8004da6 <Lcd_Init+0x1f6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004dac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004db0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004db4:	890a      	ldrh	r2, [r1, #8]
 8004db6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004dba:	0614      	lsls	r4, r2, #24
 8004dbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004dc0:	d4f8      	bmi.n	8004db4 <Lcd_Init+0x204>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004dca:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004dcc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004dd0:	f044 0410 	orr.w	r4, r4, #16
 8004dd4:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004dd6:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8004dd8:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004ddc:	f024 0410 	bic.w	r4, r4, #16
 8004de0:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004de2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004de4:	24ed      	movs	r4, #237	; 0xed
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004de6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dea:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004dec:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004dee:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004df0:	8913      	ldrh	r3, [r2, #8]
 8004df2:	0799      	lsls	r1, r3, #30
 8004df4:	d5fc      	bpl.n	8004df0 <Lcd_Init+0x240>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004df6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004dfa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004dfe:	890a      	ldrh	r2, [r1, #8]
 8004e00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e04:	0612      	lsls	r2, r2, #24
 8004e06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e0a:	d4f8      	bmi.n	8004dfe <Lcd_Init+0x24e>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e10:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004e14:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e16:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004e1a:	f044 0410 	orr.w	r4, r4, #16
 8004e1e:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e20:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004e22:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e26:	f024 0410 	bic.w	r4, r4, #16
 8004e2a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004e2c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e2e:	2464      	movs	r4, #100	; 0x64
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e34:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e36:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e38:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e3a:	8913      	ldrh	r3, [r2, #8]
 8004e3c:	079d      	lsls	r5, r3, #30
 8004e3e:	d5fc      	bpl.n	8004e3a <Lcd_Init+0x28a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004e40:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e44:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004e48:	890a      	ldrh	r2, [r1, #8]
 8004e4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e4e:	0614      	lsls	r4, r2, #24
 8004e50:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e54:	d4f8      	bmi.n	8004e48 <Lcd_Init+0x298>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004e5e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e60:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004e64:	f044 0410 	orr.w	r4, r4, #16
 8004e68:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e6a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004e6c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004e70:	f024 0410 	bic.w	r4, r4, #16
 8004e74:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004e76:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e78:	2403      	movs	r4, #3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e80:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004e82:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004e84:	8913      	ldrh	r3, [r2, #8]
 8004e86:	0799      	lsls	r1, r3, #30
 8004e88:	d5fc      	bpl.n	8004e84 <Lcd_Init+0x2d4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004e8a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e8e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004e92:	890a      	ldrh	r2, [r1, #8]
 8004e94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004e98:	0612      	lsls	r2, r2, #24
 8004e9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004e9e:	d4f8      	bmi.n	8004e92 <Lcd_Init+0x2e2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ea8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004eaa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004eae:	f044 0410 	orr.w	r4, r4, #16
 8004eb2:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004eb4:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004eb6:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004eba:	f024 0410 	bic.w	r4, r4, #16
 8004ebe:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004ec0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ec2:	2412      	movs	r4, #18
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004eca:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ecc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ece:	8913      	ldrh	r3, [r2, #8]
 8004ed0:	079d      	lsls	r5, r3, #30
 8004ed2:	d5fc      	bpl.n	8004ece <Lcd_Init+0x31e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004ed4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ed8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004edc:	890a      	ldrh	r2, [r1, #8]
 8004ede:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ee2:	0614      	lsls	r4, r2, #24
 8004ee4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ee8:	d4f8      	bmi.n	8004edc <Lcd_Init+0x32c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004ef2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004ef4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004ef8:	f044 0410 	orr.w	r4, r4, #16
 8004efc:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004efe:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004f00:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004f04:	f024 0410 	bic.w	r4, r4, #16
 8004f08:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004f0a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f0c:	2481      	movs	r4, #129	; 0x81
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f14:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f16:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f18:	8913      	ldrh	r3, [r2, #8]
 8004f1a:	0799      	lsls	r1, r3, #30
 8004f1c:	d5fc      	bpl.n	8004f18 <Lcd_Init+0x368>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004f1e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f22:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f26:	890a      	ldrh	r2, [r1, #8]
 8004f28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f2c:	0612      	lsls	r2, r2, #24
 8004f2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f32:	d4f8      	bmi.n	8004f26 <Lcd_Init+0x376>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004f3c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004f3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004f42:	f044 0410 	orr.w	r4, r4, #16
 8004f46:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004f48:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8004f4a:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8004f4e:	f024 0410 	bic.w	r4, r4, #16
 8004f52:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8004f54:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f56:	24e8      	movs	r4, #232	; 0xe8
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8004f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f5c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f5e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004f60:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004f62:	8913      	ldrh	r3, [r2, #8]
 8004f64:	079d      	lsls	r5, r3, #30
 8004f66:	d5fc      	bpl.n	8004f62 <Lcd_Init+0x3b2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004f68:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f6c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004f70:	890a      	ldrh	r2, [r1, #8]
 8004f72:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f76:	0614      	lsls	r4, r2, #24
 8004f78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f7c:	d4f8      	bmi.n	8004f70 <Lcd_Init+0x3c0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f82:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004f86:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004f88:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8004f8c:	f044 0410 	orr.w	r4, r4, #16
 8004f90:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004f92:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004f94:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004f98:	f024 0410 	bic.w	r4, r4, #16
 8004f9c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004f9e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004fa0:	2485      	movs	r4, #133	; 0x85
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004fa8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004faa:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004fac:	8913      	ldrh	r3, [r2, #8]
 8004fae:	0799      	lsls	r1, r3, #30
 8004fb0:	d5fc      	bpl.n	8004fac <Lcd_Init+0x3fc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004fb2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004fb6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004fba:	890a      	ldrh	r2, [r1, #8]
 8004fbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004fc0:	0612      	lsls	r2, r2, #24
 8004fc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004fc6:	d4f8      	bmi.n	8004fba <Lcd_Init+0x40a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fcc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004fd0:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004fd2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8004fd6:	f044 0410 	orr.w	r4, r4, #16
 8004fda:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004fdc:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8004fde:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8004fe2:	f024 0410 	bic.w	r4, r4, #16
 8004fe6:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8004fe8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004fea:	2410      	movs	r4, #16
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8004fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ff2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8004ff4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8004ff6:	8913      	ldrh	r3, [r2, #8]
 8004ff8:	079d      	lsls	r5, r3, #30
 8004ffa:	d5fc      	bpl.n	8004ff6 <Lcd_Init+0x446>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8004ffc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005000:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005004:	890a      	ldrh	r2, [r1, #8]
 8005006:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800500a:	0614      	lsls	r4, r2, #24
 800500c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005010:	d4f8      	bmi.n	8005004 <Lcd_Init+0x454>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005016:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800501a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800501c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005020:	f044 0410 	orr.w	r4, r4, #16
 8005024:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005026:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005028:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800502c:	f024 0410 	bic.w	r4, r4, #16
 8005030:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005032:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005034:	247a      	movs	r4, #122	; 0x7a
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800503c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800503e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005040:	8913      	ldrh	r3, [r2, #8]
 8005042:	0799      	lsls	r1, r3, #30
 8005044:	d5fc      	bpl.n	8005040 <Lcd_Init+0x490>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005046:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800504a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800504e:	890a      	ldrh	r2, [r1, #8]
 8005050:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005054:	0612      	lsls	r2, r2, #24
 8005056:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800505a:	d4f8      	bmi.n	800504e <Lcd_Init+0x49e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800505c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005060:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005064:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005066:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800506a:	f044 0410 	orr.w	r4, r4, #16
 800506e:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005070:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005072:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005076:	f024 0410 	bic.w	r4, r4, #16
 800507a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800507c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800507e:	24cb      	movs	r4, #203	; 0xcb
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005084:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005086:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005088:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800508a:	8913      	ldrh	r3, [r2, #8]
 800508c:	079d      	lsls	r5, r3, #30
 800508e:	d5fc      	bpl.n	800508a <Lcd_Init+0x4da>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005090:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005094:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005098:	890a      	ldrh	r2, [r1, #8]
 800509a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800509e:	0614      	lsls	r4, r2, #24
 80050a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050a4:	d4f8      	bmi.n	8005098 <Lcd_Init+0x4e8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80050a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050aa:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80050ae:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80050b0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80050b4:	f044 0410 	orr.w	r4, r4, #16
 80050b8:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80050ba:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80050bc:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80050c0:	f024 0410 	bic.w	r4, r4, #16
 80050c4:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80050c6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050c8:	2439      	movs	r4, #57	; 0x39
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80050d0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80050d2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80050d4:	8913      	ldrh	r3, [r2, #8]
 80050d6:	0799      	lsls	r1, r3, #30
 80050d8:	d5fc      	bpl.n	80050d4 <Lcd_Init+0x524>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80050da:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050de:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80050e2:	890a      	ldrh	r2, [r1, #8]
 80050e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050e8:	0612      	lsls	r2, r2, #24
 80050ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050ee:	d4f8      	bmi.n	80050e2 <Lcd_Init+0x532>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80050f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80050f8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80050fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80050fe:	f044 0410 	orr.w	r4, r4, #16
 8005102:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005104:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005106:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800510a:	f024 0410 	bic.w	r4, r4, #16
 800510e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005110:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005112:	242c      	movs	r4, #44	; 0x2c
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005118:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800511a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800511c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800511e:	8913      	ldrh	r3, [r2, #8]
 8005120:	079b      	lsls	r3, r3, #30
 8005122:	d5fc      	bpl.n	800511e <Lcd_Init+0x56e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005124:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005128:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800512c:	890a      	ldrh	r2, [r1, #8]
 800512e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005132:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005136:	b292      	uxth	r2, r2
 8005138:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800513c:	2a00      	cmp	r2, #0
 800513e:	d1f5      	bne.n	800512c <Lcd_Init+0x57c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005144:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005148:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800514a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800514e:	f045 0510 	orr.w	r5, r5, #16
 8005152:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005154:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005156:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800515a:	f025 0510 	bic.w	r5, r5, #16
 800515e:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005160:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005162:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005164:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005168:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800516a:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800516c:	890b      	ldrh	r3, [r1, #8]
 800516e:	079d      	lsls	r5, r3, #30
 8005170:	d5fc      	bpl.n	800516c <Lcd_Init+0x5bc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005172:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005176:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800517a:	890a      	ldrh	r2, [r1, #8]
 800517c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005180:	0614      	lsls	r4, r2, #24
 8005182:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005186:	d4f8      	bmi.n	800517a <Lcd_Init+0x5ca>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005190:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005192:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005196:	f044 0410 	orr.w	r4, r4, #16
 800519a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800519c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800519e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80051a2:	f024 0410 	bic.w	r4, r4, #16
 80051a6:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80051a8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051aa:	2434      	movs	r4, #52	; 0x34
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80051b2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051b4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80051b6:	8913      	ldrh	r3, [r2, #8]
 80051b8:	0799      	lsls	r1, r3, #30
 80051ba:	d5fc      	bpl.n	80051b6 <Lcd_Init+0x606>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80051bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80051c0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80051c4:	890a      	ldrh	r2, [r1, #8]
 80051c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80051ca:	0612      	lsls	r2, r2, #24
 80051cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80051d0:	d4f8      	bmi.n	80051c4 <Lcd_Init+0x614>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80051d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80051da:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80051dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80051e0:	f044 0410 	orr.w	r4, r4, #16
 80051e4:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80051e6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80051e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80051ec:	f024 0410 	bic.w	r4, r4, #16
 80051f0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80051f2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051f4:	2402      	movs	r4, #2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80051fc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80051fe:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005200:	8913      	ldrh	r3, [r2, #8]
 8005202:	079d      	lsls	r5, r3, #30
 8005204:	d5fc      	bpl.n	8005200 <Lcd_Init+0x650>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005206:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800520a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800520e:	890a      	ldrh	r2, [r1, #8]
 8005210:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005214:	0614      	lsls	r4, r2, #24
 8005216:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800521a:	d4f8      	bmi.n	800520e <Lcd_Init+0x65e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800521c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005220:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005224:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005226:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800522a:	f044 0410 	orr.w	r4, r4, #16
 800522e:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005230:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005232:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005236:	f024 0410 	bic.w	r4, r4, #16
 800523a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800523c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800523e:	24f7      	movs	r4, #247	; 0xf7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005244:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005246:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005248:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800524a:	8913      	ldrh	r3, [r2, #8]
 800524c:	0799      	lsls	r1, r3, #30
 800524e:	d5fc      	bpl.n	800524a <Lcd_Init+0x69a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005250:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005254:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005258:	890a      	ldrh	r2, [r1, #8]
 800525a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800525e:	0612      	lsls	r2, r2, #24
 8005260:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005264:	d4f8      	bmi.n	8005258 <Lcd_Init+0x6a8>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800526e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005270:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005274:	f044 0410 	orr.w	r4, r4, #16
 8005278:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800527a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800527c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005280:	f024 0410 	bic.w	r4, r4, #16
 8005284:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005286:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005288:	2420      	movs	r4, #32
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800528a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005290:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005292:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005294:	8913      	ldrh	r3, [r2, #8]
 8005296:	079d      	lsls	r5, r3, #30
 8005298:	d5fc      	bpl.n	8005294 <Lcd_Init+0x6e4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800529a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800529e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80052a2:	890a      	ldrh	r2, [r1, #8]
 80052a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052a8:	0614      	lsls	r4, r2, #24
 80052aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052ae:	d4f8      	bmi.n	80052a2 <Lcd_Init+0x6f2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80052b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80052b8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80052ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80052be:	f044 0410 	orr.w	r4, r4, #16
 80052c2:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80052c4:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80052c6:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80052ca:	f024 0410 	bic.w	r4, r4, #16
 80052ce:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80052d0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80052d2:	24ea      	movs	r4, #234	; 0xea
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80052d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052d8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80052da:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80052dc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80052de:	8913      	ldrh	r3, [r2, #8]
 80052e0:	0799      	lsls	r1, r3, #30
 80052e2:	d5fc      	bpl.n	80052de <Lcd_Init+0x72e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80052e4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80052e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80052ec:	890a      	ldrh	r2, [r1, #8]
 80052ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80052f6:	b292      	uxth	r2, r2
 80052f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80052fc:	2a00      	cmp	r2, #0
 80052fe:	d1f5      	bne.n	80052ec <Lcd_Init+0x73c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005304:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005308:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800530a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800530e:	f045 0510 	orr.w	r5, r5, #16
 8005312:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005314:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005316:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800531a:	f025 0510 	bic.w	r5, r5, #16
 800531e:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005320:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005322:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005324:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005328:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800532a:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800532c:	890b      	ldrh	r3, [r1, #8]
 800532e:	079b      	lsls	r3, r3, #30
 8005330:	d5fc      	bpl.n	800532c <Lcd_Init+0x77c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005332:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005336:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800533a:	890a      	ldrh	r2, [r1, #8]
 800533c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005340:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005344:	b292      	uxth	r2, r2
 8005346:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1f5      	bne.n	800533a <Lcd_Init+0x78a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800534e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005352:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005356:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005358:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800535c:	f045 0510 	orr.w	r5, r5, #16
 8005360:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005362:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005364:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005368:	f025 0510 	bic.w	r5, r5, #16
 800536c:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800536e:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005370:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005372:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005376:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005378:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800537a:	890b      	ldrh	r3, [r1, #8]
 800537c:	079d      	lsls	r5, r3, #30
 800537e:	d5fc      	bpl.n	800537a <Lcd_Init+0x7ca>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005380:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005384:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005388:	890a      	ldrh	r2, [r1, #8]
 800538a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800538e:	0614      	lsls	r4, r2, #24
 8005390:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005394:	d4f8      	bmi.n	8005388 <Lcd_Init+0x7d8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800539e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80053a0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80053a4:	f044 0410 	orr.w	r4, r4, #16
 80053a8:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80053aa:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80053ac:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80053b0:	f024 0410 	bic.w	r4, r4, #16
 80053b4:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80053b6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80053b8:	24c0      	movs	r4, #192	; 0xc0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80053ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053be:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80053c0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80053c2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80053c4:	8913      	ldrh	r3, [r2, #8]
 80053c6:	0799      	lsls	r1, r3, #30
 80053c8:	d5fc      	bpl.n	80053c4 <Lcd_Init+0x814>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80053ca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80053ce:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80053d2:	890a      	ldrh	r2, [r1, #8]
 80053d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80053d8:	0612      	lsls	r2, r2, #24
 80053da:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80053de:	d4f8      	bmi.n	80053d2 <Lcd_Init+0x822>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80053e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80053e8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80053ea:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80053ee:	f044 0410 	orr.w	r4, r4, #16
 80053f2:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80053f4:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80053f6:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80053fa:	f024 0410 	bic.w	r4, r4, #16
 80053fe:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005400:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005402:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800540a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800540c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800540e:	8913      	ldrh	r3, [r2, #8]
 8005410:	079d      	lsls	r5, r3, #30
 8005412:	d5fc      	bpl.n	800540e <Lcd_Init+0x85e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005414:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005418:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800541c:	890a      	ldrh	r2, [r1, #8]
 800541e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005422:	0614      	lsls	r4, r2, #24
 8005424:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005428:	d4f8      	bmi.n	800541c <Lcd_Init+0x86c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800542a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800542e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005432:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005434:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005438:	f044 0410 	orr.w	r4, r4, #16
 800543c:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800543e:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005440:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005444:	f024 0410 	bic.w	r4, r4, #16
 8005448:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800544a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800544c:	24c1      	movs	r4, #193	; 0xc1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800544e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005452:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005454:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005456:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005458:	8913      	ldrh	r3, [r2, #8]
 800545a:	0799      	lsls	r1, r3, #30
 800545c:	d5fc      	bpl.n	8005458 <Lcd_Init+0x8a8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800545e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005462:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005466:	890a      	ldrh	r2, [r1, #8]
 8005468:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800546c:	0612      	lsls	r2, r2, #24
 800546e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005472:	d4f8      	bmi.n	8005466 <Lcd_Init+0x8b6>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005478:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800547c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800547e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005482:	f044 0410 	orr.w	r4, r4, #16
 8005486:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005488:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800548a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800548e:	f024 0410 	bic.w	r4, r4, #16
 8005492:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005494:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005496:	2412      	movs	r4, #18
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800549e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80054a0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80054a2:	8913      	ldrh	r3, [r2, #8]
 80054a4:	079d      	lsls	r5, r3, #30
 80054a6:	d5fc      	bpl.n	80054a2 <Lcd_Init+0x8f2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80054a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80054ac:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80054b0:	890a      	ldrh	r2, [r1, #8]
 80054b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054b6:	0614      	lsls	r4, r2, #24
 80054b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054bc:	d4f8      	bmi.n	80054b0 <Lcd_Init+0x900>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80054be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80054c6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80054c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80054cc:	f044 0410 	orr.w	r4, r4, #16
 80054d0:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80054d2:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80054d4:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80054d8:	f024 0410 	bic.w	r4, r4, #16
 80054dc:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80054de:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80054e0:	24c5      	movs	r4, #197	; 0xc5
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80054e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054e6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80054e8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80054ea:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80054ec:	8913      	ldrh	r3, [r2, #8]
 80054ee:	0799      	lsls	r1, r3, #30
 80054f0:	d5fc      	bpl.n	80054ec <Lcd_Init+0x93c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80054f2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80054f6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80054fa:	890a      	ldrh	r2, [r1, #8]
 80054fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005500:	0612      	lsls	r2, r2, #24
 8005502:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005506:	d4f8      	bmi.n	80054fa <Lcd_Init+0x94a>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005510:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005512:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005516:	f044 0410 	orr.w	r4, r4, #16
 800551a:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800551c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800551e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005522:	f024 0410 	bic.w	r4, r4, #16
 8005526:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005528:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800552a:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800552c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005530:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005532:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005534:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005536:	8913      	ldrh	r3, [r2, #8]
 8005538:	079d      	lsls	r5, r3, #30
 800553a:	d5fc      	bpl.n	8005536 <Lcd_Init+0x986>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800553c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005540:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005544:	890a      	ldrh	r2, [r1, #8]
 8005546:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800554a:	0614      	lsls	r4, r2, #24
 800554c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005550:	d4f8      	bmi.n	8005544 <Lcd_Init+0x994>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005556:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800555a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800555c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005560:	f044 0410 	orr.w	r4, r4, #16
 8005564:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005566:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005568:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800556c:	f024 0410 	bic.w	r4, r4, #16
 8005570:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005572:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005574:	2426      	movs	r4, #38	; 0x26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800557c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800557e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005580:	8913      	ldrh	r3, [r2, #8]
 8005582:	0799      	lsls	r1, r3, #30
 8005584:	d5fc      	bpl.n	8005580 <Lcd_Init+0x9d0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005586:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800558a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800558e:	890a      	ldrh	r2, [r1, #8]
 8005590:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005594:	0612      	lsls	r2, r2, #24
 8005596:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800559a:	d4f8      	bmi.n	800558e <Lcd_Init+0x9de>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800559c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80055a4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80055a6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80055aa:	f044 0410 	orr.w	r4, r4, #16
 80055ae:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80055b0:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80055b2:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80055b6:	f024 0410 	bic.w	r4, r4, #16
 80055ba:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80055bc:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055be:	24c7      	movs	r4, #199	; 0xc7
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80055c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055c4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055c6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80055c8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80055ca:	8913      	ldrh	r3, [r2, #8]
 80055cc:	079d      	lsls	r5, r3, #30
 80055ce:	d5fc      	bpl.n	80055ca <Lcd_Init+0xa1a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80055d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80055d4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80055d8:	890a      	ldrh	r2, [r1, #8]
 80055da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80055de:	0614      	lsls	r4, r2, #24
 80055e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055e4:	d4f8      	bmi.n	80055d8 <Lcd_Init+0xa28>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80055e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ea:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80055ee:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80055f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80055f4:	f044 0410 	orr.w	r4, r4, #16
 80055f8:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80055fa:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80055fc:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005600:	f024 0410 	bic.w	r4, r4, #16
 8005604:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005606:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005608:	24b7      	movs	r4, #183	; 0xb7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005610:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005612:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005614:	8913      	ldrh	r3, [r2, #8]
 8005616:	0799      	lsls	r1, r3, #30
 8005618:	d5fc      	bpl.n	8005614 <Lcd_Init+0xa64>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800561a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800561e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005622:	890a      	ldrh	r2, [r1, #8]
 8005624:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005628:	0612      	lsls	r2, r2, #24
 800562a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800562e:	d4f8      	bmi.n	8005622 <Lcd_Init+0xa72>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005634:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005638:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800563a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800563e:	f044 0410 	orr.w	r4, r4, #16
 8005642:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005644:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005646:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800564a:	f024 0410 	bic.w	r4, r4, #16
 800564e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005650:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005652:	24b8      	movs	r4, #184	; 0xb8
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005654:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005658:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800565a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800565c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800565e:	8913      	ldrh	r3, [r2, #8]
 8005660:	079d      	lsls	r5, r3, #30
 8005662:	d5fc      	bpl.n	800565e <Lcd_Init+0xaae>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005664:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005668:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800566c:	890a      	ldrh	r2, [r1, #8]
 800566e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005672:	0614      	lsls	r4, r2, #24
 8005674:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005678:	d4f8      	bmi.n	800566c <Lcd_Init+0xabc>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800567a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005682:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005684:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005688:	f044 0410 	orr.w	r4, r4, #16
 800568c:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800568e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005690:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005694:	f024 0410 	bic.w	r4, r4, #16
 8005698:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800569a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800569c:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056a4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80056a6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056a8:	8913      	ldrh	r3, [r2, #8]
 80056aa:	0799      	lsls	r1, r3, #30
 80056ac:	d5fc      	bpl.n	80056a8 <Lcd_Init+0xaf8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80056ae:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056b2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80056b6:	890a      	ldrh	r2, [r1, #8]
 80056b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80056bc:	0612      	lsls	r2, r2, #24
 80056be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80056c2:	d4f8      	bmi.n	80056b6 <Lcd_Init+0xb06>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80056c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80056cc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80056ce:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80056d2:	f044 0410 	orr.w	r4, r4, #16
 80056d6:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80056d8:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80056da:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80056de:	f024 0410 	bic.w	r4, r4, #16
 80056e2:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80056e4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80056e6:	24ba      	movs	r4, #186	; 0xba
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80056e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056ec:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056ee:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80056f0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80056f2:	8913      	ldrh	r3, [r2, #8]
 80056f4:	079d      	lsls	r5, r3, #30
 80056f6:	d5fc      	bpl.n	80056f2 <Lcd_Init+0xb42>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80056f8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056fc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005700:	890a      	ldrh	r2, [r1, #8]
 8005702:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005706:	0614      	lsls	r4, r2, #24
 8005708:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800570c:	d4f8      	bmi.n	8005700 <Lcd_Init+0xb50>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800570e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005712:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005716:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005718:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800571c:	f044 0410 	orr.w	r4, r4, #16
 8005720:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005722:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005724:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005728:	f024 0410 	bic.w	r4, r4, #16
 800572c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800572e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005730:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005738:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800573a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800573c:	8913      	ldrh	r3, [r2, #8]
 800573e:	0799      	lsls	r1, r3, #30
 8005740:	d5fc      	bpl.n	800573c <Lcd_Init+0xb8c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005742:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005746:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800574a:	890a      	ldrh	r2, [r1, #8]
 800574c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005750:	0612      	lsls	r2, r2, #24
 8005752:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005756:	d4f8      	bmi.n	800574a <Lcd_Init+0xb9a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005760:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005762:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005766:	f044 0410 	orr.w	r4, r4, #16
 800576a:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800576c:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800576e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005772:	f024 0410 	bic.w	r4, r4, #16
 8005776:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005778:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800577a:	24bb      	movs	r4, #187	; 0xbb
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800577c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005780:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005782:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005784:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005786:	8913      	ldrh	r3, [r2, #8]
 8005788:	079d      	lsls	r5, r3, #30
 800578a:	d5fc      	bpl.n	8005786 <Lcd_Init+0xbd6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800578c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005790:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005794:	890a      	ldrh	r2, [r1, #8]
 8005796:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800579a:	0614      	lsls	r4, r2, #24
 800579c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80057a0:	d4f8      	bmi.n	8005794 <Lcd_Init+0xbe4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80057a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057a6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80057aa:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80057ac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80057b0:	f044 0410 	orr.w	r4, r4, #16
 80057b4:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80057b6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80057b8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80057bc:	f024 0410 	bic.w	r4, r4, #16
 80057c0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80057c2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057c4:	24ff      	movs	r4, #255	; 0xff
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057cc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80057ce:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80057d0:	8913      	ldrh	r3, [r2, #8]
 80057d2:	0799      	lsls	r1, r3, #30
 80057d4:	d5fc      	bpl.n	80057d0 <Lcd_Init+0xc20>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80057d6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80057da:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80057de:	890a      	ldrh	r2, [r1, #8]
 80057e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80057e4:	0612      	lsls	r2, r2, #24
 80057e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80057ea:	d4f8      	bmi.n	80057de <Lcd_Init+0xc2e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80057ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80057f4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80057f6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80057fa:	f044 0410 	orr.w	r4, r4, #16
 80057fe:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005800:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005802:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005806:	f024 0410 	bic.w	r4, r4, #16
 800580a:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 800580c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800580e:	24be      	movs	r4, #190	; 0xbe
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005814:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005816:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005818:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800581a:	8913      	ldrh	r3, [r2, #8]
 800581c:	079d      	lsls	r5, r3, #30
 800581e:	d5fc      	bpl.n	800581a <Lcd_Init+0xc6a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005820:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005824:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005828:	890a      	ldrh	r2, [r1, #8]
 800582a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800582e:	0614      	lsls	r4, r2, #24
 8005830:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005834:	d4f8      	bmi.n	8005828 <Lcd_Init+0xc78>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800583a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800583e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005840:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005844:	f044 0410 	orr.w	r4, r4, #16
 8005848:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800584a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800584c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005850:	f024 0410 	bic.w	r4, r4, #16
 8005854:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005856:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005858:	24ff      	movs	r4, #255	; 0xff
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800585a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800585e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005860:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005862:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005864:	8913      	ldrh	r3, [r2, #8]
 8005866:	0799      	lsls	r1, r3, #30
 8005868:	d5fc      	bpl.n	8005864 <Lcd_Init+0xcb4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800586a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800586e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005872:	890a      	ldrh	r2, [r1, #8]
 8005874:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005878:	0612      	lsls	r2, r2, #24
 800587a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800587e:	d4f8      	bmi.n	8005872 <Lcd_Init+0xcc2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005884:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005888:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800588a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800588e:	f044 0410 	orr.w	r4, r4, #16
 8005892:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005894:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005896:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800589a:	f024 0410 	bic.w	r4, r4, #16
 800589e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80058a0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058a2:	2436      	movs	r4, #54	; 0x36
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80058a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058a8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058aa:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058ac:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058ae:	8913      	ldrh	r3, [r2, #8]
 80058b0:	079d      	lsls	r5, r3, #30
 80058b2:	d5fc      	bpl.n	80058ae <Lcd_Init+0xcfe>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80058b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80058b8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80058bc:	890a      	ldrh	r2, [r1, #8]
 80058be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058c2:	0614      	lsls	r4, r2, #24
 80058c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80058c8:	d4f8      	bmi.n	80058bc <Lcd_Init+0xd0c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80058ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058ce:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80058d2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80058d4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80058d8:	f044 0410 	orr.w	r4, r4, #16
 80058dc:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80058de:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80058e0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80058e4:	f024 0410 	bic.w	r4, r4, #16
 80058e8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80058ea:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058ec:	2408      	movs	r4, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80058ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058f4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80058f6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80058f8:	8913      	ldrh	r3, [r2, #8]
 80058fa:	0799      	lsls	r1, r3, #30
 80058fc:	d5fc      	bpl.n	80058f8 <Lcd_Init+0xd48>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80058fe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005902:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005906:	890a      	ldrh	r2, [r1, #8]
 8005908:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800590c:	0612      	lsls	r2, r2, #24
 800590e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005912:	d4f8      	bmi.n	8005906 <Lcd_Init+0xd56>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005918:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800591c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800591e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005922:	f044 0410 	orr.w	r4, r4, #16
 8005926:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005928:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800592a:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800592e:	f024 0410 	bic.w	r4, r4, #16
 8005932:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005934:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005936:	243a      	movs	r4, #58	; 0x3a
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005938:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800593c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800593e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005940:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005942:	8913      	ldrh	r3, [r2, #8]
 8005944:	079d      	lsls	r5, r3, #30
 8005946:	d5fc      	bpl.n	8005942 <Lcd_Init+0xd92>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005948:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800594c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005950:	890a      	ldrh	r2, [r1, #8]
 8005952:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005956:	0614      	lsls	r4, r2, #24
 8005958:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800595c:	d4f8      	bmi.n	8005950 <Lcd_Init+0xda0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800595e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005962:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005966:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005968:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800596c:	f044 0410 	orr.w	r4, r4, #16
 8005970:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005972:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005974:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005978:	f024 0410 	bic.w	r4, r4, #16
 800597c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800597e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005980:	2455      	movs	r4, #85	; 0x55
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005986:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005988:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800598a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800598c:	8913      	ldrh	r3, [r2, #8]
 800598e:	0799      	lsls	r1, r3, #30
 8005990:	d5fc      	bpl.n	800598c <Lcd_Init+0xddc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005992:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005996:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800599a:	890a      	ldrh	r2, [r1, #8]
 800599c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80059a0:	0612      	lsls	r2, r2, #24
 80059a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80059a6:	d4f8      	bmi.n	800599a <Lcd_Init+0xdea>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80059a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059ac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80059b0:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80059b2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80059b6:	f044 0410 	orr.w	r4, r4, #16
 80059ba:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80059bc:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80059be:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80059c2:	f024 0410 	bic.w	r4, r4, #16
 80059c6:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80059c8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80059ca:	24b1      	movs	r4, #177	; 0xb1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80059cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059d0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80059d2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80059d4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80059d6:	8913      	ldrh	r3, [r2, #8]
 80059d8:	079d      	lsls	r5, r3, #30
 80059da:	d5fc      	bpl.n	80059d6 <Lcd_Init+0xe26>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80059dc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80059e0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80059e4:	890a      	ldrh	r2, [r1, #8]
 80059e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80059ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80059ee:	b292      	uxth	r2, r2
 80059f0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	d1f5      	bne.n	80059e4 <Lcd_Init+0xe34>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80059f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059fc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a00:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a02:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005a06:	f045 0510 	orr.w	r5, r5, #16
 8005a0a:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a0c:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005a0e:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a12:	f025 0510 	bic.w	r5, r5, #16
 8005a16:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005a18:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a1a:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a1c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005a20:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a22:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a24:	890b      	ldrh	r3, [r1, #8]
 8005a26:	079c      	lsls	r4, r3, #30
 8005a28:	d5fc      	bpl.n	8005a24 <Lcd_Init+0xe74>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005a2a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a2e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a32:	890a      	ldrh	r2, [r1, #8]
 8005a34:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a38:	0612      	lsls	r2, r2, #24
 8005a3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a3e:	d4f8      	bmi.n	8005a32 <Lcd_Init+0xe82>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a44:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005a48:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a4a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a4e:	f044 0410 	orr.w	r4, r4, #16
 8005a52:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a54:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005a56:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005a5a:	f024 0410 	bic.w	r4, r4, #16
 8005a5e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005a60:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a62:	241a      	movs	r4, #26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a68:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a6a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005a6c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005a6e:	8913      	ldrh	r3, [r2, #8]
 8005a70:	079d      	lsls	r5, r3, #30
 8005a72:	d5fc      	bpl.n	8005a6e <Lcd_Init+0xebe>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005a74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a78:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005a7c:	890a      	ldrh	r2, [r1, #8]
 8005a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a82:	0614      	lsls	r4, r2, #24
 8005a84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a88:	d4f8      	bmi.n	8005a7c <Lcd_Init+0xecc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a8e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005a92:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005a94:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005a98:	f044 0410 	orr.w	r4, r4, #16
 8005a9c:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005a9e:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005aa0:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005aa4:	f024 0410 	bic.w	r4, r4, #16
 8005aa8:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005aaa:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005aac:	24b6      	movs	r4, #182	; 0xb6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005aae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ab2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ab4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ab6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ab8:	8913      	ldrh	r3, [r2, #8]
 8005aba:	0799      	lsls	r1, r3, #30
 8005abc:	d5fc      	bpl.n	8005ab8 <Lcd_Init+0xf08>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005abe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ac2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005ac6:	890a      	ldrh	r2, [r1, #8]
 8005ac8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005acc:	0612      	lsls	r2, r2, #24
 8005ace:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ad2:	d4f8      	bmi.n	8005ac6 <Lcd_Init+0xf16>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ad8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005adc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ade:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005ae2:	f044 0410 	orr.w	r4, r4, #16
 8005ae6:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005ae8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005aea:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005aee:	f024 0410 	bic.w	r4, r4, #16
 8005af2:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005af4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005af6:	240a      	movs	r4, #10
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005afe:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b00:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b02:	8913      	ldrh	r3, [r2, #8]
 8005b04:	079d      	lsls	r5, r3, #30
 8005b06:	d5fc      	bpl.n	8005b02 <Lcd_Init+0xf52>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005b08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005b0c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005b10:	890a      	ldrh	r2, [r1, #8]
 8005b12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b16:	0614      	lsls	r4, r2, #24
 8005b18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b1c:	d4f8      	bmi.n	8005b10 <Lcd_Init+0xf60>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b26:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b28:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b2c:	f044 0410 	orr.w	r4, r4, #16
 8005b30:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b32:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005b34:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005b38:	f024 0410 	bic.w	r4, r4, #16
 8005b3c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005b3e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b40:	24a2      	movs	r4, #162	; 0xa2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b46:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b48:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b4a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b4c:	8913      	ldrh	r3, [r2, #8]
 8005b4e:	0799      	lsls	r1, r3, #30
 8005b50:	d5fc      	bpl.n	8005b4c <Lcd_Init+0xf9c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005b52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005b56:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005b5a:	890a      	ldrh	r2, [r1, #8]
 8005b5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b60:	0612      	lsls	r2, r2, #24
 8005b62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b66:	d4f8      	bmi.n	8005b5a <Lcd_Init+0xfaa>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b6c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b70:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005b72:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005b76:	f044 0410 	orr.w	r4, r4, #16
 8005b7a:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005b7c:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005b7e:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005b82:	f024 0410 	bic.w	r4, r4, #16
 8005b86:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005b88:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b8a:	24f2      	movs	r4, #242	; 0xf2
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b90:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b92:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005b94:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005b96:	8913      	ldrh	r3, [r2, #8]
 8005b98:	079d      	lsls	r5, r3, #30
 8005b9a:	d5fc      	bpl.n	8005b96 <Lcd_Init+0xfe6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005b9c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ba0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005ba4:	890a      	ldrh	r2, [r1, #8]
 8005ba6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005baa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	d1f5      	bne.n	8005ba4 <Lcd_Init+0xff4>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bbc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005bc0:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005bc2:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005bc6:	f045 0510 	orr.w	r5, r5, #16
 8005bca:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005bcc:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8005bce:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005bd2:	f025 0510 	bic.w	r5, r5, #16
 8005bd6:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8005bd8:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005bda:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005bdc:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8005be0:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005be2:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005be4:	890b      	ldrh	r3, [r1, #8]
 8005be6:	079c      	lsls	r4, r3, #30
 8005be8:	d5fc      	bpl.n	8005be4 <Lcd_Init+0x1034>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005bea:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005bee:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005bf2:	890a      	ldrh	r2, [r1, #8]
 8005bf4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005bf8:	0612      	lsls	r2, r2, #24
 8005bfa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005bfe:	d4f8      	bmi.n	8005bf2 <Lcd_Init+0x1042>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c04:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c08:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005c0a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005c0e:	f044 0410 	orr.w	r4, r4, #16
 8005c12:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005c14:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005c16:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005c1a:	f024 0410 	bic.w	r4, r4, #16
 8005c1e:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005c20:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c22:	2426      	movs	r4, #38	; 0x26
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c28:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c2a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c2c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c2e:	8913      	ldrh	r3, [r2, #8]
 8005c30:	079d      	lsls	r5, r3, #30
 8005c32:	d5fc      	bpl.n	8005c2e <Lcd_Init+0x107e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005c34:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005c38:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005c3c:	890a      	ldrh	r2, [r1, #8]
 8005c3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005c42:	0614      	lsls	r4, r2, #24
 8005c44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c48:	d4f8      	bmi.n	8005c3c <Lcd_Init+0x108c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c52:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005c54:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005c58:	f044 0410 	orr.w	r4, r4, #16
 8005c5c:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005c5e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005c60:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005c64:	f024 0410 	bic.w	r4, r4, #16
 8005c68:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005c6a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c6c:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c72:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c74:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005c76:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005c78:	8913      	ldrh	r3, [r2, #8]
 8005c7a:	0799      	lsls	r1, r3, #30
 8005c7c:	d5fc      	bpl.n	8005c78 <Lcd_Init+0x10c8>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005c7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005c82:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005c86:	890a      	ldrh	r2, [r1, #8]
 8005c88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005c8c:	0612      	lsls	r2, r2, #24
 8005c8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c92:	d4f8      	bmi.n	8005c86 <Lcd_Init+0x10d6>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c98:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c9c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005c9e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ca2:	f044 0410 	orr.w	r4, r4, #16
 8005ca6:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005ca8:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8005caa:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8005cae:	f024 0410 	bic.w	r4, r4, #16
 8005cb2:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8005cb4:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005cb6:	24e0      	movs	r4, #224	; 0xe0
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8005cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cbc:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005cbe:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005cc0:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005cc2:	8913      	ldrh	r3, [r2, #8]
 8005cc4:	079d      	lsls	r5, r3, #30
 8005cc6:	d5fc      	bpl.n	8005cc2 <Lcd_Init+0x1112>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005cc8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ccc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005cd0:	890a      	ldrh	r2, [r1, #8]
 8005cd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005cd6:	0614      	lsls	r4, r2, #24
 8005cd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005cdc:	d4f8      	bmi.n	8005cd0 <Lcd_Init+0x1120>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005ce6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ce8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8005cec:	f044 0410 	orr.w	r4, r4, #16
 8005cf0:	60d4      	str	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005cf2:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005cf4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005cf8:	f024 0410 	bic.w	r4, r4, #16
 8005cfc:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005cfe:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d00:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d06:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d08:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d0a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d0c:	8913      	ldrh	r3, [r2, #8]
 8005d0e:	0799      	lsls	r1, r3, #30
 8005d10:	d5fc      	bpl.n	8005d0c <Lcd_Init+0x115c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005d12:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005d16:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005d1a:	890a      	ldrh	r2, [r1, #8]
 8005d1c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d20:	0612      	lsls	r2, r2, #24
 8005d22:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d26:	d4f8      	bmi.n	8005d1a <Lcd_Init+0x116a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005d30:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d32:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d36:	f044 0410 	orr.w	r4, r4, #16
 8005d3a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d3c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005d3e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d42:	f024 0410 	bic.w	r4, r4, #16
 8005d46:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005d48:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d4a:	241d      	movs	r4, #29
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d50:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d52:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d54:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d56:	8913      	ldrh	r3, [r2, #8]
 8005d58:	079d      	lsls	r5, r3, #30
 8005d5a:	d5fc      	bpl.n	8005d56 <Lcd_Init+0x11a6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005d5c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005d60:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005d64:	890a      	ldrh	r2, [r1, #8]
 8005d66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d6a:	0614      	lsls	r4, r2, #24
 8005d6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005d70:	d4f8      	bmi.n	8005d64 <Lcd_Init+0x11b4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d76:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005d7a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d7c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005d80:	f044 0410 	orr.w	r4, r4, #16
 8005d84:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d86:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005d88:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005d8c:	f024 0410 	bic.w	r4, r4, #16
 8005d90:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005d92:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d94:	241a      	movs	r4, #26
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d9a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005d9c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005d9e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005da0:	8913      	ldrh	r3, [r2, #8]
 8005da2:	0799      	lsls	r1, r3, #30
 8005da4:	d5fc      	bpl.n	8005da0 <Lcd_Init+0x11f0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005da6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005daa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005dae:	890a      	ldrh	r2, [r1, #8]
 8005db0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005db4:	0612      	lsls	r2, r2, #24
 8005db6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005dba:	d4f8      	bmi.n	8005dae <Lcd_Init+0x11fe>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005dc4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005dc6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005dca:	f044 0410 	orr.w	r4, r4, #16
 8005dce:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005dd0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005dd2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005dd6:	f024 0410 	bic.w	r4, r4, #16
 8005dda:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005ddc:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005dde:	240a      	movs	r4, #10
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005de6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005de8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005dea:	8913      	ldrh	r3, [r2, #8]
 8005dec:	079d      	lsls	r5, r3, #30
 8005dee:	d5fc      	bpl.n	8005dea <Lcd_Init+0x123a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005df0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005df4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005df8:	890a      	ldrh	r2, [r1, #8]
 8005dfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005dfe:	0614      	lsls	r4, r2, #24
 8005e00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e04:	d4f8      	bmi.n	8005df8 <Lcd_Init+0x1248>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005e0e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e10:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e14:	f044 0410 	orr.w	r4, r4, #16
 8005e18:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e1a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005e1c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e20:	f024 0410 	bic.w	r4, r4, #16
 8005e24:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005e26:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e28:	240d      	movs	r4, #13
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e30:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e32:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e34:	8913      	ldrh	r3, [r2, #8]
 8005e36:	0799      	lsls	r1, r3, #30
 8005e38:	d5fc      	bpl.n	8005e34 <Lcd_Init+0x1284>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005e3a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005e3e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005e42:	890a      	ldrh	r2, [r1, #8]
 8005e44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005e48:	0612      	lsls	r2, r2, #24
 8005e4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e4e:	d4f8      	bmi.n	8005e42 <Lcd_Init+0x1292>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e54:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005e58:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e5a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e5e:	f044 0410 	orr.w	r4, r4, #16
 8005e62:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e64:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005e66:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005e6a:	f024 0410 	bic.w	r4, r4, #16
 8005e6e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005e70:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e72:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e78:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e7a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005e7c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005e7e:	8913      	ldrh	r3, [r2, #8]
 8005e80:	079d      	lsls	r5, r3, #30
 8005e82:	d5fc      	bpl.n	8005e7e <Lcd_Init+0x12ce>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005e84:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005e88:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005e8c:	890a      	ldrh	r2, [r1, #8]
 8005e8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005e92:	0614      	lsls	r4, r2, #24
 8005e94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e98:	d4f8      	bmi.n	8005e8c <Lcd_Init+0x12dc>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e9e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005ea2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ea4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ea8:	f044 0410 	orr.w	r4, r4, #16
 8005eac:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005eae:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005eb0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005eb4:	f024 0410 	bic.w	r4, r4, #16
 8005eb8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005eba:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ebc:	2449      	movs	r4, #73	; 0x49
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ec4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005ec6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ec8:	8913      	ldrh	r3, [r2, #8]
 8005eca:	0799      	lsls	r1, r3, #30
 8005ecc:	d5fc      	bpl.n	8005ec8 <Lcd_Init+0x1318>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005ece:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ed2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005ed6:	890a      	ldrh	r2, [r1, #8]
 8005ed8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005edc:	0612      	lsls	r2, r2, #24
 8005ede:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ee2:	d4f8      	bmi.n	8005ed6 <Lcd_Init+0x1326>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005eec:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005eee:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005ef2:	f044 0410 	orr.w	r4, r4, #16
 8005ef6:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005ef8:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005efa:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005efe:	f024 0410 	bic.w	r4, r4, #16
 8005f02:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005f04:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f06:	2466      	movs	r4, #102	; 0x66
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f0e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f10:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f12:	8913      	ldrh	r3, [r2, #8]
 8005f14:	079d      	lsls	r5, r3, #30
 8005f16:	d5fc      	bpl.n	8005f12 <Lcd_Init+0x1362>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005f18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005f1c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005f20:	890a      	ldrh	r2, [r1, #8]
 8005f22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f26:	0614      	lsls	r4, r2, #24
 8005f28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f2c:	d4f8      	bmi.n	8005f20 <Lcd_Init+0x1370>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f32:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005f36:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f38:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f3c:	f044 0410 	orr.w	r4, r4, #16
 8005f40:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f42:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005f44:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f48:	f024 0410 	bic.w	r4, r4, #16
 8005f4c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005f4e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f50:	243b      	movs	r4, #59	; 0x3b
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f58:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f5a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005f5c:	8913      	ldrh	r3, [r2, #8]
 8005f5e:	0799      	lsls	r1, r3, #30
 8005f60:	d5fc      	bpl.n	8005f5c <Lcd_Init+0x13ac>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005f62:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005f66:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005f6a:	890a      	ldrh	r2, [r1, #8]
 8005f6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005f70:	0612      	lsls	r2, r2, #24
 8005f72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005f76:	d4f8      	bmi.n	8005f6a <Lcd_Init+0x13ba>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f7c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005f80:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f82:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005f86:	f044 0410 	orr.w	r4, r4, #16
 8005f8a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f8c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005f8e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005f92:	f024 0410 	bic.w	r4, r4, #16
 8005f96:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005f98:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005f9a:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005fa2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005fa4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005fa6:	8913      	ldrh	r3, [r2, #8]
 8005fa8:	079d      	lsls	r5, r3, #30
 8005faa:	d5fc      	bpl.n	8005fa6 <Lcd_Init+0x13f6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005fac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005fb0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005fb4:	890a      	ldrh	r2, [r1, #8]
 8005fb6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005fba:	0614      	lsls	r4, r2, #24
 8005fbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005fc0:	d4f8      	bmi.n	8005fb4 <Lcd_Init+0x1404>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005fca:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005fcc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8005fd0:	f044 0410 	orr.w	r4, r4, #16
 8005fd4:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005fd6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8005fd8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8005fdc:	f024 0410 	bic.w	r4, r4, #16
 8005fe0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8005fe2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005fe4:	2411      	movs	r4, #17
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fea:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005fec:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8005fee:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8005ff0:	8913      	ldrh	r3, [r2, #8]
 8005ff2:	0799      	lsls	r1, r3, #30
 8005ff4:	d5fc      	bpl.n	8005ff0 <Lcd_Init+0x1440>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8005ff6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ffa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005ffe:	890a      	ldrh	r2, [r1, #8]
 8006000:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006004:	0612      	lsls	r2, r2, #24
 8006006:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800600a:	d4f8      	bmi.n	8005ffe <Lcd_Init+0x144e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800600c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006010:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006014:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006016:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800601a:	f044 0410 	orr.w	r4, r4, #16
 800601e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006020:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006022:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006026:	f024 0410 	bic.w	r4, r4, #16
 800602a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800602c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800602e:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006034:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006036:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006038:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800603a:	8913      	ldrh	r3, [r2, #8]
 800603c:	079d      	lsls	r5, r3, #30
 800603e:	d5fc      	bpl.n	800603a <Lcd_Init+0x148a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006040:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006044:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006048:	890a      	ldrh	r2, [r1, #8]
 800604a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800604e:	0614      	lsls	r4, r2, #24
 8006050:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006054:	d4f8      	bmi.n	8006048 <Lcd_Init+0x1498>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800605e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006060:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006064:	f044 0410 	orr.w	r4, r4, #16
 8006068:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800606a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800606c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006070:	f024 0410 	bic.w	r4, r4, #16
 8006074:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006076:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006078:	2409      	movs	r4, #9
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800607a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006080:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006082:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006084:	8913      	ldrh	r3, [r2, #8]
 8006086:	0799      	lsls	r1, r3, #30
 8006088:	d5fc      	bpl.n	8006084 <Lcd_Init+0x14d4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800608a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800608e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006092:	890a      	ldrh	r2, [r1, #8]
 8006094:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006098:	0612      	lsls	r2, r2, #24
 800609a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800609e:	d4f8      	bmi.n	8006092 <Lcd_Init+0x14e2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060a8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060ae:	f044 0410 	orr.w	r4, r4, #16
 80060b2:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80060b4:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80060b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80060ba:	f024 0410 	bic.w	r4, r4, #16
 80060be:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80060c0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060c2:	2405      	movs	r4, #5
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060ca:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80060cc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80060ce:	8913      	ldrh	r3, [r2, #8]
 80060d0:	079d      	lsls	r5, r3, #30
 80060d2:	d5fc      	bpl.n	80060ce <Lcd_Init+0x151e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80060d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80060d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80060dc:	890a      	ldrh	r2, [r1, #8]
 80060de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80060e2:	0614      	lsls	r4, r2, #24
 80060e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80060e8:	d4f8      	bmi.n	80060dc <Lcd_Init+0x152c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80060f2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80060f4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80060f8:	f044 0410 	orr.w	r4, r4, #16
 80060fc:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80060fe:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006100:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006104:	f024 0410 	bic.w	r4, r4, #16
 8006108:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800610a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800610c:	2404      	movs	r4, #4
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006112:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006114:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006116:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006118:	8913      	ldrh	r3, [r2, #8]
 800611a:	0799      	lsls	r1, r3, #30
 800611c:	d5fc      	bpl.n	8006118 <Lcd_Init+0x1568>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800611e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006122:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006126:	890a      	ldrh	r2, [r1, #8]
 8006128:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800612c:	0612      	lsls	r2, r2, #24
 800612e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006132:	d4f8      	bmi.n	8006126 <Lcd_Init+0x1576>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006138:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800613c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800613e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006142:	f044 0410 	orr.w	r4, r4, #16
 8006146:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006148:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 800614a:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800614e:	f024 0410 	bic.w	r4, r4, #16
 8006152:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8006154:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006156:	24e1      	movs	r4, #225	; 0xe1
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006158:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800615c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800615e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006160:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006162:	8913      	ldrh	r3, [r2, #8]
 8006164:	079b      	lsls	r3, r3, #30
 8006166:	d5fc      	bpl.n	8006162 <Lcd_Init+0x15b2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006168:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800616c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006170:	890a      	ldrh	r2, [r1, #8]
 8006172:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006176:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800617a:	b292      	uxth	r2, r2
 800617c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006180:	2a00      	cmp	r2, #0
 8006182:	d1f5      	bne.n	8006170 <Lcd_Init+0x15c0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006188:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800618c:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800618e:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006192:	f045 0510 	orr.w	r5, r5, #16
 8006196:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006198:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 800619a:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800619e:	f025 0510 	bic.w	r5, r5, #16
 80061a2:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80061a4:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061a6:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80061a8:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80061ac:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80061ae:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061b0:	890b      	ldrh	r3, [r1, #8]
 80061b2:	079d      	lsls	r5, r3, #30
 80061b4:	d5fc      	bpl.n	80061b0 <Lcd_Init+0x1600>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80061b6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80061ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80061be:	890a      	ldrh	r2, [r1, #8]
 80061c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061c4:	0614      	lsls	r4, r2, #24
 80061c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80061ca:	d4f8      	bmi.n	80061be <Lcd_Init+0x160e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80061cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80061d4:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80061d6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80061da:	f044 0410 	orr.w	r4, r4, #16
 80061de:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80061e0:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80061e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80061e6:	f024 0410 	bic.w	r4, r4, #16
 80061ea:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80061ec:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80061ee:	2418      	movs	r4, #24
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80061f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f4:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061f6:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80061f8:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80061fa:	8913      	ldrh	r3, [r2, #8]
 80061fc:	0799      	lsls	r1, r3, #30
 80061fe:	d5fc      	bpl.n	80061fa <Lcd_Init+0x164a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006200:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006204:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006208:	890a      	ldrh	r2, [r1, #8]
 800620a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800620e:	0612      	lsls	r2, r2, #24
 8006210:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006214:	d4f8      	bmi.n	8006208 <Lcd_Init+0x1658>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800621e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006220:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006224:	f044 0410 	orr.w	r4, r4, #16
 8006228:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800622a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800622c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006230:	f024 0410 	bic.w	r4, r4, #16
 8006234:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006236:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006238:	241d      	movs	r4, #29
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800623a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006240:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006242:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006244:	8913      	ldrh	r3, [r2, #8]
 8006246:	079d      	lsls	r5, r3, #30
 8006248:	d5fc      	bpl.n	8006244 <Lcd_Init+0x1694>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800624a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800624e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006252:	890a      	ldrh	r2, [r1, #8]
 8006254:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006258:	0614      	lsls	r4, r2, #24
 800625a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800625e:	d4f8      	bmi.n	8006252 <Lcd_Init+0x16a2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006264:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006268:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800626a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800626e:	f044 0410 	orr.w	r4, r4, #16
 8006272:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006274:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006276:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800627a:	f024 0410 	bic.w	r4, r4, #16
 800627e:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006280:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006282:	2402      	movs	r4, #2
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006284:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006288:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800628a:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800628c:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800628e:	8913      	ldrh	r3, [r2, #8]
 8006290:	0799      	lsls	r1, r3, #30
 8006292:	d5fc      	bpl.n	800628e <Lcd_Init+0x16de>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006294:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006298:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800629c:	890a      	ldrh	r2, [r1, #8]
 800629e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80062a2:	0612      	lsls	r2, r2, #24
 80062a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062a8:	d4f8      	bmi.n	800629c <Lcd_Init+0x16ec>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80062aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80062b2:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062b4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80062b8:	f044 0410 	orr.w	r4, r4, #16
 80062bc:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062be:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80062c0:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80062c4:	f024 0410 	bic.w	r4, r4, #16
 80062c8:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80062ca:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80062cc:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d2:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80062d4:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80062d6:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80062d8:	8913      	ldrh	r3, [r2, #8]
 80062da:	079d      	lsls	r5, r3, #30
 80062dc:	d5fc      	bpl.n	80062d8 <Lcd_Init+0x1728>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80062de:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80062e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80062e6:	890a      	ldrh	r2, [r1, #8]
 80062e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80062ec:	0614      	lsls	r4, r2, #24
 80062ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80062f2:	d4f8      	bmi.n	80062e6 <Lcd_Init+0x1736>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80062f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80062fc:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80062fe:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006302:	f044 0410 	orr.w	r4, r4, #16
 8006306:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006308:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800630a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800630e:	f024 0410 	bic.w	r4, r4, #16
 8006312:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006314:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006316:	2404      	movs	r4, #4
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800631e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006320:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006322:	8913      	ldrh	r3, [r2, #8]
 8006324:	0799      	lsls	r1, r3, #30
 8006326:	d5fc      	bpl.n	8006322 <Lcd_Init+0x1772>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006328:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800632c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006330:	890a      	ldrh	r2, [r1, #8]
 8006332:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006336:	0612      	lsls	r2, r2, #24
 8006338:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800633c:	d4f8      	bmi.n	8006330 <Lcd_Init+0x1780>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800633e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006342:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006346:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006348:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800634c:	f044 0410 	orr.w	r4, r4, #16
 8006350:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006352:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006354:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006358:	f024 0410 	bic.w	r4, r4, #16
 800635c:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800635e:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006360:	2436      	movs	r4, #54	; 0x36
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006366:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006368:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800636a:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800636c:	8913      	ldrh	r3, [r2, #8]
 800636e:	079d      	lsls	r5, r3, #30
 8006370:	d5fc      	bpl.n	800636c <Lcd_Init+0x17bc>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006372:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006376:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800637a:	890a      	ldrh	r2, [r1, #8]
 800637c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006380:	0614      	lsls	r4, r2, #24
 8006382:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006386:	d4f8      	bmi.n	800637a <Lcd_Init+0x17ca>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006388:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800638c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006390:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006392:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006396:	f044 0410 	orr.w	r4, r4, #16
 800639a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800639c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800639e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80063a2:	f024 0410 	bic.w	r4, r4, #16
 80063a6:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80063a8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063aa:	2413      	movs	r4, #19
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80063ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b0:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80063b2:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063b4:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80063b6:	8913      	ldrh	r3, [r2, #8]
 80063b8:	0799      	lsls	r1, r3, #30
 80063ba:	d5fc      	bpl.n	80063b6 <Lcd_Init+0x1806>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80063bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80063c0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80063c4:	890a      	ldrh	r2, [r1, #8]
 80063c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80063ca:	0612      	lsls	r2, r2, #24
 80063cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80063d0:	d4f8      	bmi.n	80063c4 <Lcd_Init+0x1814>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80063d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063d6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80063da:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80063dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80063e0:	f044 0410 	orr.w	r4, r4, #16
 80063e4:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80063e6:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80063e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80063ec:	f024 0410 	bic.w	r4, r4, #16
 80063f0:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80063f2:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063f4:	244c      	movs	r4, #76	; 0x4c
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80063fc:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80063fe:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006400:	8913      	ldrh	r3, [r2, #8]
 8006402:	079d      	lsls	r5, r3, #30
 8006404:	d5fc      	bpl.n	8006400 <Lcd_Init+0x1850>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006406:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800640a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800640e:	890a      	ldrh	r2, [r1, #8]
 8006410:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006414:	0614      	lsls	r4, r2, #24
 8006416:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800641a:	d4f8      	bmi.n	800640e <Lcd_Init+0x185e>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006424:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006426:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800642a:	f044 0410 	orr.w	r4, r4, #16
 800642e:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006430:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006432:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006436:	f024 0410 	bic.w	r4, r4, #16
 800643a:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800643c:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800643e:	2407      	movs	r4, #7
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006444:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006446:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006448:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800644a:	8913      	ldrh	r3, [r2, #8]
 800644c:	0799      	lsls	r1, r3, #30
 800644e:	d5fc      	bpl.n	800644a <Lcd_Init+0x189a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006450:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006454:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006458:	890a      	ldrh	r2, [r1, #8]
 800645a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800645e:	0612      	lsls	r2, r2, #24
 8006460:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006464:	d4f8      	bmi.n	8006458 <Lcd_Init+0x18a8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800646a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800646e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006470:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006474:	f044 0410 	orr.w	r4, r4, #16
 8006478:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800647a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800647c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006480:	f024 0410 	bic.w	r4, r4, #16
 8006484:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006486:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006488:	2413      	movs	r4, #19
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800648a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648e:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006490:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006492:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006494:	8913      	ldrh	r3, [r2, #8]
 8006496:	079d      	lsls	r5, r3, #30
 8006498:	d5fc      	bpl.n	8006494 <Lcd_Init+0x18e4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800649a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800649e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80064a2:	890a      	ldrh	r2, [r1, #8]
 80064a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064a8:	0614      	lsls	r4, r2, #24
 80064aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064ae:	d4f8      	bmi.n	80064a2 <Lcd_Init+0x18f2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80064b8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80064ba:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064be:	f044 0410 	orr.w	r4, r4, #16
 80064c2:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064c4:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80064c6:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80064ca:	f024 0410 	bic.w	r4, r4, #16
 80064ce:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80064d0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80064d2:	240f      	movs	r4, #15
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80064d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80064da:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80064dc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80064de:	8913      	ldrh	r3, [r2, #8]
 80064e0:	0799      	lsls	r1, r3, #30
 80064e2:	d5fc      	bpl.n	80064de <Lcd_Init+0x192e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80064e4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80064e8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80064ec:	890a      	ldrh	r2, [r1, #8]
 80064ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064f2:	0612      	lsls	r2, r2, #24
 80064f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80064f8:	d4f8      	bmi.n	80064ec <Lcd_Init+0x193c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80064fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006502:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006504:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006508:	f044 0410 	orr.w	r4, r4, #16
 800650c:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800650e:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 8006510:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006514:	f024 0410 	bic.w	r4, r4, #16
 8006518:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 800651a:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800651c:	242e      	movs	r4, #46	; 0x2e
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800651e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006522:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006524:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006526:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006528:	8913      	ldrh	r3, [r2, #8]
 800652a:	079d      	lsls	r5, r3, #30
 800652c:	d5fc      	bpl.n	8006528 <Lcd_Init+0x1978>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800652e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006532:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006536:	890a      	ldrh	r2, [r1, #8]
 8006538:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800653c:	0614      	lsls	r4, r2, #24
 800653e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006542:	d4f8      	bmi.n	8006536 <Lcd_Init+0x1986>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006548:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800654c:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800654e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006552:	f044 0410 	orr.w	r4, r4, #16
 8006556:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006558:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800655a:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800655e:	f024 0410 	bic.w	r4, r4, #16
 8006562:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006564:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006566:	242f      	movs	r4, #47	; 0x2f
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656c:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800656e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006570:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006572:	8913      	ldrh	r3, [r2, #8]
 8006574:	0799      	lsls	r1, r3, #30
 8006576:	d5fc      	bpl.n	8006572 <Lcd_Init+0x19c2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006578:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800657c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006580:	890a      	ldrh	r2, [r1, #8]
 8006582:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006586:	0612      	lsls	r2, r2, #24
 8006588:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800658c:	d4f8      	bmi.n	8006580 <Lcd_Init+0x19d0>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800658e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006592:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006596:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006598:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800659c:	f044 0410 	orr.w	r4, r4, #16
 80065a0:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80065a2:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80065a4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80065a8:	f024 0410 	bic.w	r4, r4, #16
 80065ac:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80065ae:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80065b0:	2405      	movs	r4, #5
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80065b8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80065ba:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80065bc:	8913      	ldrh	r3, [r2, #8]
 80065be:	079d      	lsls	r5, r3, #30
 80065c0:	d5fc      	bpl.n	80065bc <Lcd_Init+0x1a0c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80065c2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80065c6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80065ca:	890a      	ldrh	r2, [r1, #8]
 80065cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80065d0:	0614      	lsls	r4, r2, #24
 80065d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80065d6:	d4f8      	bmi.n	80065ca <Lcd_Init+0x1a1a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80065d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80065e0:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80065e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80065e6:	f044 0410 	orr.w	r4, r4, #16
 80065ea:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80065ec:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80065ee:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80065f2:	f024 0410 	bic.w	r4, r4, #16
 80065f6:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80065f8:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80065fa:	242b      	movs	r4, #43	; 0x2b
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80065fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006600:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006602:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006604:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006606:	8913      	ldrh	r3, [r2, #8]
 8006608:	0799      	lsls	r1, r3, #30
 800660a:	d5fc      	bpl.n	8006606 <Lcd_Init+0x1a56>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800660c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006610:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006614:	890a      	ldrh	r2, [r1, #8]
 8006616:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800661a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800661e:	b292      	uxth	r2, r2
 8006620:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006624:	2a00      	cmp	r2, #0
 8006626:	d1f5      	bne.n	8006614 <Lcd_Init+0x1a64>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800662c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006630:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006632:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006636:	f045 0510 	orr.w	r5, r5, #16
 800663a:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800663c:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 800663e:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006642:	f025 0510 	bic.w	r5, r5, #16
 8006646:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8006648:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800664a:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800664c:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006650:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006652:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006654:	890b      	ldrh	r3, [r1, #8]
 8006656:	079b      	lsls	r3, r3, #30
 8006658:	d5fc      	bpl.n	8006654 <Lcd_Init+0x1aa4>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800665a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800665e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006662:	890a      	ldrh	r2, [r1, #8]
 8006664:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006668:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800666c:	b292      	uxth	r2, r2
 800666e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006672:	2a00      	cmp	r2, #0
 8006674:	d1f5      	bne.n	8006662 <Lcd_Init+0x1ab2>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800667a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800667e:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006680:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006684:	f045 0510 	orr.w	r5, r5, #16
 8006688:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800668a:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 800668c:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006690:	f025 0510 	bic.w	r5, r5, #16
 8006694:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8006696:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006698:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800669a:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 800669e:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80066a0:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80066a2:	890b      	ldrh	r3, [r1, #8]
 80066a4:	079d      	lsls	r5, r3, #30
 80066a6:	d5fc      	bpl.n	80066a2 <Lcd_Init+0x1af2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80066a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80066ac:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80066b0:	890a      	ldrh	r2, [r1, #8]
 80066b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80066b6:	0614      	lsls	r4, r2, #24
 80066b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80066bc:	d4f8      	bmi.n	80066b0 <Lcd_Init+0x1b00>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80066c6:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80066c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80066cc:	f044 0410 	orr.w	r4, r4, #16
 80066d0:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80066d2:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 80066d4:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80066d8:	f024 0410 	bic.w	r4, r4, #16
 80066dc:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80066de:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80066e0:	2401      	movs	r4, #1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80066e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e6:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80066e8:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80066ea:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80066ec:	8913      	ldrh	r3, [r2, #8]
 80066ee:	0799      	lsls	r1, r3, #30
 80066f0:	d5fc      	bpl.n	80066ec <Lcd_Init+0x1b3c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80066f2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80066f6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80066fa:	890a      	ldrh	r2, [r1, #8]
 80066fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006700:	0612      	lsls	r2, r2, #24
 8006702:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006706:	d4f8      	bmi.n	80066fa <Lcd_Init+0x1b4a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800670c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006710:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006712:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006716:	f044 0410 	orr.w	r4, r4, #16
 800671a:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800671c:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800671e:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006722:	f024 0410 	bic.w	r4, r4, #16
 8006726:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 8006728:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800672a:	243f      	movs	r4, #63	; 0x3f
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 800672c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006730:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006732:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006734:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006736:	8913      	ldrh	r3, [r2, #8]
 8006738:	079d      	lsls	r5, r3, #30
 800673a:	d5fc      	bpl.n	8006736 <Lcd_Init+0x1b86>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 800673c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006740:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006744:	890a      	ldrh	r2, [r1, #8]
 8006746:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800674a:	0614      	lsls	r4, r2, #24
 800674c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006750:	d4f8      	bmi.n	8006744 <Lcd_Init+0x1b94>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006756:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800675a:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800675c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006760:	f044 0410 	orr.w	r4, r4, #16
 8006764:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006766:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 8006768:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 800676c:	f024 0410 	bic.w	r4, r4, #16
 8006770:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 8006772:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006774:	242a      	movs	r4, #42	; 0x2a
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006776:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800677a:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800677c:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800677e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006780:	8913      	ldrh	r3, [r2, #8]
 8006782:	0799      	lsls	r1, r3, #30
 8006784:	d5fc      	bpl.n	8006780 <Lcd_Init+0x1bd0>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006786:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800678a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800678e:	890a      	ldrh	r2, [r1, #8]
 8006790:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006794:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006798:	b292      	uxth	r2, r2
 800679a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800679e:	2a00      	cmp	r2, #0
 80067a0:	d1f5      	bne.n	800678e <Lcd_Init+0x1bde>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80067a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067a6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80067aa:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80067ac:	f44f 6440 	mov.w	r4, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 80067b0:	f045 0510 	orr.w	r5, r5, #16
 80067b4:	60cd      	str	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80067b6:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 80067b8:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80067bc:	f025 0510 	bic.w	r5, r5, #16
 80067c0:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 80067c2:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067c4:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80067c6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80067ca:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80067cc:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80067ce:	890b      	ldrh	r3, [r1, #8]
 80067d0:	079b      	lsls	r3, r3, #30
 80067d2:	d5fc      	bpl.n	80067ce <Lcd_Init+0x1c1e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80067d4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80067d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80067dc:	890a      	ldrh	r2, [r1, #8]
 80067de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80067e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80067e6:	b292      	uxth	r2, r2
 80067e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	d1f5      	bne.n	80067dc <Lcd_Init+0x1c2c>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80067f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80067f8:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80067fa:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80067fe:	f045 0510 	orr.w	r5, r5, #16
 8006802:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006804:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8006806:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800680a:	f025 0510 	bic.w	r5, r5, #16
 800680e:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 8006810:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006812:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006814:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006818:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800681a:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800681c:	890b      	ldrh	r3, [r1, #8]
 800681e:	079d      	lsls	r5, r3, #30
 8006820:	d5fc      	bpl.n	800681c <Lcd_Init+0x1c6c>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006822:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006826:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800682a:	890a      	ldrh	r2, [r1, #8]
 800682c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006830:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006834:	b292      	uxth	r2, r2
 8006836:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800683a:	2a00      	cmp	r2, #0
 800683c:	d1f5      	bne.n	800682a <Lcd_Init+0x1c7a>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800683e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006842:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006846:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006848:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 800684c:	f045 0510 	orr.w	r5, r5, #16
 8006850:	60cd      	str	r5, [r1, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006852:	68cd      	ldr	r5, [r1, #12]
	Lcd_RS_REG();
 8006854:	f2c4 0401 	movt	r4, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006858:	f025 0510 	bic.w	r5, r5, #16
 800685c:	60cd      	str	r5, [r1, #12]
	Lcd_RS_REG();
 800685e:	68e5      	ldr	r5, [r4, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006860:	4619      	mov	r1, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006862:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006866:	60e5      	str	r5, [r4, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006868:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800686a:	890b      	ldrh	r3, [r1, #8]
 800686c:	079c      	lsls	r4, r3, #30
 800686e:	d5fc      	bpl.n	800686a <Lcd_Init+0x1cba>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006870:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006874:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006878:	890a      	ldrh	r2, [r1, #8]
 800687a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800687e:	0612      	lsls	r2, r2, #24
 8006880:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006884:	d4f8      	bmi.n	8006878 <Lcd_Init+0x1cc8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800688e:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006890:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006894:	f044 0410 	orr.w	r4, r4, #16
 8006898:	60d4      	str	r4, [r2, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 800689a:	68d4      	ldr	r4, [r2, #12]
	Lcd_RS_REG();
 800689c:	f2c4 0101 	movt	r1, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 80068a0:	f024 0410 	bic.w	r4, r4, #16
 80068a4:	60d4      	str	r4, [r2, #12]
	Lcd_RS_REG();
 80068a6:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068a8:	24ef      	movs	r4, #239	; 0xef
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 80068aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ae:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068b0:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068b2:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068b4:	8913      	ldrh	r3, [r2, #8]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	d5fc      	bpl.n	80068b4 <Lcd_Init+0x1d04>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 80068ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80068be:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80068c2:	890a      	ldrh	r2, [r1, #8]
 80068c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80068c8:	0615      	lsls	r5, r2, #24
 80068ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80068ce:	d4f8      	bmi.n	80068c2 <Lcd_Init+0x1d12>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80068d8:	68d4      	ldr	r4, [r2, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80068da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 80068de:	f044 0410 	orr.w	r4, r4, #16
 80068e2:	60d4      	str	r4, [r2, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80068e4:	68d4      	ldr	r4, [r2, #12]
   Lcd_RS_DATA();
 80068e6:	f2c4 0101 	movt	r1, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80068ea:	f024 0410 	bic.w	r4, r4, #16
 80068ee:	60d4      	str	r4, [r2, #12]
   Lcd_RS_DATA();
 80068f0:	68ca      	ldr	r2, [r1, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068f2:	2411      	movs	r4, #17
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80068f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80068f8:	60ca      	str	r2, [r1, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068fa:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80068fc:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 80068fe:	8913      	ldrh	r3, [r2, #8]
 8006900:	079c      	lsls	r4, r3, #30
 8006902:	d5fc      	bpl.n	80068fe <Lcd_Init+0x1d4e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006904:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006908:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800690c:	8913      	ldrh	r3, [r2, #8]
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1f9      	bne.n	800690c <Lcd_Init+0x1d5c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800691c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006920:	68cc      	ldr	r4, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 8006922:	f647 72ff 	movw	r2, #32767	; 0x7fff
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006926:	f044 0410 	orr.w	r4, r4, #16
 800692a:	60cc      	str	r4, [r1, #12]


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	9b00      	ldr	r3, [sp, #0]
 8006930:	f2c0 0207 	movt	r2, #7
 8006934:	4293      	cmp	r3, r2
 8006936:	dc05      	bgt.n	8006944 <Lcd_Init+0x1d94>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	4293      	cmp	r3, r2
 8006942:	ddf9      	ble.n	8006938 <Lcd_Init+0x1d88>
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006948:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800694c:	68d9      	ldr	r1, [r3, #12]
   Lcd_RS_DATA();
 800694e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006952:	f021 0110 	bic.w	r1, r1, #16
 8006956:	60d9      	str	r1, [r3, #12]
   Lcd_RS_DATA();
 8006958:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800695c:	68d4      	ldr	r4, [r2, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800695e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006962:	f2c4 0301 	movt	r3, #16385	; 0x4001
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006966:	f424 7400 	bic.w	r4, r4, #512	; 0x200
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 800696a:	2129      	movs	r1, #41	; 0x29
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 800696c:	60d4      	str	r4, [r2, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 800696e:	461a      	mov	r2, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006970:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006972:	8913      	ldrh	r3, [r2, #8]
 8006974:	0799      	lsls	r1, r3, #30
 8006976:	d5fc      	bpl.n	8006972 <Lcd_Init+0x1dc2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006978:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800697c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006980:	891c      	ldrh	r4, [r3, #8]
 8006982:	f004 0480 	and.w	r4, r4, #128	; 0x80
 8006986:	b2a4      	uxth	r4, r4
 8006988:	2c00      	cmp	r4, #0
 800698a:	d1f9      	bne.n	8006980 <Lcd_Init+0x1dd0>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 800698c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006990:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	f042 0210 	orr.w	r2, r2, #16
 800699a:	60da      	str	r2, [r3, #12]
	Lcd_WR_REG(0x11); //Exit Sleep
	_Delay(120);

	Lcd_WR_REG(0x29); //display on

	Lcd_Set_Display_Mode(mode);
 800699c:	f7fd fae2 	bl	8003f64 <Lcd_Set_Display_Mode>
	Lcd_CS_DIS();
}

void Lcd_Clr_Screen(void)
{
	Lcd_Draw_Back_Color(BLACK);
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7fe f85b 	bl	8004a5c <Lcd_Draw_Back_Color>


static void _Delay(int ms)
{
	volatile int i;
	for(i=0;i<(0x1000*ms);i++);
 80069a6:	9401      	str	r4, [sp, #4]
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80069ae:	f2c0 0212 	movt	r2, #18
 80069b2:	4293      	cmp	r3, r2
 80069b4:	dc05      	bgt.n	80069c2 <Lcd_Init+0x1e12>
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	3301      	adds	r3, #1
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	9b01      	ldr	r3, [sp, #4]
 80069be:	4293      	cmp	r3, r2
 80069c0:	ddf9      	ble.n	80069b6 <Lcd_Init+0x1e06>
	Lcd_Set_Display_Mode(mode);

	Lcd_Clr_Screen();
	_Delay(300);

	Lcd_LED_ON();
 80069c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d0:	60da      	str	r2, [r3, #12]
}
 80069d2:	b005      	add	sp, #20
 80069d4:	bd30      	pop	{r4, r5, pc}
 80069d6:	bf00      	nop

080069d8 <Lcd_Put_Pixel>:

void Lcd_Put_Pixel(unsigned short x, unsigned short y, unsigned short color)
{
 80069d8:	b4f0      	push	{r4, r5, r6, r7}
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80069da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80069e2:	68df      	ldr	r7, [r3, #12]
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 80069e4:	f240 5488 	movw	r4, #1416	; 0x588
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80069e8:	f027 0710 	bic.w	r7, r7, #16
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 80069ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80069f0:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	Lcd_WR_REG(lcddev.wramcmd);
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
 80069f4:	8926      	ldrh	r6, [r4, #8]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 80069f6:	f2c4 0501 	movt	r5, #16385	; 0x4001
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 80069fa:	60df      	str	r7, [r3, #12]
   Lcd_RS_DATA();
 80069fc:	68ef      	ldr	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 80069fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a06:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006a08:	f427 7700 	bic.w	r7, r7, #512	; 0x200
 8006a0c:	60ef      	str	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a0e:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006a10:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a12:	892b      	ldrh	r3, [r5, #8]
 8006a14:	079b      	lsls	r3, r3, #30
 8006a16:	d5fc      	bpl.n	8006a12 <Lcd_Put_Pixel+0x3a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006a18:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006a1c:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006a20:	8935      	ldrh	r5, [r6, #8]
 8006a22:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a26:	062f      	lsls	r7, r5, #24
 8006a28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a2c:	d4f8      	bmi.n	8006a20 <Lcd_Put_Pixel+0x48>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006a2e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006a32:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006a36:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006a38:	f44f 6640 	mov.w	r6, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006a3c:	f047 0710 	orr.w	r7, r7, #16
 8006a40:	60ef      	str	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a42:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8006a44:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a48:	f027 0710 	bic.w	r7, r7, #16
 8006a4c:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8006a4e:	68f5      	ldr	r5, [r6, #12]
}

void Lcd_Set_Windows(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
	Lcd_WR_REG(lcddev.setxcmd);
	Lcd_WR_DATA(x1>>8);
 8006a50:	0a07      	lsrs	r7, r0, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006a52:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006a56:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a58:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006a5a:	819f      	strh	r7, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006a5c:	892b      	ldrh	r3, [r5, #8]
 8006a5e:	079e      	lsls	r6, r3, #30
 8006a60:	d5fc      	bpl.n	8006a5c <Lcd_Put_Pixel+0x84>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006a62:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006a66:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006a6a:	8935      	ldrh	r5, [r6, #8]
 8006a6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a70:	062d      	lsls	r5, r5, #24
 8006a72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006a76:	d4f8      	bmi.n	8006a6a <Lcd_Put_Pixel+0x92>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006a78:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006a7c:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006a80:	f8d5 c00c 	ldr.w	ip, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006a84:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006a88:	f04c 0c10 	orr.w	ip, ip, #16
 8006a8c:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a90:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006a94:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006a98:	f02c 0c10 	bic.w	ip, ip, #16
 8006a9c:	f8c5 c00c 	str.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006aa0:	68f5      	ldr	r5, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006aa2:	b2c0      	uxtb	r0, r0
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006aa4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8006aa8:	60f5      	str	r5, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006aaa:	461d      	mov	r5, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006aac:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006aae:	892b      	ldrh	r3, [r5, #8]
 8006ab0:	079e      	lsls	r6, r3, #30
 8006ab2:	d5fc      	bpl.n	8006aae <Lcd_Put_Pixel+0xd6>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006ab4:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006ab8:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006abc:	8935      	ldrh	r5, [r6, #8]
 8006abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006ac2:	062d      	lsls	r5, r5, #24
 8006ac4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006ac8:	d4f8      	bmi.n	8006abc <Lcd_Put_Pixel+0xe4>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006aca:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006ace:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006ad2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006ad6:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006ada:	f04c 0c10 	orr.w	ip, ip, #16
 8006ade:	f8c5 c00c 	str.w	ip, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006ae2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006ae6:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006aea:	f02c 0c10 	bic.w	ip, ip, #16
 8006aee:	f8c5 c00c 	str.w	ip, [r5, #12]
	Lcd_RS_REG();
 8006af2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006af6:	461d      	mov	r5, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006af8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 8006afc:	f8c6 c00c 	str.w	ip, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b00:	819f      	strh	r7, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b02:	892b      	ldrh	r3, [r5, #8]
 8006b04:	079e      	lsls	r6, r3, #30
 8006b06:	d5fc      	bpl.n	8006b02 <Lcd_Put_Pixel+0x12a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006b08:	f44f 5640 	mov.w	r6, #12288	; 0x3000
 8006b0c:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8006b10:	8935      	ldrh	r5, [r6, #8]
 8006b12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b16:	062d      	lsls	r5, r5, #24
 8006b18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006b1c:	d4f8      	bmi.n	8006b10 <Lcd_Put_Pixel+0x138>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b1e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006b22:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006b26:	68ef      	ldr	r7, [r5, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b28:	f44f 6640 	mov.w	r6, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b2c:	f047 0710 	orr.w	r7, r7, #16
 8006b30:	60ef      	str	r7, [r5, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b32:	68ef      	ldr	r7, [r5, #12]
	Lcd_RS_REG();
 8006b34:	f2c4 0601 	movt	r6, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006b38:	f027 0710 	bic.w	r7, r7, #16
 8006b3c:	60ef      	str	r7, [r5, #12]
	Lcd_RS_REG();
 8006b3e:	68f7      	ldr	r7, [r6, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b40:	461d      	mov	r5, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006b42:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8006b46:	60f7      	str	r7, [r6, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b48:	8198      	strh	r0, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b4a:	892b      	ldrh	r3, [r5, #8]
 8006b4c:	079f      	lsls	r7, r3, #30
 8006b4e:	d5fc      	bpl.n	8006b4a <Lcd_Put_Pixel+0x172>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006b50:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006b54:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006b58:	8928      	ldrh	r0, [r5, #8]
 8006b5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006b5e:	0606      	lsls	r6, r0, #24
 8006b60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006b64:	d4f8      	bmi.n	8006b58 <Lcd_Put_Pixel+0x180>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b6a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006b6e:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006b70:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006b74:	f046 0610 	orr.w	r6, r6, #16
 8006b78:	60c6      	str	r6, [r0, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006b7a:	68c7      	ldr	r7, [r0, #12]
	Lcd_WR_DATA(x1>>8);
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
 8006b7c:	8966      	ldrh	r6, [r4, #10]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006b7e:	f027 0710 	bic.w	r7, r7, #16
 8006b82:	60c7      	str	r7, [r0, #12]
   Lcd_RS_DATA();
 8006b84:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006b88:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b8a:	b2f6      	uxtb	r6, r6
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006b8c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8006b90:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b92:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006b94:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006b96:	8903      	ldrh	r3, [r0, #8]
 8006b98:	079d      	lsls	r5, r3, #30
 8006b9a:	d5fc      	bpl.n	8006b96 <Lcd_Put_Pixel+0x1be>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006b9c:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006ba0:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006ba4:	8928      	ldrh	r0, [r5, #8]
 8006ba6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006baa:	0600      	lsls	r0, r0, #24
 8006bac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006bb0:	d4f8      	bmi.n	8006ba4 <Lcd_Put_Pixel+0x1cc>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006bb2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006bb6:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006bba:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006bbc:	f44f 6540 	mov.w	r5, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006bc0:	f046 0610 	orr.w	r6, r6, #16
 8006bc4:	60c6      	str	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006bc6:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8006bc8:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006bcc:	f026 0610 	bic.w	r6, r6, #16
 8006bd0:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8006bd2:	68e8      	ldr	r0, [r5, #12]
	Lcd_WR_DATA(0xFF&x1);
	Lcd_WR_DATA(x2>>8);
	Lcd_WR_DATA(0xFF&x2);

	Lcd_WR_REG(lcddev.setycmd);
	Lcd_WR_DATA(y1>>8);
 8006bd4:	0a0e      	lsrs	r6, r1, #8
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006bd6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8006bda:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006bdc:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006bde:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006be0:	8903      	ldrh	r3, [r0, #8]
 8006be2:	079b      	lsls	r3, r3, #30
 8006be4:	d5fc      	bpl.n	8006be0 <Lcd_Put_Pixel+0x208>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006be6:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006bea:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006bee:	8928      	ldrh	r0, [r5, #8]
 8006bf0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006bf4:	0607      	lsls	r7, r0, #24
 8006bf6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006bfa:	d4f8      	bmi.n	8006bee <Lcd_Put_Pixel+0x216>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006bfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c00:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006c04:	68c7      	ldr	r7, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c06:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c0a:	f047 0710 	orr.w	r7, r7, #16
 8006c0e:	60c7      	str	r7, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c10:	68c7      	ldr	r7, [r0, #12]
	Lcd_RS_REG();
 8006c12:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c16:	f027 0710 	bic.w	r7, r7, #16
 8006c1a:	60c7      	str	r7, [r0, #12]
	Lcd_RS_REG();
 8006c1c:	68e8      	ldr	r0, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c1e:	b2c9      	uxtb	r1, r1
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c20:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8006c24:	60e8      	str	r0, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c26:	4618      	mov	r0, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c28:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c2a:	8903      	ldrh	r3, [r0, #8]
 8006c2c:	079d      	lsls	r5, r3, #30
 8006c2e:	d5fc      	bpl.n	8006c2a <Lcd_Put_Pixel+0x252>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006c30:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006c34:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006c38:	8928      	ldrh	r0, [r5, #8]
 8006c3a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006c3e:	0600      	lsls	r0, r0, #24
 8006c40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c44:	d4f8      	bmi.n	8006c38 <Lcd_Put_Pixel+0x260>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c4a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006c4e:	68c7      	ldr	r7, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c50:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c54:	f047 0710 	orr.w	r7, r7, #16
 8006c58:	60c7      	str	r7, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c5a:	68c7      	ldr	r7, [r0, #12]
	Lcd_RS_REG();
 8006c5c:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006c60:	f027 0710 	bic.w	r7, r7, #16
 8006c64:	60c7      	str	r7, [r0, #12]
	Lcd_RS_REG();
 8006c66:	68ef      	ldr	r7, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c68:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c6a:	f447 7700 	orr.w	r7, r7, #512	; 0x200
 8006c6e:	60ef      	str	r7, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006c70:	819e      	strh	r6, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006c72:	8903      	ldrh	r3, [r0, #8]
 8006c74:	079f      	lsls	r7, r3, #30
 8006c76:	d5fc      	bpl.n	8006c72 <Lcd_Put_Pixel+0x29a>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006c78:	f44f 5540 	mov.w	r5, #12288	; 0x3000
 8006c7c:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8006c80:	8928      	ldrh	r0, [r5, #8]
 8006c82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006c86:	0606      	lsls	r6, r0, #24
 8006c88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c8c:	d4f8      	bmi.n	8006c80 <Lcd_Put_Pixel+0x2a8>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c92:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006c96:	68c6      	ldr	r6, [r0, #12]
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006c98:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006c9c:	f046 0610 	orr.w	r6, r6, #16
 8006ca0:	60c6      	str	r6, [r0, #12]
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006ca2:	68c6      	ldr	r6, [r0, #12]
	Lcd_RS_REG();
 8006ca4:	f2c4 0501 	movt	r5, #16385	; 0x4001
   Lcd_CS_DIS();
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
 8006ca8:	f026 0610 	bic.w	r6, r6, #16
 8006cac:	60c6      	str	r6, [r0, #12]
	Lcd_RS_REG();
 8006cae:	68ee      	ldr	r6, [r5, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006cb0:	4618      	mov	r0, r3
}

void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
 8006cb2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 8006cb6:	60ee      	str	r6, [r5, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006cb8:	8199      	strh	r1, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006cba:	8903      	ldrh	r3, [r0, #8]
 8006cbc:	079d      	lsls	r5, r3, #30
 8006cbe:	d5fc      	bpl.n	8006cba <Lcd_Put_Pixel+0x2e2>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006cc0:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006cc4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006cc8:	8901      	ldrh	r1, [r0, #8]
 8006cca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006cce:	0609      	lsls	r1, r1, #24
 8006cd0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006cd4:	d4f8      	bmi.n	8006cc8 <Lcd_Put_Pixel+0x2f0>
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006cda:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006cde:	68cd      	ldr	r5, [r1, #12]
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006ce0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_DATA(unsigned char data)
{
	Lcd_CS_EN();
	Lcd_RS_REG();
	_SPI1_Write_Byte(data);
	Lcd_CS_DIS();
 8006ce4:	f045 0510 	orr.w	r5, r5, #16
 8006ce8:	60cd      	str	r5, [r1, #12]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006cea:	68cd      	ldr	r5, [r1, #12]
	}
}

void Lcd_Write_RAM_Prepare(void)
{
	Lcd_WR_REG(lcddev.wramcmd);
 8006cec:	88e4      	ldrh	r4, [r4, #6]
	_Delay(50);
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
 8006cee:	f025 0510 	bic.w	r5, r5, #16
 8006cf2:	60cd      	str	r5, [r1, #12]
   Lcd_RS_DATA();
 8006cf4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006cf8:	68c1      	ldr	r1, [r0, #12]
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006cfa:	b2e4      	uxtb	r4, r4
}

void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
 8006cfc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006d00:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d02:	4619      	mov	r1, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d04:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d06:	890b      	ldrh	r3, [r1, #8]
 8006d08:	079f      	lsls	r7, r3, #30
 8006d0a:	d5fc      	bpl.n	8006d06 <Lcd_Put_Pixel+0x32e>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006d0c:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006d10:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006d14:	8901      	ldrh	r1, [r0, #8]
 8006d16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d1a:	060e      	lsls	r6, r1, #24
 8006d1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d20:	d4f8      	bmi.n	8006d14 <Lcd_Put_Pixel+0x33c>
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d26:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8006d2a:	68cc      	ldr	r4, [r1, #12]
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8006d2c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
void Lcd_WR_REG(unsigned char data)
{
   Lcd_CS_EN();
   Lcd_RS_DATA();
   _SPI1_Write_Byte(data);
   Lcd_CS_DIS();
 8006d30:	f044 0410 	orr.w	r4, r4, #16
 8006d34:	60cc      	str	r4, [r1, #12]
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8006d36:	68cc      	ldr	r4, [r1, #12]
   Lcd_RS_REG();
 8006d38:	f2c4 0001 	movt	r0, #16385	; 0x4001
	Lcd_WR_DATA(Lcd_RegValue);
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
 8006d3c:	f024 0410 	bic.w	r4, r4, #16
 8006d40:	60cc      	str	r4, [r1, #12]
   Lcd_RS_REG();
 8006d42:	68c1      	ldr	r1, [r0, #12]
   _SPI1_Write_Byte(Data>>8);
 8006d44:	0a14      	lsrs	r4, r2, #8
}

void Lcd_Write_Data_16Bit(unsigned short Data)
{
   Lcd_CS_EN();
   Lcd_RS_REG();
 8006d46:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006d4a:	60c1      	str	r1, [r0, #12]
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d4c:	4619      	mov	r1, r3
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d4e:	819c      	strh	r4, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d50:	890b      	ldrh	r3, [r1, #8]
 8006d52:	079d      	lsls	r5, r3, #30
 8006d54:	d5fc      	bpl.n	8006d50 <Lcd_Put_Pixel+0x378>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006d56:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8006d5a:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8006d5e:	8901      	ldrh	r1, [r0, #8]
 8006d60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006d64:	060c      	lsls	r4, r1, #24
 8006d66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d6a:	d4f8      	bmi.n	8006d5e <Lcd_Put_Pixel+0x386>
	Macro_Set_Bit(SPI1->CR1, 6);
}

static void _SPI1_Write_Byte(unsigned char data)
{
	SPI1->DR = (data & 0xff);
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	819a      	strh	r2, [r3, #12]
	while(Macro_Check_Bit_Clear(SPI1->SR, 1));
 8006d70:	891a      	ldrh	r2, [r3, #8]
 8006d72:	0790      	lsls	r0, r2, #30
 8006d74:	d5fc      	bpl.n	8006d70 <Lcd_Put_Pixel+0x398>
	while(Macro_Check_Bit_Set(SPI1->SR, 7));
 8006d76:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006d7a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8006d7e:	8913      	ldrh	r3, [r2, #8]
 8006d80:	0619      	lsls	r1, r3, #24
 8006d82:	d4fc      	bmi.n	8006d7e <Lcd_Put_Pixel+0x3a6>
{
   Lcd_CS_EN();
   Lcd_RS_REG();
   _SPI1_Write_Byte(Data>>8);
   _SPI1_Write_Byte(Data);
   Lcd_CS_DIS();
 8006d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	f042 0210 	orr.w	r2, r2, #16
 8006d92:	60da      	str	r2, [r3, #12]

void Lcd_Put_Pixel(unsigned short x, unsigned short y, unsigned short color)
{
	Lcd_Set_Cursor(x,y);
	Lcd_Write_Data_16Bit(color);
}
 8006d94:	bcf0      	pop	{r4, r5, r6, r7}
 8006d96:	4770      	bx	lr

08006d98 <LED_Init>:
#include "device_driver.h"

void LED_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8006d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d9c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006da0:	6991      	ldr	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRH, 0xff, 0x66, 0);
 8006da2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
#include "device_driver.h"

void LED_Init(void)
{
	Macro_Set_Bit(RCC->APB2ENR, 3);
 8006da6:	f041 0108 	orr.w	r1, r1, #8
 8006daa:	6191      	str	r1, [r2, #24]
	Macro_Write_Block(GPIOB->CRH, 0xff, 0x66, 0);
 8006dac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006db6:	f042 0266 	orr.w	r2, r2, #102	; 0x66
 8006dba:	605a      	str	r2, [r3, #4]
	Macro_Set_Area(GPIOB->ODR, 0x3, 8);
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop

08006dc8 <LED_Display>:
}

void LED_Display(unsigned int num)
{
	Macro_Write_Block(GPIOB->ODR, 0x3, (~num & 3), 8);
 8006dc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	43c0      	mvns	r0, r0
 8006dd4:	f000 0003 	and.w	r0, r0, #3
 8006dd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ddc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	4770      	bx	lr

08006de4 <LED_All_On>:
}

void LED_All_On(void)
{
	Macro_Clear_Area(GPIOB->ODR, 0x3, 8);
 8006de4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006de8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop

08006df8 <LED_All_Off>:
}

void LED_All_Off(void)
{
	Macro_Set_Area(GPIOB->ODR, 0x3, 8);
 8006df8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop

08006e0c <System_Init>:
extern volatile int TIM4_expired;
extern volatile int Jog_key_in;
extern volatile int Jog_key;

void System_Init(void)
{
 8006e0c:	b508      	push	{r3, lr}
	Clock_Init();
 8006e0e:	f7fc f9ed 	bl	80031ec <Clock_Init>
	LED_Init();
 8006e12:	f7ff ffc1 	bl	8006d98 <LED_Init>
	Key_Poll_Init();
 8006e16:	f7fc fef3 	bl	8003c00 <Key_Poll_Init>
	Uart1_Init(115200);
 8006e1a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8006e1e:	f000 fc2f 	bl	8007680 <Uart1_Init>

	SCB->VTOR = 0x08003000;
 8006e22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006e26:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006e2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006e2e:	f6c0 0200 	movt	r2, #2048	; 0x800
	SCB->SHCSR = 7<<16;
 8006e32:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
	Clock_Init();
	LED_Init();
	Key_Poll_Init();
	Uart1_Init(115200);

	SCB->VTOR = 0x08003000;
 8006e36:	609a      	str	r2, [r3, #8]
	SCB->SHCSR = 7<<16;
 8006e38:	6259      	str	r1, [r3, #36]	; 0x24
 8006e3a:	bd08      	pop	{r3, pc}

08006e3c <Main>:
}

#define DIPLAY_MODE		3

void Main(void)
{
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	b089      	sub	sp, #36	; 0x24
	System_Init();
 8006e42:	f7ff ffe3 	bl	8006e0c <System_Init>
	Uart_Printf("Game Project\n");
 8006e46:	f64e 7028 	movw	r0, #61224	; 0xef28
 8006e4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006e4e:	f000 fcb3 	bl	80077b8 <Uart1_Printf>

	Lcd_Init(DIPLAY_MODE);
 8006e52:	2003      	movs	r0, #3
 8006e54:	f7fd feac 	bl	8004bb0 <Lcd_Init>
	Jog_Poll_Init();
 8006e58:	f7fc fd8e 	bl	8003978 <Jog_Poll_Init>
	Jog_ISR_Enable(1);
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f7fc fe53 	bl	8003b08 <Jog_ISR_Enable>
	Uart1_RX_Interrupt_Enable(1);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f000 fd9c 	bl	80079a0 <Uart1_RX_Interrupt_Enable>
	Lcd_Clr_Screen();
 8006e68:	f7fd fe42 	bl	8004af0 <Lcd_Clr_Screen>
	int frog_pos_x = (LCDW / 2) - 5, frog_pos_y = Y_MAX - 10;
	int car_pos_x = 0, car_pos_y = (LCDH / 2) - 5;
	int car_color = 1;
	int tick_count = 0;

	TIM4_Repeat_Interrupt_Enable(1, TIMER_PERIOD*10);
 8006e6c:	2001      	movs	r0, #1
 8006e6e:	2164      	movs	r1, #100	; 0x64
 8006e70:	f000 fba8 	bl	80075c4 <TIM4_Repeat_Interrupt_Enable>

	Lcd_Printf(0,0,BLUE,WHITE,1,1,"Hello %d", 100);
 8006e74:	f64e 7338 	movw	r3, #61240	; 0xef38
 8006e78:	2601      	movs	r6, #1
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006e80:	2264      	movs	r2, #100	; 0x64
 8006e82:	4601      	mov	r1, r0
 8006e84:	9302      	str	r3, [sp, #8]
 8006e86:	9600      	str	r6, [sp, #0]
 8006e88:	9601      	str	r6, [sp, #4]
 8006e8a:	9203      	str	r2, [sp, #12]
 8006e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e90:	221f      	movs	r2, #31
 8006e92:	f7fc fc45 	bl	8003720 <Lcd_Printf>

	Lcd_Draw_Box(frog_pos_x, frog_pos_y, 10, 10, color[0]);
 8006e96:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	9400      	str	r4, [sp, #0]
 8006ea0:	209b      	movs	r0, #155	; 0x9b
 8006ea2:	21e5      	movs	r1, #229	; 0xe5
 8006ea4:	f7fd fe28 	bl	8004af8 <Lcd_Draw_Box>
	Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[0]);
 8006ea8:	2214      	movs	r2, #20
 8006eaa:	4613      	mov	r3, r2
 8006eac:	9400      	str	r4, [sp, #0]
 8006eae:	2173      	movs	r1, #115	; 0x73
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f7fd fe21 	bl	8004af8 <Lcd_Draw_Box>
 8006eb6:	f240 5aa0 	movw	sl, #1440	; 0x5a0
 8006eba:	f64e 7150 	movw	r1, #61264	; 0xef50
			Jog_key_in = 0;
		}

		if(TIM4_expired) 
		{
			tick_count = (tick_count + 1) % 10;
 8006ebe:	f246 6267 	movw	r2, #26215	; 0x6667

			if(tick_count == 0) 
			{
				Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[car_color]);
				car_color = (car_color + 1) % (sizeof(color)/sizeof(color[0]));
 8006ec2:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8006ec6:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8006eca:	f240 55a4 	movw	r5, #1444	; 0x5a4
 8006ece:	f64e 4958 	movw	r9, #60504	; 0xec58
 8006ed2:	f240 54a8 	movw	r4, #1448	; 0x5a8
 8006ed6:	f6c0 0100 	movt	r1, #2048	; 0x800
			Jog_key_in = 0;
		}

		if(TIM4_expired) 
		{
			tick_count = (tick_count + 1) % 10;
 8006eda:	f2c6 6266 	movt	r2, #26214	; 0x6666

			if(tick_count == 0) 
			{
				Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[car_color]);
				car_color = (car_color + 1) % (sizeof(color)/sizeof(color[0]));
 8006ede:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
	Uart1_RX_Interrupt_Enable(1);
	Lcd_Clr_Screen();

	int frog_pos_x = (LCDW / 2) - 5, frog_pos_y = Y_MAX - 10;
	int car_pos_x = 0, car_pos_y = (LCDH / 2) - 5;
	int car_color = 1;
 8006ee2:	9606      	str	r6, [sp, #24]
	Lcd_Draw_Box(frog_pos_x, frog_pos_y, 10, 10, color[0]);
	Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[0]);

	for(;;)
	{
		if(Jog_key_in) 
 8006ee4:	46d3      	mov	fp, sl
 8006ee6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8006eea:	9104      	str	r1, [sp, #16]
 8006eec:	f6c0 0900 	movt	r9, #2048	; 0x800
 8006ef0:	f2c2 0400 	movt	r4, #8192	; 0x2000
			Jog_key_in = 0;
		}

		if(TIM4_expired) 
		{
			tick_count = (tick_count + 1) % 10;
 8006ef4:	9205      	str	r2, [sp, #20]

			if(tick_count == 0) 
			{
				Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[car_color]);
				car_color = (car_color + 1) % (sizeof(color)/sizeof(color[0]));
 8006ef6:	9307      	str	r3, [sp, #28]
	Lcd_Clr_Screen();

	int frog_pos_x = (LCDW / 2) - 5, frog_pos_y = Y_MAX - 10;
	int car_pos_x = 0, car_pos_y = (LCDH / 2) - 5;
	int car_color = 1;
	int tick_count = 0;
 8006ef8:	2700      	movs	r7, #0
	for(;;)
	{
		if(Jog_key_in) 
		{
			Uart_Printf("KEY = %d\n", Jog_key);
			Lcd_Printf(200,0,RED,BLACK,2,2,"KEY = %d", Jog_key);
 8006efa:	2602      	movs	r6, #2
 8006efc:	4653      	mov	r3, sl
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	46ba      	mov	sl, r7
 8006f04:	461f      	mov	r7, r3
 8006f06:	e001      	b.n	8006f0c <Main+0xd0>
			Lcd_Draw_Box(frog_pos_x, frog_pos_y, 10, 10, color[Jog_key]);
			Jog_key_in = 0;
		}

		if(TIM4_expired) 
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	bb2b      	cbnz	r3, 8006f58 <Main+0x11c>
	Lcd_Draw_Box(frog_pos_x, frog_pos_y, 10, 10, color[0]);
	Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[0]);

	for(;;)
	{
		if(Jog_key_in) 
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0fa      	beq.n	8006f08 <Main+0xcc>
		{
			Uart_Printf("KEY = %d\n", Jog_key);
 8006f12:	f64e 7044 	movw	r0, #61252	; 0xef44
 8006f16:	6829      	ldr	r1, [r5, #0]
 8006f18:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006f1c:	f000 fc4c 	bl	80077b8 <Uart1_Printf>
			Lcd_Printf(200,0,RED,BLACK,2,2,"KEY = %d", Jog_key);
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	2100      	movs	r1, #0
 8006f26:	9202      	str	r2, [sp, #8]
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	20c8      	movs	r0, #200	; 0xc8
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f32:	9600      	str	r6, [sp, #0]
 8006f34:	9601      	str	r6, [sp, #4]
 8006f36:	f7fc fbf3 	bl	8003720 <Lcd_Printf>
			Lcd_Draw_Box(frog_pos_x, frog_pos_y, 10, 10, color[Jog_key]);
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8006f42:	209b      	movs	r0, #155	; 0x9b
 8006f44:	4613      	mov	r3, r2
 8006f46:	9100      	str	r1, [sp, #0]
 8006f48:	21e5      	movs	r1, #229	; 0xe5
 8006f4a:	f7fd fdd5 	bl	8004af8 <Lcd_Draw_Box>
			Jog_key_in = 0;
 8006f4e:	f8cb 8000 	str.w	r8, [fp]
		}

		if(TIM4_expired) 
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0d9      	beq.n	8006f0c <Main+0xd0>
 8006f58:	463b      	mov	r3, r7
		{
			tick_count = (tick_count + 1) % 10;
 8006f5a:	9905      	ldr	r1, [sp, #20]
 8006f5c:	4657      	mov	r7, sl
 8006f5e:	469a      	mov	sl, r3
 8006f60:	1c7b      	adds	r3, r7, #1
 8006f62:	fb81 1703 	smull	r1, r7, r1, r3
 8006f66:	17da      	asrs	r2, r3, #31
 8006f68:	ebc2 07a7 	rsb	r7, r2, r7, asr #2
 8006f6c:	eb07 0787 	add.w	r7, r7, r7, lsl #2

			if(tick_count == 0) 
 8006f70:	ebb3 0747 	subs.w	r7, r3, r7, lsl #1
 8006f74:	d002      	beq.n	8006f7c <Main+0x140>
			{
				Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[car_color]);
				car_color = (car_color + 1) % (sizeof(color)/sizeof(color[0]));
			}
			
			TIM4_expired = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	e7bf      	b.n	8006efc <Main+0xc0>
		{
			tick_count = (tick_count + 1) % 10;

			if(tick_count == 0) 
			{
				Lcd_Draw_Box(car_pos_x, car_pos_y, 20, 20, color[car_color]);
 8006f7c:	9a06      	ldr	r2, [sp, #24]
 8006f7e:	2173      	movs	r1, #115	; 0x73
 8006f80:	f839 3012 	ldrh.w	r3, [r9, r2, lsl #1]
 8006f84:	2214      	movs	r2, #20
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	f7fd fdb4 	bl	8004af8 <Lcd_Draw_Box>
				car_color = (car_color + 1) % (sizeof(color)/sizeof(color[0]));
 8006f90:	9906      	ldr	r1, [sp, #24]
 8006f92:	1c4b      	adds	r3, r1, #1
 8006f94:	9907      	ldr	r1, [sp, #28]
 8006f96:	fba1 1203 	umull	r1, r2, r1, r3
 8006f9a:	0892      	lsrs	r2, r2, #2
 8006f9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006fa0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8006fa4:	9206      	str	r2, [sp, #24]
 8006fa6:	e7e6      	b.n	8006f76 <Main+0x13a>

08006fa8 <_sbrk>:
#include "device_driver.h"

char * _sbrk(int inc)
{
 8006fa8:	b410      	push	{r4}
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8006faa:	f240 5398 	movw	r3, #1432	; 0x598
 8006fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fb2:	6819      	ldr	r1, [r3, #0]
#include "device_driver.h"

char * _sbrk(int inc)
{
 8006fb4:	4602      	mov	r2, r0
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8006fb6:	b181      	cbz	r1, 8006fda <_sbrk+0x32>
 8006fb8:	4c0b      	ldr	r4, [pc, #44]	; (8006fe8 <_sbrk+0x40>)
 8006fba:	4608      	mov	r0, r1
 8006fbc:	f024 0107 	bic.w	r1, r4, #7

	prevHeap = heap;
	nextHeap = (char *)((((unsigned int)heap + inc) + 0x7) & ~0x7);
 8006fc0:	3207      	adds	r2, #7
 8006fc2:	4402      	add	r2, r0
 8006fc4:	f022 0207 	bic.w	r2, r2, #7

	if((unsigned int)nextHeap >= HEAP_LIMIT) return (char *)0;
 8006fc8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8006fcc:	428a      	cmp	r2, r1

	heap = nextHeap;
 8006fce:	bf34      	ite	cc
 8006fd0:	601a      	strcc	r2, [r3, #0]
	if(heap == (char *)0) heap = (char *)HEAP_BASE;

	prevHeap = heap;
	nextHeap = (char *)((((unsigned int)heap + inc) + 0x7) & ~0x7);

	if((unsigned int)nextHeap >= HEAP_LIMIT) return (char *)0;
 8006fd2:	2000      	movcs	r0, #0

	heap = nextHeap;
	return prevHeap;
}
 8006fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fd8:	4770      	bx	lr
	static char * heap = (char *)0;

	char * prevHeap;
	char * nextHeap;

	if(heap == (char *)0) heap = (char *)HEAP_BASE;
 8006fda:	4903      	ldr	r1, [pc, #12]	; (8006fe8 <_sbrk+0x40>)
 8006fdc:	f021 0107 	bic.w	r1, r1, #7
 8006fe0:	6019      	str	r1, [r3, #0]
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	e7ec      	b.n	8006fc0 <_sbrk+0x18>
 8006fe6:	bf00      	nop
 8006fe8:	200005fb 	strdcs	r0, [r0], -fp

08006fec <Stack_Dump>:
}

static char * const Stack_reg[] = {"R0","R1","R2","R3","R12","LR","RA","xPSR"};

static void Stack_Dump(const char * stack, unsigned int * sp)
{
 8006fec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4d0b      	ldr	r5, [pc, #44]	; (8007020 <Stack_Dump+0x34>)
}

static char * const Stack_reg[] = {"R0","R1","R2","R3","R12","LR","RA","xPSR"};

static void Stack_Dump(const char * stack, unsigned int * sp)
{
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	460f      	mov	r7, r1
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8006ff8:	461c      	mov	r4, r3
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
 8006ffa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8006ffe:	f64e 705c 	movw	r0, #61276	; 0xef5c
 8007002:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007006:	9200      	str	r2, [sp, #0]
 8007008:	f6c0 0000 	movt	r0, #2048	; 0x800
 800700c:	4622      	mov	r2, r4
 800700e:	4631      	mov	r1, r6

static void Stack_Dump(const char * stack, unsigned int * sp)
{
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8007010:	3401      	adds	r4, #1
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
 8007012:	f000 fbd1 	bl	80077b8 <Uart1_Printf>

static void Stack_Dump(const char * stack, unsigned int * sp)
{
	int i;

	for(i=0; i<(sizeof(Stack_reg)/sizeof(Stack_reg[0])); i++)
 8007016:	2c08      	cmp	r4, #8
 8007018:	4623      	mov	r3, r4
 800701a:	d1ee      	bne.n	8006ffa <Stack_Dump+0xe>
	{
		Uart1_Printf("%s[%d],%s=0x%.8X\n", stack, i, Stack_reg[i], sp[i]);
	}
}
 800701c:	b003      	add	sp, #12
 800701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007020:	0800ec60 	stmdaeq	r0, {r5, r6, sl, fp, sp, lr, pc}

08007024 <Invalid_ISR>:
/* Includes ------------------------------------------------------------------*/

#include "device_driver.h"

void Invalid_ISR(void)
{
 8007024:	b508      	push	{r3, lr}
  Uart1_Printf("Invalid_Exception: %d!\n", Macro_Extract_Area(SCB->ICSR, 0x1ff, 0));
 8007026:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 800702a:	f2ce 0400 	movt	r4, #57344	; 0xe000
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	f64e 7070 	movw	r0, #61296	; 0xef70
 8007034:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007038:	f6c0 0000 	movt	r0, #2048	; 0x800
 800703c:	f000 fbbc 	bl	80077b8 <Uart1_Printf>
  Uart1_Printf("Invalid_ISR: %d!\n", Macro_Extract_Area(SCB->ICSR, 0x1ff, 0) - 16);
 8007040:	6861      	ldr	r1, [r4, #4]
 8007042:	f64e 7088 	movw	r0, #61320	; 0xef88
 8007046:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800704a:	3910      	subs	r1, #16
 800704c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007050:	f000 fbb2 	bl	80077b8 <Uart1_Printf>
 8007054:	e7fe      	b.n	8007054 <Invalid_ISR+0x30>
 8007056:	bf00      	nop

08007058 <NMI_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
	Uart1_Printf("NMI!\n");
 8007058:	f64e 709c 	movw	r0, #61340	; 0xef9c
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void NMI_Handler(void)
{
 800705c:	b508      	push	{r3, lr}
	Uart1_Printf("NMI!\n");
 800705e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007062:	f000 fba9 	bl	80077b8 <Uart1_Printf>
 8007066:	e7fe      	b.n	8007066 <NMI_Handler+0xe>

08007068 <HardFault_Handler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8007068:	4604      	mov	r4, r0
	Uart1_Printf("Hard Fault!\n");
 800706a:	f64e 70a4 	movw	r0, #61348	; 0xefa4
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 800706e:	b508      	push	{r3, lr}
	Uart1_Printf("Hard Fault!\n");
 8007070:	f6c0 0000 	movt	r0, #2048	; 0x800
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void HardFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8007074:	4616      	mov	r6, r2
 8007076:	460d      	mov	r5, r1
	Uart1_Printf("Hard Fault!\n");
 8007078:	f000 fb9e 	bl	80077b8 <Uart1_Printf>
	}
}

static void Fault_Report(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("LR(EXC_RETURN)=0x%.8X\n", lr);
 800707c:	f64e 70b4 	movw	r0, #61364	; 0xefb4
 8007080:	4629      	mov	r1, r5
 8007082:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007086:	f000 fb97 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("MSP=0x%.8X\n", msp);
 800708a:	f64e 70cc 	movw	r0, #61388	; 0xefcc
 800708e:	4621      	mov	r1, r4
 8007090:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007094:	f000 fb90 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("PSP=0x%.8X\n", psp);
 8007098:	f64e 70d8 	movw	r0, #61400	; 0xefd8
 800709c:	4631      	mov	r1, r6
 800709e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80070a2:	f000 fb89 	bl	80077b8 <Uart1_Printf>

	switch((lr & (0xF<<28))|(lr & 0xF))
 80070a6:	230f      	movs	r3, #15
 80070a8:	f2cf 0300 	movt	r3, #61440	; 0xf000
 80070ac:	2209      	movs	r2, #9
 80070ae:	402b      	ands	r3, r5
 80070b0:	f2cf 0200 	movt	r2, #61440	; 0xf000
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d050      	beq.n	800715a <HardFault_Handler+0xf2>
 80070b8:	220d      	movs	r2, #13
 80070ba:	f2cf 0200 	movt	r2, #61440	; 0xf000
 80070be:	4293      	cmp	r3, r2
 80070c0:	d059      	beq.n	8007176 <HardFault_Handler+0x10e>
 80070c2:	2201      	movs	r2, #1
 80070c4:	f2cf 0200 	movt	r2, #61440	; 0xf000
 80070c8:	4293      	cmp	r3, r2
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
 80070ca:	bf04      	itt	eq
 80070cc:	f64e 70e4 	movweq	r0, #61412	; 0xefe4
 80070d0:	f6c0 0000 	movteq	r0, #2048	; 0x800
{
	Uart1_Printf("LR(EXC_RETURN)=0x%.8X\n", lr);
	Uart1_Printf("MSP=0x%.8X\n", msp);
	Uart1_Printf("PSP=0x%.8X\n", psp);

	switch((lr & (0xF<<28))|(lr & 0xF))
 80070d4:	d045      	beq.n	8007162 <HardFault_Handler+0xfa>
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
		case 0xF0000009: Uart1_Printf("Exception occurs from thread mode with MSP\n"); Stack_Dump("MSP", msp); break;
		case 0xF000000d: Uart1_Printf("Exception occurs from thread mode with PSP\n"); Stack_Dump("PSP", psp); break;
		default: Uart1_Printf("Invalid exception return value => %#.8X\n", lr & 0xf); break;
 80070d6:	f24f 0068 	movw	r0, #61544	; 0xf068
 80070da:	f005 010f 	and.w	r1, r5, #15
 80070de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80070e2:	f000 fb69 	bl	80077b8 <Uart1_Printf>
	}

	Uart1_Printf("SHCSR => %#.8X\n", SCB->SHCSR);
 80070e6:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 80070ea:	f2ce 0400 	movt	r4, #57344	; 0xe000
 80070ee:	f24f 0094 	movw	r0, #61588	; 0xf094
 80070f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80070f8:	f000 fb5e 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("CFSR(Fault Reason) => %#.8X\n", SCB->CFSR);
 80070fc:	f24f 00a4 	movw	r0, #61604	; 0xf0a4
 8007100:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007102:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007106:	f000 fb57 	bl	80077b8 <Uart1_Printf>
{
	Uart1_Printf("Hard Fault!\n");

	Fault_Report(msp, lr, psp);

	Uart1_Printf("MMFAR Valid => %d\n", Macro_Check_Bit_Set(SCB->CFSR, 7));
 800710a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800710c:	f24f 00c4 	movw	r0, #61636	; 0xf0c4
 8007110:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8007114:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007118:	f000 fb4e 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("MMFAR => %#.8X\n", SCB->MMFAR);
 800711c:	f24f 00d8 	movw	r0, #61656	; 0xf0d8
 8007120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007122:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007126:	f000 fb47 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("BFAR Valid => %d\n", Macro_Check_Bit_Set(SCB->CFSR, 15));
 800712a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800712c:	f24f 00e8 	movw	r0, #61672	; 0xf0e8
 8007130:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8007134:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007138:	f000 fb3e 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("BFAR => %#.8X\n", SCB->BFAR);
 800713c:	f24f 00fc 	movw	r0, #61692	; 0xf0fc
 8007140:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007142:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007146:	f000 fb37 	bl	80077b8 <Uart1_Printf>
	Uart1_Printf("HFSR(Hard Fault Reason) => %#.8X\n", SCB->HFSR);
 800714a:	f24f 100c 	movw	r0, #61708	; 0xf10c
 800714e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007150:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007154:	f000 fb30 	bl	80077b8 <Uart1_Printf>
 8007158:	e7fe      	b.n	8007158 <HardFault_Handler+0xf0>
	Uart1_Printf("PSP=0x%.8X\n", psp);

	switch((lr & (0xF<<28))|(lr & 0xF))
	{
		case 0xF0000001: Uart1_Printf("Exception occurs from handler mode\n"); Stack_Dump("MSP", msp); break;
		case 0xF0000009: Uart1_Printf("Exception occurs from thread mode with MSP\n"); Stack_Dump("MSP", msp); break;
 800715a:	f24f 000c 	movw	r0, #61452	; 0xf00c
 800715e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007162:	f000 fb29 	bl	80077b8 <Uart1_Printf>
 8007166:	f24f 0008 	movw	r0, #61448	; 0xf008
 800716a:	4621      	mov	r1, r4
 800716c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007170:	f7ff ff3c 	bl	8006fec <Stack_Dump>
 8007174:	e7b7      	b.n	80070e6 <HardFault_Handler+0x7e>
		case 0xF000000d: Uart1_Printf("Exception occurs from thread mode with PSP\n"); Stack_Dump("PSP", psp); break;
 8007176:	f24f 0038 	movw	r0, #61496	; 0xf038
 800717a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800717e:	f000 fb1b 	bl	80077b8 <Uart1_Printf>
 8007182:	f24f 0064 	movw	r0, #61540	; 0xf064
 8007186:	4631      	mov	r1, r6
 8007188:	f6c0 0000 	movt	r0, #2048	; 0x800
 800718c:	f7ff ff2e 	bl	8006fec <Stack_Dump>
 8007190:	e7a9      	b.n	80070e6 <HardFault_Handler+0x7e>
 8007192:	bf00      	nop

08007194 <MemManage_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Memory Management Fault!\n");
 8007194:	f24f 1030 	movw	r0, #61744	; 0xf130
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void MemManage_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 8007198:	b508      	push	{r3, lr}
	Uart1_Printf("Memory Management Fault!\n");
 800719a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800719e:	f000 fb0b 	bl	80077b8 <Uart1_Printf>
 80071a2:	e7fe      	b.n	80071a2 <MemManage_Handler+0xe>

080071a4 <BusFault_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Bus Fault!\n");
 80071a4:	f24f 104c 	movw	r0, #61772	; 0xf14c
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void BusFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 80071a8:	b508      	push	{r3, lr}
	Uart1_Printf("Bus Fault!\n");
 80071aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80071ae:	f000 fb03 	bl	80077b8 <Uart1_Printf>
 80071b2:	e7fe      	b.n	80071b2 <BusFault_Handler+0xe>

080071b4 <UsageFault_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
	Uart1_Printf("Usage Fault!\n");
 80071b4:	f24f 1058 	movw	r0, #61784	; 0xf158
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void UsageFault_Handler(unsigned int * msp, unsigned int lr, unsigned int * psp)
{
 80071b8:	b508      	push	{r3, lr}
	Uart1_Printf("Usage Fault!\n");
 80071ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80071be:	f000 fafb 	bl	80077b8 <Uart1_Printf>
 80071c2:	e7fe      	b.n	80071c2 <UsageFault_Handler+0xe>

080071c4 <SVC_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
	Uart1_Printf("SVC Call\n");
 80071c4:	f24f 1068 	movw	r0, #61800	; 0xf168
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SVC_Handler(void)
{
 80071c8:	b508      	push	{r3, lr}
	Uart1_Printf("SVC Call\n");
 80071ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80071ce:	f000 faf3 	bl	80077b8 <Uart1_Printf>
 80071d2:	e7fe      	b.n	80071d2 <SVC_Handler+0xe>

080071d4 <DebugMon_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
	Uart1_Printf("DebugMon Call\n");
 80071d4:	f24f 1074 	movw	r0, #61812	; 0xf174
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DebugMon_Handler(void)
{
 80071d8:	b508      	push	{r3, lr}
	Uart1_Printf("DebugMon Call\n");
 80071da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80071de:	f000 faeb 	bl	80077b8 <Uart1_Printf>
 80071e2:	e7fe      	b.n	80071e2 <DebugMon_Handler+0xe>

080071e4 <PendSV_Handler>:
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
	Uart1_Printf("PendSV Call\n");
 80071e4:	f24f 1084 	movw	r0, #61828	; 0xf184
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PendSV_Handler(void)
{
 80071e8:	b508      	push	{r3, lr}
	Uart1_Printf("PendSV Call\n");
 80071ea:	f6c0 0000 	movt	r0, #2048	; 0x800
 80071ee:	f000 fae3 	bl	80077b8 <Uart1_Printf>
 80071f2:	e7fe      	b.n	80071f2 <PendSV_Handler+0xe>

080071f4 <SysTick_Handler>:
 *******************************************************************************/
volatile int SysTick_Flag = 0;

void SysTick_Handler(void)
{
	SysTick_Flag = 1;
 80071f4:	f240 539c 	movw	r3, #1436	; 0x59c
 80071f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80071fc:	2201      	movs	r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop

08007204 <WWDG_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void WWDG_IRQHandler(void)
{
 8007204:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007206:	f7ff ff0d 	bl	8007024 <Invalid_ISR>
 800720a:	bf00      	nop

0800720c <PVD_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void PVD_IRQHandler(void)
{
 800720c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800720e:	f7ff ff09 	bl	8007024 <Invalid_ISR>
 8007212:	bf00      	nop

08007214 <TAMPER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TAMPER_IRQHandler(void)
{
 8007214:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007216:	f7ff ff05 	bl	8007024 <Invalid_ISR>
 800721a:	bf00      	nop

0800721c <RTC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RTC_IRQHandler(void)
{
 800721c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800721e:	f7ff ff01 	bl	8007024 <Invalid_ISR>
 8007222:	bf00      	nop

08007224 <FLASH_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void FLASH_IRQHandler(void)
{
 8007224:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007226:	f7ff fefd 	bl	8007024 <Invalid_ISR>
 800722a:	bf00      	nop

0800722c <RCC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RCC_IRQHandler(void)
{
 800722c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800722e:	f7ff fef9 	bl	8007024 <Invalid_ISR>
 8007232:	bf00      	nop

08007234 <EXTI0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8007234:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007236:	f7ff fef5 	bl	8007024 <Invalid_ISR>
 800723a:	bf00      	nop

0800723c <EXTI1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI1_IRQHandler(void)
{
 800723c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800723e:	f7ff fef1 	bl	8007024 <Invalid_ISR>
 8007242:	bf00      	nop

08007244 <EXTI2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8007244:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007246:	f7ff feed 	bl	8007024 <Invalid_ISR>
 800724a:	bf00      	nop

0800724c <EXTI3_IRQHandler>:
 *******************************************************************************/
 volatile int Jog_key_in = 0;
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
 800724c:	b470      	push	{r4, r5, r6}
   // UP
   Jog_key_in = 1;
 800724e:	f240 539c 	movw	r3, #1436	; 0x59c
   Jog_key = 0;
   EXTI->PR = 0x1<<3;
 8007252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8007256:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
   // UP
   Jog_key_in = 1;
 800725a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800725e:	2601      	movs	r6, #1
   Jog_key = 0;
 8007260:	2500      	movs	r5, #0
   EXTI->PR = 0x1<<3;
 8007262:	2408      	movs	r4, #8
 8007264:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8007268:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800726c:	f44f 7000 	mov.w	r0, #512	; 0x200
 volatile int Jog_key = 0;
 
 void EXTI3_IRQHandler(void)
 {
   // UP
   Jog_key_in = 1;
 8007270:	605e      	str	r6, [r3, #4]
   Jog_key = 0;
 8007272:	609d      	str	r5, [r3, #8]
   EXTI->PR = 0x1<<3;
 8007274:	614c      	str	r4, [r1, #20]
 8007276:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
   NVIC_ClearPendingIRQ(EXTI3_IRQn);
 }
 800727a:	bc70      	pop	{r4, r5, r6}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <EXTI4_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8007280:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007282:	f7ff fecf 	bl	8007024 <Invalid_ISR>
 8007286:	bf00      	nop

08007288 <DMA1_Channel1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
 8007288:	b508      	push	{r3, lr}
  Invalid_ISR();
 800728a:	f7ff fecb 	bl	8007024 <Invalid_ISR>
 800728e:	bf00      	nop

08007290 <DMA1_Channel2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
 8007290:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007292:	f7ff fec7 	bl	8007024 <Invalid_ISR>
 8007296:	bf00      	nop

08007298 <DMA1_Channel3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
 8007298:	b508      	push	{r3, lr}
  Invalid_ISR();
 800729a:	f7ff fec3 	bl	8007024 <Invalid_ISR>
 800729e:	bf00      	nop

080072a0 <DMA1_Channel4_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
 80072a0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072a2:	f7ff febf 	bl	8007024 <Invalid_ISR>
 80072a6:	bf00      	nop

080072a8 <DMA1_Channel5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
 80072a8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072aa:	f7ff febb 	bl	8007024 <Invalid_ISR>
 80072ae:	bf00      	nop

080072b0 <DMA1_Channel6_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
 80072b0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072b2:	f7ff feb7 	bl	8007024 <Invalid_ISR>
 80072b6:	bf00      	nop

080072b8 <DMA1_Channel7_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
 80072b8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072ba:	f7ff feb3 	bl	8007024 <Invalid_ISR>
 80072be:	bf00      	nop

080072c0 <ADC1_2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void ADC1_2_IRQHandler(void)
{
 80072c0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072c2:	f7ff feaf 	bl	8007024 <Invalid_ISR>
 80072c6:	bf00      	nop

080072c8 <USB_HP_CAN_TX_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 80072c8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072ca:	f7ff feab 	bl	8007024 <Invalid_ISR>
 80072ce:	bf00      	nop

080072d0 <USB_LP_CAN_RX0_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80072d0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072d2:	f7ff fea7 	bl	8007024 <Invalid_ISR>
 80072d6:	bf00      	nop

080072d8 <CAN_RX1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 80072d8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072da:	f7ff fea3 	bl	8007024 <Invalid_ISR>
 80072de:	bf00      	nop

080072e0 <CAN_SCE_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 80072e0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80072e2:	f7ff fe9f 	bl	8007024 <Invalid_ISR>
 80072e6:	bf00      	nop

080072e8 <EXTI9_5_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
 void EXTI9_5_IRQHandler(void)
 {
 80072e8:	b470      	push	{r4, r5, r6}
   // RLD
   static int EXTI9_5_LUT[8] = {0,1,2,0,3,0,0,0};
   Jog_key = EXTI9_5_LUT[Macro_Extract_Area(EXTI->PR,0x7,5)];
 80072ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80072f2:	6951      	ldr	r1, [r2, #20]
 80072f4:	f64e 4364 	movw	r3, #60516	; 0xec64
 80072f8:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80072fc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007300:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007304:	6a1e      	ldr	r6, [r3, #32]
 8007306:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800730a:	f240 539c 	movw	r3, #1436	; 0x59c
 800730e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   Jog_key_in = 1;
 8007312:	2501      	movs	r5, #1
   EXTI->PR = 0x7<<5;
 8007314:	24e0      	movs	r4, #224	; 0xe0
 8007316:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800731a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 *******************************************************************************/
 void EXTI9_5_IRQHandler(void)
 {
   // RLD
   static int EXTI9_5_LUT[8] = {0,1,2,0,3,0,0,0};
   Jog_key = EXTI9_5_LUT[Macro_Extract_Area(EXTI->PR,0x7,5)];
 800731e:	609e      	str	r6, [r3, #8]
   Jog_key_in = 1;
 8007320:	605d      	str	r5, [r3, #4]
   EXTI->PR = 0x7<<5;
 8007322:	6154      	str	r4, [r2, #20]
 8007324:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 }
 8007328:	bc70      	pop	{r4, r5, r6}
 800732a:	4770      	bx	lr

0800732c <TIM1_BRK_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 800732c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800732e:	f7ff fe79 	bl	8007024 <Invalid_ISR>
 8007332:	bf00      	nop

08007334 <TIM1_UP_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8007334:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007336:	f7ff fe75 	bl	8007024 <Invalid_ISR>
 800733a:	bf00      	nop

0800733c <TIM1_TRG_COM_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 800733c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800733e:	f7ff fe71 	bl	8007024 <Invalid_ISR>
 8007342:	bf00      	nop

08007344 <TIM1_CC_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 8007344:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007346:	f7ff fe6d 	bl	8007024 <Invalid_ISR>
 800734a:	bf00      	nop

0800734c <TIM2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM2_IRQHandler(void)
{
 800734c:	b508      	push	{r3, lr}
  Invalid_ISR();
 800734e:	f7ff fe69 	bl	8007024 <Invalid_ISR>
 8007352:	bf00      	nop

08007354 <TIM3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void TIM3_IRQHandler(void)
{
 8007354:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007356:	f7ff fe65 	bl	8007024 <Invalid_ISR>
 800735a:	bf00      	nop

0800735c <TIM4_IRQHandler>:
 *******************************************************************************/
 volatile int TIM4_expired = 0;

 void TIM4_IRQHandler(void)
 {
   TIM4_expired = 1;
 800735c:	f240 539c 	movw	r3, #1436	; 0x59c
 8007360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007364:	2101      	movs	r1, #1
   Macro_Clear_Bit(TIM4->SR, 0);
 8007366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 *******************************************************************************/
 volatile int TIM4_expired = 0;

 void TIM4_IRQHandler(void)
 {
   TIM4_expired = 1;
 800736a:	60d9      	str	r1, [r3, #12]
   Macro_Clear_Bit(TIM4->SR, 0);
 800736c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007370:	8a13      	ldrh	r3, [r2, #16]
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	8213      	strh	r3, [r2, #16]
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop

08007380 <I2C1_EV_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8007380:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007382:	f7ff fe4f 	bl	8007024 <Invalid_ISR>
 8007386:	bf00      	nop

08007388 <I2C1_ER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8007388:	b508      	push	{r3, lr}
  Invalid_ISR();
 800738a:	f7ff fe4b 	bl	8007024 <Invalid_ISR>
 800738e:	bf00      	nop

08007390 <I2C2_EV_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8007390:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007392:	f7ff fe47 	bl	8007024 <Invalid_ISR>
 8007396:	bf00      	nop

08007398 <I2C2_ER_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8007398:	b508      	push	{r3, lr}
  Invalid_ISR();
 800739a:	f7ff fe43 	bl	8007024 <Invalid_ISR>
 800739e:	bf00      	nop

080073a0 <SPI1_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SPI1_IRQHandler(void)
{
 80073a0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80073a2:	f7ff fe3f 	bl	8007024 <Invalid_ISR>
 80073a6:	bf00      	nop

080073a8 <SPI2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void SPI2_IRQHandler(void)
{
 80073a8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80073aa:	f7ff fe3b 	bl	8007024 <Invalid_ISR>
 80073ae:	bf00      	nop

080073b0 <USART1_IRQHandler>:
 *******************************************************************************/
 volatile int USART1_rx_ready = 0;
 volatile int USART1_rx_data;
 
 void USART1_IRQHandler(void)
 {
 80073b0:	b510      	push	{r4, lr}
   USART1_rx_ready = 1;
 80073b2:	f240 549c 	movw	r4, #1436	; 0x59c
 80073b6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80073ba:	2301      	movs	r3, #1
 80073bc:	6123      	str	r3, [r4, #16]
   USART1_rx_data = Uart1_Get_Pressed();
 80073be:	f000 fa2b 	bl	8007818 <Uart1_Get_Pressed>
 80073c2:	6160      	str	r0, [r4, #20]
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	bf00      	nop

080073c8 <USART2_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USART2_IRQHandler(void)
{
 80073c8:	b508      	push	{r3, lr}
  Invalid_ISR();
 80073ca:	f7ff fe2b 	bl	8007024 <Invalid_ISR>
 80073ce:	bf00      	nop

080073d0 <USART3_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USART3_IRQHandler(void)
{
 80073d0:	b508      	push	{r3, lr}
  Invalid_ISR();
 80073d2:	f7ff fe27 	bl	8007024 <Invalid_ISR>
 80073d6:	bf00      	nop

080073d8 <EXTI15_10_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
 void EXTI15_10_IRQHandler(void)
 {
 80073d8:	b470      	push	{r4, r5, r6}
   // 10
   static int EXTI15_10_LUT[4] = {0,4,5,0};
   Jog_key = EXTI15_10_LUT[Macro_Extract_Area(EXTI->PR, 0x3, 13)];
 80073da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073de:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80073e2:	6951      	ldr	r1, [r2, #20]
 80073e4:	f64e 4364 	movw	r3, #60516	; 0xec64
 80073e8:	f3c1 3141 	ubfx	r1, r1, #13, #2
 80073ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 80073f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80073f4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80073f6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80073fa:	f240 539c 	movw	r3, #1436	; 0x59c
 80073fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   Jog_key_in = 1;	
 8007402:	2501      	movs	r5, #1
   EXTI->PR = 0x3<<13;
 8007404:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
 8007408:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800740c:	f44f 7080 	mov.w	r0, #256	; 0x100
 *******************************************************************************/
 void EXTI15_10_IRQHandler(void)
 {
   // 10
   static int EXTI15_10_LUT[4] = {0,4,5,0};
   Jog_key = EXTI15_10_LUT[Macro_Extract_Area(EXTI->PR, 0x3, 13)];
 8007410:	609e      	str	r6, [r3, #8]
   Jog_key_in = 1;	
 8007412:	605d      	str	r5, [r3, #4]
   EXTI->PR = 0x3<<13;
 8007414:	6154      	str	r4, [r2, #20]
 8007416:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 }
 800741a:	bc70      	pop	{r4, r5, r6}
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <RTCAlarm_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8007420:	b508      	push	{r3, lr}
  Invalid_ISR();
 8007422:	f7ff fdff 	bl	8007024 <Invalid_ISR>
 8007426:	bf00      	nop

08007428 <USBWakeUp_IRQHandler>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8007428:	b508      	push	{r3, lr}
  Invalid_ISR();
 800742a:	f7ff fdfb 	bl	8007024 <Invalid_ISR>
 800742e:	bf00      	nop

08007430 <SysTick_OS_Tick>:
#include "device_driver.h"

void SysTick_OS_Tick(unsigned int msec)
{
 8007430:	b510      	push	{r4, lr}
  SysTick->CTRL = (0<<2)+(1<<1)+(0<<0);
 8007432:	f24e 0410 	movw	r4, #57360	; 0xe010
 8007436:	f2ce 0400 	movt	r4, #57344	; 0xe000
 800743a:	2302      	movs	r3, #2
 800743c:	6023      	str	r3, [r4, #0]
  SysTick->LOAD = (unsigned int)((HCLK/(8.*1000.))*msec+0.5);
 800743e:	f005 fd3b 	bl	800ceb8 <__aeabi_ui2d>
 8007442:	a30b      	add	r3, pc, #44	; (adr r3, 8007470 <SysTick_OS_Tick+0x40>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f005 fdac 	bl	800cfa4 <__aeabi_dmul>
 800744c:	2300      	movs	r3, #0
 800744e:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8007452:	2200      	movs	r2, #0
 8007454:	f005 fbf4 	bl	800cc40 <__adddf3>
 8007458:	f006 f866 	bl	800d528 <__aeabi_d2uiz>
  SysTick->VAL = 0;
 800745c:	2300      	movs	r3, #0
#include "device_driver.h"

void SysTick_OS_Tick(unsigned int msec)
{
  SysTick->CTRL = (0<<2)+(1<<1)+(0<<0);
  SysTick->LOAD = (unsigned int)((HCLK/(8.*1000.))*msec+0.5);
 800745e:	6060      	str	r0, [r4, #4]
  SysTick->VAL = 0;
 8007460:	60a3      	str	r3, [r4, #8]
  Macro_Set_Bit(SysTick->CTRL, 0);
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f043 0301 	orr.w	r3, r3, #1
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd10      	pop	{r4, pc}
 800746c:	f3af 8000 	nop.w
 8007470:	00000000 	andeq	r0, r0, r0
 8007474:	40c19400 	sbcmi	r9, r1, r0, lsl #8

08007478 <SysTick_Run>:
}

void SysTick_Run(unsigned int msec)
{
	SysTick->LOAD = (int)(HCLK/8000. + 0.5) * msec;
 8007478:	f242 3328 	movw	r3, #9000	; 0x2328
 800747c:	fb03 f000 	mul.w	r0, r3, r0
 8007480:	f24e 0310 	movw	r3, #57360	; 0xe010
 8007484:	f2ce 0300 	movt	r3, #57344	; 0xe000
	SysTick->VAL = 0;
 8007488:	2100      	movs	r1, #0
	SysTick->CTRL = (0<<2)|(0<<1)|(1<<0);
 800748a:	2201      	movs	r2, #1
  Macro_Set_Bit(SysTick->CTRL, 0);
}

void SysTick_Run(unsigned int msec)
{
	SysTick->LOAD = (int)(HCLK/8000. + 0.5) * msec;
 800748c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0;
 800748e:	6099      	str	r1, [r3, #8]
	SysTick->CTRL = (0<<2)|(0<<1)|(1<<0);
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	4770      	bx	lr

08007494 <SysTick_Stop>:
}

void SysTick_Stop(void)
{
	SysTick->CTRL = 0;
 8007494:	f24e 0310 	movw	r3, #57360	; 0xe010
 8007498:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <SysTick_Get_Time>:
}

unsigned int SysTick_Get_Time(void)
{
	return SysTick->VAL;
 80074a4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80074a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074ac:	6898      	ldr	r0, [r3, #8]
}
 80074ae:	4770      	bx	lr

080074b0 <SysTick_Get_Load_Time>:

unsigned int SysTick_Get_Load_Time(void)
{
	return SysTick->LOAD;
 80074b0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80074b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074b8:	6858      	ldr	r0, [r3, #4]
}
 80074ba:	4770      	bx	lr

080074bc <SysTick_Check_Timeout>:

int SysTick_Check_Timeout(void)
{
	return Macro_Check_Bit_Set(SysTick->CTRL, 16);
 80074bc:	f24e 0310 	movw	r3, #57360	; 0xe010
 80074c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80074c4:	6818      	ldr	r0, [r3, #0]
}
 80074c6:	f3c0 4000 	ubfx	r0, r0, #16, #1
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <TIM2_Delay>:
#define TIM2_FREQ			(1000000/TIM2_TICK) 	// Hz
#define TIME2_PLS_OF_1ms	(1000/TIM2_TICK)
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
 80074d0:	b470      	push	{r4, r5, r6}
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 80074d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80074da:	69de      	ldr	r6, [r3, #28]

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 80074dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM2->CR1 = (1<<4)|(1<<3);
 80074e0:	2418      	movs	r4, #24
	TIM2->ARR = 0xffff;
 80074e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 80074e6:	f046 0601 	orr.w	r6, r6, #1

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 80074ea:	f240 559f 	movw	r5, #1439	; 0x59f
void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;

	Macro_Set_Bit(RCC->APB1ENR, 0);
 80074ee:	61de      	str	r6, [r3, #28]

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
 80074f0:	8515      	strh	r5, [r2, #40]	; 0x28
	TIM2->CR1 = (1<<4)|(1<<3);
 80074f2:	8014      	strh	r4, [r2, #0]
	TIM2->ARR = 0xffff;
 80074f4:	8591      	strh	r1, [r2, #44]	; 0x2c
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;
 80074f6:	2132      	movs	r1, #50	; 0x32
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 80074f8:	8a93      	ldrh	r3, [r2, #20]
#define TIM2_MAX			(0xffffu)

void TIM2_Delay(int time)
{
	int i;
	unsigned int t = TIME2_PLS_OF_1ms * time;
 80074fa:	fb01 f000 	mul.w	r0, r1, r0
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 80074fe:	b29b      	uxth	r3, r3
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 8007500:	f248 0401 	movw	r4, #32769	; 0x8001
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 8007504:	f043 0301 	orr.w	r3, r3, #1
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 8007508:	f2c8 0400 	movt	r4, #32768	; 0x8000
	Macro_Set_Bit(RCC->APB1ENR, 0);

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 800750c:	8293      	strh	r3, [r2, #20]
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 800750e:	fba4 1400 	umull	r1, r4, r4, r0

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);
 8007512:	8993      	ldrh	r3, [r2, #12]

	for(i=0; i<(t/0xffff); i++)
 8007514:	0be4      	lsrs	r4, r4, #15

	TIM2->PSC = (unsigned int)(TIMXCLK/(double)TIM2_FREQ + 0.5)-1;
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);
 8007516:	b29b      	uxth	r3, r3
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	8193      	strh	r3, [r2, #12]

	for(i=0; i<(t/0xffff); i++)
 800751e:	bf18      	it	ne
 8007520:	2100      	movne	r1, #0
 8007522:	d015      	beq.n	8007550 <TIM2_Delay+0x80>
	{
		Macro_Set_Bit(TIM2->EGR,0);
 8007524:	8a93      	ldrh	r3, [r2, #20]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	8293      	strh	r3, [r2, #20]
		Macro_Clear_Bit(TIM2->SR, 0);
 800752e:	8a13      	ldrh	r3, [r2, #16]
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	8213      	strh	r3, [r2, #16]
		Macro_Set_Bit(TIM2->CR1, 0);
 800753a:	8813      	ldrh	r3, [r2, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	8013      	strh	r3, [r2, #0]
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
 8007544:	8a13      	ldrh	r3, [r2, #16]
 8007546:	07dd      	lsls	r5, r3, #31
 8007548:	d5fc      	bpl.n	8007544 <TIM2_Delay+0x74>
	TIM2->CR1 = (1<<4)|(1<<3);
	TIM2->ARR = 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Set_Bit(TIM2->DIER, 0);

	for(i=0; i<(t/0xffff); i++)
 800754a:	3101      	adds	r1, #1
 800754c:	42a1      	cmp	r1, r4
 800754e:	d1e9      	bne.n	8007524 <TIM2_Delay+0x54>
		Macro_Clear_Bit(TIM2->SR, 0);
		Macro_Set_Bit(TIM2->CR1, 0);
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
	}

	TIM2->ARR = t % 0xffff;
 8007550:	f248 0301 	movw	r3, #32769	; 0x8001
 8007554:	f2c8 0300 	movt	r3, #32768	; 0x8000
 8007558:	fba3 2300 	umull	r2, r3, r3, r0
 800755c:	0bdb      	lsrs	r3, r3, #15
 800755e:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8007562:	1ac2      	subs	r2, r0, r3
 8007564:	b292      	uxth	r2, r2
 8007566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800756a:	859a      	strh	r2, [r3, #44]	; 0x2c
	Macro_Set_Bit(TIM2->EGR,0);
 800756c:	8a9a      	ldrh	r2, [r3, #20]
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));
 800756e:	4619      	mov	r1, r3
		Macro_Set_Bit(TIM2->CR1, 0);
		while(Macro_Check_Bit_Clear(TIM2->SR, 0));
	}

	TIM2->ARR = t % 0xffff;
	Macro_Set_Bit(TIM2->EGR,0);
 8007570:	b292      	uxth	r2, r2
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	829a      	strh	r2, [r3, #20]
	Macro_Clear_Bit(TIM2->SR, 0);
 8007578:	8a1a      	ldrh	r2, [r3, #16]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	0412      	lsls	r2, r2, #16
 8007580:	0c12      	lsrs	r2, r2, #16
 8007582:	821a      	strh	r2, [r3, #16]
	Macro_Set_Bit(TIM2->CR1, 0);
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	b292      	uxth	r2, r2
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	801a      	strh	r2, [r3, #0]
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));
 800758e:	8a0b      	ldrh	r3, [r1, #16]
 8007590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007594:	07db      	lsls	r3, r3, #31
 8007596:	d5fa      	bpl.n	800758e <TIM2_Delay+0xbe>

	Macro_Clear_Bit(TIM2->CR1, 0);
 8007598:	8813      	ldrh	r3, [r2, #0]
	Macro_Clear_Bit(TIM2->DIER, 0);
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 800759a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	Macro_Set_Bit(TIM2->EGR,0);
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));

	Macro_Clear_Bit(TIM2->CR1, 0);
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	041b      	lsls	r3, r3, #16
 80075a4:	0c1b      	lsrs	r3, r3, #16
 80075a6:	8013      	strh	r3, [r2, #0]
	Macro_Clear_Bit(TIM2->DIER, 0);
 80075a8:	8993      	ldrh	r3, [r2, #12]
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 80075aa:	f2c4 0102 	movt	r1, #16386	; 0x4002
	Macro_Clear_Bit(TIM2->SR, 0);
	Macro_Set_Bit(TIM2->CR1, 0);
	while (Macro_Check_Bit_Clear(TIM2->SR, 0));

	Macro_Clear_Bit(TIM2->CR1, 0);
	Macro_Clear_Bit(TIM2->DIER, 0);
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	8193      	strh	r3, [r2, #12]
	Macro_Clear_Bit(RCC->APB1ENR, 0);
 80075b8:	69cb      	ldr	r3, [r1, #28]
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	61cb      	str	r3, [r1, #28]
}
 80075c0:	bc70      	pop	{r4, r5, r6}
 80075c2:	4770      	bx	lr

080075c4 <TIM4_Repeat_Interrupt_Enable>:
#define TIM4_FREQ 	  (1000000/TIM4_TICK) 			// Hz
#define TIME4_PLS_OF_1ms  (1000/TIM4_TICK)
#define TIM4_MAX	  (0xffffu)

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
 80075c4:	b430      	push	{r4, r5}
  if(en)
 80075c6:	bb08      	cbnz	r0, 800760c <TIM4_Repeat_Interrupt_Enable+0x48>
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80075c8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80075cc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80075d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  }

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
 80075d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075d8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
 80075dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80075e0:	881a      	ldrh	r2, [r3, #0]
    Macro_Clear_Bit(TIM4->DIER, 0);
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 80075e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  }

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	0412      	lsls	r2, r2, #16
 80075ec:	0c12      	lsrs	r2, r2, #16
 80075ee:	801a      	strh	r2, [r3, #0]
    Macro_Clear_Bit(TIM4->DIER, 0);
 80075f0:	899a      	ldrh	r2, [r3, #12]
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 80075f2:	f2c4 0102 	movt	r1, #16386	; 0x4002

  else
  {
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
    Macro_Clear_Bit(TIM4->DIER, 0);
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	0412      	lsls	r2, r2, #16
 80075fc:	0c12      	lsrs	r2, r2, #16
 80075fe:	819a      	strh	r2, [r3, #12]
    Macro_Clear_Bit(RCC->APB1ENR, 2);
 8007600:	69cb      	ldr	r3, [r1, #28]
 8007602:	f023 0304 	bic.w	r3, r3, #4
 8007606:	61cb      	str	r3, [r1, #28]
  }
}
 8007608:	bc30      	pop	{r4, r5}
 800760a:	4770      	bx	lr

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 800760c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007610:	f2c4 0202 	movt	r2, #16386	; 0x4002

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 8007614:	eb01 0181 	add.w	r1, r1, r1, lsl #2

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 8007618:	69d5      	ldr	r5, [r2, #28]

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 800761a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800761e:	0049      	lsls	r1, r1, #1
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 8007620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007624:	f2c4 0300 	movt	r3, #16384	; 0x4000
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 8007628:	b289      	uxth	r1, r1

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 800762a:	f045 0504 	orr.w	r5, r5, #4

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 800762e:	2410      	movs	r4, #16
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
 8007630:	f240 509f 	movw	r0, #1439	; 0x59f

void TIM4_Repeat_Interrupt_Enable(int en, int time)
{
  if(en)
  {
    Macro_Set_Bit(RCC->APB1ENR, 2);
 8007634:	61d5      	str	r5, [r2, #28]

    TIM4->CR1 = (1<<4)+(0<<3)+(0<<0);
 8007636:	801c      	strh	r4, [r3, #0]
    TIM4->PSC = (unsigned int)(TIMXCLK/(double)TIM4_FREQ + 0.5)-1;
 8007638:	8518      	strh	r0, [r3, #40]	; 0x28
    TIM4->ARR = TIME4_PLS_OF_1ms * time;
 800763a:	8599      	strh	r1, [r3, #44]	; 0x2c

    Macro_Set_Bit(TIM4->EGR,0);
 800763c:	8a99      	ldrh	r1, [r3, #20]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800763e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007642:	b289      	uxth	r1, r1
 8007644:	f041 0101 	orr.w	r1, r1, #1
 8007648:	8299      	strh	r1, [r3, #20]
    Macro_Set_Bit(TIM4->SR, 0);
 800764a:	8a18      	ldrh	r0, [r3, #16]
 800764c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8007650:	b280      	uxth	r0, r0
 8007652:	f040 0001 	orr.w	r0, r0, #1
 8007656:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800765a:	8218      	strh	r0, [r3, #16]
 800765c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC_ClearPendingIRQ((IRQn_Type)30);
    Macro_Set_Bit(TIM4->DIER, 0);
 8007660:	8998      	ldrh	r0, [r3, #12]
 8007662:	b280      	uxth	r0, r0
 8007664:	f040 0001 	orr.w	r0, r0, #1
 8007668:	8198      	strh	r0, [r3, #12]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800766a:	6011      	str	r1, [r2, #0]
    NVIC_EnableIRQ((IRQn_Type)30);
    Macro_Set_Bit(TIM4->CR1, 0);
 800766c:	881a      	ldrh	r2, [r3, #0]
 800766e:	b292      	uxth	r2, r2
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	801a      	strh	r2, [r3, #0]
    NVIC_DisableIRQ((IRQn_Type)30);
    Macro_Clear_Bit(TIM4->CR1, 0);
    Macro_Clear_Bit(TIM4->DIER, 0);
    Macro_Clear_Bit(RCC->APB1ENR, 2);
  }
}
 8007676:	bc30      	pop	{r4, r5}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	0000      	movs	r0, r0
	...

08007680 <Uart1_Init>:
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

void Uart1_Init(int baud)
{
 8007680:	b570      	push	{r4, r5, r6, lr}
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
 8007682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007686:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800768a:	6991      	ldr	r1, [r2, #24]
  Macro_Set_Bit(RCC->APB2ENR, 14);
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 800768c:	f44f 6300 	mov.w	r3, #2048	; 0x800
{
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
 8007690:	f041 0104 	orr.w	r1, r1, #4
 8007694:	6191      	str	r1, [r2, #24]
  Macro_Set_Bit(RCC->APB2ENR, 14);
 8007696:	6991      	ldr	r1, [r2, #24]
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 8007698:	f2c4 0301 	movt	r3, #16385	; 0x4001
  double div;
  unsigned int mant;
  unsigned int frac;
  
  Macro_Set_Bit(RCC->APB2ENR, 2);
  Macro_Set_Bit(RCC->APB2ENR, 14);
 800769c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80076a0:	6191      	str	r1, [r2, #24]
  Macro_Write_Block(GPIOA->CRH, 0xff, 0x8a, 4);
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80076a8:	f442 620a 	orr.w	r2, r2, #2208	; 0x8a0
 80076ac:	605a      	str	r2, [r3, #4]
  Macro_Set_Bit(GPIOA->ODR, 10);
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076b4:	60da      	str	r2, [r3, #12]
  
  div = PCLK2/(16. * baud);
 80076b6:	f005 fc0f 	bl	800ced8 <__aeabi_i2d>
 80076ba:	2300      	movs	r3, #0
 80076bc:	2200      	movs	r2, #0
 80076be:	f2c4 0330 	movt	r3, #16432	; 0x4030
 80076c2:	f005 fc6f 	bl	800cfa4 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	a119      	add	r1, pc, #100	; (adr r1, 8007730 <Uart1_Init+0xb0>)
 80076cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d0:	f005 fd92 	bl	800d1f8 <__aeabi_ddiv>
 80076d4:	460d      	mov	r5, r1
 80076d6:	4604      	mov	r4, r0
  mant = (int)div;
 80076d8:	f005 fefe 	bl	800d4d8 <__aeabi_d2iz>
 80076dc:	4606      	mov	r6, r0
  frac = (int)((div - mant) * 16. + 0.5);
 80076de:	f005 fbeb 	bl	800ceb8 <__aeabi_ui2d>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f005 faa7 	bl	800cc3c <__aeabi_dsub>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	f2c4 0330 	movt	r3, #16432	; 0x4030
 80076f6:	f005 fc55 	bl	800cfa4 <__aeabi_dmul>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2200      	movs	r2, #0
 80076fe:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8007702:	f005 fa9d 	bl	800cc40 <__adddf3>
 8007706:	f005 fee7 	bl	800d4d8 <__aeabi_d2iz>
  mant += frac >> 4;
 800770a:	eb06 1610 	add.w	r6, r6, r0, lsr #4
  frac &= 0xf;
 800770e:	f000 000f 	and.w	r0, r0, #15

  USART1->BRR = (mant<<4)+(frac<<0);
 8007712:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8007716:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800771a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
  USART1->CR2 = 0<<12;
 800771e:	2200      	movs	r2, #0
  mant = (int)div;
  frac = (int)((div - mant) * 16. + 0.5);
  mant += frac >> 4;
  frac &= 0xf;

  USART1->BRR = (mant<<4)+(frac<<0);
 8007720:	b280      	uxth	r0, r0
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
 8007722:	f242 010c 	movw	r1, #8204	; 0x200c
  mant = (int)div;
  frac = (int)((div - mant) * 16. + 0.5);
  mant += frac >> 4;
  frac &= 0xf;

  USART1->BRR = (mant<<4)+(frac<<0);
 8007726:	8118      	strh	r0, [r3, #8]
  USART1->CR1 = (1<<13)|(0<<12)|(0<<10)|(1<<3)|(1<<2);
 8007728:	8199      	strh	r1, [r3, #12]
  USART1->CR2 = 0<<12;
 800772a:	821a      	strh	r2, [r3, #16]
  USART1->CR3 = 0;
 800772c:	829a      	strh	r2, [r3, #20]
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	00000000 	andeq	r0, r0, r0
 8007734:	41912a88 	orrsmi	r2, r1, r8, lsl #21

08007738 <Uart1_Send_Byte>:
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 8007738:	280a      	cmp	r0, #10
 800773a:	d00c      	beq.n	8007756 <Uart1_Send_Byte+0x1e>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 800773c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007740:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8007744:	880a      	ldrh	r2, [r1, #0]
 8007746:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800774a:	0612      	lsls	r2, r2, #24
 800774c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007750:	d5f8      	bpl.n	8007744 <Uart1_Send_Byte+0xc>
  USART1->DR = data;
 8007752:	8098      	strh	r0, [r3, #4]
 8007754:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8007756:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800775a:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800775e:	880a      	ldrh	r2, [r1, #0]
 8007760:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007764:	0612      	lsls	r2, r2, #24
 8007766:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800776a:	d5f8      	bpl.n	800775e <Uart1_Send_Byte+0x26>
    USART1->DR = 0x0d;
 800776c:	220d      	movs	r2, #13
 800776e:	809a      	strh	r2, [r3, #4]
 8007770:	e7e4      	b.n	800773c <Uart1_Send_Byte+0x4>
 8007772:	bf00      	nop

08007774 <Uart1_Send_String>:
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
  USART1->DR = data;
}

void Uart1_Send_String(char *pt)
{
 8007774:	b430      	push	{r4, r5}
  while(*pt!=0)
 8007776:	7804      	ldrb	r4, [r0, #0]
 8007778:	b194      	cbz	r4, 80077a0 <Uart1_Send_String+0x2c>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 800777a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800777e:	f2c4 0101 	movt	r1, #16385	; 0x4001
    USART1->DR = 0x0d;
 8007782:	250d      	movs	r5, #13
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 8007784:	2c0a      	cmp	r4, #10
 8007786:	d00d      	beq.n	80077a4 <Uart1_Send_String+0x30>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8007788:	880a      	ldrh	r2, [r1, #0]
 800778a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800778e:	0612      	lsls	r2, r2, #24
 8007790:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007794:	d5f8      	bpl.n	8007788 <Uart1_Send_String+0x14>
  USART1->DR = data;
 8007796:	809c      	strh	r4, [r3, #4]
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 8007798:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800779c:	2c00      	cmp	r4, #0
 800779e:	d1f1      	bne.n	8007784 <Uart1_Send_String+0x10>
  {
    Uart1_Send_Byte(*pt++);
  }
}
 80077a0:	bc30      	pop	{r4, r5}
 80077a2:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80077a4:	880a      	ldrh	r2, [r1, #0]
 80077a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80077aa:	0612      	lsls	r2, r2, #24
 80077ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80077b0:	d5f8      	bpl.n	80077a4 <Uart1_Send_String+0x30>
    USART1->DR = 0x0d;
 80077b2:	809d      	strh	r5, [r3, #4]
 80077b4:	e7e8      	b.n	8007788 <Uart1_Send_String+0x14>
 80077b6:	bf00      	nop

080077b8 <Uart1_Printf>:
    Uart1_Send_Byte(*pt++);
  }
}

void Uart1_Printf(char *fmt,...)
{
 80077b8:	b40f      	push	{r0, r1, r2, r3}
 80077ba:	b530      	push	{r4, r5, lr}
 80077bc:	b0c3      	sub	sp, #268	; 0x10c
 80077be:	ab46      	add	r3, sp, #280	; 0x118
 80077c0:	f853 1b04 	ldr.w	r1, [r3], #4
  va_list ap;
  char string[256];
  
  va_start(ap,fmt);
  vsprintf(string,fmt,ap);
 80077c4:	a802      	add	r0, sp, #8
 80077c6:	461a      	mov	r2, r3
void Uart1_Printf(char *fmt,...)
{
  va_list ap;
  char string[256];
  
  va_start(ap,fmt);
 80077c8:	9301      	str	r3, [sp, #4]
  vsprintf(string,fmt,ap);
 80077ca:	f000 fa0b 	bl	8007be4 <vsprintf>
  USART1->DR = data;
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 80077ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80077d2:	b198      	cbz	r0, 80077fc <Uart1_Printf+0x44>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80077d4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80077d8:	ac02      	add	r4, sp, #8
 80077da:	f2c4 0101 	movt	r1, #16385	; 0x4001
    USART1->DR = 0x0d;
 80077de:	250d      	movs	r5, #13
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 80077e0:	280a      	cmp	r0, #10
 80077e2:	d010      	beq.n	8007806 <Uart1_Printf+0x4e>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80077e4:	880a      	ldrh	r2, [r1, #0]
 80077e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80077ea:	0612      	lsls	r2, r2, #24
 80077ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80077f0:	d5f8      	bpl.n	80077e4 <Uart1_Printf+0x2c>
  USART1->DR = data;
 80077f2:	8098      	strh	r0, [r3, #4]
}

void Uart1_Send_String(char *pt)
{
  while(*pt!=0)
 80077f4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d1f1      	bne.n	80077e0 <Uart1_Printf+0x28>
  
  va_start(ap,fmt);
  vsprintf(string,fmt,ap);
  Uart1_Send_String(string);
  va_end(ap);
}
 80077fc:	b043      	add	sp, #268	; 0x10c
 80077fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007802:	b004      	add	sp, #16
 8007804:	4770      	bx	lr

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 8007806:	880a      	ldrh	r2, [r1, #0]
 8007808:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800780c:	0612      	lsls	r2, r2, #24
 800780e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007812:	d5f8      	bpl.n	8007806 <Uart1_Printf+0x4e>
    USART1->DR = 0x0d;
 8007814:	809d      	strh	r5, [r3, #4]
 8007816:	e7e5      	b.n	80077e4 <Uart1_Printf+0x2c>

08007818 <Uart1_Get_Pressed>:
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8007818:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800781c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007820:	8818      	ldrh	r0, [r3, #0]
 8007822:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8007826:	b108      	cbz	r0, 800782c <Uart1_Get_Pressed+0x14>
	{
		return (char)USART1->DR;
 8007828:	8898      	ldrh	r0, [r3, #4]
 800782a:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return (char)0;
	}
}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop

08007830 <Uart1_Get_Char>:
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8007830:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007834:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007838:	8813      	ldrh	r3, [r2, #0]
 800783a:	0699      	lsls	r1, r3, #26
 800783c:	d5fc      	bpl.n	8007838 <Uart1_Get_Char+0x8>
	{
		return (char)USART1->DR;
 800783e:	8890      	ldrh	r0, [r2, #4]
 8007840:	b2c0      	uxtb	r0, r0
	char rx;

	do
	{
		rx = Uart1_Get_Pressed();
	}while(!rx);
 8007842:	2800      	cmp	r0, #0
 8007844:	d0f8      	beq.n	8007838 <Uart1_Get_Char+0x8>

	return rx;
}
 8007846:	4770      	bx	lr

08007848 <Uart1_Get_String>:

void Uart1_Get_String(char *string)
{
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 800784a:	f44f 5460 	mov.w	r4, #14336	; 0x3800

	return rx;
}

void Uart1_Get_String(char *string)
{
 800784e:	4607      	mov	r7, r0
	char *string2 = string;
	char c;

	while((c = Uart1_Get_Char())!='\r')
 8007850:	4606      	mov	r6, r0
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8007852:	f2c4 0401 	movt	r4, #16385	; 0x4001
void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
 8007856:	250d      	movs	r5, #13
  va_end(ap);
}

char Uart1_Get_Pressed(void)
{
	if(Macro_Check_Bit_Set(USART1->SR, 5))
 8007858:	8823      	ldrh	r3, [r4, #0]
 800785a:	069b      	lsls	r3, r3, #26
 800785c:	d5fc      	bpl.n	8007858 <Uart1_Get_String+0x10>
	{
		return (char)USART1->DR;
 800785e:	88a3      	ldrh	r3, [r4, #4]
 8007860:	b2db      	uxtb	r3, r3
	char rx;

	do
	{
		rx = Uart1_Get_Pressed();
	}while(!rx);
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f8      	beq.n	8007858 <Uart1_Get_String+0x10>
void Uart1_Get_String(char *string)
{
	char *string2 = string;
	char c;

	while((c = Uart1_Get_Char())!='\r')
 8007866:	2b0d      	cmp	r3, #13
 8007868:	d023      	beq.n	80078b2 <Uart1_Get_String+0x6a>
	{
		if(c=='\b')
 800786a:	2b08      	cmp	r3, #8
 800786c:	d109      	bne.n	8007882 <Uart1_Get_String+0x3a>
		{
			if((int)string2 < (int)string)
 800786e:	42b7      	cmp	r7, r6
 8007870:	daf2      	bge.n	8007858 <Uart1_Get_String+0x10>
			{
				Uart1_Printf("\b \b");
 8007872:	f24f 10b8 	movw	r0, #61880	; 0xf1b8
 8007876:	f6c0 0000 	movt	r0, #2048	; 0x800
				string--;
 800787a:	3e01      	subs	r6, #1
	{
		if(c=='\b')
		{
			if((int)string2 < (int)string)
			{
				Uart1_Printf("\b \b");
 800787c:	f7ff ff9c 	bl	80077b8 <Uart1_Printf>
 8007880:	e7ea      	b.n	8007858 <Uart1_Get_String+0x10>
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 8007882:	2b0a      	cmp	r3, #10
			}
		}

		else
		{
			*string++ = c;
 8007884:	7033      	strb	r3, [r6, #0]
 8007886:	f106 0601 	add.w	r6, r6, #1
  USART1->CR3 = 0;
}

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
 800788a:	d009      	beq.n	80078a0 <Uart1_Get_String+0x58>
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
    USART1->DR = 0x0d;
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 800788c:	8821      	ldrh	r1, [r4, #0]
 800788e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007892:	0609      	lsls	r1, r1, #24
 8007894:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007898:	d5f8      	bpl.n	800788c <Uart1_Get_String+0x44>
  USART1->DR = data;
 800789a:	b29b      	uxth	r3, r3
 800789c:	8093      	strh	r3, [r2, #4]
 800789e:	e7db      	b.n	8007858 <Uart1_Get_String+0x10>

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80078a0:	8821      	ldrh	r1, [r4, #0]
 80078a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80078a6:	0608      	lsls	r0, r1, #24
 80078a8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80078ac:	d5f8      	bpl.n	80078a0 <Uart1_Get_String+0x58>
    USART1->DR = 0x0d;
 80078ae:	8095      	strh	r5, [r2, #4]
 80078b0:	e7ec      	b.n	800788c <Uart1_Get_String+0x44>
			*string++ = c;
			Uart1_Send_Byte(c);
		}
	}

	*string='\0';
 80078b2:	2300      	movs	r3, #0

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80078b4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
			*string++ = c;
			Uart1_Send_Byte(c);
		}
	}

	*string='\0';
 80078b8:	7033      	strb	r3, [r6, #0]

void Uart1_Send_Byte(char data)
{
  if(data=='\n')
  {
    while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80078ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80078be:	880a      	ldrh	r2, [r1, #0]
 80078c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80078c4:	0614      	lsls	r4, r2, #24
 80078c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80078ca:	d5f8      	bpl.n	80078be <Uart1_Get_String+0x76>
    USART1->DR = 0x0d;
 80078cc:	220d      	movs	r2, #13
 80078ce:	809a      	strh	r2, [r3, #4]
  }
  
  while(Macro_Check_Bit_Clear(USART1->SR, 7));
 80078d0:	8819      	ldrh	r1, [r3, #0]
 80078d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80078d6:	0608      	lsls	r0, r1, #24
 80078d8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80078dc:	d5f8      	bpl.n	80078d0 <Uart1_Get_String+0x88>
  USART1->DR = data;
 80078de:	230a      	movs	r3, #10
 80078e0:	8093      	strh	r3, [r2, #4]
 80078e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078e4 <Uart1_Get_Int_Num>:
	*string='\0';
	Uart1_Send_Byte('\n');
}

int Uart1_Get_Int_Num(void)
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b089      	sub	sp, #36	; 0x24
	int minus    = 0;
	int result   = 0;
	int lastIndex;
	int i;

	Uart1_Get_String(string);
 80078e8:	4668      	mov	r0, sp
 80078ea:	f7ff ffad 	bl	8007848 <Uart1_Get_String>

	if(string[0]=='-')
 80078ee:	f89d 3000 	ldrb.w	r3, [sp]
 80078f2:	2b2d      	cmp	r3, #45	; 0x2d
	{
		minus = 1;
		string++;
 80078f4:	bf03      	ittte	eq
 80078f6:	ad08      	addeq	r5, sp, #32
 80078f8:	f815 3d1f 	ldrbeq.w	r3, [r5, #-31]!

	Uart1_Get_String(string);

	if(string[0]=='-')
	{
		minus = 1;
 80078fc:	2601      	moveq	r6, #1
}

int Uart1_Get_Int_Num(void)
{
	char str[30];
	char *string = str;
 80078fe:	466d      	movne	r5, sp
	int base     = 10;
	int minus    = 0;
 8007900:	bf18      	it	ne
 8007902:	2600      	movne	r6, #0
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 8007904:	2b30      	cmp	r3, #48	; 0x30
 8007906:	d037      	beq.n	8007978 <Uart1_Get_Int_Num+0x94>

int Uart1_Get_Int_Num(void)
{
	char str[30];
	char *string = str;
	int base     = 10;
 8007908:	240a      	movs	r4, #10
	{
		base    = 16;
		string += 2;
	}

	lastIndex = strlen(string) - 1;
 800790a:	4628      	mov	r0, r5
 800790c:	f000 f874 	bl	80079f8 <strlen>
 8007910:	3801      	subs	r0, #1

	if(lastIndex<0) return -1;
 8007912:	2800      	cmp	r0, #0
	{
		base    = 16;
		string += 2;
	}

	lastIndex = strlen(string) - 1;
 8007914:	4607      	mov	r7, r0

	if(lastIndex<0) return -1;
 8007916:	db3f      	blt.n	8007998 <Uart1_Get_Int_Num+0xb4>

	if(string[lastIndex]=='h' || string[lastIndex]=='H' )
 8007918:	5c2b      	ldrb	r3, [r5, r0]
 800791a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800791e:	2b48      	cmp	r3, #72	; 0x48
 8007920:	d024      	beq.n	800796c <Uart1_Get_Int_Num+0x88>
		base = 16;
		string[lastIndex] = 0;
		lastIndex--;
	}

	if(base==10)
 8007922:	2c0a      	cmp	r4, #10
 8007924:	d031      	beq.n	800798a <Uart1_Get_Int_Num+0xa6>
 8007926:	f240 0204 	movw	r2, #4
 800792a:	f2c2 0200 	movt	r2, #8192	; 0x2000
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
	{
		base    = 16;
 800792e:	2300      	movs	r3, #0
 8007930:	f8d2 c000 	ldr.w	ip, [r2]
 8007934:	461c      	mov	r4, r3

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 8007936:	5cea      	ldrb	r2, [r5, r3]
 8007938:	eb0c 0102 	add.w	r1, ip, r2
 800793c:	7849      	ldrb	r1, [r1, #1]
				else result = (result<<4) + string[i] - 'a' + 10;
			}

			else
			{
				result = (result<<4) + string[i] - '0';
 800793e:	eb02 1004 	add.w	r0, r2, r4, lsl #4

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 8007942:	f011 0103 	ands.w	r1, r1, #3
				else result = (result<<4) + string[i] - 'a' + 10;
			}

			else
			{
				result = (result<<4) + string[i] - '0';
 8007946:	bf08      	it	eq
 8007948:	f1a0 0430 	subeq.w	r4, r0, #48	; 0x30

	else
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
 800794c:	d006      	beq.n	800795c <Uart1_Get_Int_Num+0x78>
			{
				if(isupper((int)string[i])) result = (result<<4) + string[i] - 'A' + 10;
 800794e:	2901      	cmp	r1, #1
 8007950:	bf0b      	itete	eq
 8007952:	4604      	moveq	r4, r0
				else result = (result<<4) + string[i] - 'a' + 10;
 8007954:	eb02 1404 	addne.w	r4, r2, r4, lsl #4
	{
		for(i=0;i<=lastIndex;i++)
		{
			if(isalpha((int)string[i]))
			{
				if(isupper((int)string[i])) result = (result<<4) + string[i] - 'A' + 10;
 8007958:	3c37      	subeq	r4, #55	; 0x37
				else result = (result<<4) + string[i] - 'a' + 10;
 800795a:	3c57      	subne	r4, #87	; 0x57
		result = minus ? (-1*result):result;
	}

	else
	{
		for(i=0;i<=lastIndex;i++)
 800795c:	3301      	adds	r3, #1
 800795e:	429f      	cmp	r7, r3
 8007960:	dae9      	bge.n	8007936 <Uart1_Get_Int_Num+0x52>
			{
				result = (result<<4) + string[i] - '0';
			}
		}

		result = minus ? (-1*result):result;
 8007962:	4260      	negs	r0, r4
 8007964:	b906      	cbnz	r6, 8007968 <Uart1_Get_Int_Num+0x84>
 8007966:	4620      	mov	r0, r4
	}

	return result;
}
 8007968:	b009      	add	sp, #36	; 0x24
 800796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(lastIndex<0) return -1;

	if(string[lastIndex]=='h' || string[lastIndex]=='H' )
	{
		base = 16;
		string[lastIndex] = 0;
 800796c:	2400      	movs	r4, #0
 800796e:	542c      	strb	r4, [r5, r0]
		result = minus ? (-1*result):result;
	}

	else
	{
		for(i=0;i<=lastIndex;i++)
 8007970:	1e47      	subs	r7, r0, #1
 8007972:	2800      	cmp	r0, #0
 8007974:	d1d7      	bne.n	8007926 <Uart1_Get_Int_Num+0x42>
 8007976:	e7f4      	b.n	8007962 <Uart1_Get_Int_Num+0x7e>
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 8007978:	786b      	ldrb	r3, [r5, #1]
 800797a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800797e:	2b58      	cmp	r3, #88	; 0x58
	{
		base    = 16;
		string += 2;
 8007980:	bf04      	itt	eq
 8007982:	3502      	addeq	r5, #2
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
	{
		base    = 16;
 8007984:	2410      	moveq	r4, #16
	{
		minus = 1;
		string++;
	}

	if(string[0]=='0' && (string[1]=='x' || string[1]=='X'))
 8007986:	d0c0      	beq.n	800790a <Uart1_Get_Int_Num+0x26>
 8007988:	e7be      	b.n	8007908 <Uart1_Get_Int_Num+0x24>
		lastIndex--;
	}

	if(base==10)
	{
		result = atoi(string);
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f82c 	bl	80079e8 <atoi>
		result = minus ? (-1*result):result;
 8007990:	2e00      	cmp	r6, #0
 8007992:	d0e9      	beq.n	8007968 <Uart1_Get_Int_Num+0x84>
 8007994:	4240      	negs	r0, r0
 8007996:	e7e7      	b.n	8007968 <Uart1_Get_Int_Num+0x84>
		string += 2;
	}

	lastIndex = strlen(string) - 1;

	if(lastIndex<0) return -1;
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	e7e4      	b.n	8007968 <Uart1_Get_Int_Num+0x84>
 800799e:	bf00      	nop

080079a0 <Uart1_RX_Interrupt_Enable>:

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(USART1->CR1, 5);
 80079a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80079a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
	return result;
}

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
 80079a8:	b968      	cbnz	r0, 80079c6 <Uart1_RX_Interrupt_Enable+0x26>
		NVIC_EnableIRQ((IRQn_Type)37);
	}

	else
	{
		Macro_Clear_Bit(USART1->CR1, 5);
 80079aa:	8993      	ldrh	r3, [r2, #12]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 80079ac:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80079b0:	f023 0320 	bic.w	r3, r3, #32
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80079bc:	2020      	movs	r0, #32
 80079be:	8193      	strh	r3, [r2, #12]
 80079c0:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
 80079c4:	4770      	bx	lr

void Uart1_RX_Interrupt_Enable(int en)
{
	if(en)
	{
		Macro_Set_Bit(USART1->CR1, 5);
 80079c6:	8990      	ldrh	r0, [r2, #12]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 80079c8:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80079cc:	b280      	uxth	r0, r0
 80079ce:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80079d2:	2120      	movs	r1, #32
 80079d4:	f040 0020 	orr.w	r0, r0, #32
 80079d8:	8190      	strh	r0, [r2, #12]
 80079da:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079de:	6059      	str	r1, [r3, #4]
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	f3af 8000 	nop.w

080079e8 <atoi>:
 80079e8:	2100      	movs	r1, #0
 80079ea:	220a      	movs	r2, #10
 80079ec:	f000 b8d2 	b.w	8007b94 <strtol>

080079f0 <_atoi_r>:
 80079f0:	2200      	movs	r2, #0
 80079f2:	230a      	movs	r3, #10
 80079f4:	f000 b830 	b.w	8007a58 <_strtol_r>

080079f8 <strlen>:
 80079f8:	f020 0103 	bic.w	r1, r0, #3
 80079fc:	f010 0003 	ands.w	r0, r0, #3
 8007a00:	f1c0 0000 	rsb	r0, r0, #0
 8007a04:	f851 3b04 	ldr.w	r3, [r1], #4
 8007a08:	f100 0c04 	add.w	ip, r0, #4
 8007a0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007a10:	f06f 0200 	mvn.w	r2, #0
 8007a14:	bf1c      	itt	ne
 8007a16:	fa22 f20c 	lsrne.w	r2, r2, ip
 8007a1a:	4313      	orrne	r3, r2
 8007a1c:	f04f 0c01 	mov.w	ip, #1
 8007a20:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007a24:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007a28:	eba3 020c 	sub.w	r2, r3, ip
 8007a2c:	ea22 0203 	bic.w	r2, r2, r3
 8007a30:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8007a34:	bf04      	itt	eq
 8007a36:	f851 3b04 	ldreq.w	r3, [r1], #4
 8007a3a:	3004      	addeq	r0, #4
 8007a3c:	d0f4      	beq.n	8007a28 <strlen+0x30>
 8007a3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a42:	bf1f      	itttt	ne
 8007a44:	3001      	addne	r0, #1
 8007a46:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8007a4a:	3001      	addne	r0, #1
 8007a4c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8007a50:	bf18      	it	ne
 8007a52:	3001      	addne	r0, #1
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop

08007a58 <_strtol_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	f240 0404 	movw	r4, #4
 8007a60:	b085      	sub	sp, #20
 8007a62:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8007a66:	468c      	mov	ip, r1
 8007a68:	4699      	mov	r9, r3
 8007a6a:	9003      	str	r0, [sp, #12]
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	f8d4 8000 	ldr.w	r8, [r4]
 8007a72:	e000      	b.n	8007a76 <_strtol_r+0x1e>
 8007a74:	4620      	mov	r0, r4
 8007a76:	4604      	mov	r4, r0
 8007a78:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a7c:	eb08 0305 	add.w	r3, r8, r5
 8007a80:	7859      	ldrb	r1, [r3, #1]
 8007a82:	f001 0108 	and.w	r1, r1, #8
 8007a86:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8007a8a:	2900      	cmp	r1, #0
 8007a8c:	d1f2      	bne.n	8007a74 <_strtol_r+0x1c>
 8007a8e:	2d2d      	cmp	r5, #45	; 0x2d
 8007a90:	d076      	beq.n	8007b80 <_strtol_r+0x128>
 8007a92:	2d2b      	cmp	r5, #43	; 0x2b
 8007a94:	bf04      	itt	eq
 8007a96:	1c84      	addeq	r4, r0, #2
 8007a98:	7845      	ldrbeq	r5, [r0, #1]
 8007a9a:	f039 0110 	bics.w	r1, r9, #16
 8007a9e:	d112      	bne.n	8007ac6 <_strtol_r+0x6e>
 8007aa0:	f1d9 0101 	rsbs	r1, r9, #1
 8007aa4:	bf38      	it	cc
 8007aa6:	2100      	movcc	r1, #0
 8007aa8:	2d30      	cmp	r5, #48	; 0x30
 8007aaa:	d004      	beq.n	8007ab6 <_strtol_r+0x5e>
 8007aac:	b159      	cbz	r1, 8007ac6 <_strtol_r+0x6e>
 8007aae:	f04f 090a 	mov.w	r9, #10
 8007ab2:	46cb      	mov	fp, r9
 8007ab4:	e008      	b.n	8007ac8 <_strtol_r+0x70>
 8007ab6:	7820      	ldrb	r0, [r4, #0]
 8007ab8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007abc:	2858      	cmp	r0, #88	; 0x58
 8007abe:	d063      	beq.n	8007b88 <_strtol_r+0x130>
 8007ac0:	b109      	cbz	r1, 8007ac6 <_strtol_r+0x6e>
 8007ac2:	f04f 0908 	mov.w	r9, #8
 8007ac6:	46cb      	mov	fp, r9
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	4659      	mov	r1, fp
 8007acc:	bf0c      	ite	eq
 8007ace:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000
 8007ad2:	f04f 4600 	movne.w	r6, #2147483648	; 0x80000000
 8007ad6:	9200      	str	r2, [sp, #0]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	f8cd c004 	str.w	ip, [sp, #4]
 8007ae0:	f005 f898 	bl	800cc14 <__aeabi_uidivmod>
 8007ae4:	2700      	movs	r7, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	468a      	mov	sl, r1
 8007aea:	4659      	mov	r1, fp
 8007aec:	f004 ff64 	bl	800c9b8 <__aeabi_uidiv>
 8007af0:	4639      	mov	r1, r7
 8007af2:	9b02      	ldr	r3, [sp, #8]
 8007af4:	e89d 1004 	ldmia.w	sp, {r2, ip}
 8007af8:	e00c      	b.n	8007b14 <_strtol_r+0xbc>
 8007afa:	4555      	cmp	r5, sl
 8007afc:	bfd4      	ite	le
 8007afe:	2600      	movle	r6, #0
 8007b00:	2601      	movgt	r6, #1
 8007b02:	4281      	cmp	r1, r0
 8007b04:	bf18      	it	ne
 8007b06:	2600      	movne	r6, #0
 8007b08:	b9ee      	cbnz	r6, 8007b46 <_strtol_r+0xee>
 8007b0a:	fb0b 5101 	mla	r1, fp, r1, r5
 8007b0e:	2701      	movs	r7, #1
 8007b10:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b14:	eb08 0605 	add.w	r6, r8, r5
 8007b18:	7876      	ldrb	r6, [r6, #1]
 8007b1a:	f016 0f04 	tst.w	r6, #4
 8007b1e:	bf18      	it	ne
 8007b20:	3d30      	subne	r5, #48	; 0x30
 8007b22:	d107      	bne.n	8007b34 <_strtol_r+0xdc>
 8007b24:	f016 0603 	ands.w	r6, r6, #3
 8007b28:	d010      	beq.n	8007b4c <_strtol_r+0xf4>
 8007b2a:	2e01      	cmp	r6, #1
 8007b2c:	bf14      	ite	ne
 8007b2e:	2657      	movne	r6, #87	; 0x57
 8007b30:	2637      	moveq	r6, #55	; 0x37
 8007b32:	1bad      	subs	r5, r5, r6
 8007b34:	45a9      	cmp	r9, r5
 8007b36:	dd09      	ble.n	8007b4c <_strtol_r+0xf4>
 8007b38:	4281      	cmp	r1, r0
 8007b3a:	bf94      	ite	ls
 8007b3c:	2600      	movls	r6, #0
 8007b3e:	2601      	movhi	r6, #1
 8007b40:	ea56 77d7 	orrs.w	r7, r6, r7, lsr #31
 8007b44:	d0d9      	beq.n	8007afa <_strtol_r+0xa2>
 8007b46:	f04f 37ff 	mov.w	r7, #4294967295
 8007b4a:	e7e1      	b.n	8007b10 <_strtol_r+0xb8>
 8007b4c:	1c78      	adds	r0, r7, #1
 8007b4e:	d008      	beq.n	8007b62 <_strtol_r+0x10a>
 8007b50:	b9a3      	cbnz	r3, 8007b7c <_strtol_r+0x124>
 8007b52:	4608      	mov	r0, r1
 8007b54:	b112      	cbz	r2, 8007b5c <_strtol_r+0x104>
 8007b56:	b97f      	cbnz	r7, 8007b78 <_strtol_r+0x120>
 8007b58:	4664      	mov	r4, ip
 8007b5a:	6014      	str	r4, [r2, #0]
 8007b5c:	b005      	add	sp, #20
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	9903      	ldr	r1, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b6c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8007b70:	2322      	movs	r3, #34	; 0x22
 8007b72:	600b      	str	r3, [r1, #0]
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d0f1      	beq.n	8007b5c <_strtol_r+0x104>
 8007b78:	3c01      	subs	r4, #1
 8007b7a:	e7ee      	b.n	8007b5a <_strtol_r+0x102>
 8007b7c:	4249      	negs	r1, r1
 8007b7e:	e7e8      	b.n	8007b52 <_strtol_r+0xfa>
 8007b80:	1c84      	adds	r4, r0, #2
 8007b82:	7845      	ldrb	r5, [r0, #1]
 8007b84:	2301      	movs	r3, #1
 8007b86:	e788      	b.n	8007a9a <_strtol_r+0x42>
 8007b88:	f04f 0910 	mov.w	r9, #16
 8007b8c:	7865      	ldrb	r5, [r4, #1]
 8007b8e:	46cb      	mov	fp, r9
 8007b90:	3402      	adds	r4, #2
 8007b92:	e799      	b.n	8007ac8 <_strtol_r+0x70>

08007b94 <strtol>:
 8007b94:	b430      	push	{r4, r5}
 8007b96:	f240 0408 	movw	r4, #8
 8007b9a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	6820      	ldr	r0, [r4, #0]
 8007ba8:	bc30      	pop	{r4, r5}
 8007baa:	f7ff bf55 	b.w	8007a58 <_strtol_r>
 8007bae:	bf00      	nop

08007bb0 <_vsprintf_r>:
 8007bb0:	b530      	push	{r4, r5, lr}
 8007bb2:	b09b      	sub	sp, #108	; 0x6c
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	4669      	mov	r1, sp
 8007bb8:	9400      	str	r4, [sp, #0]
 8007bba:	f44f 7502 	mov.w	r5, #520	; 0x208
 8007bbe:	9404      	str	r4, [sp, #16]
 8007bc0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007bc4:	f8ad 500c 	strh.w	r5, [sp, #12]
 8007bc8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007bcc:	9402      	str	r4, [sp, #8]
 8007bce:	9405      	str	r4, [sp, #20]
 8007bd0:	f8ad 500e 	strh.w	r5, [sp, #14]
 8007bd4:	f000 f814 	bl	8007c00 <_svfprintf_r>
 8007bd8:	9b00      	ldr	r3, [sp, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	b01b      	add	sp, #108	; 0x6c
 8007be0:	bd30      	pop	{r4, r5, pc}
 8007be2:	bf00      	nop

08007be4 <vsprintf>:
 8007be4:	b430      	push	{r4, r5}
 8007be6:	f240 0408 	movw	r4, #8
 8007bea:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	bc30      	pop	{r4, r5}
 8007bfa:	f7ff bfd9 	b.w	8007bb0 <_vsprintf_r>
 8007bfe:	bf00      	nop

08007c00 <_svfprintf_r>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	b0c9      	sub	sp, #292	; 0x124
 8007c06:	4691      	mov	r9, r2
 8007c08:	9314      	str	r3, [sp, #80]	; 0x50
 8007c0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c0c:	900e      	str	r0, [sp, #56]	; 0x38
 8007c0e:	f002 fafb 	bl	800a208 <_localeconv_r>
 8007c12:	6800      	ldr	r0, [r0, #0]
 8007c14:	901a      	str	r0, [sp, #104]	; 0x68
 8007c16:	f7ff feef 	bl	80079f8 <strlen>
 8007c1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	901d      	str	r0, [sp, #116]	; 0x74
 8007c20:	0618      	lsls	r0, r3, #24
 8007c22:	d503      	bpl.n	8007c2c <_svfprintf_r+0x2c>
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f001 8079 	beq.w	8008d1e <_svfprintf_r+0x111e>
 8007c2c:	f64e 55bc 	movw	r5, #60860	; 0xedbc
 8007c30:	ac38      	add	r4, sp, #224	; 0xe0
 8007c32:	f6c0 0500 	movt	r5, #2048	; 0x800
 8007c36:	9515      	str	r5, [sp, #84]	; 0x54
 8007c38:	f10d 05df 	add.w	r5, sp, #223	; 0xdf
 8007c3c:	9508      	str	r5, [sp, #32]
 8007c3e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c40:	af38      	add	r7, sp, #224	; 0xe0
 8007c42:	9409      	str	r4, [sp, #36]	; 0x24
 8007c44:	f24f 2400 	movw	r4, #61952	; 0xf200
 8007c48:	f105 0610 	add.w	r6, r5, #16
 8007c4c:	9d08      	ldr	r5, [sp, #32]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f6c0 0400 	movt	r4, #2048	; 0x800
 8007c54:	9311      	str	r3, [sp, #68]	; 0x44
 8007c56:	9417      	str	r4, [sp, #92]	; 0x5c
 8007c58:	1b7c      	subs	r4, r7, r5
 8007c5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c5c:	931c      	str	r3, [sp, #112]	; 0x70
 8007c5e:	9319      	str	r3, [sp, #100]	; 0x64
 8007c60:	931e      	str	r3, [sp, #120]	; 0x78
 8007c62:	9312      	str	r3, [sp, #72]	; 0x48
 8007c64:	9421      	str	r4, [sp, #132]	; 0x84
 8007c66:	932d      	str	r3, [sp, #180]	; 0xb4
 8007c68:	932c      	str	r3, [sp, #176]	; 0xb0
 8007c6a:	972b      	str	r7, [sp, #172]	; 0xac
 8007c6c:	f899 3000 	ldrb.w	r3, [r9]
 8007c70:	2b25      	cmp	r3, #37	; 0x25
 8007c72:	bf18      	it	ne
 8007c74:	2b00      	cmpne	r3, #0
 8007c76:	f000 80b3 	beq.w	8007de0 <_svfprintf_r+0x1e0>
 8007c7a:	f109 0201 	add.w	r2, r9, #1
 8007c7e:	4614      	mov	r4, r2
 8007c80:	3201      	adds	r2, #1
 8007c82:	7823      	ldrb	r3, [r4, #0]
 8007c84:	2b25      	cmp	r3, #37	; 0x25
 8007c86:	bf18      	it	ne
 8007c88:	2b00      	cmpne	r3, #0
 8007c8a:	d1f8      	bne.n	8007c7e <_svfprintf_r+0x7e>
 8007c8c:	ebb4 0509 	subs.w	r5, r4, r9
 8007c90:	d00f      	beq.n	8007cb2 <_svfprintf_r+0xb2>
 8007c92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007c94:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007c96:	3301      	adds	r3, #1
 8007c98:	f8c7 9000 	str.w	r9, [r7]
 8007c9c:	2b07      	cmp	r3, #7
 8007c9e:	607d      	str	r5, [r7, #4]
 8007ca0:	442a      	add	r2, r5
 8007ca2:	932c      	str	r3, [sp, #176]	; 0xb0
 8007ca4:	922d      	str	r2, [sp, #180]	; 0xb4
 8007ca6:	bfd8      	it	le
 8007ca8:	3708      	addle	r7, #8
 8007caa:	dc7f      	bgt.n	8007dac <_svfprintf_r+0x1ac>
 8007cac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cae:	4428      	add	r0, r5
 8007cb0:	9012      	str	r0, [sp, #72]	; 0x48
 8007cb2:	7823      	ldrb	r3, [r4, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8081 	beq.w	8007dbc <_svfprintf_r+0x1bc>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc6:	f104 0901 	add.w	r9, r4, #1
 8007cca:	7863      	ldrb	r3, [r4, #1]
 8007ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8007cd0:	940c      	str	r4, [sp, #48]	; 0x30
 8007cd2:	f109 0901 	add.w	r9, r9, #1
 8007cd6:	f1a3 0120 	sub.w	r1, r3, #32
 8007cda:	2958      	cmp	r1, #88	; 0x58
 8007cdc:	f200 840a 	bhi.w	80084f4 <_svfprintf_r+0x8f4>
 8007ce0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007ce4:	0408038e 	streq	r0, [r8], #-910	; 0xfffffc72
 8007ce8:	03950408 	orrseq	r0, r5, #8, 8	; 0x8000000
 8007cec:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007cf0:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007cf4:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007cf8:	0348039c 	movteq	r0, #33692	; 0x839c
 8007cfc:	005d0408 	subseq	r0, sp, r8, lsl #8
 8007d00:	04080235 	streq	r0, [r8], #-565	; 0xfffffdcb
 8007d04:	03f603ef 	mvnseq	r0, #-1140850685	; 0xbc000003
 8007d08:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 8007d0c:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 8007d10:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 8007d14:	03f603f6 	mvnseq	r0, #-671088637	; 0xd8000003
 8007d18:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d1c:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d20:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d24:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d28:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d2c:	0290026e 	addseq	r0, r0, #-536870906	; 0xe0000006
 8007d30:	02900408 	addseq	r0, r0, #8, 8	; 0x8000000
 8007d34:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d38:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d3c:	040802cd 	streq	r0, [r8], #-717	; 0xfffffd33
 8007d40:	02d40408 	sbcseq	r0, r4, #8, 8	; 0x8000000
 8007d44:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d48:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d4c:	02550408 	subseq	r0, r5, #8, 8	; 0x8000000
 8007d50:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d54:	040803bc 	streq	r0, [r8], #-956	; 0xfffffc44
 8007d58:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d5c:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d60:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d64:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d68:	03a80408 			; <UNDEFINED> instruction: 0x03a80408
 8007d6c:	029003d7 	addseq	r0, r0, #1543503875	; 0x5c000003
 8007d70:	02900290 	addseq	r0, r0, #144, 4
 8007d74:	03d70387 	bicseq	r0, r7, #469762050	; 0x1c000002
 8007d78:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d7c:	0408034c 	streq	r0, [r8], #-844	; 0xfffffcb4
 8007d80:	0224035e 	eoreq	r0, r4, #2013265921	; 0x78000001
 8007d84:	02f00370 	rscseq	r0, r0, #112, 6	; 0xc0000001
 8007d88:	02f70408 	rscseq	r0, r7, #8, 8	; 0x8000000
 8007d8c:	00800408 	addeq	r0, r0, r8, lsl #8
 8007d90:	04080408 	streq	r0, [r8], #-1032	; 0xfffffbf8
 8007d94:	9c130320 	ldcls	3, cr0, [r3], {32}
 8007d98:	9314      	str	r3, [sp, #80]	; 0x50
 8007d9a:	4264      	negs	r4, r4
 8007d9c:	9413      	str	r4, [sp, #76]	; 0x4c
 8007d9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007da0:	f045 0504 	orr.w	r5, r5, #4
 8007da4:	950a      	str	r5, [sp, #40]	; 0x28
 8007da6:	f899 3000 	ldrb.w	r3, [r9]
 8007daa:	e792      	b.n	8007cd2 <_svfprintf_r+0xd2>
 8007dac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007dae:	aa2b      	add	r2, sp, #172	; 0xac
 8007db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007db2:	f003 fb99 	bl	800b4e8 <__ssprint_r>
 8007db6:	b940      	cbnz	r0, 8007dca <_svfprintf_r+0x1ca>
 8007db8:	af38      	add	r7, sp, #224	; 0xe0
 8007dba:	e777      	b.n	8007cac <_svfprintf_r+0xac>
 8007dbc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8007dbe:	b123      	cbz	r3, 8007dca <_svfprintf_r+0x1ca>
 8007dc0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007dc2:	aa2b      	add	r2, sp, #172	; 0xac
 8007dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dc6:	f003 fb8f 	bl	800b4e8 <__ssprint_r>
 8007dca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007dcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007dd4:	bf18      	it	ne
 8007dd6:	f04f 30ff 	movne.w	r0, #4294967295
 8007dda:	b049      	add	sp, #292	; 0x124
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	464c      	mov	r4, r9
 8007de2:	e766      	b.n	8007cb2 <_svfprintf_r+0xb2>
 8007de4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007de6:	9316      	str	r3, [sp, #88]	; 0x58
 8007de8:	06a3      	lsls	r3, r4, #26
 8007dea:	f140 81d9 	bpl.w	80081a0 <_svfprintf_r+0x5a0>
 8007dee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007df0:	2301      	movs	r3, #1
 8007df2:	1dea      	adds	r2, r5, #7
 8007df4:	f022 0207 	bic.w	r2, r2, #7
 8007df8:	f102 0408 	add.w	r4, r2, #8
 8007dfc:	9414      	str	r4, [sp, #80]	; 0x50
 8007dfe:	e9d2 4500 	ldrd	r4, r5, [r2]
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8007e0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e10:	bfa2      	ittt	ge
 8007e12:	990a      	ldrge	r1, [sp, #40]	; 0x28
 8007e14:	f021 0180 	bicge.w	r1, r1, #128	; 0x80
 8007e18:	910a      	strge	r1, [sp, #40]	; 0x28
 8007e1a:	ea54 0205 	orrs.w	r2, r4, r5
 8007e1e:	bf0c      	ite	eq
 8007e20:	2200      	moveq	r2, #0
 8007e22:	2201      	movne	r2, #1
 8007e24:	2800      	cmp	r0, #0
 8007e26:	bf18      	it	ne
 8007e28:	f042 0201 	orrne.w	r2, r2, #1
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	f000 83e5 	beq.w	80085fc <_svfprintf_r+0x9fc>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f000 8509 	beq.w	800884a <_svfprintf_r+0xc4a>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	f10d 02df 	add.w	r2, sp, #223	; 0xdf
 8007e3e:	f040 8159 	bne.w	80080f4 <_svfprintf_r+0x4f4>
 8007e42:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8007e46:	f004 010f 	and.w	r1, r4, #15
 8007e4a:	0923      	lsrs	r3, r4, #4
 8007e4c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8007e50:	0928      	lsrs	r0, r5, #4
 8007e52:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8007e56:	461c      	mov	r4, r3
 8007e58:	4605      	mov	r5, r0
 8007e5a:	4690      	mov	r8, r2
 8007e5c:	ea54 0005 	orrs.w	r0, r4, r5
 8007e60:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e64:	f888 1000 	strb.w	r1, [r8]
 8007e68:	d1ed      	bne.n	8007e46 <_svfprintf_r+0x246>
 8007e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6c:	ebc8 0303 	rsb	r3, r8, r3
 8007e70:	9310      	str	r3, [sp, #64]	; 0x40
 8007e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e74:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e76:	42a5      	cmp	r5, r4
 8007e78:	bfb8      	it	lt
 8007e7a:	4625      	movlt	r5, r4
 8007e7c:	2400      	movs	r4, #0
 8007e7e:	950d      	str	r5, [sp, #52]	; 0x34
 8007e80:	9418      	str	r4, [sp, #96]	; 0x60
 8007e82:	f1ba 0f00 	cmp.w	sl, #0
 8007e86:	d002      	beq.n	8007e8e <_svfprintf_r+0x28e>
 8007e88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e8a:	3501      	adds	r5, #1
 8007e8c:	950d      	str	r5, [sp, #52]	; 0x34
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	f013 0302 	ands.w	r3, r3, #2
 8007e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e96:	bf1e      	ittt	ne
 8007e98:	9c0d      	ldrne	r4, [sp, #52]	; 0x34
 8007e9a:	3402      	addne	r4, #2
 8007e9c:	940d      	strne	r4, [sp, #52]	; 0x34
 8007e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ea0:	f014 0584 	ands.w	r5, r4, #132	; 0x84
 8007ea4:	f040 8346 	bne.w	8008534 <_svfprintf_r+0x934>
 8007ea8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007eaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007eac:	ebc0 0b04 	rsb	fp, r0, r4
 8007eb0:	f1bb 0f00 	cmp.w	fp, #0
 8007eb4:	f340 833e 	ble.w	8008534 <_svfprintf_r+0x934>
 8007eb8:	f1bb 0f10 	cmp.w	fp, #16
 8007ebc:	f64e 5abc 	movw	sl, #60860	; 0xedbc
 8007ec0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007ec2:	bfdc      	itt	le
 8007ec4:	f6c0 0a00 	movtle	sl, #2048	; 0x800
 8007ec8:	9a2c      	ldrle	r2, [sp, #176]	; 0xb0
 8007eca:	dd32      	ble.n	8007f32 <_svfprintf_r+0x332>
 8007ecc:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8007ed0:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
 8007ed4:	9520      	str	r5, [sp, #128]	; 0x80
 8007ed6:	46d8      	mov	r8, fp
 8007ed8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007eda:	46d3      	mov	fp, sl
 8007edc:	2410      	movs	r4, #16
 8007ede:	46ca      	mov	sl, r9
 8007ee0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ee2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007ee6:	e004      	b.n	8007ef2 <_svfprintf_r+0x2f2>
 8007ee8:	f1a8 0810 	sub.w	r8, r8, #16
 8007eec:	f1b8 0f10 	cmp.w	r8, #16
 8007ef0:	dd19      	ble.n	8007f26 <_svfprintf_r+0x326>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	3110      	adds	r1, #16
 8007ef6:	2a07      	cmp	r2, #7
 8007ef8:	603d      	str	r5, [r7, #0]
 8007efa:	607c      	str	r4, [r7, #4]
 8007efc:	f107 0708 	add.w	r7, r7, #8
 8007f00:	922c      	str	r2, [sp, #176]	; 0xb0
 8007f02:	912d      	str	r1, [sp, #180]	; 0xb4
 8007f04:	ddf0      	ble.n	8007ee8 <_svfprintf_r+0x2e8>
 8007f06:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007f08:	4649      	mov	r1, r9
 8007f0a:	aa2b      	add	r2, sp, #172	; 0xac
 8007f0c:	af38      	add	r7, sp, #224	; 0xe0
 8007f0e:	f003 faeb 	bl	800b4e8 <__ssprint_r>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f47f af59 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8007f18:	f1a8 0810 	sub.w	r8, r8, #16
 8007f1c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007f1e:	f1b8 0f10 	cmp.w	r8, #16
 8007f22:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007f24:	dce5      	bgt.n	8007ef2 <_svfprintf_r+0x2f2>
 8007f26:	46d1      	mov	r9, sl
 8007f28:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007f2a:	46da      	mov	sl, fp
 8007f2c:	46c3      	mov	fp, r8
 8007f2e:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8007f32:	3201      	adds	r2, #1
 8007f34:	eb0b 0401 	add.w	r4, fp, r1
 8007f38:	2a07      	cmp	r2, #7
 8007f3a:	922c      	str	r2, [sp, #176]	; 0xb0
 8007f3c:	942d      	str	r4, [sp, #180]	; 0xb4
 8007f3e:	e887 0c00 	stmia.w	r7, {sl, fp}
 8007f42:	f300 82ec 	bgt.w	800851e <_svfprintf_r+0x91e>
 8007f46:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	f1ba 0f00 	cmp.w	sl, #0
 8007f50:	d00e      	beq.n	8007f70 <_svfprintf_r+0x370>
 8007f52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007f54:	f10d 028f 	add.w	r2, sp, #143	; 0x8f
 8007f58:	3401      	adds	r4, #1
 8007f5a:	603a      	str	r2, [r7, #0]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	2201      	movs	r2, #1
 8007f60:	2b07      	cmp	r3, #7
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	942d      	str	r4, [sp, #180]	; 0xb4
 8007f66:	bfd8      	it	le
 8007f68:	3708      	addle	r7, #8
 8007f6a:	932c      	str	r3, [sp, #176]	; 0xb0
 8007f6c:	f300 8402 	bgt.w	8008774 <_svfprintf_r+0xb74>
 8007f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f72:	b16b      	cbz	r3, 8007f90 <_svfprintf_r+0x390>
 8007f74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007f76:	aa24      	add	r2, sp, #144	; 0x90
 8007f78:	3402      	adds	r4, #2
 8007f7a:	603a      	str	r2, [r7, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	2b07      	cmp	r3, #7
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	942d      	str	r4, [sp, #180]	; 0xb4
 8007f86:	bfd8      	it	le
 8007f88:	3708      	addle	r7, #8
 8007f8a:	932c      	str	r3, [sp, #176]	; 0xb0
 8007f8c:	f300 83fe 	bgt.w	800878c <_svfprintf_r+0xb8c>
 8007f90:	2d80      	cmp	r5, #128	; 0x80
 8007f92:	f000 8346 	beq.w	8008622 <_svfprintf_r+0xa22>
 8007f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f9a:	ebc3 0a05 	rsb	sl, r3, r5
 8007f9e:	f1ba 0f00 	cmp.w	sl, #0
 8007fa2:	dd43      	ble.n	800802c <_svfprintf_r+0x42c>
 8007fa4:	f1ba 0f10 	cmp.w	sl, #16
 8007fa8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007faa:	bfdc      	itt	le
 8007fac:	4d94      	ldrle	r5, [pc, #592]	; (8008200 <_svfprintf_r+0x600>)
 8007fae:	950f      	strle	r5, [sp, #60]	; 0x3c
 8007fb0:	dd27      	ble.n	8008002 <_svfprintf_r+0x402>
 8007fb2:	4893      	ldr	r0, [pc, #588]	; (8008200 <_svfprintf_r+0x600>)
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	2510      	movs	r5, #16
 8007fb8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8007fbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007fbe:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fc0:	e004      	b.n	8007fcc <_svfprintf_r+0x3cc>
 8007fc2:	f1aa 0a10 	sub.w	sl, sl, #16
 8007fc6:	f1ba 0f10 	cmp.w	sl, #16
 8007fca:	dd19      	ble.n	8008000 <_svfprintf_r+0x400>
 8007fcc:	3301      	adds	r3, #1
 8007fce:	3210      	adds	r2, #16
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	603e      	str	r6, [r7, #0]
 8007fd4:	607d      	str	r5, [r7, #4]
 8007fd6:	f107 0708 	add.w	r7, r7, #8
 8007fda:	932c      	str	r3, [sp, #176]	; 0xb0
 8007fdc:	922d      	str	r2, [sp, #180]	; 0xb4
 8007fde:	ddf0      	ble.n	8007fc2 <_svfprintf_r+0x3c2>
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	aa2b      	add	r2, sp, #172	; 0xac
 8007fe6:	af38      	add	r7, sp, #224	; 0xe0
 8007fe8:	f003 fa7e 	bl	800b4e8 <__ssprint_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f47f aeec 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8007ff2:	f1aa 0a10 	sub.w	sl, sl, #16
 8007ff6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007ff8:	f1ba 0f10 	cmp.w	sl, #16
 8007ffc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007ffe:	dce5      	bgt.n	8007fcc <_svfprintf_r+0x3cc>
 8008000:	4614      	mov	r4, r2
 8008002:	3301      	adds	r3, #1
 8008004:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008006:	2b07      	cmp	r3, #7
 8008008:	4454      	add	r4, sl
 800800a:	932c      	str	r3, [sp, #176]	; 0xb0
 800800c:	e887 0420 	stmia.w	r7, {r5, sl}
 8008010:	bfd8      	it	le
 8008012:	3708      	addle	r7, #8
 8008014:	942d      	str	r4, [sp, #180]	; 0xb4
 8008016:	dd09      	ble.n	800802c <_svfprintf_r+0x42c>
 8008018:	980e      	ldr	r0, [sp, #56]	; 0x38
 800801a:	aa2b      	add	r2, sp, #172	; 0xac
 800801c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800801e:	f003 fa63 	bl	800b4e8 <__ssprint_r>
 8008022:	2800      	cmp	r0, #0
 8008024:	f47f aed1 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008028:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800802a:	af38      	add	r7, sp, #224	; 0xe0
 800802c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800802e:	05eb      	lsls	r3, r5, #23
 8008030:	f100 8282 	bmi.w	8008538 <_svfprintf_r+0x938>
 8008034:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008036:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008038:	3301      	adds	r3, #1
 800803a:	f8c7 8000 	str.w	r8, [r7]
 800803e:	2b07      	cmp	r3, #7
 8008040:	442c      	add	r4, r5
 8008042:	607d      	str	r5, [r7, #4]
 8008044:	942d      	str	r4, [sp, #180]	; 0xb4
 8008046:	932c      	str	r3, [sp, #176]	; 0xb0
 8008048:	f300 837a 	bgt.w	8008740 <_svfprintf_r+0xb40>
 800804c:	3708      	adds	r7, #8
 800804e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008050:	076b      	lsls	r3, r5, #29
 8008052:	d540      	bpl.n	80080d6 <_svfprintf_r+0x4d6>
 8008054:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008056:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008058:	1a45      	subs	r5, r0, r1
 800805a:	2d00      	cmp	r5, #0
 800805c:	dd3b      	ble.n	80080d6 <_svfprintf_r+0x4d6>
 800805e:	2d10      	cmp	r5, #16
 8008060:	f64e 5abc 	movw	sl, #60860	; 0xedbc
 8008064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008066:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800806a:	dd22      	ble.n	80080b2 <_svfprintf_r+0x4b2>
 800806c:	4622      	mov	r2, r4
 800806e:	f04f 0810 	mov.w	r8, #16
 8008072:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8008076:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008078:	e002      	b.n	8008080 <_svfprintf_r+0x480>
 800807a:	3d10      	subs	r5, #16
 800807c:	2d10      	cmp	r5, #16
 800807e:	dd17      	ble.n	80080b0 <_svfprintf_r+0x4b0>
 8008080:	3301      	adds	r3, #1
 8008082:	3210      	adds	r2, #16
 8008084:	2b07      	cmp	r3, #7
 8008086:	e887 0110 	stmia.w	r7, {r4, r8}
 800808a:	932c      	str	r3, [sp, #176]	; 0xb0
 800808c:	f107 0708 	add.w	r7, r7, #8
 8008090:	922d      	str	r2, [sp, #180]	; 0xb4
 8008092:	ddf2      	ble.n	800807a <_svfprintf_r+0x47a>
 8008094:	4658      	mov	r0, fp
 8008096:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008098:	aa2b      	add	r2, sp, #172	; 0xac
 800809a:	af38      	add	r7, sp, #224	; 0xe0
 800809c:	f003 fa24 	bl	800b4e8 <__ssprint_r>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f47f ae92 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80080a6:	3d10      	subs	r5, #16
 80080a8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80080aa:	2d10      	cmp	r5, #16
 80080ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80080ae:	dce7      	bgt.n	8008080 <_svfprintf_r+0x480>
 80080b0:	4614      	mov	r4, r2
 80080b2:	3301      	adds	r3, #1
 80080b4:	442c      	add	r4, r5
 80080b6:	2b07      	cmp	r3, #7
 80080b8:	932c      	str	r3, [sp, #176]	; 0xb0
 80080ba:	942d      	str	r4, [sp, #180]	; 0xb4
 80080bc:	f8c7 a000 	str.w	sl, [r7]
 80080c0:	607d      	str	r5, [r7, #4]
 80080c2:	dd08      	ble.n	80080d6 <_svfprintf_r+0x4d6>
 80080c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80080c6:	aa2b      	add	r2, sp, #172	; 0xac
 80080c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ca:	f003 fa0d 	bl	800b4e8 <__ssprint_r>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f47f ae7b 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80080d4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80080d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80080d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80080dc:	4281      	cmp	r1, r0
 80080de:	bfac      	ite	ge
 80080e0:	186d      	addge	r5, r5, r1
 80080e2:	182d      	addlt	r5, r5, r0
 80080e4:	9512      	str	r5, [sp, #72]	; 0x48
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	f040 8335 	bne.w	8008756 <_svfprintf_r+0xb56>
 80080ec:	2300      	movs	r3, #0
 80080ee:	af38      	add	r7, sp, #224	; 0xe0
 80080f0:	932c      	str	r3, [sp, #176]	; 0xb0
 80080f2:	e5bb      	b.n	8007c6c <_svfprintf_r+0x6c>
 80080f4:	08e3      	lsrs	r3, r4, #3
 80080f6:	08e9      	lsrs	r1, r5, #3
 80080f8:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 80080fc:	4690      	mov	r8, r2
 80080fe:	460d      	mov	r5, r1
 8008100:	f004 0207 	and.w	r2, r4, #7
 8008104:	461c      	mov	r4, r3
 8008106:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800810a:	ea54 0105 	orrs.w	r1, r4, r5
 800810e:	f108 32ff 	add.w	r2, r8, #4294967295
 8008112:	f888 3000 	strb.w	r3, [r8]
 8008116:	d1ed      	bne.n	80080f4 <_svfprintf_r+0x4f4>
 8008118:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800811a:	4641      	mov	r1, r8
 800811c:	07e0      	lsls	r0, r4, #31
 800811e:	f100 84f5 	bmi.w	8008b0c <_svfprintf_r+0xf0c>
 8008122:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008124:	ebc8 0505 	rsb	r5, r8, r5
 8008128:	9510      	str	r5, [sp, #64]	; 0x40
 800812a:	e6a2      	b.n	8007e72 <_svfprintf_r+0x272>
 800812c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800812e:	9316      	str	r3, [sp, #88]	; 0x58
 8008130:	f015 0320 	ands.w	r3, r5, #32
 8008134:	f000 80b4 	beq.w	80082a0 <_svfprintf_r+0x6a0>
 8008138:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800813a:	2300      	movs	r3, #0
 800813c:	1de2      	adds	r2, r4, #7
 800813e:	f022 0207 	bic.w	r2, r2, #7
 8008142:	f102 0508 	add.w	r5, r2, #8
 8008146:	9514      	str	r5, [sp, #80]	; 0x50
 8008148:	e9d2 4500 	ldrd	r4, r5, [r2]
 800814c:	e659      	b.n	8007e02 <_svfprintf_r+0x202>
 800814e:	f899 3000 	ldrb.w	r3, [r9]
 8008152:	f109 0401 	add.w	r4, r9, #1
 8008156:	2b2a      	cmp	r3, #42	; 0x2a
 8008158:	f000 8791 	beq.w	800907e <_svfprintf_r+0x147e>
 800815c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008160:	2909      	cmp	r1, #9
 8008162:	bf82      	ittt	hi
 8008164:	46a1      	movhi	r9, r4
 8008166:	2400      	movhi	r4, #0
 8008168:	940c      	strhi	r4, [sp, #48]	; 0x30
 800816a:	f63f adb4 	bhi.w	8007cd6 <_svfprintf_r+0xd6>
 800816e:	2000      	movs	r0, #0
 8008170:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008174:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008178:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800817c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008180:	2909      	cmp	r1, #9
 8008182:	d9f5      	bls.n	8008170 <_svfprintf_r+0x570>
 8008184:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8008188:	46a1      	mov	r9, r4
 800818a:	900c      	str	r0, [sp, #48]	; 0x30
 800818c:	e5a3      	b.n	8007cd6 <_svfprintf_r+0xd6>
 800818e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008190:	9316      	str	r3, [sp, #88]	; 0x58
 8008192:	f045 0510 	orr.w	r5, r5, #16
 8008196:	950a      	str	r5, [sp, #40]	; 0x28
 8008198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800819a:	06a3      	lsls	r3, r4, #26
 800819c:	f53f ae27 	bmi.w	8007dee <_svfprintf_r+0x1ee>
 80081a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80081a2:	06ed      	lsls	r5, r5, #27
 80081a4:	f100 83c4 	bmi.w	8008930 <_svfprintf_r+0xd30>
 80081a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081aa:	0664      	lsls	r4, r4, #25
 80081ac:	f140 83c0 	bpl.w	8008930 <_svfprintf_r+0xd30>
 80081b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80081b2:	2500      	movs	r5, #0
 80081b4:	2301      	movs	r3, #1
 80081b6:	3004      	adds	r0, #4
 80081b8:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 80081bc:	9014      	str	r0, [sp, #80]	; 0x50
 80081be:	e620      	b.n	8007e02 <_svfprintf_r+0x202>
 80081c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081c2:	9316      	str	r3, [sp, #88]	; 0x58
 80081c4:	f044 0410 	orr.w	r4, r4, #16
 80081c8:	940a      	str	r4, [sp, #40]	; 0x28
 80081ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80081cc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80081d0:	06a9      	lsls	r1, r5, #26
 80081d2:	f140 8165 	bpl.w	80084a0 <_svfprintf_r+0x8a0>
 80081d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80081d8:	1de3      	adds	r3, r4, #7
 80081da:	f023 0307 	bic.w	r3, r3, #7
 80081de:	f103 0508 	add.w	r5, r3, #8
 80081e2:	9514      	str	r5, [sp, #80]	; 0x50
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	4614      	mov	r4, r2
 80081ea:	461d      	mov	r5, r3
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	f173 0000 	sbcs.w	r0, r3, #0
 80081f2:	f2c0 83bb 	blt.w	800896c <_svfprintf_r+0xd6c>
 80081f6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 80081fa:	2301      	movs	r3, #1
 80081fc:	e605      	b.n	8007e0a <_svfprintf_r+0x20a>
 80081fe:	bf00      	nop
 8008200:	0800edcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 8008204:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008206:	9316      	str	r3, [sp, #88]	; 0x58
 8008208:	0725      	lsls	r5, r4, #28
 800820a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800820e:	f140 84ab 	bpl.w	8008b68 <_svfprintf_r+0xf68>
 8008212:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008214:	1deb      	adds	r3, r5, #7
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	f103 0408 	add.w	r4, r3, #8
 800821e:	9414      	str	r4, [sp, #80]	; 0x50
 8008220:	681d      	ldr	r5, [r3, #0]
 8008222:	951b      	str	r5, [sp, #108]	; 0x6c
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	931c      	str	r3, [sp, #112]	; 0x70
 8008228:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800822a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800822c:	f003 f802 	bl	800b234 <__fpclassifyd>
 8008230:	2801      	cmp	r0, #1
 8008232:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008234:	f040 8478 	bne.w	8008b28 <_svfprintf_r+0xf28>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800823e:	f005 f923 	bl	800d488 <__aeabi_dcmplt>
 8008242:	2800      	cmp	r0, #0
 8008244:	f040 864a 	bne.w	8008edc <_svfprintf_r+0x12dc>
 8008248:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 800824c:	2503      	movs	r5, #3
 800824e:	2400      	movs	r4, #0
 8008250:	f24f 18c4 	movw	r8, #61892	; 0xf1c4
 8008254:	f24f 13c0 	movw	r3, #61888	; 0xf1c0
 8008258:	950d      	str	r5, [sp, #52]	; 0x34
 800825a:	f6c0 0800 	movt	r8, #2048	; 0x800
 800825e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008260:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008264:	940c      	str	r4, [sp, #48]	; 0x30
 8008266:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008268:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800826c:	950a      	str	r5, [sp, #40]	; 0x28
 800826e:	2503      	movs	r5, #3
 8008270:	2c47      	cmp	r4, #71	; 0x47
 8008272:	bfd8      	it	le
 8008274:	4698      	movle	r8, r3
 8008276:	9510      	str	r5, [sp, #64]	; 0x40
 8008278:	2400      	movs	r4, #0
 800827a:	9418      	str	r4, [sp, #96]	; 0x60
 800827c:	e601      	b.n	8007e82 <_svfprintf_r+0x282>
 800827e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008280:	f045 0508 	orr.w	r5, r5, #8
 8008284:	950a      	str	r5, [sp, #40]	; 0x28
 8008286:	f899 3000 	ldrb.w	r3, [r9]
 800828a:	e522      	b.n	8007cd2 <_svfprintf_r+0xd2>
 800828c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800828e:	9316      	str	r3, [sp, #88]	; 0x58
 8008290:	f044 0410 	orr.w	r4, r4, #16
 8008294:	940a      	str	r4, [sp, #40]	; 0x28
 8008296:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008298:	f015 0320 	ands.w	r3, r5, #32
 800829c:	f47f af4c 	bne.w	8008138 <_svfprintf_r+0x538>
 80082a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082a2:	f014 0210 	ands.w	r2, r4, #16
 80082a6:	f040 834c 	bne.w	8008942 <_svfprintf_r+0xd42>
 80082aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082ac:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 80082b0:	f000 8347 	beq.w	8008942 <_svfprintf_r+0xd42>
 80082b4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80082b6:	4613      	mov	r3, r2
 80082b8:	2500      	movs	r5, #0
 80082ba:	3004      	adds	r0, #4
 80082bc:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 80082c0:	9014      	str	r0, [sp, #80]	; 0x50
 80082c2:	e59e      	b.n	8007e02 <_svfprintf_r+0x202>
 80082c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80082c6:	f045 0520 	orr.w	r5, r5, #32
 80082ca:	950a      	str	r5, [sp, #40]	; 0x28
 80082cc:	f899 3000 	ldrb.w	r3, [r9]
 80082d0:	e4ff      	b.n	8007cd2 <_svfprintf_r+0xd2>
 80082d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80082d4:	2500      	movs	r5, #0
 80082d6:	9316      	str	r3, [sp, #88]	; 0x58
 80082d8:	3404      	adds	r4, #4
 80082da:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
 80082de:	f854 8c04 	ldr.w	r8, [r4, #-4]
 80082e2:	f1b8 0f00 	cmp.w	r8, #0
 80082e6:	f000 85d9 	beq.w	8008e9c <_svfprintf_r+0x129c>
 80082ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80082ec:	2800      	cmp	r0, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	f2c0 85ab 	blt.w	8008e4a <_svfprintf_r+0x124a>
 80082f4:	4629      	mov	r1, r5
 80082f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f8:	f002 fa60 	bl	800a7bc <memchr>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f000 85ff 	beq.w	8008f00 <_svfprintf_r+0x1300>
 8008302:	9414      	str	r4, [sp, #80]	; 0x50
 8008304:	ebc8 0000 	rsb	r0, r8, r0
 8008308:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800830a:	950c      	str	r5, [sp, #48]	; 0x30
 800830c:	42a0      	cmp	r0, r4
 800830e:	bfb8      	it	lt
 8008310:	4604      	movlt	r4, r0
 8008312:	9410      	str	r4, [sp, #64]	; 0x40
 8008314:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 8008318:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800831a:	950d      	str	r5, [sp, #52]	; 0x34
 800831c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008320:	9418      	str	r4, [sp, #96]	; 0x60
 8008322:	e5ae      	b.n	8007e82 <_svfprintf_r+0x282>
 8008324:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008326:	f24f 14e4 	movw	r4, #61924	; 0xf1e4
 800832a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800832e:	9316      	str	r3, [sp, #88]	; 0x58
 8008330:	06a8      	lsls	r0, r5, #26
 8008332:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 8008336:	9419      	str	r4, [sp, #100]	; 0x64
 8008338:	f140 809c 	bpl.w	8008474 <_svfprintf_r+0x874>
 800833c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800833e:	1de3      	adds	r3, r4, #7
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	f103 0508 	add.w	r5, r3, #8
 8008348:	9514      	str	r5, [sp, #80]	; 0x50
 800834a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800834e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008350:	07c3      	lsls	r3, r0, #31
 8008352:	f140 8227 	bpl.w	80087a4 <_svfprintf_r+0xba4>
 8008356:	ea54 0105 	orrs.w	r1, r4, r5
 800835a:	f000 8223 	beq.w	80087a4 <_svfprintf_r+0xba4>
 800835e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008360:	2330      	movs	r3, #48	; 0x30
 8008362:	f040 0002 	orr.w	r0, r0, #2
 8008366:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 800836a:	900a      	str	r0, [sp, #40]	; 0x28
 800836c:	2302      	movs	r3, #2
 800836e:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8008372:	e546      	b.n	8007e02 <_svfprintf_r+0x202>
 8008374:	f899 3000 	ldrb.w	r3, [r9]
 8008378:	222b      	movs	r2, #43	; 0x2b
 800837a:	e4aa      	b.n	8007cd2 <_svfprintf_r+0xd2>
 800837c:	f899 3000 	ldrb.w	r3, [r9]
 8008380:	4649      	mov	r1, r9
 8008382:	2b6c      	cmp	r3, #108	; 0x6c
 8008384:	bf05      	ittet	eq
 8008386:	f109 0901 	addeq.w	r9, r9, #1
 800838a:	9d0a      	ldreq	r5, [sp, #40]	; 0x28
 800838c:	9c0a      	ldrne	r4, [sp, #40]	; 0x28
 800838e:	f045 0520 	orreq.w	r5, r5, #32
 8008392:	bf0b      	itete	eq
 8008394:	784b      	ldrbeq	r3, [r1, #1]
 8008396:	f044 0410 	orrne.w	r4, r4, #16
 800839a:	950a      	streq	r5, [sp, #40]	; 0x28
 800839c:	940a      	strne	r4, [sp, #40]	; 0x28
 800839e:	e498      	b.n	8007cd2 <_svfprintf_r+0xd2>
 80083a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083a2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80083a6:	06a9      	lsls	r1, r5, #26
 80083a8:	f140 83eb 	bpl.w	8008b82 <_svfprintf_r+0xf82>
 80083ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80083b2:	4622      	mov	r2, r4
 80083b4:	17e5      	asrs	r5, r4, #31
 80083b6:	462b      	mov	r3, r5
 80083b8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80083ba:	e9c1 2300 	strd	r2, r3, [r1]
 80083be:	3504      	adds	r5, #4
 80083c0:	9514      	str	r5, [sp, #80]	; 0x50
 80083c2:	e453      	b.n	8007c6c <_svfprintf_r+0x6c>
 80083c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083c6:	f24f 10e4 	movw	r0, #61924	; 0xf1e4
 80083ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083cc:	2378      	movs	r3, #120	; 0x78
 80083ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80083d2:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 80083d6:	f045 0502 	orr.w	r5, r5, #2
 80083da:	9316      	str	r3, [sp, #88]	; 0x58
 80083dc:	950a      	str	r5, [sp, #40]	; 0x28
 80083de:	2330      	movs	r3, #48	; 0x30
 80083e0:	1d15      	adds	r5, r2, #4
 80083e2:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80083e6:	9514      	str	r5, [sp, #80]	; 0x50
 80083e8:	2302      	movs	r3, #2
 80083ea:	6814      	ldr	r4, [r2, #0]
 80083ec:	2500      	movs	r5, #0
 80083ee:	9019      	str	r0, [sp, #100]	; 0x64
 80083f0:	e507      	b.n	8007e02 <_svfprintf_r+0x202>
 80083f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083f4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80083f8:	940a      	str	r4, [sp, #40]	; 0x28
 80083fa:	f899 3000 	ldrb.w	r3, [r9]
 80083fe:	e468      	b.n	8007cd2 <_svfprintf_r+0xd2>
 8008400:	f899 3000 	ldrb.w	r3, [r9]
 8008404:	2a00      	cmp	r2, #0
 8008406:	f47f ac64 	bne.w	8007cd2 <_svfprintf_r+0xd2>
 800840a:	2220      	movs	r2, #32
 800840c:	e461      	b.n	8007cd2 <_svfprintf_r+0xd2>
 800840e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008410:	f045 0501 	orr.w	r5, r5, #1
 8008414:	950a      	str	r5, [sp, #40]	; 0x28
 8008416:	f899 3000 	ldrb.w	r3, [r9]
 800841a:	e45a      	b.n	8007cd2 <_svfprintf_r+0xd2>
 800841c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800841e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008420:	6824      	ldr	r4, [r4, #0]
 8008422:	1d2b      	adds	r3, r5, #4
 8008424:	2c00      	cmp	r4, #0
 8008426:	9413      	str	r4, [sp, #76]	; 0x4c
 8008428:	f6ff acb5 	blt.w	8007d96 <_svfprintf_r+0x196>
 800842c:	9314      	str	r3, [sp, #80]	; 0x50
 800842e:	f899 3000 	ldrb.w	r3, [r9]
 8008432:	e44e      	b.n	8007cd2 <_svfprintf_r+0xd2>
 8008434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008436:	2401      	movs	r4, #1
 8008438:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800843a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800843e:	9316      	str	r3, [sp, #88]	; 0x58
 8008440:	2300      	movs	r3, #0
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	3504      	adds	r5, #4
 8008446:	469a      	mov	sl, r3
 8008448:	940d      	str	r4, [sp, #52]	; 0x34
 800844a:	9514      	str	r5, [sp, #80]	; 0x50
 800844c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8008450:	930c      	str	r3, [sp, #48]	; 0x30
 8008452:	9318      	str	r3, [sp, #96]	; 0x60
 8008454:	9410      	str	r4, [sp, #64]	; 0x40
 8008456:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
 800845a:	e518      	b.n	8007e8e <_svfprintf_r+0x28e>
 800845c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800845e:	f24f 14d0 	movw	r4, #61904	; 0xf1d0
 8008462:	f6c0 0400 	movt	r4, #2048	; 0x800
 8008466:	9316      	str	r3, [sp, #88]	; 0x58
 8008468:	06a8      	lsls	r0, r5, #26
 800846a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800846e:	9419      	str	r4, [sp, #100]	; 0x64
 8008470:	f53f af64 	bmi.w	800833c <_svfprintf_r+0x73c>
 8008474:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008476:	06e1      	lsls	r1, r4, #27
 8008478:	f100 8253 	bmi.w	8008922 <_svfprintf_r+0xd22>
 800847c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800847e:	0662      	lsls	r2, r4, #25
 8008480:	f140 824f 	bpl.w	8008922 <_svfprintf_r+0xd22>
 8008484:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008486:	2500      	movs	r5, #0
 8008488:	3004      	adds	r0, #4
 800848a:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800848e:	9014      	str	r0, [sp, #80]	; 0x50
 8008490:	e75d      	b.n	800834e <_svfprintf_r+0x74e>
 8008492:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008494:	9316      	str	r3, [sp, #88]	; 0x58
 8008496:	06a9      	lsls	r1, r5, #26
 8008498:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 800849c:	f53f ae9b 	bmi.w	80081d6 <_svfprintf_r+0x5d6>
 80084a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084a2:	06e2      	lsls	r2, r4, #27
 80084a4:	f100 8255 	bmi.w	8008952 <_svfprintf_r+0xd52>
 80084a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084aa:	0663      	lsls	r3, r4, #25
 80084ac:	f140 8251 	bpl.w	8008952 <_svfprintf_r+0xd52>
 80084b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80084b2:	3004      	adds	r0, #4
 80084b4:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 80084b8:	9014      	str	r0, [sp, #80]	; 0x50
 80084ba:	4622      	mov	r2, r4
 80084bc:	17e5      	asrs	r5, r4, #31
 80084be:	462b      	mov	r3, r5
 80084c0:	e694      	b.n	80081ec <_svfprintf_r+0x5ec>
 80084c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084c4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80084c8:	950a      	str	r5, [sp, #40]	; 0x28
 80084ca:	f899 3000 	ldrb.w	r3, [r9]
 80084ce:	e400      	b.n	8007cd2 <_svfprintf_r+0xd2>
 80084d0:	2400      	movs	r4, #0
 80084d2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80084d6:	4620      	mov	r0, r4
 80084d8:	9413      	str	r4, [sp, #76]	; 0x4c
 80084da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80084de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80084e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80084e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80084ea:	2909      	cmp	r1, #9
 80084ec:	d9f5      	bls.n	80084da <_svfprintf_r+0x8da>
 80084ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80084f0:	f7ff bbf1 	b.w	8007cd6 <_svfprintf_r+0xd6>
 80084f4:	9316      	str	r3, [sp, #88]	; 0x58
 80084f6:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f43f ac5e 	beq.w	8007dbc <_svfprintf_r+0x1bc>
 8008500:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008502:	2300      	movs	r3, #0
 8008504:	2501      	movs	r5, #1
 8008506:	469a      	mov	sl, r3
 8008508:	950d      	str	r5, [sp, #52]	; 0x34
 800850a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800850e:	f88d 40b8 	strb.w	r4, [sp, #184]	; 0xb8
 8008512:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8008516:	930c      	str	r3, [sp, #48]	; 0x30
 8008518:	9318      	str	r3, [sp, #96]	; 0x60
 800851a:	9510      	str	r5, [sp, #64]	; 0x40
 800851c:	e4b7      	b.n	8007e8e <_svfprintf_r+0x28e>
 800851e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008520:	aa2b      	add	r2, sp, #172	; 0xac
 8008522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008524:	f002 ffe0 	bl	800b4e8 <__ssprint_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	f47f ac4e 	bne.w	8007dca <_svfprintf_r+0x1ca>
 800852e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008532:	af38      	add	r7, sp, #224	; 0xe0
 8008534:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008536:	e509      	b.n	8007f4c <_svfprintf_r+0x34c>
 8008538:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800853a:	2d65      	cmp	r5, #101	; 0x65
 800853c:	f340 80b9 	ble.w	80086b2 <_svfprintf_r+0xab2>
 8008540:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008542:	2200      	movs	r2, #0
 8008544:	2300      	movs	r3, #0
 8008546:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008548:	f004 ff94 	bl	800d474 <__aeabi_dcmpeq>
 800854c:	2800      	cmp	r0, #0
 800854e:	f000 812c 	beq.w	80087aa <_svfprintf_r+0xbaa>
 8008552:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008554:	2201      	movs	r2, #1
 8008556:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008558:	3401      	adds	r4, #1
 800855a:	4413      	add	r3, r2
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	2b07      	cmp	r3, #7
 8008560:	942d      	str	r4, [sp, #180]	; 0xb4
 8008562:	603d      	str	r5, [r7, #0]
 8008564:	bfd8      	it	le
 8008566:	3708      	addle	r7, #8
 8008568:	932c      	str	r3, [sp, #176]	; 0xb0
 800856a:	f300 8316 	bgt.w	8008b9a <_svfprintf_r+0xf9a>
 800856e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008570:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008572:	42ab      	cmp	r3, r5
 8008574:	db03      	blt.n	800857e <_svfprintf_r+0x97e>
 8008576:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008578:	07ed      	lsls	r5, r5, #31
 800857a:	f57f ad68 	bpl.w	800804e <_svfprintf_r+0x44e>
 800857e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008580:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008582:	442c      	add	r4, r5
 8008584:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008586:	3301      	adds	r3, #1
 8008588:	942d      	str	r4, [sp, #180]	; 0xb4
 800858a:	2b07      	cmp	r3, #7
 800858c:	932c      	str	r3, [sp, #176]	; 0xb0
 800858e:	603d      	str	r5, [r7, #0]
 8008590:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008592:	607d      	str	r5, [r7, #4]
 8008594:	bfd8      	it	le
 8008596:	3708      	addle	r7, #8
 8008598:	f300 835e 	bgt.w	8008c58 <_svfprintf_r+0x1058>
 800859c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800859e:	f105 38ff 	add.w	r8, r5, #4294967295
 80085a2:	f1b8 0f00 	cmp.w	r8, #0
 80085a6:	f77f ad52 	ble.w	800804e <_svfprintf_r+0x44e>
 80085aa:	f1b8 0f10 	cmp.w	r8, #16
 80085ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80085b0:	f340 81aa 	ble.w	8008908 <_svfprintf_r+0xd08>
 80085b4:	4dac      	ldr	r5, [pc, #688]	; (8008868 <_svfprintf_r+0xc68>)
 80085b6:	f04f 0a10 	mov.w	sl, #16
 80085ba:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80085be:	950f      	str	r5, [sp, #60]	; 0x3c
 80085c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80085c2:	e005      	b.n	80085d0 <_svfprintf_r+0x9d0>
 80085c4:	f1a8 0810 	sub.w	r8, r8, #16
 80085c8:	f1b8 0f10 	cmp.w	r8, #16
 80085cc:	f340 819e 	ble.w	800890c <_svfprintf_r+0xd0c>
 80085d0:	3301      	adds	r3, #1
 80085d2:	3410      	adds	r4, #16
 80085d4:	2b07      	cmp	r3, #7
 80085d6:	e887 0440 	stmia.w	r7, {r6, sl}
 80085da:	932c      	str	r3, [sp, #176]	; 0xb0
 80085dc:	f107 0708 	add.w	r7, r7, #8
 80085e0:	942d      	str	r4, [sp, #180]	; 0xb4
 80085e2:	ddef      	ble.n	80085c4 <_svfprintf_r+0x9c4>
 80085e4:	4628      	mov	r0, r5
 80085e6:	4659      	mov	r1, fp
 80085e8:	aa2b      	add	r2, sp, #172	; 0xac
 80085ea:	af38      	add	r7, sp, #224	; 0xe0
 80085ec:	f002 ff7c 	bl	800b4e8 <__ssprint_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f47f abea 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80085f6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80085f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80085fa:	e7e3      	b.n	80085c4 <_svfprintf_r+0x9c4>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f040 80b4 	bne.w	800876a <_svfprintf_r+0xb6a>
 8008602:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008604:	07e2      	lsls	r2, r4, #31
 8008606:	bf5c      	itt	pl
 8008608:	9310      	strpl	r3, [sp, #64]	; 0x40
 800860a:	f10d 08e0 	addpl.w	r8, sp, #224	; 0xe0
 800860e:	f57f ac30 	bpl.w	8007e72 <_svfprintf_r+0x272>
 8008612:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008614:	2330      	movs	r3, #48	; 0x30
 8008616:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800861a:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800861e:	9510      	str	r5, [sp, #64]	; 0x40
 8008620:	e427      	b.n	8007e72 <_svfprintf_r+0x272>
 8008622:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008624:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008626:	1a45      	subs	r5, r0, r1
 8008628:	2d00      	cmp	r5, #0
 800862a:	f77f acb4 	ble.w	8007f96 <_svfprintf_r+0x396>
 800862e:	2d10      	cmp	r5, #16
 8008630:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008632:	bfdc      	itt	le
 8008634:	4a8c      	ldrle	r2, [pc, #560]	; (8008868 <_svfprintf_r+0xc68>)
 8008636:	920f      	strle	r2, [sp, #60]	; 0x3c
 8008638:	dd24      	ble.n	8008684 <_svfprintf_r+0xa84>
 800863a:	488b      	ldr	r0, [pc, #556]	; (8008868 <_svfprintf_r+0xc68>)
 800863c:	4622      	mov	r2, r4
 800863e:	f04f 0b10 	mov.w	fp, #16
 8008642:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8008646:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008648:	900f      	str	r0, [sp, #60]	; 0x3c
 800864a:	e002      	b.n	8008652 <_svfprintf_r+0xa52>
 800864c:	3d10      	subs	r5, #16
 800864e:	2d10      	cmp	r5, #16
 8008650:	dd17      	ble.n	8008682 <_svfprintf_r+0xa82>
 8008652:	3301      	adds	r3, #1
 8008654:	3210      	adds	r2, #16
 8008656:	2b07      	cmp	r3, #7
 8008658:	e887 0840 	stmia.w	r7, {r6, fp}
 800865c:	932c      	str	r3, [sp, #176]	; 0xb0
 800865e:	f107 0708 	add.w	r7, r7, #8
 8008662:	922d      	str	r2, [sp, #180]	; 0xb4
 8008664:	ddf2      	ble.n	800864c <_svfprintf_r+0xa4c>
 8008666:	4650      	mov	r0, sl
 8008668:	4621      	mov	r1, r4
 800866a:	aa2b      	add	r2, sp, #172	; 0xac
 800866c:	af38      	add	r7, sp, #224	; 0xe0
 800866e:	f002 ff3b 	bl	800b4e8 <__ssprint_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	f47f aba9 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008678:	3d10      	subs	r5, #16
 800867a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800867c:	2d10      	cmp	r5, #16
 800867e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008680:	dce7      	bgt.n	8008652 <_svfprintf_r+0xa52>
 8008682:	4614      	mov	r4, r2
 8008684:	3301      	adds	r3, #1
 8008686:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008688:	2b07      	cmp	r3, #7
 800868a:	442c      	add	r4, r5
 800868c:	932c      	str	r3, [sp, #176]	; 0xb0
 800868e:	e887 0022 	stmia.w	r7, {r1, r5}
 8008692:	bfd8      	it	le
 8008694:	3708      	addle	r7, #8
 8008696:	942d      	str	r4, [sp, #180]	; 0xb4
 8008698:	f77f ac7d 	ble.w	8007f96 <_svfprintf_r+0x396>
 800869c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800869e:	aa2b      	add	r2, sp, #172	; 0xac
 80086a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086a2:	f002 ff21 	bl	800b4e8 <__ssprint_r>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	f47f ab8f 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80086ac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80086ae:	af38      	add	r7, sp, #224	; 0xe0
 80086b0:	e471      	b.n	8007f96 <_svfprintf_r+0x396>
 80086b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80086b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80086b6:	2d01      	cmp	r5, #1
 80086b8:	f340 81e2 	ble.w	8008a80 <_svfprintf_r+0xe80>
 80086bc:	2101      	movs	r1, #1
 80086be:	1c62      	adds	r2, r4, #1
 80086c0:	440b      	add	r3, r1
 80086c2:	f8c7 8000 	str.w	r8, [r7]
 80086c6:	2b07      	cmp	r3, #7
 80086c8:	6079      	str	r1, [r7, #4]
 80086ca:	922d      	str	r2, [sp, #180]	; 0xb4
 80086cc:	bfd8      	it	le
 80086ce:	3708      	addle	r7, #8
 80086d0:	932c      	str	r3, [sp, #176]	; 0xb0
 80086d2:	f300 81f4 	bgt.w	8008abe <_svfprintf_r+0xebe>
 80086d6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80086d8:	1c5c      	adds	r4, r3, #1
 80086da:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 80086de:	2c07      	cmp	r4, #7
 80086e0:	942c      	str	r4, [sp, #176]	; 0xb0
 80086e2:	603d      	str	r5, [r7, #0]
 80086e4:	4492      	add	sl, r2
 80086e6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80086e8:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 80086ec:	607d      	str	r5, [r7, #4]
 80086ee:	bfd8      	it	le
 80086f0:	3708      	addle	r7, #8
 80086f2:	f300 81d7 	bgt.w	8008aa4 <_svfprintf_r+0xea4>
 80086f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80086f8:	2200      	movs	r2, #0
 80086fa:	2300      	movs	r3, #0
 80086fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086fe:	f004 feb9 	bl	800d474 <__aeabi_dcmpeq>
 8008702:	2800      	cmp	r0, #0
 8008704:	f040 80b2 	bne.w	800886c <_svfprintf_r+0xc6c>
 8008708:	3401      	adds	r4, #1
 800870a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800870c:	2c07      	cmp	r4, #7
 800870e:	f108 0201 	add.w	r2, r8, #1
 8008712:	f105 33ff 	add.w	r3, r5, #4294967295
 8008716:	942c      	str	r4, [sp, #176]	; 0xb0
 8008718:	449a      	add	sl, r3
 800871a:	603a      	str	r2, [r7, #0]
 800871c:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 8008720:	607b      	str	r3, [r7, #4]
 8008722:	f300 80e4 	bgt.w	80088ee <_svfprintf_r+0xcee>
 8008726:	3708      	adds	r7, #8
 8008728:	1c63      	adds	r3, r4, #1
 800872a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800872c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800872e:	2b07      	cmp	r3, #7
 8008730:	aa27      	add	r2, sp, #156	; 0x9c
 8008732:	932c      	str	r3, [sp, #176]	; 0xb0
 8008734:	4454      	add	r4, sl
 8008736:	e887 0024 	stmia.w	r7, {r2, r5}
 800873a:	942d      	str	r4, [sp, #180]	; 0xb4
 800873c:	f77f ac86 	ble.w	800804c <_svfprintf_r+0x44c>
 8008740:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008742:	aa2b      	add	r2, sp, #172	; 0xac
 8008744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008746:	f002 fecf 	bl	800b4e8 <__ssprint_r>
 800874a:	2800      	cmp	r0, #0
 800874c:	f47f ab3d 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008750:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008752:	af38      	add	r7, sp, #224	; 0xe0
 8008754:	e47b      	b.n	800804e <_svfprintf_r+0x44e>
 8008756:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008758:	aa2b      	add	r2, sp, #172	; 0xac
 800875a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800875c:	f002 fec4 	bl	800b4e8 <__ssprint_r>
 8008760:	2800      	cmp	r0, #0
 8008762:	f43f acc3 	beq.w	80080ec <_svfprintf_r+0x4ec>
 8008766:	f7ff bb30 	b.w	8007dca <_svfprintf_r+0x1ca>
 800876a:	9210      	str	r2, [sp, #64]	; 0x40
 800876c:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8008770:	f7ff bb7f 	b.w	8007e72 <_svfprintf_r+0x272>
 8008774:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008776:	aa2b      	add	r2, sp, #172	; 0xac
 8008778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800877a:	f002 feb5 	bl	800b4e8 <__ssprint_r>
 800877e:	2800      	cmp	r0, #0
 8008780:	f47f ab23 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008784:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008786:	af38      	add	r7, sp, #224	; 0xe0
 8008788:	f7ff bbf2 	b.w	8007f70 <_svfprintf_r+0x370>
 800878c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800878e:	aa2b      	add	r2, sp, #172	; 0xac
 8008790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008792:	f002 fea9 	bl	800b4e8 <__ssprint_r>
 8008796:	2800      	cmp	r0, #0
 8008798:	f47f ab17 	bne.w	8007dca <_svfprintf_r+0x1ca>
 800879c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 800879e:	af38      	add	r7, sp, #224	; 0xe0
 80087a0:	f7ff bbf6 	b.w	8007f90 <_svfprintf_r+0x390>
 80087a4:	2302      	movs	r3, #2
 80087a6:	f7ff bb2c 	b.w	8007e02 <_svfprintf_r+0x202>
 80087aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f340 81ff 	ble.w	8008bb0 <_svfprintf_r+0xfb0>
 80087b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80087b4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80087b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087b8:	4285      	cmp	r5, r0
 80087ba:	bfa8      	it	ge
 80087bc:	4605      	movge	r5, r0
 80087be:	2d00      	cmp	r5, #0
 80087c0:	4441      	add	r1, r8
 80087c2:	910c      	str	r1, [sp, #48]	; 0x30
 80087c4:	dd0c      	ble.n	80087e0 <_svfprintf_r+0xbe0>
 80087c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80087c8:	442c      	add	r4, r5
 80087ca:	f8c7 8000 	str.w	r8, [r7]
 80087ce:	3301      	adds	r3, #1
 80087d0:	607d      	str	r5, [r7, #4]
 80087d2:	2b07      	cmp	r3, #7
 80087d4:	942d      	str	r4, [sp, #180]	; 0xb4
 80087d6:	932c      	str	r3, [sp, #176]	; 0xb0
 80087d8:	bfd8      	it	le
 80087da:	3708      	addle	r7, #8
 80087dc:	f300 8343 	bgt.w	8008e66 <_svfprintf_r+0x1266>
 80087e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087e2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80087e6:	ebc5 0a02 	rsb	sl, r5, r2
 80087ea:	f1ba 0f00 	cmp.w	sl, #0
 80087ee:	f340 80dd 	ble.w	80089ac <_svfprintf_r+0xdac>
 80087f2:	f1ba 0f10 	cmp.w	sl, #16
 80087f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80087f8:	bfdc      	itt	le
 80087fa:	4d1b      	ldrle	r5, [pc, #108]	; (8008868 <_svfprintf_r+0xc68>)
 80087fc:	950f      	strle	r5, [sp, #60]	; 0x3c
 80087fe:	f340 80c0 	ble.w	8008982 <_svfprintf_r+0xd82>
 8008802:	4d19      	ldr	r5, [pc, #100]	; (8008868 <_svfprintf_r+0xc68>)
 8008804:	4622      	mov	r2, r4
 8008806:	f04f 0b10 	mov.w	fp, #16
 800880a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800880c:	950f      	str	r5, [sp, #60]	; 0x3c
 800880e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008810:	e005      	b.n	800881e <_svfprintf_r+0xc1e>
 8008812:	f1aa 0a10 	sub.w	sl, sl, #16
 8008816:	f1ba 0f10 	cmp.w	sl, #16
 800881a:	f340 80b1 	ble.w	8008980 <_svfprintf_r+0xd80>
 800881e:	3301      	adds	r3, #1
 8008820:	3210      	adds	r2, #16
 8008822:	2b07      	cmp	r3, #7
 8008824:	e887 0840 	stmia.w	r7, {r6, fp}
 8008828:	932c      	str	r3, [sp, #176]	; 0xb0
 800882a:	f107 0708 	add.w	r7, r7, #8
 800882e:	922d      	str	r2, [sp, #180]	; 0xb4
 8008830:	ddef      	ble.n	8008812 <_svfprintf_r+0xc12>
 8008832:	4628      	mov	r0, r5
 8008834:	4621      	mov	r1, r4
 8008836:	aa2b      	add	r2, sp, #172	; 0xac
 8008838:	af38      	add	r7, sp, #224	; 0xe0
 800883a:	f002 fe55 	bl	800b4e8 <__ssprint_r>
 800883e:	2800      	cmp	r0, #0
 8008840:	f47f aac3 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008844:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008846:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008848:	e7e3      	b.n	8008812 <_svfprintf_r+0xc12>
 800884a:	2d00      	cmp	r5, #0
 800884c:	bf08      	it	eq
 800884e:	2c0a      	cmpeq	r4, #10
 8008850:	f080 8141 	bcs.w	8008ad6 <_svfprintf_r+0xed6>
 8008854:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8008856:	3430      	adds	r4, #48	; 0x30
 8008858:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800885c:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8008860:	9510      	str	r5, [sp, #64]	; 0x40
 8008862:	f7ff bb06 	b.w	8007e72 <_svfprintf_r+0x272>
 8008866:	bf00      	nop
 8008868:	0800edcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 800886c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800886e:	f105 38ff 	add.w	r8, r5, #4294967295
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	f77f af57 	ble.w	8008728 <_svfprintf_r+0xb28>
 800887a:	f1b8 0f10 	cmp.w	r8, #16
 800887e:	bfdc      	itt	le
 8008880:	4ba8      	ldrle	r3, [pc, #672]	; (8008b24 <_svfprintf_r+0xf24>)
 8008882:	930f      	strle	r3, [sp, #60]	; 0x3c
 8008884:	dd28      	ble.n	80088d8 <_svfprintf_r+0xcd8>
 8008886:	4da7      	ldr	r5, [pc, #668]	; (8008b24 <_svfprintf_r+0xf24>)
 8008888:	4653      	mov	r3, sl
 800888a:	f04f 0b10 	mov.w	fp, #16
 800888e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008892:	950f      	str	r5, [sp, #60]	; 0x3c
 8008894:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008896:	e004      	b.n	80088a2 <_svfprintf_r+0xca2>
 8008898:	f1a8 0810 	sub.w	r8, r8, #16
 800889c:	f1b8 0f10 	cmp.w	r8, #16
 80088a0:	dd19      	ble.n	80088d6 <_svfprintf_r+0xcd6>
 80088a2:	3401      	adds	r4, #1
 80088a4:	3310      	adds	r3, #16
 80088a6:	2c07      	cmp	r4, #7
 80088a8:	e887 0840 	stmia.w	r7, {r6, fp}
 80088ac:	942c      	str	r4, [sp, #176]	; 0xb0
 80088ae:	f107 0708 	add.w	r7, r7, #8
 80088b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80088b4:	ddf0      	ble.n	8008898 <_svfprintf_r+0xc98>
 80088b6:	4628      	mov	r0, r5
 80088b8:	4651      	mov	r1, sl
 80088ba:	aa2b      	add	r2, sp, #172	; 0xac
 80088bc:	af38      	add	r7, sp, #224	; 0xe0
 80088be:	f002 fe13 	bl	800b4e8 <__ssprint_r>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f47f aa81 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80088c8:	f1a8 0810 	sub.w	r8, r8, #16
 80088cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80088ce:	f1b8 0f10 	cmp.w	r8, #16
 80088d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80088d4:	dce5      	bgt.n	80088a2 <_svfprintf_r+0xca2>
 80088d6:	469a      	mov	sl, r3
 80088d8:	3401      	adds	r4, #1
 80088da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088dc:	2c07      	cmp	r4, #7
 80088de:	44c2      	add	sl, r8
 80088e0:	942c      	str	r4, [sp, #176]	; 0xb0
 80088e2:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 80088e6:	e887 0108 	stmia.w	r7, {r3, r8}
 80088ea:	f77f af1c 	ble.w	8008726 <_svfprintf_r+0xb26>
 80088ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80088f0:	aa2b      	add	r2, sp, #172	; 0xac
 80088f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088f4:	f002 fdf8 	bl	800b4e8 <__ssprint_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f47f aa66 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80088fe:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8008902:	af38      	add	r7, sp, #224	; 0xe0
 8008904:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008906:	e70f      	b.n	8008728 <_svfprintf_r+0xb28>
 8008908:	4d86      	ldr	r5, [pc, #536]	; (8008b24 <_svfprintf_r+0xf24>)
 800890a:	950f      	str	r5, [sp, #60]	; 0x3c
 800890c:	3301      	adds	r3, #1
 800890e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008910:	2b07      	cmp	r3, #7
 8008912:	4444      	add	r4, r8
 8008914:	932c      	str	r3, [sp, #176]	; 0xb0
 8008916:	942d      	str	r4, [sp, #180]	; 0xb4
 8008918:	e887 0120 	stmia.w	r7, {r5, r8}
 800891c:	f77f ab96 	ble.w	800804c <_svfprintf_r+0x44c>
 8008920:	e70e      	b.n	8008740 <_svfprintf_r+0xb40>
 8008922:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008924:	3504      	adds	r5, #4
 8008926:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800892a:	9514      	str	r5, [sp, #80]	; 0x50
 800892c:	2500      	movs	r5, #0
 800892e:	e50e      	b.n	800834e <_svfprintf_r+0x74e>
 8008930:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008932:	2301      	movs	r3, #1
 8008934:	3504      	adds	r5, #4
 8008936:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800893a:	9514      	str	r5, [sp, #80]	; 0x50
 800893c:	2500      	movs	r5, #0
 800893e:	f7ff ba60 	b.w	8007e02 <_svfprintf_r+0x202>
 8008942:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008944:	3504      	adds	r5, #4
 8008946:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800894a:	9514      	str	r5, [sp, #80]	; 0x50
 800894c:	2500      	movs	r5, #0
 800894e:	f7ff ba58 	b.w	8007e02 <_svfprintf_r+0x202>
 8008952:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008954:	3504      	adds	r5, #4
 8008956:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800895a:	9514      	str	r5, [sp, #80]	; 0x50
 800895c:	4622      	mov	r2, r4
 800895e:	17e5      	asrs	r5, r4, #31
 8008960:	462b      	mov	r3, r5
 8008962:	2a00      	cmp	r2, #0
 8008964:	f173 0000 	sbcs.w	r0, r3, #0
 8008968:	f6bf ac45 	bge.w	80081f6 <_svfprintf_r+0x5f6>
 800896c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8008970:	4264      	negs	r4, r4
 8008972:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008976:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 800897a:	2301      	movs	r3, #1
 800897c:	f7ff ba45 	b.w	8007e0a <_svfprintf_r+0x20a>
 8008980:	4614      	mov	r4, r2
 8008982:	3301      	adds	r3, #1
 8008984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008986:	2b07      	cmp	r3, #7
 8008988:	4454      	add	r4, sl
 800898a:	932c      	str	r3, [sp, #176]	; 0xb0
 800898c:	e887 0420 	stmia.w	r7, {r5, sl}
 8008990:	bfd8      	it	le
 8008992:	3708      	addle	r7, #8
 8008994:	942d      	str	r4, [sp, #180]	; 0xb4
 8008996:	dd09      	ble.n	80089ac <_svfprintf_r+0xdac>
 8008998:	980e      	ldr	r0, [sp, #56]	; 0x38
 800899a:	aa2b      	add	r2, sp, #172	; 0xac
 800899c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800899e:	f002 fda3 	bl	800b4e8 <__ssprint_r>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f47f aa11 	bne.w	8007dca <_svfprintf_r+0x1ca>
 80089a8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80089aa:	af38      	add	r7, sp, #224	; 0xe0
 80089ac:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80089ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80089b0:	44a8      	add	r8, r5
 80089b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80089b4:	42ab      	cmp	r3, r5
 80089b6:	db49      	blt.n	8008a4c <_svfprintf_r+0xe4c>
 80089b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80089ba:	07e9      	lsls	r1, r5, #31
 80089bc:	d446      	bmi.n	8008a4c <_svfprintf_r+0xe4c>
 80089be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089c2:	ebc8 0500 	rsb	r5, r8, r0
 80089c6:	1acb      	subs	r3, r1, r3
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	bfb8      	it	lt
 80089cc:	461d      	movlt	r5, r3
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	dd0c      	ble.n	80089ec <_svfprintf_r+0xdec>
 80089d2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80089d4:	442c      	add	r4, r5
 80089d6:	f8c7 8000 	str.w	r8, [r7]
 80089da:	3201      	adds	r2, #1
 80089dc:	607d      	str	r5, [r7, #4]
 80089de:	2a07      	cmp	r2, #7
 80089e0:	942d      	str	r4, [sp, #180]	; 0xb4
 80089e2:	922c      	str	r2, [sp, #176]	; 0xb0
 80089e4:	bfd8      	it	le
 80089e6:	3708      	addle	r7, #8
 80089e8:	f300 824a 	bgt.w	8008e80 <_svfprintf_r+0x1280>
 80089ec:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80089f0:	ebc5 0803 	rsb	r8, r5, r3
 80089f4:	f1b8 0f00 	cmp.w	r8, #0
 80089f8:	f77f ab29 	ble.w	800804e <_svfprintf_r+0x44e>
 80089fc:	f1b8 0f10 	cmp.w	r8, #16
 8008a00:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008a02:	dd81      	ble.n	8008908 <_svfprintf_r+0xd08>
 8008a04:	4d47      	ldr	r5, [pc, #284]	; (8008b24 <_svfprintf_r+0xf24>)
 8008a06:	f04f 0a10 	mov.w	sl, #16
 8008a0a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8008a0e:	950f      	str	r5, [sp, #60]	; 0x3c
 8008a10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008a12:	e005      	b.n	8008a20 <_svfprintf_r+0xe20>
 8008a14:	f1a8 0810 	sub.w	r8, r8, #16
 8008a18:	f1b8 0f10 	cmp.w	r8, #16
 8008a1c:	f77f af76 	ble.w	800890c <_svfprintf_r+0xd0c>
 8008a20:	3301      	adds	r3, #1
 8008a22:	3410      	adds	r4, #16
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	e887 0440 	stmia.w	r7, {r6, sl}
 8008a2a:	932c      	str	r3, [sp, #176]	; 0xb0
 8008a2c:	f107 0708 	add.w	r7, r7, #8
 8008a30:	942d      	str	r4, [sp, #180]	; 0xb4
 8008a32:	ddef      	ble.n	8008a14 <_svfprintf_r+0xe14>
 8008a34:	4628      	mov	r0, r5
 8008a36:	4659      	mov	r1, fp
 8008a38:	aa2b      	add	r2, sp, #172	; 0xac
 8008a3a:	af38      	add	r7, sp, #224	; 0xe0
 8008a3c:	f002 fd54 	bl	800b4e8 <__ssprint_r>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f47f a9c2 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008a46:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008a48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008a4a:	e7e3      	b.n	8008a14 <_svfprintf_r+0xe14>
 8008a4c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a4e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008a50:	442c      	add	r4, r5
 8008a52:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008a54:	3201      	adds	r2, #1
 8008a56:	942d      	str	r4, [sp, #180]	; 0xb4
 8008a58:	2a07      	cmp	r2, #7
 8008a5a:	922c      	str	r2, [sp, #176]	; 0xb0
 8008a5c:	603d      	str	r5, [r7, #0]
 8008a5e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a60:	607d      	str	r5, [r7, #4]
 8008a62:	bfd8      	it	le
 8008a64:	3708      	addle	r7, #8
 8008a66:	ddaa      	ble.n	80089be <_svfprintf_r+0xdbe>
 8008a68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008a6a:	aa2b      	add	r2, sp, #172	; 0xac
 8008a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a6e:	f002 fd3b 	bl	800b4e8 <__ssprint_r>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f47f a9a9 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008a78:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008a7a:	af38      	add	r7, sp, #224	; 0xe0
 8008a7c:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008a7e:	e79e      	b.n	80089be <_svfprintf_r+0xdbe>
 8008a80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a82:	07ea      	lsls	r2, r5, #31
 8008a84:	f53f ae1a 	bmi.w	80086bc <_svfprintf_r+0xabc>
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f104 0a01 	add.w	sl, r4, #1
 8008a8e:	189c      	adds	r4, r3, r2
 8008a90:	f8c7 8000 	str.w	r8, [r7]
 8008a94:	2c07      	cmp	r4, #7
 8008a96:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
 8008a9a:	942c      	str	r4, [sp, #176]	; 0xb0
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	f77f ae42 	ble.w	8008726 <_svfprintf_r+0xb26>
 8008aa2:	e724      	b.n	80088ee <_svfprintf_r+0xcee>
 8008aa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008aa6:	aa2b      	add	r2, sp, #172	; 0xac
 8008aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aaa:	f002 fd1d 	bl	800b4e8 <__ssprint_r>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f47f a98b 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008ab4:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8008ab8:	af38      	add	r7, sp, #224	; 0xe0
 8008aba:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008abc:	e61b      	b.n	80086f6 <_svfprintf_r+0xaf6>
 8008abe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008ac0:	aa2b      	add	r2, sp, #172	; 0xac
 8008ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ac4:	f002 fd10 	bl	800b4e8 <__ssprint_r>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f47f a97e 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008ace:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008ad0:	af38      	add	r7, sp, #224	; 0xe0
 8008ad2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008ad4:	e5ff      	b.n	80086d6 <_svfprintf_r+0xad6>
 8008ad6:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	220a      	movs	r2, #10
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f004 fd41 	bl	800d568 <__aeabi_uldivmod>
 8008ae6:	46d8      	mov	r8, fp
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	2300      	movs	r3, #0
 8008aee:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008af2:	3230      	adds	r2, #48	; 0x30
 8008af4:	f888 2000 	strb.w	r2, [r8]
 8008af8:	220a      	movs	r2, #10
 8008afa:	f004 fd35 	bl	800d568 <__aeabi_uldivmod>
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	ea54 0005 	orrs.w	r0, r4, r5
 8008b06:	d1e8      	bne.n	8008ada <_svfprintf_r+0xeda>
 8008b08:	f7ff b9af 	b.w	8007e6a <_svfprintf_r+0x26a>
 8008b0c:	2b30      	cmp	r3, #48	; 0x30
 8008b0e:	f43f a9ac 	beq.w	8007e6a <_svfprintf_r+0x26a>
 8008b12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008b14:	2330      	movs	r3, #48	; 0x30
 8008b16:	4690      	mov	r8, r2
 8008b18:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008b1c:	1aa4      	subs	r4, r4, r2
 8008b1e:	9410      	str	r4, [sp, #64]	; 0x40
 8008b20:	f7ff b9a7 	b.w	8007e72 <_svfprintf_r+0x272>
 8008b24:	0800edcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 8008b28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b2a:	f002 fb83 	bl	800b234 <__fpclassifyd>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f040 80ab 	bne.w	8008c8a <_svfprintf_r+0x108a>
 8008b34:	2503      	movs	r5, #3
 8008b36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b38:	f24f 18cc 	movw	r8, #61900	; 0xf1cc
 8008b3c:	f24f 13c8 	movw	r3, #61896	; 0xf1c8
 8008b40:	950d      	str	r5, [sp, #52]	; 0x34
 8008b42:	f6c0 0800 	movt	r8, #2048	; 0x800
 8008b46:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008b48:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008b4c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8008b50:	900c      	str	r0, [sp, #48]	; 0x30
 8008b52:	940a      	str	r4, [sp, #40]	; 0x28
 8008b54:	2d47      	cmp	r5, #71	; 0x47
 8008b56:	bfd8      	it	le
 8008b58:	4698      	movle	r8, r3
 8008b5a:	2403      	movs	r4, #3
 8008b5c:	9018      	str	r0, [sp, #96]	; 0x60
 8008b5e:	9410      	str	r4, [sp, #64]	; 0x40
 8008b60:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008b64:	f7ff b98d 	b.w	8007e82 <_svfprintf_r+0x282>
 8008b68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008b6a:	1de3      	adds	r3, r4, #7
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	f103 0508 	add.w	r5, r3, #8
 8008b74:	9514      	str	r5, [sp, #80]	; 0x50
 8008b76:	681c      	ldr	r4, [r3, #0]
 8008b78:	941b      	str	r4, [sp, #108]	; 0x6c
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	931c      	str	r3, [sp, #112]	; 0x70
 8008b7e:	f7ff bb53 	b.w	8008228 <_svfprintf_r+0x628>
 8008b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b84:	06e2      	lsls	r2, r4, #27
 8008b86:	d572      	bpl.n	8008c6e <_svfprintf_r+0x106e>
 8008b88:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008b8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008b8c:	3504      	adds	r5, #4
 8008b8e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8008b92:	9514      	str	r5, [sp, #80]	; 0x50
 8008b94:	601c      	str	r4, [r3, #0]
 8008b96:	f7ff b869 	b.w	8007c6c <_svfprintf_r+0x6c>
 8008b9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008b9c:	aa2b      	add	r2, sp, #172	; 0xac
 8008b9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ba0:	f002 fca2 	bl	800b4e8 <__ssprint_r>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f47f a910 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008baa:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008bac:	af38      	add	r7, sp, #224	; 0xe0
 8008bae:	e4de      	b.n	800856e <_svfprintf_r+0x96e>
 8008bb0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008bb6:	3401      	adds	r4, #1
 8008bb8:	440a      	add	r2, r1
 8008bba:	942d      	str	r4, [sp, #180]	; 0xb4
 8008bbc:	2a07      	cmp	r2, #7
 8008bbe:	922c      	str	r2, [sp, #176]	; 0xb0
 8008bc0:	603d      	str	r5, [r7, #0]
 8008bc2:	6079      	str	r1, [r7, #4]
 8008bc4:	f300 8112 	bgt.w	8008dec <_svfprintf_r+0x11ec>
 8008bc8:	3708      	adds	r7, #8
 8008bca:	4619      	mov	r1, r3
 8008bcc:	b929      	cbnz	r1, 8008bda <_svfprintf_r+0xfda>
 8008bce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008bd0:	b91d      	cbnz	r5, 8008bda <_svfprintf_r+0xfda>
 8008bd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008bd4:	07e8      	lsls	r0, r5, #31
 8008bd6:	f57f aa3a 	bpl.w	800804e <_svfprintf_r+0x44e>
 8008bda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008bdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008bde:	3301      	adds	r3, #1
 8008be0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008be2:	4422      	add	r2, r4
 8008be4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	922d      	str	r2, [sp, #180]	; 0xb4
 8008bea:	607d      	str	r5, [r7, #4]
 8008bec:	603c      	str	r4, [r7, #0]
 8008bee:	bfd8      	it	le
 8008bf0:	3708      	addle	r7, #8
 8008bf2:	932c      	str	r3, [sp, #176]	; 0xb0
 8008bf4:	f300 81ba 	bgt.w	8008f6c <_svfprintf_r+0x136c>
 8008bf8:	f1c1 0a00 	rsb	sl, r1, #0
 8008bfc:	f1ba 0f00 	cmp.w	sl, #0
 8008c00:	f340 8116 	ble.w	8008e30 <_svfprintf_r+0x1230>
 8008c04:	f1ba 0f10 	cmp.w	sl, #16
 8008c08:	bfdc      	itt	le
 8008c0a:	4c9c      	ldrle	r4, [pc, #624]	; (8008e7c <_svfprintf_r+0x127c>)
 8008c0c:	940f      	strle	r4, [sp, #60]	; 0x3c
 8008c0e:	f340 80f9 	ble.w	8008e04 <_svfprintf_r+0x1204>
 8008c12:	4d9a      	ldr	r5, [pc, #616]	; (8008e7c <_svfprintf_r+0x127c>)
 8008c14:	2410      	movs	r4, #16
 8008c16:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8008c1a:	950f      	str	r5, [sp, #60]	; 0x3c
 8008c1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008c1e:	e005      	b.n	8008c2c <_svfprintf_r+0x102c>
 8008c20:	f1aa 0a10 	sub.w	sl, sl, #16
 8008c24:	f1ba 0f10 	cmp.w	sl, #16
 8008c28:	f340 80ec 	ble.w	8008e04 <_svfprintf_r+0x1204>
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	3210      	adds	r2, #16
 8008c30:	2b07      	cmp	r3, #7
 8008c32:	603e      	str	r6, [r7, #0]
 8008c34:	607c      	str	r4, [r7, #4]
 8008c36:	f107 0708 	add.w	r7, r7, #8
 8008c3a:	932c      	str	r3, [sp, #176]	; 0xb0
 8008c3c:	922d      	str	r2, [sp, #180]	; 0xb4
 8008c3e:	ddef      	ble.n	8008c20 <_svfprintf_r+0x1020>
 8008c40:	4628      	mov	r0, r5
 8008c42:	4659      	mov	r1, fp
 8008c44:	aa2b      	add	r2, sp, #172	; 0xac
 8008c46:	af38      	add	r7, sp, #224	; 0xe0
 8008c48:	f002 fc4e 	bl	800b4e8 <__ssprint_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f47f a8bc 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008c52:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008c54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008c56:	e7e3      	b.n	8008c20 <_svfprintf_r+0x1020>
 8008c58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008c5a:	aa2b      	add	r2, sp, #172	; 0xac
 8008c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c5e:	f002 fc43 	bl	800b4e8 <__ssprint_r>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f47f a8b1 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008c68:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008c6a:	af38      	add	r7, sp, #224	; 0xe0
 8008c6c:	e496      	b.n	800859c <_svfprintf_r+0x99c>
 8008c6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008c70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c72:	3404      	adds	r4, #4
 8008c74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008c78:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008c7e:	9414      	str	r4, [sp, #80]	; 0x50
 8008c80:	bf14      	ite	ne
 8008c82:	801d      	strhne	r5, [r3, #0]
 8008c84:	601d      	streq	r5, [r3, #0]
 8008c86:	f7fe bff1 	b.w	8007c6c <_svfprintf_r+0x6c>
 8008c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008c8e:	3501      	adds	r5, #1
 8008c90:	f024 0520 	bic.w	r5, r4, #32
 8008c94:	bf04      	itt	eq
 8008c96:	2406      	moveq	r4, #6
 8008c98:	940c      	streq	r4, [sp, #48]	; 0x30
 8008c9a:	d006      	beq.n	8008caa <_svfprintf_r+0x10aa>
 8008c9c:	2d47      	cmp	r5, #71	; 0x47
 8008c9e:	d104      	bne.n	8008caa <_svfprintf_r+0x10aa>
 8008ca0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	bf08      	it	eq
 8008ca6:	2401      	moveq	r4, #1
 8008ca8:	940c      	str	r4, [sp, #48]	; 0x30
 8008caa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008cac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008cb4:	940f      	str	r4, [sp, #60]	; 0x3c
 8008cb6:	bfbd      	ittte	lt
 8008cb8:	461c      	movlt	r4, r3
 8008cba:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8008cbe:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8008cc2:	f8dd a070 	ldrge.w	sl, [sp, #112]	; 0x70
 8008cc6:	bfa8      	it	ge
 8008cc8:	f04f 0b00 	movge.w	fp, #0
 8008ccc:	f1b5 0446 	subs.w	r4, r5, #70	; 0x46
 8008cd0:	4261      	negs	r1, r4
 8008cd2:	4161      	adcs	r1, r4
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d030      	beq.n	8008d3a <_svfprintf_r+0x113a>
 8008cd8:	2003      	movs	r0, #3
 8008cda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008cdc:	4653      	mov	r3, sl
 8008cde:	9000      	str	r0, [sp, #0]
 8008ce0:	a825      	add	r0, sp, #148	; 0x94
 8008ce2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ce4:	9002      	str	r0, [sp, #8]
 8008ce6:	a826      	add	r0, sp, #152	; 0x98
 8008ce8:	9401      	str	r4, [sp, #4]
 8008cea:	9003      	str	r0, [sp, #12]
 8008cec:	a829      	add	r0, sp, #164	; 0xa4
 8008cee:	9004      	str	r0, [sp, #16]
 8008cf0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008cf2:	9107      	str	r1, [sp, #28]
 8008cf4:	f000 fa86 	bl	8009204 <_dtoa_r>
 8008cf8:	2d47      	cmp	r5, #71	; 0x47
 8008cfa:	9907      	ldr	r1, [sp, #28]
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	d103      	bne.n	8008d08 <_svfprintf_r+0x1108>
 8008d00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d02:	07e0      	lsls	r0, r4, #31
 8008d04:	f140 80f0 	bpl.w	8008ee8 <_svfprintf_r+0x12e8>
 8008d08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d0a:	4444      	add	r4, r8
 8008d0c:	b351      	cbz	r1, 8008d64 <_svfprintf_r+0x1164>
 8008d0e:	f898 3000 	ldrb.w	r3, [r8]
 8008d12:	2b30      	cmp	r3, #48	; 0x30
 8008d14:	f000 8184 	beq.w	8009020 <_svfprintf_r+0x1420>
 8008d18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008d1a:	441c      	add	r4, r3
 8008d1c:	e022      	b.n	8008d64 <_svfprintf_r+0x1164>
 8008d1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008d20:	2140      	movs	r1, #64	; 0x40
 8008d22:	f001 fa93 	bl	800a24c <_malloc_r>
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	6120      	str	r0, [r4, #16]
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	f000 81b6 	beq.w	800909c <_svfprintf_r+0x149c>
 8008d30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	6163      	str	r3, [r4, #20]
 8008d36:	f7fe bf79 	b.w	8007c2c <_svfprintf_r+0x2c>
 8008d3a:	2d45      	cmp	r5, #69	; 0x45
 8008d3c:	f040 8131 	bne.w	8008fa2 <_svfprintf_r+0x13a2>
 8008d40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008d42:	2102      	movs	r1, #2
 8008d44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d46:	4653      	mov	r3, sl
 8008d48:	1c44      	adds	r4, r0, #1
 8008d4a:	9100      	str	r1, [sp, #0]
 8008d4c:	9401      	str	r4, [sp, #4]
 8008d4e:	a925      	add	r1, sp, #148	; 0x94
 8008d50:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008d52:	9102      	str	r1, [sp, #8]
 8008d54:	a926      	add	r1, sp, #152	; 0x98
 8008d56:	9103      	str	r1, [sp, #12]
 8008d58:	a929      	add	r1, sp, #164	; 0xa4
 8008d5a:	9104      	str	r1, [sp, #16]
 8008d5c:	f000 fa52 	bl	8009204 <_dtoa_r>
 8008d60:	4680      	mov	r8, r0
 8008d62:	4404      	add	r4, r0
 8008d64:	2300      	movs	r3, #0
 8008d66:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4651      	mov	r1, sl
 8008d6c:	f004 fb82 	bl	800d474 <__aeabi_dcmpeq>
 8008d70:	4623      	mov	r3, r4
 8008d72:	b948      	cbnz	r0, 8008d88 <_svfprintf_r+0x1188>
 8008d74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008d76:	429c      	cmp	r4, r3
 8008d78:	d906      	bls.n	8008d88 <_svfprintf_r+0x1188>
 8008d7a:	2130      	movs	r1, #48	; 0x30
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	9229      	str	r2, [sp, #164]	; 0xa4
 8008d80:	7019      	strb	r1, [r3, #0]
 8008d82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008d84:	429c      	cmp	r4, r3
 8008d86:	d8f9      	bhi.n	8008d7c <_svfprintf_r+0x117c>
 8008d88:	2d47      	cmp	r5, #71	; 0x47
 8008d8a:	ebc8 0303 	rsb	r3, r8, r3
 8008d8e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d90:	f000 80ae 	beq.w	8008ef0 <_svfprintf_r+0x12f0>
 8008d94:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8008d96:	2c65      	cmp	r4, #101	; 0x65
 8008d98:	f340 818a 	ble.w	80090b0 <_svfprintf_r+0x14b0>
 8008d9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008d9e:	2d66      	cmp	r5, #102	; 0x66
 8008da0:	f000 8101 	beq.w	8008fa6 <_svfprintf_r+0x13a6>
 8008da4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8008da6:	9418      	str	r4, [sp, #96]	; 0x60
 8008da8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008daa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008dac:	42ac      	cmp	r4, r5
 8008dae:	f2c0 80ea 	blt.w	8008f86 <_svfprintf_r+0x1386>
 8008db2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008db4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008db6:	07e0      	lsls	r0, r4, #31
 8008db8:	bf4b      	itete	mi
 8008dba:	3501      	addmi	r5, #1
 8008dbc:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 8008dc0:	ea25 73e5 	bicmi.w	r3, r5, r5, asr #31
 8008dc4:	2467      	movpl	r4, #103	; 0x67
 8008dc6:	bf4d      	iteet	mi
 8008dc8:	2467      	movmi	r4, #103	; 0x67
 8008dca:	9510      	strpl	r5, [sp, #64]	; 0x40
 8008dcc:	9416      	strpl	r4, [sp, #88]	; 0x58
 8008dce:	9510      	strmi	r5, [sp, #64]	; 0x40
 8008dd0:	bf48      	it	mi
 8008dd2:	9416      	strmi	r4, [sp, #88]	; 0x58
 8008dd4:	f1bb 0f00 	cmp.w	fp, #0
 8008dd8:	d175      	bne.n	8008ec6 <_svfprintf_r+0x12c6>
 8008dda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8008dde:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8008de2:	940a      	str	r4, [sp, #40]	; 0x28
 8008de4:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008de8:	f7ff b84b 	b.w	8007e82 <_svfprintf_r+0x282>
 8008dec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008dee:	aa2b      	add	r2, sp, #172	; 0xac
 8008df0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008df2:	f002 fb79 	bl	800b4e8 <__ssprint_r>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f47e afe7 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008dfc:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008dfe:	af38      	add	r7, sp, #224	; 0xe0
 8008e00:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008e02:	e6e3      	b.n	8008bcc <_svfprintf_r+0xfcc>
 8008e04:	3301      	adds	r3, #1
 8008e06:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008e08:	2b07      	cmp	r3, #7
 8008e0a:	4452      	add	r2, sl
 8008e0c:	932c      	str	r3, [sp, #176]	; 0xb0
 8008e0e:	e887 0410 	stmia.w	r7, {r4, sl}
 8008e12:	bfd8      	it	le
 8008e14:	3708      	addle	r7, #8
 8008e16:	922d      	str	r2, [sp, #180]	; 0xb4
 8008e18:	dd0a      	ble.n	8008e30 <_svfprintf_r+0x1230>
 8008e1a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e1c:	aa2b      	add	r2, sp, #172	; 0xac
 8008e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e20:	f002 fb62 	bl	800b4e8 <__ssprint_r>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f47e afd0 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008e2a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008e2c:	af38      	add	r7, sp, #224	; 0xe0
 8008e2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008e30:	3301      	adds	r3, #1
 8008e32:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008e34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	932c      	str	r3, [sp, #176]	; 0xb0
 8008e3a:	4414      	add	r4, r2
 8008e3c:	f8c7 8000 	str.w	r8, [r7]
 8008e40:	942d      	str	r4, [sp, #180]	; 0xb4
 8008e42:	607d      	str	r5, [r7, #4]
 8008e44:	f77f a902 	ble.w	800804c <_svfprintf_r+0x44c>
 8008e48:	e47a      	b.n	8008740 <_svfprintf_r+0xb40>
 8008e4a:	950c      	str	r5, [sp, #48]	; 0x30
 8008e4c:	f7fe fdd4 	bl	80079f8 <strlen>
 8008e50:	9414      	str	r4, [sp, #80]	; 0x50
 8008e52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e54:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008e58:	9418      	str	r4, [sp, #96]	; 0x60
 8008e5a:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8008e5e:	9010      	str	r0, [sp, #64]	; 0x40
 8008e60:	950d      	str	r5, [sp, #52]	; 0x34
 8008e62:	f7ff b80e 	b.w	8007e82 <_svfprintf_r+0x282>
 8008e66:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e68:	aa2b      	add	r2, sp, #172	; 0xac
 8008e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e6c:	f002 fb3c 	bl	800b4e8 <__ssprint_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f47e afaa 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008e76:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008e78:	af38      	add	r7, sp, #224	; 0xe0
 8008e7a:	e4b1      	b.n	80087e0 <_svfprintf_r+0xbe0>
 8008e7c:	0800edcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, sp, lr, pc}
 8008e80:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e82:	aa2b      	add	r2, sp, #172	; 0xac
 8008e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e86:	f002 fb2f 	bl	800b4e8 <__ssprint_r>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f47e af9d 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008e90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008e92:	af38      	add	r7, sp, #224	; 0xe0
 8008e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e96:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	e5a7      	b.n	80089ec <_svfprintf_r+0xdec>
 8008e9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e9e:	46c2      	mov	sl, r8
 8008ea0:	f24f 18f8 	movw	r8, #61944	; 0xf1f8
 8008ea4:	9414      	str	r4, [sp, #80]	; 0x50
 8008ea6:	2d06      	cmp	r5, #6
 8008ea8:	bf28      	it	cs
 8008eaa:	2506      	movcs	r5, #6
 8008eac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008eb0:	9510      	str	r5, [sp, #64]	; 0x40
 8008eb2:	4654      	mov	r4, sl
 8008eb4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8008eb8:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
 8008ebc:	950d      	str	r5, [sp, #52]	; 0x34
 8008ebe:	f6c0 0800 	movt	r8, #2048	; 0x800
 8008ec2:	f7fe bfde 	b.w	8007e82 <_svfprintf_r+0x282>
 8008ec6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ec8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8008ecc:	2400      	movs	r4, #0
 8008ece:	930d      	str	r3, [sp, #52]	; 0x34
 8008ed0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8008ed4:	950a      	str	r5, [sp, #40]	; 0x28
 8008ed6:	940c      	str	r4, [sp, #48]	; 0x30
 8008ed8:	f7fe bfd6 	b.w	8007e88 <_svfprintf_r+0x288>
 8008edc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8008ee0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
 8008ee4:	f7ff b9b2 	b.w	800824c <_svfprintf_r+0x64c>
 8008ee8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008eea:	ebc8 0303 	rsb	r3, r8, r3
 8008eee:	9311      	str	r3, [sp, #68]	; 0x44
 8008ef0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008ef2:	1cda      	adds	r2, r3, #3
 8008ef4:	db11      	blt.n	8008f1a <_svfprintf_r+0x131a>
 8008ef6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	db0e      	blt.n	8008f1a <_svfprintf_r+0x131a>
 8008efc:	9318      	str	r3, [sp, #96]	; 0x60
 8008efe:	e753      	b.n	8008da8 <_svfprintf_r+0x11a8>
 8008f00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f02:	9414      	str	r4, [sp, #80]	; 0x50
 8008f04:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8008f08:	950d      	str	r5, [sp, #52]	; 0x34
 8008f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f0c:	9018      	str	r0, [sp, #96]	; 0x60
 8008f0e:	900c      	str	r0, [sp, #48]	; 0x30
 8008f10:	9510      	str	r5, [sp, #64]	; 0x40
 8008f12:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
 8008f16:	f7fe bfb4 	b.w	8007e82 <_svfprintf_r+0x282>
 8008f1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008f1c:	3d02      	subs	r5, #2
 8008f1e:	9516      	str	r5, [sp, #88]	; 0x58
 8008f20:	3b01      	subs	r3, #1
 8008f22:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	9325      	str	r3, [sp, #148]	; 0x94
 8008f28:	bfba      	itte	lt
 8008f2a:	425b      	neglt	r3, r3
 8008f2c:	222d      	movlt	r2, #45	; 0x2d
 8008f2e:	222b      	movge	r2, #43	; 0x2b
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	f88d 509c 	strb.w	r5, [sp, #156]	; 0x9c
 8008f36:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
 8008f3a:	dc43      	bgt.n	8008fc4 <_svfprintf_r+0x13c4>
 8008f3c:	3330      	adds	r3, #48	; 0x30
 8008f3e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8008f42:	2330      	movs	r3, #48	; 0x30
 8008f44:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
 8008f48:	ab28      	add	r3, sp, #160	; 0xa0
 8008f4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8008f4c:	aa27      	add	r2, sp, #156	; 0x9c
 8008f4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008f50:	1a9a      	subs	r2, r3, r2
 8008f52:	2d01      	cmp	r5, #1
 8008f54:	921e      	str	r2, [sp, #120]	; 0x78
 8008f56:	4414      	add	r4, r2
 8008f58:	9410      	str	r4, [sp, #64]	; 0x40
 8008f5a:	dd78      	ble.n	800904e <_svfprintf_r+0x144e>
 8008f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f5e:	2400      	movs	r4, #0
 8008f60:	9418      	str	r4, [sp, #96]	; 0x60
 8008f62:	3301      	adds	r3, #1
 8008f64:	9310      	str	r3, [sp, #64]	; 0x40
 8008f66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f6a:	e733      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 8008f6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008f6e:	aa2b      	add	r2, sp, #172	; 0xac
 8008f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f72:	f002 fab9 	bl	800b4e8 <__ssprint_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f47e af27 	bne.w	8007dca <_svfprintf_r+0x1ca>
 8008f7c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8008f7e:	af38      	add	r7, sp, #224	; 0xe0
 8008f80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008f82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008f84:	e638      	b.n	8008bf8 <_svfprintf_r+0xff8>
 8008f86:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008f88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	bfd4      	ite	le
 8008f8e:	f1c5 0302 	rsble	r3, r5, #2
 8008f92:	2301      	movgt	r3, #1
 8008f94:	441c      	add	r4, r3
 8008f96:	2567      	movs	r5, #103	; 0x67
 8008f98:	9410      	str	r4, [sp, #64]	; 0x40
 8008f9a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8008f9e:	9516      	str	r5, [sp, #88]	; 0x58
 8008fa0:	e718      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	e699      	b.n	8008cda <_svfprintf_r+0x10da>
 8008fa6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	9518      	str	r5, [sp, #96]	; 0x60
 8008fac:	dd58      	ble.n	8009060 <_svfprintf_r+0x1460>
 8008fae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	d144      	bne.n	800903e <_svfprintf_r+0x143e>
 8008fb4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008fb6:	07ed      	lsls	r5, r5, #31
 8008fb8:	d441      	bmi.n	800903e <_svfprintf_r+0x143e>
 8008fba:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008fbc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8008fc0:	9410      	str	r4, [sp, #64]	; 0x40
 8008fc2:	e707      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 8008fc4:	f246 6167 	movw	r1, #26215	; 0x6667
 8008fc8:	f10d 05aa 	add.w	r5, sp, #170	; 0xaa
 8008fcc:	f2c6 6166 	movt	r1, #26214	; 0x6666
 8008fd0:	fb81 2003 	smull	r2, r0, r1, r3
 8008fd4:	17da      	asrs	r2, r3, #31
 8008fd6:	462c      	mov	r4, r5
 8008fd8:	3d01      	subs	r5, #1
 8008fda:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 8008fde:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8008fe2:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	2b09      	cmp	r3, #9
 8008fea:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8008fee:	7022      	strb	r2, [r4, #0]
 8008ff0:	dcee      	bgt.n	8008fd0 <_svfprintf_r+0x13d0>
 8008ff2:	f10d 00ab 	add.w	r0, sp, #171	; 0xab
 8008ff6:	3330      	adds	r3, #48	; 0x30
 8008ff8:	42a8      	cmp	r0, r5
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	f804 2c01 	strb.w	r2, [r4, #-1]
 8009000:	d953      	bls.n	80090aa <_svfprintf_r+0x14aa>
 8009002:	f10d 019d 	add.w	r1, sp, #157	; 0x9d
 8009006:	4623      	mov	r3, r4
 8009008:	e001      	b.n	800900e <_svfprintf_r+0x140e>
 800900a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900e:	4283      	cmp	r3, r0
 8009010:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009014:	d1f9      	bne.n	800900a <_svfprintf_r+0x140a>
 8009016:	ad48      	add	r5, sp, #288	; 0x120
 8009018:	ebc4 0345 	rsb	r3, r4, r5, lsl #1
 800901c:	3bf6      	subs	r3, #246	; 0xf6
 800901e:	e794      	b.n	8008f4a <_svfprintf_r+0x134a>
 8009020:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009022:	2200      	movs	r2, #0
 8009024:	2300      	movs	r3, #0
 8009026:	4651      	mov	r1, sl
 8009028:	f004 fa24 	bl	800d474 <__aeabi_dcmpeq>
 800902c:	2800      	cmp	r0, #0
 800902e:	f47f ae73 	bne.w	8008d18 <_svfprintf_r+0x1118>
 8009032:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009034:	f1c0 0301 	rsb	r3, r0, #1
 8009038:	9325      	str	r3, [sp, #148]	; 0x94
 800903a:	441c      	add	r4, r3
 800903c:	e692      	b.n	8008d64 <_svfprintf_r+0x1164>
 800903e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009040:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009042:	1c6b      	adds	r3, r5, #1
 8009044:	441c      	add	r4, r3
 8009046:	9410      	str	r4, [sp, #64]	; 0x40
 8009048:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 800904c:	e6c2      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 800904e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009050:	f014 0301 	ands.w	r3, r4, #1
 8009054:	d182      	bne.n	8008f5c <_svfprintf_r+0x135c>
 8009056:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009058:	9318      	str	r3, [sp, #96]	; 0x60
 800905a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800905e:	e6b9      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 8009060:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009062:	b935      	cbnz	r5, 8009072 <_svfprintf_r+0x1472>
 8009064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009066:	07e4      	lsls	r4, r4, #31
 8009068:	bf5c      	itt	pl
 800906a:	2301      	movpl	r3, #1
 800906c:	9310      	strpl	r3, [sp, #64]	; 0x40
 800906e:	f57f aeb1 	bpl.w	8008dd4 <_svfprintf_r+0x11d4>
 8009072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009074:	3502      	adds	r5, #2
 8009076:	9510      	str	r5, [sp, #64]	; 0x40
 8009078:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800907c:	e6aa      	b.n	8008dd4 <_svfprintf_r+0x11d4>
 800907e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009080:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009084:	46a1      	mov	r9, r4
 8009086:	682d      	ldr	r5, [r5, #0]
 8009088:	950c      	str	r5, [sp, #48]	; 0x30
 800908a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800908c:	1d29      	adds	r1, r5, #4
 800908e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009090:	9114      	str	r1, [sp, #80]	; 0x50
 8009092:	2d00      	cmp	r5, #0
 8009094:	f6be ae1d 	bge.w	8007cd2 <_svfprintf_r+0xd2>
 8009098:	f7fe be18 	b.w	8007ccc <_svfprintf_r+0xcc>
 800909c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800909e:	230c      	movs	r3, #12
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f7fe be98 	b.w	8007dda <_svfprintf_r+0x1da>
 80090aa:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
 80090ae:	e74c      	b.n	8008f4a <_svfprintf_r+0x134a>
 80090b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80090b2:	e735      	b.n	8008f20 <_svfprintf_r+0x1320>
 80090b4:	0000      	movs	r0, r0
	...

080090b8 <quorem>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	468c      	mov	ip, r1
 80090be:	6903      	ldr	r3, [r0, #16]
 80090c0:	4683      	mov	fp, r0
 80090c2:	690d      	ldr	r5, [r1, #16]
 80090c4:	b085      	sub	sp, #20
 80090c6:	429d      	cmp	r5, r3
 80090c8:	bfc8      	it	gt
 80090ca:	2000      	movgt	r0, #0
 80090cc:	f300 8096 	bgt.w	80091fc <quorem+0x144>
 80090d0:	3d01      	subs	r5, #1
 80090d2:	f101 0414 	add.w	r4, r1, #20
 80090d6:	f10b 0a14 	add.w	sl, fp, #20
 80090da:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
 80090de:	00aa      	lsls	r2, r5, #2
 80090e0:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80090e4:	4691      	mov	r9, r2
 80090e6:	3101      	adds	r1, #1
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	f8cd c004 	str.w	ip, [sp, #4]
 80090ee:	4452      	add	r2, sl
 80090f0:	9203      	str	r2, [sp, #12]
 80090f2:	f003 fc61 	bl	800c9b8 <__aeabi_uidiv>
 80090f6:	44a1      	add	r9, r4
 80090f8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80090fc:	4680      	mov	r8, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	d041      	beq.n	8009186 <quorem+0xce>
 8009102:	2100      	movs	r1, #0
 8009104:	4622      	mov	r2, r4
 8009106:	4608      	mov	r0, r1
 8009108:	4653      	mov	r3, sl
 800910a:	460f      	mov	r7, r1
 800910c:	f852 1b04 	ldr.w	r1, [r2], #4
 8009110:	681e      	ldr	r6, [r3, #0]
 8009112:	4591      	cmp	r9, r2
 8009114:	fa1f fe81 	uxth.w	lr, r1
 8009118:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800911c:	fb0e 7708 	mla	r7, lr, r8, r7
 8009120:	fa1f fe86 	uxth.w	lr, r6
 8009124:	fb01 f108 	mul.w	r1, r1, r8
 8009128:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800912c:	b2bf      	uxth	r7, r7
 800912e:	ebc7 0000 	rsb	r0, r7, r0
 8009132:	4486      	add	lr, r0
 8009134:	b288      	uxth	r0, r1
 8009136:	ebc0 4016 	rsb	r0, r0, r6, lsr #16
 800913a:	ea4f 4711 	mov.w	r7, r1, lsr #16
 800913e:	eb00 402e 	add.w	r0, r0, lr, asr #16
 8009142:	fa1f fe8e 	uxth.w	lr, lr
 8009146:	ea4e 4100 	orr.w	r1, lr, r0, lsl #16
 800914a:	ea4f 4020 	mov.w	r0, r0, asr #16
 800914e:	f843 1b04 	str.w	r1, [r3], #4
 8009152:	d2db      	bcs.n	800910c <quorem+0x54>
 8009154:	9a02      	ldr	r2, [sp, #8]
 8009156:	f85a 3002 	ldr.w	r3, [sl, r2]
 800915a:	b9a3      	cbnz	r3, 8009186 <quorem+0xce>
 800915c:	9a03      	ldr	r2, [sp, #12]
 800915e:	1f13      	subs	r3, r2, #4
 8009160:	459a      	cmp	sl, r3
 8009162:	d20e      	bcs.n	8009182 <quorem+0xca>
 8009164:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009168:	b95b      	cbnz	r3, 8009182 <quorem+0xca>
 800916a:	f1a2 0308 	sub.w	r3, r2, #8
 800916e:	e001      	b.n	8009174 <quorem+0xbc>
 8009170:	6812      	ldr	r2, [r2, #0]
 8009172:	b932      	cbnz	r2, 8009182 <quorem+0xca>
 8009174:	459a      	cmp	sl, r3
 8009176:	461a      	mov	r2, r3
 8009178:	f105 35ff 	add.w	r5, r5, #4294967295
 800917c:	f1a3 0304 	sub.w	r3, r3, #4
 8009180:	d3f6      	bcc.n	8009170 <quorem+0xb8>
 8009182:	f8cb 5010 	str.w	r5, [fp, #16]
 8009186:	4661      	mov	r1, ip
 8009188:	4658      	mov	r0, fp
 800918a:	f001 fe47 	bl	800ae1c <__mcmp>
 800918e:	2800      	cmp	r0, #0
 8009190:	db33      	blt.n	80091fa <quorem+0x142>
 8009192:	f108 0801 	add.w	r8, r8, #1
 8009196:	4653      	mov	r3, sl
 8009198:	2200      	movs	r2, #0
 800919a:	f854 6b04 	ldr.w	r6, [r4], #4
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	45a1      	cmp	r9, r4
 80091a2:	b2b1      	uxth	r1, r6
 80091a4:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80091a8:	ebc1 0202 	rsb	r2, r1, r2
 80091ac:	b287      	uxth	r7, r0
 80091ae:	eb02 0107 	add.w	r1, r2, r7
 80091b2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 80091b6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80091ba:	b289      	uxth	r1, r1
 80091bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091c0:	ea4f 4222 	mov.w	r2, r2, asr #16
 80091c4:	f843 1b04 	str.w	r1, [r3], #4
 80091c8:	d2e7      	bcs.n	800919a <quorem+0xe2>
 80091ca:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 80091ce:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 80091d2:	b992      	cbnz	r2, 80091fa <quorem+0x142>
 80091d4:	1f1a      	subs	r2, r3, #4
 80091d6:	4592      	cmp	sl, r2
 80091d8:	d20d      	bcs.n	80091f6 <quorem+0x13e>
 80091da:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80091de:	b952      	cbnz	r2, 80091f6 <quorem+0x13e>
 80091e0:	3b08      	subs	r3, #8
 80091e2:	e001      	b.n	80091e8 <quorem+0x130>
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	b932      	cbnz	r2, 80091f6 <quorem+0x13e>
 80091e8:	459a      	cmp	sl, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80091f0:	f1a3 0304 	sub.w	r3, r3, #4
 80091f4:	d3f6      	bcc.n	80091e4 <quorem+0x12c>
 80091f6:	f8cb 5010 	str.w	r5, [fp, #16]
 80091fa:	4640      	mov	r0, r8
 80091fc:	b005      	add	sp, #20
 80091fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009202:	bf00      	nop

08009204 <_dtoa_r>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	b09b      	sub	sp, #108	; 0x6c
 800920a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800920c:	4604      	mov	r4, r0
 800920e:	4692      	mov	sl, r2
 8009210:	469b      	mov	fp, r3
 8009212:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8009214:	2e00      	cmp	r6, #0
 8009216:	f000 82bb 	beq.w	8009790 <_dtoa_r+0x58c>
 800921a:	6833      	ldr	r3, [r6, #0]
 800921c:	b153      	cbz	r3, 8009234 <_dtoa_r+0x30>
 800921e:	6872      	ldr	r2, [r6, #4]
 8009220:	2601      	movs	r6, #1
 8009222:	4619      	mov	r1, r3
 8009224:	4096      	lsls	r6, r2
 8009226:	609e      	str	r6, [r3, #8]
 8009228:	605a      	str	r2, [r3, #4]
 800922a:	f001 fb9d 	bl	800a968 <_Bfree>
 800922e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009230:	2200      	movs	r2, #0
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f1bb 0f00 	cmp.w	fp, #0
 8009238:	bfb4      	ite	lt
 800923a:	2301      	movlt	r3, #1
 800923c:	2300      	movge	r3, #0
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	bfb4      	ite	lt
 8009246:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 800924a:	46d9      	movge	r9, fp
 800924c:	461a      	mov	r2, r3
 800924e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8009252:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8009256:	ea09 0303 	and.w	r3, r9, r3
 800925a:	bfb8      	it	lt
 800925c:	46cb      	movlt	fp, r9
 800925e:	4293      	cmp	r3, r2
 8009260:	d014      	beq.n	800928c <_dtoa_r+0x88>
 8009262:	2200      	movs	r2, #0
 8009264:	2300      	movs	r3, #0
 8009266:	4650      	mov	r0, sl
 8009268:	4659      	mov	r1, fp
 800926a:	f004 f903 	bl	800d474 <__aeabi_dcmpeq>
 800926e:	4680      	mov	r8, r0
 8009270:	b328      	cbz	r0, 80092be <_dtoa_r+0xba>
 8009272:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8009274:	2301      	movs	r3, #1
 8009276:	6033      	str	r3, [r6, #0]
 8009278:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800927a:	2e00      	cmp	r6, #0
 800927c:	f000 80dc 	beq.w	8009438 <_dtoa_r+0x234>
 8009280:	4baf      	ldr	r3, [pc, #700]	; (8009540 <_dtoa_r+0x33c>)
 8009282:	1e58      	subs	r0, r3, #1
 8009284:	6033      	str	r3, [r6, #0]
 8009286:	b01b      	add	sp, #108	; 0x6c
 8009288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800928e:	f24f 2010 	movw	r0, #61968	; 0xf210
 8009292:	f242 730f 	movw	r3, #9999	; 0x270f
 8009296:	f6c0 0000 	movt	r0, #2048	; 0x800
 800929a:	6033      	str	r3, [r6, #0]
 800929c:	f1ba 0f00 	cmp.w	sl, #0
 80092a0:	f000 80aa 	beq.w	80093f8 <_dtoa_r+0x1f4>
 80092a4:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	d0ed      	beq.n	8009286 <_dtoa_r+0x82>
 80092aa:	78c3      	ldrb	r3, [r0, #3]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 80b2 	bne.w	8009416 <_dtoa_r+0x212>
 80092b2:	1cc3      	adds	r3, r0, #3
 80092b4:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80092b6:	6033      	str	r3, [r6, #0]
 80092b8:	b01b      	add	sp, #108	; 0x6c
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	aa19      	add	r2, sp, #100	; 0x64
 80092c0:	ab18      	add	r3, sp, #96	; 0x60
 80092c2:	9200      	str	r2, [sp, #0]
 80092c4:	4620      	mov	r0, r4
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	4652      	mov	r2, sl
 80092ca:	465b      	mov	r3, fp
 80092cc:	f001 feb6 	bl	800b03c <__d2b>
 80092d0:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80092d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80092d6:	f040 80a1 	bne.w	800941c <_dtoa_r+0x218>
 80092da:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80092dc:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80092e0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80092e2:	443d      	add	r5, r7
 80092e4:	429d      	cmp	r5, r3
 80092e6:	f2c0 8278 	blt.w	80097da <_dtoa_r+0x5d6>
 80092ea:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80092ee:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80092f2:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80092f6:	fa2a f202 	lsr.w	r2, sl, r2
 80092fa:	1b5b      	subs	r3, r3, r5
 80092fc:	fa09 f003 	lsl.w	r0, r9, r3
 8009300:	4310      	orrs	r0, r2
 8009302:	f003 fdd9 	bl	800ceb8 <__aeabi_ui2d>
 8009306:	3d01      	subs	r5, #1
 8009308:	46b8      	mov	r8, r7
 800930a:	2601      	movs	r6, #1
 800930c:	9615      	str	r6, [sp, #84]	; 0x54
 800930e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009312:	2300      	movs	r3, #0
 8009314:	2200      	movs	r2, #0
 8009316:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 800931a:	f003 fc8f 	bl	800cc3c <__aeabi_dsub>
 800931e:	a382      	add	r3, pc, #520	; (adr r3, 8009528 <_dtoa_r+0x324>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f003 fe3e 	bl	800cfa4 <__aeabi_dmul>
 8009328:	a381      	add	r3, pc, #516	; (adr r3, 8009530 <_dtoa_r+0x32c>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f003 fc87 	bl	800cc40 <__adddf3>
 8009332:	4606      	mov	r6, r0
 8009334:	4628      	mov	r0, r5
 8009336:	460f      	mov	r7, r1
 8009338:	f003 fdce 	bl	800ced8 <__aeabi_i2d>
 800933c:	a37e      	add	r3, pc, #504	; (adr r3, 8009538 <_dtoa_r+0x334>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f003 fe2f 	bl	800cfa4 <__aeabi_dmul>
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4630      	mov	r0, r6
 800934c:	4639      	mov	r1, r7
 800934e:	f003 fc77 	bl	800cc40 <__adddf3>
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	f004 f8bf 	bl	800d4d8 <__aeabi_d2iz>
 800935a:	4639      	mov	r1, r7
 800935c:	2200      	movs	r2, #0
 800935e:	2300      	movs	r3, #0
 8009360:	9004      	str	r0, [sp, #16]
 8009362:	4630      	mov	r0, r6
 8009364:	f004 f890 	bl	800d488 <__aeabi_dcmplt>
 8009368:	2800      	cmp	r0, #0
 800936a:	f040 8226 	bne.w	80097ba <_dtoa_r+0x5b6>
 800936e:	9e04      	ldr	r6, [sp, #16]
 8009370:	2e16      	cmp	r6, #22
 8009372:	bf84      	itt	hi
 8009374:	2601      	movhi	r6, #1
 8009376:	960f      	strhi	r6, [sp, #60]	; 0x3c
 8009378:	d812      	bhi.n	80093a0 <_dtoa_r+0x19c>
 800937a:	f64e 51f0 	movw	r1, #60912	; 0xedf0
 800937e:	4652      	mov	r2, sl
 8009380:	f6c0 0100 	movt	r1, #2048	; 0x800
 8009384:	465b      	mov	r3, fp
 8009386:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800938a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800938e:	f004 f899 	bl	800d4c4 <__aeabi_dcmpgt>
 8009392:	2800      	cmp	r0, #0
 8009394:	f000 821f 	beq.w	80097d6 <_dtoa_r+0x5d2>
 8009398:	3e01      	subs	r6, #1
 800939a:	9604      	str	r6, [sp, #16]
 800939c:	2600      	movs	r6, #0
 800939e:	960f      	str	r6, [sp, #60]	; 0x3c
 80093a0:	ebc5 0508 	rsb	r5, r5, r8
 80093a4:	3d01      	subs	r5, #1
 80093a6:	9506      	str	r5, [sp, #24]
 80093a8:	bf49      	itett	mi
 80093aa:	426e      	negmi	r6, r5
 80093ac:	2600      	movpl	r6, #0
 80093ae:	960a      	strmi	r6, [sp, #40]	; 0x28
 80093b0:	2600      	movmi	r6, #0
 80093b2:	bf54      	ite	pl
 80093b4:	960a      	strpl	r6, [sp, #40]	; 0x28
 80093b6:	9606      	strmi	r6, [sp, #24]
 80093b8:	9e04      	ldr	r6, [sp, #16]
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	f2c0 81f1 	blt.w	80097a2 <_dtoa_r+0x59e>
 80093c0:	f8dd e018 	ldr.w	lr, [sp, #24]
 80093c4:	960e      	str	r6, [sp, #56]	; 0x38
 80093c6:	44b6      	add	lr, r6
 80093c8:	2600      	movs	r6, #0
 80093ca:	f8cd e018 	str.w	lr, [sp, #24]
 80093ce:	960c      	str	r6, [sp, #48]	; 0x30
 80093d0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80093d2:	2e09      	cmp	r6, #9
 80093d4:	d835      	bhi.n	8009442 <_dtoa_r+0x23e>
 80093d6:	2e05      	cmp	r6, #5
 80093d8:	bfc4      	itt	gt
 80093da:	3e04      	subgt	r6, #4
 80093dc:	9624      	strgt	r6, [sp, #144]	; 0x90
 80093de:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80093e0:	bfcc      	ite	gt
 80093e2:	2500      	movgt	r5, #0
 80093e4:	2501      	movle	r5, #1
 80093e6:	1eb3      	subs	r3, r6, #2
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d82c      	bhi.n	8009446 <_dtoa_r+0x242>
 80093ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80093f0:	02290361 	eoreq	r0, r9, #-2080374783	; 0x84000001
 80093f4:	058d0370 	streq	r0, [sp, #880]	; 0x370
 80093f8:	f24f 2204 	movw	r2, #61956	; 0xf204
 80093fc:	f24f 2310 	movw	r3, #61968	; 0xf210
 8009400:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8009404:	f6c0 0200 	movt	r2, #2048	; 0x800
 8009408:	f6c0 0300 	movt	r3, #2048	; 0x800
 800940c:	2800      	cmp	r0, #0
 800940e:	bf0c      	ite	eq
 8009410:	4610      	moveq	r0, r2
 8009412:	4618      	movne	r0, r3
 8009414:	e746      	b.n	80092a4 <_dtoa_r+0xa0>
 8009416:	f100 0308 	add.w	r3, r0, #8
 800941a:	e74b      	b.n	80092b4 <_dtoa_r+0xb0>
 800941c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009420:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8009424:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009428:	4650      	mov	r0, sl
 800942a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800942e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009432:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 8009436:	e76c      	b.n	8009312 <_dtoa_r+0x10e>
 8009438:	f24f 2000 	movw	r0, #61952	; 0xf200
 800943c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8009440:	e721      	b.n	8009286 <_dtoa_r+0x82>
 8009442:	2600      	movs	r6, #0
 8009444:	9624      	str	r6, [sp, #144]	; 0x90
 8009446:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009448:	2300      	movs	r3, #0
 800944a:	4619      	mov	r1, r3
 800944c:	4620      	mov	r0, r4
 800944e:	f04f 36ff 	mov.w	r6, #4294967295
 8009452:	9325      	str	r3, [sp, #148]	; 0x94
 8009454:	606b      	str	r3, [r5, #4]
 8009456:	9609      	str	r6, [sp, #36]	; 0x24
 8009458:	9614      	str	r6, [sp, #80]	; 0x50
 800945a:	f001 fa4f 	bl	800a8fc <_Balloc>
 800945e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009460:	2601      	movs	r6, #1
 8009462:	960d      	str	r6, [sp, #52]	; 0x34
 8009464:	6028      	str	r0, [r5, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	9308      	str	r3, [sp, #32]
 800946a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800946c:	2b00      	cmp	r3, #0
 800946e:	f2c0 80c7 	blt.w	8009600 <_dtoa_r+0x3fc>
 8009472:	9e04      	ldr	r6, [sp, #16]
 8009474:	2e0e      	cmp	r6, #14
 8009476:	f300 80c3 	bgt.w	8009600 <_dtoa_r+0x3fc>
 800947a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800947e:	f64e 53f0 	movw	r3, #60912	; 0xedf0
 8009482:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009484:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009488:	ea4f 72de 	mov.w	r2, lr, lsr #31
 800948c:	2e00      	cmp	r6, #0
 800948e:	bfcc      	ite	gt
 8009490:	2200      	movgt	r2, #0
 8009492:	f002 0201 	andle.w	r2, r2, #1
 8009496:	9e04      	ldr	r6, [sp, #16]
 8009498:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800949c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	f040 846e 	bne.w	8009d86 <_dtoa_r+0xb82>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	f003 fea1 	bl	800d1f8 <__aeabi_ddiv>
 80094b6:	9e08      	ldr	r6, [sp, #32]
 80094b8:	f004 f80e 	bl	800d4d8 <__aeabi_d2iz>
 80094bc:	1c75      	adds	r5, r6, #1
 80094be:	4680      	mov	r8, r0
 80094c0:	f003 fd0a 	bl	800ced8 <__aeabi_i2d>
 80094c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094c8:	f003 fd6c 	bl	800cfa4 <__aeabi_dmul>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4650      	mov	r0, sl
 80094d2:	4659      	mov	r1, fp
 80094d4:	f003 fbb2 	bl	800cc3c <__aeabi_dsub>
 80094d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094da:	f8dd e020 	ldr.w	lr, [sp, #32]
 80094de:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80094e2:	2a01      	cmp	r2, #1
 80094e4:	f88e 3000 	strb.w	r3, [lr]
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	d05b      	beq.n	80095a6 <_dtoa_r+0x3a2>
 80094ee:	2300      	movs	r3, #0
 80094f0:	2200      	movs	r2, #0
 80094f2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80094f6:	f003 fd55 	bl	800cfa4 <__aeabi_dmul>
 80094fa:	2200      	movs	r2, #0
 80094fc:	2300      	movs	r3, #0
 80094fe:	4606      	mov	r6, r0
 8009500:	460f      	mov	r7, r1
 8009502:	f003 ffb7 	bl	800d474 <__aeabi_dcmpeq>
 8009506:	2800      	cmp	r0, #0
 8009508:	f040 8519 	bne.w	8009f3e <_dtoa_r+0xd3a>
 800950c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009512:	9908      	ldr	r1, [sp, #32]
 8009514:	4482      	add	sl, r0
 8009516:	f8cd a00c 	str.w	sl, [sp, #12]
 800951a:	f101 0902 	add.w	r9, r1, #2
 800951e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8009522:	e01a      	b.n	800955a <_dtoa_r+0x356>
 8009524:	f3af 8000 	nop.w
 8009528:	636f4361 	cmnvs	pc, #-2080374783	; 0x84000001
 800952c:	3fd287a7 	svccc	0x00d287a7
 8009530:	8b60c8b3 	blhi	983b804 <__RW_LOAD_ADDR__+0x182c5e4>
 8009534:	3fc68a28 	svccc	0x00c68a28
 8009538:	509f79fb 			; <UNDEFINED> instruction: 0x509f79fb
 800953c:	3fd34413 	svccc	0x00d34413
 8009540:	0800f201 	stmdaeq	r0, {r0, r9, ip, sp, lr, pc}
 8009544:	f003 fd2e 	bl	800cfa4 <__aeabi_dmul>
 8009548:	2200      	movs	r2, #0
 800954a:	2300      	movs	r3, #0
 800954c:	4606      	mov	r6, r0
 800954e:	460f      	mov	r7, r1
 8009550:	f003 ff90 	bl	800d474 <__aeabi_dcmpeq>
 8009554:	2800      	cmp	r0, #0
 8009556:	f040 84f2 	bne.w	8009f3e <_dtoa_r+0xd3a>
 800955a:	4652      	mov	r2, sl
 800955c:	465b      	mov	r3, fp
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f003 fe49 	bl	800d1f8 <__aeabi_ddiv>
 8009566:	464d      	mov	r5, r9
 8009568:	f003 ffb6 	bl	800d4d8 <__aeabi_d2iz>
 800956c:	4680      	mov	r8, r0
 800956e:	f003 fcb3 	bl	800ced8 <__aeabi_i2d>
 8009572:	4652      	mov	r2, sl
 8009574:	465b      	mov	r3, fp
 8009576:	f003 fd15 	bl	800cfa4 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4630      	mov	r0, r6
 8009580:	4639      	mov	r1, r7
 8009582:	f003 fb5b 	bl	800cc3c <__aeabi_dsub>
 8009586:	f108 0e30 	add.w	lr, r8, #48	; 0x30
 800958a:	f809 ec01 	strb.w	lr, [r9, #-1]
 800958e:	2300      	movs	r3, #0
 8009590:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800959a:	45f1      	cmp	r9, lr
 800959c:	f109 0901 	add.w	r9, r9, #1
 80095a0:	4606      	mov	r6, r0
 80095a2:	460f      	mov	r7, r1
 80095a4:	d1ce      	bne.n	8009544 <_dtoa_r+0x340>
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	4630      	mov	r0, r6
 80095ac:	4639      	mov	r1, r7
 80095ae:	f003 fb47 	bl	800cc40 <__adddf3>
 80095b2:	4606      	mov	r6, r0
 80095b4:	460f      	mov	r7, r1
 80095b6:	4632      	mov	r2, r6
 80095b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095bc:	463b      	mov	r3, r7
 80095be:	f003 ff63 	bl	800d488 <__aeabi_dcmplt>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f000 8570 	beq.w	800a0a8 <_dtoa_r+0xea4>
 80095c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095cc:	9e04      	ldr	r6, [sp, #16]
 80095ce:	462a      	mov	r2, r5
 80095d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80095d4:	9508      	str	r5, [sp, #32]
 80095d6:	9616      	str	r6, [sp, #88]	; 0x58
 80095d8:	e005      	b.n	80095e6 <_dtoa_r+0x3e2>
 80095da:	454b      	cmp	r3, r9
 80095dc:	f000 84b8 	beq.w	8009f50 <_dtoa_r+0xd4c>
 80095e0:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 80095e4:	461a      	mov	r2, r3
 80095e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80095ea:	f102 33ff 	add.w	r3, r2, #4294967295
 80095ee:	d0f4      	beq.n	80095da <_dtoa_r+0x3d6>
 80095f0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80095f2:	9208      	str	r2, [sp, #32]
 80095f4:	f108 0201 	add.w	r2, r8, #1
 80095f8:	9604      	str	r6, [sp, #16]
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]
 80095fe:	e0b1      	b.n	8009764 <_dtoa_r+0x560>
 8009600:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009602:	2e00      	cmp	r6, #0
 8009604:	f040 80f1 	bne.w	80097ea <_dtoa_r+0x5e6>
 8009608:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800960a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800960c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009610:	9806      	ldr	r0, [sp, #24]
 8009612:	2800      	cmp	r0, #0
 8009614:	bfc8      	it	gt
 8009616:	2d00      	cmpgt	r5, #0
 8009618:	dd09      	ble.n	800962e <_dtoa_r+0x42a>
 800961a:	4603      	mov	r3, r0
 800961c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800961e:	42ab      	cmp	r3, r5
 8009620:	bfa8      	it	ge
 8009622:	462b      	movge	r3, r5
 8009624:	1aed      	subs	r5, r5, r3
 8009626:	1ac9      	subs	r1, r1, r3
 8009628:	1ac0      	subs	r0, r0, r3
 800962a:	910a      	str	r1, [sp, #40]	; 0x28
 800962c:	9006      	str	r0, [sp, #24]
 800962e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009630:	2a00      	cmp	r2, #0
 8009632:	dd1c      	ble.n	800966e <_dtoa_r+0x46a>
 8009634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8479 	beq.w	8009f2e <_dtoa_r+0xd2a>
 800963c:	2e00      	cmp	r6, #0
 800963e:	dd10      	ble.n	8009662 <_dtoa_r+0x45e>
 8009640:	4641      	mov	r1, r8
 8009642:	4632      	mov	r2, r6
 8009644:	4620      	mov	r0, r4
 8009646:	f001 fb31 	bl	800acac <__pow5mult>
 800964a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800964c:	4680      	mov	r8, r0
 800964e:	4620      	mov	r0, r4
 8009650:	4641      	mov	r1, r8
 8009652:	f001 fa8b 	bl	800ab6c <__multiply>
 8009656:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009658:	4607      	mov	r7, r0
 800965a:	4620      	mov	r0, r4
 800965c:	f001 f984 	bl	800a968 <_Bfree>
 8009660:	970b      	str	r7, [sp, #44]	; 0x2c
 8009662:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8009666:	ebbe 0206 	subs.w	r2, lr, r6
 800966a:	f040 84a7 	bne.w	8009fbc <_dtoa_r+0xdb8>
 800966e:	4620      	mov	r0, r4
 8009670:	2101      	movs	r1, #1
 8009672:	f001 fa71 	bl	800ab58 <__i2b>
 8009676:	4606      	mov	r6, r0
 8009678:	980e      	ldr	r0, [sp, #56]	; 0x38
 800967a:	2800      	cmp	r0, #0
 800967c:	dd05      	ble.n	800968a <_dtoa_r+0x486>
 800967e:	4631      	mov	r1, r6
 8009680:	4620      	mov	r0, r4
 8009682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009684:	f001 fb12 	bl	800acac <__pow5mult>
 8009688:	4606      	mov	r6, r0
 800968a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800968c:	2901      	cmp	r1, #1
 800968e:	f340 8390 	ble.w	8009db2 <_dtoa_r+0xbae>
 8009692:	2700      	movs	r7, #0
 8009694:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009696:	2800      	cmp	r0, #0
 8009698:	f040 836c 	bne.w	8009d74 <_dtoa_r+0xb70>
 800969c:	2001      	movs	r0, #1
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	4403      	add	r3, r0
 80096a2:	f013 031f 	ands.w	r3, r3, #31
 80096a6:	f000 8293 	beq.w	8009bd0 <_dtoa_r+0x9cc>
 80096aa:	f1c3 0220 	rsb	r2, r3, #32
 80096ae:	2a04      	cmp	r2, #4
 80096b0:	f340 8568 	ble.w	800a184 <_dtoa_r+0xf80>
 80096b4:	f1c3 031c 	rsb	r3, r3, #28
 80096b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	441d      	add	r5, r3
 80096be:	4419      	add	r1, r3
 80096c0:	910a      	str	r1, [sp, #40]	; 0x28
 80096c2:	441a      	add	r2, r3
 80096c4:	9206      	str	r2, [sp, #24]
 80096c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096c8:	2900      	cmp	r1, #0
 80096ca:	dd05      	ble.n	80096d8 <_dtoa_r+0x4d4>
 80096cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096ce:	4620      	mov	r0, r4
 80096d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d2:	f001 fb47 	bl	800ad64 <__lshift>
 80096d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80096d8:	9a06      	ldr	r2, [sp, #24]
 80096da:	2a00      	cmp	r2, #0
 80096dc:	dd04      	ble.n	80096e8 <_dtoa_r+0x4e4>
 80096de:	4631      	mov	r1, r6
 80096e0:	4620      	mov	r0, r4
 80096e2:	f001 fb3f 	bl	800ad64 <__lshift>
 80096e6:	4606      	mov	r6, r0
 80096e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 8321 	bne.w	8009d32 <_dtoa_r+0xb2e>
 80096f0:	9824      	ldr	r0, [sp, #144]	; 0x90
 80096f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096f4:	2802      	cmp	r0, #2
 80096f6:	bfd4      	ite	le
 80096f8:	2300      	movle	r3, #0
 80096fa:	2301      	movgt	r3, #1
 80096fc:	2900      	cmp	r1, #0
 80096fe:	bfc8      	it	gt
 8009700:	2300      	movgt	r3, #0
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 821a 	beq.w	8009b3c <_dtoa_r+0x938>
 8009708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800970a:	2800      	cmp	r0, #0
 800970c:	f040 820f 	bne.w	8009b2e <_dtoa_r+0x92a>
 8009710:	4631      	mov	r1, r6
 8009712:	4603      	mov	r3, r0
 8009714:	2205      	movs	r2, #5
 8009716:	4620      	mov	r0, r4
 8009718:	f001 f942 	bl	800a9a0 <__multadd>
 800971c:	4606      	mov	r6, r0
 800971e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009720:	4631      	mov	r1, r6
 8009722:	f001 fb7b 	bl	800ae1c <__mcmp>
 8009726:	2800      	cmp	r0, #0
 8009728:	f340 8201 	ble.w	8009b2e <_dtoa_r+0x92a>
 800972c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009730:	2500      	movs	r5, #0
 8009732:	9a04      	ldr	r2, [sp, #16]
 8009734:	2331      	movs	r3, #49	; 0x31
 8009736:	3201      	adds	r2, #1
 8009738:	f889 3000 	strb.w	r3, [r9]
 800973c:	9204      	str	r2, [sp, #16]
 800973e:	f109 0301 	add.w	r3, r9, #1
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	4631      	mov	r1, r6
 8009746:	4620      	mov	r0, r4
 8009748:	f001 f90e 	bl	800a968 <_Bfree>
 800974c:	f1b8 0f00 	cmp.w	r8, #0
 8009750:	d008      	beq.n	8009764 <_dtoa_r+0x560>
 8009752:	4545      	cmp	r5, r8
 8009754:	bf18      	it	ne
 8009756:	2d00      	cmpne	r5, #0
 8009758:	f040 824a 	bne.w	8009bf0 <_dtoa_r+0x9ec>
 800975c:	4641      	mov	r1, r8
 800975e:	4620      	mov	r0, r4
 8009760:	f001 f902 	bl	800a968 <_Bfree>
 8009764:	4620      	mov	r0, r4
 8009766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009768:	f001 f8fe 	bl	800a968 <_Bfree>
 800976c:	9e04      	ldr	r6, [sp, #16]
 800976e:	2200      	movs	r2, #0
 8009770:	4648      	mov	r0, r9
 8009772:	1c73      	adds	r3, r6, #1
 8009774:	9e08      	ldr	r6, [sp, #32]
 8009776:	7032      	strb	r2, [r6, #0]
 8009778:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800977a:	6033      	str	r3, [r6, #0]
 800977c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800977e:	2e00      	cmp	r6, #0
 8009780:	f43f ad81 	beq.w	8009286 <_dtoa_r+0x82>
 8009784:	9808      	ldr	r0, [sp, #32]
 8009786:	6030      	str	r0, [r6, #0]
 8009788:	4648      	mov	r0, r9
 800978a:	b01b      	add	sp, #108	; 0x6c
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	2010      	movs	r0, #16
 8009792:	f000 fd4b 	bl	800a22c <malloc>
 8009796:	6260      	str	r0, [r4, #36]	; 0x24
 8009798:	6046      	str	r6, [r0, #4]
 800979a:	6086      	str	r6, [r0, #8]
 800979c:	6006      	str	r6, [r0, #0]
 800979e:	60c6      	str	r6, [r0, #12]
 80097a0:	e548      	b.n	8009234 <_dtoa_r+0x30>
 80097a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80097a4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80097a8:	ebce 0606 	rsb	r6, lr, r6
 80097ac:	960a      	str	r6, [sp, #40]	; 0x28
 80097ae:	f1ce 0600 	rsb	r6, lr, #0
 80097b2:	960c      	str	r6, [sp, #48]	; 0x30
 80097b4:	2600      	movs	r6, #0
 80097b6:	960e      	str	r6, [sp, #56]	; 0x38
 80097b8:	e60a      	b.n	80093d0 <_dtoa_r+0x1cc>
 80097ba:	9804      	ldr	r0, [sp, #16]
 80097bc:	f003 fb8c 	bl	800ced8 <__aeabi_i2d>
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	f003 fe56 	bl	800d474 <__aeabi_dcmpeq>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f47f add0 	bne.w	800936e <_dtoa_r+0x16a>
 80097ce:	9e04      	ldr	r6, [sp, #16]
 80097d0:	3e01      	subs	r6, #1
 80097d2:	9604      	str	r6, [sp, #16]
 80097d4:	e5cb      	b.n	800936e <_dtoa_r+0x16a>
 80097d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80097d8:	e5e2      	b.n	80093a0 <_dtoa_r+0x19c>
 80097da:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80097de:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80097e2:	1b40      	subs	r0, r0, r5
 80097e4:	fa0a f000 	lsl.w	r0, sl, r0
 80097e8:	e58b      	b.n	8009302 <_dtoa_r+0xfe>
 80097ea:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80097ec:	2e01      	cmp	r6, #1
 80097ee:	f340 8415 	ble.w	800a01c <_dtoa_r+0xe18>
 80097f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097f6:	1e46      	subs	r6, r0, #1
 80097f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fa:	42b1      	cmp	r1, r6
 80097fc:	bfaf      	iteee	ge
 80097fe:	ebc6 0601 	rsbge	r6, r6, r1
 8009802:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009804:	960c      	strlt	r6, [sp, #48]	; 0x30
 8009806:	ebc2 0306 	rsblt	r3, r2, r6
 800980a:	bfbf      	itttt	lt
 800980c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800980e:	18f6      	addlt	r6, r6, r3
 8009810:	960e      	strlt	r6, [sp, #56]	; 0x38
 8009812:	2600      	movlt	r6, #0
 8009814:	2800      	cmp	r0, #0
 8009816:	bfb9      	ittee	lt
 8009818:	2300      	movlt	r3, #0
 800981a:	990a      	ldrlt	r1, [sp, #40]	; 0x28
 800981c:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 800981e:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 8009820:	bfb8      	it	lt
 8009822:	ebc0 0501 	rsblt	r5, r0, r1
 8009826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009828:	4620      	mov	r0, r4
 800982a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800982e:	2101      	movs	r1, #1
 8009830:	441a      	add	r2, r3
 8009832:	920a      	str	r2, [sp, #40]	; 0x28
 8009834:	449e      	add	lr, r3
 8009836:	f8cd e018 	str.w	lr, [sp, #24]
 800983a:	f001 f98d 	bl	800ab58 <__i2b>
 800983e:	4680      	mov	r8, r0
 8009840:	e6e6      	b.n	8009610 <_dtoa_r+0x40c>
 8009842:	2600      	movs	r6, #0
 8009844:	960d      	str	r6, [sp, #52]	; 0x34
 8009846:	9e04      	ldr	r6, [sp, #16]
 8009848:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800984c:	44b6      	add	lr, r6
 800984e:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8009852:	f10e 0601 	add.w	r6, lr, #1
 8009856:	9609      	str	r6, [sp, #36]	; 0x24
 8009858:	2e00      	cmp	r6, #0
 800985a:	f340 8359 	ble.w	8009f10 <_dtoa_r+0xd0c>
 800985e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009860:	2e0e      	cmp	r6, #14
 8009862:	bf8c      	ite	hi
 8009864:	2500      	movhi	r5, #0
 8009866:	f005 0501 	andls.w	r5, r5, #1
 800986a:	4637      	mov	r7, r6
 800986c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800986e:	2f17      	cmp	r7, #23
 8009870:	f04f 0100 	mov.w	r1, #0
 8009874:	6071      	str	r1, [r6, #4]
 8009876:	d909      	bls.n	800988c <_dtoa_r+0x688>
 8009878:	2201      	movs	r2, #1
 800987a:	2304      	movs	r3, #4
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	4611      	mov	r1, r2
 8009880:	f103 0014 	add.w	r0, r3, #20
 8009884:	3201      	adds	r2, #1
 8009886:	42b8      	cmp	r0, r7
 8009888:	d9f8      	bls.n	800987c <_dtoa_r+0x678>
 800988a:	6071      	str	r1, [r6, #4]
 800988c:	4620      	mov	r0, r4
 800988e:	f001 f835 	bl	800a8fc <_Balloc>
 8009892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009894:	6030      	str	r0, [r6, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	9308      	str	r3, [sp, #32]
 800989a:	2d00      	cmp	r5, #0
 800989c:	f43f ade5 	beq.w	800946a <_dtoa_r+0x266>
 80098a0:	9e04      	ldr	r6, [sp, #16]
 80098a2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	f340 81ab 	ble.w	8009c02 <_dtoa_r+0x9fe>
 80098ac:	f006 020f 	and.w	r2, r6, #15
 80098b0:	f64e 53f0 	movw	r3, #60912	; 0xedf0
 80098b4:	1135      	asrs	r5, r6, #4
 80098b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	06e9      	lsls	r1, r5, #27
 80098c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80098c4:	f140 818f 	bpl.w	8009be6 <_dtoa_r+0x9e2>
 80098c8:	f64e 63e0 	movw	r3, #61152	; 0xeee0
 80098cc:	4650      	mov	r0, sl
 80098ce:	f6c0 0300 	movt	r3, #2048	; 0x800
 80098d2:	4659      	mov	r1, fp
 80098d4:	f005 050f 	and.w	r5, r5, #15
 80098d8:	f04f 0803 	mov.w	r8, #3
 80098dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098e0:	f003 fc8a 	bl	800d1f8 <__aeabi_ddiv>
 80098e4:	4682      	mov	sl, r0
 80098e6:	468b      	mov	fp, r1
 80098e8:	b19d      	cbz	r5, 8009912 <_dtoa_r+0x70e>
 80098ea:	f64e 69e0 	movw	r9, #61152	; 0xeee0
 80098ee:	f6c0 0900 	movt	r9, #2048	; 0x800
 80098f2:	07ea      	lsls	r2, r5, #31
 80098f4:	4630      	mov	r0, r6
 80098f6:	4639      	mov	r1, r7
 80098f8:	d507      	bpl.n	800990a <_dtoa_r+0x706>
 80098fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098fe:	f108 0801 	add.w	r8, r8, #1
 8009902:	f003 fb4f 	bl	800cfa4 <__aeabi_dmul>
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	106d      	asrs	r5, r5, #1
 800990c:	f109 0908 	add.w	r9, r9, #8
 8009910:	d1ef      	bne.n	80098f2 <_dtoa_r+0x6ee>
 8009912:	4632      	mov	r2, r6
 8009914:	463b      	mov	r3, r7
 8009916:	4650      	mov	r0, sl
 8009918:	4659      	mov	r1, fp
 800991a:	f003 fc6d 	bl	800d1f8 <__aeabi_ddiv>
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009924:	b150      	cbz	r0, 800993c <_dtoa_r+0x738>
 8009926:	2300      	movs	r3, #0
 8009928:	4630      	mov	r0, r6
 800992a:	4639      	mov	r1, r7
 800992c:	2200      	movs	r2, #0
 800992e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8009932:	f003 fda9 	bl	800d488 <__aeabi_dcmplt>
 8009936:	2800      	cmp	r0, #0
 8009938:	f040 8315 	bne.w	8009f66 <_dtoa_r+0xd62>
 800993c:	4640      	mov	r0, r8
 800993e:	f003 facb 	bl	800ced8 <__aeabi_i2d>
 8009942:	4632      	mov	r2, r6
 8009944:	463b      	mov	r3, r7
 8009946:	f003 fb2d 	bl	800cfa4 <__aeabi_dmul>
 800994a:	2300      	movs	r3, #0
 800994c:	2200      	movs	r2, #0
 800994e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009952:	f003 f975 	bl	800cc40 <__adddf3>
 8009956:	4680      	mov	r8, r0
 8009958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800995e:	2800      	cmp	r0, #0
 8009960:	f000 80c9 	beq.w	8009af6 <_dtoa_r+0x8f2>
 8009964:	9904      	ldr	r1, [sp, #16]
 8009966:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800996a:	9116      	str	r1, [sp, #88]	; 0x58
 800996c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800996e:	2a00      	cmp	r2, #0
 8009970:	f000 8179 	beq.w	8009c66 <_dtoa_r+0xa62>
 8009974:	f64e 53f0 	movw	r3, #60912	; 0xedf0
 8009978:	9a08      	ldr	r2, [sp, #32]
 800997a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800997e:	2100      	movs	r1, #0
 8009980:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8009984:	2000      	movs	r0, #0
 8009986:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800998a:	1c55      	adds	r5, r2, #1
 800998c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009990:	f8cd c008 	str.w	ip, [sp, #8]
 8009994:	f003 fc30 	bl	800d1f8 <__aeabi_ddiv>
 8009998:	4642      	mov	r2, r8
 800999a:	464b      	mov	r3, r9
 800999c:	f003 f94e 	bl	800cc3c <__aeabi_dsub>
 80099a0:	4682      	mov	sl, r0
 80099a2:	468b      	mov	fp, r1
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f003 fd96 	bl	800d4d8 <__aeabi_d2iz>
 80099ac:	4680      	mov	r8, r0
 80099ae:	f003 fa93 	bl	800ced8 <__aeabi_i2d>
 80099b2:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80099b6:	fa5f f888 	uxtb.w	r8, r8
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f003 f93b 	bl	800cc3c <__aeabi_dsub>
 80099c6:	f8dd e020 	ldr.w	lr, [sp, #32]
 80099ca:	f88e 8000 	strb.w	r8, [lr]
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	4632      	mov	r2, r6
 80099d8:	463b      	mov	r3, r7
 80099da:	f003 fd73 	bl	800d4c4 <__aeabi_dcmpgt>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f040 83c2 	bne.w	800a168 <_dtoa_r+0xf64>
 80099e4:	2100      	movs	r1, #0
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	2000      	movs	r0, #0
 80099ec:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80099f0:	f003 f924 	bl	800cc3c <__aeabi_dsub>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4650      	mov	r0, sl
 80099fa:	4659      	mov	r1, fp
 80099fc:	f003 fd62 	bl	800d4c4 <__aeabi_dcmpgt>
 8009a00:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f040 8314 	bne.w	800a032 <_dtoa_r+0xe2e>
 8009a0a:	f1bc 0f01 	cmp.w	ip, #1
 8009a0e:	f340 80f5 	ble.w	8009bfc <_dtoa_r+0x9f8>
 8009a12:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a16:	9417      	str	r4, [sp, #92]	; 0x5c
 8009a18:	44e1      	add	r9, ip
 8009a1a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8009a1e:	46a9      	mov	r9, r5
 8009a20:	e010      	b.n	8009a44 <_dtoa_r+0x840>
 8009a22:	2100      	movs	r1, #0
 8009a24:	2000      	movs	r0, #0
 8009a26:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8009a2a:	f003 f907 	bl	800cc3c <__aeabi_dsub>
 8009a2e:	4652      	mov	r2, sl
 8009a30:	465b      	mov	r3, fp
 8009a32:	f003 fd29 	bl	800d488 <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f040 82f9 	bne.w	800a02e <_dtoa_r+0xe2a>
 8009a3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009a3e:	4581      	cmp	r9, r0
 8009a40:	f000 80db 	beq.w	8009bfa <_dtoa_r+0x9f6>
 8009a44:	2300      	movs	r3, #0
 8009a46:	4650      	mov	r0, sl
 8009a48:	4659      	mov	r1, fp
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009a50:	f003 faa8 	bl	800cfa4 <__aeabi_dmul>
 8009a54:	2300      	movs	r3, #0
 8009a56:	2200      	movs	r2, #0
 8009a58:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	468b      	mov	fp, r1
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f003 fa9e 	bl	800cfa4 <__aeabi_dmul>
 8009a68:	460d      	mov	r5, r1
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	f003 fd34 	bl	800d4d8 <__aeabi_d2iz>
 8009a70:	4680      	mov	r8, r0
 8009a72:	f003 fa31 	bl	800ced8 <__aeabi_i2d>
 8009a76:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009a7a:	fa5f f888 	uxtb.w	r8, r8
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f003 f8d9 	bl	800cc3c <__aeabi_dsub>
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	f809 8b01 	strb.w	r8, [r9], #1
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	f003 fcf7 	bl	800d488 <__aeabi_dcmplt>
 8009a9a:	4632      	mov	r2, r6
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d0bf      	beq.n	8009a22 <_dtoa_r+0x81e>
 8009aa2:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009aa4:	464d      	mov	r5, r9
 8009aa6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aac:	9604      	str	r6, [sp, #16]
 8009aae:	9508      	str	r5, [sp, #32]
 8009ab0:	e658      	b.n	8009764 <_dtoa_r+0x560>
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	960d      	str	r6, [sp, #52]	; 0x34
 8009ab6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	f340 8233 	ble.w	8009f24 <_dtoa_r+0xd20>
 8009abe:	280e      	cmp	r0, #14
 8009ac0:	bf8c      	ite	hi
 8009ac2:	2500      	movhi	r5, #0
 8009ac4:	f005 0501 	andls.w	r5, r5, #1
 8009ac8:	4607      	mov	r7, r0
 8009aca:	9014      	str	r0, [sp, #80]	; 0x50
 8009acc:	9009      	str	r0, [sp, #36]	; 0x24
 8009ace:	e6cd      	b.n	800986c <_dtoa_r+0x668>
 8009ad0:	2601      	movs	r6, #1
 8009ad2:	960d      	str	r6, [sp, #52]	; 0x34
 8009ad4:	e7ef      	b.n	8009ab6 <_dtoa_r+0x8b2>
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	f003 f9fe 	bl	800ced8 <__aeabi_i2d>
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	f003 fa60 	bl	800cfa4 <__aeabi_dmul>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009aec:	f003 f8a8 	bl	800cc40 <__adddf3>
 8009af0:	4680      	mov	r8, r0
 8009af2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009af6:	2300      	movs	r3, #0
 8009af8:	4630      	mov	r0, r6
 8009afa:	2200      	movs	r2, #0
 8009afc:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8009b00:	4639      	mov	r1, r7
 8009b02:	f003 f89b 	bl	800cc3c <__aeabi_dsub>
 8009b06:	4642      	mov	r2, r8
 8009b08:	464b      	mov	r3, r9
 8009b0a:	4682      	mov	sl, r0
 8009b0c:	468b      	mov	fp, r1
 8009b0e:	f003 fcd9 	bl	800d4c4 <__aeabi_dcmpgt>
 8009b12:	4606      	mov	r6, r0
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 80a3 	bne.w	8009c60 <_dtoa_r+0xa5c>
 8009b1a:	4642      	mov	r2, r8
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	4659      	mov	r1, fp
 8009b20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b24:	f003 fcb0 	bl	800d488 <__aeabi_dcmplt>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d067      	beq.n	8009bfc <_dtoa_r+0x9f8>
 8009b2c:	46b0      	mov	r8, r6
 8009b2e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8009b30:	2500      	movs	r5, #0
 8009b32:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b36:	43c9      	mvns	r1, r1
 8009b38:	9104      	str	r1, [sp, #16]
 8009b3a:	e603      	b.n	8009744 <_dtoa_r+0x540>
 8009b3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f040 8164 	bne.w	8009e0c <_dtoa_r+0xc08>
 8009b44:	2500      	movs	r5, #0
 8009b46:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b4a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009b4e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009b52:	e002      	b.n	8009b5a <_dtoa_r+0x956>
 8009b54:	f000 ff24 	bl	800a9a0 <__multadd>
 8009b58:	4681      	mov	r9, r0
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4648      	mov	r0, r9
 8009b5e:	f7ff faab 	bl	80090b8 <quorem>
 8009b62:	4649      	mov	r1, r9
 8009b64:	220a      	movs	r2, #10
 8009b66:	2300      	movs	r3, #0
 8009b68:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8009b6c:	f80b 7005 	strb.w	r7, [fp, r5]
 8009b70:	3501      	adds	r5, #1
 8009b72:	4620      	mov	r0, r4
 8009b74:	4555      	cmp	r5, sl
 8009b76:	dbed      	blt.n	8009b54 <_dtoa_r+0x950>
 8009b78:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b80:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8009b84:	2801      	cmp	r0, #1
 8009b86:	bfac      	ite	ge
 8009b88:	4483      	addge	fp, r0
 8009b8a:	f10b 0b01 	addlt.w	fp, fp, #1
 8009b8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b90:	2201      	movs	r2, #1
 8009b92:	4620      	mov	r0, r4
 8009b94:	f001 f8e6 	bl	800ad64 <__lshift>
 8009b98:	4631      	mov	r1, r6
 8009b9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b9c:	f001 f93e 	bl	800ae1c <__mcmp>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f340 826f 	ble.w	800a084 <_dtoa_r+0xe80>
 8009ba6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8009baa:	9908      	ldr	r1, [sp, #32]
 8009bac:	e005      	b.n	8009bba <_dtoa_r+0x9b6>
 8009bae:	428b      	cmp	r3, r1
 8009bb0:	f000 8228 	beq.w	800a004 <_dtoa_r+0xe00>
 8009bb4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009bb8:	469b      	mov	fp, r3
 8009bba:	2a39      	cmp	r2, #57	; 0x39
 8009bbc:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009bc0:	d0f5      	beq.n	8009bae <_dtoa_r+0x9aa>
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	f8cd b020 	str.w	fp, [sp, #32]
 8009bce:	e5b9      	b.n	8009744 <_dtoa_r+0x540>
 8009bd0:	231c      	movs	r3, #28
 8009bd2:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8009bd6:	441d      	add	r5, r3
 8009bd8:	9806      	ldr	r0, [sp, #24]
 8009bda:	449e      	add	lr, r3
 8009bdc:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8009be0:	4418      	add	r0, r3
 8009be2:	9006      	str	r0, [sp, #24]
 8009be4:	e56f      	b.n	80096c6 <_dtoa_r+0x4c2>
 8009be6:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8009bea:	f04f 0802 	mov.w	r8, #2
 8009bee:	e67b      	b.n	80098e8 <_dtoa_r+0x6e4>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 feb8 	bl	800a968 <_Bfree>
 8009bf8:	e5b0      	b.n	800975c <_dtoa_r+0x558>
 8009bfa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009bfc:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8009c00:	e433      	b.n	800946a <_dtoa_r+0x266>
 8009c02:	9e04      	ldr	r6, [sp, #16]
 8009c04:	4275      	negs	r5, r6
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	f000 819d 	beq.w	8009f46 <_dtoa_r+0xd42>
 8009c0c:	f005 020f 	and.w	r2, r5, #15
 8009c10:	f64e 53f0 	movw	r3, #60912	; 0xedf0
 8009c14:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009c18:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f003 f9be 	bl	800cfa4 <__aeabi_dmul>
 8009c28:	112d      	asrs	r5, r5, #4
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	f000 8297 	beq.w	800a160 <_dtoa_r+0xf5c>
 8009c32:	f64e 69e0 	movw	r9, #61152	; 0xeee0
 8009c36:	f04f 0802 	mov.w	r8, #2
 8009c3a:	f6c0 0900 	movt	r9, #2048	; 0x800
 8009c3e:	07eb      	lsls	r3, r5, #31
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	d507      	bpl.n	8009c56 <_dtoa_r+0xa52>
 8009c46:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009c4a:	f108 0801 	add.w	r8, r8, #1
 8009c4e:	f003 f9a9 	bl	800cfa4 <__aeabi_dmul>
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	106d      	asrs	r5, r5, #1
 8009c58:	f109 0908 	add.w	r9, r9, #8
 8009c5c:	d1ef      	bne.n	8009c3e <_dtoa_r+0xa3a>
 8009c5e:	e660      	b.n	8009922 <_dtoa_r+0x71e>
 8009c60:	2600      	movs	r6, #0
 8009c62:	46b0      	mov	r8, r6
 8009c64:	e562      	b.n	800972c <_dtoa_r+0x528>
 8009c66:	f10c 3bff 	add.w	fp, ip, #4294967295
 8009c6a:	f64e 51f0 	movw	r1, #60912	; 0xedf0
 8009c6e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8009c72:	9808      	ldr	r0, [sp, #32]
 8009c74:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009c78:	4642      	mov	r2, r8
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	f100 0a01 	add.w	sl, r0, #1
 8009c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c84:	f8cd c008 	str.w	ip, [sp, #8]
 8009c88:	f003 f98c 	bl	800cfa4 <__aeabi_dmul>
 8009c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c90:	4639      	mov	r1, r7
 8009c92:	4630      	mov	r0, r6
 8009c94:	f003 fc20 	bl	800d4d8 <__aeabi_d2iz>
 8009c98:	4605      	mov	r5, r0
 8009c9a:	f003 f91d 	bl	800ced8 <__aeabi_i2d>
 8009c9e:	3530      	adds	r5, #48	; 0x30
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	f002 ffc8 	bl	800cc3c <__aeabi_dsub>
 8009cac:	460f      	mov	r7, r1
 8009cae:	9908      	ldr	r1, [sp, #32]
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	700d      	strb	r5, [r1, #0]
 8009cb4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009cb8:	f1bc 0f01 	cmp.w	ip, #1
 8009cbc:	d022      	beq.n	8009d04 <_dtoa_r+0xb00>
 8009cbe:	9a08      	ldr	r2, [sp, #32]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f102 39ff 	add.w	r9, r2, #4294967295
 8009cc8:	4615      	mov	r5, r2
 8009cca:	44e1      	add	r9, ip
 8009ccc:	2300      	movs	r3, #0
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009cd4:	f003 f966 	bl	800cfa4 <__aeabi_dmul>
 8009cd8:	460f      	mov	r7, r1
 8009cda:	4606      	mov	r6, r0
 8009cdc:	f003 fbfc 	bl	800d4d8 <__aeabi_d2iz>
 8009ce0:	4680      	mov	r8, r0
 8009ce2:	f003 f8f9 	bl	800ced8 <__aeabi_i2d>
 8009ce6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4639      	mov	r1, r7
 8009cf2:	f002 ffa3 	bl	800cc3c <__aeabi_dsub>
 8009cf6:	f805 8f01 	strb.w	r8, [r5, #1]!
 8009cfa:	454d      	cmp	r5, r9
 8009cfc:	d1e6      	bne.n	8009ccc <_dtoa_r+0xac8>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	44da      	add	sl, fp
 8009d04:	2300      	movs	r3, #0
 8009d06:	2200      	movs	r2, #0
 8009d08:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8009d0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d10:	f002 ff96 	bl	800cc40 <__adddf3>
 8009d14:	4632      	mov	r2, r6
 8009d16:	463b      	mov	r3, r7
 8009d18:	f003 fbb6 	bl	800d488 <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f000 8154 	beq.w	8009fca <_dtoa_r+0xdc6>
 8009d22:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d26:	4652      	mov	r2, sl
 8009d28:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 8009d2c:	f8cd a020 	str.w	sl, [sp, #32]
 8009d30:	e459      	b.n	80095e6 <_dtoa_r+0x3e2>
 8009d32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d34:	4631      	mov	r1, r6
 8009d36:	f001 f871 	bl	800ae1c <__mcmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	f6bf acd8 	bge.w	80096f0 <_dtoa_r+0x4ec>
 8009d40:	f8dd e010 	ldr.w	lr, [sp, #16]
 8009d44:	4620      	mov	r0, r4
 8009d46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d48:	220a      	movs	r2, #10
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009d50:	f8cd e010 	str.w	lr, [sp, #16]
 8009d54:	f000 fe24 	bl	800a9a0 <__multadd>
 8009d58:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d141      	bne.n	8009de4 <_dtoa_r+0xbe0>
 8009d60:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009d62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d64:	2900      	cmp	r1, #0
 8009d66:	dc03      	bgt.n	8009d70 <_dtoa_r+0xb6c>
 8009d68:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d6a:	2a02      	cmp	r2, #2
 8009d6c:	f300 8207 	bgt.w	800a17e <_dtoa_r+0xf7a>
 8009d70:	9309      	str	r3, [sp, #36]	; 0x24
 8009d72:	e6e7      	b.n	8009b44 <_dtoa_r+0x940>
 8009d74:	6933      	ldr	r3, [r6, #16]
 8009d76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d7a:	6918      	ldr	r0, [r3, #16]
 8009d7c:	f000 fea2 	bl	800aac4 <__hi0bits>
 8009d80:	f1c0 0020 	rsb	r0, r0, #32
 8009d84:	e48b      	b.n	800969e <_dtoa_r+0x49a>
 8009d86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d88:	2e00      	cmp	r6, #0
 8009d8a:	f040 818b 	bne.w	800a0a4 <_dtoa_r+0xea0>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2200      	movs	r2, #0
 8009d92:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8009d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d9a:	f003 f903 	bl	800cfa4 <__aeabi_dmul>
 8009d9e:	4652      	mov	r2, sl
 8009da0:	465b      	mov	r3, fp
 8009da2:	f003 fb85 	bl	800d4b0 <__aeabi_dcmpge>
 8009da6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009da8:	46b0      	mov	r8, r6
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f47f aebf 	bne.w	8009b2e <_dtoa_r+0x92a>
 8009db0:	e4bc      	b.n	800972c <_dtoa_r+0x528>
 8009db2:	f1ba 0f00 	cmp.w	sl, #0
 8009db6:	f47f ac6c 	bne.w	8009692 <_dtoa_r+0x48e>
 8009dba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dbe:	4657      	mov	r7, sl
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f47f ac67 	bne.w	8009694 <_dtoa_r+0x490>
 8009dc6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009dca:	0d3f      	lsrs	r7, r7, #20
 8009dcc:	053f      	lsls	r7, r7, #20
 8009dce:	2f00      	cmp	r7, #0
 8009dd0:	f43f ac60 	beq.w	8009694 <_dtoa_r+0x490>
 8009dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd6:	2701      	movs	r7, #1
 8009dd8:	9b06      	ldr	r3, [sp, #24]
 8009dda:	3201      	adds	r2, #1
 8009ddc:	920a      	str	r2, [sp, #40]	; 0x28
 8009dde:	3301      	adds	r3, #1
 8009de0:	9306      	str	r3, [sp, #24]
 8009de2:	e457      	b.n	8009694 <_dtoa_r+0x490>
 8009de4:	2300      	movs	r3, #0
 8009de6:	4641      	mov	r1, r8
 8009de8:	220a      	movs	r2, #10
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 fdd8 	bl	800a9a0 <__multadd>
 8009df0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009df2:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	bfcc      	ite	gt
 8009df8:	2300      	movgt	r3, #0
 8009dfa:	2301      	movle	r3, #1
 8009dfc:	2902      	cmp	r1, #2
 8009dfe:	bfd8      	it	le
 8009e00:	2300      	movle	r3, #0
 8009e02:	4680      	mov	r8, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f040 81b6 	bne.w	800a176 <_dtoa_r+0xf72>
 8009e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	dd05      	ble.n	8009e1c <_dtoa_r+0xc18>
 8009e10:	4641      	mov	r1, r8
 8009e12:	462a      	mov	r2, r5
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 ffa5 	bl	800ad64 <__lshift>
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	46c4      	mov	ip, r8
 8009e1e:	2f00      	cmp	r7, #0
 8009e20:	f040 8153 	bne.w	800a0ca <_dtoa_r+0xec6>
 8009e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e26:	f00a 0301 	and.w	r3, sl, #1
 8009e2a:	9a08      	ldr	r2, [sp, #32]
 8009e2c:	4637      	mov	r7, r6
 8009e2e:	9808      	ldr	r0, [sp, #32]
 8009e30:	46e1      	mov	r9, ip
 8009e32:	440a      	add	r2, r1
 8009e34:	9309      	str	r3, [sp, #36]	; 0x24
 8009e36:	920a      	str	r2, [sp, #40]	; 0x28
 8009e38:	1c45      	adds	r5, r0, #1
 8009e3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009e3c:	e00a      	b.n	8009e54 <_dtoa_r+0xc50>
 8009e3e:	f000 fdaf 	bl	800a9a0 <__multadd>
 8009e42:	4649      	mov	r1, r9
 8009e44:	220a      	movs	r2, #10
 8009e46:	2300      	movs	r3, #0
 8009e48:	4680      	mov	r8, r0
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fda8 	bl	800a9a0 <__multadd>
 8009e50:	4681      	mov	r9, r0
 8009e52:	3501      	adds	r5, #1
 8009e54:	4639      	mov	r1, r7
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff f92e 	bl	80090b8 <quorem>
 8009e5c:	4641      	mov	r1, r8
 8009e5e:	4682      	mov	sl, r0
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 ffdb 	bl	800ae1c <__mcmp>
 8009e66:	464a      	mov	r2, r9
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4683      	mov	fp, r0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fff7 	bl	800ae60 <__mdiff>
 8009e72:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	f105 3eff 	add.w	lr, r5, #4294967295
 8009e7c:	f8cd e018 	str.w	lr, [sp, #24]
 8009e80:	68c2      	ldr	r2, [r0, #12]
 8009e82:	4603      	mov	r3, r0
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	d13e      	bne.n	8009f06 <_dtoa_r+0xd02>
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	9302      	str	r3, [sp, #8]
 8009e8e:	f000 ffc5 	bl	800ae1c <__mcmp>
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	4602      	mov	r2, r0
 8009e96:	4620      	mov	r0, r4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	9202      	str	r2, [sp, #8]
 8009e9c:	f000 fd64 	bl	800a968 <_Bfree>
 8009ea0:	9a02      	ldr	r2, [sp, #8]
 8009ea2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8009ea4:	4310      	orrs	r0, r2
 8009ea6:	d103      	bne.n	8009eb0 <_dtoa_r+0xcac>
 8009ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	f000 814a 	beq.w	800a144 <_dtoa_r+0xf40>
 8009eb0:	f1bb 0f00 	cmp.w	fp, #0
 8009eb4:	f2c0 80c3 	blt.w	800a03e <_dtoa_r+0xe3a>
 8009eb8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8009eba:	ea5b 0101 	orrs.w	r1, fp, r1
 8009ebe:	d103      	bne.n	8009ec8 <_dtoa_r+0xcc4>
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 80bb 	beq.w	800a03e <_dtoa_r+0xe3a>
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	f300 811b 	bgt.w	800a104 <_dtoa_r+0xf00>
 8009ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed0:	46ab      	mov	fp, r5
 8009ed2:	9a05      	ldr	r2, [sp, #20]
 8009ed4:	429d      	cmp	r5, r3
 8009ed6:	f805 2c01 	strb.w	r2, [r5, #-1]
 8009eda:	f000 8124 	beq.w	800a126 <_dtoa_r+0xf22>
 8009ede:	4631      	mov	r1, r6
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f000 fd5b 	bl	800a9a0 <__multadd>
 8009eea:	45c8      	cmp	r8, r9
 8009eec:	4641      	mov	r1, r8
 8009eee:	f04f 020a 	mov.w	r2, #10
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	d1a0      	bne.n	8009e3e <_dtoa_r+0xc3a>
 8009efc:	f000 fd50 	bl	800a9a0 <__multadd>
 8009f00:	4680      	mov	r8, r0
 8009f02:	4681      	mov	r9, r0
 8009f04:	e7a5      	b.n	8009e52 <_dtoa_r+0xc4e>
 8009f06:	2201      	movs	r2, #1
 8009f08:	e7c5      	b.n	8009e96 <_dtoa_r+0xc92>
 8009f0a:	2601      	movs	r6, #1
 8009f0c:	960d      	str	r6, [sp, #52]	; 0x34
 8009f0e:	e49a      	b.n	8009846 <_dtoa_r+0x642>
 8009f10:	2e0e      	cmp	r6, #14
 8009f12:	bf8c      	ite	hi
 8009f14:	2200      	movhi	r2, #0
 8009f16:	2201      	movls	r2, #1
 8009f18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4015      	ands	r5, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6073      	str	r3, [r6, #4]
 8009f22:	e4b3      	b.n	800988c <_dtoa_r+0x688>
 8009f24:	2201      	movs	r2, #1
 8009f26:	9225      	str	r2, [sp, #148]	; 0x94
 8009f28:	9214      	str	r2, [sp, #80]	; 0x50
 8009f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2c:	e7f4      	b.n	8009f18 <_dtoa_r+0xd14>
 8009f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f30:	4620      	mov	r0, r4
 8009f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f34:	f000 feba 	bl	800acac <__pow5mult>
 8009f38:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f3a:	f7ff bb98 	b.w	800966e <_dtoa_r+0x46a>
 8009f3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f42:	9508      	str	r5, [sp, #32]
 8009f44:	e40e      	b.n	8009764 <_dtoa_r+0x560>
 8009f46:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009f4a:	f04f 0802 	mov.w	r8, #2
 8009f4e:	e4e8      	b.n	8009922 <_dtoa_r+0x71e>
 8009f50:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009f52:	2130      	movs	r1, #48	; 0x30
 8009f54:	9208      	str	r2, [sp, #32]
 8009f56:	2231      	movs	r2, #49	; 0x31
 8009f58:	3601      	adds	r6, #1
 8009f5a:	f889 1000 	strb.w	r1, [r9]
 8009f5e:	9604      	str	r6, [sp, #16]
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	f7ff bbff 	b.w	8009764 <_dtoa_r+0x560>
 8009f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	f43f adb4 	beq.w	8009ad6 <_dtoa_r+0x8d2>
 8009f6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	f77f ae43 	ble.w	8009bfc <_dtoa_r+0x9f8>
 8009f76:	2300      	movs	r3, #0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8009f82:	f003 f80f 	bl	800cfa4 <__aeabi_dmul>
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	9316      	str	r3, [sp, #88]	; 0x58
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	f108 0001 	add.w	r0, r8, #1
 8009f92:	460f      	mov	r7, r1
 8009f94:	f002 ffa0 	bl	800ced8 <__aeabi_i2d>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	4639      	mov	r1, r7
 8009fa0:	f003 f800 	bl	800cfa4 <__aeabi_dmul>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009fac:	f002 fe48 	bl	800cc40 <__adddf3>
 8009fb0:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009fba:	e4d7      	b.n	800996c <_dtoa_r+0x768>
 8009fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fe74 	bl	800acac <__pow5mult>
 8009fc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fc6:	f7ff bb52 	b.w	800966e <_dtoa_r+0x46a>
 8009fca:	2100      	movs	r1, #0
 8009fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8009fd6:	f002 fe31 	bl	800cc3c <__aeabi_dsub>
 8009fda:	4632      	mov	r2, r6
 8009fdc:	463b      	mov	r3, r7
 8009fde:	f003 fa71 	bl	800d4c4 <__aeabi_dcmpgt>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	f43f ae0a 	beq.w	8009bfc <_dtoa_r+0x9f8>
 8009fe8:	4653      	mov	r3, sl
 8009fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fee:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8009ff2:	2a30      	cmp	r2, #48	; 0x30
 8009ff4:	d0f8      	beq.n	8009fe8 <_dtoa_r+0xde4>
 8009ff6:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ffc:	9308      	str	r3, [sp, #32]
 8009ffe:	9604      	str	r6, [sp, #16]
 800a000:	f7ff bbb0 	b.w	8009764 <_dtoa_r+0x560>
 800a004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a008:	2331      	movs	r3, #49	; 0x31
 800a00a:	9904      	ldr	r1, [sp, #16]
 800a00c:	f8cd b020 	str.w	fp, [sp, #32]
 800a010:	3101      	adds	r1, #1
 800a012:	f889 3000 	strb.w	r3, [r9]
 800a016:	9104      	str	r1, [sp, #16]
 800a018:	f7ff bb94 	b.w	8009744 <_dtoa_r+0x540>
 800a01c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a01e:	2e00      	cmp	r6, #0
 800a020:	d069      	beq.n	800a0f6 <_dtoa_r+0xef2>
 800a022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a026:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a028:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a02a:	f7ff bbfc 	b.w	8009826 <_dtoa_r+0x622>
 800a02e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a030:	464d      	mov	r5, r9
 800a032:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a036:	462a      	mov	r2, r5
 800a038:	9508      	str	r5, [sp, #32]
 800a03a:	f7ff bad4 	b.w	80095e6 <_dtoa_r+0x3e2>
 800a03e:	2a00      	cmp	r2, #0
 800a040:	960b      	str	r6, [sp, #44]	; 0x2c
 800a042:	46cc      	mov	ip, r9
 800a044:	463e      	mov	r6, r7
 800a046:	9f05      	ldr	r7, [sp, #20]
 800a048:	dd12      	ble.n	800a070 <_dtoa_r+0xe6c>
 800a04a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a04c:	2201      	movs	r2, #1
 800a04e:	4620      	mov	r0, r4
 800a050:	f8cd 9008 	str.w	r9, [sp, #8]
 800a054:	f000 fe86 	bl	800ad64 <__lshift>
 800a058:	4631      	mov	r1, r6
 800a05a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a05c:	f000 fede 	bl	800ae1c <__mcmp>
 800a060:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a064:	2800      	cmp	r0, #0
 800a066:	dd77      	ble.n	800a158 <_dtoa_r+0xf54>
 800a068:	2f39      	cmp	r7, #57	; 0x39
 800a06a:	d062      	beq.n	800a132 <_dtoa_r+0xf2e>
 800a06c:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	4645      	mov	r5, r8
 800a074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a078:	46e0      	mov	r8, ip
 800a07a:	1c58      	adds	r0, r3, #1
 800a07c:	701f      	strb	r7, [r3, #0]
 800a07e:	9008      	str	r0, [sp, #32]
 800a080:	f7ff bb60 	b.w	8009744 <_dtoa_r+0x540>
 800a084:	d102      	bne.n	800a08c <_dtoa_r+0xe88>
 800a086:	07fb      	lsls	r3, r7, #31
 800a088:	f53f ad8d 	bmi.w	8009ba6 <_dtoa_r+0x9a2>
 800a08c:	465b      	mov	r3, fp
 800a08e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a092:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800a096:	2a30      	cmp	r2, #48	; 0x30
 800a098:	d0f8      	beq.n	800a08c <_dtoa_r+0xe88>
 800a09a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	f7ff bb50 	b.w	8009744 <_dtoa_r+0x540>
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	e541      	b.n	8009b2c <_dtoa_r+0x928>
 800a0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	f003 f9e0 	bl	800d474 <__aeabi_dcmpeq>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f af42 	beq.w	8009f3e <_dtoa_r+0xd3a>
 800a0ba:	f018 0f01 	tst.w	r8, #1
 800a0be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0c2:	f43f af3e 	beq.w	8009f42 <_dtoa_r+0xd3e>
 800a0c6:	f7ff ba81 	b.w	80095cc <_dtoa_r+0x3c8>
 800a0ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fc14 	bl	800a8fc <_Balloc>
 800a0d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a0d8:	f108 010c 	add.w	r1, r8, #12
 800a0dc:	1c9a      	adds	r2, r3, #2
 800a0de:	0092      	lsls	r2, r2, #2
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	300c      	adds	r0, #12
 800a0e4:	f000 fbb2 	bl	800a84c <memcpy>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f000 fe39 	bl	800ad64 <__lshift>
 800a0f2:	4684      	mov	ip, r0
 800a0f4:	e696      	b.n	8009e24 <_dtoa_r+0xc20>
 800a0f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a0f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a0fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a0fc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a100:	f7ff bb91 	b.w	8009826 <_dtoa_r+0x622>
 800a104:	960b      	str	r6, [sp, #44]	; 0x2c
 800a106:	463e      	mov	r6, r7
 800a108:	9f05      	ldr	r7, [sp, #20]
 800a10a:	46cc      	mov	ip, r9
 800a10c:	2f39      	cmp	r7, #57	; 0x39
 800a10e:	d010      	beq.n	800a132 <_dtoa_r+0xf2e>
 800a110:	9b06      	ldr	r3, [sp, #24]
 800a112:	3701      	adds	r7, #1
 800a114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a118:	4645      	mov	r5, r8
 800a11a:	1c58      	adds	r0, r3, #1
 800a11c:	46e0      	mov	r8, ip
 800a11e:	701f      	strb	r7, [r3, #0]
 800a120:	9008      	str	r0, [sp, #32]
 800a122:	f7ff bb0f 	b.w	8009744 <_dtoa_r+0x540>
 800a126:	960b      	str	r6, [sp, #44]	; 0x2c
 800a128:	4645      	mov	r5, r8
 800a12a:	463e      	mov	r6, r7
 800a12c:	46c8      	mov	r8, r9
 800a12e:	9f05      	ldr	r7, [sp, #20]
 800a130:	e52d      	b.n	8009b8e <_dtoa_r+0x98a>
 800a132:	9b06      	ldr	r3, [sp, #24]
 800a134:	2239      	movs	r2, #57	; 0x39
 800a136:	4645      	mov	r5, r8
 800a138:	9908      	ldr	r1, [sp, #32]
 800a13a:	46e0      	mov	r8, ip
 800a13c:	f103 0b01 	add.w	fp, r3, #1
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e53a      	b.n	8009bba <_dtoa_r+0x9b6>
 800a144:	960b      	str	r6, [sp, #44]	; 0x2c
 800a146:	463e      	mov	r6, r7
 800a148:	9f05      	ldr	r7, [sp, #20]
 800a14a:	46cc      	mov	ip, r9
 800a14c:	2f39      	cmp	r7, #57	; 0x39
 800a14e:	d0f0      	beq.n	800a132 <_dtoa_r+0xf2e>
 800a150:	f1bb 0f00 	cmp.w	fp, #0
 800a154:	dc8a      	bgt.n	800a06c <_dtoa_r+0xe68>
 800a156:	e78b      	b.n	800a070 <_dtoa_r+0xe6c>
 800a158:	d18a      	bne.n	800a070 <_dtoa_r+0xe6c>
 800a15a:	07fa      	lsls	r2, r7, #31
 800a15c:	d588      	bpl.n	800a070 <_dtoa_r+0xe6c>
 800a15e:	e783      	b.n	800a068 <_dtoa_r+0xe64>
 800a160:	f04f 0802 	mov.w	r8, #2
 800a164:	f7ff bbdd 	b.w	8009922 <_dtoa_r+0x71e>
 800a168:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800a16a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a16e:	9508      	str	r5, [sp, #32]
 800a170:	9604      	str	r6, [sp, #16]
 800a172:	f7ff baf7 	b.w	8009764 <_dtoa_r+0x560>
 800a176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a178:	9209      	str	r2, [sp, #36]	; 0x24
 800a17a:	f7ff bac5 	b.w	8009708 <_dtoa_r+0x504>
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	f7ff bac2 	b.w	8009708 <_dtoa_r+0x504>
 800a184:	f43f aa9f 	beq.w	80096c6 <_dtoa_r+0x4c2>
 800a188:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800a18c:	e521      	b.n	8009bd2 <_dtoa_r+0x9ce>
 800a18e:	bf00      	nop

0800a190 <_setlocale_r>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4614      	mov	r4, r2
 800a194:	b13a      	cbz	r2, 800a1a6 <_setlocale_r+0x16>
 800a196:	f24f 2114 	movw	r1, #61972	; 0xf214
 800a19a:	4610      	mov	r0, r2
 800a19c:	f6c0 0100 	movt	r1, #2048	; 0x800
 800a1a0:	f001 f884 	bl	800b2ac <strcmp>
 800a1a4:	b920      	cbnz	r0, 800a1b0 <_setlocale_r+0x20>
 800a1a6:	f24f 10bc 	movw	r0, #61884	; 0xf1bc
 800a1aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 800a1ae:	bd10      	pop	{r4, pc}
 800a1b0:	f24f 11bc 	movw	r1, #61884	; 0xf1bc
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f6c0 0100 	movt	r1, #2048	; 0x800
 800a1ba:	f001 f877 	bl	800b2ac <strcmp>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0f1      	beq.n	800a1a6 <_setlocale_r+0x16>
 800a1c2:	f64e 71b0 	movw	r1, #61360	; 0xefb0
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f6c0 0100 	movt	r1, #2048	; 0x800
 800a1cc:	f001 f86e 	bl	800b2ac <strcmp>
 800a1d0:	f24f 13bc 	movw	r3, #61884	; 0xf1bc
 800a1d4:	f6c0 0300 	movt	r3, #2048	; 0x800
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	bf0c      	ite	eq
 800a1dc:	4618      	moveq	r0, r3
 800a1de:	2000      	movne	r0, #0
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	bf00      	nop

0800a1e4 <__locale_charset>:
 800a1e4:	f240 00fc 	movw	r0, #252	; 0xfc
 800a1e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop

0800a1f0 <__locale_mb_cur_max>:
 800a1f0:	f240 03fc 	movw	r3, #252	; 0xfc
 800a1f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a1f8:	6a18      	ldr	r0, [r3, #32]
 800a1fa:	4770      	bx	lr

0800a1fc <__locale_msgcharset>:
 800a1fc:	4800      	ldr	r0, [pc, #0]	; (800a200 <__locale_msgcharset+0x4>)
 800a1fe:	4770      	bx	lr
 800a200:	20000120 	andcs	r0, r0, r0, lsr #2

0800a204 <__locale_cjk_lang>:
 800a204:	2000      	movs	r0, #0
 800a206:	4770      	bx	lr

0800a208 <_localeconv_r>:
 800a208:	4800      	ldr	r0, [pc, #0]	; (800a20c <_localeconv_r+0x4>)
 800a20a:	4770      	bx	lr
 800a20c:	20000140 	andcs	r0, r0, r0, asr #2

0800a210 <setlocale>:
 800a210:	f240 0308 	movw	r3, #8
 800a214:	460a      	mov	r2, r1
 800a216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f7ff bfb7 	b.w	800a190 <_setlocale_r>
 800a222:	bf00      	nop

0800a224 <localeconv>:
 800a224:	4800      	ldr	r0, [pc, #0]	; (800a228 <localeconv+0x4>)
 800a226:	4770      	bx	lr
 800a228:	20000140 	andcs	r0, r0, r0, asr #2

0800a22c <malloc>:
 800a22c:	f240 0308 	movw	r3, #8
 800a230:	4601      	mov	r1, r0
 800a232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	f000 b808 	b.w	800a24c <_malloc_r>

0800a23c <free>:
 800a23c:	f240 0308 	movw	r3, #8
 800a240:	4601      	mov	r1, r0
 800a242:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800a246:	6818      	ldr	r0, [r3, #0]
 800a248:	f001 bfc2 	b.w	800c1d0 <_free_r>

0800a24c <_malloc_r>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	f101 040b 	add.w	r4, r1, #11
 800a254:	2c16      	cmp	r4, #22
 800a256:	b083      	sub	sp, #12
 800a258:	bf8e      	itee	hi
 800a25a:	f024 0407 	bichi.w	r4, r4, #7
 800a25e:	2300      	movls	r3, #0
 800a260:	2410      	movls	r4, #16
 800a262:	4607      	mov	r7, r0
 800a264:	bf88      	it	hi
 800a266:	0fe3      	lsrhi	r3, r4, #31
 800a268:	428c      	cmp	r4, r1
 800a26a:	bf2c      	ite	cs
 800a26c:	4619      	movcs	r1, r3
 800a26e:	f043 0101 	orrcc.w	r1, r3, #1
 800a272:	2900      	cmp	r1, #0
 800a274:	f040 80ba 	bne.w	800a3ec <_malloc_r+0x1a0>
 800a278:	f000 fb3c 	bl	800a8f4 <__malloc_lock>
 800a27c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800a280:	d220      	bcs.n	800a2c4 <_malloc_r+0x78>
 800a282:	f240 1678 	movw	r6, #376	; 0x178
 800a286:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800a28a:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800a28e:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
 800a292:	68d3      	ldr	r3, [r2, #12]
 800a294:	4293      	cmp	r3, r2
 800a296:	f000 81f7 	beq.w	800a688 <_malloc_r+0x43c>
 800a29a:	6859      	ldr	r1, [r3, #4]
 800a29c:	f103 0808 	add.w	r8, r3, #8
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f021 0403 	bic.w	r4, r1, #3
 800a2a8:	6899      	ldr	r1, [r3, #8]
 800a2aa:	4423      	add	r3, r4
 800a2ac:	685c      	ldr	r4, [r3, #4]
 800a2ae:	60ca      	str	r2, [r1, #12]
 800a2b0:	f044 0401 	orr.w	r4, r4, #1
 800a2b4:	6091      	str	r1, [r2, #8]
 800a2b6:	605c      	str	r4, [r3, #4]
 800a2b8:	f000 fb1e 	bl	800a8f8 <__malloc_unlock>
 800a2bc:	4640      	mov	r0, r8
 800a2be:	b003      	add	sp, #12
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	ea5f 2c54 	movs.w	ip, r4, lsr #9
 800a2c8:	bf04      	itt	eq
 800a2ca:	257e      	moveq	r5, #126	; 0x7e
 800a2cc:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 800a2d0:	f040 8094 	bne.w	800a3fc <_malloc_r+0x1b0>
 800a2d4:	f240 1678 	movw	r6, #376	; 0x178
 800a2d8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800a2dc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800a2e0:	68eb      	ldr	r3, [r5, #12]
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	d106      	bne.n	800a2f4 <_malloc_r+0xa8>
 800a2e6:	e00d      	b.n	800a304 <_malloc_r+0xb8>
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	f280 8164 	bge.w	800a5b6 <_malloc_r+0x36a>
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	429d      	cmp	r5, r3
 800a2f2:	d007      	beq.n	800a304 <_malloc_r+0xb8>
 800a2f4:	6859      	ldr	r1, [r3, #4]
 800a2f6:	f021 0103 	bic.w	r1, r1, #3
 800a2fa:	1b0a      	subs	r2, r1, r4
 800a2fc:	2a0f      	cmp	r2, #15
 800a2fe:	ddf3      	ble.n	800a2e8 <_malloc_r+0x9c>
 800a300:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a304:	f10c 0c01 	add.w	ip, ip, #1
 800a308:	f240 1278 	movw	r2, #376	; 0x178
 800a30c:	6933      	ldr	r3, [r6, #16]
 800a30e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a312:	f102 0e08 	add.w	lr, r2, #8
 800a316:	4573      	cmp	r3, lr
 800a318:	bf08      	it	eq
 800a31a:	6851      	ldreq	r1, [r2, #4]
 800a31c:	d023      	beq.n	800a366 <_malloc_r+0x11a>
 800a31e:	6858      	ldr	r0, [r3, #4]
 800a320:	f020 0003 	bic.w	r0, r0, #3
 800a324:	1b01      	subs	r1, r0, r4
 800a326:	290f      	cmp	r1, #15
 800a328:	f300 8192 	bgt.w	800a650 <_malloc_r+0x404>
 800a32c:	2900      	cmp	r1, #0
 800a32e:	f8c2 e014 	str.w	lr, [r2, #20]
 800a332:	f8c2 e010 	str.w	lr, [r2, #16]
 800a336:	da6c      	bge.n	800a412 <_malloc_r+0x1c6>
 800a338:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a33c:	f080 8161 	bcs.w	800a602 <_malloc_r+0x3b6>
 800a340:	08c0      	lsrs	r0, r0, #3
 800a342:	f04f 0801 	mov.w	r8, #1
 800a346:	6851      	ldr	r1, [r2, #4]
 800a348:	eb02 05c0 	add.w	r5, r2, r0, lsl #3
 800a34c:	1080      	asrs	r0, r0, #2
 800a34e:	fa08 f800 	lsl.w	r8, r8, r0
 800a352:	ea48 0801 	orr.w	r8, r8, r1
 800a356:	68a8      	ldr	r0, [r5, #8]
 800a358:	4641      	mov	r1, r8
 800a35a:	60dd      	str	r5, [r3, #12]
 800a35c:	f8c2 8004 	str.w	r8, [r2, #4]
 800a360:	6098      	str	r0, [r3, #8]
 800a362:	60ab      	str	r3, [r5, #8]
 800a364:	60c3      	str	r3, [r0, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	ea4f 03ac 	mov.w	r3, ip, asr #2
 800a36c:	fa02 f303 	lsl.w	r3, r2, r3
 800a370:	428b      	cmp	r3, r1
 800a372:	d85c      	bhi.n	800a42e <_malloc_r+0x1e2>
 800a374:	4219      	tst	r1, r3
 800a376:	d10b      	bne.n	800a390 <_malloc_r+0x144>
 800a378:	4093      	lsls	r3, r2
 800a37a:	f02c 0c03 	bic.w	ip, ip, #3
 800a37e:	4219      	tst	r1, r3
 800a380:	f10c 0c04 	add.w	ip, ip, #4
 800a384:	d104      	bne.n	800a390 <_malloc_r+0x144>
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	f10c 0c04 	add.w	ip, ip, #4
 800a38c:	4219      	tst	r1, r3
 800a38e:	d0fa      	beq.n	800a386 <_malloc_r+0x13a>
 800a390:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 800a394:	46e1      	mov	r9, ip
 800a396:	4640      	mov	r0, r8
 800a398:	68c2      	ldr	r2, [r0, #12]
 800a39a:	4290      	cmp	r0, r2
 800a39c:	d107      	bne.n	800a3ae <_malloc_r+0x162>
 800a39e:	e16b      	b.n	800a678 <_malloc_r+0x42c>
 800a3a0:	2900      	cmp	r1, #0
 800a3a2:	f280 817b 	bge.w	800a69c <_malloc_r+0x450>
 800a3a6:	68d2      	ldr	r2, [r2, #12]
 800a3a8:	4290      	cmp	r0, r2
 800a3aa:	f000 8165 	beq.w	800a678 <_malloc_r+0x42c>
 800a3ae:	6855      	ldr	r5, [r2, #4]
 800a3b0:	f025 0503 	bic.w	r5, r5, #3
 800a3b4:	1b29      	subs	r1, r5, r4
 800a3b6:	290f      	cmp	r1, #15
 800a3b8:	ddf2      	ble.n	800a3a0 <_malloc_r+0x154>
 800a3ba:	4690      	mov	r8, r2
 800a3bc:	68d5      	ldr	r5, [r2, #12]
 800a3be:	4638      	mov	r0, r7
 800a3c0:	1913      	adds	r3, r2, r4
 800a3c2:	f858 7f08 	ldr.w	r7, [r8, #8]!
 800a3c6:	f044 0c01 	orr.w	ip, r4, #1
 800a3ca:	f041 0401 	orr.w	r4, r1, #1
 800a3ce:	f8c2 c004 	str.w	ip, [r2, #4]
 800a3d2:	60fd      	str	r5, [r7, #12]
 800a3d4:	60af      	str	r7, [r5, #8]
 800a3d6:	6173      	str	r3, [r6, #20]
 800a3d8:	6133      	str	r3, [r6, #16]
 800a3da:	f8c3 e00c 	str.w	lr, [r3, #12]
 800a3de:	f8c3 e008 	str.w	lr, [r3, #8]
 800a3e2:	605c      	str	r4, [r3, #4]
 800a3e4:	5059      	str	r1, [r3, r1]
 800a3e6:	f000 fa87 	bl	800a8f8 <__malloc_unlock>
 800a3ea:	e767      	b.n	800a2bc <_malloc_r+0x70>
 800a3ec:	f04f 0800 	mov.w	r8, #0
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	6003      	str	r3, [r0, #0]
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	b003      	add	sp, #12
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	f1bc 0f04 	cmp.w	ip, #4
 800a400:	f200 80eb 	bhi.w	800a5da <_malloc_r+0x38e>
 800a404:	ea4f 1c94 	mov.w	ip, r4, lsr #6
 800a408:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800a40c:	ea4f 054c 	mov.w	r5, ip, lsl #1
 800a410:	e760      	b.n	800a2d4 <_malloc_r+0x88>
 800a412:	181a      	adds	r2, r3, r0
 800a414:	f103 0808 	add.w	r8, r3, #8
 800a418:	4638      	mov	r0, r7
 800a41a:	6853      	ldr	r3, [r2, #4]
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	6053      	str	r3, [r2, #4]
 800a422:	f000 fa69 	bl	800a8f8 <__malloc_unlock>
 800a426:	4640      	mov	r0, r8
 800a428:	b003      	add	sp, #12
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	68b5      	ldr	r5, [r6, #8]
 800a430:	686b      	ldr	r3, [r5, #4]
 800a432:	f023 0a03 	bic.w	sl, r3, #3
 800a436:	4554      	cmp	r4, sl
 800a438:	d804      	bhi.n	800a444 <_malloc_r+0x1f8>
 800a43a:	ebc4 030a 	rsb	r3, r4, sl
 800a43e:	2b0f      	cmp	r3, #15
 800a440:	f300 80a8 	bgt.w	800a594 <_malloc_r+0x348>
 800a444:	f240 59c0 	movw	r9, #1472	; 0x5c0
 800a448:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800a44c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 800a450:	4638      	mov	r0, r7
 800a452:	3101      	adds	r1, #1
 800a454:	eb05 020a 	add.w	r2, r5, sl
 800a458:	f8d9 3000 	ldr.w	r3, [r9]
 800a45c:	9201      	str	r2, [sp, #4]
 800a45e:	4423      	add	r3, r4
 800a460:	bf17      	itett	ne
 800a462:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 800a466:	f103 0b10 	addeq.w	fp, r3, #16
 800a46a:	330f      	addne	r3, #15
 800a46c:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 800a470:	bf18      	it	ne
 800a472:	f023 0b0f 	bicne.w	fp, r3, #15
 800a476:	4659      	mov	r1, fp
 800a478:	f000 ff04 	bl	800b284 <_sbrk_r>
 800a47c:	9a01      	ldr	r2, [sp, #4]
 800a47e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a482:	4680      	mov	r8, r0
 800a484:	f000 8120 	beq.w	800a6c8 <_malloc_r+0x47c>
 800a488:	4282      	cmp	r2, r0
 800a48a:	f200 811a 	bhi.w	800a6c2 <_malloc_r+0x476>
 800a48e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a492:	4542      	cmp	r2, r8
 800a494:	445b      	add	r3, fp
 800a496:	f8c9 3004 	str.w	r3, [r9, #4]
 800a49a:	f000 8165 	beq.w	800a768 <_malloc_r+0x51c>
 800a49e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800a4a2:	f240 1078 	movw	r0, #376	; 0x178
 800a4a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800a4aa:	3101      	adds	r1, #1
 800a4ac:	bf17      	itett	ne
 800a4ae:	ebc2 0208 	rsbne	r2, r2, r8
 800a4b2:	f8c0 8408 	streq.w	r8, [r0, #1032]	; 0x408
 800a4b6:	189b      	addne	r3, r3, r2
 800a4b8:	f8c9 3004 	strne.w	r3, [r9, #4]
 800a4bc:	f018 0307 	ands.w	r3, r8, #7
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	bf1f      	itttt	ne
 800a4c4:	f1c3 0208 	rsbne	r2, r3, #8
 800a4c8:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800a4cc:	4490      	addne	r8, r2
 800a4ce:	f103 0208 	addne.w	r2, r3, #8
 800a4d2:	eb08 030b 	add.w	r3, r8, fp
 800a4d6:	bf08      	it	eq
 800a4d8:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800a4dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4e0:	ebc3 0b02 	rsb	fp, r3, r2
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	f000 fecd 	bl	800b284 <_sbrk_r>
 800a4ea:	f240 52c0 	movw	r2, #1472	; 0x5c0
 800a4ee:	f8c6 8008 	str.w	r8, [r6, #8]
 800a4f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a4fc:	bf15      	itete	ne
 800a4fe:	ebc8 0100 	rsbne	r1, r8, r0
 800a502:	2101      	moveq	r1, #1
 800a504:	4459      	addne	r1, fp
 800a506:	f04f 0b00 	moveq.w	fp, #0
 800a50a:	bf18      	it	ne
 800a50c:	f041 0101 	orrne.w	r1, r1, #1
 800a510:	42b5      	cmp	r5, r6
 800a512:	445b      	add	r3, fp
 800a514:	f8c8 1004 	str.w	r1, [r8, #4]
 800a518:	f8c9 3004 	str.w	r3, [r9, #4]
 800a51c:	d018      	beq.n	800a550 <_malloc_r+0x304>
 800a51e:	f1ba 0f0f 	cmp.w	sl, #15
 800a522:	f240 8100 	bls.w	800a726 <_malloc_r+0x4da>
 800a526:	f1aa 000c 	sub.w	r0, sl, #12
 800a52a:	6869      	ldr	r1, [r5, #4]
 800a52c:	f020 0007 	bic.w	r0, r0, #7
 800a530:	f04f 0c05 	mov.w	ip, #5
 800a534:	eb05 0e00 	add.w	lr, r5, r0
 800a538:	280f      	cmp	r0, #15
 800a53a:	f001 0101 	and.w	r1, r1, #1
 800a53e:	ea40 0101 	orr.w	r1, r0, r1
 800a542:	6069      	str	r1, [r5, #4]
 800a544:	f8ce c004 	str.w	ip, [lr, #4]
 800a548:	f8ce c008 	str.w	ip, [lr, #8]
 800a54c:	f200 8118 	bhi.w	800a780 <_malloc_r+0x534>
 800a550:	f240 52c0 	movw	r2, #1472	; 0x5c0
 800a554:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800a558:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a55c:	68b5      	ldr	r5, [r6, #8]
 800a55e:	428b      	cmp	r3, r1
 800a560:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 800a564:	bf88      	it	hi
 800a566:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 800a568:	f240 52c0 	movw	r2, #1472	; 0x5c0
 800a56c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800a570:	428b      	cmp	r3, r1
 800a572:	bf88      	it	hi
 800a574:	6313      	strhi	r3, [r2, #48]	; 0x30
 800a576:	686a      	ldr	r2, [r5, #4]
 800a578:	f022 0203 	bic.w	r2, r2, #3
 800a57c:	4294      	cmp	r4, r2
 800a57e:	ebc4 0302 	rsb	r3, r4, r2
 800a582:	d801      	bhi.n	800a588 <_malloc_r+0x33c>
 800a584:	2b0f      	cmp	r3, #15
 800a586:	dc05      	bgt.n	800a594 <_malloc_r+0x348>
 800a588:	4638      	mov	r0, r7
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	f000 f9b3 	bl	800a8f8 <__malloc_unlock>
 800a592:	e693      	b.n	800a2bc <_malloc_r+0x70>
 800a594:	192a      	adds	r2, r5, r4
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	4638      	mov	r0, r7
 800a59c:	f044 0401 	orr.w	r4, r4, #1
 800a5a0:	606c      	str	r4, [r5, #4]
 800a5a2:	f105 0808 	add.w	r8, r5, #8
 800a5a6:	60b2      	str	r2, [r6, #8]
 800a5a8:	6053      	str	r3, [r2, #4]
 800a5aa:	f000 f9a5 	bl	800a8f8 <__malloc_unlock>
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	b003      	add	sp, #12
 800a5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b6:	4419      	add	r1, r3
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	689c      	ldr	r4, [r3, #8]
 800a5bc:	4638      	mov	r0, r7
 800a5be:	684d      	ldr	r5, [r1, #4]
 800a5c0:	f103 0808 	add.w	r8, r3, #8
 800a5c4:	60e2      	str	r2, [r4, #12]
 800a5c6:	f045 0501 	orr.w	r5, r5, #1
 800a5ca:	6094      	str	r4, [r2, #8]
 800a5cc:	604d      	str	r5, [r1, #4]
 800a5ce:	f000 f993 	bl	800a8f8 <__malloc_unlock>
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	b003      	add	sp, #12
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	f1bc 0f14 	cmp.w	ip, #20
 800a5de:	bf9c      	itt	ls
 800a5e0:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 800a5e4:	ea4f 054c 	movls.w	r5, ip, lsl #1
 800a5e8:	f67f ae74 	bls.w	800a2d4 <_malloc_r+0x88>
 800a5ec:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800a5f0:	f200 808f 	bhi.w	800a712 <_malloc_r+0x4c6>
 800a5f4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
 800a5f8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 800a5fc:	ea4f 054c 	mov.w	r5, ip, lsl #1
 800a600:	e668      	b.n	800a2d4 <_malloc_r+0x88>
 800a602:	0a42      	lsrs	r2, r0, #9
 800a604:	2a04      	cmp	r2, #4
 800a606:	d958      	bls.n	800a6ba <_malloc_r+0x46e>
 800a608:	2a14      	cmp	r2, #20
 800a60a:	bf9c      	itt	ls
 800a60c:	f102 015b 	addls.w	r1, r2, #91	; 0x5b
 800a610:	004d      	lslls	r5, r1, #1
 800a612:	d905      	bls.n	800a620 <_malloc_r+0x3d4>
 800a614:	2a54      	cmp	r2, #84	; 0x54
 800a616:	f200 80bc 	bhi.w	800a792 <_malloc_r+0x546>
 800a61a:	0b01      	lsrs	r1, r0, #12
 800a61c:	316e      	adds	r1, #110	; 0x6e
 800a61e:	004d      	lsls	r5, r1, #1
 800a620:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 800a624:	f240 1878 	movw	r8, #376	; 0x178
 800a628:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800a62c:	68aa      	ldr	r2, [r5, #8]
 800a62e:	42aa      	cmp	r2, r5
 800a630:	d07f      	beq.n	800a732 <_malloc_r+0x4e6>
 800a632:	6851      	ldr	r1, [r2, #4]
 800a634:	f021 0103 	bic.w	r1, r1, #3
 800a638:	4288      	cmp	r0, r1
 800a63a:	d202      	bcs.n	800a642 <_malloc_r+0x3f6>
 800a63c:	6892      	ldr	r2, [r2, #8]
 800a63e:	4295      	cmp	r5, r2
 800a640:	d1f7      	bne.n	800a632 <_malloc_r+0x3e6>
 800a642:	68d0      	ldr	r0, [r2, #12]
 800a644:	6871      	ldr	r1, [r6, #4]
 800a646:	60d8      	str	r0, [r3, #12]
 800a648:	609a      	str	r2, [r3, #8]
 800a64a:	6083      	str	r3, [r0, #8]
 800a64c:	60d3      	str	r3, [r2, #12]
 800a64e:	e68a      	b.n	800a366 <_malloc_r+0x11a>
 800a650:	191d      	adds	r5, r3, r4
 800a652:	f041 0601 	orr.w	r6, r1, #1
 800a656:	f044 0401 	orr.w	r4, r4, #1
 800a65a:	4638      	mov	r0, r7
 800a65c:	605c      	str	r4, [r3, #4]
 800a65e:	f103 0808 	add.w	r8, r3, #8
 800a662:	6155      	str	r5, [r2, #20]
 800a664:	6115      	str	r5, [r2, #16]
 800a666:	f8c5 e00c 	str.w	lr, [r5, #12]
 800a66a:	f8c5 e008 	str.w	lr, [r5, #8]
 800a66e:	606e      	str	r6, [r5, #4]
 800a670:	5069      	str	r1, [r5, r1]
 800a672:	f000 f941 	bl	800a8f8 <__malloc_unlock>
 800a676:	e621      	b.n	800a2bc <_malloc_r+0x70>
 800a678:	f109 0901 	add.w	r9, r9, #1
 800a67c:	3008      	adds	r0, #8
 800a67e:	f019 0f03 	tst.w	r9, #3
 800a682:	f47f ae89 	bne.w	800a398 <_malloc_r+0x14c>
 800a686:	e028      	b.n	800a6da <_malloc_r+0x48e>
 800a688:	f103 0208 	add.w	r2, r3, #8
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	429a      	cmp	r2, r3
 800a690:	bf08      	it	eq
 800a692:	f10c 0c02 	addeq.w	ip, ip, #2
 800a696:	f43f ae37 	beq.w	800a308 <_malloc_r+0xbc>
 800a69a:	e5fe      	b.n	800a29a <_malloc_r+0x4e>
 800a69c:	4690      	mov	r8, r2
 800a69e:	4415      	add	r5, r2
 800a6a0:	68d3      	ldr	r3, [r2, #12]
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f858 2f08 	ldr.w	r2, [r8, #8]!
 800a6a8:	6869      	ldr	r1, [r5, #4]
 800a6aa:	f041 0101 	orr.w	r1, r1, #1
 800a6ae:	6069      	str	r1, [r5, #4]
 800a6b0:	60d3      	str	r3, [r2, #12]
 800a6b2:	609a      	str	r2, [r3, #8]
 800a6b4:	f000 f920 	bl	800a8f8 <__malloc_unlock>
 800a6b8:	e600      	b.n	800a2bc <_malloc_r+0x70>
 800a6ba:	0981      	lsrs	r1, r0, #6
 800a6bc:	3138      	adds	r1, #56	; 0x38
 800a6be:	004d      	lsls	r5, r1, #1
 800a6c0:	e7ae      	b.n	800a620 <_malloc_r+0x3d4>
 800a6c2:	42b5      	cmp	r5, r6
 800a6c4:	f43f aee3 	beq.w	800a48e <_malloc_r+0x242>
 800a6c8:	68b5      	ldr	r5, [r6, #8]
 800a6ca:	686a      	ldr	r2, [r5, #4]
 800a6cc:	f022 0203 	bic.w	r2, r2, #3
 800a6d0:	e754      	b.n	800a57c <_malloc_r+0x330>
 800a6d2:	f8d8 8000 	ldr.w	r8, [r8]
 800a6d6:	4590      	cmp	r8, r2
 800a6d8:	d16d      	bne.n	800a7b6 <_malloc_r+0x56a>
 800a6da:	f01c 0f03 	tst.w	ip, #3
 800a6de:	f1a8 0208 	sub.w	r2, r8, #8
 800a6e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6e6:	d1f4      	bne.n	800a6d2 <_malloc_r+0x486>
 800a6e8:	6872      	ldr	r2, [r6, #4]
 800a6ea:	ea22 0203 	bic.w	r2, r2, r3
 800a6ee:	6072      	str	r2, [r6, #4]
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	f63f ae9b 	bhi.w	800a42e <_malloc_r+0x1e2>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f43f ae98 	beq.w	800a42e <_malloc_r+0x1e2>
 800a6fe:	421a      	tst	r2, r3
 800a700:	46cc      	mov	ip, r9
 800a702:	f47f ae45 	bne.w	800a390 <_malloc_r+0x144>
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	f10c 0c04 	add.w	ip, ip, #4
 800a70c:	421a      	tst	r2, r3
 800a70e:	d0fa      	beq.n	800a706 <_malloc_r+0x4ba>
 800a710:	e63e      	b.n	800a390 <_malloc_r+0x144>
 800a712:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800a716:	d818      	bhi.n	800a74a <_malloc_r+0x4fe>
 800a718:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
 800a71c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800a720:	ea4f 054c 	mov.w	r5, ip, lsl #1
 800a724:	e5d6      	b.n	800a2d4 <_malloc_r+0x88>
 800a726:	2301      	movs	r3, #1
 800a728:	4645      	mov	r5, r8
 800a72a:	f8c8 3004 	str.w	r3, [r8, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	e724      	b.n	800a57c <_malloc_r+0x330>
 800a732:	f04f 0901 	mov.w	r9, #1
 800a736:	108d      	asrs	r5, r1, #2
 800a738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a73c:	4610      	mov	r0, r2
 800a73e:	fa09 f505 	lsl.w	r5, r9, r5
 800a742:	4329      	orrs	r1, r5
 800a744:	f8c8 1004 	str.w	r1, [r8, #4]
 800a748:	e77d      	b.n	800a646 <_malloc_r+0x3fa>
 800a74a:	f240 5354 	movw	r3, #1364	; 0x554
 800a74e:	459c      	cmp	ip, r3
 800a750:	bf95      	itete	ls
 800a752:	ea4f 4c94 	movls.w	ip, r4, lsr #18
 800a756:	25fc      	movhi	r5, #252	; 0xfc
 800a758:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 800a75c:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 800a760:	bf98      	it	ls
 800a762:	ea4f 054c 	movls.w	r5, ip, lsl #1
 800a766:	e5b5      	b.n	800a2d4 <_malloc_r+0x88>
 800a768:	f3c2 010b 	ubfx	r1, r2, #0, #12
 800a76c:	2900      	cmp	r1, #0
 800a76e:	f47f ae96 	bne.w	800a49e <_malloc_r+0x252>
 800a772:	68b2      	ldr	r2, [r6, #8]
 800a774:	eb0b 010a 	add.w	r1, fp, sl
 800a778:	f041 0101 	orr.w	r1, r1, #1
 800a77c:	6051      	str	r1, [r2, #4]
 800a77e:	e6e7      	b.n	800a550 <_malloc_r+0x304>
 800a780:	f105 0108 	add.w	r1, r5, #8
 800a784:	4638      	mov	r0, r7
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	f001 fd22 	bl	800c1d0 <_free_r>
 800a78c:	9a01      	ldr	r2, [sp, #4]
 800a78e:	6853      	ldr	r3, [r2, #4]
 800a790:	e6de      	b.n	800a550 <_malloc_r+0x304>
 800a792:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a796:	d803      	bhi.n	800a7a0 <_malloc_r+0x554>
 800a798:	0bc1      	lsrs	r1, r0, #15
 800a79a:	3177      	adds	r1, #119	; 0x77
 800a79c:	004d      	lsls	r5, r1, #1
 800a79e:	e73f      	b.n	800a620 <_malloc_r+0x3d4>
 800a7a0:	f240 5154 	movw	r1, #1364	; 0x554
 800a7a4:	428a      	cmp	r2, r1
 800a7a6:	bf95      	itete	ls
 800a7a8:	0c81      	lsrls	r1, r0, #18
 800a7aa:	25fc      	movhi	r5, #252	; 0xfc
 800a7ac:	317c      	addls	r1, #124	; 0x7c
 800a7ae:	217e      	movhi	r1, #126	; 0x7e
 800a7b0:	bf98      	it	ls
 800a7b2:	004d      	lslls	r5, r1, #1
 800a7b4:	e734      	b.n	800a620 <_malloc_r+0x3d4>
 800a7b6:	6872      	ldr	r2, [r6, #4]
 800a7b8:	e79a      	b.n	800a6f0 <_malloc_r+0x4a4>
 800a7ba:	bf00      	nop

0800a7bc <memchr>:
 800a7bc:	0783      	lsls	r3, r0, #30
 800a7be:	b2c9      	uxtb	r1, r1
 800a7c0:	b470      	push	{r4, r5, r6}
 800a7c2:	d03f      	beq.n	800a844 <memchr+0x88>
 800a7c4:	1e54      	subs	r4, r2, #1
 800a7c6:	b32a      	cbz	r2, 800a814 <memchr+0x58>
 800a7c8:	7803      	ldrb	r3, [r0, #0]
 800a7ca:	428b      	cmp	r3, r1
 800a7cc:	d023      	beq.n	800a816 <memchr+0x5a>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	e004      	b.n	800a7dc <memchr+0x20>
 800a7d2:	b1fc      	cbz	r4, 800a814 <memchr+0x58>
 800a7d4:	7805      	ldrb	r5, [r0, #0]
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	428d      	cmp	r5, r1
 800a7da:	d01c      	beq.n	800a816 <memchr+0x5a>
 800a7dc:	f013 0f03 	tst.w	r3, #3
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f104 32ff 	add.w	r2, r4, #4294967295
 800a7e6:	f103 0301 	add.w	r3, r3, #1
 800a7ea:	d1f2      	bne.n	800a7d2 <memchr+0x16>
 800a7ec:	2c03      	cmp	r4, #3
 800a7ee:	d814      	bhi.n	800a81a <memchr+0x5e>
 800a7f0:	1e65      	subs	r5, r4, #1
 800a7f2:	b34c      	cbz	r4, 800a848 <memchr+0x8c>
 800a7f4:	7803      	ldrb	r3, [r0, #0]
 800a7f6:	428b      	cmp	r3, r1
 800a7f8:	d00d      	beq.n	800a816 <memchr+0x5a>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	e002      	b.n	800a806 <memchr+0x4a>
 800a800:	7804      	ldrb	r4, [r0, #0]
 800a802:	428c      	cmp	r4, r1
 800a804:	d007      	beq.n	800a816 <memchr+0x5a>
 800a806:	42ab      	cmp	r3, r5
 800a808:	4610      	mov	r0, r2
 800a80a:	f103 0301 	add.w	r3, r3, #1
 800a80e:	f102 0201 	add.w	r2, r2, #1
 800a812:	d1f5      	bne.n	800a800 <memchr+0x44>
 800a814:	2000      	movs	r0, #0
 800a816:	bc70      	pop	{r4, r5, r6}
 800a818:	4770      	bx	lr
 800a81a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800a81e:	4603      	mov	r3, r0
 800a820:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800a824:	4618      	mov	r0, r3
 800a826:	3304      	adds	r3, #4
 800a828:	6802      	ldr	r2, [r0, #0]
 800a82a:	4072      	eors	r2, r6
 800a82c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800a830:	ea25 0202 	bic.w	r2, r5, r2
 800a834:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800a838:	d1da      	bne.n	800a7f0 <memchr+0x34>
 800a83a:	3c04      	subs	r4, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	2c03      	cmp	r4, #3
 800a840:	d8f0      	bhi.n	800a824 <memchr+0x68>
 800a842:	e7d5      	b.n	800a7f0 <memchr+0x34>
 800a844:	4614      	mov	r4, r2
 800a846:	e7d1      	b.n	800a7ec <memchr+0x30>
 800a848:	4620      	mov	r0, r4
 800a84a:	e7e4      	b.n	800a816 <memchr+0x5a>

0800a84c <memcpy>:
 800a84c:	2a0f      	cmp	r2, #15
 800a84e:	b4f0      	push	{r4, r5, r6, r7}
 800a850:	d945      	bls.n	800a8de <memcpy+0x92>
 800a852:	ea40 0301 	orr.w	r3, r0, r1
 800a856:	079b      	lsls	r3, r3, #30
 800a858:	d145      	bne.n	800a8e6 <memcpy+0x9a>
 800a85a:	f1a2 0710 	sub.w	r7, r2, #16
 800a85e:	460c      	mov	r4, r1
 800a860:	4603      	mov	r3, r0
 800a862:	093f      	lsrs	r7, r7, #4
 800a864:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800a868:	3610      	adds	r6, #16
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	3310      	adds	r3, #16
 800a86e:	3410      	adds	r4, #16
 800a870:	f843 5c10 	str.w	r5, [r3, #-16]
 800a874:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800a878:	f843 5c0c 	str.w	r5, [r3, #-12]
 800a87c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a880:	f843 5c08 	str.w	r5, [r3, #-8]
 800a884:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a888:	f843 5c04 	str.w	r5, [r3, #-4]
 800a88c:	42b3      	cmp	r3, r6
 800a88e:	d1ec      	bne.n	800a86a <memcpy+0x1e>
 800a890:	1c7b      	adds	r3, r7, #1
 800a892:	f002 0c0f 	and.w	ip, r2, #15
 800a896:	f1bc 0f03 	cmp.w	ip, #3
 800a89a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a89e:	4419      	add	r1, r3
 800a8a0:	4403      	add	r3, r0
 800a8a2:	d922      	bls.n	800a8ea <memcpy+0x9e>
 800a8a4:	460e      	mov	r6, r1
 800a8a6:	461d      	mov	r5, r3
 800a8a8:	4664      	mov	r4, ip
 800a8aa:	f856 7b04 	ldr.w	r7, [r6], #4
 800a8ae:	3c04      	subs	r4, #4
 800a8b0:	2c03      	cmp	r4, #3
 800a8b2:	f845 7b04 	str.w	r7, [r5], #4
 800a8b6:	d8f8      	bhi.n	800a8aa <memcpy+0x5e>
 800a8b8:	f1ac 0404 	sub.w	r4, ip, #4
 800a8bc:	f002 0203 	and.w	r2, r2, #3
 800a8c0:	f024 0403 	bic.w	r4, r4, #3
 800a8c4:	3404      	adds	r4, #4
 800a8c6:	4423      	add	r3, r4
 800a8c8:	4421      	add	r1, r4
 800a8ca:	b132      	cbz	r2, 800a8da <memcpy+0x8e>
 800a8cc:	440a      	add	r2, r1
 800a8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d2:	4291      	cmp	r1, r2
 800a8d4:	f803 4b01 	strb.w	r4, [r3], #1
 800a8d8:	d1f9      	bne.n	800a8ce <memcpy+0x82>
 800a8da:	bcf0      	pop	{r4, r5, r6, r7}
 800a8dc:	4770      	bx	lr
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d1f3      	bne.n	800a8cc <memcpy+0x80>
 800a8e4:	e7f9      	b.n	800a8da <memcpy+0x8e>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	e7f0      	b.n	800a8cc <memcpy+0x80>
 800a8ea:	4662      	mov	r2, ip
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d1ed      	bne.n	800a8cc <memcpy+0x80>
 800a8f0:	e7f3      	b.n	800a8da <memcpy+0x8e>
 800a8f2:	bf00      	nop

0800a8f4 <__malloc_lock>:
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop

0800a8f8 <__malloc_unlock>:
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop

0800a8fc <_Balloc>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	4606      	mov	r6, r0
 800a900:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a902:	460d      	mov	r5, r1
 800a904:	b164      	cbz	r4, 800a920 <_Balloc+0x24>
 800a906:	68e2      	ldr	r2, [r4, #12]
 800a908:	b19a      	cbz	r2, 800a932 <_Balloc+0x36>
 800a90a:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800a90e:	b1e3      	cbz	r3, 800a94a <_Balloc+0x4e>
 800a910:	6819      	ldr	r1, [r3, #0]
 800a912:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 800a916:	2200      	movs	r2, #0
 800a918:	4618      	mov	r0, r3
 800a91a:	611a      	str	r2, [r3, #16]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	bd70      	pop	{r4, r5, r6, pc}
 800a920:	2010      	movs	r0, #16
 800a922:	f7ff fc83 	bl	800a22c <malloc>
 800a926:	6270      	str	r0, [r6, #36]	; 0x24
 800a928:	6044      	str	r4, [r0, #4]
 800a92a:	6084      	str	r4, [r0, #8]
 800a92c:	6004      	str	r4, [r0, #0]
 800a92e:	60c4      	str	r4, [r0, #12]
 800a930:	4604      	mov	r4, r0
 800a932:	2221      	movs	r2, #33	; 0x21
 800a934:	4630      	mov	r0, r6
 800a936:	2104      	movs	r1, #4
 800a938:	f001 fbc6 	bl	800c0c8 <_calloc_r>
 800a93c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a93e:	60e0      	str	r0, [r4, #12]
 800a940:	68da      	ldr	r2, [r3, #12]
 800a942:	2a00      	cmp	r2, #0
 800a944:	d1e1      	bne.n	800a90a <_Balloc+0xe>
 800a946:	2000      	movs	r0, #0
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	2301      	movs	r3, #1
 800a94c:	4630      	mov	r0, r6
 800a94e:	4619      	mov	r1, r3
 800a950:	fa03 f405 	lsl.w	r4, r3, r5
 800a954:	1d62      	adds	r2, r4, #5
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	f001 fbb6 	bl	800c0c8 <_calloc_r>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2800      	cmp	r0, #0
 800a960:	d0f1      	beq.n	800a946 <_Balloc+0x4a>
 800a962:	6045      	str	r5, [r0, #4]
 800a964:	6084      	str	r4, [r0, #8]
 800a966:	e7d6      	b.n	800a916 <_Balloc+0x1a>

0800a968 <_Bfree>:
 800a968:	b530      	push	{r4, r5, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a96e:	b083      	sub	sp, #12
 800a970:	b155      	cbz	r5, 800a988 <_Bfree+0x20>
 800a972:	b139      	cbz	r1, 800a984 <_Bfree+0x1c>
 800a974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a976:	684a      	ldr	r2, [r1, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a97e:	6008      	str	r0, [r1, #0]
 800a980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a984:	b003      	add	sp, #12
 800a986:	bd30      	pop	{r4, r5, pc}
 800a988:	2010      	movs	r0, #16
 800a98a:	9101      	str	r1, [sp, #4]
 800a98c:	f7ff fc4e 	bl	800a22c <malloc>
 800a990:	9901      	ldr	r1, [sp, #4]
 800a992:	6260      	str	r0, [r4, #36]	; 0x24
 800a994:	6045      	str	r5, [r0, #4]
 800a996:	6085      	str	r5, [r0, #8]
 800a998:	6005      	str	r5, [r0, #0]
 800a99a:	60c5      	str	r5, [r0, #12]
 800a99c:	e7e9      	b.n	800a972 <_Bfree+0xa>
 800a99e:	bf00      	nop

0800a9a0 <__multadd>:
 800a9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a4:	4688      	mov	r8, r1
 800a9a6:	f8d1 a010 	ldr.w	sl, [r1, #16]
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	4681      	mov	r9, r0
 800a9ae:	f101 0514 	add.w	r5, r1, #20
 800a9b2:	2400      	movs	r4, #0
 800a9b4:	682f      	ldr	r7, [r5, #0]
 800a9b6:	3401      	adds	r4, #1
 800a9b8:	45a2      	cmp	sl, r4
 800a9ba:	b2be      	uxth	r6, r7
 800a9bc:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800a9c0:	fb02 3606 	mla	r6, r2, r6, r3
 800a9c4:	fb02 f307 	mul.w	r3, r2, r7
 800a9c8:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 800a9cc:	b2b6      	uxth	r6, r6
 800a9ce:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800a9d2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a9d6:	f845 6b04 	str.w	r6, [r5], #4
 800a9da:	dceb      	bgt.n	800a9b4 <__multadd+0x14>
 800a9dc:	b153      	cbz	r3, 800a9f4 <__multadd+0x54>
 800a9de:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a9e2:	4592      	cmp	sl, r2
 800a9e4:	da0a      	bge.n	800a9fc <__multadd+0x5c>
 800a9e6:	eb08 018a 	add.w	r1, r8, sl, lsl #2
 800a9ea:	f10a 0201 	add.w	r2, sl, #1
 800a9ee:	614b      	str	r3, [r1, #20]
 800a9f0:	f8c8 2010 	str.w	r2, [r8, #16]
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	b002      	add	sp, #8
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa00:	4648      	mov	r0, r9
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	3101      	adds	r1, #1
 800aa06:	f7ff ff79 	bl	800a8fc <_Balloc>
 800aa0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa0e:	f108 010c 	add.w	r1, r8, #12
 800aa12:	3202      	adds	r2, #2
 800aa14:	0092      	lsls	r2, r2, #2
 800aa16:	4604      	mov	r4, r0
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7ff ff17 	bl	800a84c <memcpy>
 800aa1e:	4641      	mov	r1, r8
 800aa20:	4648      	mov	r0, r9
 800aa22:	46a0      	mov	r8, r4
 800aa24:	f7ff ffa0 	bl	800a968 <_Bfree>
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	e7dc      	b.n	800a9e6 <__multadd+0x46>

0800aa2c <__s2b>:
 800aa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa30:	4699      	mov	r9, r3
 800aa32:	f648 6339 	movw	r3, #36409	; 0x8e39
 800aa36:	f109 0508 	add.w	r5, r9, #8
 800aa3a:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4607      	mov	r7, r0
 800aa42:	4690      	mov	r8, r2
 800aa44:	fb83 1305 	smull	r1, r3, r3, r5
 800aa48:	17ed      	asrs	r5, r5, #31
 800aa4a:	9e08      	ldr	r6, [sp, #32]
 800aa4c:	ebc5 0363 	rsb	r3, r5, r3, asr #1
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	dd35      	ble.n	800aac0 <__s2b+0x94>
 800aa54:	2501      	movs	r5, #1
 800aa56:	2100      	movs	r1, #0
 800aa58:	006d      	lsls	r5, r5, #1
 800aa5a:	3101      	adds	r1, #1
 800aa5c:	42ab      	cmp	r3, r5
 800aa5e:	dcfb      	bgt.n	800aa58 <__s2b+0x2c>
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ff4b 	bl	800a8fc <_Balloc>
 800aa66:	f1b8 0f09 	cmp.w	r8, #9
 800aa6a:	f04f 0301 	mov.w	r3, #1
 800aa6e:	bfdc      	itt	le
 800aa70:	340a      	addle	r4, #10
 800aa72:	f04f 0809 	movle.w	r8, #9
 800aa76:	6146      	str	r6, [r0, #20]
 800aa78:	6103      	str	r3, [r0, #16]
 800aa7a:	dd10      	ble.n	800aa9e <__s2b+0x72>
 800aa7c:	f104 0609 	add.w	r6, r4, #9
 800aa80:	4444      	add	r4, r8
 800aa82:	4635      	mov	r5, r6
 800aa84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa88:	4601      	mov	r1, r0
 800aa8a:	220a      	movs	r2, #10
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	3b30      	subs	r3, #48	; 0x30
 800aa90:	f7ff ff86 	bl	800a9a0 <__multadd>
 800aa94:	42a5      	cmp	r5, r4
 800aa96:	d1f5      	bne.n	800aa84 <__s2b+0x58>
 800aa98:	eb06 0408 	add.w	r4, r6, r8
 800aa9c:	3c08      	subs	r4, #8
 800aa9e:	45c1      	cmp	r9, r8
 800aaa0:	dd0c      	ble.n	800aabc <__s2b+0x90>
 800aaa2:	ebc8 0809 	rsb	r8, r8, r9
 800aaa6:	44a0      	add	r8, r4
 800aaa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aaac:	4601      	mov	r1, r0
 800aaae:	220a      	movs	r2, #10
 800aab0:	4638      	mov	r0, r7
 800aab2:	3b30      	subs	r3, #48	; 0x30
 800aab4:	f7ff ff74 	bl	800a9a0 <__multadd>
 800aab8:	4544      	cmp	r4, r8
 800aaba:	d1f5      	bne.n	800aaa8 <__s2b+0x7c>
 800aabc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aac0:	2100      	movs	r1, #0
 800aac2:	e7cd      	b.n	800aa60 <__s2b+0x34>

0800aac4 <__hi0bits>:
 800aac4:	0c03      	lsrs	r3, r0, #16
 800aac6:	bf06      	itte	eq
 800aac8:	0400      	lsleq	r0, r0, #16
 800aaca:	2310      	moveq	r3, #16
 800aacc:	2300      	movne	r3, #0
 800aace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aad2:	bf04      	itt	eq
 800aad4:	0200      	lsleq	r0, r0, #8
 800aad6:	3308      	addeq	r3, #8
 800aad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aadc:	bf04      	itt	eq
 800aade:	0100      	lsleq	r0, r0, #4
 800aae0:	3304      	addeq	r3, #4
 800aae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aae6:	bf04      	itt	eq
 800aae8:	0080      	lsleq	r0, r0, #2
 800aaea:	3302      	addeq	r3, #2
 800aaec:	2800      	cmp	r0, #0
 800aaee:	db05      	blt.n	800aafc <__hi0bits+0x38>
 800aaf0:	0042      	lsls	r2, r0, #1
 800aaf2:	d401      	bmi.n	800aaf8 <__hi0bits+0x34>
 800aaf4:	2020      	movs	r0, #32
 800aaf6:	4770      	bx	lr
 800aaf8:	1c58      	adds	r0, r3, #1
 800aafa:	4770      	bx	lr
 800aafc:	4618      	mov	r0, r3
 800aafe:	4770      	bx	lr

0800ab00 <__lo0bits>:
 800ab00:	6803      	ldr	r3, [r0, #0]
 800ab02:	4602      	mov	r2, r0
 800ab04:	f013 0007 	ands.w	r0, r3, #7
 800ab08:	d009      	beq.n	800ab1e <__lo0bits+0x1e>
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	d421      	bmi.n	800ab52 <__lo0bits+0x52>
 800ab0e:	0798      	lsls	r0, r3, #30
 800ab10:	bf4b      	itete	mi
 800ab12:	085b      	lsrmi	r3, r3, #1
 800ab14:	089b      	lsrpl	r3, r3, #2
 800ab16:	2001      	movmi	r0, #1
 800ab18:	2002      	movpl	r0, #2
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	4770      	bx	lr
 800ab1e:	b299      	uxth	r1, r3
 800ab20:	b909      	cbnz	r1, 800ab26 <__lo0bits+0x26>
 800ab22:	0c1b      	lsrs	r3, r3, #16
 800ab24:	2010      	movs	r0, #16
 800ab26:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab2a:	bf04      	itt	eq
 800ab2c:	0a1b      	lsreq	r3, r3, #8
 800ab2e:	3008      	addeq	r0, #8
 800ab30:	0719      	lsls	r1, r3, #28
 800ab32:	bf04      	itt	eq
 800ab34:	091b      	lsreq	r3, r3, #4
 800ab36:	3004      	addeq	r0, #4
 800ab38:	0799      	lsls	r1, r3, #30
 800ab3a:	bf04      	itt	eq
 800ab3c:	089b      	lsreq	r3, r3, #2
 800ab3e:	3002      	addeq	r0, #2
 800ab40:	07d9      	lsls	r1, r3, #31
 800ab42:	d404      	bmi.n	800ab4e <__lo0bits+0x4e>
 800ab44:	085b      	lsrs	r3, r3, #1
 800ab46:	d101      	bne.n	800ab4c <__lo0bits+0x4c>
 800ab48:	2020      	movs	r0, #32
 800ab4a:	4770      	bx	lr
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	4770      	bx	lr
 800ab52:	2000      	movs	r0, #0
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop

0800ab58 <__i2b>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	f7ff fecd 	bl	800a8fc <_Balloc>
 800ab62:	2201      	movs	r2, #1
 800ab64:	6144      	str	r4, [r0, #20]
 800ab66:	6102      	str	r2, [r0, #16]
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop

0800ab6c <__multiply>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	460c      	mov	r4, r1
 800ab72:	690e      	ldr	r6, [r1, #16]
 800ab74:	b085      	sub	sp, #20
 800ab76:	6915      	ldr	r5, [r2, #16]
 800ab78:	4693      	mov	fp, r2
 800ab7a:	42ae      	cmp	r6, r5
 800ab7c:	da04      	bge.n	800ab88 <__multiply+0x1c>
 800ab7e:	4632      	mov	r2, r6
 800ab80:	465c      	mov	r4, fp
 800ab82:	462e      	mov	r6, r5
 800ab84:	468b      	mov	fp, r1
 800ab86:	4615      	mov	r5, r2
 800ab88:	68a3      	ldr	r3, [r4, #8]
 800ab8a:	eb06 0905 	add.w	r9, r6, r5
 800ab8e:	6861      	ldr	r1, [r4, #4]
 800ab90:	4599      	cmp	r9, r3
 800ab92:	bfc8      	it	gt
 800ab94:	3101      	addgt	r1, #1
 800ab96:	f7ff feb1 	bl	800a8fc <_Balloc>
 800ab9a:	f100 0a14 	add.w	sl, r0, #20
 800ab9e:	9002      	str	r0, [sp, #8]
 800aba0:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
 800aba4:	9101      	str	r1, [sp, #4]
 800aba6:	458a      	cmp	sl, r1
 800aba8:	d206      	bcs.n	800abb8 <__multiply+0x4c>
 800abaa:	9a01      	ldr	r2, [sp, #4]
 800abac:	4653      	mov	r3, sl
 800abae:	2000      	movs	r0, #0
 800abb0:	f843 0b04 	str.w	r0, [r3], #4
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d8fb      	bhi.n	800abb0 <__multiply+0x44>
 800abb8:	f10b 0b14 	add.w	fp, fp, #20
 800abbc:	3414      	adds	r4, #20
 800abbe:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 800abc2:	9400      	str	r4, [sp, #0]
 800abc4:	45ab      	cmp	fp, r5
 800abc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800abca:	bf3c      	itt	cc
 800abcc:	f8cd 900c 	strcc.w	r9, [sp, #12]
 800abd0:	46a9      	movcc	r9, r5
 800abd2:	d254      	bcs.n	800ac7e <__multiply+0x112>
 800abd4:	f85b 3b04 	ldr.w	r3, [fp], #4
 800abd8:	b29c      	uxth	r4, r3
 800abda:	2c00      	cmp	r4, #0
 800abdc:	d064      	beq.n	800aca8 <__multiply+0x13c>
 800abde:	9900      	ldr	r1, [sp, #0]
 800abe0:	4652      	mov	r2, sl
 800abe2:	2500      	movs	r5, #0
 800abe4:	46a4      	mov	ip, r4
 800abe6:	e000      	b.n	800abea <__multiply+0x7e>
 800abe8:	461a      	mov	r2, r3
 800abea:	f851 4b04 	ldr.w	r4, [r1], #4
 800abee:	4613      	mov	r3, r2
 800abf0:	6817      	ldr	r7, [r2, #0]
 800abf2:	428e      	cmp	r6, r1
 800abf4:	fa1f f884 	uxth.w	r8, r4
 800abf8:	ea4f 4414 	mov.w	r4, r4, lsr #16
 800abfc:	b2b8      	uxth	r0, r7
 800abfe:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800ac02:	fb0c 0808 	mla	r8, ip, r8, r0
 800ac06:	fb0c 7004 	mla	r0, ip, r4, r7
 800ac0a:	4445      	add	r5, r8
 800ac0c:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800ac10:	b2ad      	uxth	r5, r5
 800ac12:	ea45 4400 	orr.w	r4, r5, r0, lsl #16
 800ac16:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800ac1a:	f843 4b04 	str.w	r4, [r3], #4
 800ac1e:	d8e3      	bhi.n	800abe8 <__multiply+0x7c>
 800ac20:	6055      	str	r5, [r2, #4]
 800ac22:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800ac26:	0c24      	lsrs	r4, r4, #16
 800ac28:	d023      	beq.n	800ac72 <__multiply+0x106>
 800ac2a:	f8da 1000 	ldr.w	r1, [sl]
 800ac2e:	4650      	mov	r0, sl
 800ac30:	9b00      	ldr	r3, [sp, #0]
 800ac32:	2700      	movs	r7, #0
 800ac34:	460d      	mov	r5, r1
 800ac36:	e000      	b.n	800ac3a <__multiply+0xce>
 800ac38:	4610      	mov	r0, r2
 800ac3a:	f8b3 c000 	ldrh.w	ip, [r3]
 800ac3e:	0c2d      	lsrs	r5, r5, #16
 800ac40:	4602      	mov	r2, r0
 800ac42:	b289      	uxth	r1, r1
 800ac44:	fb04 550c 	mla	r5, r4, ip, r5
 800ac48:	442f      	add	r7, r5
 800ac4a:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ac4e:	f842 1b04 	str.w	r1, [r2], #4
 800ac52:	6841      	ldr	r1, [r0, #4]
 800ac54:	f853 cb04 	ldr.w	ip, [r3], #4
 800ac58:	460d      	mov	r5, r1
 800ac5a:	b289      	uxth	r1, r1
 800ac5c:	429e      	cmp	r6, r3
 800ac5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac62:	fb04 110c 	mla	r1, r4, ip, r1
 800ac66:	eb01 4117 	add.w	r1, r1, r7, lsr #16
 800ac6a:	ea4f 4711 	mov.w	r7, r1, lsr #16
 800ac6e:	d8e3      	bhi.n	800ac38 <__multiply+0xcc>
 800ac70:	6041      	str	r1, [r0, #4]
 800ac72:	45d9      	cmp	r9, fp
 800ac74:	f10a 0a04 	add.w	sl, sl, #4
 800ac78:	d8ac      	bhi.n	800abd4 <__multiply+0x68>
 800ac7a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ac7e:	f1b9 0f00 	cmp.w	r9, #0
 800ac82:	dd0a      	ble.n	800ac9a <__multiply+0x12e>
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	3b04      	subs	r3, #4
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	b11a      	cbz	r2, 800ac94 <__multiply+0x128>
 800ac8c:	e005      	b.n	800ac9a <__multiply+0x12e>
 800ac8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac92:	b912      	cbnz	r2, 800ac9a <__multiply+0x12e>
 800ac94:	f1b9 0901 	subs.w	r9, r9, #1
 800ac98:	d1f9      	bne.n	800ac8e <__multiply+0x122>
 800ac9a:	9902      	ldr	r1, [sp, #8]
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	f8c1 9010 	str.w	r9, [r1, #16]
 800aca2:	b005      	add	sp, #20
 800aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca8:	461c      	mov	r4, r3
 800acaa:	e7bc      	b.n	800ac26 <__multiply+0xba>

0800acac <__pow5mult>:
 800acac:	f012 0303 	ands.w	r3, r2, #3
 800acb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4614      	mov	r4, r2
 800acb6:	b083      	sub	sp, #12
 800acb8:	4607      	mov	r7, r0
 800acba:	460e      	mov	r6, r1
 800acbc:	d12b      	bne.n	800ad16 <__pow5mult+0x6a>
 800acbe:	10a4      	asrs	r4, r4, #2
 800acc0:	d01c      	beq.n	800acfc <__pow5mult+0x50>
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d032      	beq.n	800ad2e <__pow5mult+0x82>
 800acc8:	689d      	ldr	r5, [r3, #8]
 800acca:	2d00      	cmp	r5, #0
 800accc:	d03a      	beq.n	800ad44 <__pow5mult+0x98>
 800acce:	f04f 0900 	mov.w	r9, #0
 800acd2:	e004      	b.n	800acde <__pow5mult+0x32>
 800acd4:	1064      	asrs	r4, r4, #1
 800acd6:	d011      	beq.n	800acfc <__pow5mult+0x50>
 800acd8:	6828      	ldr	r0, [r5, #0]
 800acda:	b198      	cbz	r0, 800ad04 <__pow5mult+0x58>
 800acdc:	4605      	mov	r5, r0
 800acde:	07e0      	lsls	r0, r4, #31
 800ace0:	d5f8      	bpl.n	800acd4 <__pow5mult+0x28>
 800ace2:	4631      	mov	r1, r6
 800ace4:	462a      	mov	r2, r5
 800ace6:	4638      	mov	r0, r7
 800ace8:	f7ff ff40 	bl	800ab6c <__multiply>
 800acec:	4631      	mov	r1, r6
 800acee:	4680      	mov	r8, r0
 800acf0:	4638      	mov	r0, r7
 800acf2:	f7ff fe39 	bl	800a968 <_Bfree>
 800acf6:	1064      	asrs	r4, r4, #1
 800acf8:	4646      	mov	r6, r8
 800acfa:	d1ed      	bne.n	800acd8 <__pow5mult+0x2c>
 800acfc:	4630      	mov	r0, r6
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad04:	4638      	mov	r0, r7
 800ad06:	4629      	mov	r1, r5
 800ad08:	462a      	mov	r2, r5
 800ad0a:	f7ff ff2f 	bl	800ab6c <__multiply>
 800ad0e:	6028      	str	r0, [r5, #0]
 800ad10:	f8c0 9000 	str.w	r9, [r0]
 800ad14:	e7e2      	b.n	800acdc <__pow5mult+0x30>
 800ad16:	f64e 52e0 	movw	r2, #60896	; 0xede0
 800ad1a:	1e5d      	subs	r5, r3, #1
 800ad1c:	f6c0 0200 	movt	r2, #2048	; 0x800
 800ad20:	2300      	movs	r3, #0
 800ad22:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800ad26:	f7ff fe3b 	bl	800a9a0 <__multadd>
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	e7c7      	b.n	800acbe <__pow5mult+0x12>
 800ad2e:	2010      	movs	r0, #16
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	f7ff fa7b 	bl	800a22c <malloc>
 800ad36:	9b01      	ldr	r3, [sp, #4]
 800ad38:	6278      	str	r0, [r7, #36]	; 0x24
 800ad3a:	6043      	str	r3, [r0, #4]
 800ad3c:	6083      	str	r3, [r0, #8]
 800ad3e:	6003      	str	r3, [r0, #0]
 800ad40:	60c3      	str	r3, [r0, #12]
 800ad42:	4603      	mov	r3, r0
 800ad44:	2101      	movs	r1, #1
 800ad46:	4638      	mov	r0, r7
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	f7ff fdd7 	bl	800a8fc <_Balloc>
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	f240 2271 	movw	r2, #625	; 0x271
 800ad54:	2101      	movs	r1, #1
 800ad56:	6142      	str	r2, [r0, #20]
 800ad58:	4605      	mov	r5, r0
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	6101      	str	r1, [r0, #16]
 800ad5e:	6098      	str	r0, [r3, #8]
 800ad60:	6002      	str	r2, [r0, #0]
 800ad62:	e7b4      	b.n	800acce <__pow5mult+0x22>

0800ad64 <__lshift>:
 800ad64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	4693      	mov	fp, r2
 800ad6a:	690a      	ldr	r2, [r1, #16]
 800ad6c:	460f      	mov	r7, r1
 800ad6e:	ea4f 156b 	mov.w	r5, fp, asr #5
 800ad72:	688b      	ldr	r3, [r1, #8]
 800ad74:	eb05 0902 	add.w	r9, r5, r2
 800ad78:	4680      	mov	r8, r0
 800ad7a:	f109 0601 	add.w	r6, r9, #1
 800ad7e:	6849      	ldr	r1, [r1, #4]
 800ad80:	429e      	cmp	r6, r3
 800ad82:	dd03      	ble.n	800ad8c <__lshift+0x28>
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	3101      	adds	r1, #1
 800ad88:	429e      	cmp	r6, r3
 800ad8a:	dcfb      	bgt.n	800ad84 <__lshift+0x20>
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	f7ff fdb5 	bl	800a8fc <_Balloc>
 800ad92:	2d00      	cmp	r5, #0
 800ad94:	4682      	mov	sl, r0
 800ad96:	f100 0414 	add.w	r4, r0, #20
 800ad9a:	dd09      	ble.n	800adb0 <__lshift+0x4c>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4619      	mov	r1, r3
 800ada2:	3301      	adds	r3, #1
 800ada4:	f842 1b04 	str.w	r1, [r2], #4
 800ada8:	42ab      	cmp	r3, r5
 800adaa:	d1fa      	bne.n	800ada2 <__lshift+0x3e>
 800adac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	f01b 0b1f 	ands.w	fp, fp, #31
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800adbe:	d01f      	beq.n	800ae00 <__lshift+0x9c>
 800adc0:	f1cb 0e20 	rsb	lr, fp, #32
 800adc4:	2000      	movs	r0, #0
 800adc6:	e000      	b.n	800adca <__lshift+0x66>
 800adc8:	462c      	mov	r4, r5
 800adca:	6819      	ldr	r1, [r3, #0]
 800adcc:	4625      	mov	r5, r4
 800adce:	fa01 f10b 	lsl.w	r1, r1, fp
 800add2:	4308      	orrs	r0, r1
 800add4:	f845 0b04 	str.w	r0, [r5], #4
 800add8:	f853 0b04 	ldr.w	r0, [r3], #4
 800addc:	4293      	cmp	r3, r2
 800adde:	fa20 f00e 	lsr.w	r0, r0, lr
 800ade2:	d3f1      	bcc.n	800adc8 <__lshift+0x64>
 800ade4:	6060      	str	r0, [r4, #4]
 800ade6:	b108      	cbz	r0, 800adec <__lshift+0x88>
 800ade8:	f109 0602 	add.w	r6, r9, #2
 800adec:	4640      	mov	r0, r8
 800adee:	3e01      	subs	r6, #1
 800adf0:	4639      	mov	r1, r7
 800adf2:	f8ca 6010 	str.w	r6, [sl, #16]
 800adf6:	f7ff fdb7 	bl	800a968 <_Bfree>
 800adfa:	4650      	mov	r0, sl
 800adfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f844 1b04 	str.w	r1, [r4], #4
 800ae0a:	d9ef      	bls.n	800adec <__lshift+0x88>
 800ae0c:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae10:	429a      	cmp	r2, r3
 800ae12:	f844 1b04 	str.w	r1, [r4], #4
 800ae16:	d8f3      	bhi.n	800ae00 <__lshift+0x9c>
 800ae18:	e7e8      	b.n	800adec <__lshift+0x88>
 800ae1a:	bf00      	nop

0800ae1c <__mcmp>:
 800ae1c:	6902      	ldr	r2, [r0, #16]
 800ae1e:	690b      	ldr	r3, [r1, #16]
 800ae20:	b410      	push	{r4}
 800ae22:	1ad2      	subs	r2, r2, r3
 800ae24:	bf18      	it	ne
 800ae26:	4610      	movne	r0, r2
 800ae28:	d112      	bne.n	800ae50 <__mcmp+0x34>
 800ae2a:	009a      	lsls	r2, r3, #2
 800ae2c:	3014      	adds	r0, #20
 800ae2e:	3114      	adds	r1, #20
 800ae30:	1883      	adds	r3, r0, r2
 800ae32:	4411      	add	r1, r2
 800ae34:	e001      	b.n	800ae3a <__mcmp+0x1e>
 800ae36:	4298      	cmp	r0, r3
 800ae38:	d20d      	bcs.n	800ae56 <__mcmp+0x3a>
 800ae3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae42:	42a2      	cmp	r2, r4
 800ae44:	d0f7      	beq.n	800ae36 <__mcmp+0x1a>
 800ae46:	4294      	cmp	r4, r2
 800ae48:	bf94      	ite	ls
 800ae4a:	2001      	movls	r0, #1
 800ae4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	2000      	movs	r0, #0
 800ae58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <__mdiff>:
 800ae60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4688      	mov	r8, r1
 800ae66:	4605      	mov	r5, r0
 800ae68:	4611      	mov	r1, r2
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	f7ff ffd5 	bl	800ae1c <__mcmp>
 800ae72:	1e06      	subs	r6, r0, #0
 800ae74:	d05f      	beq.n	800af36 <__mdiff+0xd6>
 800ae76:	bfbc      	itt	lt
 800ae78:	4643      	movlt	r3, r8
 800ae7a:	46a0      	movlt	r8, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	bfb8      	it	lt
 800ae80:	461c      	movlt	r4, r3
 800ae82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae86:	bfac      	ite	ge
 800ae88:	2600      	movge	r6, #0
 800ae8a:	2601      	movlt	r6, #1
 800ae8c:	f7ff fd36 	bl	800a8fc <_Balloc>
 800ae90:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800ae94:	f104 0914 	add.w	r9, r4, #20
 800ae98:	6922      	ldr	r2, [r4, #16]
 800ae9a:	f108 0814 	add.w	r8, r8, #20
 800ae9e:	4644      	mov	r4, r8
 800aea0:	464d      	mov	r5, r9
 800aea2:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 800aea6:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	4682      	mov	sl, r0
 800aeae:	f100 0314 	add.w	r3, r0, #20
 800aeb2:	60c6      	str	r6, [r0, #12]
 800aeb4:	f854 7b04 	ldr.w	r7, [r4], #4
 800aeb8:	f855 0b04 	ldr.w	r0, [r5], #4
 800aebc:	4621      	mov	r1, r4
 800aebe:	b2be      	uxth	r6, r7
 800aec0:	45a9      	cmp	r9, r5
 800aec2:	4432      	add	r2, r6
 800aec4:	fa1f fb80 	uxth.w	fp, r0
 800aec8:	ebcb 0602 	rsb	r6, fp, r2
 800aecc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800aed0:	ebc2 4217 	rsb	r2, r2, r7, lsr #16
 800aed4:	eb02 4226 	add.w	r2, r2, r6, asr #16
 800aed8:	b2b6      	uxth	r6, r6
 800aeda:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800aede:	ea4f 4222 	mov.w	r2, r2, asr #16
 800aee2:	f843 6b04 	str.w	r6, [r3], #4
 800aee6:	d8e5      	bhi.n	800aeb4 <__mdiff+0x54>
 800aee8:	45a0      	cmp	r8, r4
 800aeea:	461d      	mov	r5, r3
 800aeec:	d916      	bls.n	800af1c <__mdiff+0xbc>
 800aeee:	f851 0b04 	ldr.w	r0, [r1], #4
 800aef2:	4588      	cmp	r8, r1
 800aef4:	b286      	uxth	r6, r0
 800aef6:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800aefa:	4432      	add	r2, r6
 800aefc:	eb00 4022 	add.w	r0, r0, r2, asr #16
 800af00:	b292      	uxth	r2, r2
 800af02:	ea42 4600 	orr.w	r6, r2, r0, lsl #16
 800af06:	ea4f 4220 	mov.w	r2, r0, asr #16
 800af0a:	f843 6b04 	str.w	r6, [r3], #4
 800af0e:	d8ee      	bhi.n	800aeee <__mdiff+0x8e>
 800af10:	43e3      	mvns	r3, r4
 800af12:	4443      	add	r3, r8
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	3304      	adds	r3, #4
 800af1a:	442b      	add	r3, r5
 800af1c:	3b04      	subs	r3, #4
 800af1e:	b92e      	cbnz	r6, 800af2c <__mdiff+0xcc>
 800af20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800af24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d0f9      	beq.n	800af20 <__mdiff+0xc0>
 800af2c:	4650      	mov	r0, sl
 800af2e:	f8ca c010 	str.w	ip, [sl, #16]
 800af32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	4628      	mov	r0, r5
 800af38:	4631      	mov	r1, r6
 800af3a:	f7ff fcdf 	bl	800a8fc <_Balloc>
 800af3e:	2201      	movs	r2, #1
 800af40:	4603      	mov	r3, r0
 800af42:	615e      	str	r6, [r3, #20]
 800af44:	611a      	str	r2, [r3, #16]
 800af46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4a:	bf00      	nop

0800af4c <__ulp>:
 800af4c:	2300      	movs	r3, #0
 800af4e:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800af52:	400b      	ands	r3, r1
 800af54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dd02      	ble.n	800af62 <__ulp+0x16>
 800af5c:	4619      	mov	r1, r3
 800af5e:	2000      	movs	r0, #0
 800af60:	4770      	bx	lr
 800af62:	425b      	negs	r3, r3
 800af64:	151b      	asrs	r3, r3, #20
 800af66:	2b13      	cmp	r3, #19
 800af68:	dd0b      	ble.n	800af82 <__ulp+0x36>
 800af6a:	2b32      	cmp	r3, #50	; 0x32
 800af6c:	f04f 0100 	mov.w	r1, #0
 800af70:	bfdb      	ittet	le
 800af72:	2201      	movle	r2, #1
 800af74:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
 800af78:	2301      	movgt	r3, #1
 800af7a:	fa02 f303 	lslle.w	r3, r2, r3
 800af7e:	4618      	mov	r0, r3
 800af80:	4770      	bx	lr
 800af82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800af86:	2000      	movs	r0, #0
 800af88:	fa42 f103 	asr.w	r1, r2, r3
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop

0800af90 <__b2d>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	f100 0614 	add.w	r6, r0, #20
 800af96:	6904      	ldr	r4, [r0, #16]
 800af98:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800af9c:	1f27      	subs	r7, r4, #4
 800af9e:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7ff fd8e 	bl	800aac4 <__hi0bits>
 800afa8:	280a      	cmp	r0, #10
 800afaa:	f1c0 0320 	rsb	r3, r0, #32
 800afae:	600b      	str	r3, [r1, #0]
 800afb0:	dc18      	bgt.n	800afe4 <__b2d+0x54>
 800afb2:	42be      	cmp	r6, r7
 800afb4:	f1c0 010b 	rsb	r1, r0, #11
 800afb8:	fa25 fc01 	lsr.w	ip, r5, r1
 800afbc:	f100 0015 	add.w	r0, r0, #21
 800afc0:	bf34      	ite	cc
 800afc2:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 800afc6:	2100      	movcs	r1, #0
 800afc8:	fa05 f500 	lsl.w	r5, r5, r0
 800afcc:	f04c 5c7f 	orr.w	ip, ip, #1069547520	; 0x3fc00000
 800afd0:	f44c 1340 	orr.w	r3, ip, #3145728	; 0x300000
 800afd4:	bf38      	it	cc
 800afd6:	fa24 f101 	lsrcc.w	r1, r4, r1
 800afda:	ea41 0205 	orr.w	r2, r1, r5
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe4:	42be      	cmp	r6, r7
 800afe6:	bf36      	itet	cc
 800afe8:	f1a4 0708 	subcc.w	r7, r4, #8
 800afec:	2100      	movcs	r1, #0
 800afee:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 800aff2:	f1b0 040b 	subs.w	r4, r0, #11
 800aff6:	d019      	beq.n	800b02c <__b2d+0x9c>
 800aff8:	40a5      	lsls	r5, r4
 800affa:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800affe:	42b7      	cmp	r7, r6
 800b000:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800b004:	fa21 fc00 	lsr.w	ip, r1, r0
 800b008:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b00c:	ea45 030c 	orr.w	r3, r5, ip
 800b010:	bf8c      	ite	hi
 800b012:	f857 5c04 	ldrhi.w	r5, [r7, #-4]
 800b016:	2000      	movls	r0, #0
 800b018:	fa01 f104 	lsl.w	r1, r1, r4
 800b01c:	bf88      	it	hi
 800b01e:	fa25 f000 	lsrhi.w	r0, r5, r0
 800b022:	ea40 0201 	orr.w	r2, r0, r1
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02c:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800b030:	460a      	mov	r2, r1
 800b032:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b03c <__d2b>:
 800b03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	2101      	movs	r1, #1
 800b044:	461d      	mov	r5, r3
 800b046:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800b04a:	4614      	mov	r4, r2
 800b04c:	9f08      	ldr	r7, [sp, #32]
 800b04e:	f7ff fc55 	bl	800a8fc <_Balloc>
 800b052:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b056:	4684      	mov	ip, r0
 800b058:	b10e      	cbz	r6, 800b05e <__d2b+0x22>
 800b05a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	b324      	cbz	r4, 800b0ac <__d2b+0x70>
 800b062:	a802      	add	r0, sp, #8
 800b064:	f840 4d08 	str.w	r4, [r0, #-8]!
 800b068:	4668      	mov	r0, sp
 800b06a:	f7ff fd49 	bl	800ab00 <__lo0bits>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d134      	bne.n	800b0dc <__d2b+0xa0>
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	9901      	ldr	r1, [sp, #4]
 800b076:	f8cc 3014 	str.w	r3, [ip, #20]
 800b07a:	f8cc 1018 	str.w	r1, [ip, #24]
 800b07e:	2900      	cmp	r1, #0
 800b080:	bf0c      	ite	eq
 800b082:	2101      	moveq	r1, #1
 800b084:	2102      	movne	r1, #2
 800b086:	f8cc 1010 	str.w	r1, [ip, #16]
 800b08a:	b9de      	cbnz	r6, 800b0c4 <__d2b+0x88>
 800b08c:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
 800b090:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b094:	6038      	str	r0, [r7, #0]
 800b096:	6918      	ldr	r0, [r3, #16]
 800b098:	f7ff fd14 	bl	800aac4 <__hi0bits>
 800b09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b0a2:	6018      	str	r0, [r3, #0]
 800b0a4:	4660      	mov	r0, ip
 800b0a6:	b002      	add	sp, #8
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ac:	a801      	add	r0, sp, #4
 800b0ae:	f7ff fd27 	bl	800ab00 <__lo0bits>
 800b0b2:	9b01      	ldr	r3, [sp, #4]
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	f8cc 3014 	str.w	r3, [ip, #20]
 800b0ba:	3020      	adds	r0, #32
 800b0bc:	f8cc 1010 	str.w	r1, [ip, #16]
 800b0c0:	2e00      	cmp	r6, #0
 800b0c2:	d0e3      	beq.n	800b08c <__d2b+0x50>
 800b0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c6:	f2a6 4833 	subw	r8, r6, #1075	; 0x433
 800b0ca:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
 800b0ce:	4440      	add	r0, r8
 800b0d0:	6038      	str	r0, [r7, #0]
 800b0d2:	4660      	mov	r0, ip
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	b002      	add	sp, #8
 800b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0dc:	9b01      	ldr	r3, [sp, #4]
 800b0de:	f1c0 0420 	rsb	r4, r0, #32
 800b0e2:	9a00      	ldr	r2, [sp, #0]
 800b0e4:	fa03 f404 	lsl.w	r4, r3, r4
 800b0e8:	40c3      	lsrs	r3, r0
 800b0ea:	4322      	orrs	r2, r4
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	f8cc 2014 	str.w	r2, [ip, #20]
 800b0f4:	e7c1      	b.n	800b07a <__d2b+0x3e>
 800b0f6:	bf00      	nop

0800b0f8 <__ratio>:
 800b0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	4688      	mov	r8, r1
 800b100:	4669      	mov	r1, sp
 800b102:	4606      	mov	r6, r0
 800b104:	f7ff ff44 	bl	800af90 <__b2d>
 800b108:	460d      	mov	r5, r1
 800b10a:	4604      	mov	r4, r0
 800b10c:	a901      	add	r1, sp, #4
 800b10e:	4640      	mov	r0, r8
 800b110:	f7ff ff3e 	bl	800af90 <__b2d>
 800b114:	f8d8 e010 	ldr.w	lr, [r8, #16]
 800b118:	462f      	mov	r7, r5
 800b11a:	4602      	mov	r2, r0
 800b11c:	6930      	ldr	r0, [r6, #16]
 800b11e:	460b      	mov	r3, r1
 800b120:	4689      	mov	r9, r1
 800b122:	ebce 0e00 	rsb	lr, lr, r0
 800b126:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800b12a:	ebc1 0c00 	rsb	ip, r1, r0
 800b12e:	eb0c 114e 	add.w	r1, ip, lr, lsl #5
 800b132:	2900      	cmp	r1, #0
 800b134:	bfc9      	itett	gt
 800b136:	eb05 5701 	addgt.w	r7, r5, r1, lsl #20
 800b13a:	eba3 5901 	suble.w	r9, r3, r1, lsl #20
 800b13e:	4624      	movgt	r4, r4
 800b140:	463d      	movgt	r5, r7
 800b142:	bfdc      	itt	le
 800b144:	4612      	movle	r2, r2
 800b146:	464b      	movle	r3, r9
 800b148:	4620      	mov	r0, r4
 800b14a:	4629      	mov	r1, r5
 800b14c:	f002 f854 	bl	800d1f8 <__aeabi_ddiv>
 800b150:	b003      	add	sp, #12
 800b152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b156:	bf00      	nop

0800b158 <_mprec_log10>:
 800b158:	2817      	cmp	r0, #23
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	dd0c      	ble.n	800b17a <_mprec_log10+0x22>
 800b160:	2100      	movs	r1, #0
 800b162:	2000      	movs	r0, #0
 800b164:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800b168:	2300      	movs	r3, #0
 800b16a:	2200      	movs	r2, #0
 800b16c:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800b170:	f001 ff18 	bl	800cfa4 <__aeabi_dmul>
 800b174:	3c01      	subs	r4, #1
 800b176:	d1f7      	bne.n	800b168 <_mprec_log10+0x10>
 800b178:	bd10      	pop	{r4, pc}
 800b17a:	f64e 53e0 	movw	r3, #60896	; 0xede0
 800b17e:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b182:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800b186:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b18a:	bd10      	pop	{r4, pc}

0800b18c <__copybits>:
 800b18c:	b470      	push	{r4, r5, r6}
 800b18e:	3901      	subs	r1, #1
 800b190:	6915      	ldr	r5, [r2, #16]
 800b192:	f102 0314 	add.w	r3, r2, #20
 800b196:	114e      	asrs	r6, r1, #5
 800b198:	3601      	adds	r6, #1
 800b19a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b19e:	42ab      	cmp	r3, r5
 800b1a0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800b1a4:	d20c      	bcs.n	800b1c0 <__copybits+0x34>
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	f853 4b04 	ldr.w	r4, [r3], #4
 800b1ac:	429d      	cmp	r5, r3
 800b1ae:	f841 4b04 	str.w	r4, [r1], #4
 800b1b2:	d8f9      	bhi.n	800b1a8 <__copybits+0x1c>
 800b1b4:	1aab      	subs	r3, r5, r2
 800b1b6:	3b15      	subs	r3, #21
 800b1b8:	f023 0303 	bic.w	r3, r3, #3
 800b1bc:	3304      	adds	r3, #4
 800b1be:	4418      	add	r0, r3
 800b1c0:	4286      	cmp	r6, r0
 800b1c2:	d904      	bls.n	800b1ce <__copybits+0x42>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f840 3b04 	str.w	r3, [r0], #4
 800b1ca:	4286      	cmp	r6, r0
 800b1cc:	d8fb      	bhi.n	800b1c6 <__copybits+0x3a>
 800b1ce:	bc70      	pop	{r4, r5, r6}
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop

0800b1d4 <__any_on>:
 800b1d4:	6903      	ldr	r3, [r0, #16]
 800b1d6:	114a      	asrs	r2, r1, #5
 800b1d8:	b410      	push	{r4}
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	f100 0414 	add.w	r4, r0, #20
 800b1e0:	bfb8      	it	lt
 800b1e2:	eb04 0383 	addlt.w	r3, r4, r3, lsl #2
 800b1e6:	db13      	blt.n	800b210 <__any_on+0x3c>
 800b1e8:	dd10      	ble.n	800b20c <__any_on+0x38>
 800b1ea:	f011 011f 	ands.w	r1, r1, #31
 800b1ee:	d00d      	beq.n	800b20c <__any_on+0x38>
 800b1f0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800b1f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1f8:	fa20 f201 	lsr.w	r2, r0, r1
 800b1fc:	fa02 f101 	lsl.w	r1, r2, r1
 800b200:	4281      	cmp	r1, r0
 800b202:	d005      	beq.n	800b210 <__any_on+0x3c>
 800b204:	2001      	movs	r0, #1
 800b206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b210:	429c      	cmp	r4, r3
 800b212:	d20a      	bcs.n	800b22a <__any_on+0x56>
 800b214:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800b218:	3b04      	subs	r3, #4
 800b21a:	b122      	cbz	r2, 800b226 <__any_on+0x52>
 800b21c:	e7f2      	b.n	800b204 <__any_on+0x30>
 800b21e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b222:	2a00      	cmp	r2, #0
 800b224:	d1ee      	bne.n	800b204 <__any_on+0x30>
 800b226:	429c      	cmp	r4, r3
 800b228:	d3f9      	bcc.n	800b21e <__any_on+0x4a>
 800b22a:	2000      	movs	r0, #0
 800b22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop

0800b234 <__fpclassifyd>:
 800b234:	ea50 0301 	orrs.w	r3, r0, r1
 800b238:	d101      	bne.n	800b23e <__fpclassifyd+0xa>
 800b23a:	2002      	movs	r0, #2
 800b23c:	4770      	bx	lr
 800b23e:	f1d0 0301 	rsbs	r3, r0, #1
 800b242:	bf38      	it	cc
 800b244:	2300      	movcc	r3, #0
 800b246:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800b24a:	bf08      	it	eq
 800b24c:	2800      	cmpeq	r0, #0
 800b24e:	d0f4      	beq.n	800b23a <__fpclassifyd+0x6>
 800b250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b258:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800b25c:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800b260:	4290      	cmp	r0, r2
 800b262:	d801      	bhi.n	800b268 <__fpclassifyd+0x34>
 800b264:	2004      	movs	r0, #4
 800b266:	4770      	bx	lr
 800b268:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b26c:	d201      	bcs.n	800b272 <__fpclassifyd+0x3e>
 800b26e:	2003      	movs	r0, #3
 800b270:	4770      	bx	lr
 800b272:	2000      	movs	r0, #0
 800b274:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 800b278:	4281      	cmp	r1, r0
 800b27a:	bf14      	ite	ne
 800b27c:	2000      	movne	r0, #0
 800b27e:	f003 0001 	andeq.w	r0, r3, #1
 800b282:	4770      	bx	lr

0800b284 <_sbrk_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	f240 54f4 	movw	r4, #1524	; 0x5f4
 800b28a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800b28e:	4605      	mov	r5, r0
 800b290:	4608      	mov	r0, r1
 800b292:	2300      	movs	r3, #0
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	f7fb fe87 	bl	8006fa8 <_sbrk>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d000      	beq.n	800b2a0 <_sbrk_r+0x1c>
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0fb      	beq.n	800b29e <_sbrk_r+0x1a>
 800b2a6:	602b      	str	r3, [r5, #0]
 800b2a8:	bd38      	pop	{r3, r4, r5, pc}
 800b2aa:	bf00      	nop

0800b2ac <strcmp>:
 800b2ac:	ea40 0c01 	orr.w	ip, r0, r1
 800b2b0:	f01c 0f07 	tst.w	ip, #7
 800b2b4:	d127      	bne.n	800b306 <strcmp+0x5a>
 800b2b6:	f1bd 0d10 	subs.w	sp, sp, #16
 800b2ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b2be:	e9cd 6700 	strd	r6, r7, [sp]
 800b2c2:	f06f 0600 	mvn.w	r6, #0
 800b2c6:	f04f 0700 	mov.w	r7, #0
 800b2ca:	bf00      	nop
 800b2cc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800b2d0:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800b2d4:	42a2      	cmp	r2, r4
 800b2d6:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800b2da:	ea2c 0c02 	bic.w	ip, ip, r2
 800b2de:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b2e2:	bf08      	it	eq
 800b2e4:	f1bc 0f00 	cmpeq.w	ip, #0
 800b2e8:	f040 80e5 	bne.w	800b4b6 <strcmp+0x20a>
 800b2ec:	42ab      	cmp	r3, r5
 800b2ee:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b2f2:	ea2c 0c03 	bic.w	ip, ip, r3
 800b2f6:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b2fa:	bf08      	it	eq
 800b2fc:	f1bc 0f00 	cmpeq.w	ip, #0
 800b300:	f040 80d6 	bne.w	800b4b0 <strcmp+0x204>
 800b304:	e7e2      	b.n	800b2cc <strcmp+0x20>
 800b306:	f010 0c03 	ands.w	ip, r0, #3
 800b30a:	d021      	beq.n	800b350 <strcmp+0xa4>
 800b30c:	f020 0003 	bic.w	r0, r0, #3
 800b310:	f850 2b04 	ldr.w	r2, [r0], #4
 800b314:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 800b318:	d008      	beq.n	800b32c <strcmp+0x80>
 800b31a:	d20f      	bcs.n	800b33c <strcmp+0x90>
 800b31c:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b320:	fa5f f392 	uxtb.w	r3, r2, ror #8
 800b324:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b328:	d110      	bne.n	800b34c <strcmp+0xa0>
 800b32a:	b17b      	cbz	r3, 800b34c <strcmp+0xa0>
 800b32c:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b330:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 800b334:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b338:	d108      	bne.n	800b34c <strcmp+0xa0>
 800b33a:	b13b      	cbz	r3, 800b34c <strcmp+0xa0>
 800b33c:	f811 cb01 	ldrb.w	ip, [r1], #1
 800b340:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 800b344:	ebb3 0c0c 	subs.w	ip, r3, ip
 800b348:	d100      	bne.n	800b34c <strcmp+0xa0>
 800b34a:	b90b      	cbnz	r3, 800b350 <strcmp+0xa4>
 800b34c:	4660      	mov	r0, ip
 800b34e:	4770      	bx	lr
 800b350:	f1bd 0d10 	subs.w	sp, sp, #16
 800b354:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b358:	e9cd 6700 	strd	r6, r7, [sp]
 800b35c:	f06f 0600 	mvn.w	r6, #0
 800b360:	f04f 0700 	mov.w	r7, #0
 800b364:	f011 0c03 	ands.w	ip, r1, #3
 800b368:	d133      	bne.n	800b3d2 <strcmp+0x126>
 800b36a:	f010 0f04 	tst.w	r0, #4
 800b36e:	d00f      	beq.n	800b390 <strcmp+0xe4>
 800b370:	f850 2b04 	ldr.w	r2, [r0], #4
 800b374:	f851 4b04 	ldr.w	r4, [r1], #4
 800b378:	42a2      	cmp	r2, r4
 800b37a:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800b37e:	ea2c 0c02 	bic.w	ip, ip, r2
 800b382:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b386:	bf08      	it	eq
 800b388:	f1bc 0f00 	cmpeq.w	ip, #0
 800b38c:	f040 8093 	bne.w	800b4b6 <strcmp+0x20a>
 800b390:	f011 0f04 	tst.w	r1, #4
 800b394:	d099      	beq.n	800b2ca <strcmp+0x1e>
 800b396:	f851 5b04 	ldr.w	r5, [r1], #4
 800b39a:	bf00      	nop
 800b39c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800b3a0:	42aa      	cmp	r2, r5
 800b3a2:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800b3a6:	ea2c 0c02 	bic.w	ip, ip, r2
 800b3aa:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b3ae:	bf08      	it	eq
 800b3b0:	f1bc 0f00 	cmpeq.w	ip, #0
 800b3b4:	d179      	bne.n	800b4aa <strcmp+0x1fe>
 800b3b6:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b3c0:	ea2c 0c03 	bic.w	ip, ip, r3
 800b3c4:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b3c8:	bf08      	it	eq
 800b3ca:	f1bc 0f00 	cmpeq.w	ip, #0
 800b3ce:	d169      	bne.n	800b4a4 <strcmp+0x1f8>
 800b3d0:	e7e4      	b.n	800b39c <strcmp+0xf0>
 800b3d2:	f021 0103 	bic.w	r1, r1, #3
 800b3d6:	f1bc 0f02 	cmp.w	ip, #2
 800b3da:	d020      	beq.n	800b41e <strcmp+0x172>
 800b3dc:	da3f      	bge.n	800b45e <strcmp+0x1b2>
 800b3de:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3e2:	bf00      	nop
 800b3e4:	f850 3b04 	ldr.w	r3, [r0], #4
 800b3e8:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800b3ec:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b3f0:	ea2c 0c03 	bic.w	ip, ip, r3
 800b3f4:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b3f8:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 800b3fc:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 800b400:	bf08      	it	eq
 800b402:	42aa      	cmpeq	r2, r5
 800b404:	d151      	bne.n	800b4aa <strcmp+0x1fe>
 800b406:	f851 5b04 	ldr.w	r5, [r1], #4
 800b40a:	f1bc 0f00 	cmp.w	ip, #0
 800b40e:	ea82 0303 	eor.w	r3, r2, r3
 800b412:	ea4f 6205 	mov.w	r2, r5, lsl #24
 800b416:	bf08      	it	eq
 800b418:	4293      	cmpeq	r3, r2
 800b41a:	d140      	bne.n	800b49e <strcmp+0x1f2>
 800b41c:	e7e2      	b.n	800b3e4 <strcmp+0x138>
 800b41e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b422:	bf00      	nop
 800b424:	f850 3b04 	ldr.w	r3, [r0], #4
 800b428:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800b42c:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b430:	ea2c 0c03 	bic.w	ip, ip, r3
 800b434:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b438:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 800b43c:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 800b440:	bf08      	it	eq
 800b442:	42aa      	cmpeq	r2, r5
 800b444:	d131      	bne.n	800b4aa <strcmp+0x1fe>
 800b446:	f851 5b04 	ldr.w	r5, [r1], #4
 800b44a:	f1bc 0f00 	cmp.w	ip, #0
 800b44e:	ea82 0303 	eor.w	r3, r2, r3
 800b452:	ea4f 4205 	mov.w	r2, r5, lsl #16
 800b456:	bf08      	it	eq
 800b458:	4293      	cmpeq	r3, r2
 800b45a:	d120      	bne.n	800b49e <strcmp+0x1f2>
 800b45c:	e7e2      	b.n	800b424 <strcmp+0x178>
 800b45e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b462:	bf00      	nop
 800b464:	f850 3b04 	ldr.w	r3, [r0], #4
 800b468:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800b46c:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800b470:	ea2c 0c03 	bic.w	ip, ip, r3
 800b474:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
 800b478:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 800b47c:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 800b480:	bf08      	it	eq
 800b482:	42aa      	cmpeq	r2, r5
 800b484:	d111      	bne.n	800b4aa <strcmp+0x1fe>
 800b486:	f851 5b04 	ldr.w	r5, [r1], #4
 800b48a:	f1bc 0f00 	cmp.w	ip, #0
 800b48e:	ea82 0303 	eor.w	r3, r2, r3
 800b492:	ea4f 2205 	mov.w	r2, r5, lsl #8
 800b496:	bf08      	it	eq
 800b498:	4293      	cmpeq	r3, r2
 800b49a:	d100      	bne.n	800b49e <strcmp+0x1f2>
 800b49c:	e7e2      	b.n	800b464 <strcmp+0x1b8>
 800b49e:	ba19      	rev	r1, r3
 800b4a0:	ba12      	rev	r2, r2
 800b4a2:	e00a      	b.n	800b4ba <strcmp+0x20e>
 800b4a4:	ba19      	rev	r1, r3
 800b4a6:	ba22      	rev	r2, r4
 800b4a8:	e007      	b.n	800b4ba <strcmp+0x20e>
 800b4aa:	ba11      	rev	r1, r2
 800b4ac:	ba2a      	rev	r2, r5
 800b4ae:	e004      	b.n	800b4ba <strcmp+0x20e>
 800b4b0:	ba19      	rev	r1, r3
 800b4b2:	ba2a      	rev	r2, r5
 800b4b4:	e001      	b.n	800b4ba <strcmp+0x20e>
 800b4b6:	ba11      	rev	r1, r2
 800b4b8:	ba22      	rev	r2, r4
 800b4ba:	fa9c f08c 	rev.w	r0, ip
 800b4be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4c6:	f11d 0d10 	adds.w	sp, sp, #16
 800b4ca:	b138      	cbz	r0, 800b4dc <strcmp+0x230>
 800b4cc:	fab0 f080 	clz	r0, r0
 800b4d0:	f1c0 0018 	rsb	r0, r0, #24
 800b4d4:	fa21 f100 	lsr.w	r1, r1, r0
 800b4d8:	fa22 f200 	lsr.w	r2, r2, r0
 800b4dc:	2001      	movs	r0, #1
 800b4de:	4291      	cmp	r1, r2
 800b4e0:	bf98      	it	ls
 800b4e2:	4180      	sbcls	r0, r0
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop

0800b4e8 <__ssprint_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	4692      	mov	sl, r2
 800b4ee:	6894      	ldr	r4, [r2, #8]
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	6816      	ldr	r6, [r2, #0]
 800b4f8:	2c00      	cmp	r4, #0
 800b4fa:	d071      	beq.n	800b5e0 <__ssprint_r+0xf8>
 800b4fc:	f04f 0b00 	mov.w	fp, #0
 800b500:	6808      	ldr	r0, [r1, #0]
 800b502:	688b      	ldr	r3, [r1, #8]
 800b504:	465c      	mov	r4, fp
 800b506:	2c00      	cmp	r4, #0
 800b508:	d045      	beq.n	800b596 <__ssprint_r+0xae>
 800b50a:	429c      	cmp	r4, r3
 800b50c:	461f      	mov	r7, r3
 800b50e:	d348      	bcc.n	800b5a2 <__ssprint_r+0xba>
 800b510:	89ab      	ldrh	r3, [r5, #12]
 800b512:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b516:	bf08      	it	eq
 800b518:	46b9      	moveq	r9, r7
 800b51a:	d02c      	beq.n	800b576 <__ssprint_r+0x8e>
 800b51c:	696f      	ldr	r7, [r5, #20]
 800b51e:	1c62      	adds	r2, r4, #1
 800b520:	6929      	ldr	r1, [r5, #16]
 800b522:	eb07 0947 	add.w	r9, r7, r7, lsl #1
 800b526:	1a47      	subs	r7, r0, r1
 800b528:	443a      	add	r2, r7
 800b52a:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 800b52e:	ea4f 0969 	mov.w	r9, r9, asr #1
 800b532:	4591      	cmp	r9, r2
 800b534:	bf34      	ite	cc
 800b536:	4691      	movcc	r9, r2
 800b538:	464a      	movcs	r2, r9
 800b53a:	055b      	lsls	r3, r3, #21
 800b53c:	d534      	bpl.n	800b5a8 <__ssprint_r+0xc0>
 800b53e:	4611      	mov	r1, r2
 800b540:	4640      	mov	r0, r8
 800b542:	f7fe fe83 	bl	800a24c <_malloc_r>
 800b546:	2800      	cmp	r0, #0
 800b548:	d038      	beq.n	800b5bc <__ssprint_r+0xd4>
 800b54a:	6929      	ldr	r1, [r5, #16]
 800b54c:	463a      	mov	r2, r7
 800b54e:	9001      	str	r0, [sp, #4]
 800b550:	f7ff f97c 	bl	800a84c <memcpy>
 800b554:	89aa      	ldrh	r2, [r5, #12]
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b55c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b560:	81aa      	strh	r2, [r5, #12]
 800b562:	19d8      	adds	r0, r3, r7
 800b564:	f8c5 9014 	str.w	r9, [r5, #20]
 800b568:	ebc7 0709 	rsb	r7, r7, r9
 800b56c:	46a1      	mov	r9, r4
 800b56e:	60af      	str	r7, [r5, #8]
 800b570:	4627      	mov	r7, r4
 800b572:	612b      	str	r3, [r5, #16]
 800b574:	6028      	str	r0, [r5, #0]
 800b576:	464a      	mov	r2, r9
 800b578:	4659      	mov	r1, fp
 800b57a:	f000 fef5 	bl	800c368 <memmove>
 800b57e:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b582:	68ab      	ldr	r3, [r5, #8]
 800b584:	6828      	ldr	r0, [r5, #0]
 800b586:	1b14      	subs	r4, r2, r4
 800b588:	1bdb      	subs	r3, r3, r7
 800b58a:	60ab      	str	r3, [r5, #8]
 800b58c:	4448      	add	r0, r9
 800b58e:	6028      	str	r0, [r5, #0]
 800b590:	f8ca 4008 	str.w	r4, [sl, #8]
 800b594:	b324      	cbz	r4, 800b5e0 <__ssprint_r+0xf8>
 800b596:	f8d6 b000 	ldr.w	fp, [r6]
 800b59a:	3608      	adds	r6, #8
 800b59c:	f856 4c04 	ldr.w	r4, [r6, #-4]
 800b5a0:	e7b1      	b.n	800b506 <__ssprint_r+0x1e>
 800b5a2:	4627      	mov	r7, r4
 800b5a4:	46a1      	mov	r9, r4
 800b5a6:	e7e6      	b.n	800b576 <__ssprint_r+0x8e>
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	f000 ff95 	bl	800c4d8 <_realloc_r>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d1d6      	bne.n	800b562 <__ssprint_r+0x7a>
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	6929      	ldr	r1, [r5, #16]
 800b5b8:	f000 fe0a 	bl	800c1d0 <_free_r>
 800b5bc:	89aa      	ldrh	r2, [r5, #12]
 800b5be:	f04f 34ff 	mov.w	r4, #4294967295
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f8c8 3000 	str.w	r3, [r8]
 800b5ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	81aa      	strh	r2, [r5, #12]
 800b5d2:	f8ca 3008 	str.w	r3, [sl, #8]
 800b5d6:	f8ca 3004 	str.w	r3, [sl, #4]
 800b5da:	b003      	add	sp, #12
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f8ca 4004 	str.w	r4, [sl, #4]
 800b5e6:	b003      	add	sp, #12
 800b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5ec <_svfiprintf_r>:
 800b5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f0:	b0b3      	sub	sp, #204	; 0xcc
 800b5f2:	4692      	mov	sl, r2
 800b5f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5f6:	898b      	ldrh	r3, [r1, #12]
 800b5f8:	9108      	str	r1, [sp, #32]
 800b5fa:	061a      	lsls	r2, r3, #24
 800b5fc:	9005      	str	r0, [sp, #20]
 800b5fe:	d503      	bpl.n	800b608 <_svfiprintf_r+0x1c>
 800b600:	690b      	ldr	r3, [r1, #16]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 8522 	beq.w	800c04c <_svfiprintf_r+0xa60>
 800b608:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800b60c:	f64e 7508 	movw	r5, #61192	; 0xef08
 800b610:	4646      	mov	r6, r8
 800b612:	f6c0 0500 	movt	r5, #2048	; 0x800
 800b616:	f10d 0487 	add.w	r4, sp, #135	; 0x87
 800b61a:	2300      	movs	r3, #0
 800b61c:	950d      	str	r5, [sp, #52]	; 0x34
 800b61e:	f105 0710 	add.w	r7, r5, #16
 800b622:	930e      	str	r3, [sp, #56]	; 0x38
 800b624:	ebc4 0508 	rsb	r5, r4, r8
 800b628:	9401      	str	r4, [sp, #4]
 800b62a:	930a      	str	r3, [sp, #40]	; 0x28
 800b62c:	9511      	str	r5, [sp, #68]	; 0x44
 800b62e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b630:	9316      	str	r3, [sp, #88]	; 0x58
 800b632:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 800b636:	f89a 3000 	ldrb.w	r3, [sl]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bf18      	it	ne
 800b63e:	2b25      	cmpne	r3, #37	; 0x25
 800b640:	f000 83ca 	beq.w	800bdd8 <_svfiprintf_r+0x7ec>
 800b644:	f10a 0201 	add.w	r2, sl, #1
 800b648:	4614      	mov	r4, r2
 800b64a:	3201      	adds	r2, #1
 800b64c:	7823      	ldrb	r3, [r4, #0]
 800b64e:	2b25      	cmp	r3, #37	; 0x25
 800b650:	bf18      	it	ne
 800b652:	2b00      	cmpne	r3, #0
 800b654:	d1f8      	bne.n	800b648 <_svfiprintf_r+0x5c>
 800b656:	ebb4 050a 	subs.w	r5, r4, sl
 800b65a:	d010      	beq.n	800b67e <_svfiprintf_r+0x92>
 800b65c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b65e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b660:	3301      	adds	r3, #1
 800b662:	f8c6 a000 	str.w	sl, [r6]
 800b666:	2b07      	cmp	r3, #7
 800b668:	6075      	str	r5, [r6, #4]
 800b66a:	442a      	add	r2, r5
 800b66c:	9316      	str	r3, [sp, #88]	; 0x58
 800b66e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b670:	bfd8      	it	le
 800b672:	3608      	addle	r6, #8
 800b674:	f300 8436 	bgt.w	800bee4 <_svfiprintf_r+0x8f8>
 800b678:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b67a:	4428      	add	r0, r5
 800b67c:	900a      	str	r0, [sp, #40]	; 0x28
 800b67e:	7823      	ldrb	r3, [r4, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 83bc 	beq.w	800bdfe <_svfiprintf_r+0x812>
 800b686:	2300      	movs	r3, #0
 800b688:	f104 0a01 	add.w	sl, r4, #1
 800b68c:	4619      	mov	r1, r3
 800b68e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 800b692:	4608      	mov	r0, r1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	9302      	str	r3, [sp, #8]
 800b698:	7863      	ldrb	r3, [r4, #1]
 800b69a:	f04f 34ff 	mov.w	r4, #4294967295
 800b69e:	9403      	str	r4, [sp, #12]
 800b6a0:	f10a 0a01 	add.w	sl, sl, #1
 800b6a4:	f1a3 0220 	sub.w	r2, r3, #32
 800b6a8:	2a58      	cmp	r2, #88	; 0x58
 800b6aa:	f200 82b5 	bhi.w	800bc18 <_svfiprintf_r+0x62c>
 800b6ae:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b6b2:	02b302a3 	adcseq	r0, r3, #805306378	; 0x3000000a
 800b6b6:	02aa02b3 	adceq	r0, sl, #805306379	; 0x3000000b
 800b6ba:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6be:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6c2:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6c6:	02850059 	addeq	r0, r5, #89	; 0x59
 800b6ca:	006102b3 	strhteq	r0, [r1], #-35	; 0xffffffdd
 800b6ce:	02b3020c 	adcseq	r0, r3, #12, 4	; 0xc0000000
 800b6d2:	01f70205 	mvnseq	r0, r5, lsl #4
 800b6d6:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800b6da:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800b6de:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800b6e2:	01f701f7 	ldrsheq	r0, [r7, #23]!
 800b6e6:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6ea:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6ee:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6f2:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6f6:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b6fa:	02b301dc 	adcseq	r0, r3, #220, 2	; 0x37
 800b6fe:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b702:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b706:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b70a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b70e:	026902b3 	rsbeq	r0, r9, #805306379	; 0x3000000b
 800b712:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b716:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b71a:	022c02b3 	eoreq	r0, ip, #805306379	; 0x3000000b
 800b71e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b722:	02b30245 	adcseq	r0, r3, #1342177284	; 0x50000004
 800b726:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b72a:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b72e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b732:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b736:	01ca02b3 	strheq	r0, [sl, #35]	; 0x23
 800b73a:	02b301b0 	adcseq	r0, r3, #176, 2	; 0x2c
 800b73e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b742:	01b001a9 	lsrseq	r0, r9, #3
 800b746:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b74a:	02b30197 	adcseq	r0, r3, #-1073741787	; 0xc0000025
 800b74e:	01310185 	teqeq	r1, r5, lsl #3
 800b752:	017e0142 	cmneq	lr, r2, asr #2
 800b756:	015902b3 	ldrheq	r0, [r9, #-35]	; 0xffffffdd
 800b75a:	006802b3 	strhteq	r0, [r8], #-35	; 0xffffffdd
 800b75e:	02b302b3 	adcseq	r0, r3, #805306379	; 0x3000000b
 800b762:	9c0b0289 	sfmls	f0, 4, [fp], {137}	; 0x89
 800b766:	1d23      	adds	r3, r4, #4
 800b768:	6820      	ldr	r0, [r4, #0]
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f280 8400 	bge.w	800bf70 <_svfiprintf_r+0x984>
 800b770:	4240      	negs	r0, r0
 800b772:	930b      	str	r3, [sp, #44]	; 0x2c
 800b774:	9d02      	ldr	r5, [sp, #8]
 800b776:	f045 0504 	orr.w	r5, r5, #4
 800b77a:	9502      	str	r5, [sp, #8]
 800b77c:	f89a 3000 	ldrb.w	r3, [sl]
 800b780:	e78e      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800b782:	9d02      	ldr	r5, [sp, #8]
 800b784:	9004      	str	r0, [sp, #16]
 800b786:	06aa      	lsls	r2, r5, #26
 800b788:	f140 81c8 	bpl.w	800bb1c <_svfiprintf_r+0x530>
 800b78c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b78e:	2301      	movs	r3, #1
 800b790:	1de2      	adds	r2, r4, #7
 800b792:	f022 0207 	bic.w	r2, r2, #7
 800b796:	f102 0508 	add.w	r5, r2, #8
 800b79a:	950b      	str	r5, [sp, #44]	; 0x2c
 800b79c:	e9d2 4500 	ldrd	r4, r5, [r2]
 800b7a0:	f04f 0c00 	mov.w	ip, #0
 800b7a4:	f88d c04f 	strb.w	ip, [sp, #79]	; 0x4f
 800b7a8:	9a03      	ldr	r2, [sp, #12]
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	bfa2      	ittt	ge
 800b7ae:	9802      	ldrge	r0, [sp, #8]
 800b7b0:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 800b7b4:	9002      	strge	r0, [sp, #8]
 800b7b6:	ea54 0105 	orrs.w	r1, r4, r5
 800b7ba:	9803      	ldr	r0, [sp, #12]
 800b7bc:	bf0c      	ite	eq
 800b7be:	2200      	moveq	r2, #0
 800b7c0:	2201      	movne	r2, #1
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	bf18      	it	ne
 800b7c6:	f042 0201 	orrne.w	r2, r2, #1
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	f000 8306 	beq.w	800bddc <_svfiprintf_r+0x7f0>
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	f000 83ab 	beq.w	800bf2c <_svfiprintf_r+0x940>
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800b7dc:	d179      	bne.n	800b8d2 <_svfiprintf_r+0x2e6>
 800b7de:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800b7e2:	f004 010f 	and.w	r1, r4, #15
 800b7e6:	0923      	lsrs	r3, r4, #4
 800b7e8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800b7ec:	0928      	lsrs	r0, r5, #4
 800b7ee:	f81b 1001 	ldrb.w	r1, [fp, r1]
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	4691      	mov	r9, r2
 800b7f8:	ea54 0005 	orrs.w	r0, r4, r5
 800b7fc:	f102 32ff 	add.w	r2, r2, #4294967295
 800b800:	f889 1000 	strb.w	r1, [r9]
 800b804:	d1ed      	bne.n	800b7e2 <_svfiprintf_r+0x1f6>
 800b806:	ebc9 0308 	rsb	r3, r9, r8
 800b80a:	9306      	str	r3, [sp, #24]
 800b80c:	9c06      	ldr	r4, [sp, #24]
 800b80e:	9d03      	ldr	r5, [sp, #12]
 800b810:	42ac      	cmp	r4, r5
 800b812:	bfb8      	it	lt
 800b814:	462c      	movlt	r4, r5
 800b816:	f1bc 0f00 	cmp.w	ip, #0
 800b81a:	d000      	beq.n	800b81e <_svfiprintf_r+0x232>
 800b81c:	3401      	adds	r4, #1
 800b81e:	9b02      	ldr	r3, [sp, #8]
 800b820:	9d02      	ldr	r5, [sp, #8]
 800b822:	f013 0302 	ands.w	r3, r3, #2
 800b826:	9309      	str	r3, [sp, #36]	; 0x24
 800b828:	bf18      	it	ne
 800b82a:	3402      	addne	r4, #2
 800b82c:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 800b830:	950c      	str	r5, [sp, #48]	; 0x30
 800b832:	f040 8201 	bne.w	800bc38 <_svfiprintf_r+0x64c>
 800b836:	9804      	ldr	r0, [sp, #16]
 800b838:	1b05      	subs	r5, r0, r4
 800b83a:	2d00      	cmp	r5, #0
 800b83c:	f340 81fc 	ble.w	800bc38 <_svfiprintf_r+0x64c>
 800b840:	2d10      	cmp	r5, #16
 800b842:	f64e 7308 	movw	r3, #61192	; 0xef08
 800b846:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b848:	f340 840d 	ble.w	800c066 <_svfiprintf_r+0xa7a>
 800b84c:	f6c0 0300 	movt	r3, #2048	; 0x800
 800b850:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b854:	9410      	str	r4, [sp, #64]	; 0x40
 800b856:	f04f 0b10 	mov.w	fp, #16
 800b85a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b862:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b864:	e002      	b.n	800b86c <_svfiprintf_r+0x280>
 800b866:	3d10      	subs	r5, #16
 800b868:	2d10      	cmp	r5, #16
 800b86a:	dd17      	ble.n	800b89c <_svfiprintf_r+0x2b0>
 800b86c:	3201      	adds	r2, #1
 800b86e:	3110      	adds	r1, #16
 800b870:	2a07      	cmp	r2, #7
 800b872:	e886 0810 	stmia.w	r6, {r4, fp}
 800b876:	9216      	str	r2, [sp, #88]	; 0x58
 800b878:	f106 0608 	add.w	r6, r6, #8
 800b87c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b87e:	ddf2      	ble.n	800b866 <_svfiprintf_r+0x27a>
 800b880:	9805      	ldr	r0, [sp, #20]
 800b882:	4649      	mov	r1, r9
 800b884:	aa15      	add	r2, sp, #84	; 0x54
 800b886:	4646      	mov	r6, r8
 800b888:	f7ff fe2e 	bl	800b4e8 <__ssprint_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f040 82bd 	bne.w	800be0c <_svfiprintf_r+0x820>
 800b892:	3d10      	subs	r5, #16
 800b894:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b896:	2d10      	cmp	r5, #16
 800b898:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b89a:	dce7      	bgt.n	800b86c <_svfiprintf_r+0x280>
 800b89c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800b8a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b8a2:	3201      	adds	r2, #1
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	2a07      	cmp	r2, #7
 800b8a8:	4429      	add	r1, r5
 800b8aa:	9216      	str	r2, [sp, #88]	; 0x58
 800b8ac:	e886 0028 	stmia.w	r6, {r3, r5}
 800b8b0:	bfd8      	it	le
 800b8b2:	3608      	addle	r6, #8
 800b8b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b8b6:	f340 81c1 	ble.w	800bc3c <_svfiprintf_r+0x650>
 800b8ba:	9805      	ldr	r0, [sp, #20]
 800b8bc:	aa15      	add	r2, sp, #84	; 0x54
 800b8be:	9908      	ldr	r1, [sp, #32]
 800b8c0:	f7ff fe12 	bl	800b4e8 <__ssprint_r>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	f040 82a1 	bne.w	800be0c <_svfiprintf_r+0x820>
 800b8ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b8cc:	4646      	mov	r6, r8
 800b8ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b8d0:	e1b4      	b.n	800bc3c <_svfiprintf_r+0x650>
 800b8d2:	08e3      	lsrs	r3, r4, #3
 800b8d4:	08e9      	lsrs	r1, r5, #3
 800b8d6:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 800b8da:	4691      	mov	r9, r2
 800b8dc:	460d      	mov	r5, r1
 800b8de:	f004 0207 	and.w	r2, r4, #7
 800b8e2:	461c      	mov	r4, r3
 800b8e4:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800b8e8:	ea54 0105 	orrs.w	r1, r4, r5
 800b8ec:	f109 32ff 	add.w	r2, r9, #4294967295
 800b8f0:	f889 3000 	strb.w	r3, [r9]
 800b8f4:	d1ed      	bne.n	800b8d2 <_svfiprintf_r+0x2e6>
 800b8f6:	9c02      	ldr	r4, [sp, #8]
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	07e0      	lsls	r0, r4, #31
 800b8fc:	f140 8347 	bpl.w	800bf8e <_svfiprintf_r+0x9a2>
 800b900:	2b30      	cmp	r3, #48	; 0x30
 800b902:	d080      	beq.n	800b806 <_svfiprintf_r+0x21a>
 800b904:	2330      	movs	r3, #48	; 0x30
 800b906:	ebc2 0408 	rsb	r4, r2, r8
 800b90a:	4691      	mov	r9, r2
 800b90c:	9406      	str	r4, [sp, #24]
 800b90e:	f801 3c01 	strb.w	r3, [r1, #-1]
 800b912:	e77b      	b.n	800b80c <_svfiprintf_r+0x220>
 800b914:	9d02      	ldr	r5, [sp, #8]
 800b916:	9004      	str	r0, [sp, #16]
 800b918:	f015 0320 	ands.w	r3, r5, #32
 800b91c:	f000 813c 	beq.w	800bb98 <_svfiprintf_r+0x5ac>
 800b920:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b922:	2300      	movs	r3, #0
 800b924:	1de2      	adds	r2, r4, #7
 800b926:	f022 0207 	bic.w	r2, r2, #7
 800b92a:	f102 0508 	add.w	r5, r2, #8
 800b92e:	950b      	str	r5, [sp, #44]	; 0x2c
 800b930:	e9d2 4500 	ldrd	r4, r5, [r2]
 800b934:	e734      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800b936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b938:	9d02      	ldr	r5, [sp, #8]
 800b93a:	9004      	str	r0, [sp, #16]
 800b93c:	f045 0502 	orr.w	r5, r5, #2
 800b940:	9502      	str	r5, [sp, #8]
 800b942:	1d1d      	adds	r5, r3, #4
 800b944:	950b      	str	r5, [sp, #44]	; 0x2c
 800b946:	f24f 15e4 	movw	r5, #61924	; 0xf1e4
 800b94a:	681c      	ldr	r4, [r3, #0]
 800b94c:	f6c0 0500 	movt	r5, #2048	; 0x800
 800b950:	2330      	movs	r3, #48	; 0x30
 800b952:	950e      	str	r5, [sp, #56]	; 0x38
 800b954:	2500      	movs	r5, #0
 800b956:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800b95a:	2378      	movs	r3, #120	; 0x78
 800b95c:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 800b960:	2302      	movs	r3, #2
 800b962:	e71d      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800b964:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b966:	9004      	str	r0, [sp, #16]
 800b968:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b96a:	f8d4 9000 	ldr.w	r9, [r4]
 800b96e:	2400      	movs	r4, #0
 800b970:	1d05      	adds	r5, r0, #4
 800b972:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
 800b976:	f1b9 0f00 	cmp.w	r9, #0
 800b97a:	f000 8379 	beq.w	800c070 <_svfiprintf_r+0xa84>
 800b97e:	9803      	ldr	r0, [sp, #12]
 800b980:	2800      	cmp	r0, #0
 800b982:	4648      	mov	r0, r9
 800b984:	f2c0 834b 	blt.w	800c01e <_svfiprintf_r+0xa32>
 800b988:	4621      	mov	r1, r4
 800b98a:	9a03      	ldr	r2, [sp, #12]
 800b98c:	f7fe ff16 	bl	800a7bc <memchr>
 800b990:	2800      	cmp	r0, #0
 800b992:	f000 837a 	beq.w	800c08a <_svfiprintf_r+0xa9e>
 800b996:	950b      	str	r5, [sp, #44]	; 0x2c
 800b998:	ebc9 0000 	rsb	r0, r9, r0
 800b99c:	9d03      	ldr	r5, [sp, #12]
 800b99e:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800b9a2:	42a8      	cmp	r0, r5
 800b9a4:	bfb8      	it	lt
 800b9a6:	4605      	movlt	r5, r0
 800b9a8:	9403      	str	r4, [sp, #12]
 800b9aa:	9506      	str	r5, [sp, #24]
 800b9ac:	e72e      	b.n	800b80c <_svfiprintf_r+0x220>
 800b9ae:	9c02      	ldr	r4, [sp, #8]
 800b9b0:	f044 0420 	orr.w	r4, r4, #32
 800b9b4:	9402      	str	r4, [sp, #8]
 800b9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ba:	e671      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800b9bc:	9c02      	ldr	r4, [sp, #8]
 800b9be:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800b9c2:	06a0      	lsls	r0, r4, #26
 800b9c4:	f100 831e 	bmi.w	800c004 <_svfiprintf_r+0xa18>
 800b9c8:	9c02      	ldr	r4, [sp, #8]
 800b9ca:	06e1      	lsls	r1, r4, #27
 800b9cc:	f140 8330 	bpl.w	800c030 <_svfiprintf_r+0xa44>
 800b9d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b9d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b9d4:	3504      	adds	r5, #4
 800b9d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b9da:	950b      	str	r5, [sp, #44]	; 0x2c
 800b9dc:	601c      	str	r4, [r3, #0]
 800b9de:	e62a      	b.n	800b636 <_svfiprintf_r+0x4a>
 800b9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e4:	4652      	mov	r2, sl
 800b9e6:	2b6c      	cmp	r3, #108	; 0x6c
 800b9e8:	bf05      	ittet	eq
 800b9ea:	f10a 0a01 	addeq.w	sl, sl, #1
 800b9ee:	9c02      	ldreq	r4, [sp, #8]
 800b9f0:	9d02      	ldrne	r5, [sp, #8]
 800b9f2:	f044 0420 	orreq.w	r4, r4, #32
 800b9f6:	bf0b      	itete	eq
 800b9f8:	7853      	ldrbeq	r3, [r2, #1]
 800b9fa:	f045 0510 	orrne.w	r5, r5, #16
 800b9fe:	9402      	streq	r4, [sp, #8]
 800ba00:	9502      	strne	r5, [sp, #8]
 800ba02:	e64d      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800ba04:	9d02      	ldr	r5, [sp, #8]
 800ba06:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800ba0a:	9502      	str	r5, [sp, #8]
 800ba0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba10:	e646      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800ba12:	9d02      	ldr	r5, [sp, #8]
 800ba14:	9004      	str	r0, [sp, #16]
 800ba16:	06ab      	lsls	r3, r5, #26
 800ba18:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800ba1c:	d52f      	bpl.n	800ba7e <_svfiprintf_r+0x492>
 800ba1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ba20:	1de3      	adds	r3, r4, #7
 800ba22:	f023 0307 	bic.w	r3, r3, #7
 800ba26:	f103 0508 	add.w	r5, r3, #8
 800ba2a:	950b      	str	r5, [sp, #44]	; 0x2c
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	4614      	mov	r4, r2
 800ba32:	461d      	mov	r5, r3
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	f173 0000 	sbcs.w	r0, r3, #0
 800ba3a:	f2c0 82c8 	blt.w	800bfce <_svfiprintf_r+0x9e2>
 800ba3e:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800ba42:	2301      	movs	r3, #1
 800ba44:	e6b0      	b.n	800b7a8 <_svfiprintf_r+0x1bc>
 800ba46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba48:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800ba4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ba4e:	2401      	movs	r4, #1
 800ba50:	2200      	movs	r2, #0
 800ba52:	9004      	str	r0, [sp, #16]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3504      	adds	r5, #4
 800ba58:	9406      	str	r4, [sp, #24]
 800ba5a:	950b      	str	r5, [sp, #44]	; 0x2c
 800ba5c:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 800ba60:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800ba64:	2500      	movs	r5, #0
 800ba66:	9503      	str	r5, [sp, #12]
 800ba68:	e6d9      	b.n	800b81e <_svfiprintf_r+0x232>
 800ba6a:	9c02      	ldr	r4, [sp, #8]
 800ba6c:	9004      	str	r0, [sp, #16]
 800ba6e:	f044 0410 	orr.w	r4, r4, #16
 800ba72:	9402      	str	r4, [sp, #8]
 800ba74:	9d02      	ldr	r5, [sp, #8]
 800ba76:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800ba7a:	06ab      	lsls	r3, r5, #26
 800ba7c:	d4cf      	bmi.n	800ba1e <_svfiprintf_r+0x432>
 800ba7e:	9c02      	ldr	r4, [sp, #8]
 800ba80:	06e5      	lsls	r5, r4, #27
 800ba82:	f100 8297 	bmi.w	800bfb4 <_svfiprintf_r+0x9c8>
 800ba86:	9c02      	ldr	r4, [sp, #8]
 800ba88:	0664      	lsls	r4, r4, #25
 800ba8a:	f140 8293 	bpl.w	800bfb4 <_svfiprintf_r+0x9c8>
 800ba8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ba90:	3004      	adds	r0, #4
 800ba92:	f930 4c04 	ldrsh.w	r4, [r0, #-4]
 800ba96:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba98:	4622      	mov	r2, r4
 800ba9a:	17e5      	asrs	r5, r4, #31
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	e7c9      	b.n	800ba34 <_svfiprintf_r+0x448>
 800baa0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800baa4:	2000      	movs	r0, #0
 800baa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800baaa:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800baae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800bab2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bab6:	2a09      	cmp	r2, #9
 800bab8:	d9f5      	bls.n	800baa6 <_svfiprintf_r+0x4ba>
 800baba:	e5f3      	b.n	800b6a4 <_svfiprintf_r+0xb8>
 800babc:	9c02      	ldr	r4, [sp, #8]
 800babe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800bac2:	9402      	str	r4, [sp, #8]
 800bac4:	f89a 3000 	ldrb.w	r3, [sl]
 800bac8:	e5ea      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800baca:	f89a 3000 	ldrb.w	r3, [sl]
 800bace:	f10a 0501 	add.w	r5, sl, #1
 800bad2:	2b2a      	cmp	r3, #42	; 0x2a
 800bad4:	f000 82e1 	beq.w	800c09a <_svfiprintf_r+0xaae>
 800bad8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800badc:	2a09      	cmp	r2, #9
 800bade:	bf82      	ittt	hi
 800bae0:	2400      	movhi	r4, #0
 800bae2:	46aa      	movhi	sl, r5
 800bae4:	9403      	strhi	r4, [sp, #12]
 800bae6:	f63f addd 	bhi.w	800b6a4 <_svfiprintf_r+0xb8>
 800baea:	2400      	movs	r4, #0
 800baec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800baf0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800baf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800baf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bafc:	2a09      	cmp	r2, #9
 800bafe:	d9f5      	bls.n	800baec <_svfiprintf_r+0x500>
 800bb00:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800bb04:	46aa      	mov	sl, r5
 800bb06:	9403      	str	r4, [sp, #12]
 800bb08:	e5cc      	b.n	800b6a4 <_svfiprintf_r+0xb8>
 800bb0a:	9c02      	ldr	r4, [sp, #8]
 800bb0c:	9004      	str	r0, [sp, #16]
 800bb0e:	f044 0410 	orr.w	r4, r4, #16
 800bb12:	9402      	str	r4, [sp, #8]
 800bb14:	9d02      	ldr	r5, [sp, #8]
 800bb16:	06aa      	lsls	r2, r5, #26
 800bb18:	f53f ae38 	bmi.w	800b78c <_svfiprintf_r+0x1a0>
 800bb1c:	9c02      	ldr	r4, [sp, #8]
 800bb1e:	06e3      	lsls	r3, r4, #27
 800bb20:	f100 8267 	bmi.w	800bff2 <_svfiprintf_r+0xa06>
 800bb24:	9c02      	ldr	r4, [sp, #8]
 800bb26:	0665      	lsls	r5, r4, #25
 800bb28:	f140 8263 	bpl.w	800bff2 <_svfiprintf_r+0xa06>
 800bb2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb2e:	2500      	movs	r5, #0
 800bb30:	2301      	movs	r3, #1
 800bb32:	3004      	adds	r0, #4
 800bb34:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800bb38:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb3a:	e631      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800bb3c:	9d02      	ldr	r5, [sp, #8]
 800bb3e:	f24f 14d0 	movw	r4, #61904	; 0xf1d0
 800bb42:	f6c0 0400 	movt	r4, #2048	; 0x800
 800bb46:	940e      	str	r4, [sp, #56]	; 0x38
 800bb48:	06ac      	lsls	r4, r5, #26
 800bb4a:	9004      	str	r0, [sp, #16]
 800bb4c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800bb50:	d543      	bpl.n	800bbda <_svfiprintf_r+0x5ee>
 800bb52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bb54:	1de2      	adds	r2, r4, #7
 800bb56:	f022 0207 	bic.w	r2, r2, #7
 800bb5a:	f102 0508 	add.w	r5, r2, #8
 800bb5e:	950b      	str	r5, [sp, #44]	; 0x2c
 800bb60:	e9d2 4500 	ldrd	r4, r5, [r2]
 800bb64:	9802      	ldr	r0, [sp, #8]
 800bb66:	07c2      	lsls	r2, r0, #31
 800bb68:	d554      	bpl.n	800bc14 <_svfiprintf_r+0x628>
 800bb6a:	ea54 0105 	orrs.w	r1, r4, r5
 800bb6e:	d051      	beq.n	800bc14 <_svfiprintf_r+0x628>
 800bb70:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 800bb74:	f040 0002 	orr.w	r0, r0, #2
 800bb78:	2330      	movs	r3, #48	; 0x30
 800bb7a:	9002      	str	r0, [sp, #8]
 800bb7c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800bb80:	2302      	movs	r3, #2
 800bb82:	e60d      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800bb84:	9c02      	ldr	r4, [sp, #8]
 800bb86:	9004      	str	r0, [sp, #16]
 800bb88:	f044 0410 	orr.w	r4, r4, #16
 800bb8c:	9402      	str	r4, [sp, #8]
 800bb8e:	9d02      	ldr	r5, [sp, #8]
 800bb90:	f015 0320 	ands.w	r3, r5, #32
 800bb94:	f47f aec4 	bne.w	800b920 <_svfiprintf_r+0x334>
 800bb98:	9c02      	ldr	r4, [sp, #8]
 800bb9a:	f014 0210 	ands.w	r2, r4, #16
 800bb9e:	f040 8220 	bne.w	800bfe2 <_svfiprintf_r+0x9f6>
 800bba2:	9c02      	ldr	r4, [sp, #8]
 800bba4:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800bba8:	f000 821b 	beq.w	800bfe2 <_svfiprintf_r+0x9f6>
 800bbac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bbae:	4613      	mov	r3, r2
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	3004      	adds	r0, #4
 800bbb4:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800bbb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbba:	e5f1      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800bbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc0:	212b      	movs	r1, #43	; 0x2b
 800bbc2:	e56d      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800bbc4:	9d02      	ldr	r5, [sp, #8]
 800bbc6:	f24f 14e4 	movw	r4, #61924	; 0xf1e4
 800bbca:	f6c0 0400 	movt	r4, #2048	; 0x800
 800bbce:	940e      	str	r4, [sp, #56]	; 0x38
 800bbd0:	06ac      	lsls	r4, r5, #26
 800bbd2:	9004      	str	r0, [sp, #16]
 800bbd4:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800bbd8:	d4bb      	bmi.n	800bb52 <_svfiprintf_r+0x566>
 800bbda:	9c02      	ldr	r4, [sp, #8]
 800bbdc:	06e0      	lsls	r0, r4, #27
 800bbde:	f100 81e2 	bmi.w	800bfa6 <_svfiprintf_r+0x9ba>
 800bbe2:	9c02      	ldr	r4, [sp, #8]
 800bbe4:	0661      	lsls	r1, r4, #25
 800bbe6:	f140 81de 	bpl.w	800bfa6 <_svfiprintf_r+0x9ba>
 800bbea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bbec:	2500      	movs	r5, #0
 800bbee:	3004      	adds	r0, #4
 800bbf0:	f830 4c04 	ldrh.w	r4, [r0, #-4]
 800bbf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbf6:	e7b5      	b.n	800bb64 <_svfiprintf_r+0x578>
 800bbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	f47f ad4f 	bne.w	800b6a0 <_svfiprintf_r+0xb4>
 800bc02:	2120      	movs	r1, #32
 800bc04:	e54c      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800bc06:	9d02      	ldr	r5, [sp, #8]
 800bc08:	f045 0501 	orr.w	r5, r5, #1
 800bc0c:	9502      	str	r5, [sp, #8]
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	e545      	b.n	800b6a0 <_svfiprintf_r+0xb4>
 800bc14:	2302      	movs	r3, #2
 800bc16:	e5c3      	b.n	800b7a0 <_svfiprintf_r+0x1b4>
 800bc18:	9004      	str	r0, [sp, #16]
 800bc1a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80ed 	beq.w	800bdfe <_svfiprintf_r+0x812>
 800bc24:	2401      	movs	r4, #1
 800bc26:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800bc2a:	9406      	str	r4, [sp, #24]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800bc32:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 800bc36:	e715      	b.n	800ba64 <_svfiprintf_r+0x478>
 800bc38:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bc3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bc3c:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800bc40:	b173      	cbz	r3, 800bc60 <_svfiprintf_r+0x674>
 800bc42:	3201      	adds	r2, #1
 800bc44:	3101      	adds	r1, #1
 800bc46:	2a07      	cmp	r2, #7
 800bc48:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
 800bc4c:	f04f 0301 	mov.w	r3, #1
 800bc50:	9216      	str	r2, [sp, #88]	; 0x58
 800bc52:	e886 0009 	stmia.w	r6, {r0, r3}
 800bc56:	bfd8      	it	le
 800bc58:	3608      	addle	r6, #8
 800bc5a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc5c:	f300 8157 	bgt.w	800bf0e <_svfiprintf_r+0x922>
 800bc60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bc62:	b16d      	cbz	r5, 800bc80 <_svfiprintf_r+0x694>
 800bc64:	3201      	adds	r2, #1
 800bc66:	3102      	adds	r1, #2
 800bc68:	2a07      	cmp	r2, #7
 800bc6a:	a814      	add	r0, sp, #80	; 0x50
 800bc6c:	f04f 0302 	mov.w	r3, #2
 800bc70:	9216      	str	r2, [sp, #88]	; 0x58
 800bc72:	e886 0009 	stmia.w	r6, {r0, r3}
 800bc76:	bfd8      	it	le
 800bc78:	3608      	addle	r6, #8
 800bc7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc7c:	f300 813c 	bgt.w	800bef8 <_svfiprintf_r+0x90c>
 800bc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc82:	2b80      	cmp	r3, #128	; 0x80
 800bc84:	f000 80cd 	beq.w	800be22 <_svfiprintf_r+0x836>
 800bc88:	9803      	ldr	r0, [sp, #12]
 800bc8a:	9b06      	ldr	r3, [sp, #24]
 800bc8c:	1ac5      	subs	r5, r0, r3
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	dd44      	ble.n	800bd1c <_svfiprintf_r+0x730>
 800bc92:	4ba5      	ldr	r3, [pc, #660]	; (800bf28 <_svfiprintf_r+0x93c>)
 800bc94:	2d10      	cmp	r5, #16
 800bc96:	9307      	str	r3, [sp, #28]
 800bc98:	dd2b      	ble.n	800bcf2 <_svfiprintf_r+0x706>
 800bc9a:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc9e:	f04f 0b10 	mov.w	fp, #16
 800bca2:	9409      	str	r4, [sp, #36]	; 0x24
 800bca4:	46a9      	mov	r9, r5
 800bca6:	9c05      	ldr	r4, [sp, #20]
 800bca8:	9d08      	ldr	r5, [sp, #32]
 800bcaa:	e004      	b.n	800bcb6 <_svfiprintf_r+0x6ca>
 800bcac:	f1a9 0910 	sub.w	r9, r9, #16
 800bcb0:	f1b9 0f10 	cmp.w	r9, #16
 800bcb4:	dd19      	ble.n	800bcea <_svfiprintf_r+0x6fe>
 800bcb6:	3201      	adds	r2, #1
 800bcb8:	3110      	adds	r1, #16
 800bcba:	2a07      	cmp	r2, #7
 800bcbc:	e886 0880 	stmia.w	r6, {r7, fp}
 800bcc0:	9216      	str	r2, [sp, #88]	; 0x58
 800bcc2:	f106 0608 	add.w	r6, r6, #8
 800bcc6:	9117      	str	r1, [sp, #92]	; 0x5c
 800bcc8:	ddf0      	ble.n	800bcac <_svfiprintf_r+0x6c0>
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	aa15      	add	r2, sp, #84	; 0x54
 800bcd0:	4646      	mov	r6, r8
 800bcd2:	f7ff fc09 	bl	800b4e8 <__ssprint_r>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	f040 8098 	bne.w	800be0c <_svfiprintf_r+0x820>
 800bcdc:	f1a9 0910 	sub.w	r9, r9, #16
 800bce0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bce2:	f1b9 0f10 	cmp.w	r9, #16
 800bce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bce8:	dce5      	bgt.n	800bcb6 <_svfiprintf_r+0x6ca>
 800bcea:	464d      	mov	r5, r9
 800bcec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bcee:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	9b07      	ldr	r3, [sp, #28]
 800bcf6:	2a07      	cmp	r2, #7
 800bcf8:	4429      	add	r1, r5
 800bcfa:	9216      	str	r2, [sp, #88]	; 0x58
 800bcfc:	e886 0028 	stmia.w	r6, {r3, r5}
 800bd00:	bfd8      	it	le
 800bd02:	3608      	addle	r6, #8
 800bd04:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd06:	dd09      	ble.n	800bd1c <_svfiprintf_r+0x730>
 800bd08:	9805      	ldr	r0, [sp, #20]
 800bd0a:	aa15      	add	r2, sp, #84	; 0x54
 800bd0c:	9908      	ldr	r1, [sp, #32]
 800bd0e:	f7ff fbeb 	bl	800b4e8 <__ssprint_r>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d17a      	bne.n	800be0c <_svfiprintf_r+0x820>
 800bd16:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bd18:	4646      	mov	r6, r8
 800bd1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd1c:	3201      	adds	r2, #1
 800bd1e:	9d06      	ldr	r5, [sp, #24]
 800bd20:	2a07      	cmp	r2, #7
 800bd22:	9216      	str	r2, [sp, #88]	; 0x58
 800bd24:	4429      	add	r1, r5
 800bd26:	f8c6 9000 	str.w	r9, [r6]
 800bd2a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd2c:	bfd8      	it	le
 800bd2e:	f106 0308 	addle.w	r3, r6, #8
 800bd32:	6075      	str	r5, [r6, #4]
 800bd34:	f300 80c0 	bgt.w	800beb8 <_svfiprintf_r+0x8cc>
 800bd38:	9d02      	ldr	r5, [sp, #8]
 800bd3a:	076a      	lsls	r2, r5, #29
 800bd3c:	d538      	bpl.n	800bdb0 <_svfiprintf_r+0x7c4>
 800bd3e:	9804      	ldr	r0, [sp, #16]
 800bd40:	1b05      	subs	r5, r0, r4
 800bd42:	2d00      	cmp	r5, #0
 800bd44:	dd34      	ble.n	800bdb0 <_svfiprintf_r+0x7c4>
 800bd46:	2d10      	cmp	r5, #16
 800bd48:	f64e 7008 	movw	r0, #61192	; 0xef08
 800bd4c:	f6c0 0000 	movt	r0, #2048	; 0x800
 800bd50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd52:	9007      	str	r0, [sp, #28]
 800bd54:	dd22      	ble.n	800bd9c <_svfiprintf_r+0x7b0>
 800bd56:	9402      	str	r4, [sp, #8]
 800bd58:	2610      	movs	r6, #16
 800bd5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bd5e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bd62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bd64:	e002      	b.n	800bd6c <_svfiprintf_r+0x780>
 800bd66:	3d10      	subs	r5, #16
 800bd68:	2d10      	cmp	r5, #16
 800bd6a:	dd16      	ble.n	800bd9a <_svfiprintf_r+0x7ae>
 800bd6c:	3201      	adds	r2, #1
 800bd6e:	3110      	adds	r1, #16
 800bd70:	2a07      	cmp	r2, #7
 800bd72:	e883 0050 	stmia.w	r3, {r4, r6}
 800bd76:	9216      	str	r2, [sp, #88]	; 0x58
 800bd78:	f103 0308 	add.w	r3, r3, #8
 800bd7c:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd7e:	ddf2      	ble.n	800bd66 <_svfiprintf_r+0x77a>
 800bd80:	4648      	mov	r0, r9
 800bd82:	4659      	mov	r1, fp
 800bd84:	aa15      	add	r2, sp, #84	; 0x54
 800bd86:	f7ff fbaf 	bl	800b4e8 <__ssprint_r>
 800bd8a:	4643      	mov	r3, r8
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d13d      	bne.n	800be0c <_svfiprintf_r+0x820>
 800bd90:	3d10      	subs	r5, #16
 800bd92:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bd94:	2d10      	cmp	r5, #16
 800bd96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd98:	dce8      	bgt.n	800bd6c <_svfiprintf_r+0x780>
 800bd9a:	9c02      	ldr	r4, [sp, #8]
 800bd9c:	3201      	adds	r2, #1
 800bd9e:	9807      	ldr	r0, [sp, #28]
 800bda0:	2a07      	cmp	r2, #7
 800bda2:	4429      	add	r1, r5
 800bda4:	9216      	str	r2, [sp, #88]	; 0x58
 800bda6:	9117      	str	r1, [sp, #92]	; 0x5c
 800bda8:	e883 0021 	stmia.w	r3, {r0, r5}
 800bdac:	f300 80e5 	bgt.w	800bf7a <_svfiprintf_r+0x98e>
 800bdb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bdb2:	9804      	ldr	r0, [sp, #16]
 800bdb4:	4284      	cmp	r4, r0
 800bdb6:	bfac      	ite	ge
 800bdb8:	192d      	addge	r5, r5, r4
 800bdba:	182d      	addlt	r5, r5, r0
 800bdbc:	950a      	str	r5, [sp, #40]	; 0x28
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	f040 8084 	bne.w	800becc <_svfiprintf_r+0x8e0>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9316      	str	r3, [sp, #88]	; 0x58
 800bdc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdcc:	4646      	mov	r6, r8
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bf18      	it	ne
 800bdd2:	2b25      	cmpne	r3, #37	; 0x25
 800bdd4:	f47f ac36 	bne.w	800b644 <_svfiprintf_r+0x58>
 800bdd8:	4654      	mov	r4, sl
 800bdda:	e450      	b.n	800b67e <_svfiprintf_r+0x92>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d17e      	bne.n	800bede <_svfiprintf_r+0x8f2>
 800bde0:	9c02      	ldr	r4, [sp, #8]
 800bde2:	07e1      	lsls	r1, r4, #31
 800bde4:	bf5c      	itt	pl
 800bde6:	9306      	strpl	r3, [sp, #24]
 800bde8:	46c1      	movpl	r9, r8
 800bdea:	f57f ad0f 	bpl.w	800b80c <_svfiprintf_r+0x220>
 800bdee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bdf0:	2330      	movs	r3, #48	; 0x30
 800bdf2:	f10d 0987 	add.w	r9, sp, #135	; 0x87
 800bdf6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 800bdfa:	9506      	str	r5, [sp, #24]
 800bdfc:	e506      	b.n	800b80c <_svfiprintf_r+0x220>
 800bdfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be00:	b123      	cbz	r3, 800be0c <_svfiprintf_r+0x820>
 800be02:	9805      	ldr	r0, [sp, #20]
 800be04:	aa15      	add	r2, sp, #84	; 0x54
 800be06:	9908      	ldr	r1, [sp, #32]
 800be08:	f7ff fb6e 	bl	800b4e8 <__ssprint_r>
 800be0c:	9c08      	ldr	r4, [sp, #32]
 800be0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be16:	bf18      	it	ne
 800be18:	f04f 30ff 	movne.w	r0, #4294967295
 800be1c:	b033      	add	sp, #204	; 0xcc
 800be1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be22:	9804      	ldr	r0, [sp, #16]
 800be24:	1b05      	subs	r5, r0, r4
 800be26:	2d00      	cmp	r5, #0
 800be28:	f77f af2e 	ble.w	800bc88 <_svfiprintf_r+0x69c>
 800be2c:	4b3e      	ldr	r3, [pc, #248]	; (800bf28 <_svfiprintf_r+0x93c>)
 800be2e:	2d10      	cmp	r5, #16
 800be30:	9307      	str	r3, [sp, #28]
 800be32:	dd2a      	ble.n	800be8a <_svfiprintf_r+0x89e>
 800be34:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800be38:	f04f 0b10 	mov.w	fp, #16
 800be3c:	940c      	str	r4, [sp, #48]	; 0x30
 800be3e:	46a9      	mov	r9, r5
 800be40:	9c05      	ldr	r4, [sp, #20]
 800be42:	9d08      	ldr	r5, [sp, #32]
 800be44:	e004      	b.n	800be50 <_svfiprintf_r+0x864>
 800be46:	f1a9 0910 	sub.w	r9, r9, #16
 800be4a:	f1b9 0f10 	cmp.w	r9, #16
 800be4e:	dd18      	ble.n	800be82 <_svfiprintf_r+0x896>
 800be50:	3201      	adds	r2, #1
 800be52:	3110      	adds	r1, #16
 800be54:	2a07      	cmp	r2, #7
 800be56:	e886 0880 	stmia.w	r6, {r7, fp}
 800be5a:	9216      	str	r2, [sp, #88]	; 0x58
 800be5c:	f106 0608 	add.w	r6, r6, #8
 800be60:	9117      	str	r1, [sp, #92]	; 0x5c
 800be62:	ddf0      	ble.n	800be46 <_svfiprintf_r+0x85a>
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	aa15      	add	r2, sp, #84	; 0x54
 800be6a:	4646      	mov	r6, r8
 800be6c:	f7ff fb3c 	bl	800b4e8 <__ssprint_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	d1cb      	bne.n	800be0c <_svfiprintf_r+0x820>
 800be74:	f1a9 0910 	sub.w	r9, r9, #16
 800be78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800be7a:	f1b9 0f10 	cmp.w	r9, #16
 800be7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be80:	dce6      	bgt.n	800be50 <_svfiprintf_r+0x864>
 800be82:	464d      	mov	r5, r9
 800be84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800be86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800be8a:	3201      	adds	r2, #1
 800be8c:	9b07      	ldr	r3, [sp, #28]
 800be8e:	2a07      	cmp	r2, #7
 800be90:	4429      	add	r1, r5
 800be92:	9216      	str	r2, [sp, #88]	; 0x58
 800be94:	e886 0028 	stmia.w	r6, {r3, r5}
 800be98:	bfd8      	it	le
 800be9a:	3608      	addle	r6, #8
 800be9c:	9117      	str	r1, [sp, #92]	; 0x5c
 800be9e:	f77f aef3 	ble.w	800bc88 <_svfiprintf_r+0x69c>
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	aa15      	add	r2, sp, #84	; 0x54
 800bea6:	9908      	ldr	r1, [sp, #32]
 800bea8:	f7ff fb1e 	bl	800b4e8 <__ssprint_r>
 800beac:	2800      	cmp	r0, #0
 800beae:	d1ad      	bne.n	800be0c <_svfiprintf_r+0x820>
 800beb0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800beb2:	4646      	mov	r6, r8
 800beb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800beb6:	e6e7      	b.n	800bc88 <_svfiprintf_r+0x69c>
 800beb8:	9805      	ldr	r0, [sp, #20]
 800beba:	aa15      	add	r2, sp, #84	; 0x54
 800bebc:	9908      	ldr	r1, [sp, #32]
 800bebe:	f7ff fb13 	bl	800b4e8 <__ssprint_r>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d1a2      	bne.n	800be0c <_svfiprintf_r+0x820>
 800bec6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bec8:	4643      	mov	r3, r8
 800beca:	e735      	b.n	800bd38 <_svfiprintf_r+0x74c>
 800becc:	9805      	ldr	r0, [sp, #20]
 800bece:	aa15      	add	r2, sp, #84	; 0x54
 800bed0:	9908      	ldr	r1, [sp, #32]
 800bed2:	f7ff fb09 	bl	800b4e8 <__ssprint_r>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f af74 	beq.w	800bdc4 <_svfiprintf_r+0x7d8>
 800bedc:	e796      	b.n	800be0c <_svfiprintf_r+0x820>
 800bede:	9206      	str	r2, [sp, #24]
 800bee0:	46c1      	mov	r9, r8
 800bee2:	e493      	b.n	800b80c <_svfiprintf_r+0x220>
 800bee4:	9805      	ldr	r0, [sp, #20]
 800bee6:	aa15      	add	r2, sp, #84	; 0x54
 800bee8:	9908      	ldr	r1, [sp, #32]
 800beea:	f7ff fafd 	bl	800b4e8 <__ssprint_r>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d18c      	bne.n	800be0c <_svfiprintf_r+0x820>
 800bef2:	4646      	mov	r6, r8
 800bef4:	f7ff bbc0 	b.w	800b678 <_svfiprintf_r+0x8c>
 800bef8:	9805      	ldr	r0, [sp, #20]
 800befa:	aa15      	add	r2, sp, #84	; 0x54
 800befc:	9908      	ldr	r1, [sp, #32]
 800befe:	f7ff faf3 	bl	800b4e8 <__ssprint_r>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d182      	bne.n	800be0c <_svfiprintf_r+0x820>
 800bf06:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bf08:	4646      	mov	r6, r8
 800bf0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf0c:	e6b8      	b.n	800bc80 <_svfiprintf_r+0x694>
 800bf0e:	9805      	ldr	r0, [sp, #20]
 800bf10:	aa15      	add	r2, sp, #84	; 0x54
 800bf12:	9908      	ldr	r1, [sp, #32]
 800bf14:	f7ff fae8 	bl	800b4e8 <__ssprint_r>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f47f af77 	bne.w	800be0c <_svfiprintf_r+0x820>
 800bf1e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bf20:	4646      	mov	r6, r8
 800bf22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf24:	e69c      	b.n	800bc60 <_svfiprintf_r+0x674>
 800bf26:	bf00      	nop
 800bf28:	0800ef18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, sp, lr, pc}
 800bf2c:	2d00      	cmp	r5, #0
 800bf2e:	bf08      	it	eq
 800bf30:	2c0a      	cmpeq	r4, #10
 800bf32:	d330      	bcc.n	800bf96 <_svfiprintf_r+0x9aa>
 800bf34:	f10d 0b87 	add.w	fp, sp, #135	; 0x87
 800bf38:	46e1      	mov	r9, ip
 800bf3a:	9606      	str	r6, [sp, #24]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	220a      	movs	r2, #10
 800bf42:	2300      	movs	r3, #0
 800bf44:	f001 fb10 	bl	800d568 <__aeabi_uldivmod>
 800bf48:	465e      	mov	r6, fp
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf54:	3230      	adds	r2, #48	; 0x30
 800bf56:	7032      	strb	r2, [r6, #0]
 800bf58:	220a      	movs	r2, #10
 800bf5a:	f001 fb05 	bl	800d568 <__aeabi_uldivmod>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	ea54 0005 	orrs.w	r0, r4, r5
 800bf66:	d1e9      	bne.n	800bf3c <_svfiprintf_r+0x950>
 800bf68:	46cc      	mov	ip, r9
 800bf6a:	46b1      	mov	r9, r6
 800bf6c:	9e06      	ldr	r6, [sp, #24]
 800bf6e:	e44a      	b.n	800b806 <_svfiprintf_r+0x21a>
 800bf70:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf72:	f89a 3000 	ldrb.w	r3, [sl]
 800bf76:	f7ff bb93 	b.w	800b6a0 <_svfiprintf_r+0xb4>
 800bf7a:	9805      	ldr	r0, [sp, #20]
 800bf7c:	aa15      	add	r2, sp, #84	; 0x54
 800bf7e:	9908      	ldr	r1, [sp, #32]
 800bf80:	f7ff fab2 	bl	800b4e8 <__ssprint_r>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	f47f af41 	bne.w	800be0c <_svfiprintf_r+0x820>
 800bf8a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800bf8c:	e710      	b.n	800bdb0 <_svfiprintf_r+0x7c4>
 800bf8e:	ebc9 0508 	rsb	r5, r9, r8
 800bf92:	9506      	str	r5, [sp, #24]
 800bf94:	e43a      	b.n	800b80c <_svfiprintf_r+0x220>
 800bf96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bf98:	3430      	adds	r4, #48	; 0x30
 800bf9a:	f10d 0987 	add.w	r9, sp, #135	; 0x87
 800bf9e:	f88d 4087 	strb.w	r4, [sp, #135]	; 0x87
 800bfa2:	9506      	str	r5, [sp, #24]
 800bfa4:	e432      	b.n	800b80c <_svfiprintf_r+0x220>
 800bfa6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bfa8:	3504      	adds	r5, #4
 800bfaa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfae:	950b      	str	r5, [sp, #44]	; 0x2c
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	e5d7      	b.n	800bb64 <_svfiprintf_r+0x578>
 800bfb4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bfb6:	3504      	adds	r5, #4
 800bfb8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfbc:	950b      	str	r5, [sp, #44]	; 0x2c
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	17e5      	asrs	r5, r4, #31
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	f173 0000 	sbcs.w	r0, r3, #0
 800bfca:	f6bf ad38 	bge.w	800ba3e <_svfiprintf_r+0x452>
 800bfce:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800bfd2:	4264      	negs	r4, r4
 800bfd4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bfd8:	f88d c04f 	strb.w	ip, [sp, #79]	; 0x4f
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f7ff bbe3 	b.w	800b7a8 <_svfiprintf_r+0x1bc>
 800bfe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bfe4:	3504      	adds	r5, #4
 800bfe6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfea:	950b      	str	r5, [sp, #44]	; 0x2c
 800bfec:	2500      	movs	r5, #0
 800bfee:	f7ff bbd7 	b.w	800b7a0 <_svfiprintf_r+0x1b4>
 800bff2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bff4:	2301      	movs	r3, #1
 800bff6:	3504      	adds	r5, #4
 800bff8:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bffc:	950b      	str	r5, [sp, #44]	; 0x2c
 800bffe:	2500      	movs	r5, #0
 800c000:	f7ff bbce 	b.w	800b7a0 <_svfiprintf_r+0x1b4>
 800c004:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c008:	6829      	ldr	r1, [r5, #0]
 800c00a:	4622      	mov	r2, r4
 800c00c:	17e5      	asrs	r5, r4, #31
 800c00e:	462b      	mov	r3, r5
 800c010:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c012:	e9c1 2300 	strd	r2, r3, [r1]
 800c016:	3504      	adds	r5, #4
 800c018:	950b      	str	r5, [sp, #44]	; 0x2c
 800c01a:	f7ff bb0c 	b.w	800b636 <_svfiprintf_r+0x4a>
 800c01e:	950b      	str	r5, [sp, #44]	; 0x2c
 800c020:	9403      	str	r4, [sp, #12]
 800c022:	f7fb fce9 	bl	80079f8 <strlen>
 800c026:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800c02a:	9006      	str	r0, [sp, #24]
 800c02c:	f7ff bbee 	b.w	800b80c <_svfiprintf_r+0x220>
 800c030:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c032:	9d02      	ldr	r5, [sp, #8]
 800c034:	3404      	adds	r4, #4
 800c036:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c03a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c03e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c040:	940b      	str	r4, [sp, #44]	; 0x2c
 800c042:	bf14      	ite	ne
 800c044:	801d      	strhne	r5, [r3, #0]
 800c046:	601d      	streq	r5, [r3, #0]
 800c048:	f7ff baf5 	b.w	800b636 <_svfiprintf_r+0x4a>
 800c04c:	2140      	movs	r1, #64	; 0x40
 800c04e:	f7fe f8fd 	bl	800a24c <_malloc_r>
 800c052:	9c08      	ldr	r4, [sp, #32]
 800c054:	6020      	str	r0, [r4, #0]
 800c056:	6120      	str	r0, [r4, #16]
 800c058:	2800      	cmp	r0, #0
 800c05a:	d02f      	beq.n	800c0bc <_svfiprintf_r+0xad0>
 800c05c:	9c08      	ldr	r4, [sp, #32]
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	6163      	str	r3, [r4, #20]
 800c062:	f7ff bad1 	b.w	800b608 <_svfiprintf_r+0x1c>
 800c066:	f6c0 0300 	movt	r3, #2048	; 0x800
 800c06a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c06c:	9307      	str	r3, [sp, #28]
 800c06e:	e418      	b.n	800b8a2 <_svfiprintf_r+0x2b6>
 800c070:	9c03      	ldr	r4, [sp, #12]
 800c072:	f24f 19f8 	movw	r9, #61944	; 0xf1f8
 800c076:	950b      	str	r5, [sp, #44]	; 0x2c
 800c078:	f6c0 0900 	movt	r9, #2048	; 0x800
 800c07c:	2c06      	cmp	r4, #6
 800c07e:	bf28      	it	cs
 800c080:	2406      	movcs	r4, #6
 800c082:	9406      	str	r4, [sp, #24]
 800c084:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c088:	e4ec      	b.n	800ba64 <_svfiprintf_r+0x478>
 800c08a:	9c03      	ldr	r4, [sp, #12]
 800c08c:	f89d c04f 	ldrb.w	ip, [sp, #79]	; 0x4f
 800c090:	950b      	str	r5, [sp, #44]	; 0x2c
 800c092:	9406      	str	r4, [sp, #24]
 800c094:	9003      	str	r0, [sp, #12]
 800c096:	f7ff bbb9 	b.w	800b80c <_svfiprintf_r+0x220>
 800c09a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c09c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c0a0:	46aa      	mov	sl, r5
 800c0a2:	6824      	ldr	r4, [r4, #0]
 800c0a4:	9403      	str	r4, [sp, #12]
 800c0a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c0a8:	1d22      	adds	r2, r4, #4
 800c0aa:	9c03      	ldr	r4, [sp, #12]
 800c0ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	bfbc      	itt	lt
 800c0b2:	f04f 35ff 	movlt.w	r5, #4294967295
 800c0b6:	9503      	strlt	r5, [sp, #12]
 800c0b8:	f7ff baf2 	b.w	800b6a0 <_svfiprintf_r+0xb4>
 800c0bc:	9d05      	ldr	r5, [sp, #20]
 800c0be:	230c      	movs	r3, #12
 800c0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c4:	602b      	str	r3, [r5, #0]
 800c0c6:	e6a9      	b.n	800be1c <_svfiprintf_r+0x830>

0800c0c8 <_calloc_r>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	fb02 f101 	mul.w	r1, r2, r1
 800c0ce:	f7fe f8bd 	bl	800a24c <_malloc_r>
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	b170      	cbz	r0, 800c0f4 <_calloc_r+0x2c>
 800c0d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c0da:	f022 0203 	bic.w	r2, r2, #3
 800c0de:	3a04      	subs	r2, #4
 800c0e0:	2a24      	cmp	r2, #36	; 0x24
 800c0e2:	d81d      	bhi.n	800c120 <_calloc_r+0x58>
 800c0e4:	2a13      	cmp	r2, #19
 800c0e6:	bf98      	it	ls
 800c0e8:	4603      	movls	r3, r0
 800c0ea:	d805      	bhi.n	800c0f8 <_calloc_r+0x30>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	605a      	str	r2, [r3, #4]
 800c0f2:	609a      	str	r2, [r3, #8]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	bd10      	pop	{r4, pc}
 800c0f8:	2a1b      	cmp	r2, #27
 800c0fa:	f04f 0100 	mov.w	r1, #0
 800c0fe:	bf98      	it	ls
 800c100:	f100 0308 	addls.w	r3, r0, #8
 800c104:	6001      	str	r1, [r0, #0]
 800c106:	6041      	str	r1, [r0, #4]
 800c108:	d9f0      	bls.n	800c0ec <_calloc_r+0x24>
 800c10a:	2a24      	cmp	r2, #36	; 0x24
 800c10c:	6081      	str	r1, [r0, #8]
 800c10e:	60c1      	str	r1, [r0, #12]
 800c110:	bf11      	iteee	ne
 800c112:	f100 0310 	addne.w	r3, r0, #16
 800c116:	6101      	streq	r1, [r0, #16]
 800c118:	f100 0318 	addeq.w	r3, r0, #24
 800c11c:	6141      	streq	r1, [r0, #20]
 800c11e:	e7e5      	b.n	800c0ec <_calloc_r+0x24>
 800c120:	2100      	movs	r1, #0
 800c122:	f000 f989 	bl	800c438 <memset>
 800c126:	4620      	mov	r0, r4
 800c128:	bd10      	pop	{r4, pc}
 800c12a:	bf00      	nop

0800c12c <_malloc_trim_r>:
 800c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12e:	f240 1478 	movw	r4, #376	; 0x178
 800c132:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c136:	460f      	mov	r7, r1
 800c138:	4605      	mov	r5, r0
 800c13a:	f7fe fbdb 	bl	800a8f4 <__malloc_lock>
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	685e      	ldr	r6, [r3, #4]
 800c142:	f026 0603 	bic.w	r6, r6, #3
 800c146:	1bf7      	subs	r7, r6, r7
 800c148:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 800c14c:	0b3f      	lsrs	r7, r7, #12
 800c14e:	3f01      	subs	r7, #1
 800c150:	033f      	lsls	r7, r7, #12
 800c152:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800c156:	db07      	blt.n	800c168 <_malloc_trim_r+0x3c>
 800c158:	4628      	mov	r0, r5
 800c15a:	2100      	movs	r1, #0
 800c15c:	f7ff f892 	bl	800b284 <_sbrk_r>
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	4433      	add	r3, r6
 800c164:	4298      	cmp	r0, r3
 800c166:	d004      	beq.n	800c172 <_malloc_trim_r+0x46>
 800c168:	4628      	mov	r0, r5
 800c16a:	f7fe fbc5 	bl	800a8f8 <__malloc_unlock>
 800c16e:	2000      	movs	r0, #0
 800c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c172:	4628      	mov	r0, r5
 800c174:	4279      	negs	r1, r7
 800c176:	f7ff f885 	bl	800b284 <_sbrk_r>
 800c17a:	3001      	adds	r0, #1
 800c17c:	d010      	beq.n	800c1a0 <_malloc_trim_r+0x74>
 800c17e:	f240 53c4 	movw	r3, #1476	; 0x5c4
 800c182:	68a1      	ldr	r1, [r4, #8]
 800c184:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c188:	1bf6      	subs	r6, r6, r7
 800c18a:	4628      	mov	r0, r5
 800c18c:	f046 0601 	orr.w	r6, r6, #1
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	604e      	str	r6, [r1, #4]
 800c194:	1bd7      	subs	r7, r2, r7
 800c196:	601f      	str	r7, [r3, #0]
 800c198:	f7fe fbae 	bl	800a8f8 <__malloc_unlock>
 800c19c:	2001      	movs	r0, #1
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	f7ff f86e 	bl	800b284 <_sbrk_r>
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	1ac2      	subs	r2, r0, r3
 800c1ac:	2a0f      	cmp	r2, #15
 800c1ae:	dddb      	ble.n	800c168 <_malloc_trim_r+0x3c>
 800c1b0:	f240 5480 	movw	r4, #1408	; 0x580
 800c1b4:	f240 51c4 	movw	r1, #1476	; 0x5c4
 800c1b8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800c1bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c1c0:	f042 0201 	orr.w	r2, r2, #1
 800c1c4:	605a      	str	r2, [r3, #4]
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	1ac0      	subs	r0, r0, r3
 800c1ca:	6008      	str	r0, [r1, #0]
 800c1cc:	e7cc      	b.n	800c168 <_malloc_trim_r+0x3c>
 800c1ce:	bf00      	nop

0800c1d0 <_free_r>:
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	4680      	mov	r8, r0
 800c1d8:	2900      	cmp	r1, #0
 800c1da:	d05e      	beq.n	800c29a <_free_r+0xca>
 800c1dc:	f7fe fb8a 	bl	800a8f4 <__malloc_lock>
 800c1e0:	f240 1578 	movw	r5, #376	; 0x178
 800c1e4:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800c1e8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800c1ec:	f1a6 0408 	sub.w	r4, r6, #8
 800c1f0:	f021 0301 	bic.w	r3, r1, #1
 800c1f4:	68af      	ldr	r7, [r5, #8]
 800c1f6:	18e2      	adds	r2, r4, r3
 800c1f8:	4297      	cmp	r7, r2
 800c1fa:	6850      	ldr	r0, [r2, #4]
 800c1fc:	f020 0003 	bic.w	r0, r0, #3
 800c200:	d061      	beq.n	800c2c6 <_free_r+0xf6>
 800c202:	f011 0101 	ands.w	r1, r1, #1
 800c206:	6050      	str	r0, [r2, #4]
 800c208:	bf18      	it	ne
 800c20a:	2100      	movne	r1, #0
 800c20c:	d10f      	bne.n	800c22e <_free_r+0x5e>
 800c20e:	f856 6c08 	ldr.w	r6, [r6, #-8]
 800c212:	f105 0c08 	add.w	ip, r5, #8
 800c216:	1ba4      	subs	r4, r4, r6
 800c218:	4433      	add	r3, r6
 800c21a:	68a6      	ldr	r6, [r4, #8]
 800c21c:	4566      	cmp	r6, ip
 800c21e:	bf0f      	iteee	eq
 800c220:	2101      	moveq	r1, #1
 800c222:	f8d4 c00c 	ldrne.w	ip, [r4, #12]
 800c226:	f8c6 c00c 	strne.w	ip, [r6, #12]
 800c22a:	f8cc 6008 	strne.w	r6, [ip, #8]
 800c22e:	1816      	adds	r6, r2, r0
 800c230:	6876      	ldr	r6, [r6, #4]
 800c232:	07f6      	lsls	r6, r6, #31
 800c234:	d408      	bmi.n	800c248 <_free_r+0x78>
 800c236:	4403      	add	r3, r0
 800c238:	6890      	ldr	r0, [r2, #8]
 800c23a:	b911      	cbnz	r1, 800c242 <_free_r+0x72>
 800c23c:	4e49      	ldr	r6, [pc, #292]	; (800c364 <_free_r+0x194>)
 800c23e:	42b0      	cmp	r0, r6
 800c240:	d060      	beq.n	800c304 <_free_r+0x134>
 800c242:	68d2      	ldr	r2, [r2, #12]
 800c244:	60c2      	str	r2, [r0, #12]
 800c246:	6090      	str	r0, [r2, #8]
 800c248:	f043 0201 	orr.w	r2, r3, #1
 800c24c:	6062      	str	r2, [r4, #4]
 800c24e:	50e3      	str	r3, [r4, r3]
 800c250:	b9f1      	cbnz	r1, 800c290 <_free_r+0xc0>
 800c252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c256:	d322      	bcc.n	800c29e <_free_r+0xce>
 800c258:	0a5a      	lsrs	r2, r3, #9
 800c25a:	2a04      	cmp	r2, #4
 800c25c:	d85b      	bhi.n	800c316 <_free_r+0x146>
 800c25e:	0998      	lsrs	r0, r3, #6
 800c260:	3038      	adds	r0, #56	; 0x38
 800c262:	0041      	lsls	r1, r0, #1
 800c264:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800c268:	f240 1178 	movw	r1, #376	; 0x178
 800c26c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800c270:	68aa      	ldr	r2, [r5, #8]
 800c272:	42aa      	cmp	r2, r5
 800c274:	d05b      	beq.n	800c32e <_free_r+0x15e>
 800c276:	6851      	ldr	r1, [r2, #4]
 800c278:	f021 0103 	bic.w	r1, r1, #3
 800c27c:	428b      	cmp	r3, r1
 800c27e:	d202      	bcs.n	800c286 <_free_r+0xb6>
 800c280:	6892      	ldr	r2, [r2, #8]
 800c282:	4295      	cmp	r5, r2
 800c284:	d1f7      	bne.n	800c276 <_free_r+0xa6>
 800c286:	68d3      	ldr	r3, [r2, #12]
 800c288:	60e3      	str	r3, [r4, #12]
 800c28a:	60a2      	str	r2, [r4, #8]
 800c28c:	609c      	str	r4, [r3, #8]
 800c28e:	60d4      	str	r4, [r2, #12]
 800c290:	4640      	mov	r0, r8
 800c292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c296:	f7fe bb2f 	b.w	800a8f8 <__malloc_unlock>
 800c29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29e:	08db      	lsrs	r3, r3, #3
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	6868      	ldr	r0, [r5, #4]
 800c2a4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800c2a8:	109b      	asrs	r3, r3, #2
 800c2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ae:	6891      	ldr	r1, [r2, #8]
 800c2b0:	4318      	orrs	r0, r3
 800c2b2:	60e2      	str	r2, [r4, #12]
 800c2b4:	6068      	str	r0, [r5, #4]
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	60a1      	str	r1, [r4, #8]
 800c2ba:	6094      	str	r4, [r2, #8]
 800c2bc:	60cc      	str	r4, [r1, #12]
 800c2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	f7fe bb19 	b.w	800a8f8 <__malloc_unlock>
 800c2c6:	07cf      	lsls	r7, r1, #31
 800c2c8:	4418      	add	r0, r3
 800c2ca:	d407      	bmi.n	800c2dc <_free_r+0x10c>
 800c2cc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	4418      	add	r0, r3
 800c2d4:	68a2      	ldr	r2, [r4, #8]
 800c2d6:	68e3      	ldr	r3, [r4, #12]
 800c2d8:	60d3      	str	r3, [r2, #12]
 800c2da:	609a      	str	r2, [r3, #8]
 800c2dc:	f240 5284 	movw	r2, #1412	; 0x584
 800c2e0:	f040 0301 	orr.w	r3, r0, #1
 800c2e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800c2e8:	6063      	str	r3, [r4, #4]
 800c2ea:	60ac      	str	r4, [r5, #8]
 800c2ec:	6813      	ldr	r3, [r2, #0]
 800c2ee:	4298      	cmp	r0, r3
 800c2f0:	d3ce      	bcc.n	800c290 <_free_r+0xc0>
 800c2f2:	f240 53c0 	movw	r3, #1472	; 0x5c0
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2fc:	6819      	ldr	r1, [r3, #0]
 800c2fe:	f7ff ff15 	bl	800c12c <_malloc_trim_r>
 800c302:	e7c5      	b.n	800c290 <_free_r+0xc0>
 800c304:	616c      	str	r4, [r5, #20]
 800c306:	f043 0201 	orr.w	r2, r3, #1
 800c30a:	612c      	str	r4, [r5, #16]
 800c30c:	60e0      	str	r0, [r4, #12]
 800c30e:	60a0      	str	r0, [r4, #8]
 800c310:	6062      	str	r2, [r4, #4]
 800c312:	50e3      	str	r3, [r4, r3]
 800c314:	e7bc      	b.n	800c290 <_free_r+0xc0>
 800c316:	2a14      	cmp	r2, #20
 800c318:	bf9c      	itt	ls
 800c31a:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 800c31e:	0041      	lslls	r1, r0, #1
 800c320:	d9a0      	bls.n	800c264 <_free_r+0x94>
 800c322:	2a54      	cmp	r2, #84	; 0x54
 800c324:	d80c      	bhi.n	800c340 <_free_r+0x170>
 800c326:	0b18      	lsrs	r0, r3, #12
 800c328:	306e      	adds	r0, #110	; 0x6e
 800c32a:	0041      	lsls	r1, r0, #1
 800c32c:	e79a      	b.n	800c264 <_free_r+0x94>
 800c32e:	2601      	movs	r6, #1
 800c330:	684d      	ldr	r5, [r1, #4]
 800c332:	1080      	asrs	r0, r0, #2
 800c334:	4613      	mov	r3, r2
 800c336:	fa06 f000 	lsl.w	r0, r6, r0
 800c33a:	4305      	orrs	r5, r0
 800c33c:	604d      	str	r5, [r1, #4]
 800c33e:	e7a3      	b.n	800c288 <_free_r+0xb8>
 800c340:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c344:	d803      	bhi.n	800c34e <_free_r+0x17e>
 800c346:	0bd8      	lsrs	r0, r3, #15
 800c348:	3077      	adds	r0, #119	; 0x77
 800c34a:	0041      	lsls	r1, r0, #1
 800c34c:	e78a      	b.n	800c264 <_free_r+0x94>
 800c34e:	f240 5154 	movw	r1, #1364	; 0x554
 800c352:	428a      	cmp	r2, r1
 800c354:	bf95      	itete	ls
 800c356:	0c98      	lsrls	r0, r3, #18
 800c358:	21fc      	movhi	r1, #252	; 0xfc
 800c35a:	307c      	addls	r0, #124	; 0x7c
 800c35c:	207e      	movhi	r0, #126	; 0x7e
 800c35e:	bf98      	it	ls
 800c360:	0041      	lslls	r1, r0, #1
 800c362:	e77f      	b.n	800c264 <_free_r+0x94>
 800c364:	20000180 	andcs	r0, r0, r0, lsl #3

0800c368 <memmove>:
 800c368:	4288      	cmp	r0, r1
 800c36a:	b4f0      	push	{r4, r5, r6, r7}
 800c36c:	d910      	bls.n	800c390 <memmove+0x28>
 800c36e:	188c      	adds	r4, r1, r2
 800c370:	42a0      	cmp	r0, r4
 800c372:	d20d      	bcs.n	800c390 <memmove+0x28>
 800c374:	1885      	adds	r5, r0, r2
 800c376:	1e53      	subs	r3, r2, #1
 800c378:	b142      	cbz	r2, 800c38c <memmove+0x24>
 800c37a:	4621      	mov	r1, r4
 800c37c:	462a      	mov	r2, r5
 800c37e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800c382:	3b01      	subs	r3, #1
 800c384:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c388:	1c5c      	adds	r4, r3, #1
 800c38a:	d1f8      	bne.n	800c37e <memmove+0x16>
 800c38c:	bcf0      	pop	{r4, r5, r6, r7}
 800c38e:	4770      	bx	lr
 800c390:	2a0f      	cmp	r2, #15
 800c392:	d946      	bls.n	800c422 <memmove+0xba>
 800c394:	ea40 0301 	orr.w	r3, r0, r1
 800c398:	079b      	lsls	r3, r3, #30
 800c39a:	d146      	bne.n	800c42a <memmove+0xc2>
 800c39c:	f1a2 0710 	sub.w	r7, r2, #16
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	093f      	lsrs	r7, r7, #4
 800c3a6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800c3aa:	3610      	adds	r6, #16
 800c3ac:	6825      	ldr	r5, [r4, #0]
 800c3ae:	3310      	adds	r3, #16
 800c3b0:	3410      	adds	r4, #16
 800c3b2:	f843 5c10 	str.w	r5, [r3, #-16]
 800c3b6:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 800c3ba:	f843 5c0c 	str.w	r5, [r3, #-12]
 800c3be:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c3c2:	f843 5c08 	str.w	r5, [r3, #-8]
 800c3c6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c3ca:	f843 5c04 	str.w	r5, [r3, #-4]
 800c3ce:	42b3      	cmp	r3, r6
 800c3d0:	d1ec      	bne.n	800c3ac <memmove+0x44>
 800c3d2:	1c7b      	adds	r3, r7, #1
 800c3d4:	f002 0c0f 	and.w	ip, r2, #15
 800c3d8:	f1bc 0f03 	cmp.w	ip, #3
 800c3dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c3e0:	4419      	add	r1, r3
 800c3e2:	4403      	add	r3, r0
 800c3e4:	d923      	bls.n	800c42e <memmove+0xc6>
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	461d      	mov	r5, r3
 800c3ea:	4664      	mov	r4, ip
 800c3ec:	f856 7b04 	ldr.w	r7, [r6], #4
 800c3f0:	3c04      	subs	r4, #4
 800c3f2:	2c03      	cmp	r4, #3
 800c3f4:	f845 7b04 	str.w	r7, [r5], #4
 800c3f8:	d8f8      	bhi.n	800c3ec <memmove+0x84>
 800c3fa:	f1ac 0404 	sub.w	r4, ip, #4
 800c3fe:	f002 0203 	and.w	r2, r2, #3
 800c402:	f024 0403 	bic.w	r4, r4, #3
 800c406:	3404      	adds	r4, #4
 800c408:	4423      	add	r3, r4
 800c40a:	4421      	add	r1, r4
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	d0bd      	beq.n	800c38c <memmove+0x24>
 800c410:	441a      	add	r2, r3
 800c412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c416:	f803 4b01 	strb.w	r4, [r3], #1
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d1f9      	bne.n	800c412 <memmove+0xaa>
 800c41e:	bcf0      	pop	{r4, r5, r6, r7}
 800c420:	4770      	bx	lr
 800c422:	4603      	mov	r3, r0
 800c424:	2a00      	cmp	r2, #0
 800c426:	d1f3      	bne.n	800c410 <memmove+0xa8>
 800c428:	e7b0      	b.n	800c38c <memmove+0x24>
 800c42a:	4603      	mov	r3, r0
 800c42c:	e7f0      	b.n	800c410 <memmove+0xa8>
 800c42e:	4662      	mov	r2, ip
 800c430:	2a00      	cmp	r2, #0
 800c432:	d1ed      	bne.n	800c410 <memmove+0xa8>
 800c434:	e7aa      	b.n	800c38c <memmove+0x24>
 800c436:	bf00      	nop

0800c438 <memset>:
 800c438:	0783      	lsls	r3, r0, #30
 800c43a:	b4f0      	push	{r4, r5, r6, r7}
 800c43c:	d048      	beq.n	800c4d0 <memset+0x98>
 800c43e:	1e54      	subs	r4, r2, #1
 800c440:	2a00      	cmp	r2, #0
 800c442:	d043      	beq.n	800c4cc <memset+0x94>
 800c444:	b2cd      	uxtb	r5, r1
 800c446:	4603      	mov	r3, r0
 800c448:	e002      	b.n	800c450 <memset+0x18>
 800c44a:	2c00      	cmp	r4, #0
 800c44c:	d03e      	beq.n	800c4cc <memset+0x94>
 800c44e:	4614      	mov	r4, r2
 800c450:	f803 5b01 	strb.w	r5, [r3], #1
 800c454:	f013 0f03 	tst.w	r3, #3
 800c458:	f104 32ff 	add.w	r2, r4, #4294967295
 800c45c:	d1f5      	bne.n	800c44a <memset+0x12>
 800c45e:	2c03      	cmp	r4, #3
 800c460:	d92d      	bls.n	800c4be <memset+0x86>
 800c462:	b2cd      	uxtb	r5, r1
 800c464:	2c0f      	cmp	r4, #15
 800c466:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800c46a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800c46e:	d918      	bls.n	800c4a2 <memset+0x6a>
 800c470:	f1a4 0710 	sub.w	r7, r4, #16
 800c474:	f103 0610 	add.w	r6, r3, #16
 800c478:	461a      	mov	r2, r3
 800c47a:	093f      	lsrs	r7, r7, #4
 800c47c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800c480:	6015      	str	r5, [r2, #0]
 800c482:	3210      	adds	r2, #16
 800c484:	f842 5c0c 	str.w	r5, [r2, #-12]
 800c488:	f842 5c08 	str.w	r5, [r2, #-8]
 800c48c:	f842 5c04 	str.w	r5, [r2, #-4]
 800c490:	42b2      	cmp	r2, r6
 800c492:	d1f5      	bne.n	800c480 <memset+0x48>
 800c494:	f004 040f 	and.w	r4, r4, #15
 800c498:	3701      	adds	r7, #1
 800c49a:	2c03      	cmp	r4, #3
 800c49c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800c4a0:	d90d      	bls.n	800c4be <memset+0x86>
 800c4a2:	461e      	mov	r6, r3
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	3a04      	subs	r2, #4
 800c4a8:	f846 5b04 	str.w	r5, [r6], #4
 800c4ac:	2a03      	cmp	r2, #3
 800c4ae:	d8fa      	bhi.n	800c4a6 <memset+0x6e>
 800c4b0:	1f22      	subs	r2, r4, #4
 800c4b2:	f004 0403 	and.w	r4, r4, #3
 800c4b6:	f022 0203 	bic.w	r2, r2, #3
 800c4ba:	3204      	adds	r2, #4
 800c4bc:	4413      	add	r3, r2
 800c4be:	b12c      	cbz	r4, 800c4cc <memset+0x94>
 800c4c0:	b2c9      	uxtb	r1, r1
 800c4c2:	441c      	add	r4, r3
 800c4c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d1fb      	bne.n	800c4c4 <memset+0x8c>
 800c4cc:	bcf0      	pop	{r4, r5, r6, r7}
 800c4ce:	4770      	bx	lr
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	e7c3      	b.n	800c45e <memset+0x26>
 800c4d6:	bf00      	nop

0800c4d8 <_realloc_r>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	460c      	mov	r4, r1
 800c4de:	b083      	sub	sp, #12
 800c4e0:	4690      	mov	r8, r2
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	f000 8148 	beq.w	800c77a <_realloc_r+0x2a2>
 800c4ea:	f7fe fa03 	bl	800a8f4 <__malloc_lock>
 800c4ee:	f108 060b 	add.w	r6, r8, #11
 800c4f2:	2e16      	cmp	r6, #22
 800c4f4:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800c4f8:	bf8d      	iteet	hi
 800c4fa:	f026 0607 	bichi.w	r6, r6, #7
 800c4fe:	2210      	movls	r2, #16
 800c500:	2300      	movls	r3, #0
 800c502:	4632      	movhi	r2, r6
 800c504:	bf88      	it	hi
 800c506:	0ff3      	lsrhi	r3, r6, #31
 800c508:	f1a4 0708 	sub.w	r7, r4, #8
 800c50c:	f02c 0503 	bic.w	r5, ip, #3
 800c510:	bf98      	it	ls
 800c512:	4616      	movls	r6, r2
 800c514:	4546      	cmp	r6, r8
 800c516:	bf38      	it	cc
 800c518:	f043 0301 	orrcc.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 8132 	bne.w	800c786 <_realloc_r+0x2ae>
 800c522:	4295      	cmp	r5, r2
 800c524:	db16      	blt.n	800c554 <_realloc_r+0x7c>
 800c526:	46a0      	mov	r8, r4
 800c528:	4660      	mov	r0, ip
 800c52a:	1bab      	subs	r3, r5, r6
 800c52c:	2b0f      	cmp	r3, #15
 800c52e:	f200 80cc 	bhi.w	800c6ca <_realloc_r+0x1f2>
 800c532:	197b      	adds	r3, r7, r5
 800c534:	f000 0c01 	and.w	ip, r0, #1
 800c538:	ea4c 0505 	orr.w	r5, ip, r5
 800c53c:	607d      	str	r5, [r7, #4]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	f042 0201 	orr.w	r2, r2, #1
 800c544:	605a      	str	r2, [r3, #4]
 800c546:	4648      	mov	r0, r9
 800c548:	f7fe f9d6 	bl	800a8f8 <__malloc_unlock>
 800c54c:	4640      	mov	r0, r8
 800c54e:	b003      	add	sp, #12
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c554:	f240 1a78 	movw	sl, #376	; 0x178
 800c558:	1979      	adds	r1, r7, r5
 800c55a:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800c55e:	f8da 0008 	ldr.w	r0, [sl, #8]
 800c562:	4288      	cmp	r0, r1
 800c564:	f000 8114 	beq.w	800c790 <_realloc_r+0x2b8>
 800c568:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800c56c:	f02e 0b01 	bic.w	fp, lr, #1
 800c570:	448b      	add	fp, r1
 800c572:	f8db b004 	ldr.w	fp, [fp, #4]
 800c576:	f01b 0f01 	tst.w	fp, #1
 800c57a:	bf1c      	itt	ne
 800c57c:	469e      	movne	lr, r3
 800c57e:	4671      	movne	r1, lr
 800c580:	d056      	beq.n	800c630 <_realloc_r+0x158>
 800c582:	f01c 0f01 	tst.w	ip, #1
 800c586:	f040 80b3 	bne.w	800c6f0 <_realloc_r+0x218>
 800c58a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800c58e:	ebc3 0b07 	rsb	fp, r3, r7
 800c592:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	442b      	add	r3, r5
 800c59c:	2900      	cmp	r1, #0
 800c59e:	d055      	beq.n	800c64c <_realloc_r+0x174>
 800c5a0:	4281      	cmp	r1, r0
 800c5a2:	f000 8121 	beq.w	800c7e8 <_realloc_r+0x310>
 800c5a6:	449e      	add	lr, r3
 800c5a8:	4596      	cmp	lr, r2
 800c5aa:	db4f      	blt.n	800c64c <_realloc_r+0x174>
 800c5ac:	68cb      	ldr	r3, [r1, #12]
 800c5ae:	46d8      	mov	r8, fp
 800c5b0:	6889      	ldr	r1, [r1, #8]
 800c5b2:	1f2a      	subs	r2, r5, #4
 800c5b4:	2a24      	cmp	r2, #36	; 0x24
 800c5b6:	60cb      	str	r3, [r1, #12]
 800c5b8:	6099      	str	r1, [r3, #8]
 800c5ba:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c5be:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800c5c2:	60cb      	str	r3, [r1, #12]
 800c5c4:	6099      	str	r1, [r3, #8]
 800c5c6:	f200 816a 	bhi.w	800c89e <_realloc_r+0x3c6>
 800c5ca:	2a13      	cmp	r2, #19
 800c5cc:	bf98      	it	ls
 800c5ce:	4642      	movls	r2, r8
 800c5d0:	d923      	bls.n	800c61a <_realloc_r+0x142>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	2a1b      	cmp	r2, #27
 800c5d6:	bf98      	it	ls
 800c5d8:	f10b 0210 	addls.w	r2, fp, #16
 800c5dc:	f8cb 3008 	str.w	r3, [fp, #8]
 800c5e0:	6863      	ldr	r3, [r4, #4]
 800c5e2:	bf98      	it	ls
 800c5e4:	3408      	addls	r4, #8
 800c5e6:	f8cb 300c 	str.w	r3, [fp, #12]
 800c5ea:	d916      	bls.n	800c61a <_realloc_r+0x142>
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	2a24      	cmp	r2, #36	; 0x24
 800c5f0:	bf14      	ite	ne
 800c5f2:	f10b 0218 	addne.w	r2, fp, #24
 800c5f6:	f10b 0220 	addeq.w	r2, fp, #32
 800c5fa:	f8cb 3010 	str.w	r3, [fp, #16]
 800c5fe:	68e3      	ldr	r3, [r4, #12]
 800c600:	bf18      	it	ne
 800c602:	3410      	addne	r4, #16
 800c604:	f8cb 3014 	str.w	r3, [fp, #20]
 800c608:	bf01      	itttt	eq
 800c60a:	6923      	ldreq	r3, [r4, #16]
 800c60c:	f8cb 3018 	streq.w	r3, [fp, #24]
 800c610:	6963      	ldreq	r3, [r4, #20]
 800c612:	3418      	addeq	r4, #24
 800c614:	bf08      	it	eq
 800c616:	f8cb 301c 	streq.w	r3, [fp, #28]
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	4675      	mov	r5, lr
 800c61e:	465f      	mov	r7, fp
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	6863      	ldr	r3, [r4, #4]
 800c624:	6053      	str	r3, [r2, #4]
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	6093      	str	r3, [r2, #8]
 800c62a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c62e:	e77c      	b.n	800c52a <_realloc_r+0x52>
 800c630:	f02e 0e03 	bic.w	lr, lr, #3
 800c634:	eb0e 0305 	add.w	r3, lr, r5
 800c638:	4293      	cmp	r3, r2
 800c63a:	dba2      	blt.n	800c582 <_realloc_r+0xaa>
 800c63c:	68ca      	ldr	r2, [r1, #12]
 800c63e:	46a0      	mov	r8, r4
 800c640:	6889      	ldr	r1, [r1, #8]
 800c642:	4660      	mov	r0, ip
 800c644:	461d      	mov	r5, r3
 800c646:	60ca      	str	r2, [r1, #12]
 800c648:	6091      	str	r1, [r2, #8]
 800c64a:	e76e      	b.n	800c52a <_realloc_r+0x52>
 800c64c:	4293      	cmp	r3, r2
 800c64e:	db4f      	blt.n	800c6f0 <_realloc_r+0x218>
 800c650:	46d8      	mov	r8, fp
 800c652:	f8db 100c 	ldr.w	r1, [fp, #12]
 800c656:	1f2a      	subs	r2, r5, #4
 800c658:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800c65c:	2a24      	cmp	r2, #36	; 0x24
 800c65e:	60c1      	str	r1, [r0, #12]
 800c660:	6088      	str	r0, [r1, #8]
 800c662:	f200 80b4 	bhi.w	800c7ce <_realloc_r+0x2f6>
 800c666:	2a13      	cmp	r2, #19
 800c668:	bf98      	it	ls
 800c66a:	4641      	movls	r1, r8
 800c66c:	d922      	bls.n	800c6b4 <_realloc_r+0x1dc>
 800c66e:	6821      	ldr	r1, [r4, #0]
 800c670:	2a1b      	cmp	r2, #27
 800c672:	f8cb 1008 	str.w	r1, [fp, #8]
 800c676:	6861      	ldr	r1, [r4, #4]
 800c678:	bf98      	it	ls
 800c67a:	3408      	addls	r4, #8
 800c67c:	f8cb 100c 	str.w	r1, [fp, #12]
 800c680:	bf98      	it	ls
 800c682:	f10b 0110 	addls.w	r1, fp, #16
 800c686:	d915      	bls.n	800c6b4 <_realloc_r+0x1dc>
 800c688:	68a1      	ldr	r1, [r4, #8]
 800c68a:	2a24      	cmp	r2, #36	; 0x24
 800c68c:	f8cb 1010 	str.w	r1, [fp, #16]
 800c690:	68e1      	ldr	r1, [r4, #12]
 800c692:	bf18      	it	ne
 800c694:	3410      	addne	r4, #16
 800c696:	f8cb 1014 	str.w	r1, [fp, #20]
 800c69a:	bf11      	iteee	ne
 800c69c:	f10b 0118 	addne.w	r1, fp, #24
 800c6a0:	6922      	ldreq	r2, [r4, #16]
 800c6a2:	f10b 0120 	addeq.w	r1, fp, #32
 800c6a6:	f8cb 2018 	streq.w	r2, [fp, #24]
 800c6aa:	bf02      	ittt	eq
 800c6ac:	6962      	ldreq	r2, [r4, #20]
 800c6ae:	3418      	addeq	r4, #24
 800c6b0:	f8cb 201c 	streq.w	r2, [fp, #28]
 800c6b4:	6822      	ldr	r2, [r4, #0]
 800c6b6:	461d      	mov	r5, r3
 800c6b8:	465f      	mov	r7, fp
 800c6ba:	600a      	str	r2, [r1, #0]
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	604b      	str	r3, [r1, #4]
 800c6c0:	68a3      	ldr	r3, [r4, #8]
 800c6c2:	608b      	str	r3, [r1, #8]
 800c6c4:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c6c8:	e72f      	b.n	800c52a <_realloc_r+0x52>
 800c6ca:	19b9      	adds	r1, r7, r6
 800c6cc:	f000 0c01 	and.w	ip, r0, #1
 800c6d0:	18ca      	adds	r2, r1, r3
 800c6d2:	ea4c 0606 	orr.w	r6, ip, r6
 800c6d6:	f043 0301 	orr.w	r3, r3, #1
 800c6da:	607e      	str	r6, [r7, #4]
 800c6dc:	604b      	str	r3, [r1, #4]
 800c6de:	4648      	mov	r0, r9
 800c6e0:	6853      	ldr	r3, [r2, #4]
 800c6e2:	3108      	adds	r1, #8
 800c6e4:	f043 0301 	orr.w	r3, r3, #1
 800c6e8:	6053      	str	r3, [r2, #4]
 800c6ea:	f7ff fd71 	bl	800c1d0 <_free_r>
 800c6ee:	e72a      	b.n	800c546 <_realloc_r+0x6e>
 800c6f0:	4641      	mov	r1, r8
 800c6f2:	4648      	mov	r0, r9
 800c6f4:	f7fd fdaa 	bl	800a24c <_malloc_r>
 800c6f8:	4680      	mov	r8, r0
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f43f af23 	beq.w	800c546 <_realloc_r+0x6e>
 800c700:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c704:	f1a0 0108 	sub.w	r1, r0, #8
 800c708:	f023 0201 	bic.w	r2, r3, #1
 800c70c:	443a      	add	r2, r7
 800c70e:	4291      	cmp	r1, r2
 800c710:	f000 80bd 	beq.w	800c88e <_realloc_r+0x3b6>
 800c714:	1f2a      	subs	r2, r5, #4
 800c716:	2a24      	cmp	r2, #36	; 0x24
 800c718:	d862      	bhi.n	800c7e0 <_realloc_r+0x308>
 800c71a:	2a13      	cmp	r2, #19
 800c71c:	bf9c      	itt	ls
 800c71e:	4603      	movls	r3, r0
 800c720:	4622      	movls	r2, r4
 800c722:	d91f      	bls.n	800c764 <_realloc_r+0x28c>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	2a1b      	cmp	r2, #27
 800c728:	bf98      	it	ls
 800c72a:	f104 0208 	addls.w	r2, r4, #8
 800c72e:	6003      	str	r3, [r0, #0]
 800c730:	6863      	ldr	r3, [r4, #4]
 800c732:	6043      	str	r3, [r0, #4]
 800c734:	bf98      	it	ls
 800c736:	f100 0308 	addls.w	r3, r0, #8
 800c73a:	d913      	bls.n	800c764 <_realloc_r+0x28c>
 800c73c:	68a3      	ldr	r3, [r4, #8]
 800c73e:	2a24      	cmp	r2, #36	; 0x24
 800c740:	bf14      	ite	ne
 800c742:	f104 0210 	addne.w	r2, r4, #16
 800c746:	f104 0218 	addeq.w	r2, r4, #24
 800c74a:	6083      	str	r3, [r0, #8]
 800c74c:	68e3      	ldr	r3, [r4, #12]
 800c74e:	60c3      	str	r3, [r0, #12]
 800c750:	bf11      	iteee	ne
 800c752:	f100 0310 	addne.w	r3, r0, #16
 800c756:	6921      	ldreq	r1, [r4, #16]
 800c758:	f100 0318 	addeq.w	r3, r0, #24
 800c75c:	6101      	streq	r1, [r0, #16]
 800c75e:	bf04      	itt	eq
 800c760:	6961      	ldreq	r1, [r4, #20]
 800c762:	6141      	streq	r1, [r0, #20]
 800c764:	6811      	ldr	r1, [r2, #0]
 800c766:	6019      	str	r1, [r3, #0]
 800c768:	6851      	ldr	r1, [r2, #4]
 800c76a:	6059      	str	r1, [r3, #4]
 800c76c:	6892      	ldr	r2, [r2, #8]
 800c76e:	609a      	str	r2, [r3, #8]
 800c770:	4621      	mov	r1, r4
 800c772:	4648      	mov	r0, r9
 800c774:	f7ff fd2c 	bl	800c1d0 <_free_r>
 800c778:	e6e5      	b.n	800c546 <_realloc_r+0x6e>
 800c77a:	4611      	mov	r1, r2
 800c77c:	b003      	add	sp, #12
 800c77e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c782:	f7fd bd63 	b.w	800a24c <_malloc_r>
 800c786:	230c      	movs	r3, #12
 800c788:	2000      	movs	r0, #0
 800c78a:	f8c9 3000 	str.w	r3, [r9]
 800c78e:	e6de      	b.n	800c54e <_realloc_r+0x76>
 800c790:	6843      	ldr	r3, [r0, #4]
 800c792:	f106 0110 	add.w	r1, r6, #16
 800c796:	f023 0e03 	bic.w	lr, r3, #3
 800c79a:	eb0e 0305 	add.w	r3, lr, r5
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	bfb8      	it	lt
 800c7a2:	4601      	movlt	r1, r0
 800c7a4:	f6ff aeed 	blt.w	800c582 <_realloc_r+0xaa>
 800c7a8:	4437      	add	r7, r6
 800c7aa:	1b9b      	subs	r3, r3, r6
 800c7ac:	f8ca 7008 	str.w	r7, [sl, #8]
 800c7b0:	f043 0301 	orr.w	r3, r3, #1
 800c7b4:	607b      	str	r3, [r7, #4]
 800c7b6:	4648      	mov	r0, r9
 800c7b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	431e      	orrs	r6, r3
 800c7c2:	f844 6c04 	str.w	r6, [r4, #-4]
 800c7c6:	f7fe f897 	bl	800a8f8 <__malloc_unlock>
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	e6bf      	b.n	800c54e <_realloc_r+0x76>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	4640      	mov	r0, r8
 800c7d2:	461d      	mov	r5, r3
 800c7d4:	465f      	mov	r7, fp
 800c7d6:	f7ff fdc7 	bl	800c368 <memmove>
 800c7da:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c7de:	e6a4      	b.n	800c52a <_realloc_r+0x52>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	f7ff fdc1 	bl	800c368 <memmove>
 800c7e6:	e7c3      	b.n	800c770 <_realloc_r+0x298>
 800c7e8:	f106 0110 	add.w	r1, r6, #16
 800c7ec:	eb0e 0c03 	add.w	ip, lr, r3
 800c7f0:	458c      	cmp	ip, r1
 800c7f2:	f6ff af2b 	blt.w	800c64c <_realloc_r+0x174>
 800c7f6:	46d8      	mov	r8, fp
 800c7f8:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c7fc:	1f2a      	subs	r2, r5, #4
 800c7fe:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800c802:	2a24      	cmp	r2, #36	; 0x24
 800c804:	60cb      	str	r3, [r1, #12]
 800c806:	6099      	str	r1, [r3, #8]
 800c808:	d852      	bhi.n	800c8b0 <_realloc_r+0x3d8>
 800c80a:	2a13      	cmp	r2, #19
 800c80c:	bf98      	it	ls
 800c80e:	4643      	movls	r3, r8
 800c810:	d922      	bls.n	800c858 <_realloc_r+0x380>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	2a1b      	cmp	r2, #27
 800c816:	f8cb 3008 	str.w	r3, [fp, #8]
 800c81a:	6863      	ldr	r3, [r4, #4]
 800c81c:	bf98      	it	ls
 800c81e:	3408      	addls	r4, #8
 800c820:	f8cb 300c 	str.w	r3, [fp, #12]
 800c824:	bf98      	it	ls
 800c826:	f10b 0310 	addls.w	r3, fp, #16
 800c82a:	d915      	bls.n	800c858 <_realloc_r+0x380>
 800c82c:	68a3      	ldr	r3, [r4, #8]
 800c82e:	2a24      	cmp	r2, #36	; 0x24
 800c830:	f8cb 3010 	str.w	r3, [fp, #16]
 800c834:	68e3      	ldr	r3, [r4, #12]
 800c836:	bf18      	it	ne
 800c838:	3410      	addne	r4, #16
 800c83a:	f8cb 3014 	str.w	r3, [fp, #20]
 800c83e:	bf11      	iteee	ne
 800c840:	f10b 0318 	addne.w	r3, fp, #24
 800c844:	6922      	ldreq	r2, [r4, #16]
 800c846:	f10b 0320 	addeq.w	r3, fp, #32
 800c84a:	f8cb 2018 	streq.w	r2, [fp, #24]
 800c84e:	bf02      	ittt	eq
 800c850:	6962      	ldreq	r2, [r4, #20]
 800c852:	3418      	addeq	r4, #24
 800c854:	f8cb 201c 	streq.w	r2, [fp, #28]
 800c858:	6822      	ldr	r2, [r4, #0]
 800c85a:	601a      	str	r2, [r3, #0]
 800c85c:	6862      	ldr	r2, [r4, #4]
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	68a2      	ldr	r2, [r4, #8]
 800c862:	609a      	str	r2, [r3, #8]
 800c864:	eb0b 0306 	add.w	r3, fp, r6
 800c868:	ebc6 020c 	rsb	r2, r6, ip
 800c86c:	f8ca 3008 	str.w	r3, [sl, #8]
 800c870:	f042 0201 	orr.w	r2, r2, #1
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	4648      	mov	r0, r9
 800c878:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	431e      	orrs	r6, r3
 800c882:	f8cb 6004 	str.w	r6, [fp, #4]
 800c886:	f7fe f837 	bl	800a8f8 <__malloc_unlock>
 800c88a:	4640      	mov	r0, r8
 800c88c:	e65f      	b.n	800c54e <_realloc_r+0x76>
 800c88e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c892:	4618      	mov	r0, r3
 800c894:	46a0      	mov	r8, r4
 800c896:	f022 0303 	bic.w	r3, r2, #3
 800c89a:	441d      	add	r5, r3
 800c89c:	e645      	b.n	800c52a <_realloc_r+0x52>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4675      	mov	r5, lr
 800c8a4:	465f      	mov	r7, fp
 800c8a6:	f7ff fd5f 	bl	800c368 <memmove>
 800c8aa:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c8ae:	e63c      	b.n	800c52a <_realloc_r+0x52>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	f8cd c004 	str.w	ip, [sp, #4]
 800c8b8:	f7ff fd56 	bl	800c368 <memmove>
 800c8bc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c8c0:	e7d0      	b.n	800c864 <_realloc_r+0x38c>
 800c8c2:	bf00      	nop

0800c8c4 <cleanup_glue>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	6809      	ldr	r1, [r1, #0]
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	b109      	cbz	r1, 800c8d2 <cleanup_glue+0xe>
 800c8ce:	f7ff fff9 	bl	800c8c4 <cleanup_glue>
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8da:	f7ff bc79 	b.w	800c1d0 <_free_r>
 800c8de:	bf00      	nop

0800c8e0 <_reclaim_reent>:
 800c8e0:	f240 0308 	movw	r3, #8
 800c8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4298      	cmp	r0, r3
 800c8f0:	d054      	beq.n	800c99c <_reclaim_reent+0xbc>
 800c8f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c8f4:	b1f3      	cbz	r3, 800c934 <_reclaim_reent+0x54>
 800c8f6:	68da      	ldr	r2, [r3, #12]
 800c8f8:	b1ba      	cbz	r2, 800c92a <_reclaim_reent+0x4a>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	461e      	mov	r6, r3
 800c8fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c902:	b909      	cbnz	r1, 800c908 <_reclaim_reent+0x28>
 800c904:	e008      	b.n	800c918 <_reclaim_reent+0x38>
 800c906:	4621      	mov	r1, r4
 800c908:	680c      	ldr	r4, [r1, #0]
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7ff fc60 	bl	800c1d0 <_free_r>
 800c910:	2c00      	cmp	r4, #0
 800c912:	d1f8      	bne.n	800c906 <_reclaim_reent+0x26>
 800c914:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	3601      	adds	r6, #1
 800c91a:	2e20      	cmp	r6, #32
 800c91c:	4633      	mov	r3, r6
 800c91e:	d1ee      	bne.n	800c8fe <_reclaim_reent+0x1e>
 800c920:	4611      	mov	r1, r2
 800c922:	4628      	mov	r0, r5
 800c924:	f7ff fc54 	bl	800c1d0 <_free_r>
 800c928:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c92a:	6819      	ldr	r1, [r3, #0]
 800c92c:	b111      	cbz	r1, 800c934 <_reclaim_reent+0x54>
 800c92e:	4628      	mov	r0, r5
 800c930:	f7ff fc4e 	bl	800c1d0 <_free_r>
 800c934:	6969      	ldr	r1, [r5, #20]
 800c936:	b111      	cbz	r1, 800c93e <_reclaim_reent+0x5e>
 800c938:	4628      	mov	r0, r5
 800c93a:	f7ff fc49 	bl	800c1d0 <_free_r>
 800c93e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c940:	b111      	cbz	r1, 800c948 <_reclaim_reent+0x68>
 800c942:	4628      	mov	r0, r5
 800c944:	f7ff fc44 	bl	800c1d0 <_free_r>
 800c948:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800c94a:	b111      	cbz	r1, 800c952 <_reclaim_reent+0x72>
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff fc3f 	bl	800c1d0 <_free_r>
 800c952:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800c954:	b111      	cbz	r1, 800c95c <_reclaim_reent+0x7c>
 800c956:	4628      	mov	r0, r5
 800c958:	f7ff fc3a 	bl	800c1d0 <_free_r>
 800c95c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800c95e:	b111      	cbz	r1, 800c966 <_reclaim_reent+0x86>
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff fc35 	bl	800c1d0 <_free_r>
 800c966:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
 800c96a:	b111      	cbz	r1, 800c972 <_reclaim_reent+0x92>
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7ff fc2f 	bl	800c1d0 <_free_r>
 800c972:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
 800c976:	b111      	cbz	r1, 800c97e <_reclaim_reent+0x9e>
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff fc29 	bl	800c1d0 <_free_r>
 800c97e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800c980:	b12b      	cbz	r3, 800c98e <_reclaim_reent+0xae>
 800c982:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800c986:	b111      	cbz	r1, 800c98e <_reclaim_reent+0xae>
 800c988:	4628      	mov	r0, r5
 800c98a:	f7ff fc21 	bl	800c1d0 <_free_r>
 800c98e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800c990:	b111      	cbz	r1, 800c998 <_reclaim_reent+0xb8>
 800c992:	4628      	mov	r0, r5
 800c994:	f7ff fc1c 	bl	800c1d0 <_free_r>
 800c998:	69ab      	ldr	r3, [r5, #24]
 800c99a:	b903      	cbnz	r3, 800c99e <_reclaim_reent+0xbe>
 800c99c:	bd70      	pop	{r4, r5, r6, pc}
 800c99e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	4798      	blx	r3
 800c9a4:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
 800c9a8:	2900      	cmp	r1, #0
 800c9aa:	d0f7      	beq.n	800c99c <_reclaim_reent+0xbc>
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b2:	f7ff bf87 	b.w	800c8c4 <cleanup_glue>
 800c9b6:	bf00      	nop

0800c9b8 <__aeabi_uidiv>:
 800c9b8:	1e4a      	subs	r2, r1, #1
 800c9ba:	bf08      	it	eq
 800c9bc:	4770      	bxeq	lr
 800c9be:	f0c0 8124 	bcc.w	800cc0a <__aeabi_uidiv+0x252>
 800c9c2:	4288      	cmp	r0, r1
 800c9c4:	f240 8116 	bls.w	800cbf4 <__aeabi_uidiv+0x23c>
 800c9c8:	4211      	tst	r1, r2
 800c9ca:	f000 8117 	beq.w	800cbfc <__aeabi_uidiv+0x244>
 800c9ce:	fab0 f380 	clz	r3, r0
 800c9d2:	fab1 f281 	clz	r2, r1
 800c9d6:	eba2 0303 	sub.w	r3, r2, r3
 800c9da:	f1c3 031f 	rsb	r3, r3, #31
 800c9de:	a204      	add	r2, pc, #16	; (adr r2, 800c9f0 <__aeabi_uidiv+0x38>)
 800c9e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800c9e4:	f04f 0200 	mov.w	r2, #0
 800c9e8:	469f      	mov	pc, r3
 800c9ea:	bf00      	nop
 800c9ec:	f3af 8000 	nop.w
 800c9f0:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
 800c9f4:	bf00      	nop
 800c9f6:	eb42 0202 	adc.w	r2, r2, r2
 800c9fa:	bf28      	it	cs
 800c9fc:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
 800ca00:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
 800ca04:	bf00      	nop
 800ca06:	eb42 0202 	adc.w	r2, r2, r2
 800ca0a:	bf28      	it	cs
 800ca0c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
 800ca10:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
 800ca14:	bf00      	nop
 800ca16:	eb42 0202 	adc.w	r2, r2, r2
 800ca1a:	bf28      	it	cs
 800ca1c:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
 800ca20:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
 800ca24:	bf00      	nop
 800ca26:	eb42 0202 	adc.w	r2, r2, r2
 800ca2a:	bf28      	it	cs
 800ca2c:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
 800ca30:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
 800ca34:	bf00      	nop
 800ca36:	eb42 0202 	adc.w	r2, r2, r2
 800ca3a:	bf28      	it	cs
 800ca3c:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
 800ca40:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
 800ca44:	bf00      	nop
 800ca46:	eb42 0202 	adc.w	r2, r2, r2
 800ca4a:	bf28      	it	cs
 800ca4c:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
 800ca50:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
 800ca54:	bf00      	nop
 800ca56:	eb42 0202 	adc.w	r2, r2, r2
 800ca5a:	bf28      	it	cs
 800ca5c:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
 800ca60:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
 800ca64:	bf00      	nop
 800ca66:	eb42 0202 	adc.w	r2, r2, r2
 800ca6a:	bf28      	it	cs
 800ca6c:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
 800ca70:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
 800ca74:	bf00      	nop
 800ca76:	eb42 0202 	adc.w	r2, r2, r2
 800ca7a:	bf28      	it	cs
 800ca7c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
 800ca80:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
 800ca84:	bf00      	nop
 800ca86:	eb42 0202 	adc.w	r2, r2, r2
 800ca8a:	bf28      	it	cs
 800ca8c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
 800ca90:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 800ca94:	bf00      	nop
 800ca96:	eb42 0202 	adc.w	r2, r2, r2
 800ca9a:	bf28      	it	cs
 800ca9c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
 800caa0:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
 800caa4:	bf00      	nop
 800caa6:	eb42 0202 	adc.w	r2, r2, r2
 800caaa:	bf28      	it	cs
 800caac:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
 800cab0:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
 800cab4:	bf00      	nop
 800cab6:	eb42 0202 	adc.w	r2, r2, r2
 800caba:	bf28      	it	cs
 800cabc:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
 800cac0:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
 800cac4:	bf00      	nop
 800cac6:	eb42 0202 	adc.w	r2, r2, r2
 800caca:	bf28      	it	cs
 800cacc:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
 800cad0:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
 800cad4:	bf00      	nop
 800cad6:	eb42 0202 	adc.w	r2, r2, r2
 800cada:	bf28      	it	cs
 800cadc:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
 800cae0:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
 800cae4:	bf00      	nop
 800cae6:	eb42 0202 	adc.w	r2, r2, r2
 800caea:	bf28      	it	cs
 800caec:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
 800caf0:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
 800caf4:	bf00      	nop
 800caf6:	eb42 0202 	adc.w	r2, r2, r2
 800cafa:	bf28      	it	cs
 800cafc:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
 800cb00:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
 800cb04:	bf00      	nop
 800cb06:	eb42 0202 	adc.w	r2, r2, r2
 800cb0a:	bf28      	it	cs
 800cb0c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
 800cb10:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
 800cb14:	bf00      	nop
 800cb16:	eb42 0202 	adc.w	r2, r2, r2
 800cb1a:	bf28      	it	cs
 800cb1c:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
 800cb20:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
 800cb24:	bf00      	nop
 800cb26:	eb42 0202 	adc.w	r2, r2, r2
 800cb2a:	bf28      	it	cs
 800cb2c:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
 800cb30:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
 800cb34:	bf00      	nop
 800cb36:	eb42 0202 	adc.w	r2, r2, r2
 800cb3a:	bf28      	it	cs
 800cb3c:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
 800cb40:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
 800cb44:	bf00      	nop
 800cb46:	eb42 0202 	adc.w	r2, r2, r2
 800cb4a:	bf28      	it	cs
 800cb4c:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
 800cb50:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
 800cb54:	bf00      	nop
 800cb56:	eb42 0202 	adc.w	r2, r2, r2
 800cb5a:	bf28      	it	cs
 800cb5c:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
 800cb60:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
 800cb64:	bf00      	nop
 800cb66:	eb42 0202 	adc.w	r2, r2, r2
 800cb6a:	bf28      	it	cs
 800cb6c:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
 800cb70:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
 800cb74:	bf00      	nop
 800cb76:	eb42 0202 	adc.w	r2, r2, r2
 800cb7a:	bf28      	it	cs
 800cb7c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
 800cb80:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
 800cb84:	bf00      	nop
 800cb86:	eb42 0202 	adc.w	r2, r2, r2
 800cb8a:	bf28      	it	cs
 800cb8c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
 800cb90:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 800cb94:	bf00      	nop
 800cb96:	eb42 0202 	adc.w	r2, r2, r2
 800cb9a:	bf28      	it	cs
 800cb9c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
 800cba0:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
 800cba4:	bf00      	nop
 800cba6:	eb42 0202 	adc.w	r2, r2, r2
 800cbaa:	bf28      	it	cs
 800cbac:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
 800cbb0:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
 800cbb4:	bf00      	nop
 800cbb6:	eb42 0202 	adc.w	r2, r2, r2
 800cbba:	bf28      	it	cs
 800cbbc:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
 800cbc0:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
 800cbc4:	bf00      	nop
 800cbc6:	eb42 0202 	adc.w	r2, r2, r2
 800cbca:	bf28      	it	cs
 800cbcc:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
 800cbd0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 800cbd4:	bf00      	nop
 800cbd6:	eb42 0202 	adc.w	r2, r2, r2
 800cbda:	bf28      	it	cs
 800cbdc:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
 800cbe0:	ebb0 0f01 	cmp.w	r0, r1
 800cbe4:	bf00      	nop
 800cbe6:	eb42 0202 	adc.w	r2, r2, r2
 800cbea:	bf28      	it	cs
 800cbec:	eba0 0001 	subcs.w	r0, r0, r1
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4770      	bx	lr
 800cbf4:	bf0c      	ite	eq
 800cbf6:	2001      	moveq	r0, #1
 800cbf8:	2000      	movne	r0, #0
 800cbfa:	4770      	bx	lr
 800cbfc:	fab1 f281 	clz	r2, r1
 800cc00:	f1c2 021f 	rsb	r2, r2, #31
 800cc04:	fa20 f002 	lsr.w	r0, r0, r2
 800cc08:	4770      	bx	lr
 800cc0a:	b108      	cbz	r0, 800cc10 <__aeabi_uidiv+0x258>
 800cc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc10:	f000 b80e 	b.w	800cc30 <__aeabi_idiv0>

0800cc14 <__aeabi_uidivmod>:
 800cc14:	2900      	cmp	r1, #0
 800cc16:	d0f8      	beq.n	800cc0a <__aeabi_uidiv+0x252>
 800cc18:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
 800cc1c:	f7ff fecc 	bl	800c9b8 <__aeabi_uidiv>
 800cc20:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
 800cc24:	fb02 f300 	mul.w	r3, r2, r0
 800cc28:	eba1 0103 	sub.w	r1, r1, r3
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop

0800cc30 <__aeabi_idiv0>:
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop

0800cc34 <__aeabi_drsub>:
 800cc34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800cc38:	e002      	b.n	800cc40 <__adddf3>
 800cc3a:	bf00      	nop

0800cc3c <__aeabi_dsub>:
 800cc3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800cc40 <__adddf3>:
 800cc40:	b530      	push	{r4, r5, lr}
 800cc42:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800cc46:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800cc4a:	ea94 0f05 	teq	r4, r5
 800cc4e:	bf08      	it	eq
 800cc50:	ea90 0f02 	teqeq	r0, r2
 800cc54:	bf1f      	itttt	ne
 800cc56:	ea54 0c00 	orrsne.w	ip, r4, r0
 800cc5a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800cc5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800cc62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800cc66:	f000 80e2 	beq.w	800ce2e <__adddf3+0x1ee>
 800cc6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800cc6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800cc72:	bfb8      	it	lt
 800cc74:	426d      	neglt	r5, r5
 800cc76:	dd0c      	ble.n	800cc92 <__adddf3+0x52>
 800cc78:	442c      	add	r4, r5
 800cc7a:	ea80 0202 	eor.w	r2, r0, r2
 800cc7e:	ea81 0303 	eor.w	r3, r1, r3
 800cc82:	ea82 0000 	eor.w	r0, r2, r0
 800cc86:	ea83 0101 	eor.w	r1, r3, r1
 800cc8a:	ea80 0202 	eor.w	r2, r0, r2
 800cc8e:	ea81 0303 	eor.w	r3, r1, r3
 800cc92:	2d36      	cmp	r5, #54	; 0x36
 800cc94:	bf88      	it	hi
 800cc96:	bd30      	pophi	{r4, r5, pc}
 800cc98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800cc9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800cca0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800cca4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800cca8:	d002      	beq.n	800ccb0 <__adddf3+0x70>
 800ccaa:	4240      	negs	r0, r0
 800ccac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ccb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800ccb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ccb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800ccbc:	d002      	beq.n	800ccc4 <__adddf3+0x84>
 800ccbe:	4252      	negs	r2, r2
 800ccc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800ccc4:	ea94 0f05 	teq	r4, r5
 800ccc8:	f000 80a7 	beq.w	800ce1a <__adddf3+0x1da>
 800cccc:	f1a4 0401 	sub.w	r4, r4, #1
 800ccd0:	f1d5 0e20 	rsbs	lr, r5, #32
 800ccd4:	db0d      	blt.n	800ccf2 <__adddf3+0xb2>
 800ccd6:	fa02 fc0e 	lsl.w	ip, r2, lr
 800ccda:	fa22 f205 	lsr.w	r2, r2, r5
 800ccde:	1880      	adds	r0, r0, r2
 800cce0:	f141 0100 	adc.w	r1, r1, #0
 800cce4:	fa03 f20e 	lsl.w	r2, r3, lr
 800cce8:	1880      	adds	r0, r0, r2
 800ccea:	fa43 f305 	asr.w	r3, r3, r5
 800ccee:	4159      	adcs	r1, r3
 800ccf0:	e00e      	b.n	800cd10 <__adddf3+0xd0>
 800ccf2:	f1a5 0520 	sub.w	r5, r5, #32
 800ccf6:	f10e 0e20 	add.w	lr, lr, #32
 800ccfa:	2a01      	cmp	r2, #1
 800ccfc:	fa03 fc0e 	lsl.w	ip, r3, lr
 800cd00:	bf28      	it	cs
 800cd02:	f04c 0c02 	orrcs.w	ip, ip, #2
 800cd06:	fa43 f305 	asr.w	r3, r3, r5
 800cd0a:	18c0      	adds	r0, r0, r3
 800cd0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800cd10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cd14:	d507      	bpl.n	800cd26 <__adddf3+0xe6>
 800cd16:	f04f 0e00 	mov.w	lr, #0
 800cd1a:	f1dc 0c00 	rsbs	ip, ip, #0
 800cd1e:	eb7e 0000 	sbcs.w	r0, lr, r0
 800cd22:	eb6e 0101 	sbc.w	r1, lr, r1
 800cd26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cd2a:	d31b      	bcc.n	800cd64 <__adddf3+0x124>
 800cd2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800cd30:	d30c      	bcc.n	800cd4c <__adddf3+0x10c>
 800cd32:	0849      	lsrs	r1, r1, #1
 800cd34:	ea5f 0030 	movs.w	r0, r0, rrx
 800cd38:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800cd3c:	f104 0401 	add.w	r4, r4, #1
 800cd40:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800cd44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800cd48:	f080 809a 	bcs.w	800ce80 <__adddf3+0x240>
 800cd4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800cd50:	bf08      	it	eq
 800cd52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800cd56:	f150 0000 	adcs.w	r0, r0, #0
 800cd5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800cd5e:	ea41 0105 	orr.w	r1, r1, r5
 800cd62:	bd30      	pop	{r4, r5, pc}
 800cd64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800cd68:	4140      	adcs	r0, r0
 800cd6a:	eb41 0101 	adc.w	r1, r1, r1
 800cd6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cd72:	f1a4 0401 	sub.w	r4, r4, #1
 800cd76:	d1e9      	bne.n	800cd4c <__adddf3+0x10c>
 800cd78:	f091 0f00 	teq	r1, #0
 800cd7c:	bf04      	itt	eq
 800cd7e:	4601      	moveq	r1, r0
 800cd80:	2000      	moveq	r0, #0
 800cd82:	fab1 f381 	clz	r3, r1
 800cd86:	bf08      	it	eq
 800cd88:	3320      	addeq	r3, #32
 800cd8a:	f1a3 030b 	sub.w	r3, r3, #11
 800cd8e:	f1b3 0220 	subs.w	r2, r3, #32
 800cd92:	da0c      	bge.n	800cdae <__adddf3+0x16e>
 800cd94:	320c      	adds	r2, #12
 800cd96:	dd08      	ble.n	800cdaa <__adddf3+0x16a>
 800cd98:	f102 0c14 	add.w	ip, r2, #20
 800cd9c:	f1c2 020c 	rsb	r2, r2, #12
 800cda0:	fa01 f00c 	lsl.w	r0, r1, ip
 800cda4:	fa21 f102 	lsr.w	r1, r1, r2
 800cda8:	e00c      	b.n	800cdc4 <__adddf3+0x184>
 800cdaa:	f102 0214 	add.w	r2, r2, #20
 800cdae:	bfd8      	it	le
 800cdb0:	f1c2 0c20 	rsble	ip, r2, #32
 800cdb4:	fa01 f102 	lsl.w	r1, r1, r2
 800cdb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 800cdbc:	bfdc      	itt	le
 800cdbe:	ea41 010c 	orrle.w	r1, r1, ip
 800cdc2:	4090      	lslle	r0, r2
 800cdc4:	1ae4      	subs	r4, r4, r3
 800cdc6:	bfa2      	ittt	ge
 800cdc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800cdcc:	4329      	orrge	r1, r5
 800cdce:	bd30      	popge	{r4, r5, pc}
 800cdd0:	ea6f 0404 	mvn.w	r4, r4
 800cdd4:	3c1f      	subs	r4, #31
 800cdd6:	da1c      	bge.n	800ce12 <__adddf3+0x1d2>
 800cdd8:	340c      	adds	r4, #12
 800cdda:	dc0e      	bgt.n	800cdfa <__adddf3+0x1ba>
 800cddc:	f104 0414 	add.w	r4, r4, #20
 800cde0:	f1c4 0220 	rsb	r2, r4, #32
 800cde4:	fa20 f004 	lsr.w	r0, r0, r4
 800cde8:	fa01 f302 	lsl.w	r3, r1, r2
 800cdec:	ea40 0003 	orr.w	r0, r0, r3
 800cdf0:	fa21 f304 	lsr.w	r3, r1, r4
 800cdf4:	ea45 0103 	orr.w	r1, r5, r3
 800cdf8:	bd30      	pop	{r4, r5, pc}
 800cdfa:	f1c4 040c 	rsb	r4, r4, #12
 800cdfe:	f1c4 0220 	rsb	r2, r4, #32
 800ce02:	fa20 f002 	lsr.w	r0, r0, r2
 800ce06:	fa01 f304 	lsl.w	r3, r1, r4
 800ce0a:	ea40 0003 	orr.w	r0, r0, r3
 800ce0e:	4629      	mov	r1, r5
 800ce10:	bd30      	pop	{r4, r5, pc}
 800ce12:	fa21 f004 	lsr.w	r0, r1, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	bd30      	pop	{r4, r5, pc}
 800ce1a:	f094 0f00 	teq	r4, #0
 800ce1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800ce22:	bf06      	itte	eq
 800ce24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800ce28:	3401      	addeq	r4, #1
 800ce2a:	3d01      	subne	r5, #1
 800ce2c:	e74e      	b.n	800cccc <__adddf3+0x8c>
 800ce2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ce32:	bf18      	it	ne
 800ce34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800ce38:	d029      	beq.n	800ce8e <__adddf3+0x24e>
 800ce3a:	ea94 0f05 	teq	r4, r5
 800ce3e:	bf08      	it	eq
 800ce40:	ea90 0f02 	teqeq	r0, r2
 800ce44:	d005      	beq.n	800ce52 <__adddf3+0x212>
 800ce46:	ea54 0c00 	orrs.w	ip, r4, r0
 800ce4a:	bf04      	itt	eq
 800ce4c:	4619      	moveq	r1, r3
 800ce4e:	4610      	moveq	r0, r2
 800ce50:	bd30      	pop	{r4, r5, pc}
 800ce52:	ea91 0f03 	teq	r1, r3
 800ce56:	bf1e      	ittt	ne
 800ce58:	2100      	movne	r1, #0
 800ce5a:	2000      	movne	r0, #0
 800ce5c:	bd30      	popne	{r4, r5, pc}
 800ce5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800ce62:	d105      	bne.n	800ce70 <__adddf3+0x230>
 800ce64:	0040      	lsls	r0, r0, #1
 800ce66:	4149      	adcs	r1, r1
 800ce68:	bf28      	it	cs
 800ce6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800ce6e:	bd30      	pop	{r4, r5, pc}
 800ce70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800ce74:	bf3c      	itt	cc
 800ce76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800ce7a:	bd30      	popcc	{r4, r5, pc}
 800ce7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ce80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800ce84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce88:	f04f 0000 	mov.w	r0, #0
 800ce8c:	bd30      	pop	{r4, r5, pc}
 800ce8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ce92:	bf1a      	itte	ne
 800ce94:	4619      	movne	r1, r3
 800ce96:	4610      	movne	r0, r2
 800ce98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800ce9c:	bf1c      	itt	ne
 800ce9e:	460b      	movne	r3, r1
 800cea0:	4602      	movne	r2, r0
 800cea2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800cea6:	bf06      	itte	eq
 800cea8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800ceac:	ea91 0f03 	teqeq	r1, r3
 800ceb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800ceb4:	bd30      	pop	{r4, r5, pc}
 800ceb6:	bf00      	nop

0800ceb8 <__aeabi_ui2d>:
 800ceb8:	f090 0f00 	teq	r0, #0
 800cebc:	bf04      	itt	eq
 800cebe:	2100      	moveq	r1, #0
 800cec0:	4770      	bxeq	lr
 800cec2:	b530      	push	{r4, r5, lr}
 800cec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800cec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800cecc:	f04f 0500 	mov.w	r5, #0
 800ced0:	f04f 0100 	mov.w	r1, #0
 800ced4:	e750      	b.n	800cd78 <__adddf3+0x138>
 800ced6:	bf00      	nop

0800ced8 <__aeabi_i2d>:
 800ced8:	f090 0f00 	teq	r0, #0
 800cedc:	bf04      	itt	eq
 800cede:	2100      	moveq	r1, #0
 800cee0:	4770      	bxeq	lr
 800cee2:	b530      	push	{r4, r5, lr}
 800cee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800cee8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ceec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800cef0:	bf48      	it	mi
 800cef2:	4240      	negmi	r0, r0
 800cef4:	f04f 0100 	mov.w	r1, #0
 800cef8:	e73e      	b.n	800cd78 <__adddf3+0x138>
 800cefa:	bf00      	nop

0800cefc <__aeabi_f2d>:
 800cefc:	0042      	lsls	r2, r0, #1
 800cefe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800cf02:	ea4f 0131 	mov.w	r1, r1, rrx
 800cf06:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800cf0a:	bf1f      	itttt	ne
 800cf0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800cf10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800cf14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800cf18:	4770      	bxne	lr
 800cf1a:	f092 0f00 	teq	r2, #0
 800cf1e:	bf14      	ite	ne
 800cf20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800cf24:	4770      	bxeq	lr
 800cf26:	b530      	push	{r4, r5, lr}
 800cf28:	f44f 7460 	mov.w	r4, #896	; 0x380
 800cf2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cf30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cf34:	e720      	b.n	800cd78 <__adddf3+0x138>
 800cf36:	bf00      	nop

0800cf38 <__aeabi_ul2d>:
 800cf38:	ea50 0201 	orrs.w	r2, r0, r1
 800cf3c:	bf08      	it	eq
 800cf3e:	4770      	bxeq	lr
 800cf40:	b530      	push	{r4, r5, lr}
 800cf42:	f04f 0500 	mov.w	r5, #0
 800cf46:	e00a      	b.n	800cf5e <__aeabi_l2d+0x16>

0800cf48 <__aeabi_l2d>:
 800cf48:	ea50 0201 	orrs.w	r2, r0, r1
 800cf4c:	bf08      	it	eq
 800cf4e:	4770      	bxeq	lr
 800cf50:	b530      	push	{r4, r5, lr}
 800cf52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800cf56:	d502      	bpl.n	800cf5e <__aeabi_l2d+0x16>
 800cf58:	4240      	negs	r0, r0
 800cf5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800cf5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800cf62:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800cf66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800cf6a:	f43f aedc 	beq.w	800cd26 <__adddf3+0xe6>
 800cf6e:	f04f 0203 	mov.w	r2, #3
 800cf72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800cf76:	bf18      	it	ne
 800cf78:	3203      	addne	r2, #3
 800cf7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800cf7e:	bf18      	it	ne
 800cf80:	3203      	addne	r2, #3
 800cf82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800cf86:	f1c2 0320 	rsb	r3, r2, #32
 800cf8a:	fa00 fc03 	lsl.w	ip, r0, r3
 800cf8e:	fa20 f002 	lsr.w	r0, r0, r2
 800cf92:	fa01 fe03 	lsl.w	lr, r1, r3
 800cf96:	ea40 000e 	orr.w	r0, r0, lr
 800cf9a:	fa21 f102 	lsr.w	r1, r1, r2
 800cf9e:	4414      	add	r4, r2
 800cfa0:	e6c1      	b.n	800cd26 <__adddf3+0xe6>
 800cfa2:	bf00      	nop

0800cfa4 <__aeabi_dmul>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800cfaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800cfae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800cfb2:	bf1d      	ittte	ne
 800cfb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800cfb8:	ea94 0f0c 	teqne	r4, ip
 800cfbc:	ea95 0f0c 	teqne	r5, ip
 800cfc0:	f000 f8de 	bleq	800d180 <__aeabi_dmul+0x1dc>
 800cfc4:	442c      	add	r4, r5
 800cfc6:	ea81 0603 	eor.w	r6, r1, r3
 800cfca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800cfce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800cfd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800cfd6:	bf18      	it	ne
 800cfd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800cfdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cfe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfe4:	d038      	beq.n	800d058 <__aeabi_dmul+0xb4>
 800cfe6:	fba0 ce02 	umull	ip, lr, r0, r2
 800cfea:	f04f 0500 	mov.w	r5, #0
 800cfee:	fbe1 e502 	umlal	lr, r5, r1, r2
 800cff2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800cff6:	fbe0 e503 	umlal	lr, r5, r0, r3
 800cffa:	f04f 0600 	mov.w	r6, #0
 800cffe:	fbe1 5603 	umlal	r5, r6, r1, r3
 800d002:	f09c 0f00 	teq	ip, #0
 800d006:	bf18      	it	ne
 800d008:	f04e 0e01 	orrne.w	lr, lr, #1
 800d00c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800d010:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800d014:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800d018:	d204      	bcs.n	800d024 <__aeabi_dmul+0x80>
 800d01a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800d01e:	416d      	adcs	r5, r5
 800d020:	eb46 0606 	adc.w	r6, r6, r6
 800d024:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800d028:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800d02c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800d030:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800d034:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800d038:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d03c:	bf88      	it	hi
 800d03e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d042:	d81e      	bhi.n	800d082 <__aeabi_dmul+0xde>
 800d044:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800d048:	bf08      	it	eq
 800d04a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800d04e:	f150 0000 	adcs.w	r0, r0, #0
 800d052:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800d05c:	ea46 0101 	orr.w	r1, r6, r1
 800d060:	ea40 0002 	orr.w	r0, r0, r2
 800d064:	ea81 0103 	eor.w	r1, r1, r3
 800d068:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800d06c:	bfc2      	ittt	gt
 800d06e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d072:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d076:	bd70      	popgt	{r4, r5, r6, pc}
 800d078:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d07c:	f04f 0e00 	mov.w	lr, #0
 800d080:	3c01      	subs	r4, #1
 800d082:	f300 80ab 	bgt.w	800d1dc <__aeabi_dmul+0x238>
 800d086:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800d08a:	bfde      	ittt	le
 800d08c:	2000      	movle	r0, #0
 800d08e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800d092:	bd70      	pople	{r4, r5, r6, pc}
 800d094:	f1c4 0400 	rsb	r4, r4, #0
 800d098:	3c20      	subs	r4, #32
 800d09a:	da35      	bge.n	800d108 <__aeabi_dmul+0x164>
 800d09c:	340c      	adds	r4, #12
 800d09e:	dc1b      	bgt.n	800d0d8 <__aeabi_dmul+0x134>
 800d0a0:	f104 0414 	add.w	r4, r4, #20
 800d0a4:	f1c4 0520 	rsb	r5, r4, #32
 800d0a8:	fa00 f305 	lsl.w	r3, r0, r5
 800d0ac:	fa20 f004 	lsr.w	r0, r0, r4
 800d0b0:	fa01 f205 	lsl.w	r2, r1, r5
 800d0b4:	ea40 0002 	orr.w	r0, r0, r2
 800d0b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800d0bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d0c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d0c4:	fa21 f604 	lsr.w	r6, r1, r4
 800d0c8:	eb42 0106 	adc.w	r1, r2, r6
 800d0cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d0d0:	bf08      	it	eq
 800d0d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d0d6:	bd70      	pop	{r4, r5, r6, pc}
 800d0d8:	f1c4 040c 	rsb	r4, r4, #12
 800d0dc:	f1c4 0520 	rsb	r5, r4, #32
 800d0e0:	fa00 f304 	lsl.w	r3, r0, r4
 800d0e4:	fa20 f005 	lsr.w	r0, r0, r5
 800d0e8:	fa01 f204 	lsl.w	r2, r1, r4
 800d0ec:	ea40 0002 	orr.w	r0, r0, r2
 800d0f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d0f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d0f8:	f141 0100 	adc.w	r1, r1, #0
 800d0fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d100:	bf08      	it	eq
 800d102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	f1c4 0520 	rsb	r5, r4, #32
 800d10c:	fa00 f205 	lsl.w	r2, r0, r5
 800d110:	ea4e 0e02 	orr.w	lr, lr, r2
 800d114:	fa20 f304 	lsr.w	r3, r0, r4
 800d118:	fa01 f205 	lsl.w	r2, r1, r5
 800d11c:	ea43 0302 	orr.w	r3, r3, r2
 800d120:	fa21 f004 	lsr.w	r0, r1, r4
 800d124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d128:	fa21 f204 	lsr.w	r2, r1, r4
 800d12c:	ea20 0002 	bic.w	r0, r0, r2
 800d130:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800d134:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d138:	bf08      	it	eq
 800d13a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	f094 0f00 	teq	r4, #0
 800d144:	d10f      	bne.n	800d166 <__aeabi_dmul+0x1c2>
 800d146:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800d14a:	0040      	lsls	r0, r0, #1
 800d14c:	eb41 0101 	adc.w	r1, r1, r1
 800d150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d154:	bf08      	it	eq
 800d156:	3c01      	subeq	r4, #1
 800d158:	d0f7      	beq.n	800d14a <__aeabi_dmul+0x1a6>
 800d15a:	ea41 0106 	orr.w	r1, r1, r6
 800d15e:	f095 0f00 	teq	r5, #0
 800d162:	bf18      	it	ne
 800d164:	4770      	bxne	lr
 800d166:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800d16a:	0052      	lsls	r2, r2, #1
 800d16c:	eb43 0303 	adc.w	r3, r3, r3
 800d170:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800d174:	bf08      	it	eq
 800d176:	3d01      	subeq	r5, #1
 800d178:	d0f7      	beq.n	800d16a <__aeabi_dmul+0x1c6>
 800d17a:	ea43 0306 	orr.w	r3, r3, r6
 800d17e:	4770      	bx	lr
 800d180:	ea94 0f0c 	teq	r4, ip
 800d184:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d188:	bf18      	it	ne
 800d18a:	ea95 0f0c 	teqne	r5, ip
 800d18e:	d00c      	beq.n	800d1aa <__aeabi_dmul+0x206>
 800d190:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d194:	bf18      	it	ne
 800d196:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d19a:	d1d1      	bne.n	800d140 <__aeabi_dmul+0x19c>
 800d19c:	ea81 0103 	eor.w	r1, r1, r3
 800d1a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d1a4:	f04f 0000 	mov.w	r0, #0
 800d1a8:	bd70      	pop	{r4, r5, r6, pc}
 800d1aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d1ae:	bf06      	itte	eq
 800d1b0:	4610      	moveq	r0, r2
 800d1b2:	4619      	moveq	r1, r3
 800d1b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d1b8:	d019      	beq.n	800d1ee <__aeabi_dmul+0x24a>
 800d1ba:	ea94 0f0c 	teq	r4, ip
 800d1be:	d102      	bne.n	800d1c6 <__aeabi_dmul+0x222>
 800d1c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800d1c4:	d113      	bne.n	800d1ee <__aeabi_dmul+0x24a>
 800d1c6:	ea95 0f0c 	teq	r5, ip
 800d1ca:	d105      	bne.n	800d1d8 <__aeabi_dmul+0x234>
 800d1cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800d1d0:	bf1c      	itt	ne
 800d1d2:	4610      	movne	r0, r2
 800d1d4:	4619      	movne	r1, r3
 800d1d6:	d10a      	bne.n	800d1ee <__aeabi_dmul+0x24a>
 800d1d8:	ea81 0103 	eor.w	r1, r1, r3
 800d1dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d1e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800d1e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d1e8:	f04f 0000 	mov.w	r0, #0
 800d1ec:	bd70      	pop	{r4, r5, r6, pc}
 800d1ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800d1f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}

0800d1f8 <__aeabi_ddiv>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d1fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800d202:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d206:	bf1d      	ittte	ne
 800d208:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d20c:	ea94 0f0c 	teqne	r4, ip
 800d210:	ea95 0f0c 	teqne	r5, ip
 800d214:	f000 f8a7 	bleq	800d366 <__aeabi_ddiv+0x16e>
 800d218:	eba4 0405 	sub.w	r4, r4, r5
 800d21c:	ea81 0e03 	eor.w	lr, r1, r3
 800d220:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d224:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d228:	f000 8088 	beq.w	800d33c <__aeabi_ddiv+0x144>
 800d22c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d230:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800d234:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800d238:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800d23c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d240:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800d244:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800d248:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800d24c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800d250:	429d      	cmp	r5, r3
 800d252:	bf08      	it	eq
 800d254:	4296      	cmpeq	r6, r2
 800d256:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800d25a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800d25e:	d202      	bcs.n	800d266 <__aeabi_ddiv+0x6e>
 800d260:	085b      	lsrs	r3, r3, #1
 800d262:	ea4f 0232 	mov.w	r2, r2, rrx
 800d266:	1ab6      	subs	r6, r6, r2
 800d268:	eb65 0503 	sbc.w	r5, r5, r3
 800d26c:	085b      	lsrs	r3, r3, #1
 800d26e:	ea4f 0232 	mov.w	r2, r2, rrx
 800d272:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d276:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800d27a:	ebb6 0e02 	subs.w	lr, r6, r2
 800d27e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d282:	bf22      	ittt	cs
 800d284:	1ab6      	subcs	r6, r6, r2
 800d286:	4675      	movcs	r5, lr
 800d288:	ea40 000c 	orrcs.w	r0, r0, ip
 800d28c:	085b      	lsrs	r3, r3, #1
 800d28e:	ea4f 0232 	mov.w	r2, r2, rrx
 800d292:	ebb6 0e02 	subs.w	lr, r6, r2
 800d296:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d29a:	bf22      	ittt	cs
 800d29c:	1ab6      	subcs	r6, r6, r2
 800d29e:	4675      	movcs	r5, lr
 800d2a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800d2a4:	085b      	lsrs	r3, r3, #1
 800d2a6:	ea4f 0232 	mov.w	r2, r2, rrx
 800d2aa:	ebb6 0e02 	subs.w	lr, r6, r2
 800d2ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d2b2:	bf22      	ittt	cs
 800d2b4:	1ab6      	subcs	r6, r6, r2
 800d2b6:	4675      	movcs	r5, lr
 800d2b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800d2bc:	085b      	lsrs	r3, r3, #1
 800d2be:	ea4f 0232 	mov.w	r2, r2, rrx
 800d2c2:	ebb6 0e02 	subs.w	lr, r6, r2
 800d2c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d2ca:	bf22      	ittt	cs
 800d2cc:	1ab6      	subcs	r6, r6, r2
 800d2ce:	4675      	movcs	r5, lr
 800d2d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800d2d4:	ea55 0e06 	orrs.w	lr, r5, r6
 800d2d8:	d018      	beq.n	800d30c <__aeabi_ddiv+0x114>
 800d2da:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800d2de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800d2e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800d2e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800d2ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800d2ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d2f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800d2f6:	d1c0      	bne.n	800d27a <__aeabi_ddiv+0x82>
 800d2f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d2fc:	d10b      	bne.n	800d316 <__aeabi_ddiv+0x11e>
 800d2fe:	ea41 0100 	orr.w	r1, r1, r0
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d30a:	e7b6      	b.n	800d27a <__aeabi_ddiv+0x82>
 800d30c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d310:	bf04      	itt	eq
 800d312:	4301      	orreq	r1, r0
 800d314:	2000      	moveq	r0, #0
 800d316:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d31a:	bf88      	it	hi
 800d31c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d320:	f63f aeaf 	bhi.w	800d082 <__aeabi_dmul+0xde>
 800d324:	ebb5 0c03 	subs.w	ip, r5, r3
 800d328:	bf04      	itt	eq
 800d32a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800d32e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d332:	f150 0000 	adcs.w	r0, r0, #0
 800d336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d33a:	bd70      	pop	{r4, r5, r6, pc}
 800d33c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800d340:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800d344:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800d348:	bfc2      	ittt	gt
 800d34a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d34e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d352:	bd70      	popgt	{r4, r5, r6, pc}
 800d354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d358:	f04f 0e00 	mov.w	lr, #0
 800d35c:	3c01      	subs	r4, #1
 800d35e:	e690      	b.n	800d082 <__aeabi_dmul+0xde>
 800d360:	ea45 0e06 	orr.w	lr, r5, r6
 800d364:	e68d      	b.n	800d082 <__aeabi_dmul+0xde>
 800d366:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d36a:	ea94 0f0c 	teq	r4, ip
 800d36e:	bf08      	it	eq
 800d370:	ea95 0f0c 	teqeq	r5, ip
 800d374:	f43f af3b 	beq.w	800d1ee <__aeabi_dmul+0x24a>
 800d378:	ea94 0f0c 	teq	r4, ip
 800d37c:	d10a      	bne.n	800d394 <__aeabi_ddiv+0x19c>
 800d37e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d382:	f47f af34 	bne.w	800d1ee <__aeabi_dmul+0x24a>
 800d386:	ea95 0f0c 	teq	r5, ip
 800d38a:	f47f af25 	bne.w	800d1d8 <__aeabi_dmul+0x234>
 800d38e:	4610      	mov	r0, r2
 800d390:	4619      	mov	r1, r3
 800d392:	e72c      	b.n	800d1ee <__aeabi_dmul+0x24a>
 800d394:	ea95 0f0c 	teq	r5, ip
 800d398:	d106      	bne.n	800d3a8 <__aeabi_ddiv+0x1b0>
 800d39a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d39e:	f43f aefd 	beq.w	800d19c <__aeabi_dmul+0x1f8>
 800d3a2:	4610      	mov	r0, r2
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	e722      	b.n	800d1ee <__aeabi_dmul+0x24a>
 800d3a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d3ac:	bf18      	it	ne
 800d3ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d3b2:	f47f aec5 	bne.w	800d140 <__aeabi_dmul+0x19c>
 800d3b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800d3ba:	f47f af0d 	bne.w	800d1d8 <__aeabi_dmul+0x234>
 800d3be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800d3c2:	f47f aeeb 	bne.w	800d19c <__aeabi_dmul+0x1f8>
 800d3c6:	e712      	b.n	800d1ee <__aeabi_dmul+0x24a>

0800d3c8 <__gedf2>:
 800d3c8:	f04f 3cff 	mov.w	ip, #4294967295
 800d3cc:	e006      	b.n	800d3dc <__cmpdf2+0x4>
 800d3ce:	bf00      	nop

0800d3d0 <__ledf2>:
 800d3d0:	f04f 0c01 	mov.w	ip, #1
 800d3d4:	e002      	b.n	800d3dc <__cmpdf2+0x4>
 800d3d6:	bf00      	nop

0800d3d8 <__cmpdf2>:
 800d3d8:	f04f 0c01 	mov.w	ip, #1
 800d3dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 800d3e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800d3e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d3e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d3ec:	bf18      	it	ne
 800d3ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800d3f2:	d01b      	beq.n	800d42c <__cmpdf2+0x54>
 800d3f4:	b001      	add	sp, #4
 800d3f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800d3fa:	bf0c      	ite	eq
 800d3fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800d400:	ea91 0f03 	teqne	r1, r3
 800d404:	bf02      	ittt	eq
 800d406:	ea90 0f02 	teqeq	r0, r2
 800d40a:	2000      	moveq	r0, #0
 800d40c:	4770      	bxeq	lr
 800d40e:	f110 0f00 	cmn.w	r0, #0
 800d412:	ea91 0f03 	teq	r1, r3
 800d416:	bf58      	it	pl
 800d418:	4299      	cmppl	r1, r3
 800d41a:	bf08      	it	eq
 800d41c:	4290      	cmpeq	r0, r2
 800d41e:	bf2c      	ite	cs
 800d420:	17d8      	asrcs	r0, r3, #31
 800d422:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800d426:	f040 0001 	orr.w	r0, r0, #1
 800d42a:	4770      	bx	lr
 800d42c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800d430:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d434:	d102      	bne.n	800d43c <__cmpdf2+0x64>
 800d436:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800d43a:	d107      	bne.n	800d44c <__cmpdf2+0x74>
 800d43c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800d440:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800d444:	d1d6      	bne.n	800d3f4 <__cmpdf2+0x1c>
 800d446:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800d44a:	d0d3      	beq.n	800d3f4 <__cmpdf2+0x1c>
 800d44c:	f85d 0b04 	ldr.w	r0, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop

0800d454 <__aeabi_cdrcmple>:
 800d454:	4684      	mov	ip, r0
 800d456:	4610      	mov	r0, r2
 800d458:	4662      	mov	r2, ip
 800d45a:	468c      	mov	ip, r1
 800d45c:	4619      	mov	r1, r3
 800d45e:	4663      	mov	r3, ip
 800d460:	e000      	b.n	800d464 <__aeabi_cdcmpeq>
 800d462:	bf00      	nop

0800d464 <__aeabi_cdcmpeq>:
 800d464:	b501      	push	{r0, lr}
 800d466:	f7ff ffb7 	bl	800d3d8 <__cmpdf2>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	bf48      	it	mi
 800d46e:	f110 0f00 	cmnmi.w	r0, #0
 800d472:	bd01      	pop	{r0, pc}

0800d474 <__aeabi_dcmpeq>:
 800d474:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d478:	f7ff fff4 	bl	800d464 <__aeabi_cdcmpeq>
 800d47c:	bf0c      	ite	eq
 800d47e:	2001      	moveq	r0, #1
 800d480:	2000      	movne	r0, #0
 800d482:	f85d fb08 	ldr.w	pc, [sp], #8
 800d486:	bf00      	nop

0800d488 <__aeabi_dcmplt>:
 800d488:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d48c:	f7ff ffea 	bl	800d464 <__aeabi_cdcmpeq>
 800d490:	bf34      	ite	cc
 800d492:	2001      	movcc	r0, #1
 800d494:	2000      	movcs	r0, #0
 800d496:	f85d fb08 	ldr.w	pc, [sp], #8
 800d49a:	bf00      	nop

0800d49c <__aeabi_dcmple>:
 800d49c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d4a0:	f7ff ffe0 	bl	800d464 <__aeabi_cdcmpeq>
 800d4a4:	bf94      	ite	ls
 800d4a6:	2001      	movls	r0, #1
 800d4a8:	2000      	movhi	r0, #0
 800d4aa:	f85d fb08 	ldr.w	pc, [sp], #8
 800d4ae:	bf00      	nop

0800d4b0 <__aeabi_dcmpge>:
 800d4b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d4b4:	f7ff ffce 	bl	800d454 <__aeabi_cdrcmple>
 800d4b8:	bf94      	ite	ls
 800d4ba:	2001      	movls	r0, #1
 800d4bc:	2000      	movhi	r0, #0
 800d4be:	f85d fb08 	ldr.w	pc, [sp], #8
 800d4c2:	bf00      	nop

0800d4c4 <__aeabi_dcmpgt>:
 800d4c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800d4c8:	f7ff ffc4 	bl	800d454 <__aeabi_cdrcmple>
 800d4cc:	bf34      	ite	cc
 800d4ce:	2001      	movcc	r0, #1
 800d4d0:	2000      	movcs	r0, #0
 800d4d2:	f85d fb08 	ldr.w	pc, [sp], #8
 800d4d6:	bf00      	nop

0800d4d8 <__aeabi_d2iz>:
 800d4d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d4dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800d4e0:	d215      	bcs.n	800d50e <__aeabi_d2iz+0x36>
 800d4e2:	d511      	bpl.n	800d508 <__aeabi_d2iz+0x30>
 800d4e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800d4e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d4ec:	d912      	bls.n	800d514 <__aeabi_d2iz+0x3c>
 800d4ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d4f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d4fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d4fe:	fa23 f002 	lsr.w	r0, r3, r2
 800d502:	bf18      	it	ne
 800d504:	4240      	negne	r0, r0
 800d506:	4770      	bx	lr
 800d508:	f04f 0000 	mov.w	r0, #0
 800d50c:	4770      	bx	lr
 800d50e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d512:	d105      	bne.n	800d520 <__aeabi_d2iz+0x48>
 800d514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800d518:	bf08      	it	eq
 800d51a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800d51e:	4770      	bx	lr
 800d520:	f04f 0000 	mov.w	r0, #0
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop

0800d528 <__aeabi_d2uiz>:
 800d528:	004a      	lsls	r2, r1, #1
 800d52a:	d211      	bcs.n	800d550 <__aeabi_d2uiz+0x28>
 800d52c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800d530:	d211      	bcs.n	800d556 <__aeabi_d2uiz+0x2e>
 800d532:	d50d      	bpl.n	800d550 <__aeabi_d2uiz+0x28>
 800d534:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800d538:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d53c:	d40e      	bmi.n	800d55c <__aeabi_d2uiz+0x34>
 800d53e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d546:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d54a:	fa23 f002 	lsr.w	r0, r3, r2
 800d54e:	4770      	bx	lr
 800d550:	f04f 0000 	mov.w	r0, #0
 800d554:	4770      	bx	lr
 800d556:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d55a:	d102      	bne.n	800d562 <__aeabi_d2uiz+0x3a>
 800d55c:	f04f 30ff 	mov.w	r0, #4294967295
 800d560:	4770      	bx	lr
 800d562:	f04f 0000 	mov.w	r0, #0
 800d566:	4770      	bx	lr

0800d568 <__aeabi_uldivmod>:
 800d568:	b94b      	cbnz	r3, 800d57e <__aeabi_uldivmod+0x16>
 800d56a:	b942      	cbnz	r2, 800d57e <__aeabi_uldivmod+0x16>
 800d56c:	2900      	cmp	r1, #0
 800d56e:	bf08      	it	eq
 800d570:	2800      	cmpeq	r0, #0
 800d572:	d002      	beq.n	800d57a <__aeabi_uldivmod+0x12>
 800d574:	f04f 31ff 	mov.w	r1, #4294967295
 800d578:	4608      	mov	r0, r1
 800d57a:	f7ff bb59 	b.w	800cc30 <__aeabi_idiv0>
 800d57e:	b082      	sub	sp, #8
 800d580:	46ec      	mov	ip, sp
 800d582:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d586:	f000 f81d 	bl	800d5c4 <__gnu_uldivmod_helper>
 800d58a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d58e:	b002      	add	sp, #8
 800d590:	bc0c      	pop	{r2, r3}
 800d592:	4770      	bx	lr

0800d594 <__gnu_ldivmod_helper>:
 800d594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d598:	4617      	mov	r7, r2
 800d59a:	4680      	mov	r8, r0
 800d59c:	4689      	mov	r9, r1
 800d59e:	469a      	mov	sl, r3
 800d5a0:	9e08      	ldr	r6, [sp, #32]
 800d5a2:	f000 f827 	bl	800d5f4 <__divdi3>
 800d5a6:	fba7 4500 	umull	r4, r5, r7, r0
 800d5aa:	fb07 f701 	mul.w	r7, r7, r1
 800d5ae:	fb00 720a 	mla	r2, r0, sl, r7
 800d5b2:	4415      	add	r5, r2
 800d5b4:	ebb8 0404 	subs.w	r4, r8, r4
 800d5b8:	eb69 0505 	sbc.w	r5, r9, r5
 800d5bc:	e9c6 4500 	strd	r4, r5, [r6]
 800d5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d5c4 <__gnu_uldivmod_helper>:
 800d5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c8:	4617      	mov	r7, r2
 800d5ca:	4680      	mov	r8, r0
 800d5cc:	4689      	mov	r9, r1
 800d5ce:	461d      	mov	r5, r3
 800d5d0:	9e08      	ldr	r6, [sp, #32]
 800d5d2:	f000 f9b9 	bl	800d948 <__udivdi3>
 800d5d6:	fb00 f305 	mul.w	r3, r0, r5
 800d5da:	fba0 4507 	umull	r4, r5, r0, r7
 800d5de:	fb07 3701 	mla	r7, r7, r1, r3
 800d5e2:	443d      	add	r5, r7
 800d5e4:	ebb8 0404 	subs.w	r4, r8, r4
 800d5e8:	eb69 0505 	sbc.w	r5, r9, r5
 800d5ec:	e9c6 4500 	strd	r4, r5, [r6]
 800d5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d5f4 <__divdi3>:
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	4244      	negs	r4, r0
 800d5fa:	eb61 0541 	sbc.w	r5, r1, r1, lsl #1
 800d5fe:	2900      	cmp	r1, #0
 800d600:	f04f 36ff 	mov.w	r6, #4294967295
 800d604:	bfa2      	ittt	ge
 800d606:	4604      	movge	r4, r0
 800d608:	460d      	movge	r5, r1
 800d60a:	2600      	movge	r6, #0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	b085      	sub	sp, #20
 800d610:	f2c0 80c7 	blt.w	800d7a2 <__divdi3+0x1ae>
 800d614:	4620      	mov	r0, r4
 800d616:	46aa      	mov	sl, r5
 800d618:	4694      	mov	ip, r2
 800d61a:	4619      	mov	r1, r3
 800d61c:	4690      	mov	r8, r2
 800d61e:	4627      	mov	r7, r4
 800d620:	46a9      	mov	r9, r5
 800d622:	2b00      	cmp	r3, #0
 800d624:	d158      	bne.n	800d6d8 <__divdi3+0xe4>
 800d626:	42aa      	cmp	r2, r5
 800d628:	d96c      	bls.n	800d704 <__divdi3+0x110>
 800d62a:	fab2 f382 	clz	r3, r2
 800d62e:	b15b      	cbz	r3, 800d648 <__divdi3+0x54>
 800d630:	f1c3 0220 	rsb	r2, r3, #32
 800d634:	fa05 f903 	lsl.w	r9, r5, r3
 800d638:	fa24 f202 	lsr.w	r2, r4, r2
 800d63c:	fa0c f803 	lsl.w	r8, ip, r3
 800d640:	ea42 0909 	orr.w	r9, r2, r9
 800d644:	fa04 f703 	lsl.w	r7, r4, r3
 800d648:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800d64c:	4648      	mov	r0, r9
 800d64e:	4621      	mov	r1, r4
 800d650:	fa1f fa88 	uxth.w	sl, r8
 800d654:	f7ff f9b0 	bl	800c9b8 <__aeabi_uidiv>
 800d658:	4621      	mov	r1, r4
 800d65a:	4683      	mov	fp, r0
 800d65c:	4648      	mov	r0, r9
 800d65e:	f7ff fad9 	bl	800cc14 <__aeabi_uidivmod>
 800d662:	0c3a      	lsrs	r2, r7, #16
 800d664:	fb0a f00b 	mul.w	r0, sl, fp
 800d668:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800d66c:	4288      	cmp	r0, r1
 800d66e:	d90b      	bls.n	800d688 <__divdi3+0x94>
 800d670:	eb11 0108 	adds.w	r1, r1, r8
 800d674:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d678:	d205      	bcs.n	800d686 <__divdi3+0x92>
 800d67a:	4288      	cmp	r0, r1
 800d67c:	bf84      	itt	hi
 800d67e:	f1ab 0b02 	subhi.w	fp, fp, #2
 800d682:	4441      	addhi	r1, r8
 800d684:	d800      	bhi.n	800d688 <__divdi3+0x94>
 800d686:	469b      	mov	fp, r3
 800d688:	ebc0 0901 	rsb	r9, r0, r1
 800d68c:	4621      	mov	r1, r4
 800d68e:	4648      	mov	r0, r9
 800d690:	b2bf      	uxth	r7, r7
 800d692:	f7ff f991 	bl	800c9b8 <__aeabi_uidiv>
 800d696:	4621      	mov	r1, r4
 800d698:	4605      	mov	r5, r0
 800d69a:	4648      	mov	r0, r9
 800d69c:	f7ff faba 	bl	800cc14 <__aeabi_uidivmod>
 800d6a0:	fb0a fa05 	mul.w	sl, sl, r5
 800d6a4:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800d6a8:	458a      	cmp	sl, r1
 800d6aa:	d909      	bls.n	800d6c0 <__divdi3+0xcc>
 800d6ac:	eb11 0808 	adds.w	r8, r1, r8
 800d6b0:	f105 33ff 	add.w	r3, r5, #4294967295
 800d6b4:	d203      	bcs.n	800d6be <__divdi3+0xca>
 800d6b6:	45c2      	cmp	sl, r8
 800d6b8:	bf88      	it	hi
 800d6ba:	3d02      	subhi	r5, #2
 800d6bc:	d800      	bhi.n	800d6c0 <__divdi3+0xcc>
 800d6be:	461d      	mov	r5, r3
 800d6c0:	ea45 430b 	orr.w	r3, r5, fp, lsl #16
 800d6c4:	2400      	movs	r4, #0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	b116      	cbz	r6, 800d6d2 <__divdi3+0xde>
 800d6cc:	4240      	negs	r0, r0
 800d6ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d6d2:	b005      	add	sp, #20
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d8:	42ab      	cmp	r3, r5
 800d6da:	bf84      	itt	hi
 800d6dc:	2400      	movhi	r4, #0
 800d6de:	4623      	movhi	r3, r4
 800d6e0:	d8f1      	bhi.n	800d6c6 <__divdi3+0xd2>
 800d6e2:	fab1 f581 	clz	r5, r1
 800d6e6:	2d00      	cmp	r5, #0
 800d6e8:	f040 80b5 	bne.w	800d856 <__divdi3+0x262>
 800d6ec:	4551      	cmp	r1, sl
 800d6ee:	bf28      	it	cs
 800d6f0:	4282      	cmpcs	r2, r0
 800d6f2:	bf8c      	ite	hi
 800d6f4:	2400      	movhi	r4, #0
 800d6f6:	2401      	movls	r4, #1
 800d6f8:	bf9c      	itt	ls
 800d6fa:	2301      	movls	r3, #1
 800d6fc:	462c      	movls	r4, r5
 800d6fe:	d9e2      	bls.n	800d6c6 <__divdi3+0xd2>
 800d700:	4623      	mov	r3, r4
 800d702:	e7e0      	b.n	800d6c6 <__divdi3+0xd2>
 800d704:	b922      	cbnz	r2, 800d710 <__divdi3+0x11c>
 800d706:	4611      	mov	r1, r2
 800d708:	2001      	movs	r0, #1
 800d70a:	f7ff f955 	bl	800c9b8 <__aeabi_uidiv>
 800d70e:	4680      	mov	r8, r0
 800d710:	fab8 f388 	clz	r3, r8
 800d714:	2b00      	cmp	r3, #0
 800d716:	d149      	bne.n	800d7ac <__divdi3+0x1b8>
 800d718:	ebc8 0909 	rsb	r9, r8, r9
 800d71c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800d720:	fa1f fa88 	uxth.w	sl, r8
 800d724:	2401      	movs	r4, #1
 800d726:	4629      	mov	r1, r5
 800d728:	4648      	mov	r0, r9
 800d72a:	f7ff f945 	bl	800c9b8 <__aeabi_uidiv>
 800d72e:	4629      	mov	r1, r5
 800d730:	4683      	mov	fp, r0
 800d732:	4648      	mov	r0, r9
 800d734:	f7ff fa6e 	bl	800cc14 <__aeabi_uidivmod>
 800d738:	0c3a      	lsrs	r2, r7, #16
 800d73a:	fb0a f00b 	mul.w	r0, sl, fp
 800d73e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800d742:	4288      	cmp	r0, r1
 800d744:	d90c      	bls.n	800d760 <__divdi3+0x16c>
 800d746:	eb11 0108 	adds.w	r1, r1, r8
 800d74a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d74e:	f080 80f2 	bcs.w	800d936 <__divdi3+0x342>
 800d752:	4288      	cmp	r0, r1
 800d754:	bf84      	itt	hi
 800d756:	f1ab 0b02 	subhi.w	fp, fp, #2
 800d75a:	4441      	addhi	r1, r8
 800d75c:	f240 80eb 	bls.w	800d936 <__divdi3+0x342>
 800d760:	1a0a      	subs	r2, r1, r0
 800d762:	4629      	mov	r1, r5
 800d764:	4610      	mov	r0, r2
 800d766:	9201      	str	r2, [sp, #4]
 800d768:	f7ff f926 	bl	800c9b8 <__aeabi_uidiv>
 800d76c:	9a01      	ldr	r2, [sp, #4]
 800d76e:	4629      	mov	r1, r5
 800d770:	b2bf      	uxth	r7, r7
 800d772:	4681      	mov	r9, r0
 800d774:	4610      	mov	r0, r2
 800d776:	f7ff fa4d 	bl	800cc14 <__aeabi_uidivmod>
 800d77a:	fb0a fa09 	mul.w	sl, sl, r9
 800d77e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800d782:	458a      	cmp	sl, r1
 800d784:	d90a      	bls.n	800d79c <__divdi3+0x1a8>
 800d786:	eb11 0808 	adds.w	r8, r1, r8
 800d78a:	f109 33ff 	add.w	r3, r9, #4294967295
 800d78e:	d204      	bcs.n	800d79a <__divdi3+0x1a6>
 800d790:	45c2      	cmp	sl, r8
 800d792:	bf88      	it	hi
 800d794:	f1a9 0902 	subhi.w	r9, r9, #2
 800d798:	d800      	bhi.n	800d79c <__divdi3+0x1a8>
 800d79a:	4699      	mov	r9, r3
 800d79c:	ea49 430b 	orr.w	r3, r9, fp, lsl #16
 800d7a0:	e791      	b.n	800d6c6 <__divdi3+0xd2>
 800d7a2:	43f6      	mvns	r6, r6
 800d7a4:	4252      	negs	r2, r2
 800d7a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d7aa:	e733      	b.n	800d614 <__divdi3+0x20>
 800d7ac:	fa08 f803 	lsl.w	r8, r8, r3
 800d7b0:	f1c3 0b20 	rsb	fp, r3, #32
 800d7b4:	fa29 f40b 	lsr.w	r4, r9, fp
 800d7b8:	fa09 f903 	lsl.w	r9, r9, r3
 800d7bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	fa27 fb0b 	lsr.w	fp, r7, fp
 800d7c8:	409f      	lsls	r7, r3
 800d7ca:	f7ff f8f5 	bl	800c9b8 <__aeabi_uidiv>
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	fa1f fa88 	uxth.w	sl, r8
 800d7d4:	ea4b 0b09 	orr.w	fp, fp, r9
 800d7d8:	4602      	mov	r2, r0
 800d7da:	4620      	mov	r0, r4
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	f7ff fa19 	bl	800cc14 <__aeabi_uidivmod>
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800d7e8:	fb0a f002 	mul.w	r0, sl, r2
 800d7ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d7f0:	4288      	cmp	r0, r1
 800d7f2:	d90b      	bls.n	800d80c <__divdi3+0x218>
 800d7f4:	eb11 0108 	adds.w	r1, r1, r8
 800d7f8:	f102 33ff 	add.w	r3, r2, #4294967295
 800d7fc:	f080 80a1 	bcs.w	800d942 <__divdi3+0x34e>
 800d800:	4288      	cmp	r0, r1
 800d802:	bf84      	itt	hi
 800d804:	3a02      	subhi	r2, #2
 800d806:	4441      	addhi	r1, r8
 800d808:	f240 809b 	bls.w	800d942 <__divdi3+0x34e>
 800d80c:	ebc0 0901 	rsb	r9, r0, r1
 800d810:	4629      	mov	r1, r5
 800d812:	4648      	mov	r0, r9
 800d814:	9201      	str	r2, [sp, #4]
 800d816:	f7ff f8cf 	bl	800c9b8 <__aeabi_uidiv>
 800d81a:	4629      	mov	r1, r5
 800d81c:	fa1f fb8b 	uxth.w	fp, fp
 800d820:	4604      	mov	r4, r0
 800d822:	4648      	mov	r0, r9
 800d824:	f7ff f9f6 	bl	800cc14 <__aeabi_uidivmod>
 800d828:	9a01      	ldr	r2, [sp, #4]
 800d82a:	fb0a f904 	mul.w	r9, sl, r4
 800d82e:	ea4b 4101 	orr.w	r1, fp, r1, lsl #16
 800d832:	4589      	cmp	r9, r1
 800d834:	d90a      	bls.n	800d84c <__divdi3+0x258>
 800d836:	eb11 0108 	adds.w	r1, r1, r8
 800d83a:	f104 33ff 	add.w	r3, r4, #4294967295
 800d83e:	d204      	bcs.n	800d84a <__divdi3+0x256>
 800d840:	4589      	cmp	r9, r1
 800d842:	bf84      	itt	hi
 800d844:	3c02      	subhi	r4, #2
 800d846:	4441      	addhi	r1, r8
 800d848:	d800      	bhi.n	800d84c <__divdi3+0x258>
 800d84a:	461c      	mov	r4, r3
 800d84c:	ebc9 0901 	rsb	r9, r9, r1
 800d850:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d854:	e767      	b.n	800d726 <__divdi3+0x132>
 800d856:	f1c5 0320 	rsb	r3, r5, #32
 800d85a:	40a9      	lsls	r1, r5
 800d85c:	fa22 f803 	lsr.w	r8, r2, r3
 800d860:	fa2a fb03 	lsr.w	fp, sl, r3
 800d864:	ea48 0801 	orr.w	r8, r8, r1
 800d868:	fa20 f303 	lsr.w	r3, r0, r3
 800d86c:	fa0a fa05 	lsl.w	sl, sl, r5
 800d870:	4658      	mov	r0, fp
 800d872:	ea4f 4918 	mov.w	r9, r8, lsr #16
 800d876:	fa02 fc05 	lsl.w	ip, r2, r5
 800d87a:	4649      	mov	r1, r9
 800d87c:	ea43 0a0a 	orr.w	sl, r3, sl
 800d880:	f8cd c00c 	str.w	ip, [sp, #12]
 800d884:	f7ff f898 	bl	800c9b8 <__aeabi_uidiv>
 800d888:	4649      	mov	r1, r9
 800d88a:	4604      	mov	r4, r0
 800d88c:	4658      	mov	r0, fp
 800d88e:	f7ff f9c1 	bl	800cc14 <__aeabi_uidivmod>
 800d892:	fa1f f288 	uxth.w	r2, r8
 800d896:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
 800d89a:	fb02 f004 	mul.w	r0, r2, r4
 800d89e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 800d8a2:	4570      	cmp	r0, lr
 800d8a4:	d909      	bls.n	800d8ba <__divdi3+0x2c6>
 800d8a6:	eb1e 0e08 	adds.w	lr, lr, r8
 800d8aa:	f104 31ff 	add.w	r1, r4, #4294967295
 800d8ae:	d246      	bcs.n	800d93e <__divdi3+0x34a>
 800d8b0:	4570      	cmp	r0, lr
 800d8b2:	bf84      	itt	hi
 800d8b4:	3c02      	subhi	r4, #2
 800d8b6:	44c6      	addhi	lr, r8
 800d8b8:	d941      	bls.n	800d93e <__divdi3+0x34a>
 800d8ba:	ebc0 0c0e 	rsb	ip, r0, lr
 800d8be:	4649      	mov	r1, r9
 800d8c0:	4660      	mov	r0, ip
 800d8c2:	9201      	str	r2, [sp, #4]
 800d8c4:	f8cd c008 	str.w	ip, [sp, #8]
 800d8c8:	f7ff f876 	bl	800c9b8 <__aeabi_uidiv>
 800d8cc:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	fa1f fa8a 	uxth.w	sl, sl
 800d8d6:	4683      	mov	fp, r0
 800d8d8:	4660      	mov	r0, ip
 800d8da:	f7ff f99b 	bl	800cc14 <__aeabi_uidivmod>
 800d8de:	9a01      	ldr	r2, [sp, #4]
 800d8e0:	fb02 f20b 	mul.w	r2, r2, fp
 800d8e4:	ea4a 4101 	orr.w	r1, sl, r1, lsl #16
 800d8e8:	428a      	cmp	r2, r1
 800d8ea:	d90a      	bls.n	800d902 <__divdi3+0x30e>
 800d8ec:	eb11 0108 	adds.w	r1, r1, r8
 800d8f0:	f10b 30ff 	add.w	r0, fp, #4294967295
 800d8f4:	d221      	bcs.n	800d93a <__divdi3+0x346>
 800d8f6:	428a      	cmp	r2, r1
 800d8f8:	bf84      	itt	hi
 800d8fa:	f1ab 0b02 	subhi.w	fp, fp, #2
 800d8fe:	4441      	addhi	r1, r8
 800d900:	d91b      	bls.n	800d93a <__divdi3+0x346>
 800d902:	9803      	ldr	r0, [sp, #12]
 800d904:	ea4b 4b04 	orr.w	fp, fp, r4, lsl #16
 800d908:	1a89      	subs	r1, r1, r2
 800d90a:	fbab 2300 	umull	r2, r3, fp, r0
 800d90e:	4299      	cmp	r1, r3
 800d910:	d30d      	bcc.n	800d92e <__divdi3+0x33a>
 800d912:	bf14      	ite	ne
 800d914:	2300      	movne	r3, #0
 800d916:	2301      	moveq	r3, #1
 800d918:	fa07 f405 	lsl.w	r4, r7, r5
 800d91c:	4294      	cmp	r4, r2
 800d91e:	bf2c      	ite	cs
 800d920:	2400      	movcs	r4, #0
 800d922:	f003 0401 	andcc.w	r4, r3, #1
 800d926:	465b      	mov	r3, fp
 800d928:	2c00      	cmp	r4, #0
 800d92a:	f43f aecc 	beq.w	800d6c6 <__divdi3+0xd2>
 800d92e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d932:	2400      	movs	r4, #0
 800d934:	e6c7      	b.n	800d6c6 <__divdi3+0xd2>
 800d936:	469b      	mov	fp, r3
 800d938:	e712      	b.n	800d760 <__divdi3+0x16c>
 800d93a:	4683      	mov	fp, r0
 800d93c:	e7e1      	b.n	800d902 <__divdi3+0x30e>
 800d93e:	460c      	mov	r4, r1
 800d940:	e7bb      	b.n	800d8ba <__divdi3+0x2c6>
 800d942:	461a      	mov	r2, r3
 800d944:	e762      	b.n	800d80c <__divdi3+0x218>
 800d946:	bf00      	nop

0800d948 <__udivdi3>:
 800d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	4606      	mov	r6, r0
 800d94e:	b083      	sub	sp, #12
 800d950:	460d      	mov	r5, r1
 800d952:	4614      	mov	r4, r2
 800d954:	4607      	mov	r7, r0
 800d956:	4688      	mov	r8, r1
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d151      	bne.n	800da00 <__udivdi3+0xb8>
 800d95c:	428a      	cmp	r2, r1
 800d95e:	d964      	bls.n	800da2a <__udivdi3+0xe2>
 800d960:	fab2 f382 	clz	r3, r2
 800d964:	b15b      	cbz	r3, 800d97e <__udivdi3+0x36>
 800d966:	f1c3 0820 	rsb	r8, r3, #32
 800d96a:	fa01 f503 	lsl.w	r5, r1, r3
 800d96e:	fa20 f808 	lsr.w	r8, r0, r8
 800d972:	fa02 f403 	lsl.w	r4, r2, r3
 800d976:	ea48 0805 	orr.w	r8, r8, r5
 800d97a:	fa00 f703 	lsl.w	r7, r0, r3
 800d97e:	0c25      	lsrs	r5, r4, #16
 800d980:	4640      	mov	r0, r8
 800d982:	4629      	mov	r1, r5
 800d984:	fa1f fa84 	uxth.w	sl, r4
 800d988:	f7ff f816 	bl	800c9b8 <__aeabi_uidiv>
 800d98c:	4629      	mov	r1, r5
 800d98e:	4681      	mov	r9, r0
 800d990:	4640      	mov	r0, r8
 800d992:	f7ff f93f 	bl	800cc14 <__aeabi_uidivmod>
 800d996:	0c3b      	lsrs	r3, r7, #16
 800d998:	fb0a f009 	mul.w	r0, sl, r9
 800d99c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800d9a0:	4288      	cmp	r0, r1
 800d9a2:	d90a      	bls.n	800d9ba <__udivdi3+0x72>
 800d9a4:	1909      	adds	r1, r1, r4
 800d9a6:	f109 32ff 	add.w	r2, r9, #4294967295
 800d9aa:	d205      	bcs.n	800d9b8 <__udivdi3+0x70>
 800d9ac:	4288      	cmp	r0, r1
 800d9ae:	bf84      	itt	hi
 800d9b0:	f1a9 0902 	subhi.w	r9, r9, #2
 800d9b4:	1909      	addhi	r1, r1, r4
 800d9b6:	d800      	bhi.n	800d9ba <__udivdi3+0x72>
 800d9b8:	4691      	mov	r9, r2
 800d9ba:	ebc0 0801 	rsb	r8, r0, r1
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4640      	mov	r0, r8
 800d9c2:	b2bf      	uxth	r7, r7
 800d9c4:	f7fe fff8 	bl	800c9b8 <__aeabi_uidiv>
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	f7ff f921 	bl	800cc14 <__aeabi_uidivmod>
 800d9d2:	fb0a fa06 	mul.w	sl, sl, r6
 800d9d6:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800d9da:	458a      	cmp	sl, r1
 800d9dc:	d909      	bls.n	800d9f2 <__udivdi3+0xaa>
 800d9de:	190c      	adds	r4, r1, r4
 800d9e0:	f106 33ff 	add.w	r3, r6, #4294967295
 800d9e4:	f080 8119 	bcs.w	800dc1a <__udivdi3+0x2d2>
 800d9e8:	45a2      	cmp	sl, r4
 800d9ea:	bf88      	it	hi
 800d9ec:	3e02      	subhi	r6, #2
 800d9ee:	f240 8114 	bls.w	800dc1a <__udivdi3+0x2d2>
 800d9f2:	ea46 4009 	orr.w	r0, r6, r9, lsl #16
 800d9f6:	2600      	movs	r6, #0
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	b003      	add	sp, #12
 800d9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da00:	428b      	cmp	r3, r1
 800da02:	bf84      	itt	hi
 800da04:	2600      	movhi	r6, #0
 800da06:	4630      	movhi	r0, r6
 800da08:	d8f6      	bhi.n	800d9f8 <__udivdi3+0xb0>
 800da0a:	fab3 f483 	clz	r4, r3
 800da0e:	2c00      	cmp	r4, #0
 800da10:	d15a      	bne.n	800dac8 <__udivdi3+0x180>
 800da12:	428b      	cmp	r3, r1
 800da14:	bf28      	it	cs
 800da16:	42b2      	cmpcs	r2, r6
 800da18:	bf8c      	ite	hi
 800da1a:	2600      	movhi	r6, #0
 800da1c:	2601      	movls	r6, #1
 800da1e:	bf9c      	itt	ls
 800da20:	2001      	movls	r0, #1
 800da22:	4626      	movls	r6, r4
 800da24:	d9e8      	bls.n	800d9f8 <__udivdi3+0xb0>
 800da26:	4630      	mov	r0, r6
 800da28:	e7e6      	b.n	800d9f8 <__udivdi3+0xb0>
 800da2a:	b922      	cbnz	r2, 800da36 <__udivdi3+0xee>
 800da2c:	4611      	mov	r1, r2
 800da2e:	2001      	movs	r0, #1
 800da30:	f7fe ffc2 	bl	800c9b8 <__aeabi_uidiv>
 800da34:	4604      	mov	r4, r0
 800da36:	fab4 f384 	clz	r3, r4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f040 80a2 	bne.w	800db84 <__udivdi3+0x23c>
 800da40:	1b2d      	subs	r5, r5, r4
 800da42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800da46:	fa1f fa84 	uxth.w	sl, r4
 800da4a:	2601      	movs	r6, #1
 800da4c:	4641      	mov	r1, r8
 800da4e:	4628      	mov	r0, r5
 800da50:	f7fe ffb2 	bl	800c9b8 <__aeabi_uidiv>
 800da54:	4641      	mov	r1, r8
 800da56:	4681      	mov	r9, r0
 800da58:	4628      	mov	r0, r5
 800da5a:	f7ff f8db 	bl	800cc14 <__aeabi_uidivmod>
 800da5e:	0c3b      	lsrs	r3, r7, #16
 800da60:	fb0a f009 	mul.w	r0, sl, r9
 800da64:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800da68:	4288      	cmp	r0, r1
 800da6a:	d90b      	bls.n	800da84 <__udivdi3+0x13c>
 800da6c:	1909      	adds	r1, r1, r4
 800da6e:	f109 32ff 	add.w	r2, r9, #4294967295
 800da72:	f080 80d4 	bcs.w	800dc1e <__udivdi3+0x2d6>
 800da76:	4288      	cmp	r0, r1
 800da78:	bf84      	itt	hi
 800da7a:	f1a9 0902 	subhi.w	r9, r9, #2
 800da7e:	1909      	addhi	r1, r1, r4
 800da80:	f240 80cd 	bls.w	800dc1e <__udivdi3+0x2d6>
 800da84:	ebc0 0b01 	rsb	fp, r0, r1
 800da88:	4641      	mov	r1, r8
 800da8a:	4658      	mov	r0, fp
 800da8c:	b2bf      	uxth	r7, r7
 800da8e:	f7fe ff93 	bl	800c9b8 <__aeabi_uidiv>
 800da92:	4641      	mov	r1, r8
 800da94:	4605      	mov	r5, r0
 800da96:	4658      	mov	r0, fp
 800da98:	f7ff f8bc 	bl	800cc14 <__aeabi_uidivmod>
 800da9c:	fb0a fa05 	mul.w	sl, sl, r5
 800daa0:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
 800daa4:	458a      	cmp	sl, r1
 800daa6:	d909      	bls.n	800dabc <__udivdi3+0x174>
 800daa8:	190c      	adds	r4, r1, r4
 800daaa:	f105 33ff 	add.w	r3, r5, #4294967295
 800daae:	f080 80b8 	bcs.w	800dc22 <__udivdi3+0x2da>
 800dab2:	45a2      	cmp	sl, r4
 800dab4:	bf88      	it	hi
 800dab6:	3d02      	subhi	r5, #2
 800dab8:	f240 80b3 	bls.w	800dc22 <__udivdi3+0x2da>
 800dabc:	ea45 4009 	orr.w	r0, r5, r9, lsl #16
 800dac0:	4631      	mov	r1, r6
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	f1c4 0120 	rsb	r1, r4, #32
 800dacc:	40a3      	lsls	r3, r4
 800dace:	fa22 f801 	lsr.w	r8, r2, r1
 800dad2:	fa25 f701 	lsr.w	r7, r5, r1
 800dad6:	ea48 0803 	orr.w	r8, r8, r3
 800dada:	4638      	mov	r0, r7
 800dadc:	fa26 f301 	lsr.w	r3, r6, r1
 800dae0:	40a5      	lsls	r5, r4
 800dae2:	ea4f 4918 	mov.w	r9, r8, lsr #16
 800dae6:	40a2      	lsls	r2, r4
 800dae8:	4649      	mov	r1, r9
 800daea:	9201      	str	r2, [sp, #4]
 800daec:	431d      	orrs	r5, r3
 800daee:	f7fe ff63 	bl	800c9b8 <__aeabi_uidiv>
 800daf2:	4649      	mov	r1, r9
 800daf4:	4683      	mov	fp, r0
 800daf6:	4638      	mov	r0, r7
 800daf8:	f7ff f88c 	bl	800cc14 <__aeabi_uidivmod>
 800dafc:	fa1f f288 	uxth.w	r2, r8
 800db00:	0c2f      	lsrs	r7, r5, #16
 800db02:	fb02 f00b 	mul.w	r0, r2, fp
 800db06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800db0a:	42b8      	cmp	r0, r7
 800db0c:	d906      	bls.n	800db1c <__udivdi3+0x1d4>
 800db0e:	eb17 0708 	adds.w	r7, r7, r8
 800db12:	f10b 31ff 	add.w	r1, fp, #4294967295
 800db16:	f0c0 808d 	bcc.w	800dc34 <__udivdi3+0x2ec>
 800db1a:	468b      	mov	fp, r1
 800db1c:	1a3f      	subs	r7, r7, r0
 800db1e:	4649      	mov	r1, r9
 800db20:	4638      	mov	r0, r7
 800db22:	9200      	str	r2, [sp, #0]
 800db24:	f7fe ff48 	bl	800c9b8 <__aeabi_uidiv>
 800db28:	4649      	mov	r1, r9
 800db2a:	b2ad      	uxth	r5, r5
 800db2c:	4682      	mov	sl, r0
 800db2e:	4638      	mov	r0, r7
 800db30:	f7ff f870 	bl	800cc14 <__aeabi_uidivmod>
 800db34:	9a00      	ldr	r2, [sp, #0]
 800db36:	fb02 f20a 	mul.w	r2, r2, sl
 800db3a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800db3e:	428a      	cmp	r2, r1
 800db40:	d905      	bls.n	800db4e <__udivdi3+0x206>
 800db42:	eb11 0108 	adds.w	r1, r1, r8
 800db46:	f10a 30ff 	add.w	r0, sl, #4294967295
 800db4a:	d36c      	bcc.n	800dc26 <__udivdi3+0x2de>
 800db4c:	4682      	mov	sl, r0
 800db4e:	9d01      	ldr	r5, [sp, #4]
 800db50:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
 800db54:	1a89      	subs	r1, r1, r2
 800db56:	fba0 2305 	umull	r2, r3, r0, r5
 800db5a:	4299      	cmp	r1, r3
 800db5c:	d30c      	bcc.n	800db78 <__udivdi3+0x230>
 800db5e:	fa06 f604 	lsl.w	r6, r6, r4
 800db62:	bf14      	ite	ne
 800db64:	2100      	movne	r1, #0
 800db66:	2101      	moveq	r1, #1
 800db68:	4296      	cmp	r6, r2
 800db6a:	bf2c      	ite	cs
 800db6c:	2600      	movcs	r6, #0
 800db6e:	f001 0601 	andcc.w	r6, r1, #1
 800db72:	2e00      	cmp	r6, #0
 800db74:	f43f af40 	beq.w	800d9f8 <__udivdi3+0xb0>
 800db78:	2600      	movs	r6, #0
 800db7a:	3801      	subs	r0, #1
 800db7c:	4631      	mov	r1, r6
 800db7e:	b003      	add	sp, #12
 800db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db84:	409c      	lsls	r4, r3
 800db86:	f1c3 0920 	rsb	r9, r3, #32
 800db8a:	fa25 fa09 	lsr.w	sl, r5, r9
 800db8e:	fa06 f703 	lsl.w	r7, r6, r3
 800db92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800db96:	4650      	mov	r0, sl
 800db98:	4641      	mov	r1, r8
 800db9a:	409d      	lsls	r5, r3
 800db9c:	f7fe ff0c 	bl	800c9b8 <__aeabi_uidiv>
 800dba0:	4641      	mov	r1, r8
 800dba2:	fa26 f909 	lsr.w	r9, r6, r9
 800dba6:	ea49 0905 	orr.w	r9, r9, r5
 800dbaa:	4683      	mov	fp, r0
 800dbac:	4650      	mov	r0, sl
 800dbae:	f7ff f831 	bl	800cc14 <__aeabi_uidivmod>
 800dbb2:	fa1f fa84 	uxth.w	sl, r4
 800dbb6:	ea4f 4319 	mov.w	r3, r9, lsr #16
 800dbba:	fb0a f00b 	mul.w	r0, sl, fp
 800dbbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800dbc2:	4288      	cmp	r0, r1
 800dbc4:	d909      	bls.n	800dbda <__udivdi3+0x292>
 800dbc6:	1909      	adds	r1, r1, r4
 800dbc8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800dbcc:	d23a      	bcs.n	800dc44 <__udivdi3+0x2fc>
 800dbce:	4288      	cmp	r0, r1
 800dbd0:	bf84      	itt	hi
 800dbd2:	f1ab 0b02 	subhi.w	fp, fp, #2
 800dbd6:	1909      	addhi	r1, r1, r4
 800dbd8:	d934      	bls.n	800dc44 <__udivdi3+0x2fc>
 800dbda:	1a0d      	subs	r5, r1, r0
 800dbdc:	4641      	mov	r1, r8
 800dbde:	4628      	mov	r0, r5
 800dbe0:	fa1f f989 	uxth.w	r9, r9
 800dbe4:	f7fe fee8 	bl	800c9b8 <__aeabi_uidiv>
 800dbe8:	4641      	mov	r1, r8
 800dbea:	4606      	mov	r6, r0
 800dbec:	4628      	mov	r0, r5
 800dbee:	f7ff f811 	bl	800cc14 <__aeabi_uidivmod>
 800dbf2:	fb0a f506 	mul.w	r5, sl, r6
 800dbf6:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
 800dbfa:	428d      	cmp	r5, r1
 800dbfc:	d909      	bls.n	800dc12 <__udivdi3+0x2ca>
 800dbfe:	1909      	adds	r1, r1, r4
 800dc00:	f106 33ff 	add.w	r3, r6, #4294967295
 800dc04:	d204      	bcs.n	800dc10 <__udivdi3+0x2c8>
 800dc06:	428d      	cmp	r5, r1
 800dc08:	bf84      	itt	hi
 800dc0a:	3e02      	subhi	r6, #2
 800dc0c:	1909      	addhi	r1, r1, r4
 800dc0e:	d800      	bhi.n	800dc12 <__udivdi3+0x2ca>
 800dc10:	461e      	mov	r6, r3
 800dc12:	1b4d      	subs	r5, r1, r5
 800dc14:	ea46 460b 	orr.w	r6, r6, fp, lsl #16
 800dc18:	e718      	b.n	800da4c <__udivdi3+0x104>
 800dc1a:	461e      	mov	r6, r3
 800dc1c:	e6e9      	b.n	800d9f2 <__udivdi3+0xaa>
 800dc1e:	4691      	mov	r9, r2
 800dc20:	e730      	b.n	800da84 <__udivdi3+0x13c>
 800dc22:	461d      	mov	r5, r3
 800dc24:	e74a      	b.n	800dabc <__udivdi3+0x174>
 800dc26:	428a      	cmp	r2, r1
 800dc28:	bf84      	itt	hi
 800dc2a:	f1aa 0a02 	subhi.w	sl, sl, #2
 800dc2e:	4441      	addhi	r1, r8
 800dc30:	d88d      	bhi.n	800db4e <__udivdi3+0x206>
 800dc32:	e78b      	b.n	800db4c <__udivdi3+0x204>
 800dc34:	42b8      	cmp	r0, r7
 800dc36:	bf84      	itt	hi
 800dc38:	f1ab 0b02 	subhi.w	fp, fp, #2
 800dc3c:	4447      	addhi	r7, r8
 800dc3e:	f63f af6d 	bhi.w	800db1c <__udivdi3+0x1d4>
 800dc42:	e76a      	b.n	800db1a <__udivdi3+0x1d2>
 800dc44:	469b      	mov	fp, r3
 800dc46:	e7c8      	b.n	800dbda <__udivdi3+0x292>

Disassembly of section .ARM.exidx:

0800dc48 <.ARM.exidx>:
 800dc48:	7ffff9ac 	svcvc	0x00fff9ac
 800dc4c:	00000001 	andeq	r0, r0, r1

Disassembly of section .rodata:

0800dc50 <.LANCHOR0>:
 800dc50:	10204080 	eorne	r4, r0, r0, lsl #1
 800dc54:	01020408 	tsteq	r2, r8, lsl #8

0800dc58 <eng8x16>:
	...
 800dc68:	423c0000 	eorsmi	r0, ip, #0
 800dc6c:	81a5a581 			; <UNDEFINED> instruction: 0x81a5a581
 800dc70:	4299bda5 	addsmi	fp, r9, #10560	; 0x2940
 800dc74:	0000003c 	andeq	r0, r0, ip, lsr r0
 800dc78:	7e3c0000 	cdpvc	0, 3, cr0, cr12, cr0, {0}
 800dc7c:	ffdbdbff 			; <UNDEFINED> instruction: 0xffdbdbff
 800dc80:	7ee7c3db 	mcrvc	3, 7, ip, cr7, cr11, {6}
 800dc84:	0000003c 	andeq	r0, r0, ip, lsr r0
 800dc88:	7f360000 	svcvc	0x00360000
 800dc8c:	3e7f7f7f 	mrccc	15, 3, r7, cr15, cr15, {3}
 800dc90:	1c1c3e3e 	ldcne	14, cr3, [ip], {62}	; 0x3e
 800dc94:	00000008 	andeq	r0, r0, r8
 800dc98:	1c080000 	stcne	0, cr0, [r8], {-0}
 800dc9c:	7f3e3e1c 	svcvc	0x003e3e1c
 800dca0:	1c1c3e3e 	ldcne	14, cr3, [ip], {62}	; 0x3e
 800dca4:	00000008 	andeq	r0, r0, r8
 800dca8:	1c1c0000 	ldcne	0, cr0, [ip], {-0}
 800dcac:	7f7f1c1c 	svcvc	0x007f1c1c
 800dcb0:	08086b7f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800dcb4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dcb8:	1c080000 	stcne	0, cr0, [r8], {-0}
 800dcbc:	7f7f3e3e 	svcvc	0x007f3e3e
 800dcc0:	08083e7f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 800dcc4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dcc8:	00000000 	andeq	r0, r0, r0
 800dccc:	3c3c1800 	ldccc	8, cr1, [ip], #-0
 800dcd0:	0000183c 	andeq	r1, r0, ip, lsr r8
 800dcd4:	00000000 	andeq	r0, r0, r0
 800dcd8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
 800dcdc:	c3c3e7ff 	bicgt	lr, r3, #66846720	; 0x3fc0000
 800dce0:	ffffe7c3 			; <UNDEFINED> instruction: 0xffffe7c3
 800dce4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800dce8:	00000000 	andeq	r0, r0, r0
 800dcec:	6666663c 			; <UNDEFINED> instruction: 0x6666663c
 800dcf0:	003c6666 	eorseq	r6, ip, r6, ror #12
 800dcf4:	00000000 	andeq	r0, r0, r0
 800dcf8:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
 800dcfc:	999999c3 	ldmibls	r9, {r0, r1, r6, r7, r8, fp, ip, pc}
 800dd00:	ffc39999 			; <UNDEFINED> instruction: 0xffc39999
 800dd04:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800dd08:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800dd0c:	3c18187e 	ldccc	8, cr1, [r8], {126}	; 0x7e
 800dd10:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800dd14:	0000003c 	andeq	r0, r0, ip, lsr r0
 800dd18:	663c0000 	ldrtvs	r0, [ip], -r0
 800dd1c:	3c666666 	stclcc	6, cr6, [r6], #-408	; 0xfffffe68
 800dd20:	18187e18 	ldmdane	r8, {r3, r4, r9, sl, fp, ip, sp, lr}
 800dd24:	00000018 	andeq	r0, r0, r8, lsl r0
 800dd28:	1b1e0000 	blne	878dd30 <__RO_LIMIT__+0x77eb10>
 800dd2c:	181b1b1b 	ldmdane	fp, {r0, r1, r3, r4, r8, r9, fp, ip}
 800dd30:	78783818 	ldmdavc	r8!, {r3, r4, fp, ip, sp}^
 800dd34:	00000030 	andeq	r0, r0, r0, lsr r0
 800dd38:	333f0000 	teqcc	pc, #0
 800dd3c:	3333333f 	teqcc	r3, #-67108864	; 0xfc000000
 800dd40:	6ff77333 	svcvs	0x00f77333
 800dd44:	00000006 	andeq	r0, r0, r6
 800dd48:	db180000 	blle	860dd50 <__RO_LIMIT__+0x5feb30>
 800dd4c:	e7663c7e 			; <UNDEFINED> instruction: 0xe7663c7e
 800dd50:	db7e3c66 	blle	9f9cef0 <__RO_LIMIT__+0x1f8dcd0>
 800dd54:	00000018 	andeq	r0, r0, r8, lsl r0
 800dd58:	60400000 	subvs	r0, r0, r0
 800dd5c:	7f7c7870 	svcvc	0x007c7870
 800dd60:	6070787c 	rsbsvs	r7, r0, ip, ror r8
 800dd64:	00000040 	andeq	r0, r0, r0, asr #32
 800dd68:	03010000 	movweq	r0, #4096	; 0x1000
 800dd6c:	7f1f0f07 	svcvc	0x001f0f07
 800dd70:	03070f1f 	movweq	r0, #32543	; 0x7f1f
 800dd74:	00000001 	andeq	r0, r0, r1
 800dd78:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800dd7c:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800dd80:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800dd84:	00000018 	andeq	r0, r0, r8, lsl r0
 800dd88:	66660000 	strbtvs	r0, [r6], -r0
 800dd8c:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800dd90:	66006666 	strvs	r6, [r0], -r6, ror #12
 800dd94:	00000066 	andeq	r0, r0, r6, rrx
 800dd98:	db7f0000 	blle	9fcdda0 <__RO_LIMIT__+0x1fbeb80>
 800dd9c:	7bdbdbdb 	blvc	7704d10 <__RW_SIZE__+0x7704788>
 800dda0:	1b1b1b1b 	blne	86d4a14 <__RO_LIMIT__+0x6c57f4>
 800dda4:	0000001b 	andeq	r0, r0, fp, lsl r0
 800dda8:	60633e00 	rsbvs	r3, r3, r0, lsl #28
 800ddac:	63633e60 	cmnvs	r3, #96, 28	; 0x600
 800ddb0:	03033e63 	movweq	r3, #15971	; 0x3e63
 800ddb4:	00003e63 	andeq	r3, r0, r3, ror #28
	...
 800ddc0:	7f7f7f7f 	svcvc	0x007f7f7f
 800ddc4:	0000007f 	andeq	r0, r0, pc, ror r0
 800ddc8:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800ddcc:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800ddd0:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800ddd4:	00007e18 	andeq	r7, r0, r8, lsl lr
 800ddd8:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800dddc:	1818187e 	ldmdane	r8, {r1, r2, r3, r4, r5, r6, fp, ip}
 800dde0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800dde4:	00000018 	andeq	r0, r0, r8, lsl r0
 800dde8:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800ddec:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ddf0:	3c7e1818 	ldclcc	8, cr1, [lr], #-96	; 0xffffffa0
 800ddf4:	00000018 	andeq	r0, r0, r8, lsl r0
 800ddf8:	00000000 	andeq	r0, r0, r0
 800ddfc:	7f0e0c08 	svcvc	0x000e0c08
 800de00:	00080c0e 	andeq	r0, r8, lr, lsl #24
	...
 800de0c:	7f381808 	svcvc	0x00381808
 800de10:	00081838 	andeq	r1, r8, r8, lsr r8
	...
 800de20:	60606060 	rsbvs	r6, r0, r0, rrx
 800de24:	0000007f 	andeq	r0, r0, pc, ror r0
 800de28:	00000000 	andeq	r0, r0, r0
 800de2c:	ff763410 			; <UNDEFINED> instruction: 0xff763410
 800de30:	00082c6e 	andeq	r2, r8, lr, ror #24
 800de34:	00000000 	andeq	r0, r0, r0
 800de38:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 800de3c:	1c1c1c08 	ldcne	12, cr1, [ip], {8}
 800de40:	7f3e3e3e 	svcvc	0x003e3e3e
 800de44:	0000007f 	andeq	r0, r0, pc, ror r0
 800de48:	7f7f0000 	svcvc	0x007f0000
 800de4c:	1c3e3e3e 	ldcne	14, cr3, [lr], #-248	; 0xffffff08
 800de50:	08081c1c 	stmdaeq	r8, {r2, r3, r4, sl, fp, ip}
 800de54:	00000008 	andeq	r0, r0, r8
	...
 800de68:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800de6c:	183c3c3c 	ldmdane	ip!, {r2, r3, r4, r5, sl, fp, ip, sp}
 800de70:	18001818 	stmdane	r0, {r3, r4, fp, ip}
 800de74:	00000018 	andeq	r0, r0, r8, lsl r0
 800de78:	66666600 	strbtvs	r6, [r6], -r0, lsl #12
 800de7c:	00000066 	andeq	r0, r0, r6, rrx
	...
 800de88:	36360000 	ldrtcc	r0, [r6], -r0
 800de8c:	36367f36 	shasxcc	r7, r6, r6
 800de90:	36367f36 	shasxcc	r7, r6, r6
 800de94:	00000036 	andeq	r0, r0, r6, lsr r0
 800de98:	3e1c1c00 	cdpcc	12, 1, cr1, cr12, cr0, {0}
 800de9c:	3e606063 	cdpcc	0, 6, cr6, cr0, cr3, {3}
 800dea0:	3e630303 	cdpcc	3, 6, cr0, cr3, cr3, {0}
 800dea4:	00001c1c 	andeq	r1, r0, ip, lsl ip
 800dea8:	63630000 	cmnvs	r3, #0
 800deac:	0c0c6666 	stceq	6, cr6, [ip], {102}	; 0x66
 800deb0:	63333318 	teqvs	r3, #24, 6	; 0x60000000
 800deb4:	00000063 	andeq	r0, r0, r3, rrx
 800deb8:	6c380000 	ldcvs	0, cr0, [r8], #-0
 800debc:	3b386c6c 	blcc	8e29074 <__RO_LIMIT__+0xe19e54>
 800dec0:	6f66666f 	svcvs	0x0066666f
 800dec4:	0000003b 	andeq	r0, r0, fp, lsr r0
 800dec8:	18181800 	ldmdane	r8, {fp, ip}
 800decc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 800ded8:	180c0600 	stmdane	ip, {r9, sl}
 800dedc:	30303018 	eorscc	r3, r0, r8, lsl r0
 800dee0:	18183030 	ldmdane	r8, {r4, r5, ip, sp}
 800dee4:	0000060c 	andeq	r0, r0, ip, lsl #12
 800dee8:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800deec:	0606060c 	streq	r0, [r6], -ip, lsl #12
 800def0:	0c0c0606 	stceq	6, cr0, [ip], {6}
 800def4:	00003018 	andeq	r3, r0, r8, lsl r0
 800def8:	00000000 	andeq	r0, r0, r0
 800defc:	7f1c3663 	svcvc	0x001c3663
 800df00:	0063361c 	rsbeq	r3, r3, ip, lsl r6
	...
 800df0c:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 800df10:	00181818 	andseq	r1, r8, r8, lsl r8
	...
 800df20:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800df24:	00301818 	eorseq	r1, r0, r8, lsl r8
 800df28:	00000000 	andeq	r0, r0, r0
 800df2c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
	...
 800df40:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800df44:	00000018 	andeq	r0, r0, r8, lsl r0
 800df48:	03030000 	movweq	r0, #12288	; 0x3000
 800df4c:	0c0c0606 	stceq	6, cr0, [ip], {6}
 800df50:	30301818 	eorscc	r1, r0, r8, lsl r8
 800df54:	00000060 	andeq	r0, r0, r0, rrx
 800df58:	633e0000 	teqvs	lr, #0
 800df5c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800df60:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800df64:	0000003e 	andeq	r0, r0, lr, lsr r0
 800df68:	1c0c0000 	stcne	0, cr0, [ip], {-0}
 800df6c:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800df70:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800df74:	0000001e 	andeq	r0, r0, lr, lsl r0
 800df78:	633e0000 	teqvs	lr, #0
 800df7c:	0c060303 	stceq	3, cr0, [r6], {3}
 800df80:	60603018 	rsbvs	r3, r0, r8, lsl r0
 800df84:	0000007f 	andeq	r0, r0, pc, ror r0
 800df88:	633e0000 	teqvs	lr, #0
 800df8c:	1e060303 	cdpne	3, 0, cr0, cr6, cr3, {0}
 800df90:	63030303 	movwvs	r0, #13059	; 0x3303
 800df94:	0000003e 	andeq	r0, r0, lr, lsr r0
 800df98:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
 800df9c:	6666361e 			; <UNDEFINED> instruction: 0x6666361e
 800dfa0:	067f6666 	ldrbteq	r6, [pc], -r6, ror #12
 800dfa4:	00000006 	andeq	r0, r0, r6
 800dfa8:	607f0000 	rsbsvs	r0, pc, r0
 800dfac:	037e6060 	cmneq	lr, #96	; 0x60
 800dfb0:	63030303 	movwvs	r0, #13059	; 0x3303
 800dfb4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dfb8:	603e0000 	eorsvs	r0, lr, r0
 800dfbc:	7e606060 	cdpvc	0, 6, cr6, cr0, cr0, {3}
 800dfc0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800dfc4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dfc8:	637f0000 	cmnvs	pc, #0
 800dfcc:	0c060303 	stceq	3, cr0, [r6], {3}
 800dfd0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800dfd4:	00000018 	andeq	r0, r0, r8, lsl r0
 800dfd8:	633e0000 	teqvs	lr, #0
 800dfdc:	3e636363 	cdpcc	3, 6, cr6, cr3, cr3, {3}
 800dfe0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800dfe4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dfe8:	633e0000 	teqvs	lr, #0
 800dfec:	3f636363 	svccc	0x00636363
 800dff0:	63030303 	movwvs	r0, #13059	; 0x3303
 800dff4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800dff8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800dffc:	00001818 	andeq	r1, r0, r8, lsl r8
 800e000:	18181800 	ldmdane	r8, {fp, ip}
 800e004:	00000000 	andeq	r0, r0, r0
 800e008:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800e00c:	00001818 	andeq	r1, r0, r8, lsl r8
 800e010:	18181800 	ldmdane	r8, {fp, ip}
 800e014:	00003018 	andeq	r3, r0, r8, lsl r0
 800e018:	06030000 	streq	r0, [r3], -r0
 800e01c:	6030180c 	eorsvs	r1, r0, ip, lsl #16
 800e020:	060c1830 			; <UNDEFINED> instruction: 0x060c1830
 800e024:	00000003 	andeq	r0, r0, r3
 800e028:	00000000 	andeq	r0, r0, r0
 800e02c:	007f0000 	rsbseq	r0, pc, r0
 800e030:	00007f00 	andeq	r7, r0, r0, lsl #30
 800e034:	00000000 	andeq	r0, r0, r0
 800e038:	30600000 	rsbcc	r0, r0, r0
 800e03c:	03060c18 	movweq	r0, #27672	; 0x6c18
 800e040:	30180c06 	andscc	r0, r8, r6, lsl #24
 800e044:	00000060 	andeq	r0, r0, r0, rrx
 800e048:	633e0000 	teqvs	lr, #0
 800e04c:	0c060363 	stceq	3, cr0, [r6], {99}	; 0x63
 800e050:	18001818 	stmdane	r0, {r3, r4, fp, ip}
 800e054:	00000018 	andeq	r0, r0, r8, lsl r0
 800e058:	633e0000 	teqvs	lr, #0
 800e05c:	6f6f6f63 	svcvs	0x006f6f63
 800e060:	60606e6e 	rsbvs	r6, r0, lr, ror #28
 800e064:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e068:	1c080000 	stcne	0, cr0, [r8], {-0}
 800e06c:	63636336 	cmnvs	r3, #-671088640	; 0xd8000000
 800e070:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 800e074:	00000063 	andeq	r0, r0, r3, rrx
 800e078:	637e0000 	cmnvs	lr, #0
 800e07c:	7e666363 	cdpvc	3, 6, cr6, cr6, cr3, {3}
 800e080:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e084:	0000007e 	andeq	r0, r0, lr, ror r0
 800e088:	633e0000 	teqvs	lr, #0
 800e08c:	60606063 	rsbvs	r6, r0, r3, rrx
 800e090:	63636060 	cmnvs	r3, #96	; 0x60
 800e094:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e098:	667c0000 	ldrbtvs	r0, [ip], -r0
 800e09c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e0a0:	66636363 	strbtvs	r6, [r3], -r3, ror #6
 800e0a4:	0000007c 	andeq	r0, r0, ip, ror r0
 800e0a8:	607f0000 	rsbsvs	r0, pc, r0
 800e0ac:	7c606060 	stclvc	0, cr6, [r0], #-384	; 0xfffffe80
 800e0b0:	60606060 	rsbvs	r6, r0, r0, rrx
 800e0b4:	0000007f 	andeq	r0, r0, pc, ror r0
 800e0b8:	607f0000 	rsbsvs	r0, pc, r0
 800e0bc:	7c606060 	stclvc	0, cr6, [r0], #-384	; 0xfffffe80
 800e0c0:	60606060 	rsbvs	r6, r0, r0, rrx
 800e0c4:	00000060 	andeq	r0, r0, r0, rrx
 800e0c8:	633e0000 	teqvs	lr, #0
 800e0cc:	60606063 	rsbvs	r6, r0, r3, rrx
 800e0d0:	6763636f 	strbvs	r6, [r3, -pc, ror #6]!
 800e0d4:	0000003b 	andeq	r0, r0, fp, lsr r0
 800e0d8:	63630000 	cmnvs	r3, #0
 800e0dc:	7f636363 	svcvc	0x00636363
 800e0e0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e0e4:	00000063 	andeq	r0, r0, r3, rrx
 800e0e8:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e0ec:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e0f0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e0f4:	00000018 	andeq	r0, r0, r8, lsl r0
 800e0f8:	03030000 	movweq	r0, #12288	; 0x3000
 800e0fc:	03030303 	movweq	r0, #13059	; 0x3303
 800e100:	63630303 	cmnvs	r3, #201326592	; 0xc000000
 800e104:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e108:	63630000 	cmnvs	r3, #0
 800e10c:	786c6663 	stmdavc	ip!, {r0, r1, r5, r6, r9, sl, sp, lr}^
 800e110:	6363666c 	cmnvs	r3, #108, 12	; 0x6c00000
 800e114:	00000063 	andeq	r0, r0, r3, rrx
 800e118:	60600000 	rsbvs	r0, r0, r0
 800e11c:	60606060 	rsbvs	r6, r0, r0, rrx
 800e120:	60606060 	rsbvs	r6, r0, r0, rrx
 800e124:	0000007f 	andeq	r0, r0, pc, ror r0
 800e128:	63630000 	cmnvs	r3, #0
 800e12c:	6b7f7f77 	blvs	9fedf10 <__RO_LIMIT__+0x1fdecf0>
 800e130:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e134:	00000063 	andeq	r0, r0, r3, rrx
 800e138:	63630000 	cmnvs	r3, #0
 800e13c:	6b7b7373 	blvs	9eeaf10 <__RO_LIMIT__+0x1edbcf0>
 800e140:	6367676f 	cmnvs	r7, #29097984	; 0x1bc0000
 800e144:	00000063 	andeq	r0, r0, r3, rrx
 800e148:	633e0000 	teqvs	lr, #0
 800e14c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e150:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e154:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e158:	337e0000 	cmncc	lr, #0
 800e15c:	3e333333 	mrccc	3, 1, r3, cr3, cr3, {1}
 800e160:	30303030 	eorscc	r3, r0, r0, lsr r0
 800e164:	00000078 	andeq	r0, r0, r8, ror r0
 800e168:	633e0000 	teqvs	lr, #0
 800e16c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e170:	67636363 	strbvs	r6, [r3, -r3, ror #6]!
 800e174:	0007063e 	andeq	r0, r7, lr, lsr r6
 800e178:	637e0000 	cmnvs	lr, #0
 800e17c:	7e636363 	cdpvc	3, 6, cr6, cr3, cr3, {3}
 800e180:	6363666c 	cmnvs	r3, #108, 12	; 0x6c00000
 800e184:	00000063 	andeq	r0, r0, r3, rrx
 800e188:	633e0000 	teqvs	lr, #0
 800e18c:	3e606063 	cdpcc	0, 6, cr6, cr0, cr3, {3}
 800e190:	63630303 	cmnvs	r3, #201326592	; 0xc000000
 800e194:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e198:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
 800e19c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e1a0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e1a4:	00000018 	andeq	r0, r0, r8, lsl r0
 800e1a8:	63630000 	cmnvs	r3, #0
 800e1ac:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e1b0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e1b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e1b8:	63630000 	cmnvs	r3, #0
 800e1bc:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e1c0:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 800e1c4:	00000008 	andeq	r0, r0, r8
 800e1c8:	63630000 	cmnvs	r3, #0
 800e1cc:	6b636363 	blvs	98e6f60 <__RO_LIMIT__+0x18d7d40>
 800e1d0:	63777f7f 	cmnvs	r7, #508	; 0x1fc
 800e1d4:	00000063 	andeq	r0, r0, r3, rrx
 800e1d8:	63630000 	cmnvs	r3, #0
 800e1dc:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 800e1e0:	63636336 	cmnvs	r3, #-671088640	; 0xd8000000
 800e1e4:	00000063 	andeq	r0, r0, r3, rrx
 800e1e8:	c3c30000 	bicgt	r0, r3, #0
 800e1ec:	183c66c3 	ldmdane	ip!, {r0, r1, r6, r7, r9, sl, sp, lr}
 800e1f0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e1f4:	0000003c 	andeq	r0, r0, ip, lsr r0
 800e1f8:	437f0000 	cmnmi	pc, #0
 800e1fc:	180c0603 	stmdane	ip, {r0, r1, r9, sl}
 800e200:	7f606030 	svcvc	0x00606030
 800e204:	0000007f 	andeq	r0, r0, pc, ror r0
 800e208:	303e0000 	eorscc	r0, lr, r0
 800e20c:	30303030 	eorscc	r3, r0, r0, lsr r0
 800e210:	30303030 	eorscc	r3, r0, r0, lsr r0
 800e214:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e218:	60600000 	rsbvs	r0, r0, r0
 800e21c:	18183030 	ldmdane	r8, {r4, r5, ip, sp}
 800e220:	06060c0c 	streq	r0, [r6], -ip, lsl #24
 800e224:	00000003 	andeq	r0, r0, r3
 800e228:	063e0000 	ldrteq	r0, [lr], -r0
 800e22c:	06060606 	streq	r0, [r6], -r6, lsl #12
 800e230:	06060606 	streq	r0, [r6], -r6, lsl #12
 800e234:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e238:	1c080000 	stcne	0, cr0, [r8], {-0}
 800e23c:	00006336 	andeq	r6, r0, r6, lsr r3
	...
 800e254:	0000ff00 	andeq	pc, r0, r0, lsl #30
 800e258:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e25c:	00000c18 	andeq	r0, r0, r8, lsl ip
	...
 800e26c:	03633e00 	cmneq	r3, #0, 28
 800e270:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 800e274:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e278:	60600000 	rsbvs	r0, r0, r0
 800e27c:	63637e60 	cmnvs	r3, #96, 28	; 0x600
 800e280:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e284:	0000007e 	andeq	r0, r0, lr, ror r0
 800e288:	00000000 	andeq	r0, r0, r0
 800e28c:	63633e00 	cmnvs	r3, #0, 28
 800e290:	63636060 	cmnvs	r3, #96	; 0x60
 800e294:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e298:	03030000 	movweq	r0, #12288	; 0x3000
 800e29c:	63633f03 	cmnvs	r3, #3, 30
 800e2a0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e2a4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e2a8:	00000000 	andeq	r0, r0, r0
 800e2ac:	63633e00 	cmnvs	r3, #0, 28
 800e2b0:	6363607f 	cmnvs	r3, #127	; 0x7f
 800e2b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e2b8:	331e0000 	tstcc	lr, #0
 800e2bc:	7e303033 	mrcvc	0, 1, r3, cr0, cr3, {1}
 800e2c0:	30303030 	eorscc	r3, r0, r0, lsr r0
 800e2c4:	00000030 	andeq	r0, r0, r0, lsr r0
 800e2c8:	00000000 	andeq	r0, r0, r0
 800e2cc:	63633e00 	cmnvs	r3, #0, 28
 800e2d0:	3f636363 	svccc	0x00636363
 800e2d4:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 800e2d8:	60600000 	rsbvs	r0, r0, r0
 800e2dc:	63637e60 	cmnvs	r3, #96, 28	; 0x600
 800e2e0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e2e4:	00000063 	andeq	r0, r0, r3, rrx
 800e2e8:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e2ec:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e2f0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 800e2f8:	06060000 	streq	r0, [r6], -r0
 800e2fc:	06060000 	streq	r0, [r6], -r0
 800e300:	06060606 	streq	r0, [r6], -r6, lsl #12
 800e304:	3c666606 	stclcc	6, cr6, [r6], #-24	; 0xffffffe8
 800e308:	60600000 	rsbvs	r0, r0, r0
 800e30c:	6c666360 	stclvs	3, cr6, [r6], #-384	; 0xfffffe80
 800e310:	666c7878 			; <UNDEFINED> instruction: 0x666c7878
 800e314:	00000063 	andeq	r0, r0, r3, rrx
 800e318:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e31c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e320:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e324:	00000018 	andeq	r0, r0, r8, lsl r0
 800e328:	00000000 	andeq	r0, r0, r0
 800e32c:	6b7f7600 	blvs	9febb34 <__RO_LIMIT__+0x1fdc914>
 800e330:	636b6b6b 	cmnvs	fp, #109568	; 0x1ac00
 800e334:	00000063 	andeq	r0, r0, r3, rrx
 800e338:	00000000 	andeq	r0, r0, r0
 800e33c:	63637e00 	cmnvs	r3, #0, 28
 800e340:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e344:	00000063 	andeq	r0, r0, r3, rrx
 800e348:	00000000 	andeq	r0, r0, r0
 800e34c:	63633e00 	cmnvs	r3, #0, 28
 800e350:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e354:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e358:	00000000 	andeq	r0, r0, r0
 800e35c:	63637e00 	cmnvs	r3, #0, 28
 800e360:	7e636363 	cdpvc	3, 6, cr6, cr3, cr3, {3}
 800e364:	60606060 	rsbvs	r6, r0, r0, rrx
 800e368:	00000000 	andeq	r0, r0, r0
 800e36c:	63633f00 	cmnvs	r3, #0, 30
 800e370:	3f636363 	svccc	0x00636363
 800e374:	03030303 	movweq	r0, #13059	; 0x3303
 800e378:	00000000 	andeq	r0, r0, r0
 800e37c:	70786f00 	rsbsvc	r6, r8, r0, lsl #30
 800e380:	60606060 	rsbvs	r6, r0, r0, rrx
 800e384:	00000060 	andeq	r0, r0, r0, rrx
 800e388:	00000000 	andeq	r0, r0, r0
 800e38c:	63633e00 	cmnvs	r3, #0, 28
 800e390:	63630e38 	cmnvs	r3, #56, 28	; 0x380
 800e394:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e398:	30300000 	eorscc	r0, r0, r0
 800e39c:	30307e30 	eorscc	r7, r0, r0, lsr lr
 800e3a0:	33333030 	teqcc	r3, #48	; 0x30
 800e3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800e3a8:	00000000 	andeq	r0, r0, r0
 800e3ac:	63636300 	cmnvs	r3, #0, 6
 800e3b0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e3b4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e3b8:	00000000 	andeq	r0, r0, r0
 800e3bc:	63636300 	cmnvs	r3, #0, 6
 800e3c0:	1c366363 	ldcne	3, cr6, [r6], #-396	; 0xfffffe74
 800e3c4:	00000008 	andeq	r0, r0, r8
 800e3c8:	00000000 	andeq	r0, r0, r0
 800e3cc:	63636300 	cmnvs	r3, #0, 6
 800e3d0:	777f7f6b 	ldrbvc	r7, [pc, -fp, ror #30]!
 800e3d4:	00000063 	andeq	r0, r0, r3, rrx
 800e3d8:	00000000 	andeq	r0, r0, r0
 800e3dc:	36636300 	strbtcc	r6, [r3], -r0, lsl #6
 800e3e0:	63361c1c 	teqvs	r6, #28, 24	; 0x1c00
 800e3e4:	00000063 	andeq	r0, r0, r3, rrx
 800e3e8:	00000000 	andeq	r0, r0, r0
 800e3ec:	63636300 	cmnvs	r3, #0, 6
 800e3f0:	3f636363 	svccc	0x00636363
 800e3f4:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 800e3f8:	00000000 	andeq	r0, r0, r0
 800e3fc:	06437f00 	strbeq	r7, [r3], -r0, lsl #30
 800e400:	6130180c 	teqvs	r0, ip, lsl #16
 800e404:	0000007f 	andeq	r0, r0, pc, ror r0
 800e408:	18180e00 	ldmdane	r8, {r9, sl, fp}
 800e40c:	70181818 	andsvc	r1, r8, r8, lsl r8
 800e410:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e414:	00000e18 	andeq	r0, r0, r8, lsl lr
 800e418:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e41c:	00181818 	andseq	r1, r8, r8, lsl r8
 800e420:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e424:	00000018 	andeq	r0, r0, r8, lsl r0
 800e428:	18187000 	ldmdane	r8, {ip, sp, lr}
 800e42c:	0e181818 	mrceq	8, 0, r1, cr8, cr8, {0}
 800e430:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e434:	00007018 	andeq	r7, r0, r8, lsl r0
 800e438:	00000000 	andeq	r0, r0, r0
 800e43c:	0edb7000 	cdpeq	0, 13, cr7, cr11, cr0, {0}
	...
 800e448:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 800e44c:	36361c1c 			; <UNDEFINED> instruction: 0x36361c1c
 800e450:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e454:	0000007f 	andeq	r0, r0, pc, ror r0
 800e458:	633e0000 	teqvs	lr, #0
 800e45c:	60606063 	rsbvs	r6, r0, r3, rrx
 800e460:	63636060 	cmnvs	r3, #96	; 0x60
 800e464:	0c060c3e 	stceq	12, cr0, [r6], {62}	; 0x3e
 800e468:	63630000 	cmnvs	r3, #0
 800e46c:	63636300 	cmnvs	r3, #0, 6
 800e470:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e474:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e478:	180c0600 	stmdane	ip, {r9, sl}
 800e47c:	63633e00 	cmnvs	r3, #0, 28
 800e480:	6360607f 	cmnvs	r0, #127	; 0x7f
 800e484:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e488:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 800e48c:	03633e00 	cmneq	r3, #0, 28
 800e490:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 800e494:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e498:	36360000 	ldrtcc	r0, [r6], -r0
 800e49c:	03633e00 	cmneq	r3, #0, 28
 800e4a0:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 800e4a4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e4a8:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800e4ac:	03633e00 	cmneq	r3, #0, 28
 800e4b0:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 800e4b4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e4b8:	1c361c00 	ldcne	12, cr1, [r6], #-0
 800e4bc:	03633e00 	cmneq	r3, #0, 28
 800e4c0:	6363633f 	cmnvs	r3, #-67108864	; 0xfc000000
 800e4c4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e4c8:	00000000 	andeq	r0, r0, r0
 800e4cc:	63633e00 	cmnvs	r3, #0, 28
 800e4d0:	63606060 	cmnvs	r0, #96	; 0x60
 800e4d4:	0c060c3e 	stceq	12, cr0, [r6], {62}	; 0x3e
 800e4d8:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 800e4dc:	63633e00 	cmnvs	r3, #0, 28
 800e4e0:	6360607f 	cmnvs	r0, #127	; 0x7f
 800e4e4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e4e8:	36360000 	ldrtcc	r0, [r6], -r0
 800e4ec:	63633e00 	cmnvs	r3, #0, 28
 800e4f0:	6360607f 	cmnvs	r0, #127	; 0x7f
 800e4f4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e4f8:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800e4fc:	63633e00 	cmnvs	r3, #0, 28
 800e500:	6360607f 	cmnvs	r0, #127	; 0x7f
 800e504:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e508:	66660000 	strbtvs	r0, [r6], -r0
 800e50c:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e510:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e514:	00000018 	andeq	r0, r0, r8, lsl r0
 800e518:	3c180000 	ldccc	0, cr0, [r8], {-0}
 800e51c:	18180066 	ldmdane	r8, {r1, r2, r5, r6}
 800e520:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e524:	00000018 	andeq	r0, r0, r8, lsl r0
 800e528:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
 800e52c:	1818000c 	ldmdane	r8, {r2, r3}
 800e530:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e534:	00000018 	andeq	r0, r0, r8, lsl r0
 800e538:	361c6b63 	ldrcc	r6, [ip], -r3, ror #22
 800e53c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e540:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 800e544:	00000063 	andeq	r0, r0, r3, rrx
 800e548:	361c361c 			; <UNDEFINED> instruction: 0x361c361c
 800e54c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e550:	6363637f 	cmnvs	r3, #-67108863	; 0xfc000001
 800e554:	00000063 	andeq	r0, r0, r3, rrx
 800e558:	637f180c 	cmnvs	pc, #12, 16	; 0xc0000
 800e55c:	7c606063 	stclvc	0, cr6, [r0], #-396	; 0xfffffe74
 800e560:	63636060 	cmnvs	r3, #96	; 0x60
 800e564:	0000007f 	andeq	r0, r0, pc, ror r0
 800e568:	00000000 	andeq	r0, r0, r0
 800e56c:	1b3b6e00 	blne	8ee9d74 <__RO_LIMIT__+0xedab54>
 800e570:	dcd8de7b 	ldclle	14, cr13, [r8], {123}	; 0x7b
 800e574:	00000077 	andeq	r0, r0, r7, ror r0
 800e578:	3d1f0000 	ldccc	0, cr0, [pc, #-0]	; 800e580 <eng8x16+0x928>
 800e57c:	6e6c6c6d 	cdpvs	12, 6, cr6, cr12, cr13, {3}
 800e580:	6d6d6c7c 	stclvs	12, cr6, [sp, #-496]!	; 0xfffffe10
 800e584:	0000006f 	andeq	r0, r0, pc, rrx
 800e588:	361c0800 	ldrcc	r0, [ip], -r0, lsl #16
 800e58c:	63633e00 	cmnvs	r3, #0, 28
 800e590:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e594:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e598:	36360000 	ldrtcc	r0, [r6], -r0
 800e59c:	63633e00 	cmnvs	r3, #0, 28
 800e5a0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5a4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e5a8:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800e5ac:	63633e00 	cmnvs	r3, #0, 28
 800e5b0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5b4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e5b8:	663c1800 	ldrtvs	r1, [ip], -r0, lsl #16
 800e5bc:	63636300 	cmnvs	r3, #0, 6
 800e5c0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5c4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e5c8:	0c183000 	ldceq	0, cr3, [r8], {-0}
 800e5cc:	63636300 	cmnvs	r3, #0, 6
 800e5d0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5d4:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e5d8:	36360000 	ldrtcc	r0, [r6], -r0
 800e5dc:	63636300 	cmnvs	r3, #0, 6
 800e5e0:	3f636363 	svccc	0x00636363
 800e5e4:	3e636303 	cdpcc	3, 6, cr6, cr3, cr3, {0}
 800e5e8:	3e006363 	cdpcc	3, 0, cr6, cr0, cr3, {3}
 800e5ec:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5f0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e5f4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e5f8:	63006363 	movwvs	r6, #867	; 0x363
 800e5fc:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e600:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e604:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e608:	0c0c0000 	stceq	0, cr0, [ip], {-0}
 800e60c:	6063633e 	rsbvs	r6, r3, lr, lsr r3
 800e610:	0c3e6360 	ldceq	3, cr6, [lr], #-384	; 0xfffffe80
 800e614:	0000000c 	andeq	r0, r0, ip
 800e618:	361c0000 	ldrcc	r0, [ip], -r0
 800e61c:	7c303030 	ldcvc	0, cr3, [r0], #-192	; 0xffffff40
 800e620:	73303030 	teqvc	r0, #48	; 0x30
 800e624:	0000007e 	andeq	r0, r0, lr, ror r0
 800e628:	c3c30000 	bicgt	r0, r3, #0
 800e62c:	ff3c66c3 			; <UNDEFINED> instruction: 0xff3c66c3
 800e630:	1818ff18 	ldmdane	r8, {r3, r4, r8, r9, sl, fp, ip, sp, lr, pc}
 800e634:	0000003c 	andeq	r0, r0, ip, lsr r0
 800e638:	66fc0000 	ldrbtvs	r0, [ip], r0
 800e63c:	786c6666 	stmdavc	ip!, {r1, r2, r5, r6, r9, sl, sp, lr}^
 800e640:	66666f66 	strbtvs	r6, [r6], -r6, ror #30
 800e644:	000000f3 	strdeq	r0, [r0], -r3
 800e648:	1b0e0000 	blne	838e650 <__RO_LIMIT__+0x37f430>
 800e64c:	187e1818 	ldmdane	lr!, {r3, r4, fp, ip}^
 800e650:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e654:	00000070 	andeq	r0, r0, r0, ror r0
 800e658:	30180c00 	andscc	r0, r8, r0, lsl #24
 800e65c:	06663c00 	strbteq	r3, [r6], -r0, lsl #24
 800e660:	6666663e 			; <UNDEFINED> instruction: 0x6666663e
 800e664:	0000003b 	andeq	r0, r0, fp, lsr r0
 800e668:	30180c00 	andscc	r0, r8, r0, lsl #24
 800e66c:	18183800 	ldmdane	r8, {fp, ip, sp}
 800e670:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e674:	0000003c 	andeq	r0, r0, ip, lsr r0
 800e678:	180c0600 	stmdane	ip, {r9, sl}
 800e67c:	63633e00 	cmnvs	r3, #0, 28
 800e680:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e684:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e688:	30180c00 	andscc	r0, r8, r0, lsl #24
 800e68c:	63636300 	cmnvs	r3, #0, 6
 800e690:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e694:	0000003f 	andeq	r0, r0, pc, lsr r0
 800e698:	3b6e0000 	blcc	9b8e6a0 <__RO_LIMIT__+0x1b7f480>
 800e69c:	63637e00 	cmnvs	r3, #0, 28
 800e6a0:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800e6a4:	00000063 	andeq	r0, r0, r3, rrx
 800e6a8:	63006e3b 	movwvs	r6, #3643	; 0xe3b
 800e6ac:	6b7b7373 	blvs	9eeb480 <__RO_LIMIT__+0x1edc260>
 800e6b0:	6367676f 	cmnvs	r7, #29097984	; 0x1bc0000
 800e6b4:	00000063 	andeq	r0, r0, r3, rrx
 800e6b8:	6c6c3c00 	stclvs	12, cr3, [ip], #-0
 800e6bc:	7e00366c 	cfmadd32vc	mvax3, mvfx3, mvfx0, mvfx12
	...
 800e6c8:	6c6c3800 	stclvs	8, cr3, [ip], #-0
 800e6cc:	7c00386c 	stcvc	8, cr3, [r0], {108}	; 0x6c
	...
 800e6d8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
 800e6dc:	180c0c00 	stmdane	ip, {sl, fp}
 800e6e0:	63636030 	cmnvs	r3, #48	; 0x30
 800e6e4:	0000003e 	andeq	r0, r0, lr, lsr r0
 800e6e8:	00000000 	andeq	r0, r0, r0
 800e6ec:	7f000000 	svcvc	0x00000000
 800e6f0:	60606060 	rsbvs	r6, r0, r0, rrx
 800e6f4:	00000060 	andeq	r0, r0, r0, rrx
 800e6f8:	00000000 	andeq	r0, r0, r0
 800e6fc:	7f000000 	svcvc	0x00000000
 800e700:	03030303 	movweq	r0, #13059	; 0x3303
 800e704:	00000003 	andeq	r0, r0, r3
 800e708:	63e06000 	mvnvs	r6, #0
 800e70c:	3e186c66 	cdpcc	12, 1, cr6, cr8, cr6, {3}
 800e710:	180ec373 	stmdane	lr, {r0, r1, r4, r5, r6, r8, r9, lr, pc}
 800e714:	0000001f 	andeq	r0, r0, pc, lsl r0
 800e718:	63e06000 	mvnvs	r6, #0
 800e71c:	36186c66 	ldrcc	r6, [r8], -r6, ror #24
 800e720:	3f36de6e 	svccc	0x0036de6e
 800e724:	00000006 	andeq	r0, r0, r6
 800e728:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
 800e72c:	18181800 	ldmdane	r8, {fp, ip}
 800e730:	3c3c3c18 	ldccc	12, cr3, [ip], #-96	; 0xffffffa0
 800e734:	00000018 	andeq	r0, r0, r8, lsl r0
 800e738:	1b090000 	blne	824e740 <__RO_LIMIT__+0x23f520>
 800e73c:	6c36361b 	ldcvs	6, cr3, [r6], #-108	; 0xffffff94
 800e740:	1b1b3636 	blne	86dc020 <__RO_LIMIT__+0x6cce00>
 800e744:	00000009 	andeq	r0, r0, r9
 800e748:	6c480000 	marvs	acc0, r0, r8
 800e74c:	1b36366c 	blne	8d9c104 <__RO_LIMIT__+0xd8cee4>
 800e750:	6c6c3636 	stclvs	6, cr3, [ip], #-216	; 0xffffff28
 800e754:	00000048 	andeq	r0, r0, r8, asr #32
 800e758:	11441144 	cmpne	r4, r4, asr #2
 800e75c:	11441144 	cmpne	r4, r4, asr #2
 800e760:	11441144 	cmpne	r4, r4, asr #2
 800e764:	11441144 	cmpne	r4, r4, asr #2
 800e768:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 800e76c:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 800e770:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 800e774:	55aa55aa 	strpl	r5, [sl, #1450]!	; 0x5aa
 800e778:	bbeebbee 	bllt	7bbd738 <__RW_SIZE__+0x7bbd1b0>
 800e77c:	bbeebbee 	bllt	7bbd73c <__RW_SIZE__+0x7bbd1b4>
 800e780:	bbeebbee 	bllt	7bbd740 <__RW_SIZE__+0x7bbd1b8>
 800e784:	bbeebbee 	bllt	7bbd744 <__RW_SIZE__+0x7bbd1bc>
 800e788:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e78c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e790:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e794:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e798:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e79c:	f8181818 			; <UNDEFINED> instruction: 0xf8181818
 800e7a0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e7a4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e7a8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e7ac:	18f81818 	ldmne	r8!, {r3, r4, fp, ip}^
 800e7b0:	181818f8 	ldmdane	r8, {r3, r4, r5, r6, r7, fp, ip}
 800e7b4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e7b8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7bc:	f6363636 			; <UNDEFINED> instruction: 0xf6363636
 800e7c0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7c4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7c8:	00000000 	andeq	r0, r0, r0
 800e7cc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 800e7d0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7d4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7d8:	00000000 	andeq	r0, r0, r0
 800e7dc:	18f80000 	ldmne	r8!, {}^	; <UNPREDICTABLE>
 800e7e0:	181818f8 	ldmdane	r8, {r3, r4, r5, r6, r7, fp, ip}
 800e7e4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e7e8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7ec:	06f63636 			; <UNDEFINED> instruction: 0x06f63636
 800e7f0:	363636f6 			; <UNDEFINED> instruction: 0x363636f6
 800e7f4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7f8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e7fc:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e800:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e804:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e808:	00000000 	andeq	r0, r0, r0
 800e80c:	06fe0000 	ldrbteq	r0, [lr], r0
 800e810:	363636f6 			; <UNDEFINED> instruction: 0x363636f6
 800e814:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e818:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e81c:	06f63636 			; <UNDEFINED> instruction: 0x06f63636
 800e820:	000000fe 	strdeq	r0, [r0], -lr
 800e824:	00000000 	andeq	r0, r0, r0
 800e828:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e82c:	fe363636 	mrc2	6, 1, r3, cr6, cr6, {1}
	...
 800e838:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e83c:	18f81818 	ldmne	r8!, {r3, r4, fp, ip}^
 800e840:	000000f8 	strdeq	r0, [r0], -r8
	...
 800e84c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 800e850:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e854:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e858:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e85c:	1f181818 	svcne	0x00181818
	...
 800e868:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e86c:	ff181818 			; <UNDEFINED> instruction: 0xff181818
	...
 800e87c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 800e880:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e884:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e888:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e88c:	1f181818 	svcne	0x00181818
 800e890:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e894:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e898:	00000000 	andeq	r0, r0, r0
 800e89c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
	...
 800e8a8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e8ac:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 800e8b0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e8b4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e8b8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e8bc:	181f1818 	ldmdane	pc, {r3, r4, fp, ip}	; <UNPREDICTABLE>
 800e8c0:	1818181f 	ldmdane	r8, {r0, r1, r2, r3, r4, fp, ip}
 800e8c4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e8c8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8cc:	37363636 			; <UNDEFINED> instruction: 0x37363636
 800e8d0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8d4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8d8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8dc:	30373636 	eorscc	r3, r7, r6, lsr r6
 800e8e0:	0000003f 	andeq	r0, r0, pc, lsr r0
	...
 800e8ec:	303f0000 	eorscc	r0, pc, r0
 800e8f0:	36363637 			; <UNDEFINED> instruction: 0x36363637
 800e8f4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8f8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e8fc:	00f73636 	rscseq	r3, r7, r6, lsr r6
 800e900:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	...
 800e90c:	00ff0000 	rscseq	r0, pc, r0
 800e910:	363636f7 			; <UNDEFINED> instruction: 0x363636f7
 800e914:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e918:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e91c:	36373636 			; <UNDEFINED> instruction: 0x36373636
 800e920:	36363637 			; <UNDEFINED> instruction: 0x36363637
 800e924:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e928:	00000000 	andeq	r0, r0, r0
 800e92c:	00ff0000 	rscseq	r0, pc, r0
 800e930:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 800e934:	00000000 	andeq	r0, r0, r0
 800e938:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e93c:	f7363636 			; <UNDEFINED> instruction: 0xf7363636
 800e940:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e944:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e948:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e94c:	00ff1818 	rscseq	r1, pc, r8, lsl r8	; <UNPREDICTABLE>
 800e950:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 800e954:	00000000 	andeq	r0, r0, r0
 800e958:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e95c:	ff363636 			; <UNDEFINED> instruction: 0xff363636
	...
 800e96c:	00ff0000 	rscseq	r0, pc, r0
 800e970:	181818ff 	ldmdane	r8, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
 800e974:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e978:	00000000 	andeq	r0, r0, r0
 800e97c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 800e980:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e984:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e988:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e98c:	3f363636 	svccc	0x00363636
	...
 800e998:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e99c:	181f1818 	ldmdane	pc, {r3, r4, fp, ip}	; <UNPREDICTABLE>
 800e9a0:	0000001f 	andeq	r0, r0, pc, lsl r0
	...
 800e9ac:	181f0000 	ldmdane	pc, {}	; <UNPREDICTABLE>
 800e9b0:	1818181f 	ldmdane	r8, {r0, r1, r2, r3, r4, fp, ip}
 800e9b4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e9b8:	00000000 	andeq	r0, r0, r0
 800e9bc:	3f000000 	svccc	0x00000000
 800e9c0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e9c4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e9c8:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e9cc:	f7363636 			; <UNDEFINED> instruction: 0xf7363636
 800e9d0:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e9d4:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800e9d8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e9dc:	00ff1818 	rscseq	r1, pc, r8, lsl r8	; <UNPREDICTABLE>
 800e9e0:	181818ff 	ldmdane	r8, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip}
 800e9e4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e9e8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800e9ec:	f8181818 			; <UNDEFINED> instruction: 0xf8181818
	...
 800e9fc:	1f000000 	svcne	0x00000000
 800ea00:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ea04:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ea08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
 800ea20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea28:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 800ea2c:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 800ea30:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 800ea34:	f0f0f0f0 			; <UNDEFINED> instruction: 0xf0f0f0f0
 800ea38:	0f0f0f0f 	svceq	0x000f0f0f
 800ea3c:	0f0f0f0f 	svceq	0x000f0f0f
 800ea40:	0f0f0f0f 	svceq	0x000f0f0f
 800ea44:	0f0f0f0f 	svceq	0x000f0f0f
 800ea48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800ea4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	...
 800ea5c:	666e3b00 	strbtvs	r3, [lr], -r0, lsl #22
 800ea60:	6e666666 	cdpvs	6, 6, cr6, cr6, cr6, {3}
 800ea64:	0000003b 	andeq	r0, r0, fp, lsr r0
 800ea68:	663c0000 	ldrtvs	r0, [ip], -r0
 800ea6c:	7c666666 	stclvc	6, cr6, [r6], #-408	; 0xfffffe68
 800ea70:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800ea74:	6060607c 	rsbvs	r6, r0, ip, ror r0
 800ea78:	637f0000 	cmnvs	pc, #0
 800ea7c:	60606063 	rsbvs	r6, r0, r3, rrx
 800ea80:	60606060 	rsbvs	r6, r0, r0, rrx
 800ea84:	00000060 	andeq	r0, r0, r0, rrx
 800ea88:	00000000 	andeq	r0, r0, r0
 800ea8c:	36367f00 	ldrtcc	r7, [r6], -r0, lsl #30
 800ea90:	36363636 			; <UNDEFINED> instruction: 0x36363636
 800ea94:	00000036 	andeq	r0, r0, r6, lsr r0
 800ea98:	637f0000 	cmnvs	pc, #0
 800ea9c:	060c1831 			; <UNDEFINED> instruction: 0x060c1831
 800eaa0:	6331180c 	teqvs	r1, #12, 16	; 0xc0000
 800eaa4:	0000007f 	andeq	r0, r0, pc, ror r0
 800eaa8:	00000000 	andeq	r0, r0, r0
 800eaac:	666c3f00 	strbtvs	r3, [ip], -r0, lsl #30
 800eab0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800eab4:	0000003c 	andeq	r0, r0, ip, lsr r0
 800eab8:	00000000 	andeq	r0, r0, r0
 800eabc:	66666600 	strbtvs	r6, [r6], -r0, lsl #12
 800eac0:	76666666 	strbtvc	r6, [r6], -r6, ror #12
 800eac4:	6060607f 	rsbvs	r6, r0, pc, ror r0
 800eac8:	00000000 	andeq	r0, r0, r0
 800eacc:	6c6c3f00 	stclvs	15, cr3, [ip], #-0
 800ead0:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800ead4:	0000000c 	andeq	r0, r0, ip
 800ead8:	187e0000 	ldmdane	lr!, {}^	; <UNPREDICTABLE>
 800eadc:	6666663c 			; <UNDEFINED> instruction: 0x6666663c
 800eae0:	183c6666 	ldmdane	ip!, {r1, r2, r5, r6, r9, sl, sp, lr}
 800eae4:	0000007e 	andeq	r0, r0, lr, ror r0
 800eae8:	663c0000 	ldrtvs	r0, [ip], -r0
 800eaec:	7e666666 	cdpvc	6, 6, cr6, cr6, cr6, {3}
 800eaf0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800eaf4:	0000003c 	andeq	r0, r0, ip, lsr r0
 800eaf8:	633e0000 	teqvs	lr, #0
 800eafc:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800eb00:	36363677 			; <UNDEFINED> instruction: 0x36363677
 800eb04:	00000077 	andeq	r0, r0, r7, ror r0
 800eb08:	1b0e0000 	blne	838eb10 <__RO_LIMIT__+0x37f8f0>
 800eb0c:	663c181b 			; <UNDEFINED> instruction: 0x663c181b
 800eb10:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800eb14:	0000003c 	andeq	r0, r0, ip, lsr r0
 800eb18:	00000000 	andeq	r0, r0, r0
 800eb1c:	6b7f3600 	blvs	9fdc324 <__RO_LIMIT__+0x1fcd104>
 800eb20:	0000367f 	andeq	r3, r0, pc, ror r6
 800eb24:	00000000 	andeq	r0, r0, r0
 800eb28:	06060000 	streq	r0, [r6], -r0
 800eb2c:	6f673e1e 	svcvs	0x00673e1e
 800eb30:	3e737b7f 	vmovcc.s8	r7, d3[7]
 800eb34:	0030303c 	eorseq	r3, r0, ip, lsr r0
 800eb38:	1f000000 	svcne	0x00000000
 800eb3c:	7f606030 	svcvc	0x00606030
 800eb40:	1f306060 	svcne	0x00306060
 800eb44:	00000000 	andeq	r0, r0, r0
 800eb48:	633e0000 	teqvs	lr, #0
 800eb4c:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800eb50:	63636363 	cmnvs	r3, #-1946157055	; 0x8c000001
 800eb54:	00000063 	andeq	r0, r0, r3, rrx
 800eb58:	00000000 	andeq	r0, r0, r0
 800eb5c:	7f00007f 	svcvc	0x0000007f
 800eb60:	007f0000 	rsbseq	r0, pc, r0
	...
 800eb6c:	ff181818 			; <UNDEFINED> instruction: 0xff181818
 800eb70:	00181818 	andseq	r1, r8, r8, lsl r8
 800eb74:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 800eb78:	30600000 	rsbcc	r0, r0, r0
 800eb7c:	0c060c18 	stceq	12, cr0, [r6], {24}
 800eb80:	00603018 	rsbeq	r3, r0, r8, lsl r0
 800eb84:	0000007e 	andeq	r0, r0, lr, ror r0
 800eb88:	0c060000 	stceq	0, cr0, [r6], {-0}
 800eb8c:	30603018 	rsbcc	r3, r0, r8, lsl r0
 800eb90:	00060c18 	andeq	r0, r6, r8, lsl ip
 800eb94:	0000007e 	andeq	r0, r0, lr, ror r0
 800eb98:	1b0e0000 	blne	838eba0 <__RO_LIMIT__+0x37f980>
 800eb9c:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800eba0:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800eba4:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800eba8:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ebac:	18181818 	ldmdane	r8, {r3, r4, fp, ip}
 800ebb0:	d8181818 	ldmdale	r8, {r3, r4, fp, ip}
 800ebb4:	00000070 	andeq	r0, r0, r0, ror r0
 800ebb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 800ebbc:	ff000018 			; <UNDEFINED> instruction: 0xff000018
 800ebc0:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
	...
 800ebcc:	700edb70 	andvc	sp, lr, r0, ror fp
 800ebd0:	00000edb 	ldrdeq	r0, [r0], -fp
 800ebd4:	00000000 	andeq	r0, r0, r0
 800ebd8:	361c0000 	ldrcc	r0, [ip], -r0
 800ebdc:	00001c36 	andeq	r1, r0, r6, lsr ip
	...
 800ebec:	3e3e1c00 	cdpcc	12, 3, cr1, cr14, cr0, {0}
 800ebf0:	00001c3e 	andeq	r1, r0, lr, lsr ip
	...
 800ebfc:	3c3c1800 	ldccc	8, cr1, [ip], #-0
 800ec00:	00000018 	andeq	r0, r0, r8, lsl r0
 800ec04:	00000000 	andeq	r0, r0, r0
 800ec08:	0c0c0f00 	stceq	15, cr0, [ip], {-0}
 800ec0c:	0c0c0c0c 	stceq	12, cr0, [ip], {12}
 800ec10:	1c3c6ccc 	ldcne	12, cr6, [ip], #-816	; 0xfffffcd0
 800ec14:	0000000c 	andeq	r0, r0, ip
 800ec18:	66667c00 	strbtvs	r7, [r6], -r0, lsl #24
 800ec1c:	00666666 	rsbeq	r6, r6, r6, ror #12
	...
 800ec28:	0c6c3800 	stcleq	8, cr3, [ip], #-0
 800ec2c:	007c3018 	rsbseq	r3, ip, r8, lsl r0
	...
 800ec3c:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 800ec40:	007e7e7e 	rsbseq	r7, lr, lr, ror lr
	...

0800ec58 <color>:
 800ec58:	ffe0f800 			; <UNDEFINED> instruction: 0xffe0f800
 800ec5c:	001f07e0 	andseq	r0, pc, r0, ror #15
 800ec60:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800ec64 <Stack_reg>:
 800ec64:	0800f194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp, lr, pc}
 800ec68:	0800f198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp, lr, pc}
 800ec6c:	0800f19c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp, lr, pc}
 800ec70:	0800f1a0 	stmdaeq	r0, {r5, r7, r8, ip, sp, lr, pc}
 800ec74:	0800f1a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, sp, lr, pc}
 800ec78:	0800f1a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp, lr, pc}
 800ec7c:	0800f1ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp, lr, pc}
 800ec80:	0800f1b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp, lr, pc}

0800ec84 <EXTI9_5_LUT.4985>:
 800ec84:	00000000 	andeq	r0, r0, r0
 800ec88:	00000001 	andeq	r0, r0, r1
 800ec8c:	00000002 	andeq	r0, r0, r2
 800ec90:	00000000 	andeq	r0, r0, r0
 800ec94:	00000003 	andeq	r0, r0, r3
	...

0800eca4 <EXTI15_10_LUT.5040>:
 800eca4:	00000000 	andeq	r0, r0, r0
 800eca8:	00000004 	andeq	r0, r0, r4
 800ecac:	00000005 	andeq	r0, r0, r5
 800ecb0:	00000000 	andeq	r0, r0, r0

0800ecb4 <_ctype_>:
 800ecb4:	20202000 	eorcs	r2, r0, r0
 800ecb8:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ecbc:	28282020 	stmdacs	r8!, {r5, sp}
 800ecc0:	20282828 	eorcs	r2, r8, r8, lsr #16
 800ecc4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ecc8:	20202020 	eorcs	r2, r0, r0, lsr #32
 800eccc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ecd0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ecd4:	10108820 	andsne	r8, r0, r0, lsr #16
 800ecd8:	10101010 	andsne	r1, r0, r0, lsl r0
 800ecdc:	10101010 	andsne	r1, r0, r0, lsl r0
 800ece0:	10101010 	andsne	r1, r0, r0, lsl r0
 800ece4:	04040410 	streq	r0, [r4], #-1040	; 0xfffffbf0
 800ece8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800ecec:	10040404 	andne	r0, r4, r4, lsl #8
 800ecf0:	10101010 	andsne	r1, r0, r0, lsl r0
 800ecf4:	41411010 	cmpmi	r1, r0, lsl r0
 800ecf8:	41414141 	cmpmi	r1, r1, asr #2
 800ecfc:	01010101 	tsteq	r1, r1, lsl #2
 800ed00:	01010101 	tsteq	r1, r1, lsl #2
 800ed04:	01010101 	tsteq	r1, r1, lsl #2
 800ed08:	01010101 	tsteq	r1, r1, lsl #2
 800ed0c:	01010101 	tsteq	r1, r1, lsl #2
 800ed10:	10101010 	andsne	r1, r0, r0, lsl r0
 800ed14:	42421010 	submi	r1, r2, #16
 800ed18:	42424242 	submi	r4, r2, #536870916	; 0x20000004
 800ed1c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ed20:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ed24:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ed28:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ed2c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800ed30:	10101010 	andsne	r1, r0, r0, lsl r0
 800ed34:	00000020 	andeq	r0, r0, r0, lsr #32
	...

0800edb8 <_global_impure_ptr>:
 800edb8:	2000000c 	andcs	r0, r0, ip

0800edbc <blanks.6752>:
 800edbc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800edc0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800edc4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800edc8:	20202020 	eorcs	r2, r0, r0, lsr #32

0800edcc <zeroes.6753>:
 800edcc:	30303030 	eorscc	r3, r0, r0, lsr r0
 800edd0:	30303030 	eorscc	r3, r0, r0, lsr r0
 800edd4:	30303030 	eorscc	r3, r0, r0, lsr r0
 800edd8:	30303030 	eorscc	r3, r0, r0, lsr r0
 800eddc:	00000000 	andeq	r0, r0, r0

0800ede0 <p05.5301>:
 800ede0:	00000005 	andeq	r0, r0, r5
 800ede4:	00000019 	andeq	r0, r0, r9, lsl r0
 800ede8:	0000007d 	andeq	r0, r0, sp, ror r0
 800edec:	00000000 	andeq	r0, r0, r0

0800edf0 <__mprec_tens>:
 800edf0:	00000000 	andeq	r0, r0, r0
 800edf4:	3ff00000 	svccc	0x00f00000	; IMB
 800edf8:	00000000 	andeq	r0, r0, r0
 800edfc:	40240000 	eormi	r0, r4, r0
 800ee00:	00000000 	andeq	r0, r0, r0
 800ee04:	40590000 	subsmi	r0, r9, r0
 800ee08:	00000000 	andeq	r0, r0, r0
 800ee0c:	408f4000 	addmi	r4, pc, r0
 800ee10:	00000000 	andeq	r0, r0, r0
 800ee14:	40c38800 	sbcmi	r8, r3, r0, lsl #16
 800ee18:	00000000 	andeq	r0, r0, r0
 800ee1c:	40f86a00 	rscsmi	r6, r8, r0, lsl #20
 800ee20:	00000000 	andeq	r0, r0, r0
 800ee24:	412e8480 	smlawbmi	lr, r0, r4, r8
 800ee28:	00000000 	andeq	r0, r0, r0
 800ee2c:	416312d0 	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
 800ee30:	00000000 	andeq	r0, r0, r0
 800ee34:	4197d784 	orrsmi	sp, r7, r4, lsl #15
 800ee38:	00000000 	andeq	r0, r0, r0
 800ee3c:	41cdcd65 	bicmi	ip, sp, r5, ror #26
 800ee40:	20000000 	andcs	r0, r0, r0
 800ee44:	4202a05f 	andmi	sl, r2, #95	; 0x5f
 800ee48:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
 800ee4c:	42374876 	eorsmi	r4, r7, #7733248	; 0x760000
 800ee50:	a2000000 	andge	r0, r0, #0
 800ee54:	426d1a94 	rsbmi	r1, sp, #148, 20	; 0x94000
 800ee58:	e5400000 	strb	r0, [r0, #-0]
 800ee5c:	42a2309c 	adcmi	r3, r2, #156	; 0x9c
 800ee60:	1e900000 	cdpne	0, 9, cr0, cr0, cr0, {0}
 800ee64:	42d6bcc4 	sbcsmi	fp, r6, #196, 24	; 0xc400
 800ee68:	26340000 	ldrtcs	r0, [r4], -r0
 800ee6c:	430c6bf5 	movwmi	r6, #52213	; 0xcbf5
 800ee70:	37e08000 	strbcc	r8, [r0, r0]!
 800ee74:	4341c379 	movtmi	ip, #4985	; 0x1379
 800ee78:	85d8a000 	ldrbhi	sl, [r8]
 800ee7c:	43763457 	cmnmi	r6, #1459617792	; 0x57000000
 800ee80:	674ec800 	strbvs	ip, [lr, -r0, lsl #16]
 800ee84:	43abc16d 			; <UNDEFINED> instruction: 0x43abc16d
 800ee88:	60913d00 	addsvs	r3, r1, r0, lsl #26
 800ee8c:	43e158e4 	mvnmi	r5, #228, 16	; 0xe40000
 800ee90:	78b58c40 	ldmvc	r5!, {r6, sl, fp, pc}
 800ee94:	4415af1d 	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
 800ee98:	d6e2ef50 	usatle	lr, #2, r0, asr #30
 800ee9c:	444b1ae4 	strbmi	r1, [fp], #-2788	; 0xfffff51c
 800eea0:	064dd592 			; <UNDEFINED> instruction: 0x064dd592
 800eea4:	4480f0cf 	strmi	pc, [r0], #207	; 0xcf
 800eea8:	c7e14af6 			; <UNDEFINED> instruction: 0xc7e14af6
 800eeac:	44b52d02 	ldrtmi	r2, [r5], #3330	; 0xd02
 800eeb0:	79d99db4 	ldmibvc	r9, {r2, r4, r5, r7, r8, sl, fp, ip, pc}^
 800eeb4:	44ea7843 	strbtmi	r7, [sl], #2115	; 0x843

0800eeb8 <__mprec_tinytens>:
 800eeb8:	97d889bc 			; <UNDEFINED> instruction: 0x97d889bc
 800eebc:	3c9cd2b2 	lfmcc	f5, 1, [ip], {178}	; 0xb2
 800eec0:	d5a8a733 	strle	sl, [r8, #1843]!	; 0x733
 800eec4:	3949f623 	stmdbcc	r9, {r0, r1, r5, r9, sl, ip, sp, lr, pc}^
 800eec8:	44f4a73d 	ldrbtmi	sl, [r4], #1853	; 0x73d
 800eecc:	32a50ffd 	adccc	r0, r5, #1012	; 0x3f4
 800eed0:	cf8c979d 	svcgt	0x008c979d
 800eed4:	255bba08 	ldrbcs	fp, [fp, #-2568]	; 0xfffff5f8
 800eed8:	64ac6f43 	strtvs	r6, [ip], #3907	; 0xf43
 800eedc:	0ac80628 	beq	7210784 <__RW_SIZE__+0x72101fc>

0800eee0 <__mprec_bigtens>:
 800eee0:	37e08000 	strbcc	r8, [r0, r0]!
 800eee4:	4341c379 	movtmi	ip, #4985	; 0x1379
 800eee8:	b5056e17 	strlt	r6, [r5, #-3607]	; 0xfffff1e9
 800eeec:	4693b8b5 			; <UNDEFINED> instruction: 0x4693b8b5
 800eef0:	e93ff9f5 	ldmdb	pc!, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
 800eef4:	4d384f03 	ldcmi	15, cr4, [r8, #-12]!
 800eef8:	f9301d32 			; <UNDEFINED> instruction: 0xf9301d32
 800eefc:	5a827748 	bpl	60acc24 <__RW_SIZE__+0x60ac69c>
 800ef00:	7f73bf3c 	svcvc	0x0073bf3c
 800ef04:	75154fdd 	ldrvc	r4, [r5, #-4061]	; 0xfffff023

0800ef08 <blanks.6696>:
 800ef08:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ef0c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ef10:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ef14:	20202020 	eorcs	r2, r0, r0, lsr #32

0800ef18 <zeroes.6697>:
 800ef18:	30303030 	eorscc	r3, r0, r0, lsr r0
 800ef1c:	30303030 	eorscc	r3, r0, r0, lsr r0
 800ef20:	30303030 	eorscc	r3, r0, r0, lsr r0
 800ef24:	30303030 	eorscc	r3, r0, r0, lsr r0
 800ef28:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 800ef2c:	6f725020 	svcvs	0x00725020
 800ef30:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 800ef34:	0000000a 	andeq	r0, r0, sl
 800ef38:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
 800ef3c:	6425206f 	strtvs	r2, [r5], #-111	; 0xffffff91
 800ef40:	00000000 	andeq	r0, r0, r0
 800ef44:	2059454b 	subscs	r4, r9, fp, asr #10
 800ef48:	6425203d 	strtvs	r2, [r5], #-61	; 0xffffffc3
 800ef4c:	0000000a 	andeq	r0, r0, sl
 800ef50:	2059454b 	subscs	r4, r9, fp, asr #10
 800ef54:	6425203d 	strtvs	r2, [r5], #-61	; 0xffffffc3
 800ef58:	00000000 	andeq	r0, r0, r0
 800ef5c:	255b7325 	ldrbcs	r7, [fp, #-805]	; 0xfffffcdb
 800ef60:	252c5d64 	strcs	r5, [ip, #-3428]!	; 0xfffff29c
 800ef64:	78303d73 	ldmdavc	r0!, {r0, r1, r4, r5, r6, r8, sl, fp, ip, sp}
 800ef68:	58382e25 	ldmdapl	r8!, {r0, r2, r5, r9, sl, fp, sp}
 800ef6c:	0000000a 	andeq	r0, r0, sl
 800ef70:	61766e49 	cmnvs	r6, r9, asr #28
 800ef74:	5f64696c 	svcpl	0x0064696c
 800ef78:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 800ef7c:	6f697470 	svcvs	0x00697470
 800ef80:	25203a6e 	strcs	r3, [r0, #-2670]!	; 0xfffff592
 800ef84:	000a2164 	andeq	r2, sl, r4, ror #2
 800ef88:	61766e49 	cmnvs	r6, r9, asr #28
 800ef8c:	5f64696c 	svcpl	0x0064696c
 800ef90:	3a525349 	bcc	94a3cbc <__RO_LIMIT__+0x1494a9c>
 800ef94:	21642520 	cmncs	r4, r0, lsr #10
 800ef98:	0000000a 	andeq	r0, r0, sl
 800ef9c:	21494d4e 	cmpcs	r9, lr, asr #26
 800efa0:	0000000a 	andeq	r0, r0, sl
 800efa4:	64726148 	ldrbtvs	r6, [r2], #-328	; 0xfffffeb8
 800efa8:	75614620 	strbvc	r4, [r1, #-1568]!	; 0xfffff9e0
 800efac:	0a21746c 	beq	886c164 <__RO_LIMIT__+0x85cf44>
 800efb0:	00000000 	andeq	r0, r0, r0
 800efb4:	4528524c 	strmi	r5, [r8, #-588]!	; 0xfffffdb4
 800efb8:	525f4358 	subspl	r4, pc, #88, 6	; 0x60000001
 800efbc:	52555445 	subspl	r5, r5, #1157627904	; 0x45000000
 800efc0:	303d294e 	eorscc	r2, sp, lr, asr #18
 800efc4:	382e2578 	stmdacc	lr!, {r3, r4, r5, r6, r8, sl, sp}
 800efc8:	00000a58 	andeq	r0, r0, r8, asr sl
 800efcc:	3d50534d 	ldclcc	3, cr5, [r0, #-308]	; 0xfffffecc
 800efd0:	2e257830 	mcrcs	8, 1, r7, cr5, cr0, {1}
 800efd4:	000a5838 	andeq	r5, sl, r8, lsr r8
 800efd8:	3d505350 	ldclcc	3, cr5, [r0, #-320]	; 0xfffffec0
 800efdc:	2e257830 	mcrcs	8, 1, r7, cr5, cr0, {1}
 800efe0:	000a5838 	andeq	r5, sl, r8, lsr r8
 800efe4:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 800efe8:	6f697470 	svcvs	0x00697470
 800efec:	636f206e 	cmnvs	pc, #110	; 0x6e
 800eff0:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 800eff4:	6f726620 	svcvs	0x00726620
 800eff8:	6168206d 	cmnvs	r8, sp, rrx
 800effc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 800f000:	6f6d2072 	svcvs	0x006d2072
 800f004:	000a6564 	andeq	r6, sl, r4, ror #10
 800f008:	0050534d 	subseq	r5, r0, sp, asr #6
 800f00c:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 800f010:	6f697470 	svcvs	0x00697470
 800f014:	636f206e 	cmnvs	pc, #110	; 0x6e
 800f018:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 800f01c:	6f726620 	svcvs	0x00726620
 800f020:	6874206d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, sp}^
 800f024:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 800f028:	646f6d20 	strbtvs	r6, [pc], #-3360	; 800f030 <zeroes.6697+0x118>
 800f02c:	69772065 	ldmdbvs	r7!, {r0, r2, r5, r6, sp}^
 800f030:	4d206874 	stcmi	8, cr6, [r0, #-464]!	; 0xfffffe30
 800f034:	000a5053 	andeq	r5, sl, r3, asr r0
 800f038:	65637845 	strbvs	r7, [r3, #-2117]!	; 0xfffff7bb
 800f03c:	6f697470 	svcvs	0x00697470
 800f040:	636f206e 	cmnvs	pc, #110	; 0x6e
 800f044:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
 800f048:	6f726620 	svcvs	0x00726620
 800f04c:	6874206d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, sp}^
 800f050:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 800f054:	646f6d20 	strbtvs	r6, [pc], #-3360	; 800f05c <zeroes.6697+0x144>
 800f058:	69772065 	ldmdbvs	r7!, {r0, r2, r5, r6, sp}^
 800f05c:	50206874 	eorpl	r6, r0, r4, ror r8
 800f060:	000a5053 	andeq	r5, sl, r3, asr r0
 800f064:	00505350 	subseq	r5, r0, r0, asr r3
 800f068:	61766e49 	cmnvs	r6, r9, asr #28
 800f06c:	2064696c 	rsbcs	r6, r4, ip, ror #18
 800f070:	65637865 	strbvs	r7, [r3, #-2149]!	; 0xfffff79b
 800f074:	6f697470 	svcvs	0x00697470
 800f078:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
 800f07c:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
 800f080:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 800f084:	3d206575 	cfstr32cc	mvfx6, [r0, #-468]!	; 0xfffffe2c
 800f088:	2325203e 	teqcs	r5, #62	; 0x3e
 800f08c:	0a58382e 	beq	961d14c <__RO_LIMIT__+0x160df2c>
 800f090:	00000000 	andeq	r0, r0, r0
 800f094:	53434853 	movtpl	r4, #14419	; 0x3853
 800f098:	3e3d2052 	mrccc	0, 1, r2, cr13, cr2, {2}
 800f09c:	2e232520 	cfsh64cs	mvdx2, mvdx3, #16
 800f0a0:	000a5838 	andeq	r5, sl, r8, lsr r8
 800f0a4:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
 800f0a8:	75614628 	strbvc	r4, [r1, #-1576]!	; 0xfffff9d8
 800f0ac:	5220746c 	eorpl	r7, r0, #108, 8	; 0x6c000000
 800f0b0:	6f736165 	svcvs	0x00736165
 800f0b4:	3d20296e 	stccc	9, cr2, [r0, #-440]!	; 0xfffffe48
 800f0b8:	2325203e 	teqcs	r5, #62	; 0x3e
 800f0bc:	0a58382e 	beq	961d17c <__RO_LIMIT__+0x160df5c>
 800f0c0:	00000000 	andeq	r0, r0, r0
 800f0c4:	41464d4d 	cmpmi	r6, sp, asr #26
 800f0c8:	61562052 	cmpvs	r6, r2, asr r0
 800f0cc:	2064696c 	rsbcs	r6, r4, ip, ror #18
 800f0d0:	25203e3d 	strcs	r3, [r0, #-3645]!	; 0xfffff1c3
 800f0d4:	00000a64 	andeq	r0, r0, r4, ror #20
 800f0d8:	41464d4d 	cmpmi	r6, sp, asr #26
 800f0dc:	3e3d2052 	mrccc	0, 1, r2, cr13, cr2, {2}
 800f0e0:	2e232520 	cfsh64cs	mvdx2, mvdx3, #16
 800f0e4:	000a5838 	andeq	r5, sl, r8, lsr r8
 800f0e8:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
 800f0ec:	6c615620 	stclvs	6, cr5, [r1], #-128	; 0xffffff80
 800f0f0:	3d206469 	cfstrscc	mvf6, [r0, #-420]!	; 0xfffffe5c
 800f0f4:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 800f0f8:	0000000a 	andeq	r0, r0, sl
 800f0fc:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
 800f100:	203e3d20 	eorscs	r3, lr, r0, lsr #26
 800f104:	382e2325 	stmdacc	lr!, {r0, r2, r5, r8, r9, sp}
 800f108:	00000a58 	andeq	r0, r0, r8, asr sl
 800f10c:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
 800f110:	72614828 	rsbvc	r4, r1, #40, 16	; 0x280000
 800f114:	61462064 	cmpvs	r6, r4, rrx
 800f118:	20746c75 	rsbscs	r6, r4, r5, ror ip
 800f11c:	73616552 	cmnvc	r1, #343932928	; 0x14800000
 800f120:	20296e6f 	eorcs	r6, r9, pc, ror #28
 800f124:	25203e3d 	strcs	r3, [r0, #-3645]!	; 0xfffff1c3
 800f128:	58382e23 	ldmdapl	r8!, {r0, r1, r5, r9, sl, fp, sp}
 800f12c:	0000000a 	andeq	r0, r0, sl
 800f130:	6f6d654d 	svcvs	0x006d654d
 800f134:	4d207972 	stcmi	9, cr7, [r0, #-456]!	; 0xfffffe38
 800f138:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
 800f13c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 800f140:	61462074 	hvcvs	25092	; 0x6204
 800f144:	21746c75 	cmncs	r4, r5, ror ip
 800f148:	0000000a 	andeq	r0, r0, sl
 800f14c:	20737542 	rsbscs	r7, r3, r2, asr #10
 800f150:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
 800f154:	000a2174 	andeq	r2, sl, r4, ror r1
 800f158:	67617355 			; <UNDEFINED> instruction: 0x67617355
 800f15c:	61462065 	cmpvs	r6, r5, rrx
 800f160:	21746c75 	cmncs	r4, r5, ror ip
 800f164:	0000000a 	andeq	r0, r0, sl
 800f168:	20435653 	subcs	r5, r3, r3, asr r6
 800f16c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
 800f170:	0000000a 	andeq	r0, r0, sl
 800f174:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
 800f178:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
 800f17c:	6c614320 	stclvs	3, cr4, [r1], #-128	; 0xffffff80
 800f180:	00000a6c 	andeq	r0, r0, ip, ror #20
 800f184:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
 800f188:	43205653 	teqmi	r0, #87031808	; 0x5300000
 800f18c:	0a6c6c61 	beq	9b2a318 <__RO_LIMIT__+0x1b1b0f8>
 800f190:	00000000 	andeq	r0, r0, r0
 800f194:	00003052 	andeq	r3, r0, r2, asr r0
 800f198:	00003152 	andeq	r3, r0, r2, asr r1
 800f19c:	00003252 	andeq	r3, r0, r2, asr r2
 800f1a0:	00003352 	andeq	r3, r0, r2, asr r3
 800f1a4:	00323152 	eorseq	r3, r2, r2, asr r1
 800f1a8:	0000524c 	andeq	r5, r0, ip, asr #4
 800f1ac:	00004152 	andeq	r4, r0, r2, asr r1
 800f1b0:	52535078 	subspl	r5, r3, #120	; 0x78
 800f1b4:	00000000 	andeq	r0, r0, r0
 800f1b8:	00082008 	andeq	r2, r8, r8
 800f1bc:	00000043 	andeq	r0, r0, r3, asr #32
 800f1c0:	00464e49 	subeq	r4, r6, r9, asr #28
 800f1c4:	00666e69 	rsbeq	r6, r6, r9, ror #28
 800f1c8:	004e414e 	subeq	r4, lr, lr, asr #2
 800f1cc:	006e616e 	rsbeq	r6, lr, lr, ror #2
 800f1d0:	33323130 	teqcc	r2, #48, 2
 800f1d4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800f1d8:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 800f1dc:	46454443 	strbmi	r4, [r5], -r3, asr #8
 800f1e0:	00000000 	andeq	r0, r0, r0
 800f1e4:	33323130 	teqcc	r2, #48, 2
 800f1e8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800f1ec:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
 800f1f0:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 800f1f4:	00000000 	andeq	r0, r0, r0
 800f1f8:	6c756e28 	ldclvs	14, cr6, [r5], #-160	; 0xffffff60
 800f1fc:	0000296c 	andeq	r2, r0, ip, ror #18
 800f200:	00000030 	andeq	r0, r0, r0, lsr r0
 800f204:	69666e49 	stmdbvs	r6!, {r0, r3, r6, r9, sl, fp, sp, lr}^
 800f208:	7974696e 	ldmdbvc	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 800f20c:	00000000 	andeq	r0, r0, r0
 800f210:	004e614e 	subeq	r6, lr, lr, asr #2
 800f214:	49534f50 	ldmdbmi	r3, {r4, r6, r8, r9, sl, fp, lr}^
 800f218:	00000058 	andeq	r0, r0, r8, asr r0
 800f21c:	0000002e 	andeq	r0, r0, lr, lsr #32

Disassembly of section .data:

20000000 <BACK_COLOR>:
20000000:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000004 <__ctype_ptr__>:
20000004:	0800ecb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp, lr, pc}

20000008 <_impure_ptr>:
20000008:	2000000c 	andcs	r0, r0, ip

2000000c <impure_data>:
	...
2000002c:	0800f1bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp, lr, pc}
	...

200000fc <lc_ctype_charset>:
200000fc:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
20000100:	00000049 	andeq	r0, r0, r9, asr #32
	...

2000011c <__mb_cur_max>:
2000011c:	00000001 	andeq	r0, r0, r1

20000120 <lc_message_charset>:
20000120:	49435341 	stmdbmi	r3, {r0, r6, r8, r9, ip, lr}^
20000124:	00000049 	andeq	r0, r0, r9, asr #32
	...

20000140 <lconv>:
20000140:	0800f21c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr, pc}
20000144:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000148:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
2000014c:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000150:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000154:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000158:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
2000015c:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000160:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000164:	0800efb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
20000168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000016c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000170:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20000174:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000178 <__malloc_av_>:
	...
20000180:	20000178 	andcs	r0, r0, r8, ror r1
20000184:	20000178 	andcs	r0, r0, r8, ror r1
20000188:	20000180 	andcs	r0, r0, r0, lsl #3
2000018c:	20000180 	andcs	r0, r0, r0, lsl #3
20000190:	20000188 	andcs	r0, r0, r8, lsl #3
20000194:	20000188 	andcs	r0, r0, r8, lsl #3
20000198:	20000190 	mulcs	r0, r0, r1
2000019c:	20000190 	mulcs	r0, r0, r1
200001a0:	20000198 	mulcs	r0, r8, r1
200001a4:	20000198 	mulcs	r0, r8, r1
200001a8:	200001a0 	andcs	r0, r0, r0, lsr #3
200001ac:	200001a0 	andcs	r0, r0, r0, lsr #3
200001b0:	200001a8 	andcs	r0, r0, r8, lsr #3
200001b4:	200001a8 	andcs	r0, r0, r8, lsr #3
200001b8:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
200001bc:	200001b0 			; <UNDEFINED> instruction: 0x200001b0
200001c0:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
200001c4:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
200001c8:	200001c0 	andcs	r0, r0, r0, asr #3
200001cc:	200001c0 	andcs	r0, r0, r0, asr #3
200001d0:	200001c8 	andcs	r0, r0, r8, asr #3
200001d4:	200001c8 	andcs	r0, r0, r8, asr #3
200001d8:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001dc:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001e0:	200001d8 	ldrdcs	r0, [r0], -r8
200001e4:	200001d8 	ldrdcs	r0, [r0], -r8
200001e8:	200001e0 	andcs	r0, r0, r0, ror #3
200001ec:	200001e0 	andcs	r0, r0, r0, ror #3
200001f0:	200001e8 	andcs	r0, r0, r8, ror #3
200001f4:	200001e8 	andcs	r0, r0, r8, ror #3
200001f8:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200001fc:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000200:	200001f8 	strdcs	r0, [r0], -r8
20000204:	200001f8 	strdcs	r0, [r0], -r8
20000208:	20000200 	andcs	r0, r0, r0, lsl #4
2000020c:	20000200 	andcs	r0, r0, r0, lsl #4
20000210:	20000208 	andcs	r0, r0, r8, lsl #4
20000214:	20000208 	andcs	r0, r0, r8, lsl #4
20000218:	20000210 	andcs	r0, r0, r0, lsl r2
2000021c:	20000210 	andcs	r0, r0, r0, lsl r2
20000220:	20000218 	andcs	r0, r0, r8, lsl r2
20000224:	20000218 	andcs	r0, r0, r8, lsl r2
20000228:	20000220 	andcs	r0, r0, r0, lsr #4
2000022c:	20000220 	andcs	r0, r0, r0, lsr #4
20000230:	20000228 	andcs	r0, r0, r8, lsr #4
20000234:	20000228 	andcs	r0, r0, r8, lsr #4
20000238:	20000230 	andcs	r0, r0, r0, lsr r2
2000023c:	20000230 	andcs	r0, r0, r0, lsr r2
20000240:	20000238 	andcs	r0, r0, r8, lsr r2
20000244:	20000238 	andcs	r0, r0, r8, lsr r2
20000248:	20000240 	andcs	r0, r0, r0, asr #4
2000024c:	20000240 	andcs	r0, r0, r0, asr #4
20000250:	20000248 	andcs	r0, r0, r8, asr #4
20000254:	20000248 	andcs	r0, r0, r8, asr #4
20000258:	20000250 	andcs	r0, r0, r0, asr r2
2000025c:	20000250 	andcs	r0, r0, r0, asr r2
20000260:	20000258 	andcs	r0, r0, r8, asr r2
20000264:	20000258 	andcs	r0, r0, r8, asr r2
20000268:	20000260 	andcs	r0, r0, r0, ror #4
2000026c:	20000260 	andcs	r0, r0, r0, ror #4
20000270:	20000268 	andcs	r0, r0, r8, ror #4
20000274:	20000268 	andcs	r0, r0, r8, ror #4
20000278:	20000270 	andcs	r0, r0, r0, ror r2
2000027c:	20000270 	andcs	r0, r0, r0, ror r2
20000280:	20000278 	andcs	r0, r0, r8, ror r2
20000284:	20000278 	andcs	r0, r0, r8, ror r2
20000288:	20000280 	andcs	r0, r0, r0, lsl #5
2000028c:	20000280 	andcs	r0, r0, r0, lsl #5
20000290:	20000288 	andcs	r0, r0, r8, lsl #5
20000294:	20000288 	andcs	r0, r0, r8, lsl #5
20000298:	20000290 	mulcs	r0, r0, r2
2000029c:	20000290 	mulcs	r0, r0, r2
200002a0:	20000298 	mulcs	r0, r8, r2
200002a4:	20000298 	mulcs	r0, r8, r2
200002a8:	200002a0 	andcs	r0, r0, r0, lsr #5
200002ac:	200002a0 	andcs	r0, r0, r0, lsr #5
200002b0:	200002a8 	andcs	r0, r0, r8, lsr #5
200002b4:	200002a8 	andcs	r0, r0, r8, lsr #5
200002b8:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
200002bc:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
200002c0:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
200002c4:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
200002c8:	200002c0 	andcs	r0, r0, r0, asr #5
200002cc:	200002c0 	andcs	r0, r0, r0, asr #5
200002d0:	200002c8 	andcs	r0, r0, r8, asr #5
200002d4:	200002c8 	andcs	r0, r0, r8, asr #5
200002d8:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002dc:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002e0:	200002d8 	ldrdcs	r0, [r0], -r8
200002e4:	200002d8 	ldrdcs	r0, [r0], -r8
200002e8:	200002e0 	andcs	r0, r0, r0, ror #5
200002ec:	200002e0 	andcs	r0, r0, r0, ror #5
200002f0:	200002e8 	andcs	r0, r0, r8, ror #5
200002f4:	200002e8 	andcs	r0, r0, r8, ror #5
200002f8:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200002fc:	200002f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000300:	200002f8 	strdcs	r0, [r0], -r8
20000304:	200002f8 	strdcs	r0, [r0], -r8
20000308:	20000300 	andcs	r0, r0, r0, lsl #6
2000030c:	20000300 	andcs	r0, r0, r0, lsl #6
20000310:	20000308 	andcs	r0, r0, r8, lsl #6
20000314:	20000308 	andcs	r0, r0, r8, lsl #6
20000318:	20000310 	andcs	r0, r0, r0, lsl r3
2000031c:	20000310 	andcs	r0, r0, r0, lsl r3
20000320:	20000318 	andcs	r0, r0, r8, lsl r3
20000324:	20000318 	andcs	r0, r0, r8, lsl r3
20000328:	20000320 	andcs	r0, r0, r0, lsr #6
2000032c:	20000320 	andcs	r0, r0, r0, lsr #6
20000330:	20000328 	andcs	r0, r0, r8, lsr #6
20000334:	20000328 	andcs	r0, r0, r8, lsr #6
20000338:	20000330 	andcs	r0, r0, r0, lsr r3
2000033c:	20000330 	andcs	r0, r0, r0, lsr r3
20000340:	20000338 	andcs	r0, r0, r8, lsr r3
20000344:	20000338 	andcs	r0, r0, r8, lsr r3
20000348:	20000340 	andcs	r0, r0, r0, asr #6
2000034c:	20000340 	andcs	r0, r0, r0, asr #6
20000350:	20000348 	andcs	r0, r0, r8, asr #6
20000354:	20000348 	andcs	r0, r0, r8, asr #6
20000358:	20000350 	andcs	r0, r0, r0, asr r3
2000035c:	20000350 	andcs	r0, r0, r0, asr r3
20000360:	20000358 	andcs	r0, r0, r8, asr r3
20000364:	20000358 	andcs	r0, r0, r8, asr r3
20000368:	20000360 	andcs	r0, r0, r0, ror #6
2000036c:	20000360 	andcs	r0, r0, r0, ror #6
20000370:	20000368 	andcs	r0, r0, r8, ror #6
20000374:	20000368 	andcs	r0, r0, r8, ror #6
20000378:	20000370 	andcs	r0, r0, r0, ror r3
2000037c:	20000370 	andcs	r0, r0, r0, ror r3
20000380:	20000378 	andcs	r0, r0, r8, ror r3
20000384:	20000378 	andcs	r0, r0, r8, ror r3
20000388:	20000380 	andcs	r0, r0, r0, lsl #7
2000038c:	20000380 	andcs	r0, r0, r0, lsl #7
20000390:	20000388 	andcs	r0, r0, r8, lsl #7
20000394:	20000388 	andcs	r0, r0, r8, lsl #7
20000398:	20000390 	mulcs	r0, r0, r3
2000039c:	20000390 	mulcs	r0, r0, r3
200003a0:	20000398 	mulcs	r0, r8, r3
200003a4:	20000398 	mulcs	r0, r8, r3
200003a8:	200003a0 	andcs	r0, r0, r0, lsr #7
200003ac:	200003a0 	andcs	r0, r0, r0, lsr #7
200003b0:	200003a8 	andcs	r0, r0, r8, lsr #7
200003b4:	200003a8 	andcs	r0, r0, r8, lsr #7
200003b8:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
200003bc:	200003b0 			; <UNDEFINED> instruction: 0x200003b0
200003c0:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
200003c4:	200003b8 			; <UNDEFINED> instruction: 0x200003b8
200003c8:	200003c0 	andcs	r0, r0, r0, asr #7
200003cc:	200003c0 	andcs	r0, r0, r0, asr #7
200003d0:	200003c8 	andcs	r0, r0, r8, asr #7
200003d4:	200003c8 	andcs	r0, r0, r8, asr #7
200003d8:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003dc:	200003d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003e0:	200003d8 	ldrdcs	r0, [r0], -r8
200003e4:	200003d8 	ldrdcs	r0, [r0], -r8
200003e8:	200003e0 	andcs	r0, r0, r0, ror #7
200003ec:	200003e0 	andcs	r0, r0, r0, ror #7
200003f0:	200003e8 	andcs	r0, r0, r8, ror #7
200003f4:	200003e8 	andcs	r0, r0, r8, ror #7
200003f8:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200003fc:	200003f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000400:	200003f8 	strdcs	r0, [r0], -r8
20000404:	200003f8 	strdcs	r0, [r0], -r8
20000408:	20000400 	andcs	r0, r0, r0, lsl #8
2000040c:	20000400 	andcs	r0, r0, r0, lsl #8
20000410:	20000408 	andcs	r0, r0, r8, lsl #8
20000414:	20000408 	andcs	r0, r0, r8, lsl #8
20000418:	20000410 	andcs	r0, r0, r0, lsl r4
2000041c:	20000410 	andcs	r0, r0, r0, lsl r4
20000420:	20000418 	andcs	r0, r0, r8, lsl r4
20000424:	20000418 	andcs	r0, r0, r8, lsl r4
20000428:	20000420 	andcs	r0, r0, r0, lsr #8
2000042c:	20000420 	andcs	r0, r0, r0, lsr #8
20000430:	20000428 	andcs	r0, r0, r8, lsr #8
20000434:	20000428 	andcs	r0, r0, r8, lsr #8
20000438:	20000430 	andcs	r0, r0, r0, lsr r4
2000043c:	20000430 	andcs	r0, r0, r0, lsr r4
20000440:	20000438 	andcs	r0, r0, r8, lsr r4
20000444:	20000438 	andcs	r0, r0, r8, lsr r4
20000448:	20000440 	andcs	r0, r0, r0, asr #8
2000044c:	20000440 	andcs	r0, r0, r0, asr #8
20000450:	20000448 	andcs	r0, r0, r8, asr #8
20000454:	20000448 	andcs	r0, r0, r8, asr #8
20000458:	20000450 	andcs	r0, r0, r0, asr r4
2000045c:	20000450 	andcs	r0, r0, r0, asr r4
20000460:	20000458 	andcs	r0, r0, r8, asr r4
20000464:	20000458 	andcs	r0, r0, r8, asr r4
20000468:	20000460 	andcs	r0, r0, r0, ror #8
2000046c:	20000460 	andcs	r0, r0, r0, ror #8
20000470:	20000468 	andcs	r0, r0, r8, ror #8
20000474:	20000468 	andcs	r0, r0, r8, ror #8
20000478:	20000470 	andcs	r0, r0, r0, ror r4
2000047c:	20000470 	andcs	r0, r0, r0, ror r4
20000480:	20000478 	andcs	r0, r0, r8, ror r4
20000484:	20000478 	andcs	r0, r0, r8, ror r4
20000488:	20000480 	andcs	r0, r0, r0, lsl #9
2000048c:	20000480 	andcs	r0, r0, r0, lsl #9
20000490:	20000488 	andcs	r0, r0, r8, lsl #9
20000494:	20000488 	andcs	r0, r0, r8, lsl #9
20000498:	20000490 	mulcs	r0, r0, r4
2000049c:	20000490 	mulcs	r0, r0, r4
200004a0:	20000498 	mulcs	r0, r8, r4
200004a4:	20000498 	mulcs	r0, r8, r4
200004a8:	200004a0 	andcs	r0, r0, r0, lsr #9
200004ac:	200004a0 	andcs	r0, r0, r0, lsr #9
200004b0:	200004a8 	andcs	r0, r0, r8, lsr #9
200004b4:	200004a8 	andcs	r0, r0, r8, lsr #9
200004b8:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
200004bc:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
200004c0:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
200004c4:	200004b8 			; <UNDEFINED> instruction: 0x200004b8
200004c8:	200004c0 	andcs	r0, r0, r0, asr #9
200004cc:	200004c0 	andcs	r0, r0, r0, asr #9
200004d0:	200004c8 	andcs	r0, r0, r8, asr #9
200004d4:	200004c8 	andcs	r0, r0, r8, asr #9
200004d8:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004dc:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004e0:	200004d8 	ldrdcs	r0, [r0], -r8
200004e4:	200004d8 	ldrdcs	r0, [r0], -r8
200004e8:	200004e0 	andcs	r0, r0, r0, ror #9
200004ec:	200004e0 	andcs	r0, r0, r0, ror #9
200004f0:	200004e8 	andcs	r0, r0, r8, ror #9
200004f4:	200004e8 	andcs	r0, r0, r8, ror #9
200004f8:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200004fc:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000500:	200004f8 	strdcs	r0, [r0], -r8
20000504:	200004f8 	strdcs	r0, [r0], -r8
20000508:	20000500 	andcs	r0, r0, r0, lsl #10
2000050c:	20000500 	andcs	r0, r0, r0, lsl #10
20000510:	20000508 	andcs	r0, r0, r8, lsl #10
20000514:	20000508 	andcs	r0, r0, r8, lsl #10
20000518:	20000510 	andcs	r0, r0, r0, lsl r5
2000051c:	20000510 	andcs	r0, r0, r0, lsl r5
20000520:	20000518 	andcs	r0, r0, r8, lsl r5
20000524:	20000518 	andcs	r0, r0, r8, lsl r5
20000528:	20000520 	andcs	r0, r0, r0, lsr #10
2000052c:	20000520 	andcs	r0, r0, r0, lsr #10
20000530:	20000528 	andcs	r0, r0, r8, lsr #10
20000534:	20000528 	andcs	r0, r0, r8, lsr #10
20000538:	20000530 	andcs	r0, r0, r0, lsr r5
2000053c:	20000530 	andcs	r0, r0, r0, lsr r5
20000540:	20000538 	andcs	r0, r0, r8, lsr r5
20000544:	20000538 	andcs	r0, r0, r8, lsr r5
20000548:	20000540 	andcs	r0, r0, r0, asr #10
2000054c:	20000540 	andcs	r0, r0, r0, asr #10
20000550:	20000548 	andcs	r0, r0, r8, asr #10
20000554:	20000548 	andcs	r0, r0, r8, asr #10
20000558:	20000550 	andcs	r0, r0, r0, asr r5
2000055c:	20000550 	andcs	r0, r0, r0, asr r5
20000560:	20000558 	andcs	r0, r0, r8, asr r5
20000564:	20000558 	andcs	r0, r0, r8, asr r5
20000568:	20000560 	andcs	r0, r0, r0, ror #10
2000056c:	20000560 	andcs	r0, r0, r0, ror #10
20000570:	20000568 	andcs	r0, r0, r8, ror #10
20000574:	20000568 	andcs	r0, r0, r8, ror #10
20000578:	20000570 	andcs	r0, r0, r0, ror r5
2000057c:	20000570 	andcs	r0, r0, r0, ror r5

20000580 <__malloc_sbrk_base>:
20000580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000584 <__malloc_trim_threshold>:
20000584:	00020000 	andeq	r0, r2, r0

Disassembly of section .bss:

20000588 <__ZI_BASE__>:
	...

20000594 <POINT_COLOR>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <heap.4848>:
20000598:	00000000 	andeq	r0, r0, r0

2000059c <SysTick_Flag>:
2000059c:	00000000 	andeq	r0, r0, r0

200005a0 <Jog_key_in>:
200005a0:	00000000 	andeq	r0, r0, r0

200005a4 <Jog_key>:
200005a4:	00000000 	andeq	r0, r0, r0

200005a8 <TIM4_expired>:
200005a8:	00000000 	andeq	r0, r0, r0

200005ac <USART1_rx_ready>:
200005ac:	00000000 	andeq	r0, r0, r0

200005b0 <USART1_rx_data>:
200005b0:	00000000 	andeq	r0, r0, r0

200005b4 <_PathLocale>:
200005b4:	00000000 	andeq	r0, r0, r0

200005b8 <__mlocale_changed>:
200005b8:	00000000 	andeq	r0, r0, r0

200005bc <__nlocale_changed>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <__malloc_top_pad>:
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <__malloc_current_mallinfo>:
	...

200005ec <__malloc_max_sbrked_mem>:
200005ec:	00000000 	andeq	r0, r0, r0

200005f0 <__malloc_max_total_mem>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <__ZI_LIMIT__>:
200005f4:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000001c7 	andeq	r0, r0, r7, asr #3
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000ad 	andeq	r0, r0, sp, lsr #1
      10:	00002d01 	andeq	r2, r0, r1, lsl #26
      14:	00015700 	andeq	r5, r1, r0, lsl #14
      18:	0031ec00 	eorseq	lr, r1, r0, lsl #24
      1c:	00006808 	andeq	r6, r0, r8, lsl #16
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000068 	andeq	r0, r0, r8, rrx
      2c:	66080102 	strvs	r0, [r8], -r2, lsl #2
      30:	02000000 	andeq	r0, r0, #0
      34:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
      38:	02020000 	andeq	r0, r2, #0
      3c:	00003e07 	andeq	r3, r0, r7, lsl #28
      40:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      44:	00000005 	andeq	r0, r0, r5
      48:	0001b803 	andeq	fp, r1, r3, lsl #16
      4c:	53500300 	cmppl	r0, #0, 6
      50:	02000000 	andeq	r0, r0, #0
      54:	009b0704 	addseq	r0, fp, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	00000005 	andeq	r0, r0, r5
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	00000096 	muleq	r0, r6, r0
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	00a00704 	adceq	r0, r0, r4, lsl #14
      74:	04020000 	streq	r0, [r2], #-0
      78:	00014307 	andeq	r4, r1, r7, lsl #6
      7c:	00480500 	subeq	r0, r8, r0, lsl #10
      80:	24060000 	strcs	r0, [r6], #-0
      84:	fe038502 	cdp2	5, 0, cr8, cr3, cr2, {0}
      88:	07000000 	streq	r0, [r0, -r0]
      8c:	00524341 	subseq	r4, r2, r1, asr #6
      90:	7d038702 	stcvc	7, cr8, [r3, #-8]
      94:	00000000 	andeq	r0, r0, r0
      98:	00006108 	andeq	r6, r0, r8, lsl #2
      9c:	03880200 	orreq	r0, r8, #0, 4
      a0:	0000007d 	andeq	r0, r0, sp, ror r0
      a4:	005e0804 	subseq	r0, lr, r4, lsl #16
      a8:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
      ac:	00007d03 	andeq	r7, r0, r3, lsl #26
      b0:	53070800 	movwpl	r0, #30720	; 0x7800
      b4:	8a020052 	bhi	80204 <__RW_SIZE__+0x7fc7c>
      b8:	00007d03 	andeq	r7, r0, r3, lsl #26
      bc:	43070c00 	movwmi	r0, #31744	; 0x7c00
      c0:	8b020052 	blhi	80210 <__RW_SIZE__+0x7fc88>
      c4:	00007d03 	andeq	r7, r0, r3, lsl #26
      c8:	41071000 	mrsmi	r1, (UNDEF: 7)
      cc:	8c020052 	stchi	0, cr0, [r2], {82}	; 0x52
      d0:	00007d03 	andeq	r7, r0, r3, lsl #26
      d4:	74081400 	strvc	r1, [r8], #-1024	; 0xfffffc00
      d8:	02000000 	andeq	r0, r0, #0
      dc:	007d038d 	rsbseq	r0, sp, sp, lsl #7
      e0:	07180000 	ldreq	r0, [r8, -r0]
      e4:	0052424f 	subseq	r4, r2, pc, asr #4
      e8:	7d038e02 	stcvc	14, cr8, [r3, #-8]
      ec:	1c000000 	stcne	0, cr0, [r0], {-0}
      f0:	00002808 	andeq	r2, r0, r8, lsl #16
      f4:	038f0200 	orreq	r0, pc, #0, 4
      f8:	0000007d 	andeq	r0, r0, sp, ror r0
      fc:	13090020 	movwne	r0, #36896	; 0x9020
     100:	02000000 	andeq	r0, r0, #0
     104:	00820398 	umulleq	r0, r2, r8, r3
     108:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
     10c:	95043402 	strls	r3, [r4, #-1026]	; 0xfffffbfe
     110:	07000001 	streq	r0, [r0, -r1]
     114:	02005243 	andeq	r5, r0, #805306372	; 0x30000004
     118:	007d0436 	rsbseq	r0, sp, r6, lsr r4
     11c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     120:	00000860 	andeq	r0, r0, r0, ror #16
     124:	7d043702 	stcvc	7, cr3, [r4, #-8]
     128:	04000000 	streq	r0, [r0], #-0
     12c:	52494307 	subpl	r4, r9, #469762048	; 0x1c000000
     130:	04380200 	ldrteq	r0, [r8], #-512	; 0xfffffe00
     134:	0000007d 	andeq	r0, r0, sp, ror r0
     138:	008d0808 	addeq	r0, sp, r8, lsl #16
     13c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     140:	00007d04 	andeq	r7, r0, r4, lsl #26
     144:	35080c00 	strcc	r0, [r8, #-3072]	; 0xfffff400
     148:	02000000 	andeq	r0, r0, #0
     14c:	007d043a 	rsbseq	r0, sp, sl, lsr r4
     150:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     154:	00000021 	andeq	r0, r0, r1, lsr #32
     158:	7d043b02 	vstrvc	d3, [r4, #-8]
     15c:	14000000 	strne	r0, [r0], #-0
     160:	00007d08 	andeq	r7, r0, r8, lsl #26
     164:	043c0200 	ldrteq	r0, [ip], #-512	; 0xfffffe00
     168:	0000007d 	andeq	r0, r0, sp, ror r0
     16c:	00850818 	addeq	r0, r5, r8, lsl r8
     170:	3d020000 	stccc	0, cr0, [r2, #-0]
     174:	00007d04 	andeq	r7, r0, r4, lsl #26
     178:	0e081c00 	cdpeq	12, 0, cr1, cr8, cr0, {0}
     17c:	02000000 	andeq	r0, r0, #0
     180:	007d043e 	rsbseq	r0, sp, lr, lsr r4
     184:	07200000 	streq	r0, [r0, -r0]!
     188:	00525343 	subseq	r5, r2, r3, asr #6
     18c:	7d043f02 	stcvc	15, cr3, [r4, #-8]
     190:	24000000 	strcs	r0, [r0], #-0
     194:	01ac0900 			; <UNDEFINED> instruction: 0x01ac0900
     198:	4a020000 	bmi	801a0 <__RW_SIZE__+0x7fc18>
     19c:	00010a04 	andeq	r0, r1, r4, lsl #20
     1a0:	08010200 	stmdaeq	r1, {r9}
     1a4:	0000006f 	andeq	r0, r0, pc, rrx
     1a8:	00014c0a 	andeq	r4, r1, sl, lsl #24
     1ac:	ec030100 	stfs	f0, [r3], {-0}
     1b0:	68080031 	stmdavs	r8, {r0, r4, r5}
     1b4:	01000000 	mrseq	r0, (UNDEF: 0)
     1b8:	00510b9c 			; <UNDEFINED> instruction: 0x00510b9c
     1bc:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
     1c0:	0001c506 	andeq	ip, r1, r6, lsl #10
     1c4:	00680500 	rsbeq	r0, r8, r0, lsl #10
     1c8:	05000000 	streq	r0, [r0, #-0]
     1cc:	04000005 	streq	r0, [r0], #-5
     1d0:	00009f00 	andeq	r9, r0, r0, lsl #30
     1d4:	ad010400 	cfstrsge	mvf0, [r1, #-0]
     1d8:	01000000 	mrseq	r0, (UNDEF: 0)
     1dc:	0000020d 	andeq	r0, r0, sp, lsl #4
     1e0:	00000157 	andeq	r0, r0, r7, asr r1
	...
     1ec:	000000aa 	andeq	r0, r0, sl, lsr #1
     1f0:	68060102 	stmdavs	r6, {r1, r8}
     1f4:	03000000 	movweq	r0, #0
     1f8:	0000027c 	andeq	r0, r0, ip, ror r2
     1fc:	00372a02 	eorseq	r2, r7, r2, lsl #20
     200:	01020000 	mrseq	r0, (UNDEF: 2)
     204:	00006608 	andeq	r6, r0, r8, lsl #12
     208:	02da0300 	sbcseq	r0, sl, #0, 6
     20c:	35020000 	strcc	r0, [r2, #-0]
     210:	00000049 	andeq	r0, r0, r9, asr #32
     214:	a2050202 	andge	r0, r5, #536870912	; 0x20000000
     218:	03000001 	movweq	r0, #1
     21c:	000002d9 	ldrdeq	r0, [r0], -r9
     220:	005b3602 	subseq	r3, fp, r2, lsl #12
     224:	02020000 	andeq	r0, r2, #0
     228:	00003e07 	andeq	r3, r0, r7, lsl #28
     22c:	01b90300 			; <UNDEFINED> instruction: 0x01b90300
     230:	4f020000 	svcmi	0x00020000
     234:	0000006d 	andeq	r0, r0, sp, rrx
     238:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
     23c:	03000000 	movweq	r0, #0
     240:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     244:	007f5002 	rsbseq	r5, pc, r2
     248:	04020000 	streq	r0, [r2], #-0
     24c:	00009b07 	andeq	r9, r0, r7, lsl #22
     250:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     254:	00000000 	andeq	r0, r0, r0
     258:	96070802 	strls	r0, [r7], -r2, lsl #16
     25c:	04000000 	streq	r0, [r0], #-0
     260:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     264:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     268:	0000a007 	andeq	sl, r0, r7
     26c:	022c0500 	eoreq	r0, ip, #0, 10
     270:	bf010000 	svclt	0x00010000
     274:	00007401 	andeq	r7, r0, r1, lsl #8
     278:	00325400 	eorseq	r5, r2, r0, lsl #8
     27c:	00000808 	andeq	r0, r0, r8, lsl #16
     280:	cd9c0100 	ldfgts	f0, [ip]
     284:	06000000 	streq	r0, [r0], -r0
     288:	00000284 	andeq	r0, r0, r4, lsl #5
     28c:	7401c101 	strvc	ip, [r1], #-257	; 0xfffffeff
	...
     298:	00023607 	andeq	r3, r2, r7, lsl #12
     29c:	01d20100 	bicseq	r0, r2, r0, lsl #2
     2a0:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
     2a4:	00000006 	andeq	r0, r0, r6
     2a8:	00f29c01 	rscseq	r9, r2, r1, lsl #24
     2ac:	f4080000 	vst4.8	{d0-d3}, [r8], r0
     2b0:	01000001 	tsteq	r0, r1
     2b4:	007401d2 	ldrsbteq	r0, [r4], #-18	; 0xffffffee
     2b8:	50010000 	andpl	r0, r1, r0
     2bc:	02180500 	andseq	r0, r8, #0, 10
     2c0:	e1010000 	mrs	r0, (UNDEF: 1)
     2c4:	00007401 	andeq	r7, r0, r1, lsl #8
     2c8:	00326400 	eorseq	r6, r2, r0, lsl #8
     2cc:	00000808 	andeq	r0, r0, r8, lsl #16
     2d0:	1d9c0100 	ldfnes	f0, [ip]
     2d4:	06000001 	streq	r0, [r0], -r1
     2d8:	00000284 	andeq	r0, r0, r4, lsl #5
     2dc:	7401e301 	strvc	lr, [r1], #-769	; 0xfffffcff
     2e0:	1f000000 	svcne	0x00000000
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	00022207 	andeq	r2, r2, r7, lsl #4
     2ec:	01f40100 	mvnseq	r0, r0, lsl #2
     2f0:	0800326c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip, sp}
     2f4:	00000006 	andeq	r0, r0, r6
     2f8:	01429c01 	cmpeq	r2, r1, lsl #24
     2fc:	93080000 	movwls	r0, #32768	; 0x8000
     300:	01000002 	tsteq	r0, r2
     304:	007401f4 	ldrshteq	r0, [r4], #-20	; 0xffffffec
     308:	50010000 	andpl	r0, r1, r0
     30c:	02cb0500 	sbceq	r0, fp, #0, 10
     310:	01010000 	mrseq	r0, (UNDEF: 1)
     314:	00007402 	andeq	r7, r0, r2, lsl #8
     318:	00327400 	eorseq	r7, r2, r0, lsl #8
     31c:	00000608 	andeq	r0, r0, r8, lsl #12
     320:	6d9c0100 	ldfvss	f0, [ip]
     324:	06000001 	streq	r0, [r0], -r1
     328:	00000284 	andeq	r0, r0, r4, lsl #5
     32c:	74020301 	strvc	r0, [r2], #-769	; 0xfffffcff
     330:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
     334:	00000000 	andeq	r0, r0, r0
     338:	00026e07 	andeq	r6, r2, r7, lsl #28
     33c:	02100100 	andseq	r0, r0, #0, 2
     340:	0800327c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip, sp}
     344:	00000006 	andeq	r0, r0, r6
     348:	01929c01 	orrseq	r9, r2, r1, lsl #24
     34c:	dd080000 	stcle	0, cr0, [r8, #-0]
     350:	01000001 	tsteq	r0, r1
     354:	00740210 	rsbseq	r0, r4, r0, lsl r2
     358:	50010000 	andpl	r0, r1, r0
     35c:	02480500 	subeq	r0, r8, #0, 10
     360:	1c010000 	stcne	0, cr0, [r1], {-0}
     364:	00007402 	andeq	r7, r0, r2, lsl #8
     368:	00328400 	eorseq	r8, r2, r0, lsl #8
     36c:	00000608 	andeq	r0, r0, r8, lsl #12
     370:	bd9c0100 	ldflts	f0, [ip]
     374:	06000001 	streq	r0, [r0], -r1
     378:	00000284 	andeq	r0, r0, r4, lsl #5
     37c:	74021e01 	strvc	r1, [r2], #-3585	; 0xfffff1ff
     380:	5d000000 	stcpl	0, cr0, [r0, #-0]
     384:	00000000 	andeq	r0, r0, r0
     388:	0002a207 	andeq	sl, r2, r7, lsl #4
     38c:	022b0100 	eoreq	r0, fp, #0, 2
     390:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
     394:	00000006 	andeq	r0, r0, r6
     398:	01e29c01 	mvneq	r9, r1, lsl #24
     39c:	ec080000 	stc	0, cr0, [r8], {-0}
     3a0:	01000001 	tsteq	r0, r1
     3a4:	0074022b 	rsbseq	r0, r4, fp, lsr #4
     3a8:	50010000 	andpl	r0, r1, r0
     3ac:	02fd0500 	rscseq	r0, sp, #0, 10
     3b0:	37010000 	strcc	r0, [r1, -r0]
     3b4:	00007402 	andeq	r7, r0, r2, lsl #8
     3b8:	00329400 	eorseq	r9, r2, r0, lsl #8
     3bc:	00000608 	andeq	r0, r0, r8, lsl #12
     3c0:	0d9c0100 	ldfeqs	f0, [ip]
     3c4:	06000002 	streq	r0, [r0], -r2
     3c8:	00000284 	andeq	r0, r0, r4, lsl #5
     3cc:	74023901 	strvc	r3, [r2], #-2305	; 0xfffff6ff
     3d0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	00025607 	andeq	r5, r2, r7, lsl #12
     3dc:	02460100 	subeq	r0, r6, #0, 2
     3e0:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
     3e4:	00000006 	andeq	r0, r0, r6
     3e8:	02329c01 	eorseq	r9, r2, #256	; 0x100
     3ec:	03080000 	movweq	r0, #32768	; 0x8000
     3f0:	01000002 	tsteq	r0, r2
     3f4:	00740246 	rsbseq	r0, r4, r6, asr #4
     3f8:	50010000 	andpl	r0, r1, r0
     3fc:	02b60500 	adcseq	r0, r6, #0, 10
     400:	52010000 	andpl	r0, r1, #0
     404:	00007402 	andeq	r7, r0, r2, lsl #8
     408:	0032a400 	eorseq	sl, r2, r0, lsl #8
     40c:	00000608 	andeq	r0, r0, r8, lsl #12
     410:	5d9c0100 	ldfpls	f0, [ip]
     414:	06000002 	streq	r0, [r0], -r2
     418:	00000284 	andeq	r0, r0, r4, lsl #5
     41c:	74025401 	strvc	r5, [r2], #-1025	; 0xfffffbff
     420:	9b000000 	blls	428 <MSP_SIZE+0x28>
     424:	00000000 	andeq	r0, r0, r0
     428:	0001cf07 	andeq	ip, r1, r7, lsl #30
     42c:	02610100 	rsbeq	r0, r1, #0, 2
     430:	080032ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip, sp}
     434:	00000006 	andeq	r0, r0, r6
     438:	02829c01 	addeq	r9, r2, #256	; 0x100
     43c:	66080000 	strvs	r0, [r8], -r0
     440:	01000002 	tsteq	r0, r2
     444:	00740261 	rsbseq	r0, r4, r1, ror #4
     448:	50010000 	andpl	r0, r1, r0
     44c:	02b00500 	adcseq	r0, r0, #0, 10
     450:	6f010000 	svcvs	0x00010000
     454:	00007402 	andeq	r7, r0, r2, lsl #8
     458:	0032b400 	eorseq	fp, r2, r0, lsl #8
     45c:	00000408 	andeq	r0, r0, r8, lsl #8
     460:	bd9c0100 	ldflts	f0, [ip]
     464:	09000002 	stmdbeq	r0, {r1}
     468:	000001dd 	ldrdeq	r0, [r0], -sp
     46c:	74026f01 	strvc	r6, [r2], #-3841	; 0xfffff0ff
     470:	ba000000 	blt	478 <MSP_SIZE+0x78>
     474:	06000000 	streq	r0, [r0], -r0
     478:	00000284 	andeq	r0, r0, r4, lsl #5
     47c:	74027101 	strvc	r7, [r2], #-257	; 0xfffffeff
     480:	db000000 	blle	488 <MSP_SIZE+0x88>
     484:	00000000 	andeq	r0, r0, r0
     488:	00024005 	andeq	r4, r2, r5
     48c:	027f0100 	rsbseq	r0, pc, #0, 2
     490:	00000074 	andeq	r0, r0, r4, ror r0
     494:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
     498:	00000004 	andeq	r0, r0, r4
     49c:	02f89c01 	rscseq	r9, r8, #256	; 0x100
     4a0:	dd090000 	stcle	0, cr0, [r9, #-0]
     4a4:	01000001 	tsteq	r0, r1
     4a8:	0050027f 	subseq	r0, r0, pc, ror r2
     4ac:	00fa0000 	rscseq	r0, sl, r0
     4b0:	84060000 	strhi	r0, [r6], #-0
     4b4:	01000002 	tsteq	r0, r2
     4b8:	00740281 	rsbseq	r0, r4, r1, lsl #5
     4bc:	011b0000 	tsteq	fp, r0
     4c0:	05000000 	streq	r0, [r0, #-0]
     4c4:	0000028b 	andeq	r0, r0, fp, lsl #5
     4c8:	62028f01 	andvs	r8, r2, #1, 30
     4cc:	bc000000 	stclt	0, cr0, [r0], {-0}
     4d0:	04080032 	streq	r0, [r8], #-50	; 0xffffffce
     4d4:	01000000 	mrseq	r0, (UNDEF: 0)
     4d8:	0003339c 	muleq	r3, ip, r3
     4dc:	01dd0900 	bicseq	r0, sp, r0, lsl #18
     4e0:	8f010000 	svchi	0x00010000
     4e4:	00003e02 	andeq	r3, r0, r2, lsl #28
     4e8:	00013a00 	andeq	r3, r1, r0, lsl #20
     4ec:	02840600 	addeq	r0, r4, #0, 12
     4f0:	91010000 	mrsls	r0, (UNDEF: 1)
     4f4:	00007402 	andeq	r7, r0, r2, lsl #8
     4f8:	00015b00 	andeq	r5, r1, r0, lsl #22
     4fc:	c4050000 	strgt	r0, [r5], #-0
     500:	01000002 	tsteq	r0, r2
     504:	0074029f 			; <UNDEFINED> instruction: 0x0074029f
     508:	32c00000 	sbccc	r0, r0, #0
     50c:	00060800 	andeq	r0, r6, r0, lsl #16
     510:	9c010000 	stcls	0, cr0, [r1], {-0}
     514:	0000036e 	andeq	r0, r0, lr, ror #6
     518:	0001dd09 	andeq	sp, r1, r9, lsl #26
     51c:	029f0100 	addseq	r0, pc, #0, 2
     520:	00000074 	andeq	r0, r0, r4, ror r0
     524:	0000017a 	andeq	r0, r0, sl, ror r1
     528:	00028406 	andeq	r8, r2, r6, lsl #8
     52c:	02a10100 	adceq	r0, r1, #0, 2
     530:	00000074 	andeq	r0, r0, r4, ror r0
     534:	0000019b 	muleq	r0, fp, r1
     538:	02eb0500 	rsceq	r0, fp, #0, 10
     53c:	af010000 	svcge	0x00010000
     540:	00002c02 	andeq	r2, r0, r2, lsl #24
     544:	0032c800 	eorseq	ip, r2, r0, lsl #16
     548:	00000808 	andeq	r0, r0, r8, lsl #16
     54c:	a99c0100 	ldmibge	ip, {r8}
     550:	09000003 	stmdbeq	r0, {r0, r1}
     554:	000001ca 	andeq	r0, r0, sl, asr #3
     558:	a902af01 	stmdbge	r2, {r0, r8, r9, sl, fp, sp, pc}
     55c:	ba000003 	blt	570 <MSP_SIZE+0x170>
     560:	06000001 	streq	r0, [r0], -r1
     564:	00000284 	andeq	r0, r0, r4, lsl #5
     568:	2c02b101 	stfcsd	f3, [r2], {1}
     56c:	db000000 	blle	574 <MSP_SIZE+0x174>
     570:	00000001 	andeq	r0, r0, r1
     574:	002c040a 	eoreq	r0, ip, sl, lsl #8
     578:	0d050000 	stceq	0, cr0, [r5, #-0]
     57c:	01000003 	tsteq	r0, r3
     580:	005002bf 	ldrheq	r0, [r0], #-47	; 0xffffffd1
     584:	32d00000 	sbcscc	r0, r0, #0
     588:	00080800 	andeq	r0, r8, r0, lsl #16
     58c:	9c010000 	stcls	0, cr0, [r1], {-0}
     590:	000003ea 	andeq	r0, r0, sl, ror #7
     594:	0001ca09 	andeq	ip, r1, r9, lsl #20
     598:	02bf0100 	adcseq	r0, pc, #0, 2
     59c:	000003ea 	andeq	r0, r0, sl, ror #7
     5a0:	000001fa 	strdeq	r0, [r0], -sl
     5a4:	00028406 	andeq	r8, r2, r6, lsl #8
     5a8:	02c10100 	sbceq	r0, r1, #0, 2
     5ac:	00000050 	andeq	r0, r0, r0, asr r0
     5b0:	0000021b 	andeq	r0, r0, fp, lsl r2
     5b4:	50040a00 	andpl	r0, r4, r0, lsl #20
     5b8:	05000000 	streq	r0, [r0, #-0]
     5bc:	000001e3 	andeq	r0, r0, r3, ror #3
     5c0:	7402cf01 	strvc	ip, [r2], #-3841	; 0xfffff0ff
     5c4:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     5c8:	06080032 			; <UNDEFINED> instruction: 0x06080032
     5cc:	01000000 	mrseq	r0, (UNDEF: 0)
     5d0:	00042b9c 	muleq	r4, ip, fp
     5d4:	01ca0900 	biceq	r0, sl, r0, lsl #18
     5d8:	cf010000 	svcgt	0x00010000
     5dc:	00042b02 	andeq	r2, r4, r2, lsl #22
     5e0:	00023a00 	andeq	r3, r2, r0, lsl #20
     5e4:	02840600 	addeq	r0, r4, #0, 12
     5e8:	d1010000 	mrsle	r0, (UNDEF: 1)
     5ec:	00007402 	andeq	r7, r0, r2, lsl #8
     5f0:	00025b00 	andeq	r5, r2, r0, lsl #22
     5f4:	040a0000 	streq	r0, [sl], #-0
     5f8:	00000074 	andeq	r0, r0, r4, ror r0
     5fc:	0002f405 	andeq	pc, r2, r5, lsl #8
     600:	02e00100 	rsceq	r0, r0, #0, 2
     604:	00000074 	andeq	r0, r0, r4, ror r0
     608:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
     60c:	00000008 	andeq	r0, r0, r8
     610:	047a9c01 	ldrbteq	r9, [sl], #-3073	; 0xfffff3ff
     614:	dd090000 	stcle	0, cr0, [r9, #-0]
     618:	01000001 	tsteq	r0, r1
     61c:	002c02e0 	eoreq	r0, ip, r0, ror #5
     620:	027a0000 	rsbseq	r0, sl, #0
     624:	ca080000 	bgt	20062c <__RW_SIZE__+0x2000a4>
     628:	01000001 	tsteq	r0, r1
     62c:	03a902e0 			; <UNDEFINED> instruction: 0x03a902e0
     630:	51010000 	mrspl	r0, (UNDEF: 1)
     634:	00028406 	andeq	r8, r2, r6, lsl #8
     638:	02e20100 	rsceq	r0, r2, #0, 2
     63c:	00000074 	andeq	r0, r0, r4, ror r0
     640:	0000029b 	muleq	r0, fp, r2
     644:	01c10500 	biceq	r0, r1, r0, lsl #10
     648:	f1010000 	setend	le
     64c:	00007402 	andeq	r7, r0, r2, lsl #8
     650:	0032e800 	eorseq	lr, r2, r0, lsl #16
     654:	00000808 	andeq	r0, r0, r8, lsl #16
     658:	c39c0100 	orrsgt	r0, ip, #0, 2
     65c:	09000004 	stmdbeq	r0, {r2}
     660:	000001dd 	ldrdeq	r0, [r0], -sp
     664:	5002f101 	andpl	pc, r2, r1, lsl #2
     668:	ba000000 	blt	670 <__RW_SIZE__+0xe8>
     66c:	08000002 	stmdaeq	r0, {r1}
     670:	000001ca 	andeq	r0, r0, sl, asr #3
     674:	ea02f101 	b	bca80 <__RW_SIZE__+0xbc4f8>
     678:	01000003 	tsteq	r0, r3
     67c:	02840651 	addeq	r0, r4, #84934656	; 0x5100000
     680:	f3010000 	vhadd.u8	d0, d1, d0
     684:	00007402 	andeq	r7, r0, r2, lsl #8
     688:	0002db00 	andeq	sp, r2, r0, lsl #22
     68c:	e20b0000 	and	r0, fp, #0
     690:	01000002 	tsteq	r0, r2
     694:	00740302 	rsbseq	r0, r4, r2, lsl #6
     698:	32f00000 	rscscc	r0, r0, #0
     69c:	00060800 	andeq	r0, r6, r0, lsl #16
     6a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6a4:	0001dd09 	andeq	sp, r1, r9, lsl #26
     6a8:	03020100 	movweq	r0, #8448	; 0x2100
     6ac:	00000074 	andeq	r0, r0, r4, ror r0
     6b0:	000002fa 	strdeq	r0, [r0], -sl
     6b4:	0001ca08 	andeq	ip, r1, r8, lsl #20
     6b8:	03020100 	movweq	r0, #8448	; 0x2100
     6bc:	0000042b 	andeq	r0, r0, fp, lsr #8
     6c0:	84065101 	strhi	r5, [r6], #-257	; 0xfffffeff
     6c4:	01000002 	tsteq	r0, r2
     6c8:	00740304 	rsbseq	r0, r4, r4, lsl #6
     6cc:	031b0000 	tsteq	fp, #0
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	00000a1c 	andeq	r0, r0, ip, lsl sl
     6d8:	015c0004 	cmpeq	ip, r4
     6dc:	01040000 	mrseq	r0, (UNDEF: 4)
     6e0:	000000ad 	andeq	r0, r0, sp, lsr #1
     6e4:	00031e01 	andeq	r1, r3, r1, lsl #28
     6e8:	00015700 	andeq	r5, r1, r0, lsl #14
     6ec:	0032f800 	eorseq	pc, r2, r0, lsl #16
     6f0:	00067e08 	andeq	r7, r6, r8, lsl #28
     6f4:	00019000 	andeq	r9, r1, r0
     6f8:	06010200 	streq	r0, [r1], -r0, lsl #4
     6fc:	00000068 	andeq	r0, r0, r8, rrx
     700:	66080102 	strvs	r0, [r8], -r2, lsl #2
     704:	02000000 	andeq	r0, r0, #0
     708:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
     70c:	02020000 	andeq	r0, r2, #0
     710:	00003e07 	andeq	r3, r0, r7, lsl #28
     714:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     718:	00000005 	andeq	r0, r0, r5
     71c:	9b070402 	blls	1c172c <__RW_SIZE__+0x1c11a4>
     720:	02000000 	andeq	r0, r0, #0
     724:	00000508 	andeq	r0, r0, r8, lsl #10
     728:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     72c:	00009607 	andeq	r9, r0, r7, lsl #12
     730:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     734:	00746e69 	rsbseq	r6, r4, r9, ror #28
     738:	a0070402 	andge	r0, r7, r2, lsl #8
     73c:	02000000 	andeq	r0, r0, #0
     740:	01430704 	cmpeq	r3, r4, lsl #14
     744:	04040000 	streq	r0, [r4], #-0
     748:	007a0405 	rsbseq	r0, sl, r5, lsl #8
     74c:	01020000 	mrseq	r0, (UNDEF: 2)
     750:	00006f08 	andeq	r6, r0, r8, lsl #30
     754:	87040500 	strhi	r0, [r4, -r0, lsl #10]
     758:	06000000 	streq	r0, [r0], -r0
     75c:	0000007a 	andeq	r0, r0, sl, ror r0
     760:	00034807 	andeq	r4, r3, r7, lsl #16
     764:	97280200 	strls	r0, [r8, -r0, lsl #4]!
     768:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     76c:	00000357 	andeq	r0, r0, r7, asr r3
     770:	ae000704 	cdpge	7, 0, cr0, cr0, cr4, {0}
     774:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     778:	0000037d 	andeq	r0, r0, sp, ror r3
     77c:	00000072 	andeq	r0, r0, r2, ror r0
     780:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
     784:	02000003 	andeq	r0, r0, #3
     788:	00008c62 	andeq	r8, r0, r2, ror #24
     78c:	03820a00 	orreq	r0, r2, #0, 20
     790:	0d010000 	stceq	0, cr0, [r1, #-0]
     794:	00014d01 	andeq	r4, r1, r1, lsl #26
     798:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     79c:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7a0:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
     7a4:	5d0d0100 	stfpls	f0, [sp, #-0]
     7a8:	0c000000 	stceq	0, cr0, [r0], {-0}
     7ac:	00000aaa 	andeq	r0, r0, sl, lsr #21
     7b0:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7b4:	290c0000 	stmdbcs	ip, {}	; <UNPREDICTABLE>
     7b8:	01000003 	tsteq	r0, r3
     7bc:	00005d0d 	andeq	r5, r0, sp, lsl #26
     7c0:	0bcd0c00 	bleq	ff3437c8 <MSP_BASE+0xdf33e7c8>
     7c4:	0d010000 	stceq	0, cr0, [r1, #-0]
     7c8:	0000005d 	andeq	r0, r0, sp, asr r0
     7cc:	00787a0b 	rsbseq	r7, r8, fp, lsl #20
     7d0:	005d0d01 	subseq	r0, sp, r1, lsl #26
     7d4:	7a0b0000 	bvc	2c07dc <__RW_SIZE__+0x2c0254>
     7d8:	0d010079 	stceq	0, cr0, [r1, #-484]	; 0xfffffe1c
     7dc:	0000005d 	andeq	r0, r0, sp, asr r0
     7e0:	0003900d 	andeq	r9, r3, sp
     7e4:	640f0100 	strvs	r0, [pc], #-256	; 7ec <__RW_SIZE__+0x264>
     7e8:	0d000000 	stceq	0, cr0, [r0, #-0]
     7ec:	00000338 	andeq	r0, r0, r8, lsr r3
     7f0:	00640f01 	rsbeq	r0, r4, r1, lsl #30
     7f4:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
     7f8:	10010073 	andne	r0, r1, r3, ror r0
     7fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     800:	0073790e 	rsbseq	r7, r3, lr, lsl #18
     804:	002c1001 	eoreq	r1, ip, r1
     808:	6a0d0000 	bvs	340810 <__RW_SIZE__+0x340288>
     80c:	01000003 	tsteq	r0, r3
     810:	00014d11 	andeq	r4, r1, r1, lsl sp
     814:	03970d00 	orrseq	r0, r7, #0, 26
     818:	12010000 	andne	r0, r1, #0
     81c:	0000015d 	andeq	r0, r0, sp, asr r1
     820:	002c0f00 	eoreq	r0, ip, r0, lsl #30
     824:	015d0000 	cmpeq	sp, r0
     828:	6b100000 	blvs	400830 <__RW_SIZE__+0x4002a8>
     82c:	1f000000 	svcne	0x00000000
     830:	002c0f00 	eoreq	r0, ip, r0, lsl #30
     834:	016d0000 	cmneq	sp, r0
     838:	6b100000 	blvs	400840 <__RW_SIZE__+0x4002b8>
     83c:	07000000 	streq	r0, [r0, -r0]
     840:	00b91100 	adcseq	r1, r9, r0, lsl #2
     844:	32f80000 	rscscc	r0, r8, #0
     848:	01fa0800 	mvnseq	r0, r0, lsl #16
     84c:	9c010000 	stcls	0, cr0, [r1], {-0}
     850:	0000038d 	andeq	r0, r0, sp, lsl #7
     854:	0000c512 	andeq	ip, r0, r2, lsl r5
     858:	00033a00 	andeq	r3, r3, r0, lsl #20
     85c:	00ce1200 	sbceq	r1, lr, r0, lsl #4
     860:	03660000 	cmneq	r6, #0
     864:	d7120000 	ldrle	r0, [r2, -r0]
     868:	92000000 	andls	r0, r0, #0
     86c:	12000003 	andne	r0, r0, #3
     870:	000000e2 	andeq	r0, r0, r2, ror #1
     874:	000003be 			; <UNDEFINED> instruction: 0x000003be
     878:	0000ed12 	andeq	lr, r0, r2, lsl sp
     87c:	0003ea00 	andeq	lr, r3, r0, lsl #20
     880:	00f81200 	rscseq	r1, r8, r0, lsl #4
     884:	040a0000 	streq	r0, [sl], #-0
     888:	02120000 	andseq	r0, r2, #0
     88c:	2a000001 	bcs	898 <__RW_SIZE__+0x310>
     890:	13000004 	movwne	r0, #4
     894:	0000010c 	andeq	r0, r0, ip, lsl #2
     898:	0000044a 	andeq	r0, r0, sl, asr #8
     89c:	00011714 	andeq	r1, r1, r4, lsl r7
     8a0:	22130000 	andscs	r0, r3, #0
     8a4:	71000001 	tstvc	r0, r1
     8a8:	13000004 	movwne	r0, #4
     8ac:	0000012c 	andeq	r0, r0, ip, lsr #2
     8b0:	000004c0 	andeq	r0, r0, r0, asr #9
     8b4:	00013615 	andeq	r3, r1, r5, lsl r6
     8b8:	b8910300 	ldmlt	r1, {r8, r9}
     8bc:	0141157f 	hvceq	4447	; 0x115f
     8c0:	91030000 	mrsls	r0, (UNDEF: 3)
     8c4:	ec167fb0 	ldc	15, cr7, [r6], {176}	; 0xb0
     8c8:	e9080033 	stmdb	r8, {r0, r1, r4, r5}
     8cc:	15000009 	strne	r0, [r0, #-9]
     8d0:	17000002 	strne	r0, [r0, -r2]
     8d4:	7a025201 	bvc	950e0 <__RW_SIZE__+0x94b58>
     8d8:	51011700 	tstpl	r1, r0, lsl #14
     8dc:	7fa49105 	svcvc	0x00a49105
     8e0:	01170294 			; <UNDEFINED> instruction: 0x01170294
     8e4:	00770250 	rsbseq	r0, r7, r0, asr r2
     8e8:	34021600 	strcc	r1, [r2], #-1536	; 0xfffffa00
     8ec:	09e90800 	stmibeq	r9!, {fp}^
     8f0:	02350000 	eorseq	r0, r5, #0
     8f4:	01170000 	tsteq	r7, r0
     8f8:	007a0252 	rsbseq	r0, sl, r2, asr r2
     8fc:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     900:	01170078 	tsteq	r7, r8, ror r0
     904:	01770250 	cmneq	r7, r0, asr r2
     908:	340c1800 	strcc	r1, [ip], #-2048	; 0xfffff800
     90c:	09e90800 	stmibeq	r9!, {fp}^
     910:	1c160000 	ldcne	0, cr0, [r6], {-0}
     914:	e9080034 	stmdb	r8, {r2, r4, r5}
     918:	5b000009 	blpl	944 <__RW_SIZE__+0x3bc>
     91c:	17000002 	strne	r0, [r0, -r2]
     920:	7a025201 	bvc	9512c <__RW_SIZE__+0x94ba4>
     924:	51011700 	tstpl	r1, r0, lsl #14
     928:	7fa49105 	svcvc	0x00a49105
     92c:	16000294 			; <UNDEFINED> instruction: 0x16000294
     930:	0800344a 	stmdaeq	r0, {r1, r3, r6, sl, ip, sp}
     934:	000009e9 	andeq	r0, r0, r9, ror #19
     938:	00000281 	andeq	r0, r0, r1, lsl #5
     93c:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     940:	0117007a 	tsteq	r7, sl, ror r0
     944:	007b0251 	rsbseq	r0, fp, r1, asr r2
     948:	08500117 	ldmdaeq	r0, {r0, r1, r2, r4, r8}^
     94c:	947f9c91 	ldrbtls	r9, [pc], #-3217	; 954 <__RW_SIZE__+0x3cc>
     950:	22007402 	andcs	r7, r0, #33554432	; 0x2000000
     954:	345a1600 	ldrbcc	r1, [sl], #-1536	; 0xfffffa00
     958:	09e90800 	stmibeq	r9!, {fp}^
     95c:	02a70000 	adceq	r0, r7, #0
     960:	01170000 	tsteq	r7, r0
     964:	00790252 	rsbseq	r0, r9, r2, asr r2
     968:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     96c:	0117007b 	tsteq	r7, fp, ror r0
     970:	9c910850 	ldcls	8, cr0, [r1], {80}	; 0x50
     974:	7402947f 	strvc	r9, [r2], #-1151	; 0xfffffb81
     978:	16002200 	strne	r2, [r0], -r0, lsl #4
     97c:	08003466 	stmdaeq	r0, {r1, r2, r5, r6, sl, ip, sp}
     980:	000009e9 	andeq	r0, r0, r9, ror #19
     984:	000002c7 	andeq	r0, r0, r7, asr #5
     988:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     98c:	01170079 	tsteq	r7, r9, ror r0
     990:	007b0251 	rsbseq	r0, fp, r1, asr r2
     994:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     998:	16000077 			; <UNDEFINED> instruction: 0x16000077
     99c:	08003472 	stmdaeq	r0, {r1, r4, r5, r6, sl, ip, sp}
     9a0:	000009e9 	andeq	r0, r0, r9, ror #19
     9a4:	000002e7 	andeq	r0, r0, r7, ror #5
     9a8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9ac:	01170079 	tsteq	r7, r9, ror r0
     9b0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9b4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9b8:	16000177 			; <UNDEFINED> instruction: 0x16000177
     9bc:	0800347e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, sp}
     9c0:	000009e9 	andeq	r0, r0, r9, ror #19
     9c4:	00000307 	andeq	r0, r0, r7, lsl #6
     9c8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9cc:	0117007a 	tsteq	r7, sl, ror r0
     9d0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9d4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9d8:	16000077 			; <UNDEFINED> instruction: 0x16000077
     9dc:	0800348a 	stmdaeq	r0, {r1, r3, r7, sl, ip, sp}
     9e0:	000009e9 	andeq	r0, r0, r9, ror #19
     9e4:	00000327 	andeq	r0, r0, r7, lsr #6
     9e8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     9ec:	0117007a 	tsteq	r7, sl, ror r0
     9f0:	007b0251 	rsbseq	r0, fp, r1, asr r2
     9f4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     9f8:	18000177 	stmdane	r0, {r0, r1, r2, r4, r5, r6, r8}
     9fc:	080034ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, ip, sp}
     a00:	000009e9 	andeq	r0, r0, r9, ror #19
     a04:	0034c816 	eorseq	ip, r4, r6, lsl r8
     a08:	0009e908 	andeq	lr, r9, r8, lsl #18
     a0c:	00034d00 	andeq	r4, r3, r0, lsl #26
     a10:	52011700 	andpl	r1, r1, #0, 14
     a14:	17007902 	strne	r7, [r0, -r2, lsl #18]
     a18:	91055101 	tstls	r5, r1, lsl #2
     a1c:	02947fa4 	addseq	r7, r4, #164, 30	; 0x290
     a20:	34d41600 	ldrbcc	r1, [r4], #1536	; 0x600
     a24:	09e90800 	stmibeq	r9!, {fp}^
     a28:	03700000 	cmneq	r0, #0
     a2c:	01170000 	tsteq	r7, r0
     a30:	00790252 	rsbseq	r0, r9, r2, asr r2
     a34:	05510117 	ldrbeq	r0, [r1, #-279]	; 0xfffffee9
     a38:	947fa491 	ldrbtls	sl, [pc], #-1169	; a40 <__RW_SIZE__+0x4b8>
     a3c:	50011702 	andpl	r1, r1, r2, lsl #14
     a40:	00007702 	andeq	r7, r0, r2, lsl #14
     a44:	0034ea19 	eorseq	lr, r4, r9, lsl sl
     a48:	0009e908 	andeq	lr, r9, r8, lsl #18
     a4c:	52011700 	andpl	r1, r1, #0, 14
     a50:	17007902 	strne	r7, [r0, -r2, lsl #18]
     a54:	78025101 	stmdavc	r2, {r0, r8, ip, lr}
     a58:	50011700 	andpl	r1, r1, r0, lsl #14
     a5c:	00017702 	andeq	r7, r1, r2, lsl #14
     a60:	03610a00 	cmneq	r1, #0, 20
     a64:	4a010000 	bmi	40a6c <__RW_SIZE__+0x404e4>
     a68:	0003ec01 	andeq	lr, r3, r1, lsl #24
     a6c:	00780b00 	rsbseq	r0, r8, r0, lsl #22
     a70:	005d4a01 	subseq	r4, sp, r1, lsl #20
     a74:	790b0000 	stmdbvc	fp, {}	; <UNPREDICTABLE>
     a78:	5d4a0100 	stfple	f0, [sl, #-0]
     a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a80:	00000aaa 	andeq	r0, r0, sl, lsr #21
     a84:	005d4a01 	subseq	r4, sp, r1, lsl #20
     a88:	290c0000 	stmdbcs	ip, {}	; <UNPREDICTABLE>
     a8c:	01000003 	tsteq	r0, r3
     a90:	00005d4a 	andeq	r5, r0, sl, asr #26
     a94:	74730b00 	ldrbtvc	r0, [r3], #-2816	; 0xfffff500
     a98:	4a010072 	bmi	40c68 <__RW_SIZE__+0x406e0>
     a9c:	00000081 	andeq	r0, r0, r1, lsl #1
     aa0:	00787a0b 	rsbseq	r7, r8, fp, lsl #20
     aa4:	005d4a01 	subseq	r4, sp, r1, lsl #20
     aa8:	7a0b0000 	bvc	2c0ab0 <__RW_SIZE__+0x2c0528>
     aac:	4a010079 	bmi	40c98 <__RW_SIZE__+0x40710>
     ab0:	0000005d 	andeq	r0, r0, sp, asr r0
     ab4:	000bcd0d 	andeq	ip, fp, sp, lsl #26
     ab8:	644c0100 	strbvs	r0, [ip], #-256	; 0xffffff00
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	00038d11 	andeq	r8, r3, r1, lsl sp
     ac4:	0034f400 	eorseq	pc, r4, r0, lsl #8
     ac8:	00022c08 	andeq	r2, r2, r8, lsl #24
     acc:	619c0100 	orrsvs	r0, ip, r0, lsl #2
     ad0:	12000006 	andne	r0, r0, #6
     ad4:	00000399 	muleq	r0, r9, r3
     ad8:	000004f4 	strdeq	r0, [r0], -r4
     adc:	0003a212 	andeq	sl, r3, r2, lsl r2
     ae0:	00052c00 	andeq	r2, r5, r0, lsl #24
     ae4:	03ab1200 			; <UNDEFINED> instruction: 0x03ab1200
     ae8:	054d0000 	strbeq	r0, [sp, #-0]
     aec:	b6120000 	ldrlt	r0, [r2], -r0
     af0:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
     af4:	12000005 	andne	r0, r0, #5
     af8:	000003c1 	andeq	r0, r0, r1, asr #7
     afc:	0000058f 	andeq	r0, r0, pc, lsl #11
     b00:	0003cc12 	andeq	ip, r3, r2, lsl ip
     b04:	0005d000 	andeq	sp, r5, r0
     b08:	03d61200 	bicseq	r1, r6, #0, 4
     b0c:	05f00000 	ldrbeq	r0, [r0, #0]!
     b10:	e0130000 	ands	r0, r3, r0
     b14:	10000003 	andne	r0, r0, r3
     b18:	1a000006 	bne	b38 <__RW_SIZE__+0x5b0>
     b1c:	000000b9 	strheq	r0, [r0], -r9
     b20:	08003522 	stmdaeq	r0, {r1, r5, r8, sl, ip, sp}
     b24:	00000010 	andeq	r0, r0, r0, lsl r0
     b28:	02125101 	andseq	r5, r2, #1073741824	; 0x40000000
     b2c:	28000001 	stmdacs	r0, {r0}
     b30:	12000006 	andne	r0, r0, #6
     b34:	000000f8 	strdeq	r0, [r0], -r8
     b38:	00000648 	andeq	r0, r0, r8, asr #12
     b3c:	0000ed12 	andeq	lr, r0, r2, lsl sp
     b40:	00061000 	andeq	r1, r6, r0
     b44:	00e21b00 	rsceq	r1, r2, r0, lsl #22
     b48:	d71b0000 	ldrle	r0, [fp, -r0]
     b4c:	12000000 	andne	r0, r0, #0
     b50:	000000ce 	andeq	r0, r0, lr, asr #1
     b54:	00000668 	andeq	r0, r0, r8, ror #12
     b58:	0000c512 	andeq	ip, r0, r2, lsl r5
     b5c:	00068c00 	andeq	r8, r6, r0, lsl #24
     b60:	00101c00 	andseq	r1, r0, r0, lsl #24
     b64:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
     b68:	13000001 	movwne	r0, #1
     b6c:	00000117 	andeq	r0, r0, r7, lsl r1
     b70:	000006ae 	andeq	r0, r0, lr, lsr #13
     b74:	00012213 	andeq	r2, r1, r3, lsl r2
     b78:	0006ce00 	andeq	ip, r6, r0, lsl #28
     b7c:	012c1300 	teqeq	ip, r0, lsl #6
     b80:	071d0000 	ldreq	r0, [sp, -r0]
     b84:	36150000 	ldrcc	r0, [r5], -r0
     b88:	03000001 	movweq	r0, #1
     b8c:	157fb891 	ldrbne	fp, [pc, #-2193]!	; 303 <__ZI_SIZE__+0x293>
     b90:	00000141 	andeq	r0, r0, r1, asr #2
     b94:	7fb09103 	svcvc	0x00b09103
     b98:	00360616 	eorseq	r0, r6, r6, lsl r6
     b9c:	0009e908 	andeq	lr, r9, r8, lsl #18
     ba0:	0004e700 	andeq	lr, r4, r0, lsl #14
     ba4:	52011700 	andpl	r1, r1, #0, 14
     ba8:	17007902 	strne	r7, [r0, -r2, lsl #18]
     bac:	91055101 	tstls	r5, r1, lsl #2
     bb0:	02947f94 	addseq	r7, r4, #148, 30	; 0x250
     bb4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     bb8:	16000077 			; <UNDEFINED> instruction: 0x16000077
     bbc:	0800361c 	stmdaeq	r0, {r2, r3, r4, r9, sl, ip, sp}
     bc0:	000009e9 	andeq	r0, r0, r9, ror #19
     bc4:	00000507 	andeq	r0, r0, r7, lsl #10
     bc8:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     bcc:	01170079 	tsteq	r7, r9, ror r0
     bd0:	00780251 	rsbseq	r0, r8, r1, asr r2
     bd4:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     bd8:	18000177 	stmdane	r0, {r0, r1, r2, r4, r5, r6, r8}
     bdc:	08003626 	stmdaeq	r0, {r1, r2, r5, r9, sl, ip, sp}
     be0:	000009e9 	andeq	r0, r0, r9, ror #19
     be4:	00363616 	eorseq	r3, r6, r6, lsl r6
     be8:	0009e908 	andeq	lr, r9, r8, lsl #18
     bec:	00052d00 	andeq	r2, r5, r0, lsl #26
     bf0:	52011700 	andpl	r1, r1, #0, 14
     bf4:	17007902 	strne	r7, [r0, -r2, lsl #18]
     bf8:	91055101 	tstls	r5, r1, lsl #2
     bfc:	02947f94 	addseq	r7, r4, #148, 30	; 0x250
     c00:	36781600 	ldrbtcc	r1, [r8], -r0, lsl #12
     c04:	09e90800 	stmibeq	r9!, {fp}^
     c08:	05530000 	ldrbeq	r0, [r3, #-0]
     c0c:	01170000 	tsteq	r7, r0
     c10:	00790252 	rsbseq	r0, r9, r2, asr r2
     c14:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c18:	0117007b 	tsteq	r7, fp, ror r0
     c1c:	8c910850 	ldchi	8, cr0, [r1], {80}	; 0x50
     c20:	7402947f 	strvc	r9, [r2], #-1151	; 0xfffffb81
     c24:	16002200 	strne	r2, [r0], -r0, lsl #4
     c28:	08003688 	stmdaeq	r0, {r3, r7, r9, sl, ip, sp}
     c2c:	000009e9 	andeq	r0, r0, r9, ror #19
     c30:	00000579 	andeq	r0, r0, r9, ror r5
     c34:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     c38:	0117007a 	tsteq	r7, sl, ror r0
     c3c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     c40:	08500117 	ldmdaeq	r0, {r0, r1, r2, r4, r8}^
     c44:	947f8c91 	ldrbtls	r8, [pc], #-3217	; c4c <__RW_SIZE__+0x6c4>
     c48:	22007402 	andcs	r7, r0, #33554432	; 0x2000000
     c4c:	36941600 	ldrcc	r1, [r4], r0, lsl #12
     c50:	09e90800 	stmibeq	r9!, {fp}^
     c54:	05990000 	ldreq	r0, [r9]
     c58:	01170000 	tsteq	r7, r0
     c5c:	007a0252 	rsbseq	r0, sl, r2, asr r2
     c60:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c64:	0117007b 	tsteq	r7, fp, ror r0
     c68:	00770250 	rsbseq	r0, r7, r0, asr r2
     c6c:	36a01600 	strtcc	r1, [r0], r0, lsl #12
     c70:	09e90800 	stmibeq	r9!, {fp}^
     c74:	05b90000 	ldreq	r0, [r9, #0]!
     c78:	01170000 	tsteq	r7, r0
     c7c:	007a0252 	rsbseq	r0, sl, r2, asr r2
     c80:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     c84:	0117007b 	tsteq	r7, fp, ror r0
     c88:	01770250 	cmneq	r7, r0, asr r2
     c8c:	36ac1600 	strtcc	r1, [ip], r0, lsl #12
     c90:	09e90800 	stmibeq	r9!, {fp}^
     c94:	05d90000 	ldrbeq	r0, [r9]
     c98:	01170000 	tsteq	r7, r0
     c9c:	00790252 	rsbseq	r0, r9, r2, asr r2
     ca0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     ca4:	0117007b 	tsteq	r7, fp, ror r0
     ca8:	00770250 	rsbseq	r0, r7, r0, asr r2
     cac:	36b81600 	ldrtcc	r1, [r8], r0, lsl #12
     cb0:	09e90800 	stmibeq	r9!, {fp}^
     cb4:	05f90000 	ldrbeq	r0, [r9, #0]!
     cb8:	01170000 	tsteq	r7, r0
     cbc:	00790252 	rsbseq	r0, r9, r2, asr r2
     cc0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     cc4:	0117007b 	tsteq	r7, fp, ror r0
     cc8:	01770250 	cmneq	r7, r0, asr r2
     ccc:	36e81800 	strbtcc	r1, [r8], r0, lsl #16
     cd0:	09e90800 	stmibeq	r9!, {fp}^
     cd4:	f6160000 			; <UNDEFINED> instruction: 0xf6160000
     cd8:	e9080036 	stmdb	r8, {r1, r2, r4, r5}
     cdc:	1f000009 	svcne	0x00000009
     ce0:	17000006 	strne	r0, [r0, -r6]
     ce4:	7a025201 	bvc	954f0 <__RW_SIZE__+0x94f68>
     ce8:	51011700 	tstpl	r1, r0, lsl #14
     cec:	7f949105 	svcvc	0x00949105
     cf0:	16000294 			; <UNDEFINED> instruction: 0x16000294
     cf4:	08003702 	stmdaeq	r0, {r1, r8, r9, sl, ip, sp}
     cf8:	000009e9 	andeq	r0, r0, r9, ror #19
     cfc:	00000642 	andeq	r0, r0, r2, asr #12
     d00:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     d04:	0117007a 	tsteq	r7, sl, ror r0
     d08:	94910551 	ldrls	r0, [r1], #1361	; 0x551
     d0c:	1702947f 	smlsdxne	r2, pc, r4, r9	; <UNPREDICTABLE>
     d10:	77025001 	strvc	r5, [r2, -r1]
     d14:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
     d18:	e9080037 	stmdb	r8, {r0, r1, r2, r4, r5}
     d1c:	17000009 	strne	r0, [r0, -r9]
     d20:	7a025201 	bvc	9552c <__RW_SIZE__+0x94fa4>
     d24:	51011700 	tstpl	r1, r0, lsl #14
     d28:	17007802 	strne	r7, [r0, -r2, lsl #16]
     d2c:	77025001 	strvc	r5, [r2, -r1]
     d30:	00000001 	andeq	r0, r0, r1
     d34:	033d1e00 	teqeq	sp, #0, 28
     d38:	56010000 	strpl	r0, [r1], -r0
     d3c:	08003720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp}
     d40:	00000256 	andeq	r0, r0, r6, asr r2
     d44:	09a19c01 	stmibeq	r1!, {r0, sl, fp, ip, pc}
     d48:	781f0000 	ldmdavc	pc, {}	; <UNPREDICTABLE>
     d4c:	5d560100 	ldfple	f0, [r6, #-0]
     d50:	51000000 	mrspl	r0, (UNDEF: 0)
     d54:	1f000007 	svcne	0x00000007
     d58:	56010079 			; <UNDEFINED> instruction: 0x56010079
     d5c:	0000005d 	andeq	r0, r0, sp, asr r0
     d60:	0000077f 	andeq	r0, r0, pc, ror r7
     d64:	000aaa20 	andeq	sl, sl, r0, lsr #20
     d68:	5d560100 	ldfple	f0, [r6, #-0]
     d6c:	ab000000 	blge	d74 <__RW_SIZE__+0x7ec>
     d70:	20000007 	andcs	r0, r0, r7
     d74:	00000329 	andeq	r0, r0, r9, lsr #6
     d78:	005d5601 	subseq	r5, sp, r1, lsl #12
     d7c:	07d70000 	ldrbeq	r0, [r7, r0]
     d80:	7a1f0000 	bvc	7c0d88 <__RW_SIZE__+0x7c0800>
     d84:	56010078 			; <UNDEFINED> instruction: 0x56010078
     d88:	0000005d 	andeq	r0, r0, sp, asr r0
     d8c:	00000803 	andeq	r0, r0, r3, lsl #16
     d90:	00797a1f 	rsbseq	r7, r9, pc, lsl sl
     d94:	005d5601 	subseq	r5, sp, r1, lsl #12
     d98:	08230000 	stmdaeq	r3!, {}	; <UNPREDICTABLE>
     d9c:	661f0000 	ldrvs	r0, [pc], -r0
     da0:	0100746d 	tsteq	r0, sp, ror #8
     da4:	00008156 	andeq	r8, r0, r6, asr r1
     da8:	00084300 	andeq	r4, r8, r0, lsl #6
     dac:	61222100 	teqvs	r2, r0, lsl #2
     db0:	58010070 	stmdapl	r1, {r4, r5, r6}
     db4:	000000ae 	andeq	r0, r0, lr, lsr #1
     db8:	7dac9103 	stfvcd	f1, [ip, #12]!
     dbc:	00033123 	andeq	r3, r3, r3, lsr #2
     dc0:	a1590100 	cmpge	r9, r0, lsl #2
     dc4:	03000009 	movweq	r0, #9
     dc8:	247dd891 	ldrbtcs	sp, [sp], #-2193	; 0xfffff76f
     dcc:	0000038d 	andeq	r0, r0, sp, lsl #7
     dd0:	08003742 	stmdaeq	r0, {r1, r6, r8, r9, sl, ip, sp}
     dd4:	00000028 	andeq	r0, r0, r8, lsr #32
     dd8:	09825d01 	stmibeq	r2, {r0, r8, sl, fp, ip, lr}
     ddc:	d6120000 	ldrle	r0, [r2], -r0
     de0:	63000003 	movwvs	r0, #3
     de4:	12000008 	andne	r0, r0, #8
     de8:	000003cc 	andeq	r0, r0, ip, asr #7
     dec:	00000882 	andeq	r0, r0, r2, lsl #17
     df0:	0003c112 	andeq	ip, r3, r2, lsl r1
     df4:	0008a100 	andeq	sl, r8, r0, lsl #2
     df8:	03b61200 			; <UNDEFINED> instruction: 0x03b61200
     dfc:	08f10000 	ldmeq	r1!, {}^	; <UNPREDICTABLE>
     e00:	ab120000 	blge	480e08 <__RW_SIZE__+0x480880>
     e04:	12000003 	andne	r0, r0, #3
     e08:	12000009 	andne	r0, r0, #9
     e0c:	000003a2 	andeq	r0, r0, r2, lsr #7
     e10:	00000933 	andeq	r0, r0, r3, lsr r9
     e14:	00039912 	andeq	r9, r3, r2, lsl r9
     e18:	00095400 	andeq	r5, r9, r0, lsl #8
     e1c:	00281c00 	eoreq	r1, r8, r0, lsl #24
     e20:	e0130000 	ands	r0, r3, r0
     e24:	81000003 	tsthi	r0, r3
     e28:	1a000009 	bne	e54 <__RW_SIZE__+0x8cc>
     e2c:	000000b9 	strheq	r0, [r0], -r9
     e30:	0800375e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, ip, sp}
     e34:	00000040 	andeq	r0, r0, r0, asr #32
     e38:	02125101 	andseq	r5, r2, #1073741824	; 0x40000000
     e3c:	99000001 	stmdbls	r0, {r0}
     e40:	12000009 	andne	r0, r0, #9
     e44:	000000f8 	strdeq	r0, [r0], -r8
     e48:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
     e4c:	0000ed12 	andeq	lr, r0, r2, lsl sp
     e50:	00098100 	andeq	r8, r9, r0, lsl #2
     e54:	00e21b00 	rsceq	r1, r2, r0, lsl #22
     e58:	d71b0000 	ldrle	r0, [fp, -r0]
     e5c:	12000000 	andne	r0, r0, #0
     e60:	000000ce 	andeq	r0, r0, lr, asr #1
     e64:	000009d9 	ldrdeq	r0, [r0], -r9
     e68:	0000c512 	andeq	ip, r0, r2, lsl r5
     e6c:	0009fd00 	andeq	pc, r9, r0, lsl #26
     e70:	00401c00 	subeq	r1, r0, r0, lsl #24
     e74:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
     e78:	13000001 	movwne	r0, #1
     e7c:	00000117 	andeq	r0, r0, r7, lsl r1
     e80:	00000a1f 	andeq	r0, r0, pc, lsl sl
     e84:	00012213 	andeq	r2, r1, r3, lsl r2
     e88:	000a3f00 	andeq	r3, sl, r0, lsl #30
     e8c:	012c1300 	teqeq	ip, r0, lsl #6
     e90:	0a8e0000 	beq	fe380e98 <MSP_BASE+0xde37be98>
     e94:	36150000 	ldrcc	r0, [r5], -r0
     e98:	03000001 	movweq	r0, #1
     e9c:	157db891 	ldrbne	fp, [sp, #-2193]!	; 0xfffff76f
     ea0:	00000141 	andeq	r0, r0, r1, asr #2
     ea4:	7db09103 	ldfvcd	f1, [r0, #12]!
     ea8:	00385216 	eorseq	r5, r8, r6, lsl r2
     eac:	0009e908 	andeq	lr, r9, r8, lsl #18
     eb0:	0007fa00 	andeq	pc, r7, r0, lsl #20
     eb4:	52011700 	andpl	r1, r1, #0, 14
     eb8:	7cfc9105 	ldfvcp	f1, [ip], #20
     ebc:	01170294 			; <UNDEFINED> instruction: 0x01170294
     ec0:	8c910551 	cfldr32hi	mvfx0, [r1], {81}	; 0x51
     ec4:	1702947d 	smlsdxne	r2, sp, r4, r9
     ec8:	78025001 	stmdavc	r2, {r0, ip, lr}
     ecc:	68160000 	ldmdavs	r6, {}	; <UNPREDICTABLE>
     ed0:	e9080038 	stmdb	r8, {r3, r4, r5}
     ed4:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
     ed8:	17000008 	strne	r0, [r0, -r8]
     edc:	91055201 	tstls	r5, r1, lsl #4
     ee0:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     ee4:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     ee8:	0117007a 	tsteq	r7, sl, ror r0
     eec:	01780250 	cmneq	r8, r0, asr r2
     ef0:	38721800 	ldmdacc	r2!, {fp, ip}^
     ef4:	09e90800 	stmibeq	r9!, {fp}^
     ef8:	82160000 	andshi	r0, r6, #0
     efc:	e9080038 	stmdb	r8, {r3, r4, r5}
     f00:	46000009 	strmi	r0, [r0], -r9
     f04:	17000008 	strne	r0, [r0, -r8]
     f08:	91055201 	tstls	r5, r1, lsl #4
     f0c:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     f10:	05510117 	ldrbeq	r0, [r1, #-279]	; 0xfffffee9
     f14:	947d8c91 	ldrbtls	r8, [sp], #-3217	; 0xfffff36f
     f18:	ca160002 	bgt	580f28 <__RW_SIZE__+0x5809a0>
     f1c:	e9080038 	stmdb	r8, {r3, r4, r5}
     f20:	6e000009 	cdpvs	0, 0, cr0, cr0, cr9, {0}
     f24:	17000008 	strne	r0, [r0, -r8]
     f28:	91055201 	tstls	r5, r1, lsl #4
     f2c:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     f30:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     f34:	0117007b 	tsteq	r7, fp, ror r0
     f38:	84910750 	ldrhi	r0, [r1], #1872	; 0x750
     f3c:	0074067d 	rsbseq	r0, r4, sp, ror r6
     f40:	da160022 	ble	580fd0 <__RW_SIZE__+0x580a48>
     f44:	e9080038 	stmdb	r8, {r3, r4, r5}
     f48:	93000009 	movwls	r0, #9
     f4c:	17000008 	strne	r0, [r0, -r8]
     f50:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
     f54:	51011700 	tstpl	r1, r0, lsl #14
     f58:	17007b02 	strne	r7, [r0, -r2, lsl #22]
     f5c:	91075001 	tstls	r7, r1
     f60:	74067d84 	strvc	r7, [r6], #-3460	; 0xfffff27c
     f64:	16002200 	strne	r2, [r0], -r0, lsl #4
     f68:	080038e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp, ip, sp}
     f6c:	000009e9 	andeq	r0, r0, r9, ror #19
     f70:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
     f74:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     f78:	01170079 	tsteq	r7, r9, ror r0
     f7c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     f80:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     f84:	16000078 			; <UNDEFINED> instruction: 0x16000078
     f88:	080038f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, sp}
     f8c:	000009e9 	andeq	r0, r0, r9, ror #19
     f90:	000008d3 	ldrdeq	r0, [r0], -r3
     f94:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
     f98:	01170079 	tsteq	r7, r9, ror r0
     f9c:	007b0251 	rsbseq	r0, fp, r1, asr r2
     fa0:	02500117 	subseq	r0, r0, #-1073741819	; 0xc0000005
     fa4:	16000178 			; <UNDEFINED> instruction: 0x16000178
     fa8:	08003900 	stmdaeq	r0, {r8, fp, ip, sp}
     fac:	000009e9 	andeq	r0, r0, r9, ror #19
     fb0:	000008f6 	strdeq	r0, [r0], -r6
     fb4:	05520117 	ldrbeq	r0, [r2, #-279]	; 0xfffffee9
     fb8:	947cfc91 	ldrbtls	pc, [ip], #-3217	; 0xfffff36f	; <UNPREDICTABLE>
     fbc:	51011702 	tstpl	r1, r2, lsl #14
     fc0:	17007b02 	strne	r7, [r0, -r2, lsl #22]
     fc4:	78025001 	stmdavc	r2, {r0, ip, lr}
     fc8:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
     fcc:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
     fd0:	19000009 	stmdbne	r0, {r0, r3}
     fd4:	17000009 	strne	r0, [r0, -r9]
     fd8:	91055201 	tstls	r5, r1, lsl #4
     fdc:	02947cfc 	addseq	r7, r4, #252, 24	; 0xfc00
     fe0:	02510117 	subseq	r0, r1, #-1073741819	; 0xc0000005
     fe4:	0117007b 	tsteq	r7, fp, ror r0
     fe8:	01780250 	cmneq	r8, r0, asr r2
     fec:	393e1800 	ldmdbcc	lr!, {fp, ip}
     ff0:	09e90800 	stmibeq	r9!, {fp}^
     ff4:	4c160000 	ldcmi	0, cr0, [r6], {-0}
     ff8:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
     ffc:	3f000009 	svccc	0x00000009
    1000:	17000009 	strne	r0, [r0, -r9]
    1004:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    1008:	51011700 	tstpl	r1, r0, lsl #14
    100c:	7d8c9105 	stfvcd	f1, [ip, #20]
    1010:	16000294 			; <UNDEFINED> instruction: 0x16000294
    1014:	08003958 	stmdaeq	r0, {r3, r4, r6, r8, fp, ip, sp}
    1018:	000009e9 	andeq	r0, r0, r9, ror #19
    101c:	00000962 	andeq	r0, r0, r2, ror #18
    1020:	02520117 	subseq	r0, r2, #-1073741819	; 0xc0000005
    1024:	01170079 	tsteq	r7, r9, ror r0
    1028:	8c910551 	cfldr32hi	mvfx0, [r1], {81}	; 0x51
    102c:	1702947d 	smlsdxne	r2, sp, r4, r9
    1030:	78025001 	stmdavc	r2, {r0, ip, lr}
    1034:	6e190000 	cdpvs	0, 1, cr0, cr9, cr0, {0}
    1038:	e9080039 	stmdb	r8, {r0, r3, r4, r5}
    103c:	17000009 	strne	r0, [r0, -r9]
    1040:	79025201 	stmdbvc	r2, {r0, r9, ip, lr}
    1044:	51011700 	tstpl	r1, r0, lsl #14
    1048:	17007a02 	strne	r7, [r0, -r2, lsl #20]
    104c:	78025001 	stmdavc	r2, {r0, ip, lr}
    1050:	00000001 	andeq	r0, r0, r1
    1054:	42190000 	andsmi	r0, r9, #0
    1058:	04080037 	streq	r0, [r8], #-55	; 0xffffffc9
    105c:	1700000a 	strne	r0, [r0, -sl]
    1060:	91025201 	tstls	r2, r1, lsl #4
    1064:	5101170c 	tstpl	r1, ip, lsl #14
    1068:	06089103 	streq	r9, [r8], -r3, lsl #2
    106c:	03500117 	cmpeq	r0, #-1073741819	; 0xc0000005
    1070:	007dd891 			; <UNDEFINED> instruction: 0x007dd891
    1074:	007a0f00 	rsbseq	r0, sl, r0, lsl #30
    1078:	09b10000 	ldmibeq	r1!, {}	; <UNPREDICTABLE>
    107c:	6b100000 	blvs	401084 <__RW_SIZE__+0x400afc>
    1080:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1084:	00512500 	subseq	r2, r1, r0, lsl #10
    1088:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    108c:	0009bd06 	andeq	fp, r9, r6, lsl #26
    1090:	005d2600 	subseq	r2, sp, r0, lsl #12
    1094:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    1098:	d3000000 	movwle	r0, #0
    109c:	27000009 	strcs	r0, [r0, -r9]
    10a0:	0000006b 	andeq	r0, r0, fp, rrx
    10a4:	28000fff 	stmdacs	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    10a8:	00000316 	andeq	r0, r0, r6, lsl r3
    10ac:	09e40104 	stmibeq	r4!, {r2, r8}^
    10b0:	03050000 	movweq	r0, #20480	; 0x5000
    10b4:	0800dc58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, lr, pc}
    10b8:	0009c206 	andeq	ip, r9, r6, lsl #4
    10bc:	036f2900 	cmneq	pc, #0, 18
    10c0:	10050000 	andne	r0, r5, r0
    10c4:	00000a04 	andeq	r0, r0, r4, lsl #20
    10c8:	00003a2a 	andeq	r3, r0, sl, lsr #20
    10cc:	003a2a00 	eorseq	r2, sl, r0, lsl #20
    10d0:	3a2a0000 	bcc	a810d8 <__RW_SIZE__+0xa80b50>
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	00039f2b 	andeq	r9, r3, fp, lsr #30
    10dc:	5ddc0600 	ldclpl	6, cr0, [ip]
    10e0:	2a000000 	bcs	10e8 <__RW_SIZE__+0xb60>
    10e4:	00000074 	andeq	r0, r0, r4, ror r0
    10e8:	0000812a 	andeq	r8, r0, sl, lsr #2
    10ec:	008c2a00 	addeq	r2, ip, r0, lsl #20
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	0000079a 	muleq	r0, sl, r7
    10f8:	03730004 	cmneq	r3, #4
    10fc:	01040000 	mrseq	r0, (UNDEF: 4)
    1100:	000000ad 	andeq	r0, r0, sp, lsr #1
    1104:	0006c401 	andeq	ip, r6, r1, lsl #8
    1108:	00015700 	andeq	r5, r1, r0, lsl #14
    110c:	00397800 	eorseq	r7, r9, r0, lsl #16
    1110:	00028808 	andeq	r8, r2, r8, lsl #16
    1114:	0003a900 	andeq	sl, r3, r0, lsl #18
    1118:	04320200 	ldrteq	r0, [r2], #-512	; 0xfffffe00
    111c:	03010000 	movweq	r0, #4096	; 0x1000
    1120:	000164a8 	andeq	r6, r1, r8, lsr #9
    1124:	065d0300 	ldrbeq	r0, [sp], -r0, lsl #6
    1128:	03720000 	cmneq	r2, #0
    112c:	0000045a 	andeq	r0, r0, sl, asr r4
    1130:	059a0374 	ldreq	r0, [sl, #884]	; 0x374
    1134:	03750000 	cmneq	r5, #0
    1138:	0000071d 	andeq	r0, r0, sp, lsl r7
    113c:	073a0376 			; <UNDEFINED> instruction: 0x073a0376
    1140:	037b0000 	cmneq	fp, #0
    1144:	0000070b 	andeq	r0, r0, fp, lsl #14
    1148:	0437037c 	ldrteq	r0, [r7], #-892	; 0xfffffc84
    114c:	037e0000 	cmneq	lr, #0
    1150:	000006ce 	andeq	r0, r0, lr, asr #13
    1154:	0590037f 	ldreq	r0, [r0, #895]	; 0x37f
    1158:	03000000 	movweq	r0, #0
    115c:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    1160:	07be0301 	ldreq	r0, [lr, r1, lsl #6]!
    1164:	03020000 	movweq	r0, #8192	; 0x2000
    1168:	00000609 	andeq	r0, r0, r9, lsl #12
    116c:	040d0303 	streq	r0, [sp], #-771	; 0xfffffcfd
    1170:	03040000 	movweq	r0, #16384	; 0x4000
    1174:	00000451 	andeq	r0, r0, r1, asr r4
    1178:	041d0305 	ldreq	r0, [sp], #-773	; 0xfffffcfb
    117c:	03060000 	movweq	r0, #24576	; 0x6000
    1180:	00000683 	andeq	r0, r0, r3, lsl #13
    1184:	05000307 	streq	r0, [r0, #-775]	; 0xfffffcf9
    1188:	03080000 	movweq	r0, #32768	; 0x8000
    118c:	0000077c 	andeq	r0, r0, ip, ror r7
    1190:	05a80309 	streq	r0, [r8, #777]!	; 0x309
    1194:	030a0000 	movweq	r0, #40960	; 0xa000
    1198:	00000567 	andeq	r0, r0, r7, ror #10
    119c:	03fa030b 	mvnseq	r0, #738197504	; 0x2c000000
    11a0:	030c0000 	movweq	r0, #49152	; 0xc000
    11a4:	000005d7 	ldrdeq	r0, [r0], -r7
    11a8:	0496030d 	ldreq	r0, [r6], #781	; 0x30d
    11ac:	030e0000 	movweq	r0, #57344	; 0xe000
    11b0:	00000769 	andeq	r0, r0, r9, ror #14
    11b4:	0535030f 	ldreq	r0, [r5, #-783]!	; 0xfffffcf1
    11b8:	03100000 	tsteq	r0, #0
    11bc:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11c0:	078c0311 	usada8eq	ip, r1, r3, r0
    11c4:	03120000 	tsteq	r2, #0
    11c8:	000004d6 	ldrdeq	r0, [r0], -r6
    11cc:	03a80313 			; <UNDEFINED> instruction: 0x03a80313
    11d0:	03140000 	tsteq	r4, #0
    11d4:	000004c8 	andeq	r0, r0, r8, asr #9
    11d8:	03c20315 	biceq	r0, r2, #1409286144	; 0x54000000
    11dc:	03160000 	tsteq	r6, #0
    11e0:	0000072d 	andeq	r0, r0, sp, lsr #14
    11e4:	04750317 	ldrbteq	r0, [r5], #-791	; 0xfffffce9
    11e8:	03180000 	tsteq	r8, #0
    11ec:	000005f7 	strdeq	r0, [r0], -r7
    11f0:	06980319 			; <UNDEFINED> instruction: 0x06980319
    11f4:	031a0000 	tsteq	sl, #0
    11f8:	00000671 	andeq	r0, r0, r1, ror r6
    11fc:	06e7031b 	usateq	r0, #7, fp, lsl #6
    1200:	031c0000 	tsteq	ip, #0
    1204:	0000055d 	andeq	r0, r0, sp, asr r5
    1208:	03f0031d 	mvnseq	r0, #1946157056	; 0x74000000
    120c:	031e0000 	tsteq	lr, #0
    1210:	000005ea 	andeq	r0, r0, sl, ror #11
    1214:	06b7031f 	ssateq	r0, #24, pc, lsl #6	; <UNPREDICTABLE>
    1218:	03200000 	teqeq	r0, #0
    121c:	0000051b 	andeq	r0, r0, fp, lsl r5
    1220:	03e30321 	mvneq	r0, #-2080374784	; 0x84000000
    1224:	03220000 	teqeq	r2, #0
    1228:	0000048c 	andeq	r0, r0, ip, lsl #9
    122c:	075a0323 	ldrbeq	r0, [sl, -r3, lsr #6]
    1230:	03240000 	teqeq	r4, #0
    1234:	00000651 	andeq	r0, r0, r1, asr r6
    1238:	04f40325 	ldrbteq	r0, [r4], #805	; 0x325
    123c:	03260000 	teqeq	r6, #0
    1240:	00000798 	muleq	r0, r8, r7
    1244:	04280327 	strteq	r0, [r8], #-807	; 0xfffffcd9
    1248:	03280000 	teqeq	r8, #0
    124c:	000007cf 	andeq	r0, r0, pc, asr #15
    1250:	05810329 	streq	r0, [r1, #809]	; 0x329
    1254:	002a0000 	eoreq	r0, sl, r0
    1258:	0004ea04 	andeq	lr, r4, r4, lsl #20
    125c:	01d90300 	bicseq	r0, r9, r0, lsl #6
    1260:	00000025 	andeq	r0, r0, r5, lsr #32
    1264:	68060105 	stmdavs	r6, {r0, r2, r8}
    1268:	06000000 	streq	r0, [r0], -r0
    126c:	0000027c 	andeq	r0, r0, ip, ror r2
    1270:	01822a04 	orreq	r2, r2, r4, lsl #20
    1274:	01050000 	mrseq	r0, (UNDEF: 5)
    1278:	00006608 	andeq	r6, r0, r8, lsl #12
    127c:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    1280:	000001a2 	andeq	r0, r0, r2, lsr #3
    1284:	3e070205 	cdpcc	2, 0, cr0, cr7, cr5, {0}
    1288:	05000000 	streq	r0, [r0, #-0]
    128c:	00050504 	andeq	r0, r5, r4, lsl #10
    1290:	b8060000 	stmdalt	r6, {}	; <UNPREDICTABLE>
    1294:	04000001 	streq	r0, [r0], #-1
    1298:	0001a950 	andeq	sl, r1, r0, asr r9
    129c:	07040500 	streq	r0, [r4, -r0, lsl #10]
    12a0:	0000009b 	muleq	r0, fp, r0
    12a4:	00050805 	andeq	r0, r5, r5, lsl #16
    12a8:	05000000 	streq	r0, [r0, #-0]
    12ac:	00960708 	addseq	r0, r6, r8, lsl #14
    12b0:	04070000 	streq	r0, [r7], #-0
    12b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    12b8:	07040500 	streq	r0, [r4, -r0, lsl #10]
    12bc:	000000a0 	andeq	r0, r0, r0, lsr #1
    12c0:	020e0408 	andeq	r0, lr, #8, 8	; 0x8000000
    12c4:	00027a84 	andeq	r7, r2, r4, lsl #21
    12c8:	04700900 	ldrbteq	r0, [r0], #-2304	; 0xfffff700
    12cc:	86020000 	strhi	r0, [r2], -r0
    12d0:	00000291 	muleq	r0, r1, r2
    12d4:	06120900 	ldreq	r0, [r2], -r0, lsl #18
    12d8:	87020000 	strhi	r0, [r2, -r0]
    12dc:	00000296 	muleq	r0, r6, r2
    12e0:	07550920 	ldrbeq	r0, [r5, -r0, lsr #18]
    12e4:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    12e8:	000002a6 	andeq	r0, r0, r6, lsr #5
    12ec:	04830980 	streq	r0, [r3], #2432	; 0x980
    12f0:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    12f4:	00000296 	muleq	r0, r6, r2
    12f8:	07870aa0 	streq	r0, [r7, r0, lsr #21]
    12fc:	8a020000 	bhi	81304 <__RW_SIZE__+0x80d7c>
    1300:	000002ab 	andeq	r0, r0, fp, lsr #5
    1304:	1c0a0100 	stfnes	f0, [sl], {-0}
    1308:	02000006 	andeq	r0, r0, #6
    130c:	0002968b 	andeq	r9, r2, fp, lsl #13
    1310:	0a012000 	beq	49318 <__RW_SIZE__+0x48d90>
    1314:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    1318:	02b08c02 	adcseq	r8, r0, #512	; 0x200
    131c:	01800000 	orreq	r0, r0, r0
    1320:	0006260a 	andeq	r2, r6, sl, lsl #12
    1324:	968d0200 	strls	r0, [sp], r0, lsl #4
    1328:	a0000002 	andge	r0, r0, r2
    132c:	07640a01 	strbeq	r0, [r4, -r1, lsl #20]!
    1330:	8e020000 	cdphi	0, 0, cr0, cr2, cr0, {0}
    1334:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    1338:	300a0200 	andcc	r0, sl, r0, lsl #4
    133c:	02000006 	andeq	r0, r0, #6
    1340:	0002ba8f 	andeq	fp, r2, pc, lsl #21
    1344:	0b022000 	bleq	8934c <__RW_SIZE__+0x88dc4>
    1348:	02005049 	andeq	r5, r0, #73	; 0x49
    134c:	0002da90 	muleq	r2, r0, sl
    1350:	0a030000 	beq	c1358 <__RW_SIZE__+0xc0dd0>
    1354:	0000063a 	andeq	r0, r0, sl, lsr r6
    1358:	02df9102 	sbcseq	r9, pc, #-2147483648	; 0x80000000
    135c:	03f00000 	mvnseq	r0, #0
    1360:	0006040a 	andeq	r0, r6, sl, lsl #8
    1364:	f0920200 			; <UNDEFINED> instruction: 0xf0920200
    1368:	00000002 	andeq	r0, r0, r2
    136c:	9e0c000e 	cdpls	0, 0, cr0, cr12, cr14, {0}
    1370:	8a000001 	bhi	137c <__RW_SIZE__+0xdf4>
    1374:	0d000002 	stceq	0, cr0, [r0, #-8]
    1378:	0000028a 	andeq	r0, r0, sl, lsl #5
    137c:	04050007 	streq	r0, [r5], #-7
    1380:	00014307 	andeq	r4, r1, r7, lsl #6
    1384:	027a0e00 	rsbseq	r0, sl, #0, 28
    1388:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    138c:	a6000001 	strge	r0, [r0], -r1
    1390:	0d000002 	stceq	0, cr0, [r0, #-8]
    1394:	0000028a 	andeq	r0, r0, sl, lsl #5
    1398:	7a0e0017 	bvc	3813fc <__RW_SIZE__+0x380e74>
    139c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    13a0:	0000027a 	andeq	r0, r0, sl, ror r2
    13a4:	00027a0e 	andeq	r7, r2, lr, lsl #20
    13a8:	027a0e00 	rsbseq	r0, sl, #0, 28
    13ac:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    13b0:	ca000001 	bgt	13bc <__RW_SIZE__+0xe34>
    13b4:	0d000002 	stceq	0, cr0, [r0, #-8]
    13b8:	0000028a 	andeq	r0, r0, sl, lsl #5
    13bc:	770c0037 	smladxvc	ip, r7, r0, r0
    13c0:	da000001 	ble	13cc <__RW_SIZE__+0xe44>
    13c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    13c8:	0000028a 	andeq	r0, r0, sl, lsl #5
    13cc:	ca0e00ef 	bgt	381790 <__RW_SIZE__+0x381208>
    13d0:	0c000002 	stceq	0, cr0, [r0], {2}
    13d4:	0000019e 	muleq	r0, lr, r1
    13d8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13dc:	00028a0f 	andeq	r8, r2, pc, lsl #20
    13e0:	00028300 	andeq	r8, r2, r0, lsl #6
    13e4:	00019e0e 	andeq	r9, r1, lr, lsl #28
    13e8:	068e0600 	streq	r0, [lr], r0, lsl #12
    13ec:	93020000 	movwls	r0, #8192	; 0x2000
    13f0:	000001cc 	andeq	r0, r0, ip, asr #3
    13f4:	00019e0c 	andeq	r9, r1, ip, lsl #28
    13f8:	00031000 	andeq	r1, r3, r0
    13fc:	028a0d00 	addeq	r0, sl, #0, 26
    1400:	00030000 	andeq	r0, r3, r0
    1404:	77031810 	smladvc	r3, r0, r8, r1
    1408:	00036703 	andeq	r6, r3, r3, lsl #14
    140c:	4d491100 	stfmie	f1, [r9, #-0]
    1410:	79030052 	stmdbvc	r3, {r1, r4, r6}
    1414:	0002f003 	andeq	pc, r2, r3
    1418:	45110000 	ldrmi	r0, [r1, #-0]
    141c:	0300524d 	movweq	r5, #589	; 0x24d
    1420:	02f0037a 	rscseq	r0, r0, #-402653183	; 0xe8000001
    1424:	12040000 	andne	r0, r4, #0
    1428:	0000067e 	andeq	r0, r0, lr, ror r6
    142c:	f0037b03 			; <UNDEFINED> instruction: 0xf0037b03
    1430:	08000002 	stmdaeq	r0, {r1}
    1434:	0006f112 	andeq	pc, r6, r2, lsl r1	; <UNPREDICTABLE>
    1438:	037c0300 	cmneq	ip, #0, 6
    143c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1440:	06e1120c 	strbteq	r1, [r1], ip, lsl #4
    1444:	7d030000 	stcvc	0, cr0, [r3, #-0]
    1448:	0002f003 	andeq	pc, r2, r3
    144c:	50111000 	andspl	r1, r1, r0
    1450:	7e030052 	mcrvc	0, 0, r0, cr3, cr2, {2}
    1454:	0002f003 	andeq	pc, r2, r3
    1458:	04001400 	streq	r1, [r0], #-1024	; 0xfffffc00
    145c:	00000644 	andeq	r0, r0, r4, asr #12
    1460:	10037f03 	andne	r7, r3, r3, lsl #30
    1464:	10000003 	andne	r0, r0, r3
    1468:	03e9031c 	mvneq	r0, #28, 6	; 0x70000000
    146c:	000003d8 	ldrdeq	r0, [r0], -r8
    1470:	4c524311 	mrrcmi	3, 1, r4, r2, cr1
    1474:	03eb0300 	mvneq	r0, #0, 6
    1478:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    147c:	52431100 	subpl	r1, r3, #0, 2
    1480:	ec030048 	stc	0, cr0, [r3], {72}	; 0x48
    1484:	0002f003 	andeq	pc, r2, r3
    1488:	49110400 	ldmdbmi	r1, {sl}
    148c:	03005244 	movweq	r5, #580	; 0x244
    1490:	02f003ed 	rscseq	r0, r0, #-1275068413	; 0xb4000003
    1494:	11080000 	mrsne	r0, (UNDEF: 8)
    1498:	0052444f 	subseq	r4, r2, pc, asr #8
    149c:	f003ee03 			; <UNDEFINED> instruction: 0xf003ee03
    14a0:	0c000002 	stceq	0, cr0, [r0], {2}
    14a4:	0003bd12 	andeq	fp, r3, r2, lsl sp
    14a8:	03ef0300 	mvneq	r0, #0, 6
    14ac:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    14b0:	52421110 	subpl	r1, r2, #16, 2
    14b4:	f0030052 			; <UNDEFINED> instruction: 0xf0030052
    14b8:	0002f003 	andeq	pc, r2, r3
    14bc:	ca121400 	bgt	4864c4 <__RW_SIZE__+0x485f3c>
    14c0:	03000007 	movweq	r0, #7
    14c4:	02f003f1 	rscseq	r0, r0, #-1006632957	; 0xc4000003
    14c8:	00180000 	andseq	r0, r8, r0
    14cc:	0006aa04 	andeq	sl, r6, r4, lsl #20
    14d0:	03f20300 	mvnseq	r0, #0, 6
    14d4:	00000373 	andeq	r0, r0, r3, ror r3
    14d8:	f8032010 			; <UNDEFINED> instruction: 0xf8032010
    14dc:	00042f03 	andeq	r2, r4, r3, lsl #30
    14e0:	07a41200 	streq	r1, [r4, r0, lsl #4]!
    14e4:	fa030000 	blx	c14ec <__RW_SIZE__+0xc0f64>
    14e8:	0002f003 	andeq	pc, r2, r3
    14ec:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
    14f0:	03000004 	movweq	r0, #4
    14f4:	02f003fb 	rscseq	r0, r0, #-335544317	; 0xec000003
    14f8:	12040000 	andne	r0, r4, #0
    14fc:	0000057a 	andeq	r0, r0, sl, ror r5
    1500:	2f03fc03 	svccs	0x0003fc03
    1504:	08000004 	stmdaeq	r0, {r2}
    1508:	00061212 	andeq	r1, r6, r2, lsl r2
    150c:	03fd0300 	mvnseq	r0, #0, 6
    1510:	0000019e 	muleq	r0, lr, r1
    1514:	06db1218 			; <UNDEFINED> instruction: 0x06db1218
    1518:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    151c:	0002f003 	andeq	pc, r2, r3
    1520:	0e001c00 	cdpeq	12, 0, cr1, cr0, cr0, {0}
    1524:	00000300 	andeq	r0, r0, r0, lsl #6
    1528:	00052804 	andeq	r2, r5, r4, lsl #16
    152c:	03ff0300 	mvnseq	r0, #0, 6
    1530:	000003e4 	andeq	r0, r0, r4, ror #7
    1534:	34032810 	strcc	r2, [r3], #-2064	; 0xfffff7f0
    1538:	0004cb04 	andeq	ip, r4, r4, lsl #22
    153c:	52431100 	subpl	r1, r3, #0, 2
    1540:	04360300 	ldrteq	r0, [r6], #-768	; 0xfffffd00
    1544:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1548:	08601200 	stmdaeq	r0!, {r9, ip}^
    154c:	37030000 	strcc	r0, [r3, -r0]
    1550:	0002f004 	andeq	pc, r2, r4
    1554:	43110400 	tstmi	r1, #0, 8
    1558:	03005249 	movweq	r5, #585	; 0x249
    155c:	02f00438 	rscseq	r0, r0, #56, 8	; 0x38000000
    1560:	12080000 	andne	r0, r8, #0
    1564:	0000008d 	andeq	r0, r0, sp, lsl #1
    1568:	f0043903 			; <UNDEFINED> instruction: 0xf0043903
    156c:	0c000002 	stceq	0, cr0, [r0], {2}
    1570:	00003512 	andeq	r3, r0, r2, lsl r5
    1574:	043a0300 	ldrteq	r0, [sl], #-768	; 0xfffffd00
    1578:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    157c:	00211210 	eoreq	r1, r1, r0, lsl r2
    1580:	3b030000 	blcc	c1588 <__RW_SIZE__+0xc1000>
    1584:	0002f004 	andeq	pc, r2, r4
    1588:	7d121400 	cfldrsvc	mvf1, [r2, #-0]
    158c:	03000000 	movweq	r0, #0
    1590:	02f0043c 	rscseq	r0, r0, #60, 8	; 0x3c000000
    1594:	12180000 	andsne	r0, r8, #0
    1598:	00000085 	andeq	r0, r0, r5, lsl #1
    159c:	f0043d03 			; <UNDEFINED> instruction: 0xf0043d03
    15a0:	1c000002 	stcne	0, cr0, [r0], {2}
    15a4:	00000e12 	andeq	r0, r0, r2, lsl lr
    15a8:	043e0300 	ldrteq	r0, [lr], #-768	; 0xfffffd00
    15ac:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    15b0:	53431120 	movtpl	r1, #12576	; 0x3120
    15b4:	3f030052 	svccc	0x00030052
    15b8:	0002f004 	andeq	pc, r2, r4
    15bc:	04002400 	streq	r2, [r0], #-1024	; 0xfffffc00
    15c0:	000001ac 	andeq	r0, r0, ip, lsr #3
    15c4:	40044a03 	andmi	r4, r4, r3, lsl #20
    15c8:	05000004 	streq	r0, [r0, #-4]
    15cc:	006f0801 	rsbeq	r0, pc, r1, lsl #16
    15d0:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
    15d4:	02000005 	andeq	r0, r0, #5
    15d8:	f8030613 			; <UNDEFINED> instruction: 0xf8030613
    15dc:	14000004 	strne	r0, [r0], #-4
    15e0:	00000432 	andeq	r0, r0, r2, lsr r4
    15e4:	64061302 	strvs	r1, [r6], #-770	; 0xfffffcfe
    15e8:	00000001 	andeq	r0, r0, r1
    15ec:	0004a913 	andeq	sl, r4, r3, lsl r9
    15f0:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    15f4:	00051203 	andeq	r1, r5, r3, lsl #4
    15f8:	04321400 	ldrteq	r1, [r2], #-1024	; 0xfffffc00
    15fc:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    1600:	00016405 	andeq	r6, r1, r5, lsl #8
    1604:	43150000 	tstmi	r5, #0
    1608:	01000004 	tsteq	r0, r4
    160c:	00397809 	eorseq	r7, r9, r9, lsl #16
    1610:	00007c08 	andeq	r7, r0, r8, lsl #24
    1614:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1618:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    161c:	01be2301 			; <UNDEFINED> instruction: 0x01be2301
    1620:	3f010000 	svccc	0x00010000
    1624:	17000005 	strne	r0, [r0, -r5]
    1628:	0079656b 	rsbseq	r6, r9, fp, ror #10
    162c:	01be2701 			; <UNDEFINED> instruction: 0x01be2701
    1630:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1634:	000006f6 	strdeq	r0, [r0], -r6
    1638:	01be3001 			; <UNDEFINED> instruction: 0x01be3001
    163c:	39f40000 	ldmibcc	r4!, {}^	; <UNPREDICTABLE>
    1640:	00660800 	rsbeq	r0, r6, r0, lsl #16
    1644:	9c010000 	stcls	0, cr0, [r1], {-0}
    1648:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    164c:	01006919 	tsteq	r0, r9, lsl r9
    1650:	0001c532 	andeq	ip, r1, r2, lsr r5
    1654:	000ac200 	andeq	ip, sl, r0, lsl #4
    1658:	006b1a00 	rsbeq	r1, fp, r0, lsl #20
    165c:	01c53201 	biceq	r3, r5, r1, lsl #4
    1660:	50010000 	andpl	r0, r1, r0
    1664:	0005231b 	andeq	r2, r5, fp, lsl r3
    1668:	0039f600 	eorseq	pc, r9, r0, lsl #12
    166c:	00003608 	andeq	r3, r0, r8, lsl #12
    1670:	97360100 	ldrls	r0, [r6, -r0, lsl #2]!
    1674:	1c000005 	stcne	0, cr0, [r0], {5}
    1678:	080039f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, fp, ip, sp}
    167c:	00000036 	andeq	r0, r0, r6, lsr r0
    1680:	0005331d 	andeq	r3, r5, sp, lsl r3
    1684:	000ad600 	andeq	sp, sl, r0, lsl #12
    1688:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    168c:	00000523 	andeq	r0, r0, r3, lsr #10
    1690:	08003a2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, ip, sp}
    1694:	00000022 	andeq	r0, r0, r2, lsr #32
    1698:	2c1c3a01 	ldccs	10, cr3, [ip], {1}
    169c:	2208003a 	andcs	r0, r8, #58	; 0x3a
    16a0:	1d000000 	stcne	0, cr0, [r0, #-0]
    16a4:	00000533 	andeq	r0, r0, r3, lsr r5
    16a8:	00000b62 	andeq	r0, r0, r2, ror #22
    16ac:	1f000000 	svcne	0x00000000
    16b0:	0000050b 	andeq	r0, r0, fp, lsl #10
    16b4:	01be4601 			; <UNDEFINED> instruction: 0x01be4601
    16b8:	d7010000 	strle	r0, [r1, -r0]
    16bc:	17000005 	strne	r0, [r0, -r5]
    16c0:	0079656b 	rsbseq	r6, r9, fp, ror #10
    16c4:	01be4901 			; <UNDEFINED> instruction: 0x01be4901
    16c8:	20000000 	andcs	r0, r0, r0
    16cc:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    16d0:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
    16d4:	00000034 	andeq	r0, r0, r4, lsr r0
    16d8:	05f49c01 	ldrbeq	r9, [r4, #3073]!	; 0xc01
    16dc:	cb1d0000 	blgt	7416e4 <__RW_SIZE__+0x74115c>
    16e0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	0007a918 	andeq	sl, r7, r8, lsl r9
    16ec:	be500100 	rdflts	f0, f0, f0
    16f0:	90000001 	andls	r0, r0, r1
    16f4:	3c08003a 	stccc	0, cr0, [r8], {58}	; 0x3a
    16f8:	01000000 	mrseq	r0, (UNDEF: 0)
    16fc:	0006409c 	muleq	r6, ip, r0
    1700:	656b1900 	strbvs	r1, [fp, #-2304]!	; 0xfffff700
    1704:	52010079 	andpl	r0, r1, #121	; 0x79
    1708:	000001be 			; <UNDEFINED> instruction: 0x000001be
    170c:	00000cd8 	ldrdeq	r0, [r0], -r8
    1710:	0005bb1e 	andeq	fp, r5, lr, lsl fp
    1714:	003a9200 	eorseq	r9, sl, r0, lsl #4
    1718:	00003008 	andeq	r3, r0, r8
    171c:	1c530100 	ldfnee	f0, [r3], {-0}
    1720:	08003a92 	stmdaeq	r0, {r1, r4, r7, r9, fp, ip, sp}
    1724:	00000030 	andeq	r0, r0, r0, lsr r0
    1728:	0005cb1d 	andeq	ip, r5, sp, lsl fp
    172c:	000cec00 	andeq	lr, ip, r0, lsl #24
    1730:	00000000 	andeq	r0, r0, r0
    1734:	0005c121 	andeq	ip, r5, r1, lsr #2
    1738:	cc570100 	ldfgte	f0, [r7], {-0}
    173c:	3c08003a 	stccc	0, cr0, [r8], {58}	; 0x3a
    1740:	01000000 	mrseq	r0, (UNDEF: 0)
    1744:	0006799c 	muleq	r6, ip, r9
    1748:	05bb1e00 	ldreq	r1, [fp, #3584]!	; 0xe00
    174c:	3ace0000 	bcc	ff381754 <MSP_BASE+0xdf37c754>
    1750:	00300800 	eorseq	r0, r0, r0, lsl #16
    1754:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1758:	003ace1c 	eorseq	ip, sl, ip, lsl lr
    175c:	00003008 	andeq	r3, r0, r8
    1760:	05cb1d00 	strbeq	r1, [fp, #3328]	; 0xd00
    1764:	0d880000 	stceq	0, cr0, [r8]
    1768:	00000000 	andeq	r0, r0, r0
    176c:	07462100 	strbeq	r2, [r6, -r0, lsl #2]
    1770:	5c010000 	stcpl	0, cr0, [r1], {-0}
    1774:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
    1778:	000000f8 	strdeq	r0, [r0], -r8
    177c:	078c9c01 	streq	r9, [ip, r1, lsl #24]
    1780:	65220000 	strvs	r0, [r2, #-0]!
    1784:	5c01006e 	stcpl	0, cr0, [r1], {110}	; 0x6e
    1788:	000001be 			; <UNDEFINED> instruction: 0x000001be
    178c:	00000e43 	andeq	r0, r0, r3, asr #28
    1790:	0004f823 	andeq	pc, r4, r3, lsr #16
    1794:	003b0c00 	eorseq	r0, fp, r0, lsl #24
    1798:	00005808 	andeq	r5, r0, r8, lsl #16
    179c:	b97c0100 	ldmdblt	ip!, {r8}^
    17a0:	24000006 	strcs	r0, [r0], #-6
    17a4:	00000505 	andeq	r0, r0, r5, lsl #10
    17a8:	00000e7d 	andeq	r0, r0, sp, ror lr
    17ac:	04f82300 	ldrbteq	r2, [r8], #768	; 0x300
    17b0:	3b180000 	blcc	6017b8 <__RW_SIZE__+0x601230>
    17b4:	00700800 	rsbseq	r0, r0, r0, lsl #16
    17b8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    17bc:	000006d6 	ldrdeq	r0, [r0], -r6
    17c0:	00050524 	andeq	r0, r5, r4, lsr #10
    17c4:	000e9100 	andeq	r9, lr, r0, lsl #2
    17c8:	f8230000 			; <UNDEFINED> instruction: 0xf8230000
    17cc:	1c000004 	stcne	0, cr0, [r0], {4}
    17d0:	8808003b 	stmdahi	r8, {r0, r1, r3, r4, r5}
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	0006f37e 	andeq	pc, r6, lr, ror r3	; <UNPREDICTABLE>
    17dc:	05052400 	streq	r2, [r5, #-1024]	; 0xfffffc00
    17e0:	0ea50000 	cdpeq	0, 10, cr0, cr5, cr0, {0}
    17e4:	23000000 	movwcs	r0, #0
    17e8:	000004de 	ldrdeq	r0, [r0], -lr
    17ec:	08003b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, ip, sp}
    17f0:	000000a0 	andeq	r0, r0, r0, lsr #1
    17f4:	070d6e01 	streq	r6, [sp, -r1, lsl #28]
    17f8:	eb250000 	bl	941800 <__RW_SIZE__+0x941278>
    17fc:	09000004 	stmdbeq	r0, {r2}
    1800:	04de2300 	ldrbeq	r2, [lr], #768	; 0x300
    1804:	3bc20000 	blcc	ff08180c <MSP_BASE+0xdf07c80c>
    1808:	00c80800 	sbceq	r0, r8, r0, lsl #16
    180c:	6f010000 	svcvs	0x00010000
    1810:	00000727 	andeq	r0, r0, r7, lsr #14
    1814:	0004eb25 	andeq	lr, r4, r5, lsr #22
    1818:	23001700 	movwcs	r1, #1792	; 0x700
    181c:	000004de 	ldrdeq	r0, [r0], -lr
    1820:	08003bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip, sp}
    1824:	000000e0 	andeq	r0, r0, r0, ror #1
    1828:	07417001 	strbeq	r7, [r1, -r1]
    182c:	eb250000 	bl	941834 <__RW_SIZE__+0x9412ac>
    1830:	28000004 	stmdacs	r0, {r2}
    1834:	04f81b00 	ldrbteq	r1, [r8], #2816	; 0xb00
    1838:	3bf60000 	blcc	ffd81840 <MSP_BASE+0xdfd7c840>
    183c:	00020800 	andeq	r0, r2, r0, lsl #16
    1840:	76010000 	strvc	r0, [r1], -r0
    1844:	0000075b 	andeq	r0, r0, fp, asr r7
    1848:	00050525 	andeq	r0, r5, r5, lsr #10
    184c:	1b000900 	blne	3c54 <__RW_SIZE__+0x36cc>
    1850:	000004f8 	strdeq	r0, [r0], -r8
    1854:	08003bf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
    1858:	00000002 	andeq	r0, r0, r2
    185c:	07757701 	ldrbeq	r7, [r5, -r1, lsl #14]!
    1860:	05250000 	streq	r0, [r5, #-0]!
    1864:	17000005 	strne	r0, [r0, -r5]
    1868:	04f81e00 	ldrbteq	r1, [r8], #3584	; 0xe00
    186c:	3bfa0000 	blcc	ffe81874 <MSP_BASE+0xdfe7c874>
    1870:	00020800 	andeq	r0, r2, r0, lsl #16
    1874:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1878:	00050525 	andeq	r0, r5, r5, lsr #10
    187c:	00002800 	andeq	r2, r0, r0, lsl #16
    1880:	00005126 	andeq	r5, r0, r6, lsr #2
    1884:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    1888:	00000798 	muleq	r0, r8, r7
    188c:	0001be0e 	andeq	fp, r1, lr, lsl #28
    1890:	062e0000 	strteq	r0, [lr], -r0
    1894:	00040000 	andeq	r0, r4, r0
    1898:	0000059c 	muleq	r0, ip, r5
    189c:	00ad0104 	adceq	r0, sp, r4, lsl #2
    18a0:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    18a4:	57000006 	strpl	r0, [r0, -r6]
    18a8:	00000001 	andeq	r0, r0, r1
    18ac:	f208003c 	vqadd.s8	d0, d8, d28
    18b0:	a5000000 	strge	r0, [r0, #-0]
    18b4:	02000005 	andeq	r0, r0, #5
    18b8:	00000432 	andeq	r0, r0, r2, lsr r4
    18bc:	64a80301 	strtvs	r0, [r8], #769	; 0x301
    18c0:	03000001 	movweq	r0, #1
    18c4:	0000065d 	andeq	r0, r0, sp, asr r6
    18c8:	045a0372 	ldrbeq	r0, [sl], #-882	; 0xfffffc8e
    18cc:	03740000 	cmneq	r4, #0
    18d0:	0000059a 	muleq	r0, sl, r5
    18d4:	071d0375 			; <UNDEFINED> instruction: 0x071d0375
    18d8:	03760000 	cmneq	r6, #0
    18dc:	0000073a 	andeq	r0, r0, sl, lsr r7
    18e0:	070b037b 	smlsdxeq	fp, fp, r3, r0
    18e4:	037c0000 	cmneq	ip, #0
    18e8:	00000437 	andeq	r0, r0, r7, lsr r4
    18ec:	06ce037e 			; <UNDEFINED> instruction: 0x06ce037e
    18f0:	037f0000 	cmneq	pc, #0
    18f4:	00000590 	muleq	r0, r0, r5
    18f8:	05b30300 	ldreq	r0, [r3, #768]!	; 0x300
    18fc:	03010000 	movweq	r0, #4096	; 0x1000
    1900:	000007be 			; <UNDEFINED> instruction: 0x000007be
    1904:	06090302 	streq	r0, [r9], -r2, lsl #6
    1908:	03030000 	movweq	r0, #12288	; 0x3000
    190c:	0000040d 	andeq	r0, r0, sp, lsl #8
    1910:	04510304 	ldrbeq	r0, [r1], #-772	; 0xfffffcfc
    1914:	03050000 	movweq	r0, #20480	; 0x5000
    1918:	0000041d 	andeq	r0, r0, sp, lsl r4
    191c:	06830306 	streq	r0, [r3], r6, lsl #6
    1920:	03070000 	movweq	r0, #28672	; 0x7000
    1924:	00000500 	andeq	r0, r0, r0, lsl #10
    1928:	077c0308 	ldrbeq	r0, [ip, -r8, lsl #6]!
    192c:	03090000 	movweq	r0, #36864	; 0x9000
    1930:	000005a8 	andeq	r0, r0, r8, lsr #11
    1934:	0567030a 	strbeq	r0, [r7, #-778]!	; 0xfffffcf6
    1938:	030b0000 	movweq	r0, #45056	; 0xb000
    193c:	000003fa 	strdeq	r0, [r0], -sl
    1940:	05d7030c 	ldrbeq	r0, [r7, #780]	; 0x30c
    1944:	030d0000 	movweq	r0, #53248	; 0xd000
    1948:	00000496 	muleq	r0, r6, r4
    194c:	0769030e 	strbeq	r0, [r9, -lr, lsl #6]!
    1950:	030f0000 	movweq	r0, #61440	; 0xf000
    1954:	00000535 	andeq	r0, r0, r5, lsr r5
    1958:	03d00310 	bicseq	r0, r0, #16, 6	; 0x40000000
    195c:	03110000 	tsteq	r1, #0
    1960:	0000078c 	andeq	r0, r0, ip, lsl #15
    1964:	04d60312 	ldrbeq	r0, [r6], #786	; 0x312
    1968:	03130000 	tsteq	r3, #0
    196c:	000003a8 	andeq	r0, r0, r8, lsr #7
    1970:	04c80314 	strbeq	r0, [r8], #788	; 0x314
    1974:	03150000 	tsteq	r5, #0
    1978:	000003c2 	andeq	r0, r0, r2, asr #7
    197c:	072d0316 			; <UNDEFINED> instruction: 0x072d0316
    1980:	03170000 	tsteq	r7, #0
    1984:	00000475 	andeq	r0, r0, r5, ror r4
    1988:	05f70318 	ldrbeq	r0, [r7, #792]!	; 0x318
    198c:	03190000 	tsteq	r9, #0
    1990:	00000698 	muleq	r0, r8, r6
    1994:	0671031a 			; <UNDEFINED> instruction: 0x0671031a
    1998:	031b0000 	tsteq	fp, #0
    199c:	000006e7 	andeq	r0, r0, r7, ror #13
    19a0:	055d031c 	ldrbeq	r0, [sp, #-796]	; 0xfffffce4
    19a4:	031d0000 	tsteq	sp, #0
    19a8:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    19ac:	05ea031e 	strbeq	r0, [sl, #798]!	; 0x31e
    19b0:	031f0000 	tsteq	pc, #0
    19b4:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    19b8:	051b0320 	ldreq	r0, [fp, #-800]	; 0xfffffce0
    19bc:	03210000 	teqeq	r1, #0
    19c0:	000003e3 	andeq	r0, r0, r3, ror #7
    19c4:	048c0322 	streq	r0, [ip], #802	; 0x322
    19c8:	03230000 	teqeq	r3, #0
    19cc:	0000075a 	andeq	r0, r0, sl, asr r7
    19d0:	06510324 	ldrbeq	r0, [r1], -r4, lsr #6
    19d4:	03250000 	teqeq	r5, #0
    19d8:	000004f4 	strdeq	r0, [r0], -r4
    19dc:	07980326 	ldreq	r0, [r8, r6, lsr #6]
    19e0:	03270000 	teqeq	r7, #0
    19e4:	00000428 	andeq	r0, r0, r8, lsr #8
    19e8:	07cf0328 	strbeq	r0, [pc, r8, lsr #6]
    19ec:	03290000 	teqeq	r9, #0
    19f0:	00000581 	andeq	r0, r0, r1, lsl #11
    19f4:	ea04002a 	b	101aa4 <__RW_SIZE__+0x10151c>
    19f8:	03000004 	movweq	r0, #4
    19fc:	002501d9 	ldrdeq	r0, [r5], -r9	; <UNPREDICTABLE>
    1a00:	01050000 	mrseq	r0, (UNDEF: 5)
    1a04:	00006806 	andeq	r6, r0, r6, lsl #16
    1a08:	027c0600 	rsbseq	r0, ip, #0, 12
    1a0c:	2a040000 	bcs	101a14 <__RW_SIZE__+0x10148c>
    1a10:	00000182 	andeq	r0, r0, r2, lsl #3
    1a14:	66080105 	strvs	r0, [r8], -r5, lsl #2
    1a18:	05000000 	streq	r0, [r0, #-0]
    1a1c:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
    1a20:	02050000 	andeq	r0, r5, #0
    1a24:	00003e07 	andeq	r3, r0, r7, lsl #28
    1a28:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    1a2c:	00000005 	andeq	r0, r0, r5
    1a30:	0001b806 	andeq	fp, r1, r6, lsl #16
    1a34:	a9500400 	ldmdbge	r0, {sl}^
    1a38:	05000001 	streq	r0, [r0, #-1]
    1a3c:	009b0704 	addseq	r0, fp, r4, lsl #14
    1a40:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    1a44:	00000005 	andeq	r0, r0, r5
    1a48:	07080500 	streq	r0, [r8, -r0, lsl #10]
    1a4c:	00000096 	muleq	r0, r6, r0
    1a50:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    1a54:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    1a58:	00a00704 	adceq	r0, r0, r4, lsl #14
    1a5c:	04080000 	streq	r0, [r8], #-0
    1a60:	7a84020e 	bvc	fe1022a0 <MSP_BASE+0xde0fd2a0>
    1a64:	09000002 	stmdbeq	r0, {r1}
    1a68:	00000470 	andeq	r0, r0, r0, ror r4
    1a6c:	02918602 	addseq	r8, r1, #2097152	; 0x200000
    1a70:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1a74:	00000612 	andeq	r0, r0, r2, lsl r6
    1a78:	02968702 	addseq	r8, r6, #524288	; 0x80000
    1a7c:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    1a80:	00000755 	andeq	r0, r0, r5, asr r7
    1a84:	02a68802 	adceq	r8, r6, #131072	; 0x20000
    1a88:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    1a8c:	00000483 	andeq	r0, r0, r3, lsl #9
    1a90:	02968902 	addseq	r8, r6, #32768	; 0x8000
    1a94:	0aa00000 	beq	fe801a9c <MSP_BASE+0xde7fca9c>
    1a98:	00000787 	andeq	r0, r0, r7, lsl #15
    1a9c:	02ab8a02 	adceq	r8, fp, #8192	; 0x2000
    1aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa4:	00061c0a 	andeq	r1, r6, sl, lsl #24
    1aa8:	968b0200 	strls	r0, [fp], r0, lsl #4
    1aac:	20000002 	andcs	r0, r0, r2
    1ab0:	05bc0a01 	ldreq	r0, [ip, #2561]!	; 0xa01
    1ab4:	8c020000 	stchi	0, cr0, [r2], {-0}
    1ab8:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
    1abc:	260a0180 	strcs	r0, [sl], -r0, lsl #3
    1ac0:	02000006 	andeq	r0, r0, #6
    1ac4:	0002968d 	andeq	r9, r2, sp, lsl #13
    1ac8:	0a01a000 	beq	69ad0 <__RW_SIZE__+0x69548>
    1acc:	00000764 	andeq	r0, r0, r4, ror #14
    1ad0:	02b58e02 	adcseq	r8, r5, #2, 28
    1ad4:	02000000 	andeq	r0, r0, #0
    1ad8:	0006300a 	andeq	r3, r6, sl
    1adc:	ba8f0200 	blt	fe3c22e4 <MSP_BASE+0xde3bd2e4>
    1ae0:	20000002 	andcs	r0, r0, r2
    1ae4:	50490b02 	subpl	r0, r9, r2, lsl #22
    1ae8:	da900200 	ble	fe4022f0 <MSP_BASE+0xde3fd2f0>
    1aec:	00000002 	andeq	r0, r0, r2
    1af0:	063a0a03 	ldrteq	r0, [sl], -r3, lsl #20
    1af4:	91020000 	mrsls	r0, (UNDEF: 2)
    1af8:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1afc:	040a03f0 	streq	r0, [sl], #-1008	; 0xfffffc10
    1b00:	02000006 	andeq	r0, r0, #6
    1b04:	0002f092 	muleq	r2, r2, r0
    1b08:	000e0000 	andeq	r0, lr, r0
    1b0c:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b10:	00028a00 	andeq	r8, r2, r0, lsl #20
    1b14:	028a0d00 	addeq	r0, sl, #0, 26
    1b18:	00070000 	andeq	r0, r7, r0
    1b1c:	43070405 	movwmi	r0, #29701	; 0x7405
    1b20:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1b24:	0000027a 	andeq	r0, r0, sl, ror r2
    1b28:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b2c:	0002a600 	andeq	sl, r2, r0, lsl #12
    1b30:	028a0d00 	addeq	r0, sl, #0, 26
    1b34:	00170000 	andseq	r0, r7, r0
    1b38:	00027a0e 	andeq	r7, r2, lr, lsl #20
    1b3c:	027a0e00 	rsbseq	r0, sl, #0, 28
    1b40:	7a0e0000 	bvc	381b48 <__RW_SIZE__+0x3815c0>
    1b44:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1b48:	0000027a 	andeq	r0, r0, sl, ror r2
    1b4c:	00019e0c 	andeq	r9, r1, ip, lsl #28
    1b50:	0002ca00 	andeq	ip, r2, r0, lsl #20
    1b54:	028a0d00 	addeq	r0, sl, #0, 26
    1b58:	00370000 	eorseq	r0, r7, r0
    1b5c:	0001770c 	andeq	r7, r1, ip, lsl #14
    1b60:	0002da00 	andeq	sp, r2, r0, lsl #20
    1b64:	028a0d00 	addeq	r0, sl, #0, 26
    1b68:	00ef0000 	rsceq	r0, pc, r0
    1b6c:	0002ca0e 	andeq	ip, r2, lr, lsl #20
    1b70:	019e0c00 	orrseq	r0, lr, r0, lsl #24
    1b74:	02f00000 	rscseq	r0, r0, #0
    1b78:	8a0f0000 	bhi	3c1b80 <__RW_SIZE__+0x3c15f8>
    1b7c:	83000002 	movwhi	r0, #2
    1b80:	9e0e0002 	cdpls	0, 0, cr0, cr14, cr2, {0}
    1b84:	06000001 	streq	r0, [r0], -r1
    1b88:	0000068e 	andeq	r0, r0, lr, lsl #13
    1b8c:	01cc9302 	biceq	r9, ip, r2, lsl #6
    1b90:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    1b94:	10000001 	andne	r0, r0, r1
    1b98:	0d000003 	stceq	0, cr0, [r0, #-12]
    1b9c:	0000028a 	andeq	r0, r0, sl, lsl #5
    1ba0:	18100003 	ldmdane	r0, {r0, r1}
    1ba4:	67037703 	strvs	r7, [r3, -r3, lsl #14]
    1ba8:	11000003 	tstne	r0, r3
    1bac:	00524d49 	subseq	r4, r2, r9, asr #26
    1bb0:	f0037903 			; <UNDEFINED> instruction: 0xf0037903
    1bb4:	00000002 	andeq	r0, r0, r2
    1bb8:	524d4511 	subpl	r4, sp, #71303168	; 0x4400000
    1bbc:	037a0300 	cmneq	sl, #0, 6
    1bc0:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bc4:	067e1204 	ldrbteq	r1, [lr], -r4, lsl #4
    1bc8:	7b030000 	blvc	c1bd0 <__RW_SIZE__+0xc1648>
    1bcc:	0002f003 	andeq	pc, r2, r3
    1bd0:	f1120800 			; <UNDEFINED> instruction: 0xf1120800
    1bd4:	03000006 	movweq	r0, #6
    1bd8:	02f0037c 	rscseq	r0, r0, #124, 6	; 0xf0000001
    1bdc:	120c0000 	andne	r0, ip, #0
    1be0:	000006e1 	andeq	r0, r0, r1, ror #13
    1be4:	f0037d03 			; <UNDEFINED> instruction: 0xf0037d03
    1be8:	10000002 	andne	r0, r0, r2
    1bec:	00525011 	subseq	r5, r2, r1, lsl r0
    1bf0:	f0037e03 			; <UNDEFINED> instruction: 0xf0037e03
    1bf4:	14000002 	strne	r0, [r0], #-2
    1bf8:	06440400 	strbeq	r0, [r4], -r0, lsl #8
    1bfc:	7f030000 	svcvc	0x00030000
    1c00:	00031003 	andeq	r1, r3, r3
    1c04:	031c1000 	tsteq	ip, #0
    1c08:	03d803e9 	bicseq	r0, r8, #-1543503869	; 0xa4000003
    1c0c:	43110000 	tstmi	r1, #0
    1c10:	03004c52 	movweq	r4, #3154	; 0xc52
    1c14:	02f003eb 	rscseq	r0, r0, #-1409286141	; 0xac000003
    1c18:	11000000 	mrsne	r0, (UNDEF: 0)
    1c1c:	00485243 	subeq	r5, r8, r3, asr #4
    1c20:	f003ec03 			; <UNDEFINED> instruction: 0xf003ec03
    1c24:	04000002 	streq	r0, [r0], #-2
    1c28:	52444911 	subpl	r4, r4, #278528	; 0x44000
    1c2c:	03ed0300 	mvneq	r0, #0, 6
    1c30:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c34:	444f1108 	strbmi	r1, [pc], #-264	; 1c3c <__RW_SIZE__+0x16b4>
    1c38:	ee030052 	mcr	0, 0, r0, cr3, cr2, {2}
    1c3c:	0002f003 	andeq	pc, r2, r3
    1c40:	bd120c00 	ldclt	12, cr0, [r2, #-0]
    1c44:	03000003 	movweq	r0, #3
    1c48:	02f003ef 	rscseq	r0, r0, #-1140850685	; 0xbc000003
    1c4c:	11100000 	tstne	r0, r0
    1c50:	00525242 	subseq	r5, r2, r2, asr #4
    1c54:	f003f003 			; <UNDEFINED> instruction: 0xf003f003
    1c58:	14000002 	strne	r0, [r0], #-2
    1c5c:	0007ca12 	andeq	ip, r7, r2, lsl sl
    1c60:	03f10300 	mvnseq	r0, #0, 6
    1c64:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c68:	aa040018 	bge	101cd0 <__RW_SIZE__+0x101748>
    1c6c:	03000006 	movweq	r0, #6
    1c70:	037303f2 	cmneq	r3, #-939524093	; 0xc8000003
    1c74:	20100000 	andscs	r0, r0, r0
    1c78:	2f03f803 	svccs	0x0003f803
    1c7c:	12000004 	andne	r0, r0, #4
    1c80:	000007a4 	andeq	r0, r0, r4, lsr #15
    1c84:	f003fa03 			; <UNDEFINED> instruction: 0xf003fa03
    1c88:	00000002 	andeq	r0, r0, r2
    1c8c:	00041812 	andeq	r1, r4, r2, lsl r8
    1c90:	03fb0300 	mvnseq	r0, #0, 6
    1c94:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1c98:	057a1204 	ldrbeq	r1, [sl, #-516]!	; 0xfffffdfc
    1c9c:	fc030000 	stc2	0, cr0, [r3], {-0}
    1ca0:	00042f03 	andeq	r2, r4, r3, lsl #30
    1ca4:	12120800 	andsne	r0, r2, #0, 16
    1ca8:	03000006 	movweq	r0, #6
    1cac:	019e03fd 			; <UNDEFINED> instruction: 0x019e03fd
    1cb0:	12180000 	andsne	r0, r8, #0
    1cb4:	000006db 	ldrdeq	r0, [r0], -fp
    1cb8:	f003fe03 			; <UNDEFINED> instruction: 0xf003fe03
    1cbc:	1c000002 	stcne	0, cr0, [r0], {2}
    1cc0:	03000e00 	movweq	r0, #3584	; 0xe00
    1cc4:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    1cc8:	03000005 	movweq	r0, #5
    1ccc:	03e403ff 	mvneq	r0, #-67108861	; 0xfc000003
    1cd0:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    1cd4:	cb043403 	blgt	10ece8 <__RW_SIZE__+0x10e760>
    1cd8:	11000004 	tstne	r0, r4
    1cdc:	03005243 	movweq	r5, #579	; 0x243
    1ce0:	02f00436 	rscseq	r0, r0, #905969664	; 0x36000000
    1ce4:	12000000 	andne	r0, r0, #0
    1ce8:	00000860 	andeq	r0, r0, r0, ror #16
    1cec:	f0043703 			; <UNDEFINED> instruction: 0xf0043703
    1cf0:	04000002 	streq	r0, [r0], #-2
    1cf4:	52494311 	subpl	r4, r9, #1140850688	; 0x44000000
    1cf8:	04380300 	ldrteq	r0, [r8], #-768	; 0xfffffd00
    1cfc:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d00:	008d1208 	addeq	r1, sp, r8, lsl #4
    1d04:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    1d08:	0002f004 	andeq	pc, r2, r4
    1d0c:	35120c00 	ldrcc	r0, [r2, #-3072]	; 0xfffff400
    1d10:	03000000 	movweq	r0, #0
    1d14:	02f0043a 	rscseq	r0, r0, #973078528	; 0x3a000000
    1d18:	12100000 	andsne	r0, r0, #0
    1d1c:	00000021 	andeq	r0, r0, r1, lsr #32
    1d20:	f0043b03 			; <UNDEFINED> instruction: 0xf0043b03
    1d24:	14000002 	strne	r0, [r0], #-2
    1d28:	00007d12 	andeq	r7, r0, r2, lsl sp
    1d2c:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
    1d30:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1d34:	00851218 	addeq	r1, r5, r8, lsl r2
    1d38:	3d030000 	stccc	0, cr0, [r3, #-0]
    1d3c:	0002f004 	andeq	pc, r2, r4
    1d40:	0e121c00 	cdpeq	12, 1, cr1, cr2, cr0, {0}
    1d44:	03000000 	movweq	r0, #0
    1d48:	02f0043e 	rscseq	r0, r0, #1040187392	; 0x3e000000
    1d4c:	11200000 	teqne	r0, r0
    1d50:	00525343 	subseq	r5, r2, r3, asr #6
    1d54:	f0043f03 			; <UNDEFINED> instruction: 0xf0043f03
    1d58:	24000002 	strcs	r0, [r0], #-2
    1d5c:	01ac0400 			; <UNDEFINED> instruction: 0x01ac0400
    1d60:	4a030000 	bmi	c1d68 <__RW_SIZE__+0xc17e0>
    1d64:	00044004 	andeq	r4, r4, r4
    1d68:	08010500 	stmdaeq	r1, {r8, sl}
    1d6c:	0000006f 	andeq	r0, r0, pc, rrx
    1d70:	00081613 	andeq	r1, r8, r3, lsl r6
    1d74:	be090100 	adflte	f0, f1, f0
    1d78:	01000001 	tsteq	r0, r1
    1d7c:	00054814 	andeq	r4, r5, r4, lsl r8
    1d80:	06130200 	ldreq	r0, [r3], -r0, lsl #4
    1d84:	00050403 	andeq	r0, r5, r3, lsl #8
    1d88:	04321500 	ldrteq	r1, [r2], #-1280	; 0xfffffb00
    1d8c:	13020000 	movwne	r0, #8192	; 0x2000
    1d90:	00016406 	andeq	r6, r1, r6, lsl #8
    1d94:	a9140000 	ldmdbge	r4, {}	; <UNPREDICTABLE>
    1d98:	02000004 	andeq	r0, r0, #4
    1d9c:	1e0305de 	mcrne	5, 0, r0, cr3, cr14, {6}
    1da0:	15000005 	strne	r0, [r0, #-5]
    1da4:	00000432 	andeq	r0, r0, r2, lsr r4
    1da8:	6405de02 	strvs	sp, [r5], #-3586	; 0xfffff1fe
    1dac:	00000001 	andeq	r0, r0, r1
    1db0:	00082614 	andeq	r2, r8, r4, lsl r6
    1db4:	05eb0200 	strbeq	r0, [fp, #512]!	; 0x200
    1db8:	00053803 	andeq	r3, r5, r3, lsl #16
    1dbc:	04321500 	ldrteq	r1, [r2], #-1280	; 0xfffffb00
    1dc0:	eb020000 	bl	81dc8 <__RW_SIZE__+0x81840>
    1dc4:	00016405 	andeq	r6, r1, r5, lsl #8
    1dc8:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    1dcc:	01000008 	tsteq	r0, r8
    1dd0:	003c0003 	eorseq	r0, ip, r3
    1dd4:	00002608 	andeq	r2, r0, r8, lsl #12
    1dd8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    1ddc:	000004de 	ldrdeq	r0, [r0], -lr
    1de0:	08003c28 	stmdaeq	r0, {r3, r5, sl, fp, ip, sp}
    1de4:	00000012 	andeq	r0, r0, r2, lsl r0
    1de8:	f2189c01 			; <UNDEFINED> instruction: 0xf2189c01
    1dec:	01000007 	tsteq	r0, r7
    1df0:	003c3c0e 	eorseq	r3, ip, lr, lsl #24
    1df4:	00001408 	andeq	r1, r0, r8, lsl #8
    1df8:	7d9c0100 	ldfvcs	f0, [ip]
    1dfc:	19000005 	stmdbne	r0, {r0, r2}
    1e00:	000004de 	ldrdeq	r0, [r0], -lr
    1e04:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
    1e08:	0000000c 	andeq	r0, r0, ip
    1e0c:	1a001001 	bne	5e18 <__RW_SIZE__+0x5890>
    1e10:	000007dd 	ldrdeq	r0, [r0], -sp
    1e14:	01be1301 			; <UNDEFINED> instruction: 0x01be1301
    1e18:	3c500000 	mracc	r0, r0, acc0
    1e1c:	00160800 	andseq	r0, r6, r0, lsl #16
    1e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e24:	000005af 	andeq	r0, r0, pc, lsr #11
    1e28:	01006b1b 	tsteq	r0, fp, lsl fp
    1e2c:	0001be15 	andeq	fp, r1, r5, lsl lr
    1e30:	04de1900 	ldrbeq	r1, [lr], #2304	; 0x900
    1e34:	3c500000 	mracc	r0, r0, acc0
    1e38:	00100800 	andseq	r0, r0, r0, lsl #16
    1e3c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1e40:	08361800 	ldmdaeq	r6!, {fp, ip}
    1e44:	1f010000 	svcne	0x00010000
    1e48:	08003c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, sp}
    1e4c:	0000008a 	andeq	r0, r0, sl, lsl #1
    1e50:	06209c01 	strteq	r9, [r0], -r1, lsl #24
    1e54:	651c0000 	ldrvs	r0, [ip, #-0]
    1e58:	1f01006e 	svcne	0x0001006e
    1e5c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    1e60:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    1e64:	00051e1d 	andeq	r1, r5, sp, lsl lr
    1e68:	003c6c00 	eorseq	r6, ip, r0, lsl #24
    1e6c:	00001008 	andeq	r1, r0, r8
    1e70:	ef320100 	svc	0x00320100
    1e74:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1e78:	0000052b 	andeq	r0, r0, fp, lsr #10
    1e7c:	00000edb 	ldrdeq	r0, [r0], -fp
    1e80:	04ea1f00 	strbteq	r1, [sl], #3840	; 0xf00
    1e84:	3cd40000 	ldclcc	0, cr0, [r4], {0}
    1e88:	00f80800 	rscseq	r0, r8, r0, lsl #16
    1e8c:	2c010000 	stccs	0, cr0, [r1], {-0}
    1e90:	00000609 	andeq	r0, r0, r9, lsl #12
    1e94:	0004f720 	andeq	pc, r4, r0, lsr #14
    1e98:	21001700 	tstcs	r0, r0, lsl #14
    1e9c:	00000504 	andeq	r0, r0, r4, lsl #10
    1ea0:	08003cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, ip, sp}
    1ea4:	00000002 	andeq	r0, r0, r2
    1ea8:	11202d01 	teqne	r0, r1, lsl #26
    1eac:	17000005 	strne	r0, [r0, -r5]
    1eb0:	51220000 	teqpl	r2, r0
    1eb4:	02000000 	andeq	r0, r0, #0
    1eb8:	062c06ce 	strteq	r0, [ip], -lr, asr #13
    1ebc:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    1ec0:	00000001 	andeq	r0, r0, r1
    1ec4:	00002826 	andeq	r2, r0, r6, lsr #16
    1ec8:	078d0004 	streq	r0, [sp, r4]
    1ecc:	01040000 	mrseq	r0, (UNDEF: 4)
    1ed0:	000000ad 	andeq	r0, r0, sp, lsr #1
    1ed4:	00093c01 	andeq	r3, r9, r1, lsl #24
    1ed8:	00015700 	andeq	r5, r1, r0, lsl #14
    1edc:	003cf400 	eorseq	pc, ip, r0, lsl #8
    1ee0:	0030a408 	eorseq	sl, r0, r8, lsl #8
    1ee4:	0006aa00 	andeq	sl, r6, r0, lsl #20
    1ee8:	06010200 	streq	r0, [r1], -r0, lsl #4
    1eec:	00000068 	andeq	r0, r0, r8, rrx
    1ef0:	66080102 	strvs	r0, [r8], -r2, lsl #2
    1ef4:	02000000 	andeq	r0, r0, #0
    1ef8:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
    1efc:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    1f00:	02000002 	andeq	r0, r0, #2
    1f04:	00004536 	andeq	r4, r0, r6, lsr r5
    1f08:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1f0c:	0000003e 	andeq	r0, r0, lr, lsr r0
    1f10:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
    1f14:	03000000 	movweq	r0, #0
    1f18:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    1f1c:	005e5002 	subseq	r5, lr, r2
    1f20:	04020000 	streq	r0, [r2], #-0
    1f24:	00009b07 	andeq	r9, r0, r7, lsl #22
    1f28:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	96070802 	strls	r0, [r7], -r2, lsl #16
    1f34:	04000000 	streq	r0, [r0], #-0
    1f38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1f3c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1f40:	0000a007 	andeq	sl, r0, r7
    1f44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1f48:	00000143 	andeq	r0, r0, r3, asr #2
    1f4c:	00005305 	andeq	r5, r0, r5, lsl #6
    1f50:	003a0500 	eorseq	r0, sl, r0, lsl #10
    1f54:	1c060000 	stcne	0, cr0, [r6], {-0}
    1f58:	f703e903 			; <UNDEFINED> instruction: 0xf703e903
    1f5c:	07000000 	streq	r0, [r0, -r0]
    1f60:	004c5243 	subeq	r5, ip, r3, asr #4
    1f64:	8803eb03 	stmdahi	r3, {r0, r1, r8, r9, fp, sp, lr, pc}
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	48524307 	ldmdami	r2, {r0, r1, r2, r8, r9, lr}^
    1f70:	03ec0300 	mvneq	r0, #0, 6
    1f74:	00000088 	andeq	r0, r0, r8, lsl #1
    1f78:	44490704 	strbmi	r0, [r9], #-1796	; 0xfffff8fc
    1f7c:	ed030052 	stc	0, cr0, [r3, #-328]	; 0xfffffeb8
    1f80:	00008803 	andeq	r8, r0, r3, lsl #16
    1f84:	4f070800 	svcmi	0x00070800
    1f88:	03005244 	movweq	r5, #580	; 0x244
    1f8c:	008803ee 	addeq	r0, r8, lr, ror #7
    1f90:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    1f94:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    1f98:	8803ef03 	stmdahi	r3, {r0, r1, r8, r9, sl, fp, sp, lr, pc}
    1f9c:	10000000 	andne	r0, r0, r0
    1fa0:	52524207 	subspl	r4, r2, #1879048192	; 0x70000000
    1fa4:	03f00300 	mvnseq	r0, #0, 6
    1fa8:	00000088 	andeq	r0, r0, r8, lsl #1
    1fac:	07ca0814 	bfieq	r0, r4, (invalid: 16:10)
    1fb0:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1fb4:	00008803 	andeq	r8, r0, r3, lsl #16
    1fb8:	09001800 	stmdbeq	r0, {fp, ip}
    1fbc:	000006aa 	andeq	r0, r0, sl, lsr #13
    1fc0:	9203f203 	andls	pc, r3, #805306368	; 0x30000000
    1fc4:	06000000 	streq	r0, [r0], -r0
    1fc8:	04340328 	ldrteq	r0, [r4], #-808	; 0xfffffcd8
    1fcc:	0000018e 	andeq	r0, r0, lr, lsl #3
    1fd0:	00524307 	subseq	r4, r2, r7, lsl #6
    1fd4:	88043603 	stmdahi	r4, {r0, r1, r9, sl, ip, sp}
    1fd8:	00000000 	andeq	r0, r0, r0
    1fdc:	00086008 	andeq	r6, r8, r8
    1fe0:	04370300 	ldrteq	r0, [r7], #-768	; 0xfffffd00
    1fe4:	00000088 	andeq	r0, r0, r8, lsl #1
    1fe8:	49430704 	stmdbmi	r3, {r2, r8, r9, sl}^
    1fec:	38030052 	stmdacc	r3, {r1, r4, r6}
    1ff0:	00008804 	andeq	r8, r0, r4, lsl #16
    1ff4:	8d080800 	stchi	8, cr0, [r8, #-0]
    1ff8:	03000000 	movweq	r0, #0
    1ffc:	00880439 	addeq	r0, r8, r9, lsr r4
    2000:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    2004:	00000035 	andeq	r0, r0, r5, lsr r0
    2008:	88043a03 	stmdahi	r4, {r0, r1, r9, fp, ip, sp}
    200c:	10000000 	andne	r0, r0, r0
    2010:	00002108 	andeq	r2, r0, r8, lsl #2
    2014:	043b0300 	ldrteq	r0, [fp], #-768	; 0xfffffd00
    2018:	00000088 	andeq	r0, r0, r8, lsl #1
    201c:	007d0814 	rsbseq	r0, sp, r4, lsl r8
    2020:	3c030000 	stccc	0, cr0, [r3], {-0}
    2024:	00008804 	andeq	r8, r0, r4, lsl #16
    2028:	85081800 	strhi	r1, [r8, #-2048]	; 0xfffff800
    202c:	03000000 	movweq	r0, #0
    2030:	0088043d 	addeq	r0, r8, sp, lsr r4
    2034:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    2038:	0000000e 	andeq	r0, r0, lr
    203c:	88043e03 	stmdahi	r4, {r0, r1, r9, sl, fp, ip, sp}
    2040:	20000000 	andcs	r0, r0, r0
    2044:	52534307 	subspl	r4, r3, #469762048	; 0x1c000000
    2048:	043f0300 	ldrteq	r0, [pc], #-768	; 2050 <__RW_SIZE__+0x1ac8>
    204c:	00000088 	andeq	r0, r0, r8, lsl #1
    2050:	ac090024 	stcge	0, cr0, [r9], {36}	; 0x24
    2054:	03000001 	movweq	r0, #1
    2058:	0103044a 	tsteq	r3, sl, asr #8
    205c:	24060000 	strcs	r0, [r6], #-0
    2060:	8c048803 	stchi	8, cr8, [r4], {3}
    2064:	07000002 	streq	r0, [r0, -r2]
    2068:	00315243 	eorseq	r5, r1, r3, asr #4
    206c:	8d048a03 	vstrhi	s16, [r4, #-12]
    2070:	00000000 	andeq	r0, r0, r0
    2074:	00061208 	andeq	r1, r6, r8, lsl #4
    2078:	048b0300 	streq	r0, [fp], #768	; 0x300
    207c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2080:	52430702 	subpl	r0, r3, #524288	; 0x80000
    2084:	8c030032 	stchi	0, cr0, [r3], {50}	; 0x32
    2088:	00008d04 	andeq	r8, r0, r4, lsl #26
    208c:	6e080400 	cfcpysvs	mvf0, mvf8
    2090:	03000009 	movweq	r0, #9
    2094:	003a048d 	eorseq	r0, sl, sp, lsl #9
    2098:	07060000 	streq	r0, [r6, -r0]
    209c:	03005253 	movweq	r5, #595	; 0x253
    20a0:	008d048e 	addeq	r0, sp, lr, lsl #9
    20a4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    20a8:	0000061c 	andeq	r0, r0, ip, lsl r6
    20ac:	3a048f03 	bcc	125cc0 <__RW_SIZE__+0x125738>
    20b0:	0a000000 	beq	20b8 <__RW_SIZE__+0x1b30>
    20b4:	00524407 	subseq	r4, r2, r7, lsl #8
    20b8:	8d049003 	stchi	0, cr9, [r4, #-12]
    20bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    20c0:	00062608 	andeq	r2, r6, r8, lsl #12
    20c4:	04910300 	ldreq	r0, [r1], #768	; 0x300
    20c8:	0000003a 	andeq	r0, r0, sl, lsr r0
    20cc:	095d080e 	ldmdbeq	sp, {r1, r2, r3, fp}^
    20d0:	92030000 	andls	r0, r3, #0
    20d4:	00008d04 	andeq	r8, r0, r4, lsl #26
    20d8:	30081000 	andcc	r1, r8, r0
    20dc:	03000006 	movweq	r0, #6
    20e0:	003a0493 	mlaseq	sl, r3, r4, r0
    20e4:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    20e8:	0000087a 	andeq	r0, r0, sl, ror r8
    20ec:	8d049403 	cfstrshi	mvf9, [r4, #-12]
    20f0:	14000000 	strne	r0, [r0], #-0
    20f4:	00063a08 	andeq	r3, r6, r8, lsl #20
    20f8:	04950300 	ldreq	r0, [r5], #768	; 0x300
    20fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2100:	08730816 	ldmdaeq	r3!, {r1, r2, r4, fp}^
    2104:	96030000 	strls	r0, [r3], -r0
    2108:	00008d04 	andeq	r8, r0, r4, lsl #26
    210c:	78081800 	stmdavc	r8, {fp, ip}
    2110:	03000009 	movweq	r0, #9
    2114:	003a0497 	mlaseq	sl, r7, r4, r0
    2118:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
    211c:	0000085d 	andeq	r0, r0, sp, asr r8
    2120:	8d049803 	stchi	8, cr9, [r4, #-12]
    2124:	1c000000 	stcne	0, cr0, [r0], {-0}
    2128:	00098208 	andeq	r8, r9, r8, lsl #4
    212c:	04990300 	ldreq	r0, [r9], #768	; 0x300
    2130:	0000003a 	andeq	r0, r0, sl, lsr r0
    2134:	0942081e 	stmdbeq	r2, {r1, r2, r3, r4, fp}^
    2138:	9a030000 	bls	c2140 <__RW_SIZE__+0xc1bb8>
    213c:	00008d04 	andeq	r8, r0, r4, lsl #26
    2140:	8c082000 	stchi	0, cr2, [r8], {-0}
    2144:	03000009 	movweq	r0, #9
    2148:	003a049b 	mlaseq	sl, fp, r4, r0
    214c:	00220000 	eoreq	r0, r2, r0
    2150:	00093009 	andeq	r3, r9, r9
    2154:	049c0300 	ldreq	r0, [ip], #768	; 0x300
    2158:	0000019a 	muleq	r0, sl, r1
    215c:	6f080102 	svcvs	0x00080102
    2160:	0a000000 	beq	2168 <__RW_SIZE__+0x1be0>
    2164:	f023010c 			; <UNDEFINED> instruction: 0xf023010c
    2168:	0b000002 	bleq	2178 <__RW_SIZE__+0x1bf0>
    216c:	00000896 	muleq	r0, r6, r8
    2170:	00452501 	subeq	r2, r5, r1, lsl #10
    2174:	0b000000 	bleq	217c <__RW_SIZE__+0x1bf4>
    2178:	000008e5 	andeq	r0, r0, r5, ror #17
    217c:	00452601 	subeq	r2, r5, r1, lsl #12
    2180:	0c020000 	stceq	0, cr0, [r2], {-0}
    2184:	00726964 	rsbseq	r6, r2, r4, ror #18
    2188:	002c2701 	eoreq	r2, ip, r1, lsl #14
    218c:	0b040000 	bleq	102194 <__RW_SIZE__+0x101c0c>
    2190:	000008ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2194:	00452801 	subeq	r2, r5, r1, lsl #16
    2198:	0b060000 	bleq	1821a0 <__RW_SIZE__+0x181c18>
    219c:	000008dd 	ldrdeq	r0, [r0], -sp
    21a0:	00452901 	subeq	r2, r5, r1, lsl #18
    21a4:	0b080000 	bleq	2021ac <__RW_SIZE__+0x201c24>
    21a8:	0000089c 	muleq	r0, ip, r8
    21ac:	00452a01 	subeq	r2, r5, r1, lsl #20
    21b0:	000a0000 	andeq	r0, sl, r0
    21b4:	00091a03 	andeq	r1, r9, r3, lsl #20
    21b8:	9f2b0100 	svcls	0x002b0100
    21bc:	0d000002 	stceq	0, cr0, [r0, #-8]
    21c0:	000008a4 	andeq	r0, r0, r4, lsr #17
    21c4:	13013d01 	movwne	r3, #7425	; 0x1d01
    21c8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    21cc:	00000bcd 	andeq	r0, r0, sp, asr #23
    21d0:	002c3d01 	eoreq	r3, ip, r1, lsl #26
    21d4:	0d000000 	stceq	0, cr0, [r0, #-0]
    21d8:	00001151 	andeq	r1, r0, r1, asr r1
    21dc:	33015d01 	movwcc	r5, #7425	; 0x1d01
    21e0:	0f000003 	svceq	0x00000003
    21e4:	0100736d 	tsteq	r0, sp, ror #6
    21e8:	0000735d 	andeq	r7, r0, sp, asr r3
    21ec:	00691000 	rsbeq	r1, r9, r0
    21f0:	03335f01 	teqeq	r3, #1, 30
    21f4:	05000000 	streq	r0, [r0, #-0]
    21f8:	00000073 	andeq	r0, r0, r3, ror r0
    21fc:	0009a311 	andeq	sl, r9, r1, lsl r3
    2200:	01760100 	cmneq	r6, r0, lsl #2
    2204:	0000035b 	andeq	r0, r0, fp, asr r3
    2208:	0009120e 	andeq	r1, r9, lr, lsl #4
    220c:	2c760100 	ldfcse	f0, [r6], #-0
    2210:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2214:	00000996 	muleq	r0, r6, r9
    2218:	00457601 	subeq	r7, r5, r1, lsl #12
    221c:	12000000 	andne	r0, r0, #0
    2220:	000008c7 	andeq	r0, r0, r7, asr #17
    2224:	1301d701 	movwne	sp, #5889	; 0x1701
    2228:	0000084e 	andeq	r0, r0, lr, asr #16
    222c:	01010601 	tsteq	r1, r1, lsl #12
    2230:	0009e511 	andeq	lr, r9, r1, lsl r5
    2234:	01ed0100 	mvneq	r0, r0, lsl #2
    2238:	0000038b 	andeq	r0, r0, fp, lsl #7
    223c:	0100780f 	tsteq	r0, pc, lsl #16
    2240:	000045ed 	andeq	r4, r0, sp, ror #11
    2244:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    2248:	0045ed01 	subeq	lr, r5, r1, lsl #26
    224c:	12000000 	andne	r0, r0, #0
    2250:	000009cb 	andeq	r0, r0, fp, asr #19
    2254:	14016d01 	strne	r6, [r1], #-3329	; 0xfffff2ff
    2258:	0000038b 	andeq	r0, r0, fp, lsl #7
    225c:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
    2260:	00000042 	andeq	r0, r0, r2, asr #32
    2264:	63119c01 	tstvs	r1, #256	; 0x100
    2268:	01000009 	tsteq	r0, r9
    226c:	03ba01a0 			; <UNDEFINED> instruction: 0x03ba01a0
    2270:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    2274:	0100000b 	tsteq	r0, fp
    2278:	00002ca0 	andeq	r2, r0, r0, lsr #25
    227c:	d9110000 	ldmdble	r1, {}	; <UNPREDICTABLE>
    2280:	01000009 	tsteq	r0, r9
    2284:	03d201a8 	bicseq	r0, r2, #168, 2	; 0x2a
    2288:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    228c:	0100000b 	tsteq	r0, fp
    2290:	00002ca8 	andeq	r2, r0, r8, lsr #25
    2294:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    2298:	38000003 	stmdacc	r0, {r0, r1}
    229c:	a208003d 	andge	r0, r8, #61	; 0x3d
    22a0:	01000000 	mrseq	r0, (UNDEF: 0)
    22a4:	00045c9c 	muleq	r4, ip, ip
    22a8:	03441600 	movteq	r1, #17920	; 0x4600
    22ac:	0eef0000 	cdpeq	0, 14, cr0, cr15, cr0, {0}
    22b0:	4f160000 	svcmi	0x00160000
    22b4:	10000003 	andne	r0, r0, r3
    22b8:	1700000f 	strne	r0, [r0, -pc]
    22bc:	000003a2 	andeq	r0, r0, r2, lsr #7
    22c0:	08003d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip, sp}
    22c4:	00000118 	andeq	r0, r0, r8, lsl r1
    22c8:	042d7801 	strteq	r7, [sp], #-2049	; 0xfffff7ff
    22cc:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    22d0:	31000003 	tstcc	r0, r3
    22d4:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    22d8:	000002fb 	strdeq	r0, [r0], -fp
    22dc:	08003d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip, sp}
    22e0:	00000130 	andeq	r0, r0, r0, lsr r1
    22e4:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    22e8:	44000003 	strmi	r0, [r0], #-3
    22ec:	0000000f 	andeq	r0, r0, pc
    22f0:	03ba1800 			; <UNDEFINED> instruction: 0x03ba1800
    22f4:	3d8c0000 	stccc	0, cr0, [ip]
    22f8:	01480800 	cmpeq	r8, r0, lsl #16
    22fc:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2300:	0003c616 	andeq	ip, r3, r6, lsl r6
    2304:	000f5700 	andeq	r5, pc, r0, lsl #14
    2308:	02fb1800 	rscseq	r1, fp, #0, 16
    230c:	3da40000 	stccc	0, cr0, [r4]
    2310:	01600800 	cmneq	r0, r0, lsl #16
    2314:	ac010000 	stcge	0, cr0, [r1], {-0}
    2318:	00030719 	andeq	r0, r3, r9, lsl r7
    231c:	00000000 	andeq	r0, r0, r0
    2320:	00094811 	andeq	r4, r9, r1, lsl r8
    2324:	017c0100 	cmneq	ip, r0, lsl #2
    2328:	00000474 	andeq	r0, r0, r4, ror r4
    232c:	0008c20e 	andeq	ip, r8, lr, lsl #4
    2330:	457c0100 	ldrbmi	r0, [ip, #-256]!	; 0xffffff00
    2334:	00000000 	andeq	r0, r0, r0
    2338:	00045c15 	andeq	r5, r4, r5, lsl ip
    233c:	003ddc00 	eorseq	sp, sp, r0, lsl #24
    2340:	00007a08 	andeq	r7, r0, r8, lsl #20
    2344:	c79c0100 	ldrgt	r0, [ip, r0, lsl #2]
    2348:	16000004 	strne	r0, [r0], -r4
    234c:	00000468 	andeq	r0, r0, r8, ror #8
    2350:	00000f6a 	andeq	r0, r0, sl, ror #30
    2354:	0002fb17 	andeq	pc, r2, r7, lsl fp	; <UNPREDICTABLE>
    2358:	003df800 	eorseq	pc, sp, r0, lsl #16
    235c:	00017808 	andeq	r7, r1, r8, lsl #16
    2360:	ad800100 	stfges	f0, [r0]
    2364:	16000004 	strne	r0, [r0], -r4
    2368:	00000307 	andeq	r0, r0, r7, lsl #6
    236c:	00000f8b 	andeq	r0, r0, fp, lsl #31
    2370:	02fb1a00 	rscseq	r1, fp, #0, 20
    2374:	3e280000 	cdpcc	0, 2, cr0, cr8, cr0, {0}
    2378:	00180800 	andseq	r0, r8, r0, lsl #16
    237c:	81010000 	mrshi	r0, (UNDEF: 1)
    2380:	00030716 	andeq	r0, r3, r6, lsl r7
    2384:	000fad00 	andeq	sl, pc, r0, lsl #26
    2388:	12000000 	andne	r0, r0, #0
    238c:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    2390:	15019801 	strne	r9, [r1, #-2049]	; 0xfffff7ff
    2394:	000004c7 	andeq	r0, r0, r7, asr #9
    2398:	08003e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp}
    239c:	00000062 	andeq	r0, r0, r2, rrx
    23a0:	052f9c01 	streq	r9, [pc, #-3073]!	; 17a7 <__RW_SIZE__+0x121f>
    23a4:	13170000 	tstne	r7, #0
    23a8:	64000003 	strvs	r0, [r0], #-3
    23ac:	9808003e 	stmdals	r8, {r1, r2, r3, r4, r5}
    23b0:	01000001 	tsteq	r0, r1
    23b4:	00050a9b 	muleq	r5, fp, sl
    23b8:	031f1b00 	tsteq	pc, #0, 22
    23bc:	1c640000 	stclne	0, cr0, [r4], #-0
    23c0:	00000198 	muleq	r0, r8, r1
    23c4:	0003291d 	andeq	r2, r3, sp, lsl r9
    23c8:	78910200 	ldmvc	r1, {r9}
    23cc:	13180000 	tstne	r8, #0
    23d0:	92000003 	andls	r0, r0, #3
    23d4:	b008003e 	andlt	r0, r8, lr, lsr r0
    23d8:	01000001 	tsteq	r0, r1
    23dc:	031f1b9d 	tsteq	pc, #160768	; 0x27400
    23e0:	1c320000 	ldcne	0, cr0, [r2], #-0
    23e4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    23e8:	0003291d 	andeq	r2, r3, sp, lsl r9
    23ec:	7c910200 	lfmvc	f0, 4, [r1], {0}
    23f0:	15000000 	strne	r0, [r0, #-0]
    23f4:	000003a2 	andeq	r0, r0, r2, lsr #7
    23f8:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
    23fc:	00000052 	andeq	r0, r0, r2, asr r0
    2400:	05659c01 	strbeq	r9, [r5, #-3073]!	; 0xfffff3ff
    2404:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    2408:	c0000003 	andgt	r0, r0, r3
    240c:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    2410:	000002fb 	strdeq	r0, [r0], -fp
    2414:	08003ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp}
    2418:	000001c8 	andeq	r0, r0, r8, asr #3
    241c:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    2420:	e1000003 	tst	r0, r3
    2424:	0000000f 	andeq	r0, r0, pc
    2428:	03ba1500 			; <UNDEFINED> instruction: 0x03ba1500
    242c:	3f100000 	svccc	0x00100000
    2430:	00520800 	subseq	r0, r2, r0, lsl #16
    2434:	9c010000 	stcls	0, cr0, [r1], {-0}
    2438:	00000597 	muleq	r0, r7, r5
    243c:	0003c61e 	andeq	ip, r3, lr, lsl r6
    2440:	18500100 	ldmdane	r0, {r8}^
    2444:	000002fb 	strdeq	r0, [r0], -fp
    2448:	08003f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, ip, sp}
    244c:	000001e0 	andeq	r0, r0, r0, ror #3
    2450:	071eac01 	ldreq	sl, [lr, -r1, lsl #24]
    2454:	01000003 	tsteq	r0, r3
    2458:	1f000050 	svcne	0x00000050
    245c:	00000881 	andeq	r0, r0, r1, lsl #17
    2460:	3f64b001 	svccc	0x0064b001
    2464:	03360800 	teqeq	r6, #0, 16
    2468:	9c010000 	stcls	0, cr0, [r1], {-0}
    246c:	0000086e 	andeq	r0, r0, lr, ror #16
    2470:	00086520 	andeq	r6, r8, r0, lsr #10
    2474:	73b00100 	movsvc	r0, #0, 2
    2478:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    247c:	1700000f 	strne	r0, [r0, -pc]
    2480:	00000338 	andeq	r0, r0, r8, lsr r3
    2484:	08003f94 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, fp, ip, sp}
    2488:	000001f8 	strdeq	r0, [r0], -r8
    248c:	0649d001 	strbeq	sp, [r9], -r1
    2490:	4f160000 	svcmi	0x00160000
    2494:	79000003 	stmdbvc	r0, {r0, r1}
    2498:	16000010 			; <UNDEFINED> instruction: 0x16000010
    249c:	00000344 	andeq	r0, r0, r4, asr #6
    24a0:	0000108e 	andeq	r1, r0, lr, lsl #1
    24a4:	0003a217 	andeq	sl, r3, r7, lsl r2
    24a8:	003f9400 	eorseq	r9, pc, r0, lsl #8
    24ac:	00021008 	andeq	r1, r2, r8
    24b0:	16780100 	ldrbtne	r0, [r8], -r0, lsl #2
    24b4:	16000006 	strne	r0, [r0], -r6
    24b8:	000003ae 	andeq	r0, r0, lr, lsr #7
    24bc:	0000108e 	andeq	r1, r0, lr, lsl #1
    24c0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    24c4:	003fb200 	eorseq	fp, pc, r0, lsl #4
    24c8:	00023008 	andeq	r3, r2, r8
    24cc:	16a40100 	strtne	r0, [r4], r0, lsl #2
    24d0:	00000307 	andeq	r0, r0, r7, lsl #6
    24d4:	000010a3 	andeq	r1, r0, r3, lsr #1
    24d8:	ba180000 	blt	6024e0 <__RW_SIZE__+0x601f58>
    24dc:	ec000003 	stc	0, cr0, [r0], {3}
    24e0:	5008003f 	andpl	r0, r8, pc, lsr r0
    24e4:	01000002 	tsteq	r0, r2
    24e8:	03c61679 	biceq	r1, r6, #126877696	; 0x7900000
    24ec:	10b80000 	adcsne	r0, r8, r0
    24f0:	fb180000 	blx	6024fa <__RW_SIZE__+0x601f72>
    24f4:	04000002 	streq	r0, [r0], #-2
    24f8:	68080040 	stmdavs	r8, {r6}
    24fc:	01000002 	tsteq	r0, r2
    2500:	030716ac 	movweq	r1, #30380	; 0x76ac
    2504:	10cd0000 	sbcne	r0, sp, r0
    2508:	00000000 	andeq	r0, r0, r0
    250c:	03381700 	teqeq	r8, #0, 14
    2510:	40400000 	submi	r0, r0, r0
    2514:	02800800 	addeq	r0, r0, #0, 16
    2518:	bc010000 	stclt	0, cr0, [r1], {-0}
    251c:	000006d7 	ldrdeq	r0, [r0], -r7
    2520:	00034f16 	andeq	r4, r3, r6, lsl pc
    2524:	0010e200 	andseq	lr, r0, r0, lsl #4
    2528:	03441600 	movteq	r1, #17920	; 0x4600
    252c:	10f60000 	rscsne	r0, r6, r0
    2530:	a2170000 	andsge	r0, r7, #0
    2534:	40000003 	andmi	r0, r0, r3
    2538:	98080040 	stmdals	r8, {r6}
    253c:	01000002 	tsteq	r0, r2
    2540:	0006a478 	andeq	sl, r6, r8, ror r4
    2544:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2548:	10f60000 	rscsne	r0, r6, r0
    254c:	fb180000 	blx	602556 <__RW_SIZE__+0x601fce>
    2550:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    2554:	b8080040 	stmdalt	r8, {r6}
    2558:	01000002 	tsteq	r0, r2
    255c:	030716a4 	movweq	r1, #30372	; 0x76a4
    2560:	110b0000 	mrsne	r0, (UNDEF: 11)
    2564:	00000000 	andeq	r0, r0, r0
    2568:	0003ba18 	andeq	fp, r3, r8, lsl sl
    256c:	00409800 	subeq	r9, r0, r0, lsl #16
    2570:	0002d808 	andeq	sp, r2, r8, lsl #16
    2574:	16790100 	ldrbtne	r0, [r9], -r0, lsl #2
    2578:	000003c6 	andeq	r0, r0, r6, asr #7
    257c:	00001120 	andeq	r1, r0, r0, lsr #2
    2580:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2584:	0040b000 	subeq	fp, r0, r0
    2588:	0002f008 	andeq	pc, r2, r8
    258c:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2590:	00000307 	andeq	r0, r0, r7, lsl #6
    2594:	00001134 	andeq	r1, r0, r4, lsr r1
    2598:	17000000 	strne	r0, [r0, -r0]
    259c:	00000338 	andeq	r0, r0, r8, lsr r3
    25a0:	080040d8 	stmdaeq	r0, {r3, r4, r6, r7, lr}
    25a4:	00000308 	andeq	r0, r0, r8, lsl #6
    25a8:	0765c601 	strbeq	ip, [r5, -r1, lsl #12]!
    25ac:	4f160000 	svcmi	0x00160000
    25b0:	48000003 	stmdami	r0, {r0, r1}
    25b4:	16000011 			; <UNDEFINED> instruction: 0x16000011
    25b8:	00000344 	andeq	r0, r0, r4, asr #6
    25bc:	0000115d 	andeq	r1, r0, sp, asr r1
    25c0:	0003a217 	andeq	sl, r3, r7, lsl r2
    25c4:	0040d800 	subeq	sp, r0, r0, lsl #16
    25c8:	00032008 	andeq	r2, r3, r8
    25cc:	32780100 	rsbscc	r0, r8, #0, 2
    25d0:	16000007 	strne	r0, [r0], -r7
    25d4:	000003ae 	andeq	r0, r0, lr, lsr #7
    25d8:	0000115d 	andeq	r1, r0, sp, asr r1
    25dc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    25e0:	0040f600 	subeq	pc, r0, r0, lsl #12
    25e4:	00034008 	andeq	r4, r3, r8
    25e8:	16a40100 	strtne	r0, [r4], r0, lsl #2
    25ec:	00000307 	andeq	r0, r0, r7, lsl #6
    25f0:	00001172 	andeq	r1, r0, r2, ror r1
    25f4:	ba180000 	blt	6025fc <__RW_SIZE__+0x602074>
    25f8:	30000003 	andcc	r0, r0, r3
    25fc:	60080041 	andvs	r0, r8, r1, asr #32
    2600:	01000003 	tsteq	r0, r3
    2604:	03c61679 	biceq	r1, r6, #126877696	; 0x7900000
    2608:	11870000 	orrne	r0, r7, r0
    260c:	fb180000 	blx	602616 <__RW_SIZE__+0x60208e>
    2610:	48000002 	stmdami	r0, {r1}
    2614:	78080041 	stmdavc	r8, {r0, r6}
    2618:	01000003 	tsteq	r0, r3
    261c:	030716ac 	movweq	r1, #30380	; 0x76ac
    2620:	119c0000 	orrsne	r0, ip, r0
    2624:	00000000 	andeq	r0, r0, r0
    2628:	03381700 	teqeq	r8, #0, 14
    262c:	41700000 	cmnmi	r0, r0
    2630:	03900800 	orrseq	r0, r0, #0, 16
    2634:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2638:	000007f3 	strdeq	r0, [r0], -r3
    263c:	00034f16 	andeq	r4, r3, r6, lsl pc
    2640:	0011b100 	andseq	fp, r1, r0, lsl #2
    2644:	03441600 	movteq	r1, #17920	; 0x4600
    2648:	11c60000 	bicne	r0, r6, r0
    264c:	a2170000 	andsge	r0, r7, #0
    2650:	70000003 	andvc	r0, r0, r3
    2654:	a8080041 	stmdage	r8, {r0, r6}
    2658:	01000003 	tsteq	r0, r3
    265c:	0007c078 	andeq	ip, r7, r8, ror r0
    2660:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2664:	11c60000 	bicne	r0, r6, r0
    2668:	fb180000 	blx	602672 <__RW_SIZE__+0x6020ea>
    266c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    2670:	c8080041 	stmdagt	r8, {r0, r6}
    2674:	01000003 	tsteq	r0, r3
    2678:	030716a4 	movweq	r1, #30372	; 0x76a4
    267c:	11db0000 	bicsne	r0, fp, r0
    2680:	00000000 	andeq	r0, r0, r0
    2684:	0003ba18 	andeq	fp, r3, r8, lsl sl
    2688:	0041c800 	subeq	ip, r1, r0, lsl #16
    268c:	0003e808 	andeq	lr, r3, r8, lsl #16
    2690:	16790100 	ldrbtne	r0, [r9], -r0, lsl #2
    2694:	000003c6 	andeq	r0, r0, r6, asr #7
    2698:	000011f0 	strdeq	r1, [r0], -r0
    269c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    26a0:	0041e000 	subeq	lr, r1, r0
    26a4:	00040008 	andeq	r0, r4, r8
    26a8:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    26ac:	00000307 	andeq	r0, r0, r7, lsl #6
    26b0:	00001205 	andeq	r1, r0, r5, lsl #4
    26b4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    26b8:	00000338 	andeq	r0, r0, r8, lsr r3
    26bc:	08004208 	stmdaeq	r0, {r3, r9, lr}
    26c0:	00000418 	andeq	r0, r0, r8, lsl r4
    26c4:	4f1bcb01 	svcmi	0x001bcb01
    26c8:	a8000003 	stmdage	r0, {r0, r1}
    26cc:	0003441b 	andeq	r4, r3, fp, lsl r4
    26d0:	a2173600 	andsge	r3, r7, #0, 12
    26d4:	08000003 	stmdaeq	r0, {r0, r1}
    26d8:	30080042 	andcc	r0, r8, r2, asr #32
    26dc:	01000004 	tsteq	r0, r4
    26e0:	00083e78 	andeq	r3, r8, r8, ror lr
    26e4:	03ae1b00 			; <UNDEFINED> instruction: 0x03ae1b00
    26e8:	18360000 	ldmdane	r6!, {}	; <UNPREDICTABLE>
    26ec:	000002fb 	strdeq	r0, [r0], -fp
    26f0:	08004226 	stmdaeq	r0, {r1, r2, r5, r9, lr}
    26f4:	00000450 	andeq	r0, r0, r0, asr r4
    26f8:	071ba401 	ldreq	sl, [fp, -r1, lsl #8]
    26fc:	36000003 	strcc	r0, [r0], -r3
    2700:	ba180000 	blt	602708 <__RW_SIZE__+0x602180>
    2704:	60000003 	andvs	r0, r0, r3
    2708:	70080042 	andvc	r0, r8, r2, asr #32
    270c:	01000004 	tsteq	r0, r4
    2710:	03c62179 	biceq	r2, r6, #1073741854	; 0x4000001e
    2714:	7fa80000 	svcvc	0x00a80000
    2718:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    271c:	00427800 	subeq	r7, r2, r0, lsl #16
    2720:	00048808 	andeq	r8, r4, r8, lsl #16
    2724:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    2728:	00000307 	andeq	r0, r0, r7, lsl #6
    272c:	00007fa8 	andeq	r7, r0, r8, lsr #31
    2730:	5b150000 	blpl	542738 <__RW_SIZE__+0x5421b0>
    2734:	9c000003 	stcls	0, cr0, [r0], {3}
    2738:	5e080042 	cdppl	0, 0, cr0, cr8, cr2, {2}
    273c:	01000000 	mrseq	r0, (UNDEF: 0)
    2740:	0008b09c 	muleq	r8, ip, r0
    2744:	03a21800 			; <UNDEFINED> instruction: 0x03a21800
    2748:	429c0000 	addsmi	r0, ip, #0
    274c:	04a00800 	strteq	r0, [r0], #2048	; 0x800
    2750:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2754:	0003ae16 	andeq	sl, r3, r6, lsl lr
    2758:	00121a00 	andseq	r1, r2, r0, lsl #20
    275c:	02fb1800 	rscseq	r1, fp, #0, 16
    2760:	42c00000 	sbcmi	r0, r0, #0
    2764:	04c80800 	strbeq	r0, [r8], #2048	; 0x800
    2768:	a4010000 	strge	r0, [r1], #-0
    276c:	00030719 	andeq	r0, r3, r9, lsl r7
    2770:	00000000 	andeq	r0, r0, r0
    2774:	0009bb11 	andeq	fp, r9, r1, lsl fp
    2778:	01dc0100 	bicseq	r0, ip, r0, lsl #2
    277c:	000008e5 	andeq	r0, r0, r5, ror #17
    2780:	0031780f 	eorseq	r7, r1, pc, lsl #16
    2784:	0045dc01 	subeq	sp, r5, r1, lsl #24
    2788:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    278c:	dc010031 	stcle	0, cr0, [r1], {49}	; 0x31
    2790:	00000045 	andeq	r0, r0, r5, asr #32
    2794:	0032780f 	eorseq	r7, r2, pc, lsl #16
    2798:	0045dc01 	subeq	sp, r5, r1, lsl #24
    279c:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    27a0:	dc010032 	stcle	0, cr0, [r1], {50}	; 0x32
    27a4:	00000045 	andeq	r0, r0, r5, asr #32
    27a8:	08b01500 	ldmeq	r0!, {r8, sl, ip}
    27ac:	42fc0000 	rscsmi	r0, ip, #0
    27b0:	03640800 	cmneq	r4, #0, 16
    27b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b8:	00000b3f 	andeq	r0, r0, pc, lsr fp
    27bc:	0008bc16 	andeq	fp, r8, r6, lsl ip
    27c0:	00122d00 	andseq	r2, r2, r0, lsl #26
    27c4:	08c61600 	stmiaeq	r6, {r9, sl, ip}^
    27c8:	124e0000 	subne	r0, lr, #0
    27cc:	d0160000 	andsle	r0, r6, r0
    27d0:	6f000008 	svcvs	0x00000008
    27d4:	16000012 			; <UNDEFINED> instruction: 0x16000012
    27d8:	000008da 	ldrdeq	r0, [r0], -sl
    27dc:	00001290 	muleq	r0, r0, r2
    27e0:	0003a217 	andeq	sl, r3, r7, lsl r2
    27e4:	0042fe00 	subeq	pc, r2, r0, lsl #28
    27e8:	0004e008 	andeq	lr, r4, r8
    27ec:	4ede0100 	cdpmi	1, 13, cr0, cr14, cr0, {0}
    27f0:	16000009 	strne	r0, [r0], -r9
    27f4:	000003ae 	andeq	r0, r0, lr, lsr #7
    27f8:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    27fc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2800:	00432600 	subeq	r2, r3, r0, lsl #12
    2804:	00051008 	andeq	r1, r5, r8
    2808:	19a40100 	stmibne	r4!, {r8}
    280c:	00000307 	andeq	r0, r0, r7, lsl #6
    2810:	ba170000 	blt	5c2818 <__RW_SIZE__+0x5c2290>
    2814:	64000003 	strvs	r0, [r0], #-3
    2818:	28080043 	stmdacs	r8, {r0, r1, r6}
    281c:	01000005 	tsteq	r0, r5
    2820:	00097cdf 	ldrdeq	r7, [r9], -pc	; <UNPREDICTABLE>
    2824:	03c61900 	biceq	r1, r6, #0, 18
    2828:	fb1a0000 	blx	682832 <__RW_SIZE__+0x6822aa>
    282c:	8c000002 	stchi	0, cr0, [r0], {2}
    2830:	22080043 	andcs	r0, r8, #67	; 0x43
    2834:	01000000 	mrseq	r0, (UNDEF: 0)
    2838:	030719ac 	movweq	r1, #31148	; 0x79ac
    283c:	00000000 	andeq	r0, r0, r0
    2840:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2844:	0043ba00 	subeq	fp, r3, r0, lsl #20
    2848:	00055008 	andeq	r5, r5, r8
    284c:	aee00100 	cdpge	1, 14, cr0, cr0, cr0, {0}
    2850:	16000009 	strne	r0, [r0], -r9
    2854:	000003c6 	andeq	r0, r0, r6, asr #7
    2858:	000012c4 	andeq	r1, r0, r4, asr #5
    285c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2860:	0043d800 	subeq	sp, r3, r0, lsl #16
    2864:	00057008 	andeq	r7, r5, r8
    2868:	19ac0100 	stmibne	ip!, {r8}
    286c:	00000307 	andeq	r0, r0, r7, lsl #6
    2870:	ba170000 	blt	5c2878 <__RW_SIZE__+0x5c22f0>
    2874:	0a000003 	beq	2888 <__RW_SIZE__+0x2300>
    2878:	88080044 	stmdahi	r8, {r2, r6}
    287c:	01000005 	tsteq	r0, r5
    2880:	0009dce1 	andeq	sp, r9, r1, ror #25
    2884:	03c61900 	biceq	r1, r6, #0, 18
    2888:	fb1a0000 	blx	682892 <__RW_SIZE__+0x68230a>
    288c:	2a000002 	bcs	289c <__RW_SIZE__+0x2314>
    2890:	20080044 	andcs	r0, r8, r4, asr #32
    2894:	01000000 	mrseq	r0, (UNDEF: 0)
    2898:	030719ac 	movweq	r1, #31148	; 0x79ac
    289c:	00000000 	andeq	r0, r0, r0
    28a0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    28a4:	00445400 	subeq	r5, r4, r0, lsl #8
    28a8:	0005b008 	andeq	fp, r5, r8
    28ac:	0ee20100 	cdpeq	1, 14, cr0, cr2, cr0, {0}
    28b0:	1600000a 	strne	r0, [r0], -sl
    28b4:	000003c6 	andeq	r0, r0, r6, asr #7
    28b8:	000012d7 	ldrdeq	r1, [r0], -r7
    28bc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    28c0:	00446c00 	subeq	r6, r4, r0, lsl #24
    28c4:	0005d008 	andeq	sp, r5, r8
    28c8:	19ac0100 	stmibne	ip!, {r8}
    28cc:	00000307 	andeq	r0, r0, r7, lsl #6
    28d0:	a2170000 	andsge	r0, r7, #0
    28d4:	9e000003 	cdpls	0, 0, cr0, cr0, cr3, {0}
    28d8:	e8080044 	stmda	r8, {r2, r6}
    28dc:	01000005 	tsteq	r0, r5
    28e0:	000a40e4 	andeq	r4, sl, r4, ror #1
    28e4:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    28e8:	12ea0000 	rscne	r0, sl, #0
    28ec:	fb180000 	blx	6028f6 <__RW_SIZE__+0x60236e>
    28f0:	b8000002 	stmdalt	r0, {r1}
    28f4:	10080044 	andne	r0, r8, r4, asr #32
    28f8:	01000006 	tsteq	r0, r6
    28fc:	030719a4 	movweq	r1, #31140	; 0x79a4
    2900:	00000000 	andeq	r0, r0, r0
    2904:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2908:	0044ea00 	subeq	lr, r4, r0, lsl #20
    290c:	00062808 	andeq	r2, r6, r8, lsl #16
    2910:	6ee50100 	cdpvs	1, 14, cr0, cr5, cr0, {0}
    2914:	1900000a 	stmdbne	r0, {r1, r3}
    2918:	000003c6 	andeq	r0, r0, r6, asr #7
    291c:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2920:	00450a00 	subeq	r0, r5, r0, lsl #20
    2924:	00002008 	andeq	r2, r0, r8
    2928:	19ac0100 	stmibne	ip!, {r8}
    292c:	00000307 	andeq	r0, r0, r7, lsl #6
    2930:	ba170000 	blt	5c2938 <__RW_SIZE__+0x5c23b0>
    2934:	34000003 	strcc	r0, [r0], #-3
    2938:	50080045 	andpl	r0, r8, r5, asr #32
    293c:	01000006 	tsteq	r0, r6
    2940:	000aa0e6 	andeq	sl, sl, r6, ror #1
    2944:	03c61600 	biceq	r1, r6, #0, 12
    2948:	12fd0000 	rscsne	r0, sp, #0
    294c:	fb180000 	blx	602956 <__RW_SIZE__+0x6023ce>
    2950:	4c000002 	stcmi	0, cr0, [r0], {2}
    2954:	70080045 	andvc	r0, r8, r5, asr #32
    2958:	01000006 	tsteq	r0, r6
    295c:	030719ac 	movweq	r1, #31148	; 0x79ac
    2960:	00000000 	andeq	r0, r0, r0
    2964:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2968:	00457e00 	subeq	r7, r5, r0, lsl #28
    296c:	00068808 	andeq	r8, r6, r8, lsl #16
    2970:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
    2974:	1900000a 	stmdbne	r0, {r1, r3}
    2978:	000003c6 	andeq	r0, r0, r6, asr #7
    297c:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2980:	00459e00 	subeq	r9, r5, r0, lsl #28
    2984:	00002008 	andeq	r2, r0, r8
    2988:	19ac0100 	stmibne	ip!, {r8}
    298c:	00000307 	andeq	r0, r0, r7, lsl #6
    2990:	ba170000 	blt	5c2998 <__RW_SIZE__+0x5c2410>
    2994:	c8000003 	stmdagt	r0, {r0, r1}
    2998:	b0080045 	andlt	r0, r8, r5, asr #32
    299c:	01000006 	tsteq	r0, r6
    29a0:	000b00e8 	andeq	r0, fp, r8, ror #1
    29a4:	03c61600 	biceq	r1, r6, #0, 12
    29a8:	13100000 	tstne	r0, #0
    29ac:	fb180000 	blx	6029b6 <__RW_SIZE__+0x60242e>
    29b0:	e0000002 	and	r0, r0, r2
    29b4:	d0080045 	andle	r0, r8, r5, asr #32
    29b8:	01000006 	tsteq	r0, r6
    29bc:	030719ac 	movweq	r1, #31148	; 0x79ac
    29c0:	00000000 	andeq	r0, r0, r0
    29c4:	00035b18 	andeq	r5, r3, r8, lsl fp
    29c8:	00461200 	subeq	r1, r6, r0, lsl #4
    29cc:	0006e808 	andeq	lr, r6, r8, lsl #16
    29d0:	18ea0100 	stmiane	sl!, {r8}^
    29d4:	000003a2 	andeq	r0, r0, r2, lsr #7
    29d8:	08004612 	stmdaeq	r0, {r1, r4, r9, sl, lr}
    29dc:	00000700 	andeq	r0, r0, r0, lsl #14
    29e0:	ae16d901 	cdpge	9, 1, cr13, cr6, cr1, {0}
    29e4:	23000003 	movwcs	r0, #3
    29e8:	18000013 	stmdane	r0, {r0, r1, r4}
    29ec:	000002fb 	strdeq	r0, [r0], -fp
    29f0:	0800462c 	stmdaeq	r0, {r2, r3, r5, r9, sl, lr}
    29f4:	00000720 	andeq	r0, r0, r0, lsr #14
    29f8:	0719a401 	ldreq	sl, [r9, -r1, lsl #8]
    29fc:	00000003 	andeq	r0, r0, r3
    2a00:	1f000000 	svcne	0x00000000
    2a04:	00000845 	andeq	r0, r0, r5, asr #16
    2a08:	46608501 	strbtmi	r8, [r0], -r1, lsl #10
    2a0c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    2a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a14:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2a18:	00787322 	rsbseq	r7, r8, r2, lsr #6
    2a1c:	00458501 	subeq	r8, r5, r1, lsl #10
    2a20:	13360000 	teqne	r6, #0
    2a24:	73220000 	teqvc	r2, #0
    2a28:	85010079 	strhi	r0, [r1, #-121]	; 0xffffff87
    2a2c:	00000045 	andeq	r0, r0, r5, asr #32
    2a30:	00001357 	andeq	r1, r0, r7, asr r3
    2a34:	00786522 	rsbseq	r6, r8, r2, lsr #10
    2a38:	00458501 	subeq	r8, r5, r1, lsl #10
    2a3c:	13780000 	cmnne	r8, #0
    2a40:	65220000 	strvs	r0, [r2, #-0]!
    2a44:	85010079 	strhi	r0, [r1, #-121]	; 0xffffff87
    2a48:	00000045 	andeq	r0, r0, r5, asr #32
    2a4c:	00001399 	muleq	r0, r9, r3
    2a50:	000aaa20 	andeq	sl, sl, r0, lsr #20
    2a54:	45850100 	strmi	r0, [r5, #256]	; 0x100
    2a58:	ba000000 	blt	2a60 <__RW_SIZE__+0x24d8>
    2a5c:	23000013 	movwcs	r0, #19
    2a60:	87010069 	strhi	r0, [r1, -r9, rrx]
    2a64:	00000045 	andeq	r0, r0, r5, asr #32
    2a68:	000013da 	ldrdeq	r1, [r0], -sl
    2a6c:	01006a23 	tsteq	r0, r3, lsr #20
    2a70:	00004587 	andeq	r4, r0, r7, lsl #11
    2a74:	00141100 	andseq	r1, r4, r0, lsl #2
    2a78:	08962400 	ldmeq	r6, {sl, sp}
    2a7c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2a80:	00000045 	andeq	r0, r0, r5, asr #32
    2a84:	00001448 	andeq	r1, r0, r8, asr #8
    2a88:	0008e524 	andeq	lr, r8, r4, lsr #10
    2a8c:	45890100 	strmi	r0, [r9, #256]	; 0x100
    2a90:	5b000000 	blpl	2a98 <__RW_SIZE__+0x2510>
    2a94:	17000014 	smladne	r0, r4, r0, r0
    2a98:	0000045c 	andeq	r0, r0, ip, asr r4
    2a9c:	0800467c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, lr}
    2aa0:	00000738 	andeq	r0, r0, r8, lsr r7
    2aa4:	0c1e9101 	ldfeqd	f1, [lr], {1}
    2aa8:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
    2aac:	17000004 	strne	r0, [r0, -r4]
    2ab0:	000002fb 	strdeq	r0, [r0], -fp
    2ab4:	08004684 	stmdaeq	r0, {r2, r7, r9, sl, lr}
    2ab8:	00000760 	andeq	r0, r0, r0, ror #14
    2abc:	0c088001 	stceq	0, cr8, [r8], {1}
    2ac0:	07160000 	ldreq	r0, [r6, -r0]
    2ac4:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    2ac8:	00000014 	andeq	r0, r0, r4, lsl r0
    2acc:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2ad0:	0046cc00 	subeq	ip, r6, r0, lsl #24
    2ad4:	00001008 	andeq	r1, r0, r8
    2ad8:	19810100 	stmibne	r1, {r8}
    2adc:	00000307 	andeq	r0, r0, r7, lsl #6
    2ae0:	78250000 	stmdavc	r5!, {}	; <UNPREDICTABLE>
    2ae4:	b0080046 	andlt	r0, r8, r6, asr #32
    2ae8:	26000008 	strcs	r0, [r0], -r8
    2aec:	08004718 	stmdaeq	r0, {r3, r4, r8, r9, sl, lr}
    2af0:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
    2af4:	01510127 	cmpeq	r1, r7, lsr #2
    2af8:	50012730 	andpl	r2, r1, r0, lsr r7
    2afc:	00003001 	andeq	r3, r0, r1
    2b00:	00036c15 	andeq	r6, r3, r5, lsl ip
    2b04:	00471800 	subeq	r1, r7, r0, lsl #16
    2b08:	00034208 	andeq	r4, r3, r8, lsl #4
    2b0c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    2b10:	1600000e 	strne	r0, [r0], -lr
    2b14:	00000378 	andeq	r0, r0, r8, ror r3
    2b18:	00001481 	andeq	r1, r0, r1, lsl #9
    2b1c:	00038116 	andeq	r8, r3, r6, lsl r1
    2b20:	0014a200 	andseq	sl, r4, r0, lsl #4
    2b24:	08b01a00 	ldmeq	r0!, {r9, fp, ip}
    2b28:	471a0000 	ldrmi	r0, [sl, -r0]
    2b2c:	033c0800 	teqeq	ip, #0, 16
    2b30:	ef010000 	svc	0x00010000
    2b34:	0008da16 	andeq	sp, r8, r6, lsl sl
    2b38:	0014c300 	andseq	ip, r4, r0, lsl #6
    2b3c:	08d01600 	ldmeq	r0, {r9, sl, ip}^
    2b40:	14d60000 	ldrbne	r0, [r6], #0
    2b44:	c6160000 	ldrgt	r0, [r6], -r0
    2b48:	c3000008 	movwgt	r0, #8
    2b4c:	16000014 			; <UNDEFINED> instruction: 0x16000014
    2b50:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    2b54:	000014d6 	ldrdeq	r1, [r0], -r6
    2b58:	0003a217 	andeq	sl, r3, r7, lsl r2
    2b5c:	00471a00 	subeq	r1, r7, r0, lsl #20
    2b60:	00078008 	andeq	r8, r7, r8
    2b64:	c6de0100 	ldrbgt	r0, [lr], r0, lsl #2
    2b68:	1600000c 	strne	r0, [r0], -ip
    2b6c:	000003ae 	andeq	r0, r0, lr, lsr #7
    2b70:	000014e9 	andeq	r1, r0, r9, ror #9
    2b74:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2b78:	00473e00 	subeq	r3, r7, r0, lsl #28
    2b7c:	0007b008 	andeq	fp, r7, r8
    2b80:	19a40100 	stmibne	r4!, {r8}
    2b84:	00000307 	andeq	r0, r0, r7, lsl #6
    2b88:	ba170000 	blt	5c2b90 <__RW_SIZE__+0x5c2608>
    2b8c:	78000003 	stmdavc	r0, {r0, r1}
    2b90:	c8080047 	stmdagt	r8, {r0, r1, r2, r6}
    2b94:	01000007 	tsteq	r0, r7
    2b98:	000cfcdf 	ldrdeq	pc, [ip], -pc	; <UNPREDICTABLE>
    2b9c:	03c61600 	biceq	r1, r6, #0, 12
    2ba0:	14fc0000 	ldrbtne	r0, [ip], #0
    2ba4:	fb1a0000 	blx	682bae <__RW_SIZE__+0x682626>
    2ba8:	98000002 	stmdals	r0, {r1}
    2bac:	20080047 	andcs	r0, r8, r7, asr #32
    2bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb4:	030716ac 	movweq	r1, #30380	; 0x76ac
    2bb8:	150f0000 	strne	r0, [pc, #-0]	; 2bc0 <__RW_SIZE__+0x2638>
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2bc4:	0047c200 	subeq	ip, r7, r0, lsl #4
    2bc8:	0007f008 	andeq	pc, r7, r8
    2bcc:	2ee00100 	cdpcs	1, 14, cr0, cr0, cr0, {0}
    2bd0:	1600000d 	strne	r0, [r0], -sp
    2bd4:	000003c6 	andeq	r0, r0, r6, asr #7
    2bd8:	00001522 	andeq	r1, r0, r2, lsr #10
    2bdc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2be0:	0047da00 	subeq	sp, r7, r0, lsl #20
    2be4:	00081008 	andeq	r1, r8, r8
    2be8:	19ac0100 	stmibne	ip!, {r8}
    2bec:	00000307 	andeq	r0, r0, r7, lsl #6
    2bf0:	ba170000 	blt	5c2bf8 <__RW_SIZE__+0x5c2670>
    2bf4:	0c000003 	stceq	0, cr0, [r0], {3}
    2bf8:	28080048 	stmdacs	r8, {r3, r6}
    2bfc:	01000008 	tsteq	r0, r8
    2c00:	000d64e1 	andeq	r6, sp, r1, ror #9
    2c04:	03c61600 	biceq	r1, r6, #0, 12
    2c08:	15350000 	ldrne	r0, [r5, #-0]!
    2c0c:	fb180000 	blx	602c16 <__RW_SIZE__+0x60268e>
    2c10:	24000002 	strcs	r0, [r0], #-2
    2c14:	48080048 	stmdami	r8, {r3, r6}
    2c18:	01000008 	tsteq	r0, r8
    2c1c:	030716ac 	movweq	r1, #30380	; 0x76ac
    2c20:	15480000 	strbne	r0, [r8, #-0]
    2c24:	00000000 	andeq	r0, r0, r0
    2c28:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2c2c:	00485400 	subeq	r5, r8, r0, lsl #8
    2c30:	00086008 	andeq	r6, r8, r8
    2c34:	92e20100 	rscls	r0, r2, #0, 2
    2c38:	1900000d 	stmdbne	r0, {r0, r2, r3}
    2c3c:	000003c6 	andeq	r0, r0, r6, asr #7
    2c40:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2c44:	00486c00 	subeq	r6, r8, r0, lsl #24
    2c48:	00088008 	andeq	r8, r8, r8
    2c4c:	19ac0100 	stmibne	ip!, {r8}
    2c50:	00000307 	andeq	r0, r0, r7, lsl #6
    2c54:	a2170000 	andsge	r0, r7, #0
    2c58:	9c000003 	stcls	0, cr0, [r0], {3}
    2c5c:	98080048 	stmdals	r8, {r3, r6}
    2c60:	01000008 	tsteq	r0, r8
    2c64:	000dc4e4 	andeq	ip, sp, r4, ror #9
    2c68:	03ae1600 			; <UNDEFINED> instruction: 0x03ae1600
    2c6c:	155b0000 	ldrbne	r0, [fp, #-0]
    2c70:	fb180000 	blx	602c7a <__RW_SIZE__+0x6026f2>
    2c74:	b6000002 	strlt	r0, [r0], -r2
    2c78:	c0080048 	andgt	r0, r8, r8, asr #32
    2c7c:	01000008 	tsteq	r0, r8
    2c80:	030719a4 	movweq	r1, #31140	; 0x79a4
    2c84:	00000000 	andeq	r0, r0, r0
    2c88:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2c8c:	0048e800 	subeq	lr, r8, r0, lsl #16
    2c90:	0008d808 	andeq	sp, r8, r8, lsl #16
    2c94:	fae50100 	blx	ff94309c <MSP_BASE+0xdf93e09c>
    2c98:	1600000d 	strne	r0, [r0], -sp
    2c9c:	000003c6 	andeq	r0, r0, r6, asr #7
    2ca0:	0000156e 	andeq	r1, r0, lr, ror #10
    2ca4:	0002fb1a 	andeq	pc, r2, sl, lsl fp	; <UNPREDICTABLE>
    2ca8:	00490800 	subeq	r0, r9, r0, lsl #16
    2cac:	00002008 	andeq	r2, r0, r8
    2cb0:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2cb4:	00000307 	andeq	r0, r0, r7, lsl #6
    2cb8:	00001581 	andeq	r1, r0, r1, lsl #11
    2cbc:	ba170000 	blt	5c2cc4 <__RW_SIZE__+0x5c273c>
    2cc0:	32000003 	andcc	r0, r0, #3
    2cc4:	00080049 	andeq	r0, r8, r9, asr #32
    2cc8:	01000009 	tsteq	r0, r9
    2ccc:	000e2ce6 	andeq	r2, lr, r6, ror #25
    2cd0:	03c61600 	biceq	r1, r6, #0, 12
    2cd4:	15940000 	ldrne	r0, [r4]
    2cd8:	fb180000 	blx	602ce2 <__RW_SIZE__+0x60275a>
    2cdc:	4a000002 	bmi	2cec <__RW_SIZE__+0x2764>
    2ce0:	20080049 	andcs	r0, r8, r9, asr #32
    2ce4:	01000009 	tsteq	r0, r9
    2ce8:	030719ac 	movweq	r1, #31148	; 0x79ac
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	0003ba17 	andeq	fp, r3, r7, lsl sl
    2cf4:	00497c00 	subeq	r7, r9, r0, lsl #24
    2cf8:	00093808 	andeq	r3, r9, r8, lsl #16
    2cfc:	62e70100 	rscvs	r0, r7, #0, 2
    2d00:	1600000e 	strne	r0, [r0], -lr
    2d04:	000003c6 	andeq	r0, r0, r6, asr #7
    2d08:	000015a7 	andeq	r1, r0, r7, lsr #11
    2d0c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    2d10:	00499400 	subeq	r9, r9, r0, lsl #8
    2d14:	00095808 	andeq	r5, r9, r8, lsl #16
    2d18:	16ac0100 	strtne	r0, [ip], r0, lsl #2
    2d1c:	00000307 	andeq	r0, r0, r7, lsl #6
    2d20:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
    2d24:	ba170000 	blt	5c2d2c <__RW_SIZE__+0x5c27a4>
    2d28:	c4000003 	strgt	r0, [r0], #-3
    2d2c:	70080049 	andvc	r0, r8, r9, asr #32
    2d30:	01000009 	tsteq	r0, r9
    2d34:	000e90e8 	andeq	r9, lr, r8, ror #1
    2d38:	03c61900 	biceq	r1, r6, #0, 18
    2d3c:	fb180000 	blx	602d46 <__RW_SIZE__+0x6027be>
    2d40:	dc000002 	stcle	0, cr0, [r0], {2}
    2d44:	90080049 	andls	r0, r8, r9, asr #32
    2d48:	01000009 	tsteq	r0, r9
    2d4c:	030719ac 	movweq	r1, #31148	; 0x79ac
    2d50:	00000000 	andeq	r0, r0, r0
    2d54:	00035b18 	andeq	r5, r3, r8, lsl fp
    2d58:	004a0c00 	subeq	r0, sl, r0, lsl #24
    2d5c:	0009a808 	andeq	sl, r9, r8, lsl #16
    2d60:	18ea0100 	stmiane	sl!, {r8}^
    2d64:	000003a2 	andeq	r0, r0, r2, lsr #7
    2d68:	08004a0c 	stmdaeq	r0, {r2, r3, r9, fp, lr}
    2d6c:	000009c0 	andeq	r0, r0, r0, asr #19
    2d70:	ae16d901 	cdpge	9, 1, cr13, cr6, cr1, {0}
    2d74:	cd000003 	stcgt	0, cr0, [r0, #-12]
    2d78:	18000015 	stmdane	r0, {r0, r2, r4}
    2d7c:	000002fb 	strdeq	r0, [r0], -fp
    2d80:	08004a26 	stmdaeq	r0, {r1, r2, r5, r9, fp, lr}
    2d84:	000009e0 	andeq	r0, r0, r0, ror #19
    2d88:	0716a401 	ldreq	sl, [r6, -r1, lsl #8]
    2d8c:	e0000003 	and	r0, r0, r3
    2d90:	00000015 	andeq	r0, r0, r5, lsl r0
    2d94:	00000000 	andeq	r0, r0, r0
    2d98:	0009f41f 	andeq	pc, r9, pc, lsl r4	; <UNPREDICTABLE>
    2d9c:	5cf20100 	ldfple	f0, [r2]
    2da0:	9408004a 	strls	r0, [r8], #-74	; 0xffffffb6
    2da4:	01000000 	mrseq	r0, (UNDEF: 0)
    2da8:	000f6b9c 	muleq	pc, ip, fp	; <UNPREDICTABLE>
    2dac:	0a022000 	beq	8adb4 <__RW_SIZE__+0x8a82c>
    2db0:	f2010000 	vhadd.s8	d0, d1, d0
    2db4:	00000045 	andeq	r0, r0, r5, asr #32
    2db8:	000015f3 	strdeq	r1, [r0], -r3
    2dbc:	01006923 	tsteq	r0, r3, lsr #18
    2dc0:	00007af4 	strdeq	r7, [r0], -r4
    2dc4:	00161400 	andseq	r1, r6, r0, lsl #8
    2dc8:	30632800 	rsbcc	r2, r3, r0, lsl #16
    2dcc:	2cf50100 	ldfcse	f0, [r5]
    2dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd4:	31632356 	cmncc	r3, r6, asr r3
    2dd8:	2cf60100 	ldfcse	f0, [r6]
    2ddc:	33000000 	movwcc	r0, #0
    2de0:	17000016 	smladne	r0, r6, r0, r0
    2de4:	000002fb 	strdeq	r0, [r0], -fp
    2de8:	08004aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, lr}
    2dec:	000009f8 	strdeq	r0, [r0], -r8
    2df0:	0f3cff01 	svceq	0x003cff01
    2df4:	07160000 	ldreq	r0, [r6, -r0]
    2df8:	46000003 	strmi	r0, [r0], -r3
    2dfc:	00000016 	andeq	r0, r0, r6, lsl r0
    2e00:	0002fb29 	andeq	pc, r2, r9, lsr #22
    2e04:	004aca00 	subeq	ip, sl, r0, lsl #20
    2e08:	00000e08 	andeq	r0, r0, r8, lsl #28
    2e0c:	01000100 	mrseq	r0, (UNDEF: 16)
    2e10:	00000f56 	andeq	r0, r0, r6, asr pc
    2e14:	00030719 	andeq	r0, r3, r9, lsl r7
    2e18:	7c2a0000 	stcvc	0, cr0, [sl], #-0
    2e1c:	b008004a 	andlt	r0, r8, sl, asr #32
    2e20:	27000008 	strcs	r0, [r0, -r8]
    2e24:	30015101 	andcc	r5, r1, r1, lsl #2
    2e28:	01500127 	cmpeq	r0, r7, lsr #2
    2e2c:	15000030 	strne	r0, [r0, #-48]	; 0xffffffd0
    2e30:	00000363 	andeq	r0, r0, r3, ror #6
    2e34:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
    2e38:	00000006 	andeq	r0, r0, r6
    2e3c:	0f8e9c01 	svceq	0x008e9c01
    2e40:	f6260000 			; <UNDEFINED> instruction: 0xf6260000
    2e44:	d408004a 	strle	r0, [r8], #-74	; 0xffffffb6
    2e48:	2700000e 	strcs	r0, [r0, -lr]
    2e4c:	30015001 	andcc	r5, r1, r1
    2e50:	b52b0000 	strlt	r0, [fp, #-0]!
    2e54:	01000008 	tsteq	r0, r8
    2e58:	4af8010b 	bmi	ffe0328c <MSP_BASE+0xdfdfe28c>
    2e5c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    2e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e64:	0000108a 	andeq	r1, r0, sl, lsl #1
    2e68:	0073782c 	rsbseq	r7, r3, ip, lsr #16
    2e6c:	73010b01 	movwvc	r0, #6913	; 0x1b01
    2e70:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    2e74:	2c000016 	stccs	0, cr0, [r0], {22}
    2e78:	01007379 	tsteq	r0, r9, ror r3
    2e7c:	0073010b 	rsbseq	r0, r3, fp, lsl #2
    2e80:	16850000 	strne	r0, [r5], r0
    2e84:	772c0000 	strvc	r0, [ip, -r0]!
    2e88:	010b0100 	mrseq	r0, (UNDEF: 27)
    2e8c:	00000073 	andeq	r0, r0, r3, ror r0
    2e90:	000016b1 			; <UNDEFINED> instruction: 0x000016b1
    2e94:	0100682c 	tsteq	r0, ip, lsr #16
    2e98:	0073010b 	rsbseq	r0, r3, fp, lsl #2
    2e9c:	16d20000 	ldrbne	r0, [r2], r0
    2ea0:	022d0000 	eoreq	r0, sp, #0
    2ea4:	0100000a 	tsteq	r0, sl
    2ea8:	0045010b 	subeq	r0, r5, fp, lsl #2
    2eac:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb0:	00692e00 	rsbeq	r2, r9, r0, lsl #28
    2eb4:	7a010d01 	bvc	462c0 <__RW_SIZE__+0x45d38>
    2eb8:	f3000000 	vhadd.u8	d0, d0, d0
    2ebc:	2f000016 	svccs	0x00000016
    2ec0:	01003063 	tsteq	r0, r3, rrx
    2ec4:	002c010e 	eoreq	r0, ip, lr, lsl #2
    2ec8:	55010000 	strpl	r0, [r1, #-0]
    2ecc:	0031632e 	eorseq	r6, r1, lr, lsr #6
    2ed0:	2c010f01 	stccs	15, cr0, [r1], {1}
    2ed4:	12000000 	andne	r0, r0, #0
    2ed8:	2e000017 	mcrcs	0, 0, r0, cr0, cr7, {0}
    2edc:	01006578 	tsteq	r0, r8, ror r5
    2ee0:	00730110 	rsbseq	r0, r3, r0, lsl r1
    2ee4:	17250000 	strne	r0, [r5, -r0]!
    2ee8:	792e0000 	stmdbvc	lr!, {}	; <UNPREDICTABLE>
    2eec:	10010065 	andne	r0, r1, r5, rrx
    2ef0:	00007301 	andeq	r7, r0, r1, lsl #6
    2ef4:	00173800 	andseq	r3, r7, r0, lsl #16
    2ef8:	02fb3000 	rscseq	r3, fp, #0
    2efc:	4b640000 	blmi	1902f04 <__RW_SIZE__+0x190297c>
    2f00:	0a100800 	beq	404f08 <__RW_SIZE__+0x404980>
    2f04:	1d010000 	stcne	0, cr0, [r1, #-0]
    2f08:	00105301 	andseq	r5, r0, r1, lsl #6
    2f0c:	03071600 	movweq	r1, #30208	; 0x7600
    2f10:	175f0000 	ldrbne	r0, [pc, -r0]
    2f14:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2f18:	000002fb 	strdeq	r0, [r0], -fp
    2f1c:	08004b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, lr}
    2f20:	0000000e 	andeq	r0, r0, lr
    2f24:	6d011e01 	stcvs	14, cr1, [r1, #-4]
    2f28:	19000010 	stmdbne	r0, {r4}
    2f2c:	00000307 	andeq	r0, r0, r7, lsl #6
    2f30:	4b382a00 	blmi	e0d738 <__RW_SIZE__+0xe0d1b0>
    2f34:	08b00800 	ldmeq	r0!, {fp}
    2f38:	01270000 	teqeq	r7, r0
    2f3c:	00770253 	rsbseq	r0, r7, r3, asr r2
    2f40:	02510127 	subseq	r0, r1, #-1073741815	; 0xc0000009
    2f44:	01270074 	teqeq	r7, r4, ror r0
    2f48:	00780250 	rsbseq	r0, r8, r0, asr r2
    2f4c:	07310000 	ldreq	r0, [r1, -r0]!
    2f50:	01000009 	tsteq	r0, r9
    2f54:	6a2b0132 	bvs	ac3424 <__RW_SIZE__+0xac2e9c>
    2f58:	01000008 	tsteq	r0, r8
    2f5c:	4bb00124 	blmi	fec033f4 <MSP_BASE+0xdebfe3f4>
    2f60:	1e260800 	cdpne	8, 2, cr0, cr6, cr0, {0}
    2f64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f68:	000024c6 	andeq	r2, r0, r6, asr #9
    2f6c:	00086532 	andeq	r6, r8, r2, lsr r5
    2f70:	01240100 	teqeq	r4, r0, lsl #2
    2f74:	00000073 	andeq	r0, r0, r3, ror r0
    2f78:	00001772 	andeq	r1, r0, r2, ror r7
    2f7c:	00108a33 	andseq	r8, r0, r3, lsr sl
    2f80:	004bb200 	subeq	fp, fp, r0, lsl #4
    2f84:	000a2808 	andeq	r2, sl, r8, lsl #16
    2f88:	01260100 	teqeq	r6, r0, lsl #2
    2f8c:	00038b33 	andeq	r8, r3, r3, lsr fp
    2f90:	004bf800 	subeq	pc, fp, r0, lsl #16
    2f94:	000a4008 	andeq	r4, sl, r8
    2f98:	01270100 	teqeq	r7, r0, lsl #2
    2f9c:	0004c730 	andeq	ip, r4, r0, lsr r7
    2fa0:	004c2400 	subeq	r2, ip, r0, lsl #8
    2fa4:	000a7008 	andeq	r7, sl, r8
    2fa8:	01290100 	teqeq	r9, r0, lsl #2
    2fac:	00001139 	andeq	r1, r0, r9, lsr r1
    2fb0:	00031317 	andeq	r1, r3, r7, lsl r3
    2fb4:	004c2400 	subeq	r2, ip, r0, lsl #8
    2fb8:	000a9808 	andeq	r9, sl, r8, lsl #16
    2fbc:	149b0100 	ldrne	r0, [fp], #256	; 0x100
    2fc0:	1b000011 	blne	300c <__RW_SIZE__+0x2a84>
    2fc4:	0000031f 	andeq	r0, r0, pc, lsl r3
    2fc8:	0a981c64 	beq	fe60a160 <MSP_BASE+0xde605160>
    2fcc:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    2fd0:	02000003 	andeq	r0, r0, #3
    2fd4:	00006c91 	muleq	r0, r1, ip
    2fd8:	00031318 	andeq	r1, r3, r8, lsl r3
    2fdc:	004c7200 	subeq	r7, ip, r0, lsl #4
    2fe0:	000ac008 	andeq	ip, sl, r8
    2fe4:	1b9d0100 	blne	fe7433ec <MSP_BASE+0xde73e3ec>
    2fe8:	0000031f 	andeq	r0, r0, pc, lsl r3
    2fec:	0ac01c32 	beq	ff00a0bc <MSP_BASE+0xdf0050bc>
    2ff0:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    2ff4:	02000003 	andeq	r0, r0, #3
    2ff8:	00006891 	muleq	r0, r1, r8
    2ffc:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3000:	4c960000 	ldcmi	0, cr0, [r6], {0}
    3004:	0ad80800 	beq	ff60500c <MSP_BASE+0xdf60000c>
    3008:	2b010000 	blcs	43010 <__RW_SIZE__+0x42a88>
    300c:	00116a01 	andseq	r6, r1, r1, lsl #20
    3010:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3014:	184f0000 	stmdane	pc, {}^	; <UNPREDICTABLE>
    3018:	000002fb 	strdeq	r0, [r0], -fp
    301c:	08004cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, lr}
    3020:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3024:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    3028:	4f000003 	svcmi	0x00000003
    302c:	ba300000 	blt	c03034 <__RW_SIZE__+0xc02aac>
    3030:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
    3034:	1008004c 	andne	r0, r8, ip, asr #32
    3038:	0100000b 	tsteq	r0, fp
    303c:	119b012c 	orrsne	r0, fp, ip, lsr #2
    3040:	c61b0000 	ldrgt	r0, [fp], -r0
    3044:	00000003 	andeq	r0, r0, r3
    3048:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    304c:	004d0800 	subeq	r0, sp, r0, lsl #16
    3050:	000b3008 	andeq	r3, fp, r8
    3054:	1bac0100 	blne	feb0345c <MSP_BASE+0xdeafe45c>
    3058:	00000307 	andeq	r0, r0, r7, lsl #6
    305c:	30000000 	andcc	r0, r0, r0
    3060:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3064:	08004d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, lr}
    3068:	00000b48 	andeq	r0, r0, r8, asr #22
    306c:	cc012d01 	stcgt	13, cr2, [r1], {1}
    3070:	21000011 	tstcs	r0, r1, lsl r0
    3074:	000003c6 	andeq	r0, r0, r6, asr #7
    3078:	02fb1859 	rscseq	r1, fp, #5832704	; 0x590000
    307c:	4d500000 	ldclmi	0, cr0, [r0, #-0]
    3080:	0b680800 	bleq	1a05088 <__RW_SIZE__+0x1a04b00>
    3084:	ac010000 	stcge	0, cr0, [r1], {-0}
    3088:	00030721 	andeq	r0, r3, r1, lsr #14
    308c:	00005900 	andeq	r5, r0, r0, lsl #18
    3090:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3094:	004d8200 	subeq	r8, sp, r0, lsl #4
    3098:	000b8008 	andeq	r8, fp, r8
    309c:	012e0100 	teqeq	lr, r0, lsl #2
    30a0:	000011fd 	strdeq	r1, [r0], -sp
    30a4:	0003c61b 	andeq	ip, r3, fp, lsl r6
    30a8:	fb183000 	blx	60f0b2 <__RW_SIZE__+0x60eb2a>
    30ac:	9a000002 	bls	30bc <__RW_SIZE__+0x2b34>
    30b0:	a008004d 	andge	r0, r8, sp, asr #32
    30b4:	0100000b 	tsteq	r0, fp
    30b8:	03071bac 	movweq	r1, #31660	; 0x7bac
    30bc:	00300000 	eorseq	r0, r0, r0
    30c0:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    30c4:	4dcc0000 	stclmi	0, cr0, [ip]
    30c8:	0bb80800 	bleq	fee050d0 <MSP_BASE+0xdee000d0>
    30cc:	2f010000 	svccs	0x00010000
    30d0:	00122e01 	andseq	r2, r2, r1, lsl #28
    30d4:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    30d8:	186d0000 	stmdane	sp!, {}^	; <UNPREDICTABLE>
    30dc:	000002fb 	strdeq	r0, [r0], -fp
    30e0:	08004de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, lr}
    30e4:	00000bd8 	ldrdeq	r0, [r0], -r8
    30e8:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    30ec:	6d000003 	stcvs	0, cr0, [r0, #-12]
    30f0:	ba300000 	blt	c030f8 <__RW_SIZE__+0xc02b70>
    30f4:	16000003 	strne	r0, [r0], -r3
    30f8:	f008004e 			; <UNDEFINED> instruction: 0xf008004e
    30fc:	0100000b 	tsteq	r0, fp
    3100:	125f0130 	subsne	r0, pc, #48, 2
    3104:	c61b0000 	ldrgt	r0, [fp], -r0
    3108:	64000003 	strvs	r0, [r0], #-3
    310c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3110:	004e2e00 	subeq	r2, lr, r0, lsl #28
    3114:	000c1008 	andeq	r1, ip, r8
    3118:	1bac0100 	blne	feb03520 <MSP_BASE+0xdeafe520>
    311c:	00000307 	andeq	r0, r0, r7, lsl #6
    3120:	30000064 	andcc	r0, r0, r4, rrx
    3124:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3128:	08004e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, lr}
    312c:	00000c28 	andeq	r0, r0, r8, lsr #24
    3130:	90013101 	andls	r3, r1, r1, lsl #2
    3134:	1b000012 	blne	3184 <__RW_SIZE__+0x2bfc>
    3138:	000003c6 	andeq	r0, r0, r6, asr #7
    313c:	02fb1803 	rscseq	r1, fp, #196608	; 0x30000
    3140:	4e780000 	cdpmi	0, 7, cr0, cr8, cr0, {0}
    3144:	0c480800 	mcrreq	8, 0, r0, r8, cr0
    3148:	ac010000 	stcge	0, cr0, [r1], {-0}
    314c:	0003071b 	andeq	r0, r3, fp, lsl r7
    3150:	00000300 	andeq	r0, r0, r0, lsl #6
    3154:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3158:	004eaa00 	subeq	sl, lr, r0, lsl #20
    315c:	000c6008 	andeq	r6, ip, r8
    3160:	01320100 	teqeq	r2, r0, lsl #2
    3164:	000012c1 	andeq	r1, r0, r1, asr #5
    3168:	0003c61b 	andeq	ip, r3, fp, lsl r6
    316c:	fb181200 	blx	607976 <__RW_SIZE__+0x6073ee>
    3170:	c2000002 	andgt	r0, r0, #2
    3174:	8008004e 	andhi	r0, r8, lr, asr #32
    3178:	0100000c 	tsteq	r0, ip
    317c:	03071bac 	movweq	r1, #31660	; 0x7bac
    3180:	00120000 	andseq	r0, r2, r0
    3184:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3188:	4ef40000 	cdpmi	0, 15, cr0, cr4, cr0, {0}
    318c:	0c980800 	ldceq	8, cr0, [r8], {0}
    3190:	33010000 	movwcc	r0, #4096	; 0x1000
    3194:	0012f401 	andseq	pc, r2, r1, lsl #8
    3198:	03c62100 	biceq	r2, r6, #0, 2
    319c:	7f810000 	svcvc	0x00810000
    31a0:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    31a4:	004f0c00 	subeq	r0, pc, r0, lsl #24
    31a8:	000cb808 	andeq	fp, ip, r8, lsl #16
    31ac:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    31b0:	00000307 	andeq	r0, r0, r7, lsl #6
    31b4:	00007f81 	andeq	r7, r0, r1, lsl #31
    31b8:	0003a230 	andeq	sl, r3, r0, lsr r2
    31bc:	004f3e00 	subeq	r3, pc, r0, lsl #28
    31c0:	000cd008 	andeq	sp, ip, r8
    31c4:	01340100 	teqeq	r4, r0, lsl #2
    31c8:	00001325 	andeq	r1, r0, r5, lsr #6
    31cc:	0003ae21 	andeq	sl, r3, r1, lsr #28
    31d0:	fb186800 	blx	61d1da <__RW_SIZE__+0x61cc52>
    31d4:	56000002 	strpl	r0, [r0], -r2
    31d8:	f008004f 			; <UNDEFINED> instruction: 0xf008004f
    31dc:	0100000c 	tsteq	r0, ip
    31e0:	030721a4 	movweq	r2, #29092	; 0x71a4
    31e4:	00680000 	rsbeq	r0, r8, r0
    31e8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    31ec:	4f880000 	svcmi	0x00880000
    31f0:	0d080800 	stceq	8, cr0, [r8, #-0]
    31f4:	35010000 	strcc	r0, [r1, #-0]
    31f8:	00135801 	andseq	r5, r3, r1, lsl #16
    31fc:	03c62100 	biceq	r2, r6, #0, 2
    3200:	7f850000 	svcvc	0x00850000
    3204:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3208:	004fa000 	subeq	sl, pc, r0
    320c:	000d2808 	andeq	r2, sp, r8, lsl #16
    3210:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    3214:	00000307 	andeq	r0, r0, r7, lsl #6
    3218:	00007f85 	andeq	r7, r0, r5, lsl #31
    321c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3220:	004fd200 	subeq	sp, pc, r0, lsl #4
    3224:	000d4008 	andeq	r4, sp, r8
    3228:	01360100 	teqeq	r6, r0, lsl #2
    322c:	00001389 	andeq	r1, r0, r9, lsl #7
    3230:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3234:	fb181000 	blx	60723e <__RW_SIZE__+0x606cb6>
    3238:	ea000002 	b	3248 <__RW_SIZE__+0x2cc0>
    323c:	6008004f 	andvs	r0, r8, pc, asr #32
    3240:	0100000d 	tsteq	r0, sp
    3244:	03071bac 	movweq	r1, #31660	; 0x7bac
    3248:	00100000 	andseq	r0, r0, r0
    324c:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3250:	501c0000 	andspl	r0, ip, r0
    3254:	0d780800 	ldcleq	8, cr0, [r8, #-0]
    3258:	37010000 	strcc	r0, [r1, -r0]
    325c:	0013ba01 	andseq	fp, r3, r1, lsl #20
    3260:	03c61b00 	biceq	r1, r6, #0, 22
    3264:	187a0000 	ldmdane	sl!, {}^	; <UNPREDICTABLE>
    3268:	000002fb 	strdeq	r0, [r0], -fp
    326c:	08005034 	stmdaeq	r0, {r2, r4, r5, ip, lr}
    3270:	00000d98 	muleq	r0, r8, sp
    3274:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3278:	7a000003 	bvc	328c <__RW_SIZE__+0x2d04>
    327c:	a2300000 	eorsge	r0, r0, #0
    3280:	66000003 	strvs	r0, [r0], -r3
    3284:	b0080050 	andlt	r0, r8, r0, asr r0
    3288:	0100000d 	tsteq	r0, sp
    328c:	13eb0138 	mvnne	r0, #56, 2
    3290:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    3294:	4b000003 	blmi	32a8 <__RW_SIZE__+0x2d20>
    3298:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    329c:	00507e00 	subseq	r7, r0, r0, lsl #28
    32a0:	000dd008 	andeq	sp, sp, r8
    32a4:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    32a8:	00000307 	andeq	r0, r0, r7, lsl #6
    32ac:	3000004b 	andcc	r0, r0, fp, asr #32
    32b0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    32b4:	080050b0 	stmdaeq	r0, {r4, r5, r7, ip, lr}
    32b8:	00000de8 	andeq	r0, r0, r8, ror #27
    32bc:	1c013901 	stcne	9, cr3, [r1], {1}
    32c0:	1b000014 	blne	3318 <__RW_SIZE__+0x2d90>
    32c4:	000003c6 	andeq	r0, r0, r6, asr #7
    32c8:	02fb1839 	rscseq	r1, fp, #3735552	; 0x390000
    32cc:	50c80000 	sbcpl	r0, r8, r0
    32d0:	0e080800 	cdpeq	8, 0, cr0, cr8, cr0, {0}
    32d4:	ac010000 	stcge	0, cr0, [r1], {-0}
    32d8:	0003071b 	andeq	r0, r3, fp, lsl r7
    32dc:	00003900 	andeq	r3, r0, r0, lsl #18
    32e0:	0003ba30 	andeq	fp, r3, r0, lsr sl
    32e4:	0050fa00 	subseq	pc, r0, r0, lsl #20
    32e8:	000e2008 	andeq	r2, lr, r8
    32ec:	013a0100 	teqeq	sl, r0, lsl #2
    32f0:	0000144d 	andeq	r1, r0, sp, asr #8
    32f4:	0003c61b 	andeq	ip, r3, fp, lsl r6
    32f8:	fb182c00 	blx	60e302 <__RW_SIZE__+0x60dd7a>
    32fc:	12000002 	andne	r0, r0, #2
    3300:	40080051 	andmi	r0, r8, r1, asr r0
    3304:	0100000e 	tsteq	r0, lr
    3308:	03071bac 	movweq	r1, #31660	; 0x7bac
    330c:	002c0000 	eoreq	r0, ip, r0
    3310:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3314:	514a0000 	mrspl	r0, (UNDEF: 74)
    3318:	0e580800 	cdpeq	8, 5, cr0, cr8, cr0, {0}
    331c:	3b010000 	blcc	43324 <__RW_SIZE__+0x42d9c>
    3320:	00147e01 	andseq	r7, r4, r1, lsl #28
    3324:	03c61b00 	biceq	r1, r6, #0, 22
    3328:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    332c:	000002fb 	strdeq	r0, [r0], -fp
    3330:	08005162 	stmdaeq	r0, {r1, r5, r6, r8, ip, lr}
    3334:	00000e78 	andeq	r0, r0, r8, ror lr
    3338:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    333c:	00000003 	andeq	r0, r0, r3
    3340:	ba300000 	blt	c03348 <__RW_SIZE__+0xc02dc0>
    3344:	92000003 	andls	r0, r0, #3
    3348:	90080051 	andls	r0, r8, r1, asr r0
    334c:	0100000e 	tsteq	r0, lr
    3350:	14af013c 	strtne	r0, [pc], #316	; 3358 <__RW_SIZE__+0x2dd0>
    3354:	c61b0000 	ldrgt	r0, [fp], -r0
    3358:	34000003 	strcc	r0, [r0], #-3
    335c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3360:	0051aa00 	subseq	sl, r1, r0, lsl #20
    3364:	000eb008 	andeq	fp, lr, r8
    3368:	1bac0100 	blne	feb03770 <MSP_BASE+0xdeafe770>
    336c:	00000307 	andeq	r0, r0, r7, lsl #6
    3370:	30000034 	andcc	r0, r0, r4, lsr r0
    3374:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3378:	080051dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, ip, lr}
    337c:	00000ec8 	andeq	r0, r0, r8, asr #29
    3380:	e0013d01 	and	r3, r1, r1, lsl #26
    3384:	1b000014 	blne	33dc <__RW_SIZE__+0x2e54>
    3388:	000003c6 	andeq	r0, r0, r6, asr #7
    338c:	02fb1802 	rscseq	r1, fp, #131072	; 0x20000
    3390:	51f40000 	mvnspl	r0, r0
    3394:	0ee80800 	cdpeq	8, 14, cr0, cr8, cr0, {0}
    3398:	ac010000 	stcge	0, cr0, [r1], {-0}
    339c:	0003071b 	andeq	r0, r3, fp, lsl r7
    33a0:	00000200 	andeq	r0, r0, r0, lsl #4
    33a4:	0003a230 	andeq	sl, r3, r0, lsr r2
    33a8:	00522600 	subseq	r2, r2, r0, lsl #12
    33ac:	000f0008 	andeq	r0, pc, r8
    33b0:	013e0100 	teqeq	lr, r0, lsl #2
    33b4:	00001511 	andeq	r1, r0, r1, lsl r5
    33b8:	0003ae21 	andeq	sl, r3, r1, lsr #28
    33bc:	fb187700 	blx	620fc6 <__RW_SIZE__+0x620a3e>
    33c0:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    33c4:	20080052 	andcs	r0, r8, r2, asr r0
    33c8:	0100000f 	tsteq	r0, pc
    33cc:	030721a4 	movweq	r2, #29092	; 0x71a4
    33d0:	00770000 	rsbseq	r0, r7, r0
    33d4:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    33d8:	52700000 	rsbspl	r0, r0, #0
    33dc:	0f380800 	svceq	0x00380800
    33e0:	3f010000 	svccc	0x00010000
    33e4:	00154201 	andseq	r4, r5, r1, lsl #4
    33e8:	03c61b00 	biceq	r1, r6, #0, 22
    33ec:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    33f0:	000002fb 	strdeq	r0, [r0], -fp
    33f4:	08005288 	stmdaeq	r0, {r3, r7, r9, ip, lr}
    33f8:	00000f58 	andeq	r0, r0, r8, asr pc
    33fc:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3400:	20000003 	andcs	r0, r0, r3
    3404:	a2300000 	eorsge	r0, r0, #0
    3408:	ba000003 	blt	341c <__RW_SIZE__+0x2e94>
    340c:	70080052 	andvc	r0, r8, r2, asr r0
    3410:	0100000f 	tsteq	r0, pc
    3414:	15730140 	ldrbne	r0, [r3, #-320]!	; 0xfffffec0
    3418:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    341c:	6a000003 	bvs	3430 <__RW_SIZE__+0x2ea8>
    3420:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3424:	0052d200 	subseq	sp, r2, r0, lsl #4
    3428:	000f9008 	andeq	r9, pc, r8
    342c:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    3430:	00000307 	andeq	r0, r0, r7, lsl #6
    3434:	3000006a 	andcc	r0, r0, sl, rrx
    3438:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    343c:	0800530a 	stmdaeq	r0, {r1, r3, r8, r9, ip, lr}
    3440:	00000fa8 	andeq	r0, r0, r8, lsr #31
    3444:	a4014101 	strge	r4, [r1], #-257	; 0xfffffeff
    3448:	1b000015 	blne	34a4 <__RW_SIZE__+0x2f1c>
    344c:	000003c6 	andeq	r0, r0, r6, asr #7
    3450:	02fb1800 	rscseq	r1, fp, #0, 16
    3454:	53220000 	teqpl	r2, #0
    3458:	0fc80800 	svceq	0x00c80800
    345c:	ac010000 	stcge	0, cr0, [r1], {-0}
    3460:	0003071b 	andeq	r0, r3, fp, lsl r7
    3464:	00000000 	andeq	r0, r0, r0
    3468:	0003ba30 	andeq	fp, r3, r0, lsr sl
    346c:	00535800 	subseq	r5, r3, r0, lsl #16
    3470:	000fe008 	andeq	lr, pc, r8
    3474:	01420100 	mrseq	r0, (UNDEF: 82)
    3478:	000015d5 	ldrdeq	r1, [r0], -r5
    347c:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3480:	fb180000 	blx	60348a <__RW_SIZE__+0x602f02>
    3484:	70000002 	andvc	r0, r0, r2
    3488:	00080053 	andeq	r0, r8, r3, asr r0
    348c:	01000010 	tsteq	r0, r0, lsl r0
    3490:	03071bac 	movweq	r1, #31660	; 0x7bac
    3494:	00000000 	andeq	r0, r0, r0
    3498:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    349c:	53a00000 	movpl	r0, #0
    34a0:	10180800 	andsne	r0, r8, r0, lsl #16
    34a4:	44010000 	strmi	r0, [r1], #-0
    34a8:	00160601 	andseq	r0, r6, r1, lsl #12
    34ac:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    34b0:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    34b4:	000002fb 	strdeq	r0, [r0], -fp
    34b8:	080053b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip, lr}
    34bc:	00001038 	andeq	r1, r0, r8, lsr r0
    34c0:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    34c4:	40000003 	andmi	r0, r0, r3
    34c8:	ba300000 	blt	c034d0 <__RW_SIZE__+0xc02f48>
    34cc:	ea000003 	b	34e0 <__RW_SIZE__+0x2f58>
    34d0:	50080053 	andpl	r0, r8, r3, asr r0
    34d4:	01000010 	tsteq	r0, r0, lsl r0
    34d8:	16370146 	ldrtne	r0, [r7], -r6, asr #2
    34dc:	c61b0000 	ldrgt	r0, [fp], -r0
    34e0:	08000003 	stmdaeq	r0, {r0, r1}
    34e4:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    34e8:	00540200 	subseq	r0, r4, r0, lsl #4
    34ec:	00107008 	andseq	r7, r0, r8
    34f0:	1bac0100 	blne	feb038f8 <MSP_BASE+0xdeafe8f8>
    34f4:	00000307 	andeq	r0, r0, r7, lsl #6
    34f8:	30000008 	andcc	r0, r0, r8
    34fc:	000003a2 	andeq	r0, r0, r2, lsr #7
    3500:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
    3504:	00001088 	andeq	r1, r0, r8, lsl #1
    3508:	68014801 	stmdavs	r1, {r0, fp, lr}
    350c:	21000016 	tstcs	r0, r6, lsl r0
    3510:	000003ae 	andeq	r0, r0, lr, lsr #7
    3514:	02fb1841 	rscseq	r1, fp, #4259840	; 0x410000
    3518:	544c0000 	strbpl	r0, [ip], #-0
    351c:	10a80800 	adcne	r0, r8, r0, lsl #16
    3520:	a4010000 	strge	r0, [r1], #-0
    3524:	00030721 	andeq	r0, r3, r1, lsr #14
    3528:	00004100 	andeq	r4, r0, r0, lsl #2
    352c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3530:	00547e00 	subseq	r7, r4, r0, lsl #28
    3534:	0010c008 	andseq	ip, r0, r8
    3538:	01490100 	mrseq	r0, (UNDEF: 89)
    353c:	00001699 	muleq	r0, r9, r6
    3540:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3544:	fb181200 	blx	607d4e <__RW_SIZE__+0x6077c6>
    3548:	96000002 	strls	r0, [r0], -r2
    354c:	e0080054 	and	r0, r8, r4, asr r0
    3550:	01000010 	tsteq	r0, r0, lsl r0
    3554:	03071bac 	movweq	r1, #31660	; 0x7bac
    3558:	00120000 	andseq	r0, r2, r0
    355c:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3560:	54c80000 	strbpl	r0, [r8], #0
    3564:	10f80800 	rscsne	r0, r8, r0, lsl #16
    3568:	4b010000 	blmi	43570 <__RW_SIZE__+0x42fe8>
    356c:	0016ca01 	andseq	ip, r6, r1, lsl #20
    3570:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3574:	18450000 	stmdane	r5, {}^	; <UNPREDICTABLE>
    3578:	000002fb 	strdeq	r0, [r0], -fp
    357c:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
    3580:	00001118 	andeq	r1, r0, r8, lsl r1
    3584:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    3588:	45000003 	strmi	r0, [r0, #-3]
    358c:	ba300000 	blt	c03594 <__RW_SIZE__+0xc0300c>
    3590:	12000003 	andne	r0, r0, #3
    3594:	30080055 	andcc	r0, r8, r5, asr r0
    3598:	01000011 	tsteq	r0, r1, lsl r0
    359c:	16fb014c 	ldrbtne	r0, [fp], ip, asr #2
    35a0:	c61b0000 	ldrgt	r0, [fp], -r0
    35a4:	08000003 	stmdaeq	r0, {r0, r1}
    35a8:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    35ac:	00552a00 	subseq	r2, r5, r0, lsl #20
    35b0:	00115008 	andseq	r5, r1, r8
    35b4:	1bac0100 	blne	feb039bc <MSP_BASE+0xdeafe9bc>
    35b8:	00000307 	andeq	r0, r0, r7, lsl #6
    35bc:	30000008 	andcc	r0, r0, r8
    35c0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    35c4:	0800555c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip, lr}
    35c8:	00001168 	andeq	r1, r0, r8, ror #2
    35cc:	2c014d01 	stccs	13, cr4, [r1], {1}
    35d0:	1b000017 	blne	3634 <__RW_SIZE__+0x30ac>
    35d4:	000003c6 	andeq	r0, r0, r6, asr #7
    35d8:	02fb1826 	rscseq	r1, fp, #2490368	; 0x260000
    35dc:	55740000 	ldrbpl	r0, [r4, #-0]!
    35e0:	11880800 	orrne	r0, r8, r0, lsl #16
    35e4:	ac010000 	stcge	0, cr0, [r1], {-0}
    35e8:	0003071b 	andeq	r0, r3, fp, lsl r7
    35ec:	00002600 	andeq	r2, r0, r0, lsl #12
    35f0:	0003a230 	andeq	sl, r3, r0, lsr r2
    35f4:	0055a600 	subseq	sl, r5, r0, lsl #12
    35f8:	0011a008 	andseq	sl, r1, r8
    35fc:	014f0100 	mrseq	r0, (UNDEF: 95)
    3600:	0000175d 	andeq	r1, r0, sp, asr r7
    3604:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3608:	fb184700 	blx	615212 <__RW_SIZE__+0x614c8a>
    360c:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    3610:	c0080055 	andgt	r0, r8, r5, asr r0
    3614:	01000011 	tsteq	r0, r1, lsl r0
    3618:	030721a4 	movweq	r2, #29092	; 0x71a4
    361c:	00470000 	subeq	r0, r7, r0
    3620:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3624:	55f00000 	ldrbpl	r0, [r0, #0]!
    3628:	11d80800 	bicsne	r0, r8, r0, lsl #16
    362c:	50010000 	andpl	r0, r1, r0
    3630:	00179001 	andseq	r9, r7, r1
    3634:	03c62100 	biceq	r2, r6, #0, 2
    3638:	7fb70000 	svcvc	0x00b70000
    363c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3640:	00560800 	subseq	r0, r6, r0, lsl #16
    3644:	0011f808 	andseq	pc, r1, r8, lsl #16
    3648:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    364c:	00000307 	andeq	r0, r0, r7, lsl #6
    3650:	00007fb7 			; <UNDEFINED> instruction: 0x00007fb7
    3654:	0003a230 	andeq	sl, r3, r0, lsr r2
    3658:	00563a00 	subseq	r3, r6, r0, lsl #20
    365c:	00121008 	andseq	r1, r2, r8
    3660:	01530100 	cmpeq	r3, r0, lsl #2
    3664:	000017c3 	andeq	r1, r0, r3, asr #15
    3668:	0003ae21 	andeq	sl, r3, r1, lsr #28
    366c:	187fb800 	ldmdane	pc!, {fp, ip, sp, pc}^	; <UNPREDICTABLE>
    3670:	000002fb 	strdeq	r0, [r0], -fp
    3674:	08005652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip, lr}
    3678:	00001230 	andeq	r1, r0, r0, lsr r2
    367c:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    3680:	b8000003 	stmdalt	r0, {r0, r1}
    3684:	3000007f 	andcc	r0, r0, pc, ror r0
    3688:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    368c:	08005684 	stmdaeq	r0, {r2, r7, r9, sl, ip, lr}
    3690:	00001248 	andeq	r1, r0, r8, asr #4
    3694:	f4015401 	vst3.8	{d5-d7}, [r1], r1
    3698:	1b000017 	blne	36fc <__RW_SIZE__+0x3174>
    369c:	000003c6 	andeq	r0, r0, r6, asr #7
    36a0:	02fb180f 	rscseq	r1, fp, #983040	; 0xf0000
    36a4:	569c0000 	ldrpl	r0, [ip], r0
    36a8:	12680800 	rsbne	r0, r8, #0, 16
    36ac:	ac010000 	stcge	0, cr0, [r1], {-0}
    36b0:	0003071b 	andeq	r0, r3, fp, lsl r7
    36b4:	00000f00 	andeq	r0, r0, r0, lsl #30
    36b8:	0003a230 	andeq	sl, r3, r0, lsr r2
    36bc:	0056ce00 	subseq	ip, r6, r0, lsl #28
    36c0:	00128008 	andseq	r8, r2, r8
    36c4:	01550100 	cmpeq	r5, r0, lsl #2
    36c8:	00001827 	andeq	r1, r0, r7, lsr #16
    36cc:	0003ae21 	andeq	sl, r3, r1, lsr #28
    36d0:	187fba00 	ldmdane	pc!, {r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    36d4:	000002fb 	strdeq	r0, [r0], -fp
    36d8:	080056e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, ip, lr}
    36dc:	000012a0 	andeq	r1, r0, r0, lsr #5
    36e0:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    36e4:	ba000003 	blt	36f8 <__RW_SIZE__+0x3170>
    36e8:	3000007f 	andcc	r0, r0, pc, ror r0
    36ec:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    36f0:	08005718 	stmdaeq	r0, {r3, r4, r8, r9, sl, ip, lr}
    36f4:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    36f8:	58015601 	stmdapl	r1, {r0, r9, sl, ip, lr}
    36fc:	1b000018 	blne	3764 <__RW_SIZE__+0x31dc>
    3700:	000003c6 	andeq	r0, r0, r6, asr #7
    3704:	02fb180f 	rscseq	r1, fp, #983040	; 0xf0000
    3708:	57300000 	ldrpl	r0, [r0, -r0]!
    370c:	12d80800 	sbcsne	r0, r8, #0, 16
    3710:	ac010000 	stcge	0, cr0, [r1], {-0}
    3714:	0003071b 	andeq	r0, r3, fp, lsl r7
    3718:	00000f00 	andeq	r0, r0, r0, lsl #30
    371c:	0003a230 	andeq	sl, r3, r0, lsr r2
    3720:	00576200 	subseq	r6, r7, r0, lsl #4
    3724:	0012f008 	andseq	pc, r2, r8
    3728:	01570100 	cmpeq	r7, r0, lsl #2
    372c:	0000188b 	andeq	r1, r0, fp, lsl #17
    3730:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3734:	187fbb00 	ldmdane	pc!, {r8, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    3738:	000002fb 	strdeq	r0, [r0], -fp
    373c:	0800577a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, ip, lr}
    3740:	00001310 	andeq	r1, r0, r0, lsl r3
    3744:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    3748:	bb000003 	bllt	375c <__RW_SIZE__+0x31d4>
    374c:	3000007f 	andcc	r0, r0, pc, ror r0
    3750:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3754:	080057ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, lr}
    3758:	00001328 	andeq	r1, r0, r8, lsr #6
    375c:	bc015801 	stclt	8, cr5, [r1], {1}
    3760:	21000018 	tstcs	r0, r8, lsl r0
    3764:	000003c6 	andeq	r0, r0, r6, asr #7
    3768:	02fb187f 	rscseq	r1, fp, #8323072	; 0x7f0000
    376c:	57c40000 	strbpl	r0, [r4, r0]
    3770:	13480800 	movtne	r0, #34816	; 0x8800
    3774:	ac010000 	stcge	0, cr0, [r1], {-0}
    3778:	00030721 	andeq	r0, r3, r1, lsr #14
    377c:	00007f00 	andeq	r7, r0, r0, lsl #30
    3780:	0003a230 	andeq	sl, r3, r0, lsr r2
    3784:	0057f600 	subseq	pc, r7, r0, lsl #12
    3788:	00136008 	andseq	r6, r3, r8
    378c:	01590100 	cmpeq	r9, r0, lsl #2
    3790:	000018ef 	andeq	r1, r0, pc, ror #17
    3794:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3798:	187fbe00 	ldmdane	pc!, {r9, sl, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    379c:	000002fb 	strdeq	r0, [r0], -fp
    37a0:	0800580e 	stmdaeq	r0, {r1, r2, r3, fp, ip, lr}
    37a4:	00001380 	andeq	r1, r0, r0, lsl #7
    37a8:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    37ac:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
    37b0:	3000007f 	andcc	r0, r0, pc, ror r0
    37b4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    37b8:	08005840 	stmdaeq	r0, {r6, fp, ip, lr}
    37bc:	00001398 	muleq	r0, r8, r3
    37c0:	20015a01 	andcs	r5, r1, r1, lsl #20
    37c4:	21000019 	tstcs	r0, r9, lsl r0
    37c8:	000003c6 	andeq	r0, r0, r6, asr #7
    37cc:	02fb187f 	rscseq	r1, fp, #8323072	; 0x7f0000
    37d0:	58580000 	ldmdapl	r8, {}^	; <UNPREDICTABLE>
    37d4:	13b80800 			; <UNDEFINED> instruction: 0x13b80800
    37d8:	ac010000 	stcge	0, cr0, [r1], {-0}
    37dc:	00030721 	andeq	r0, r3, r1, lsr #14
    37e0:	00007f00 	andeq	r7, r0, r0, lsl #30
    37e4:	0003a230 	andeq	sl, r3, r0, lsr r2
    37e8:	00588a00 	subseq	r8, r8, r0, lsl #20
    37ec:	0013d008 	andseq	sp, r3, r8
    37f0:	015d0100 	cmpeq	sp, r0, lsl #2
    37f4:	00001951 	andeq	r1, r0, r1, asr r9
    37f8:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    37fc:	fb183600 	blx	611006 <__RW_SIZE__+0x610a7e>
    3800:	a2000002 	andge	r0, r0, #2
    3804:	f0080058 			; <UNDEFINED> instruction: 0xf0080058
    3808:	01000013 	tsteq	r0, r3, lsl r0
    380c:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    3810:	00360000 	eorseq	r0, r6, r0
    3814:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3818:	58d40000 	ldmpl	r4, {}^	; <UNPREDICTABLE>
    381c:	14080800 	strne	r0, [r8], #-2048	; 0xfffff800
    3820:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3824:	00198201 	andseq	r8, r9, r1, lsl #4
    3828:	03c61b00 	biceq	r1, r6, #0, 22
    382c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    3830:	000002fb 	strdeq	r0, [r0], -fp
    3834:	080058ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, lr}
    3838:	00001428 	andeq	r1, r0, r8, lsr #8
    383c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3840:	08000003 	stmdaeq	r0, {r0, r1}
    3844:	a2300000 	eorsge	r0, r0, #0
    3848:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    384c:	40080059 	andmi	r0, r8, r9, asr r0
    3850:	01000014 	tsteq	r0, r4, lsl r0
    3854:	19b3015f 	ldmibne	r3!, {r0, r1, r2, r3, r4, r6, r8}
    3858:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    385c:	3a000003 	bcc	3870 <__RW_SIZE__+0x32e8>
    3860:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3864:	00593600 	subseq	r3, r9, r0, lsl #12
    3868:	00146008 	andseq	r6, r4, r8
    386c:	1ba40100 	blne	fe903c74 <MSP_BASE+0xde8fec74>
    3870:	00000307 	andeq	r0, r0, r7, lsl #6
    3874:	3000003a 	andcc	r0, r0, sl, lsr r0
    3878:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    387c:	08005968 	stmdaeq	r0, {r3, r5, r6, r8, fp, ip, lr}
    3880:	00001478 	andeq	r1, r0, r8, ror r4
    3884:	e4016001 	str	r6, [r1], #-1
    3888:	1b000019 	blne	38f4 <__RW_SIZE__+0x336c>
    388c:	000003c6 	andeq	r0, r0, r6, asr #7
    3890:	02fb1855 	rscseq	r1, fp, #5570560	; 0x550000
    3894:	59800000 	stmibpl	r0, {}	; <UNPREDICTABLE>
    3898:	14980800 	ldrne	r0, [r8], #2048	; 0x800
    389c:	ac010000 	stcge	0, cr0, [r1], {-0}
    38a0:	0003071b 	andeq	r0, r3, fp, lsl r7
    38a4:	00005500 	andeq	r5, r0, r0, lsl #10
    38a8:	0003a230 	andeq	sl, r3, r0, lsr r2
    38ac:	0059b200 	subseq	fp, r9, r0, lsl #4
    38b0:	0014b008 	andseq	fp, r4, r8
    38b4:	01610100 	cmneq	r1, r0, lsl #2
    38b8:	00001a17 	andeq	r1, r0, r7, lsl sl
    38bc:	0003ae21 	andeq	sl, r3, r1, lsr #28
    38c0:	187fb100 	ldmdane	pc!, {r8, ip, sp, pc}^	; <UNPREDICTABLE>
    38c4:	000002fb 	strdeq	r0, [r0], -fp
    38c8:	080059ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, fp, ip, lr}
    38cc:	000014d0 	ldrdeq	r1, [r0], -r0
    38d0:	0721a401 	streq	sl, [r1, -r1, lsl #8]!
    38d4:	b1000003 	tstlt	r0, r3
    38d8:	3000007f 	andcc	r0, r0, pc, ror r0
    38dc:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    38e0:	08005a02 	stmdaeq	r0, {r1, r9, fp, ip, lr}
    38e4:	000014e8 	andeq	r1, r0, r8, ror #9
    38e8:	48016201 	stmdami	r1, {r0, r9, sp, lr}
    38ec:	1b00001a 	blne	395c <__RW_SIZE__+0x33d4>
    38f0:	000003c6 	andeq	r0, r0, r6, asr #7
    38f4:	02fb1800 	rscseq	r1, fp, #0, 16
    38f8:	5a1a0000 	bpl	683900 <__RW_SIZE__+0x683378>
    38fc:	15080800 	strne	r0, [r8, #-2048]	; 0xfffff800
    3900:	ac010000 	stcge	0, cr0, [r1], {-0}
    3904:	0003071b 	andeq	r0, r3, fp, lsl r7
    3908:	00000000 	andeq	r0, r0, r0
    390c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3910:	005a4a00 	subseq	r4, sl, r0, lsl #20
    3914:	00152008 	andseq	r2, r5, r8
    3918:	01630100 	cmneq	r3, r0, lsl #2
    391c:	00001a79 	andeq	r1, r0, r9, ror sl
    3920:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3924:	fb181a00 	blx	60a12e <__RW_SIZE__+0x609ba6>
    3928:	62000002 	andvs	r0, r0, #2
    392c:	4008005a 	andmi	r0, r8, sl, asr r0
    3930:	01000015 	tsteq	r0, r5, lsl r0
    3934:	03071bac 	movweq	r1, #31660	; 0x7bac
    3938:	001a0000 	andseq	r0, sl, r0
    393c:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    3940:	5a940000 	bpl	fe503948 <MSP_BASE+0xde4fe948>
    3944:	15580800 	ldrbne	r0, [r8, #-2048]	; 0xfffff800
    3948:	65010000 	strvs	r0, [r1, #-0]
    394c:	001aac01 	andseq	sl, sl, r1, lsl #24
    3950:	03ae2100 			; <UNDEFINED> instruction: 0x03ae2100
    3954:	7fb60000 	svcvc	0x00b60000
    3958:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    395c:	005aac00 	subseq	sl, sl, r0, lsl #24
    3960:	00157808 	andseq	r7, r5, r8, lsl #16
    3964:	21a40100 			; <UNDEFINED> instruction: 0x21a40100
    3968:	00000307 	andeq	r0, r0, r7, lsl #6
    396c:	00007fb6 			; <UNDEFINED> instruction: 0x00007fb6
    3970:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3974:	005ade00 	subseq	sp, sl, r0, lsl #28
    3978:	00159008 	andseq	r9, r5, r8
    397c:	01660100 	cmneq	r6, r0, lsl #2
    3980:	00001add 	ldrdeq	r1, [r0], -sp
    3984:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3988:	fb180a00 	blx	606192 <__RW_SIZE__+0x605c0a>
    398c:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    3990:	b008005a 	andlt	r0, r8, sl, asr r0
    3994:	01000015 	tsteq	r0, r5, lsl r0
    3998:	03071bac 	movweq	r1, #31660	; 0x7bac
    399c:	000a0000 	andeq	r0, sl, r0
    39a0:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    39a4:	5b280000 	blpl	a039ac <__RW_SIZE__+0xa03424>
    39a8:	15c80800 	strbne	r0, [r8, #2048]	; 0x800
    39ac:	67010000 	strvs	r0, [r1, -r0]
    39b0:	001b1001 	andseq	r1, fp, r1
    39b4:	03c62100 	biceq	r2, r6, #0, 2
    39b8:	7fa20000 	svcvc	0x00a20000
    39bc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    39c0:	005b4000 	subseq	r4, fp, r0
    39c4:	0015e808 	andseq	lr, r5, r8, lsl #16
    39c8:	21ac0100 			; <UNDEFINED> instruction: 0x21ac0100
    39cc:	00000307 	andeq	r0, r0, r7, lsl #6
    39d0:	00007fa2 	andeq	r7, r0, r2, lsr #31
    39d4:	0003a230 	andeq	sl, r3, r0, lsr r2
    39d8:	005b7200 	subseq	r7, fp, r0, lsl #4
    39dc:	00160008 	andseq	r0, r6, r8
    39e0:	01680100 	cmneq	r8, r0, lsl #2
    39e4:	00001b41 	andeq	r1, r0, r1, asr #22
    39e8:	0003ae21 	andeq	sl, r3, r1, lsr #28
    39ec:	fb187200 	blx	6201f6 <__RW_SIZE__+0x61fc6e>
    39f0:	8a000002 	bhi	3a00 <__RW_SIZE__+0x3478>
    39f4:	2008005b 	andcs	r0, r8, fp, asr r0
    39f8:	01000016 	tsteq	r0, r6, lsl r0
    39fc:	030721a4 	movweq	r2, #29092	; 0x71a4
    3a00:	00720000 	rsbseq	r0, r2, r0
    3a04:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3a08:	5bc20000 	blpl	ff083a10 <MSP_BASE+0xdf07ea10>
    3a0c:	16380800 	ldrtne	r0, [r8], -r0, lsl #16
    3a10:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3a14:	001b7201 	andseq	r7, fp, r1, lsl #4
    3a18:	03c61b00 	biceq	r1, r6, #0, 22
    3a1c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3a20:	000002fb 	strdeq	r0, [r0], -fp
    3a24:	08005bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip, lr}
    3a28:	00001658 	andeq	r1, r0, r8, asr r6
    3a2c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3a30:	00000003 	andeq	r0, r0, r3
    3a34:	a2300000 	eorsge	r0, r0, #0
    3a38:	0a000003 	beq	3a4c <__RW_SIZE__+0x34c4>
    3a3c:	7008005c 	andvc	r0, r8, ip, asr r0
    3a40:	01000016 	tsteq	r0, r6, lsl r0
    3a44:	1ba3016a 	blne	fe8c3ff4 <MSP_BASE+0xde8beff4>
    3a48:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    3a4c:	26000003 	strcs	r0, [r0], -r3
    3a50:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3a54:	005c2200 	subseq	r2, ip, r0, lsl #4
    3a58:	00169008 	andseq	r9, r6, r8
    3a5c:	1ba40100 	blne	fe903e64 <MSP_BASE+0xde8fee64>
    3a60:	00000307 	andeq	r0, r0, r7, lsl #6
    3a64:	30000026 	andcc	r0, r0, r6, lsr #32
    3a68:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3a6c:	08005c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip, lr}
    3a70:	000016a8 	andeq	r1, r0, r8, lsr #13
    3a74:	d4016b01 	strle	r6, [r1], #-2817	; 0xfffff4ff
    3a78:	1b00001b 	blne	3aec <__RW_SIZE__+0x3564>
    3a7c:	000003c6 	andeq	r0, r0, r6, asr #7
    3a80:	02fb1801 	rscseq	r1, fp, #65536	; 0x10000
    3a84:	5c6c0000 	stclpl	0, cr0, [ip], #-0
    3a88:	16c80800 	strbne	r0, [r8], r0, lsl #16
    3a8c:	ac010000 	stcge	0, cr0, [r1], {-0}
    3a90:	0003071b 	andeq	r0, r3, fp, lsl r7
    3a94:	00000100 	andeq	r0, r0, r0, lsl #2
    3a98:	0003a230 	andeq	sl, r3, r0, lsr r2
    3a9c:	005c9e00 	subseq	r9, ip, r0, lsl #28
    3aa0:	0016e008 	andseq	lr, r6, r8
    3aa4:	016c0100 	cmneq	ip, r0, lsl #2
    3aa8:	00001c05 	andeq	r1, r0, r5, lsl #24
    3aac:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3ab0:	fb186000 	blx	61baba <__RW_SIZE__+0x61b532>
    3ab4:	b6000002 	strlt	r0, [r0], -r2
    3ab8:	0008005c 	andeq	r0, r8, ip, asr r0
    3abc:	01000017 	tsteq	r0, r7, lsl r0
    3ac0:	030721a4 	movweq	r2, #29092	; 0x71a4
    3ac4:	00600000 	rsbeq	r0, r0, r0
    3ac8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3acc:	5ce80000 	stclpl	0, cr0, [r8]
    3ad0:	17180800 	ldrne	r0, [r8, -r0, lsl #16]
    3ad4:	6d010000 	stcvs	0, cr0, [r1, #-0]
    3ad8:	001c3601 	andseq	r3, ip, r1, lsl #12
    3adc:	03c61b00 	biceq	r1, r6, #0, 22
    3ae0:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    3ae4:	000002fb 	strdeq	r0, [r0], -fp
    3ae8:	08005d00 	stmdaeq	r0, {r8, sl, fp, ip, lr}
    3aec:	00001738 	andeq	r1, r0, r8, lsr r7
    3af0:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3af4:	0f000003 	svceq	0x00000003
    3af8:	ba300000 	blt	c03b00 <__RW_SIZE__+0xc03578>
    3afc:	32000003 	andcc	r0, r0, #3
    3b00:	5008005d 	andpl	r0, r8, sp, asr r0
    3b04:	01000017 	tsteq	r0, r7, lsl r0
    3b08:	1c67016e 	stfnee	f0, [r7], #-440	; 0xfffffe48
    3b0c:	c61b0000 	ldrgt	r0, [fp], -r0
    3b10:	1d000003 	stcne	0, cr0, [r0, #-12]
    3b14:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3b18:	005d4a00 	subseq	r4, sp, r0, lsl #20
    3b1c:	00177008 	andseq	r7, r7, r8
    3b20:	1bac0100 	blne	feb03f28 <MSP_BASE+0xdeafef28>
    3b24:	00000307 	andeq	r0, r0, r7, lsl #6
    3b28:	3000001d 	andcc	r0, r0, sp, lsl r0
    3b2c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3b30:	08005d7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
    3b34:	00001788 	andeq	r1, r0, r8, lsl #15
    3b38:	98016f01 	stmdals	r1, {r0, r8, r9, sl, fp, sp, lr}
    3b3c:	1b00001c 	blne	3bb4 <__RW_SIZE__+0x362c>
    3b40:	000003c6 	andeq	r0, r0, r6, asr #7
    3b44:	02fb181a 	rscseq	r1, fp, #1703936	; 0x1a0000
    3b48:	5d940000 	ldcpl	0, cr0, [r4]
    3b4c:	17a80800 	strne	r0, [r8, r0, lsl #16]!
    3b50:	ac010000 	stcge	0, cr0, [r1], {-0}
    3b54:	0003071b 	andeq	r0, r3, fp, lsl r7
    3b58:	00001a00 	andeq	r1, r0, r0, lsl #20
    3b5c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3b60:	005dc600 	subseq	ip, sp, r0, lsl #12
    3b64:	0017c008 	andseq	ip, r7, r8
    3b68:	01700100 	cmneq	r0, r0, lsl #2
    3b6c:	00001cc9 	andeq	r1, r0, r9, asr #25
    3b70:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3b74:	fb180a00 	blx	60637e <__RW_SIZE__+0x605df6>
    3b78:	de000002 	cdple	0, 0, cr0, cr0, cr2, {0}
    3b7c:	e008005d 	and	r0, r8, sp, asr r0
    3b80:	01000017 	tsteq	r0, r7, lsl r0
    3b84:	03071bac 	movweq	r1, #31660	; 0x7bac
    3b88:	000a0000 	andeq	r0, sl, r0
    3b8c:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3b90:	5e100000 	cdppl	0, 1, cr0, cr0, cr0, {0}
    3b94:	17f80800 	ldrbne	r0, [r8, r0, lsl #16]!
    3b98:	71010000 	mrsvc	r0, (UNDEF: 1)
    3b9c:	001cfa01 	andseq	pc, ip, r1, lsl #20
    3ba0:	03c61b00 	biceq	r1, r6, #0, 22
    3ba4:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    3ba8:	000002fb 	strdeq	r0, [r0], -fp
    3bac:	08005e28 	stmdaeq	r0, {r3, r5, r9, sl, fp, ip, lr}
    3bb0:	00001818 	andeq	r1, r0, r8, lsl r8
    3bb4:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3bb8:	0d000003 	stceq	0, cr0, [r0, #-12]
    3bbc:	ba300000 	blt	c03bc4 <__RW_SIZE__+0xc0363c>
    3bc0:	5a000003 	bpl	3bd4 <__RW_SIZE__+0x364c>
    3bc4:	3008005e 	andcc	r0, r8, lr, asr r0
    3bc8:	01000018 	tsteq	r0, r8, lsl r0
    3bcc:	1d2b0172 	stfnes	f0, [fp, #-456]!	; 0xfffffe38
    3bd0:	c61b0000 	ldrgt	r0, [fp], -r0
    3bd4:	07000003 	streq	r0, [r0, -r3]
    3bd8:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3bdc:	005e7200 	subseq	r7, lr, r0, lsl #4
    3be0:	00185008 	andseq	r5, r8, r8
    3be4:	1bac0100 	blne	feb03fec <MSP_BASE+0xdeafefec>
    3be8:	00000307 	andeq	r0, r0, r7, lsl #6
    3bec:	30000007 	andcc	r0, r0, r7
    3bf0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3bf4:	08005ea4 	stmdaeq	r0, {r2, r5, r7, r9, sl, fp, ip, lr}
    3bf8:	00001868 	andeq	r1, r0, r8, ror #16
    3bfc:	5c017301 	stcpl	3, cr7, [r1], {1}
    3c00:	1b00001d 	blne	3c7c <__RW_SIZE__+0x36f4>
    3c04:	000003c6 	andeq	r0, r0, r6, asr #7
    3c08:	02fb1849 	rscseq	r1, fp, #4784128	; 0x490000
    3c0c:	5ebc0000 	cdppl	0, 11, cr0, cr12, cr0, {0}
    3c10:	18880800 	stmne	r8, {fp}
    3c14:	ac010000 	stcge	0, cr0, [r1], {-0}
    3c18:	0003071b 	andeq	r0, r3, fp, lsl r7
    3c1c:	00004900 	andeq	r4, r0, r0, lsl #18
    3c20:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3c24:	005eee00 	subseq	lr, lr, r0, lsl #28
    3c28:	0018a008 	andseq	sl, r8, r8
    3c2c:	01740100 	cmneq	r4, r0, lsl #2
    3c30:	00001d8d 	andeq	r1, r0, sp, lsl #27
    3c34:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3c38:	fb186600 	blx	61d442 <__RW_SIZE__+0x61ceba>
    3c3c:	06000002 	streq	r0, [r0], -r2
    3c40:	c008005f 	andgt	r0, r8, pc, asr r0
    3c44:	01000018 	tsteq	r0, r8, lsl r0
    3c48:	03071bac 	movweq	r1, #31660	; 0x7bac
    3c4c:	00660000 	rsbeq	r0, r6, r0
    3c50:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3c54:	5f380000 	svcpl	0x00380000
    3c58:	18d80800 	ldmne	r8, {fp}^
    3c5c:	75010000 	strvc	r0, [r1, #-0]
    3c60:	001dbe01 	andseq	fp, sp, r1, lsl #28
    3c64:	03c61b00 	biceq	r1, r6, #0, 22
    3c68:	183b0000 	ldmdane	fp!, {}	; <UNPREDICTABLE>
    3c6c:	000002fb 	strdeq	r0, [r0], -fp
    3c70:	08005f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, ip, lr}
    3c74:	000018f8 	strdeq	r1, [r0], -r8
    3c78:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3c7c:	3b000003 	blcc	3c90 <__RW_SIZE__+0x3708>
    3c80:	ba300000 	blt	c03c88 <__RW_SIZE__+0xc03700>
    3c84:	82000003 	andhi	r0, r0, #3
    3c88:	1008005f 	andne	r0, r8, pc, asr r0
    3c8c:	01000019 	tsteq	r0, r9, lsl r0
    3c90:	1def0176 	stfnee	f0, [pc, #472]!	; 3e70 <__RW_SIZE__+0x38e8>
    3c94:	c61b0000 	ldrgt	r0, [fp], -r0
    3c98:	07000003 	streq	r0, [r0, -r3]
    3c9c:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3ca0:	005f9a00 	subseq	r9, pc, r0, lsl #20
    3ca4:	00193008 	andseq	r3, r9, r8
    3ca8:	1bac0100 	blne	feb040b0 <MSP_BASE+0xdeaff0b0>
    3cac:	00000307 	andeq	r0, r0, r7, lsl #6
    3cb0:	30000007 	andcc	r0, r0, r7
    3cb4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3cb8:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
    3cbc:	00001948 	andeq	r1, r0, r8, asr #18
    3cc0:	20017701 	andcs	r7, r1, r1, lsl #14
    3cc4:	1b00001e 	blne	3d44 <__RW_SIZE__+0x37bc>
    3cc8:	000003c6 	andeq	r0, r0, r6, asr #7
    3ccc:	02fb1811 	rscseq	r1, fp, #1114112	; 0x110000
    3cd0:	5fe40000 	svcpl	0x00e40000
    3cd4:	19680800 	stmdbne	r8!, {fp}^
    3cd8:	ac010000 	stcge	0, cr0, [r1], {-0}
    3cdc:	0003071b 	andeq	r0, r3, fp, lsl r7
    3ce0:	00001100 	andeq	r1, r0, r0, lsl #2
    3ce4:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3ce8:	00601600 	rsbeq	r1, r0, r0, lsl #12
    3cec:	00198008 	andseq	r8, r9, r8
    3cf0:	01780100 	cmneq	r8, r0, lsl #2
    3cf4:	00001e51 	andeq	r1, r0, r1, asr lr
    3cf8:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3cfc:	fb180100 	blx	604106 <__RW_SIZE__+0x603b7e>
    3d00:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    3d04:	a0080060 	andge	r0, r8, r0, rrx
    3d08:	01000019 	tsteq	r0, r9, lsl r0
    3d0c:	03071bac 	movweq	r1, #31660	; 0x7bac
    3d10:	00010000 	andeq	r0, r1, r0
    3d14:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3d18:	60600000 	rsbvs	r0, r0, r0
    3d1c:	19b80800 	ldmibne	r8!, {fp}
    3d20:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    3d24:	001e8201 	andseq	r8, lr, r1, lsl #4
    3d28:	03c61b00 	biceq	r1, r6, #0, 22
    3d2c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3d30:	000002fb 	strdeq	r0, [r0], -fp
    3d34:	08006078 	stmdaeq	r0, {r3, r4, r5, r6, sp, lr}
    3d38:	000019d8 	ldrdeq	r1, [r0], -r8
    3d3c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3d40:	09000003 	stmdbeq	r0, {r0, r1}
    3d44:	ba300000 	blt	c03d4c <__RW_SIZE__+0xc037c4>
    3d48:	aa000003 	bge	3d5c <__RW_SIZE__+0x37d4>
    3d4c:	f0080060 			; <UNDEFINED> instruction: 0xf0080060
    3d50:	01000019 	tsteq	r0, r9, lsl r0
    3d54:	1eb3017a 	mrcne	1, 5, r0, cr3, cr10, {3}
    3d58:	c61b0000 	ldrgt	r0, [fp], -r0
    3d5c:	05000003 	streq	r0, [r0, #-3]
    3d60:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3d64:	0060c200 	rsbeq	ip, r0, r0, lsl #4
    3d68:	001a1008 	andseq	r1, sl, r8
    3d6c:	1bac0100 	blne	feb04174 <MSP_BASE+0xdeaff174>
    3d70:	00000307 	andeq	r0, r0, r7, lsl #6
    3d74:	30000005 	andcc	r0, r0, r5
    3d78:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3d7c:	080060f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sp, lr}
    3d80:	00001a28 	andeq	r1, r0, r8, lsr #20
    3d84:	e4017b01 	str	r7, [r1], #-2817	; 0xfffff4ff
    3d88:	1b00001e 	blne	3e08 <__RW_SIZE__+0x3880>
    3d8c:	000003c6 	andeq	r0, r0, r6, asr #7
    3d90:	02fb1804 	rscseq	r1, fp, #4, 16	; 0x40000
    3d94:	610c0000 	mrsvs	r0, (UNDEF: 12)
    3d98:	1a480800 	bne	1205da0 <__RW_SIZE__+0x1205818>
    3d9c:	ac010000 	stcge	0, cr0, [r1], {-0}
    3da0:	0003071b 	andeq	r0, r3, fp, lsl r7
    3da4:	00000400 	andeq	r0, r0, r0, lsl #8
    3da8:	0003a230 	andeq	sl, r3, r0, lsr r2
    3dac:	00613e00 	rsbeq	r3, r1, r0, lsl #28
    3db0:	001a6008 	andseq	r6, sl, r8
    3db4:	017c0100 	cmneq	ip, r0, lsl #2
    3db8:	00001f15 	andeq	r1, r0, r5, lsl pc
    3dbc:	0003ae21 	andeq	sl, r3, r1, lsr #28
    3dc0:	fb186100 	blx	61c1ca <__RW_SIZE__+0x61bc42>
    3dc4:	56000002 	strpl	r0, [r0], -r2
    3dc8:	80080061 	andhi	r0, r8, r1, rrx
    3dcc:	0100001a 	tsteq	r0, sl, lsl r0
    3dd0:	030721a4 	movweq	r2, #29092	; 0x71a4
    3dd4:	00610000 	rsbeq	r0, r1, r0
    3dd8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3ddc:	618e0000 	orrvs	r0, lr, r0
    3de0:	1a980800 	bne	fe605de8 <MSP_BASE+0xde600de8>
    3de4:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3de8:	001f4601 	andseq	r4, pc, r1, lsl #12
    3dec:	03c61b00 	biceq	r1, r6, #0, 22
    3df0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3df4:	000002fb 	strdeq	r0, [r0], -fp
    3df8:	080061a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sp, lr}
    3dfc:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    3e00:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3e04:	00000003 	andeq	r0, r0, r3
    3e08:	ba300000 	blt	c03e10 <__RW_SIZE__+0xc03888>
    3e0c:	d6000003 	strle	r0, [r0], -r3
    3e10:	d0080061 	andle	r0, r8, r1, rrx
    3e14:	0100001a 	tsteq	r0, sl, lsl r0
    3e18:	1f77017e 	svcne	0x0077017e
    3e1c:	c61b0000 	ldrgt	r0, [fp], -r0
    3e20:	18000003 	stmdane	r0, {r0, r1}
    3e24:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3e28:	0061ee00 	rsbeq	lr, r1, r0, lsl #28
    3e2c:	001af008 	andseq	pc, sl, r8
    3e30:	1bac0100 	blne	feb04238 <MSP_BASE+0xdeaff238>
    3e34:	00000307 	andeq	r0, r0, r7, lsl #6
    3e38:	30000018 	andcc	r0, r0, r8, lsl r0
    3e3c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3e40:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
    3e44:	00001b08 	andeq	r1, r0, r8, lsl #22
    3e48:	a8017f01 	stmdage	r1, {r0, r8, r9, sl, fp, ip, sp, lr}
    3e4c:	1b00001f 	blne	3ed0 <__RW_SIZE__+0x3948>
    3e50:	000003c6 	andeq	r0, r0, r6, asr #7
    3e54:	02fb181d 	rscseq	r1, fp, #1900544	; 0x1d0000
    3e58:	62380000 	eorsvs	r0, r8, #0
    3e5c:	1b280800 	blne	a05e64 <__RW_SIZE__+0xa058dc>
    3e60:	ac010000 	stcge	0, cr0, [r1], {-0}
    3e64:	0003071b 	andeq	r0, r3, fp, lsl r7
    3e68:	00001d00 	andeq	r1, r0, r0, lsl #26
    3e6c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3e70:	00626a00 	rsbeq	r6, r2, r0, lsl #20
    3e74:	001b4008 	andseq	r4, fp, r8
    3e78:	01800100 	orreq	r0, r0, r0, lsl #2
    3e7c:	00001fd9 	ldrdeq	r1, [r0], -r9
    3e80:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3e84:	fb180200 	blx	60468e <__RW_SIZE__+0x604106>
    3e88:	82000002 	andhi	r0, r0, #2
    3e8c:	60080062 	andvs	r0, r8, r2, rrx
    3e90:	0100001b 	tsteq	r0, fp, lsl r0
    3e94:	03071bac 	movweq	r1, #31660	; 0x7bac
    3e98:	00020000 	andeq	r0, r2, r0
    3e9c:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3ea0:	62b40000 	adcsvs	r0, r4, #0
    3ea4:	1b780800 	blne	1e05eac <__RW_SIZE__+0x1e05924>
    3ea8:	81010000 	mrshi	r0, (UNDEF: 1)
    3eac:	00200a01 	eoreq	r0, r0, r1, lsl #20
    3eb0:	03c61b00 	biceq	r1, r6, #0, 22
    3eb4:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    3eb8:	000002fb 	strdeq	r0, [r0], -fp
    3ebc:	080062cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sp, lr}
    3ec0:	00001b98 	muleq	r0, r8, fp
    3ec4:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3ec8:	0f000003 	svceq	0x00000003
    3ecc:	ba300000 	blt	c03ed4 <__RW_SIZE__+0xc0394c>
    3ed0:	fe000003 	cdp2	0, 0, cr0, cr0, cr3, {0}
    3ed4:	b0080062 	andlt	r0, r8, r2, rrx
    3ed8:	0100001b 	tsteq	r0, fp, lsl r0
    3edc:	203b0182 	eorscs	r0, fp, r2, lsl #3
    3ee0:	c61b0000 	ldrgt	r0, [fp], -r0
    3ee4:	04000003 	streq	r0, [r0], #-3
    3ee8:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3eec:	00631600 	rsbeq	r1, r3, r0, lsl #12
    3ef0:	001bd008 	andseq	sp, fp, r8
    3ef4:	1bac0100 	blne	feb042fc <MSP_BASE+0xdeaff2fc>
    3ef8:	00000307 	andeq	r0, r0, r7, lsl #6
    3efc:	30000004 	andcc	r0, r0, r4
    3f00:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3f04:	08006348 	stmdaeq	r0, {r3, r6, r8, r9, sp, lr}
    3f08:	00001be8 	andeq	r1, r0, r8, ror #23
    3f0c:	6c018301 	stcvs	3, cr8, [r1], {1}
    3f10:	1b000020 	blne	3f98 <__RW_SIZE__+0x3a10>
    3f14:	000003c6 	andeq	r0, r0, r6, asr #7
    3f18:	02fb1836 	rscseq	r1, fp, #3538944	; 0x360000
    3f1c:	63600000 	cmnvs	r0, #0
    3f20:	1c080800 	stcne	8, cr0, [r8], {-0}
    3f24:	ac010000 	stcge	0, cr0, [r1], {-0}
    3f28:	0003071b 	andeq	r0, r3, fp, lsl r7
    3f2c:	00003600 	andeq	r3, r0, r0, lsl #12
    3f30:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3f34:	00639200 	rsbeq	r9, r3, r0, lsl #4
    3f38:	001c2008 	andseq	r2, ip, r8
    3f3c:	01840100 	orreq	r0, r4, r0, lsl #2
    3f40:	0000209d 	muleq	r0, sp, r0
    3f44:	0003c61b 	andeq	ip, r3, fp, lsl r6
    3f48:	fb181300 	blx	608b52 <__RW_SIZE__+0x6085ca>
    3f4c:	aa000002 	bge	3f5c <__RW_SIZE__+0x39d4>
    3f50:	40080063 	andmi	r0, r8, r3, rrx
    3f54:	0100001c 	tsteq	r0, ip, lsl r0
    3f58:	03071bac 	movweq	r1, #31660	; 0x7bac
    3f5c:	00130000 	andseq	r0, r3, r0
    3f60:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    3f64:	63dc0000 	bicsvs	r0, ip, #0
    3f68:	1c580800 	mrrcne	8, 0, r0, r8, cr0
    3f6c:	85010000 	strhi	r0, [r1, #-0]
    3f70:	0020ce01 	eoreq	ip, r0, r1, lsl #28
    3f74:	03c61b00 	biceq	r1, r6, #0, 22
    3f78:	184c0000 	stmdane	ip, {}^	; <UNPREDICTABLE>
    3f7c:	000002fb 	strdeq	r0, [r0], -fp
    3f80:	080063f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sp, lr}
    3f84:	00001c78 	andeq	r1, r0, r8, ror ip
    3f88:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    3f8c:	4c000003 	stcmi	0, cr0, [r0], {3}
    3f90:	ba300000 	blt	c03f98 <__RW_SIZE__+0xc03a10>
    3f94:	26000003 	strcs	r0, [r0], -r3
    3f98:	90080064 	andls	r0, r8, r4, rrx
    3f9c:	0100001c 	tsteq	r0, ip, lsl r0
    3fa0:	20ff0186 	rscscs	r0, pc, r6, lsl #3
    3fa4:	c61b0000 	ldrgt	r0, [fp], -r0
    3fa8:	07000003 	streq	r0, [r0, -r3]
    3fac:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    3fb0:	00643e00 	rsbeq	r3, r4, r0, lsl #28
    3fb4:	001cb008 	andseq	fp, ip, r8
    3fb8:	1bac0100 	blne	feb043c0 <MSP_BASE+0xdeaff3c0>
    3fbc:	00000307 	andeq	r0, r0, r7, lsl #6
    3fc0:	30000007 	andcc	r0, r0, r7
    3fc4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    3fc8:	08006470 	stmdaeq	r0, {r4, r5, r6, sl, sp, lr}
    3fcc:	00001cc8 	andeq	r1, r0, r8, asr #25
    3fd0:	30018701 	andcc	r8, r1, r1, lsl #14
    3fd4:	1b000021 	blne	4060 <__RW_SIZE__+0x3ad8>
    3fd8:	000003c6 	andeq	r0, r0, r6, asr #7
    3fdc:	02fb1813 	rscseq	r1, fp, #1245184	; 0x130000
    3fe0:	64880000 	strvs	r0, [r8], #0
    3fe4:	1ce80800 	stclne	8, cr0, [r8]
    3fe8:	ac010000 	stcge	0, cr0, [r1], {-0}
    3fec:	0003071b 	andeq	r0, r3, fp, lsl r7
    3ff0:	00001300 	andeq	r1, r0, r0, lsl #6
    3ff4:	0003ba30 	andeq	fp, r3, r0, lsr sl
    3ff8:	0064ba00 	rsbeq	fp, r4, r0, lsl #20
    3ffc:	001d0008 	andseq	r0, sp, r8
    4000:	01880100 	orreq	r0, r8, r0, lsl #2
    4004:	00002161 	andeq	r2, r0, r1, ror #2
    4008:	0003c61b 	andeq	ip, r3, fp, lsl r6
    400c:	fb180f00 	blx	607c16 <__RW_SIZE__+0x60768e>
    4010:	d2000002 	andle	r0, r0, #2
    4014:	20080064 	andcs	r0, r8, r4, rrx
    4018:	0100001d 	tsteq	r0, sp, lsl r0
    401c:	03071bac 	movweq	r1, #31660	; 0x7bac
    4020:	000f0000 	andeq	r0, pc, r0
    4024:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    4028:	65040000 	strvs	r0, [r4, #-0]
    402c:	1d380800 	ldcne	8, cr0, [r8, #-0]
    4030:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4034:	00219201 	eoreq	r9, r1, r1, lsl #4
    4038:	03c61b00 	biceq	r1, r6, #0, 22
    403c:	182e0000 	stmdane	lr!, {}	; <UNPREDICTABLE>
    4040:	000002fb 	strdeq	r0, [r0], -fp
    4044:	0800651c 	stmdaeq	r0, {r2, r3, r4, r8, sl, sp, lr}
    4048:	00001d58 	andeq	r1, r0, r8, asr sp
    404c:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    4050:	2e000003 	cdpcs	0, 0, cr0, cr0, cr3, {0}
    4054:	ba300000 	blt	c0405c <__RW_SIZE__+0xc03ad4>
    4058:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    405c:	70080065 	andvc	r0, r8, r5, rrx
    4060:	0100001d 	tsteq	r0, sp, lsl r0
    4064:	21c3018a 	biccs	r0, r3, sl, lsl #3
    4068:	c61b0000 	ldrgt	r0, [fp], -r0
    406c:	2f000003 	svccs	0x00000003
    4070:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    4074:	00656600 	rsbeq	r6, r5, r0, lsl #12
    4078:	001d9008 	andseq	r9, sp, r8
    407c:	1bac0100 	blne	feb04484 <MSP_BASE+0xdeaff484>
    4080:	00000307 	andeq	r0, r0, r7, lsl #6
    4084:	3000002f 	andcc	r0, r0, pc, lsr #32
    4088:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    408c:	08006598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, lr}
    4090:	00001da8 	andeq	r1, r0, r8, lsr #27
    4094:	f4018b01 			; <UNDEFINED> instruction: 0xf4018b01
    4098:	1b000021 	blne	4124 <__RW_SIZE__+0x3b9c>
    409c:	000003c6 	andeq	r0, r0, r6, asr #7
    40a0:	02fb1805 	rscseq	r1, fp, #327680	; 0x50000
    40a4:	65b00000 	ldrvs	r0, [r0, #0]!
    40a8:	1dc80800 	stclne	8, cr0, [r8]
    40ac:	ac010000 	stcge	0, cr0, [r1], {-0}
    40b0:	0003071b 	andeq	r0, r3, fp, lsl r7
    40b4:	00000500 	andeq	r0, r0, r0, lsl #10
    40b8:	0003a230 	andeq	sl, r3, r0, lsr r2
    40bc:	0065e200 	rsbeq	lr, r5, r0, lsl #4
    40c0:	001de008 	andseq	lr, sp, r8
    40c4:	018c0100 	orreq	r0, ip, r0, lsl #2
    40c8:	00002225 	andeq	r2, r0, r5, lsr #4
    40cc:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    40d0:	fb182b00 	blx	60ecda <__RW_SIZE__+0x60e752>
    40d4:	fa000002 	blx	40e4 <__RW_SIZE__+0x3b5c>
    40d8:	00080065 	andeq	r0, r8, r5, rrx
    40dc:	0100001e 	tsteq	r0, lr, lsl r0
    40e0:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    40e4:	002b0000 	eoreq	r0, fp, r0
    40e8:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    40ec:	66320000 	ldrtvs	r0, [r2], -r0
    40f0:	1e180800 	cdpne	8, 1, cr0, cr8, cr0, {0}
    40f4:	8d010000 	stchi	0, cr0, [r1, #-0]
    40f8:	00225601 	eoreq	r5, r2, r1, lsl #12
    40fc:	03c61b00 	biceq	r1, r6, #0, 22
    4100:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4104:	000002fb 	strdeq	r0, [r0], -fp
    4108:	0800664a 	stmdaeq	r0, {r1, r3, r6, r9, sl, sp, lr}
    410c:	00001e38 	andeq	r1, r0, r8, lsr lr
    4110:	071bac01 	ldreq	sl, [fp, -r1, lsl #24]
    4114:	00000003 	andeq	r0, r0, r3
    4118:	ba300000 	blt	c04120 <__RW_SIZE__+0xc03b98>
    411c:	80000003 	andhi	r0, r0, r3
    4120:	50080066 	andpl	r0, r8, r6, rrx
    4124:	0100001e 	tsteq	r0, lr, lsl r0
    4128:	2287018e 	addcs	r0, r7, #-2147483613	; 0x80000023
    412c:	c61b0000 	ldrgt	r0, [fp], -r0
    4130:	00000003 	andeq	r0, r0, r3
    4134:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    4138:	00669800 	rsbeq	r9, r6, r0, lsl #16
    413c:	001e7008 	andseq	r7, lr, r8
    4140:	1bac0100 	blne	feb04548 <MSP_BASE+0xdeaff548>
    4144:	00000307 	andeq	r0, r0, r7, lsl #6
    4148:	30000000 	andcc	r0, r0, r0
    414c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4150:	080066c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, sp, lr}
    4154:	00001e88 	andeq	r1, r0, r8, lsl #29
    4158:	b8018f01 	stmdalt	r1, {r0, r8, r9, sl, fp, pc}
    415c:	1b000022 	blne	41ec <__RW_SIZE__+0x3c64>
    4160:	000003c6 	andeq	r0, r0, r6, asr #7
    4164:	02fb1801 	rscseq	r1, fp, #65536	; 0x10000
    4168:	66e00000 	strbtvs	r0, [r0], r0
    416c:	1ea80800 	cdpne	8, 10, cr0, cr8, cr0, {0}
    4170:	ac010000 	stcge	0, cr0, [r1], {-0}
    4174:	0003071b 	andeq	r0, r3, fp, lsl r7
    4178:	00000100 	andeq	r0, r0, r0, lsl #2
    417c:	0003ba30 	andeq	fp, r3, r0, lsr sl
    4180:	00671200 	rsbeq	r1, r7, r0, lsl #4
    4184:	001ec008 	andseq	ip, lr, r8
    4188:	01900100 	orrseq	r0, r0, r0, lsl #2
    418c:	000022e9 	andeq	r2, r0, r9, ror #5
    4190:	0003c61b 	andeq	ip, r3, fp, lsl r6
    4194:	fb183f00 	blx	613d9e <__RW_SIZE__+0x613816>
    4198:	2a000002 	bcs	41a8 <__RW_SIZE__+0x3c20>
    419c:	e0080067 	and	r0, r8, r7, rrx
    41a0:	0100001e 	tsteq	r0, lr, lsl r0
    41a4:	03071bac 	movweq	r1, #31660	; 0x7bac
    41a8:	003f0000 	eorseq	r0, pc, r0
    41ac:	03a23000 			; <UNDEFINED> instruction: 0x03a23000
    41b0:	675c0000 	ldrbvs	r0, [ip, -r0]
    41b4:	1ef80800 	cdpne	8, 15, cr0, cr8, cr0, {0}
    41b8:	91010000 	mrsls	r0, (UNDEF: 1)
    41bc:	00231a01 	eoreq	r1, r3, r1, lsl #20
    41c0:	03ae1b00 			; <UNDEFINED> instruction: 0x03ae1b00
    41c4:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    41c8:	000002fb 	strdeq	r0, [r0], -fp
    41cc:	08006774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, sp, lr}
    41d0:	00001f18 	andeq	r1, r0, r8, lsl pc
    41d4:	071ba401 	ldreq	sl, [fp, -r1, lsl #8]
    41d8:	2a000003 	bcs	41ec <__RW_SIZE__+0x3c64>
    41dc:	ba300000 	blt	c041e4 <__RW_SIZE__+0xc03c5c>
    41e0:	ac000003 	stcge	0, cr0, [r0], {3}
    41e4:	30080067 	andcc	r0, r8, r7, rrx
    41e8:	0100001f 	tsteq	r0, pc, lsl r0
    41ec:	234b0192 	movtcs	r0, #45458	; 0xb192
    41f0:	c61b0000 	ldrgt	r0, [fp], -r0
    41f4:	00000003 	andeq	r0, r0, r3
    41f8:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    41fc:	0067c400 	rsbeq	ip, r7, r0, lsl #8
    4200:	001f5008 	andseq	r5, pc, r8
    4204:	1bac0100 	blne	feb0460c <MSP_BASE+0xdeaff60c>
    4208:	00000307 	andeq	r0, r0, r7, lsl #6
    420c:	30000000 	andcc	r0, r0, r0
    4210:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4214:	080067fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
    4218:	00001f68 	andeq	r1, r0, r8, ror #30
    421c:	7c019301 	stcvc	3, cr9, [r1], {1}
    4220:	1b000023 	blne	42b4 <__RW_SIZE__+0x3d2c>
    4224:	000003c6 	andeq	r0, r0, r6, asr #7
    4228:	02fb1800 	rscseq	r1, fp, #0, 16
    422c:	68120000 	ldmdavs	r2, {}	; <UNPREDICTABLE>
    4230:	1f880800 	svcne	0x00880800
    4234:	ac010000 	stcge	0, cr0, [r1], {-0}
    4238:	0003071b 	andeq	r0, r3, fp, lsl r7
    423c:	00000000 	andeq	r0, r0, r0
    4240:	0003ba30 	andeq	fp, r3, r0, lsr sl
    4244:	00684800 	rsbeq	r4, r8, r0, lsl #16
    4248:	001fa008 	andseq	sl, pc, r8
    424c:	01940100 	orrseq	r0, r4, r0, lsl #2
    4250:	000023ad 	andeq	r2, r0, sp, lsr #7
    4254:	0003c61b 	andeq	ip, r3, fp, lsl r6
    4258:	fb180000 	blx	604262 <__RW_SIZE__+0x603cda>
    425c:	60000002 	andvs	r0, r0, r2
    4260:	c0080068 	andgt	r0, r8, r8, rrx
    4264:	0100001f 	tsteq	r0, pc, lsl r0
    4268:	03071bac 	movweq	r1, #31660	; 0x7bac
    426c:	00000000 	andeq	r0, r0, r0
    4270:	03ba3000 			; <UNDEFINED> instruction: 0x03ba3000
    4274:	68900000 	ldmvs	r0, {}	; <UNPREDICTABLE>
    4278:	1fd80800 	svcne	0x00d80800
    427c:	95010000 	strls	r0, [r1, #-0]
    4280:	0023de01 	eoreq	sp, r3, r1, lsl #28
    4284:	03c62100 	biceq	r2, r6, #0, 2
    4288:	186f0000 	stmdane	pc!, {}^	; <UNPREDICTABLE>
    428c:	000002fb 	strdeq	r0, [r0], -fp
    4290:	080068a8 	stmdaeq	r0, {r3, r5, r7, fp, sp, lr}
    4294:	00001ff8 	strdeq	r1, [r0], -r8
    4298:	0721ac01 	streq	sl, [r1, -r1, lsl #24]!
    429c:	6f000003 	svcvs	0x00000003
    42a0:	a2300000 	eorsge	r0, r0, #0
    42a4:	da000003 	ble	42b8 <__RW_SIZE__+0x3d30>
    42a8:	10080068 	andne	r0, r8, r8, rrx
    42ac:	01000020 	tsteq	r0, r0, lsr #32
    42b0:	240f0196 	strcs	r0, [pc], #-406	; 42b8 <__RW_SIZE__+0x3d30>
    42b4:	ae1b0000 	cdpge	0, 1, cr0, cr11, cr0, {0}
    42b8:	11000003 	tstne	r0, r3
    42bc:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    42c0:	0068f200 	rsbeq	pc, r8, r0, lsl #4
    42c4:	00203008 	eoreq	r3, r0, r8
    42c8:	1ba40100 	blne	fe9046d0 <MSP_BASE+0xde8ff6d0>
    42cc:	00000307 	andeq	r0, r0, r7, lsl #6
    42d0:	30000011 	andcc	r0, r0, r1, lsl r0
    42d4:	00000313 	andeq	r0, r0, r3, lsl r3
    42d8:	08006922 	stmdaeq	r0, {r1, r5, r8, fp, sp, lr}
    42dc:	00002048 	andeq	r2, r0, r8, asr #32
    42e0:	38019701 	stmdacc	r1, {r0, r8, r9, sl, ip, pc}
    42e4:	1b000024 	blne	437c <__RW_SIZE__+0x3df4>
    42e8:	0000031f 	andeq	r0, r0, pc, lsl r3
    42ec:	20481c78 	subcs	r1, r8, r8, ror ip
    42f0:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    42f4:	02000003 	andeq	r0, r0, #3
    42f8:	00006091 	muleq	r0, r1, r0
    42fc:	0003a229 	andeq	sl, r3, r9, lsr #4
    4300:	00694400 	rsbeq	r4, r9, r0, lsl #8
    4304:	00005808 	andeq	r5, r0, r8, lsl #16
    4308:	01990100 	orrseq	r0, r9, r0, lsl #2
    430c:	00002469 	andeq	r2, r0, r9, ror #8
    4310:	0003ae1b 	andeq	sl, r3, fp, lsl lr
    4314:	fb182900 	blx	60e71e <__RW_SIZE__+0x60e196>
    4318:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    431c:	60080069 	andvs	r0, r8, r9, rrx
    4320:	01000020 	tsteq	r0, r0, lsr #32
    4324:	03071ba4 	movweq	r1, #31652	; 0x7ba4
    4328:	00290000 	eoreq	r0, r9, r0
    432c:	03632900 	cmneq	r3, #0, 18
    4330:	69a00000 	stmibvs	r0!, {}	; <UNPREDICTABLE>
    4334:	00060800 	andeq	r0, r6, r0, lsl #16
    4338:	9d010000 	stcls	0, cr0, [r1, #-0]
    433c:	00248e01 	eoreq	r8, r4, r1, lsl #28
    4340:	69a62a00 	stmibvs	r6!, {r9, fp, sp}
    4344:	0ed40800 	cdpeq	8, 13, cr0, cr4, cr0, {0}
    4348:	01270000 	teqeq	r7, r0
    434c:	00740250 	rsbseq	r0, r4, r0, asr r2
    4350:	13290000 	teqne	r9, #0
    4354:	a6000003 	strge	r0, [r0], -r3
    4358:	1c080069 	stcne	0, cr0, [r8], {105}	; 0x69
    435c:	01000000 	mrseq	r0, (UNDEF: 0)
    4360:	24bc019e 	ldrtcs	r0, [ip], #414	; 0x19e
    4364:	1f340000 	svcne	0x00340000
    4368:	2c000003 	stccs	0, cr0, [r0], {3}
    436c:	69a63501 	stmibvs	r6!, {r0, r8, sl, ip, sp}
    4370:	001c0800 	andseq	r0, ip, r0, lsl #16
    4374:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    4378:	02000003 	andeq	r0, r0, #3
    437c:	00006491 	muleq	r0, r1, r4
    4380:	0069a025 	rsbeq	sl, r9, r5, lsr #32
    4384:	00059708 	andeq	r9, r5, r8, lsl #14
    4388:	6f2b0000 	svcvs	0x002b0000
    438c:	01000003 	tsteq	r0, r3
    4390:	69d801a3 	ldmibvs	r8, {r0, r1, r5, r7, r8}^
    4394:	03c00800 	biceq	r0, r0, #0, 16
    4398:	9c010000 	stcls	0, cr0, [r1], {-0}
    439c:	000027ea 	andeq	r2, r0, sl, ror #15
    43a0:	0100782c 	tsteq	r0, ip, lsr #16
    43a4:	004501a3 	subeq	r0, r5, r3, lsr #3
    43a8:	17930000 	ldrne	r0, [r3, r0]
    43ac:	792c0000 	stmdbvc	ip!, {}	; <UNPREDICTABLE>
    43b0:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    43b4:	00000045 	andeq	r0, r0, r5, asr #32
    43b8:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    43bc:	000aaa32 	andeq	sl, sl, r2, lsr sl
    43c0:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    43c4:	00000045 	andeq	r0, r0, r5, asr #32
    43c8:	000017d5 	ldrdeq	r1, [r0], -r5
    43cc:	00036c30 	andeq	r6, r3, r0, lsr ip
    43d0:	0069da00 	rsbeq	sp, r9, r0, lsl #20
    43d4:	00208008 	eoreq	r8, r0, r8
    43d8:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    43dc:	0000279d 	muleq	r0, sp, r7
    43e0:	00038116 	andeq	r8, r3, r6, lsl r1
    43e4:	0017f600 	andseq	pc, r7, r0, lsl #12
    43e8:	03781600 	cmneq	r8, #0, 12
    43ec:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    43f0:	b0180000 	andslt	r0, r8, r0
    43f4:	da000008 	ble	441c <__RW_SIZE__+0x3e94>
    43f8:	80080069 	andhi	r0, r8, r9, rrx
    43fc:	01000020 	tsteq	r0, r0, lsr #32
    4400:	08da16ef 	ldmeq	sl, {r0, r1, r2, r3, r5, r6, r7, r9, sl, ip}^
    4404:	17f60000 	ldrbne	r0, [r6, r0]!
    4408:	d0160000 	andsle	r0, r6, r0
    440c:	09000008 	stmdbeq	r0, {r3}
    4410:	16000018 			; <UNDEFINED> instruction: 0x16000018
    4414:	000008c6 	andeq	r0, r0, r6, asr #17
    4418:	000017f6 	strdeq	r1, [r0], -r6
    441c:	0008bc16 	andeq	fp, r8, r6, lsl ip
    4420:	00180900 	andseq	r0, r8, r0, lsl #18
    4424:	03a21700 			; <UNDEFINED> instruction: 0x03a21700
    4428:	69da0000 	ldmibvs	sl, {}^	; <UNPREDICTABLE>
    442c:	20980800 	addscs	r0, r8, r0, lsl #16
    4430:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    4434:	00002593 	muleq	r0, r3, r5
    4438:	0003ae16 	andeq	sl, r3, r6, lsl lr
    443c:	00181c00 	andseq	r1, r8, r0, lsl #24
    4440:	02fb1800 	rscseq	r1, fp, #0, 16
    4444:	69fe0000 	ldmibvs	lr!, {}^	; <UNPREDICTABLE>
    4448:	20c80800 	sbccs	r0, r8, r0, lsl #16
    444c:	a4010000 	strge	r0, [r1], #-0
    4450:	00030719 	andeq	r0, r3, r9, lsl r7
    4454:	17000000 	strne	r0, [r0, -r0]
    4458:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    445c:	08006a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, sp, lr}
    4460:	000020e0 	andeq	r2, r0, r0, ror #1
    4464:	25c9df01 	strbcs	sp, [r9, #3841]	; 0xf01
    4468:	c6160000 	ldrgt	r0, [r6], -r0
    446c:	2f000003 	svccs	0x00000003
    4470:	1a000018 	bne	44d8 <__RW_SIZE__+0x3f50>
    4474:	000002fb 	strdeq	r0, [r0], -fp
    4478:	08006a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, sp, lr}
    447c:	00000020 	andeq	r0, r0, r0, lsr #32
    4480:	0716ac01 	ldreq	sl, [r6, -r1, lsl #24]
    4484:	42000003 	andmi	r0, r0, #3
    4488:	00000018 	andeq	r0, r0, r8, lsl r0
    448c:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    4490:	6a840000 	bvs	fe104498 <MSP_BASE+0xde0ff498>
    4494:	21080800 	tstcs	r8, r0, lsl #16
    4498:	e0010000 	and	r0, r1, r0
    449c:	000025fb 	strdeq	r2, [r0], -fp
    44a0:	0003c616 	andeq	ip, r3, r6, lsl r6
    44a4:	00185500 	andseq	r5, r8, r0, lsl #10
    44a8:	02fb1800 	rscseq	r1, fp, #0, 16
    44ac:	6aa20000 	bvs	fe8844b4 <MSP_BASE+0xde87f4b4>
    44b0:	21280800 	teqcs	r8, r0, lsl #16
    44b4:	ac010000 	stcge	0, cr0, [r1], {-0}
    44b8:	00030719 	andeq	r0, r3, r9, lsl r7
    44bc:	17000000 	strne	r0, [r0, -r0]
    44c0:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    44c4:	08006ad6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, fp, sp, lr}
    44c8:	00002140 	andeq	r2, r0, r0, asr #2
    44cc:	2631e101 	ldrtcs	lr, [r1], -r1, lsl #2
    44d0:	c6160000 	ldrgt	r0, [r6], -r0
    44d4:	68000003 	stmdavs	r0, {r0, r1}
    44d8:	18000018 	stmdane	r0, {r3, r4}
    44dc:	000002fb 	strdeq	r0, [r0], -fp
    44e0:	08006af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp, lr}
    44e4:	00002160 	andeq	r2, r0, r0, ror #2
    44e8:	0716ac01 	ldreq	sl, [r6, -r1, lsl #24]
    44ec:	7b000003 	blvc	4500 <__RW_SIZE__+0x3f78>
    44f0:	00000018 	andeq	r0, r0, r8, lsl r0
    44f4:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    44f8:	6b280000 	blvs	a04500 <__RW_SIZE__+0xa03f78>
    44fc:	21780800 	cmncs	r8, r0, lsl #16
    4500:	e2010000 	and	r0, r1, #0
    4504:	0000265f 	andeq	r2, r0, pc, asr r6
    4508:	0003c619 	andeq	ip, r3, r9, lsl r6
    450c:	02fb1800 	rscseq	r1, fp, #0, 16
    4510:	6b400000 	blvs	1004518 <__RW_SIZE__+0x1003f90>
    4514:	21980800 	orrscs	r0, r8, r0, lsl #16
    4518:	ac010000 	stcge	0, cr0, [r1], {-0}
    451c:	00030719 	andeq	r0, r3, r9, lsl r7
    4520:	17000000 	strne	r0, [r0, -r0]
    4524:	000003a2 	andeq	r0, r0, r2, lsr #7
    4528:	08006b70 	stmdaeq	r0, {r4, r5, r6, r8, r9, fp, sp, lr}
    452c:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    4530:	2691e401 	ldrcs	lr, [r1], r1, lsl #8
    4534:	ae160000 	cdpge	0, 1, cr0, cr6, cr0, {0}
    4538:	8e000003 	cdphi	0, 0, cr0, cr0, cr3, {0}
    453c:	18000018 	stmdane	r0, {r3, r4}
    4540:	000002fb 	strdeq	r0, [r0], -fp
    4544:	08006b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, sp, lr}
    4548:	000021d8 	ldrdeq	r2, [r0], -r8
    454c:	0719a401 	ldreq	sl, [r9, -r1, lsl #8]
    4550:	00000003 	andeq	r0, r0, r3
    4554:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    4558:	6bbc0000 	blvs	fef04560 <MSP_BASE+0xdeeff560>
    455c:	21f00800 	mvnscs	r0, r0, lsl #16
    4560:	e5010000 	str	r0, [r1, #-0]
    4564:	000026c7 	andeq	r2, r0, r7, asr #13
    4568:	0003c616 	andeq	ip, r3, r6, lsl r6
    456c:	0018a100 	andseq	sl, r8, r0, lsl #2
    4570:	02fb1a00 	rscseq	r1, fp, #0, 20
    4574:	6bdc0000 	blvs	ff70457c <MSP_BASE+0xdf6ff57c>
    4578:	00200800 	eoreq	r0, r0, r0, lsl #16
    457c:	ac010000 	stcge	0, cr0, [r1], {-0}
    4580:	00030716 	andeq	r0, r3, r6, lsl r7
    4584:	0018b400 	andseq	fp, r8, r0, lsl #8
    4588:	17000000 	strne	r0, [r0, -r0]
    458c:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    4590:	08006c06 	stmdaeq	r0, {r1, r2, sl, fp, sp, lr}
    4594:	00002218 	andeq	r2, r0, r8, lsl r2
    4598:	26f9e601 	ldrbtcs	lr, [r9], r1, lsl #12
    459c:	c6160000 	ldrgt	r0, [r6], -r0
    45a0:	c7000003 	strgt	r0, [r0, -r3]
    45a4:	18000018 	stmdane	r0, {r3, r4}
    45a8:	000002fb 	strdeq	r0, [r0], -fp
    45ac:	08006c1e 	stmdaeq	r0, {r1, r2, r3, r4, sl, fp, sp, lr}
    45b0:	00002238 	andeq	r2, r0, r8, lsr r2
    45b4:	0719ac01 	ldreq	sl, [r9, -r1, lsl #24]
    45b8:	00000003 	andeq	r0, r0, r3
    45bc:	03ba1700 			; <UNDEFINED> instruction: 0x03ba1700
    45c0:	6c500000 	mravs	r0, r0, acc0
    45c4:	22500800 	subscs	r0, r0, #0, 16
    45c8:	e7010000 	str	r0, [r1, -r0]
    45cc:	0000272f 	andeq	r2, r0, pc, lsr #14
    45d0:	0003c616 	andeq	ip, r3, r6, lsl r6
    45d4:	0018da00 	andseq	sp, r8, r0, lsl #20
    45d8:	02fb1800 	rscseq	r1, fp, #0, 16
    45dc:	6c680000 	stclvs	0, cr0, [r8], #-0
    45e0:	22700800 	rsbscs	r0, r0, #0, 16
    45e4:	ac010000 	stcge	0, cr0, [r1], {-0}
    45e8:	00030716 	andeq	r0, r3, r6, lsl r7
    45ec:	0018ed00 	andseq	lr, r8, r0, lsl #26
    45f0:	17000000 	strne	r0, [r0, -r0]
    45f4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    45f8:	08006c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, sp, lr}
    45fc:	00002288 	andeq	r2, r0, r8, lsl #5
    4600:	275de801 	ldrbcs	lr, [sp, -r1, lsl #16]
    4604:	c6190000 	ldrgt	r0, [r9], -r0
    4608:	18000003 	stmdane	r0, {r0, r1}
    460c:	000002fb 	strdeq	r0, [r0], -fp
    4610:	08006cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, sp, lr}
    4614:	000022a8 	andeq	r2, r0, r8, lsr #5
    4618:	0719ac01 	ldreq	sl, [r9, -r1, lsl #24]
    461c:	00000003 	andeq	r0, r0, r3
    4620:	035b1800 	cmpeq	fp, #0, 16
    4624:	6ce00000 	stclvs	0, cr0, [r0]
    4628:	22c00800 	sbccs	r0, r0, #0, 16
    462c:	ea010000 	b	44634 <__RW_SIZE__+0x440ac>
    4630:	0003a218 	andeq	sl, r3, r8, lsl r2
    4634:	006ce000 	rsbeq	lr, ip, r0
    4638:	0022e008 	eoreq	lr, r2, r8
    463c:	16d90100 	ldrbne	r0, [r9], r0, lsl #2
    4640:	000003ae 	andeq	r0, r0, lr, lsr #7
    4644:	00001900 	andeq	r1, r0, r0, lsl #18
    4648:	0002fb18 	andeq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    464c:	006cfa00 	rsbeq	pc, ip, r0, lsl #20
    4650:	00230808 	eoreq	r0, r3, r8, lsl #16
    4654:	19a40100 	stmibne	r4!, {r8}
    4658:	00000307 	andeq	r0, r0, r7, lsl #6
    465c:	00000000 	andeq	r0, r0, r0
    4660:	045c3600 	ldrbeq	r3, [ip], #-1536	; 0xfffffa00
    4664:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
    4668:	23200800 	teqcs	r0, #0, 16
    466c:	a6010000 	strge	r0, [r1], -r0
    4670:	04681601 	strbteq	r1, [r8], #-1537	; 0xfffff9ff
    4674:	19130000 	ldmdbne	r3, {}	; <UNPREDICTABLE>
    4678:	fb370000 	blx	dc4682 <__RW_SIZE__+0xdc40fa>
    467c:	4c000002 	stcmi	0, cr0, [r0], {2}
    4680:	2008006d 	andcs	r0, r8, sp, rrx
    4684:	01000000 	mrseq	r0, (UNDEF: 0)
    4688:	0027cf80 	eoreq	ip, r7, r0, lsl #31
    468c:	03071900 	movweq	r1, #30976	; 0x7900
    4690:	1a000000 	bne	4698 <__RW_SIZE__+0x4110>
    4694:	000002fb 	strdeq	r0, [r0], -fp
    4698:	08006d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, sp, lr}
    469c:	00000018 	andeq	r0, r0, r8, lsl r0
    46a0:	07168101 	ldreq	r8, [r6, -r1, lsl #2]
    46a4:	26000003 	strcs	r0, [r0], -r3
    46a8:	00000019 	andeq	r0, r0, r9, lsl r0
    46ac:	51380000 	teqpl	r8, r0
    46b0:	04000000 	streq	r0, [r0], #-0
    46b4:	033306ce 	teqeq	r3, #216006656	; 0xce00000
    46b8:	ec390000 	ldc	0, cr0, [r9], #-0
    46bc:	01000008 	tsteq	r0, r8
    46c0:	0002f02d 	andeq	pc, r2, sp, lsr #32
    46c4:	88030500 	stmdahi	r3, {r8, sl}
    46c8:	39200005 	stmdbcc	r0!, {r0, r2}
    46cc:	000008f3 	strdeq	r0, [r0], -r3
    46d0:	00452f01 	subeq	r2, r5, r1, lsl #30
    46d4:	03050000 	movweq	r0, #20480	; 0x5000
    46d8:	20000594 	mulcs	r0, r4, r5
    46dc:	00092539 	andeq	r2, r9, r9, lsr r5
    46e0:	45300100 	ldrmi	r0, [r0, #-256]!	; 0xffffff00
    46e4:	05000000 	streq	r0, [r0, #-0]
    46e8:	00000003 	andeq	r0, r0, r3
    46ec:	01f70020 	mvnseq	r0, r0, lsr #32
    46f0:	00040000 	andeq	r0, r4, r0
    46f4:	00000ab5 			; <UNDEFINED> instruction: 0x00000ab5
    46f8:	00ad0104 	adceq	r0, sp, r4, lsl #2
    46fc:	20010000 	andcs	r0, r1, r0
    4700:	5700000a 	strpl	r0, [r0, -sl]
    4704:	98000001 	stmdals	r0, {r0}
    4708:	7208006d 	andvc	r0, r8, #109	; 0x6d
    470c:	d5000000 	strle	r0, [r0, #-0]
    4710:	02000018 	andeq	r0, r0, #24
    4714:	00680601 	rsbeq	r0, r8, r1, lsl #12
    4718:	01020000 	mrseq	r0, (UNDEF: 2)
    471c:	00006608 	andeq	r6, r0, r8, lsl #12
    4720:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4724:	000001a2 	andeq	r0, r0, r2, lsr #3
    4728:	3e070202 	cdpcc	2, 0, cr0, cr7, cr2, {0}
    472c:	02000000 	andeq	r0, r0, #0
    4730:	00050504 	andeq	r0, r5, r4, lsl #10
    4734:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    4738:	03000001 	movweq	r0, #1
    473c:	00005350 	andeq	r5, r0, r0, asr r3
    4740:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4744:	0000009b 	muleq	r0, fp, r0
    4748:	00050802 	andeq	r0, r5, r2, lsl #16
    474c:	02000000 	andeq	r0, r0, #0
    4750:	00960708 	addseq	r0, r6, r8, lsl #14
    4754:	04040000 	streq	r0, [r4], #-0
    4758:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    475c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4760:	000000a0 	andeq	r0, r0, r0, lsr #1
    4764:	43070402 	movwmi	r0, #29698	; 0x7402
    4768:	05000001 	streq	r0, [r0, #-1]
    476c:	00000048 	andeq	r0, r0, r8, asr #32
    4770:	e9021c06 	stmdb	r2, {r1, r2, sl, fp, ip}
    4774:	0000e703 	andeq	lr, r0, r3, lsl #14
    4778:	52430700 	subpl	r0, r3, #0, 14
    477c:	eb02004c 	bl	848b4 <__RW_SIZE__+0x8432c>
    4780:	00007d03 	andeq	r7, r0, r3, lsl #26
    4784:	43070000 	movwmi	r0, #28672	; 0x7000
    4788:	02004852 	andeq	r4, r0, #5373952	; 0x520000
    478c:	007d03ec 	rsbseq	r0, sp, ip, ror #7
    4790:	07040000 	streq	r0, [r4, -r0]
    4794:	00524449 	subseq	r4, r2, r9, asr #8
    4798:	7d03ed02 	stcvc	13, cr14, [r3, #-8]
    479c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    47a0:	52444f07 	subpl	r4, r4, #7, 30
    47a4:	03ee0200 	mvneq	r0, #0, 4
    47a8:	0000007d 	andeq	r0, r0, sp, ror r0
    47ac:	03bd080c 			; <UNDEFINED> instruction: 0x03bd080c
    47b0:	ef020000 	svc	0x00020000
    47b4:	00007d03 	andeq	r7, r0, r3, lsl #26
    47b8:	42071000 	andmi	r1, r7, #0
    47bc:	02005252 	andeq	r5, r0, #536870917	; 0x20000005
    47c0:	007d03f0 	ldrshteq	r0, [sp], #-48	; 0xffffffd0
    47c4:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    47c8:	000007ca 	andeq	r0, r0, sl, asr #15
    47cc:	7d03f102 	stfvcd	f7, [r3, #-8]
    47d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    47d4:	06aa0900 	strteq	r0, [sl], r0, lsl #18
    47d8:	f2020000 	vhadd.s8	d0, d2, d0
    47dc:	00008203 	andeq	r8, r0, r3, lsl #4
    47e0:	02280600 	eoreq	r0, r8, #0, 12
    47e4:	017e0434 	cmneq	lr, r4, lsr r4
    47e8:	43070000 	movwmi	r0, #28672	; 0x7000
    47ec:	36020052 			; <UNDEFINED> instruction: 0x36020052
    47f0:	00007d04 	andeq	r7, r0, r4, lsl #26
    47f4:	60080000 	andvs	r0, r8, r0
    47f8:	02000008 	andeq	r0, r0, #8
    47fc:	007d0437 	rsbseq	r0, sp, r7, lsr r4
    4800:	07040000 	streq	r0, [r4, -r0]
    4804:	00524943 	subseq	r4, r2, r3, asr #18
    4808:	7d043802 	stcvc	8, cr3, [r4, #-8]
    480c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4810:	00008d08 	andeq	r8, r0, r8, lsl #26
    4814:	04390200 	ldrteq	r0, [r9], #-512	; 0xfffffe00
    4818:	0000007d 	andeq	r0, r0, sp, ror r0
    481c:	0035080c 	eorseq	r0, r5, ip, lsl #16
    4820:	3a020000 	bcc	84828 <__RW_SIZE__+0x842a0>
    4824:	00007d04 	andeq	r7, r0, r4, lsl #26
    4828:	21081000 	mrscs	r1, (UNDEF: 8)
    482c:	02000000 	andeq	r0, r0, #0
    4830:	007d043b 	rsbseq	r0, sp, fp, lsr r4
    4834:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
    4838:	0000007d 	andeq	r0, r0, sp, ror r0
    483c:	7d043c02 	stcvc	12, cr3, [r4, #-8]
    4840:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4844:	00008508 	andeq	r8, r0, r8, lsl #10
    4848:	043d0200 	ldrteq	r0, [sp], #-512	; 0xfffffe00
    484c:	0000007d 	andeq	r0, r0, sp, ror r0
    4850:	000e081c 	andeq	r0, lr, ip, lsl r8
    4854:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    4858:	00007d04 	andeq	r7, r0, r4, lsl #26
    485c:	43072000 	movwmi	r2, #28672	; 0x7000
    4860:	02005253 	andeq	r5, r0, #805306373	; 0x30000005
    4864:	007d043f 	rsbseq	r0, sp, pc, lsr r4
    4868:	00240000 	eoreq	r0, r4, r0
    486c:	0001ac09 	andeq	sl, r1, r9, lsl #24
    4870:	044a0200 	strbeq	r0, [sl], #-512	; 0xfffffe00
    4874:	000000f3 	strdeq	r0, [r0], -r3
    4878:	6f080102 	svcvs	0x00080102
    487c:	0a000000 	beq	4884 <__RW_SIZE__+0x42fc>
    4880:	00000a31 	andeq	r0, r0, r1, lsr sl
    4884:	6d980301 	ldcvs	3, cr0, [r8, #4]
    4888:	002e0800 	eoreq	r0, lr, r0, lsl #16
    488c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4890:	000a140b 	andeq	r1, sl, fp, lsl #8
    4894:	c80a0100 	stmdagt	sl, {r8}
    4898:	1c08006d 	stcne	0, cr0, [r8], {109}	; 0x6d
    489c:	01000000 	mrseq	r0, (UNDEF: 0)
    48a0:	0001c79c 	muleq	r1, ip, r7
    48a4:	756e0c00 	strbvc	r0, [lr, #-3072]!	; 0xfffff400
    48a8:	0a01006d 	beq	44a64 <__RW_SIZE__+0x444dc>
    48ac:	0000006f 	andeq	r0, r0, pc, rrx
    48b0:	00001939 	andeq	r1, r0, r9, lsr r9
    48b4:	0a260a00 	beq	9870bc <__RW_SIZE__+0x986b34>
    48b8:	0f010000 	svceq	0x00010000
    48bc:	08006de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp, lr}
    48c0:	00000012 	andeq	r0, r0, r2, lsl r0
    48c4:	080a9c01 	stmdaeq	sl, {r0, sl, fp, ip, pc}
    48c8:	0100000a 	tsteq	r0, sl
    48cc:	006df814 	rsbeq	pc, sp, r4, lsl r8	; <UNPREDICTABLE>
    48d0:	00001208 	andeq	r1, r0, r8, lsl #4
    48d4:	0d9c0100 	ldfeqs	f0, [ip]
    48d8:	00000051 	andeq	r0, r0, r1, asr r0
    48dc:	f506ce04 			; <UNDEFINED> instruction: 0xf506ce04
    48e0:	05000001 	streq	r0, [r0, #-1]
    48e4:	00000068 	andeq	r0, r0, r8, rrx
    48e8:	0005a400 	andeq	sl, r5, r0, lsl #8
    48ec:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
    48f0:	0400000b 	streq	r0, [r0], #-11
    48f4:	0000ad01 	andeq	sl, r0, r1, lsl #26
    48f8:	0b090100 	bleq	244d00 <__RW_SIZE__+0x244778>
    48fc:	01570000 	cmpeq	r7, r0
    4900:	6e0c0000 	cdpvs	0, 0, cr0, cr12, cr0, {0}
    4904:	019c0800 	orrseq	r0, ip, r0, lsl #16
    4908:	19740000 	ldmdbne	r4!, {}^	; <UNPREDICTABLE>
    490c:	01020000 	mrseq	r0, (UNDEF: 2)
    4910:	00006806 	andeq	r6, r0, r6, lsl #16
    4914:	027c0300 	rsbseq	r0, ip, #0, 6
    4918:	2a020000 	bcs	84920 <__RW_SIZE__+0x84398>
    491c:	00000037 	andeq	r0, r0, r7, lsr r0
    4920:	66080102 	strvs	r0, [r8], -r2, lsl #2
    4924:	02000000 	andeq	r0, r0, #0
    4928:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
    492c:	02020000 	andeq	r0, r2, #0
    4930:	00003e07 	andeq	r3, r0, r7, lsl #28
    4934:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4938:	00000005 	andeq	r0, r0, r5
    493c:	0001b803 	andeq	fp, r1, r3, lsl #16
    4940:	5e500200 	cdppl	2, 5, cr0, cr0, cr0, {0}
    4944:	02000000 	andeq	r0, r0, #0
    4948:	009b0704 	addseq	r0, fp, r4, lsl #14
    494c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4950:	00000005 	andeq	r0, r0, r5
    4954:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4958:	00000096 	muleq	r0, r6, r0
    495c:	69050404 	stmdbvs	r5, {r2, sl}
    4960:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4964:	00a00704 	adceq	r0, r0, r4, lsl #14
    4968:	04020000 	streq	r0, [r2], #-0
    496c:	00014307 	andeq	r4, r1, r7, lsl #6
    4970:	00530500 	subseq	r0, r3, r0, lsl #10
    4974:	74060000 	strvc	r0, [r6], #-0
    4978:	017a9b03 	cmneq	sl, r3, lsl #22
    497c:	03070000 	movweq	r0, #28672	; 0x7000
    4980:	0300000b 	movweq	r0, #11
    4984:	00017a9d 	muleq	r1, sp, sl
    4988:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    498c:	0300000a 	movweq	r0, #10
    4990:	0000889e 	muleq	r0, lr, r8
    4994:	9c070400 	cfstrsls	mvf0, [r7], {-0}
    4998:	0300000a 	movweq	r0, #10
    499c:	0000889f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    49a0:	ee070800 	cdp	8, 0, cr0, cr7, cr0, {0}
    49a4:	0300000a 	movweq	r0, #10
    49a8:	000088a0 	andeq	r8, r0, r0, lsr #17
    49ac:	53080c00 	movwpl	r0, #35840	; 0x8c00
    49b0:	03005243 	movweq	r5, #579	; 0x243
    49b4:	000088a1 	andeq	r8, r0, r1, lsr #17
    49b8:	43081000 	movwmi	r1, #32768	; 0x8000
    49bc:	03005243 	movweq	r5, #579	; 0x243
    49c0:	000088a2 	andeq	r8, r0, r2, lsr #17
    49c4:	53081400 	movwpl	r1, #33792	; 0x8400
    49c8:	03005048 	movweq	r5, #72	; 0x48
    49cc:	00018fa3 	andeq	r8, r1, r3, lsr #31
    49d0:	4a071800 	bmi	1ca9d8 <__RW_SIZE__+0x1ca450>
    49d4:	0300000a 	movweq	r0, #10
    49d8:	000088a4 	andeq	r8, r0, r4, lsr #17
    49dc:	76072400 	strvc	r2, [r7], -r0, lsl #8
    49e0:	0300000a 	movweq	r0, #10
    49e4:	000088a5 	andeq	r8, r0, r5, lsr #17
    49e8:	a1072800 	tstge	r7, r0, lsl #16
    49ec:	0300000a 	movweq	r0, #10
    49f0:	000088a6 	andeq	r8, r0, r6, lsr #17
    49f4:	e4072c00 	str	r2, [r7], #-3072	; 0xfffff400
    49f8:	0300000a 	movweq	r0, #10
    49fc:	000088a7 	andeq	r8, r0, r7, lsr #17
    4a00:	10073000 	andne	r3, r7, r0
    4a04:	0300000b 	movweq	r0, #11
    4a08:	000088a8 	andeq	r8, r0, r8, lsr #17
    4a0c:	f9073400 			; <UNDEFINED> instruction: 0xf9073400
    4a10:	0300000a 	movweq	r0, #10
    4a14:	000088a9 	andeq	r8, r0, r9, lsr #17
    4a18:	49073800 	stmdbmi	r7, {fp, ip, sp}
    4a1c:	0300000b 	movweq	r0, #11
    4a20:	000088aa 	andeq	r8, r0, sl, lsr #17
    4a24:	50083c00 	andpl	r3, r8, r0, lsl #24
    4a28:	03005246 	movweq	r5, #582	; 0x246
    4a2c:	0001a4ab 	andeq	sl, r1, fp, lsr #9
    4a30:	44084000 	strmi	r4, [r8], #-0
    4a34:	03005246 	movweq	r5, #582	; 0x246
    4a38:	00017aac 	andeq	r7, r1, ip, lsr #21
    4a3c:	41084800 	tstmi	r8, r0, lsl #16
    4a40:	03005244 	movweq	r5, #580	; 0x244
    4a44:	00017aad 	andeq	r7, r1, sp, lsr #21
    4a48:	45074c00 	strmi	r4, [r7, #-3072]	; 0xfffff400
    4a4c:	0300000a 	movweq	r0, #10
    4a50:	0001beae 	andeq	fp, r1, lr, lsr #29
    4a54:	f4075000 	vst4.8	{d5-d8}, [r7], r0
    4a58:	0300000a 	movweq	r0, #10
    4a5c:	0001d8af 	andeq	sp, r1, pc, lsr #17
    4a60:	09006000 	stmdbeq	r0, {sp, lr}
    4a64:	00000088 	andeq	r0, r0, r8, lsl #1
    4a68:	00002c0a 	andeq	r2, r0, sl, lsl #24
    4a6c:	00018f00 	andeq	r8, r1, r0, lsl #30
    4a70:	00810b00 	addeq	r0, r1, r0, lsl #22
    4a74:	000b0000 	andeq	r0, fp, r0
    4a78:	00017f05 	andeq	r7, r1, r5, lsl #30
    4a7c:	00530a00 	subseq	r0, r3, r0, lsl #20
    4a80:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    4a84:	810b0000 	mrshi	r0, (UNDEF: 11)
    4a88:	01000000 	mrseq	r0, (UNDEF: 0)
    4a8c:	01a90900 			; <UNDEFINED> instruction: 0x01a90900
    4a90:	94050000 	strls	r0, [r5], #-0
    4a94:	0a000001 	beq	4aa0 <__RW_SIZE__+0x4518>
    4a98:	00000053 	andeq	r0, r0, r3, asr r0
    4a9c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    4aa0:	0000810b 	andeq	r8, r0, fp, lsl #2
    4aa4:	09000300 	stmdbeq	r0, {r8, r9}
    4aa8:	000001c3 	andeq	r0, r0, r3, asr #3
    4aac:	0001ae05 	andeq	sl, r1, r5, lsl #28
    4ab0:	00530a00 	subseq	r0, r3, r0, lsl #20
    4ab4:	01d80000 	bicseq	r0, r8, r0
    4ab8:	810b0000 	mrshi	r0, (UNDEF: 11)
    4abc:	04000000 	streq	r0, [r0], #-0
    4ac0:	01dd0900 	bicseq	r0, sp, r0, lsl #18
    4ac4:	c8050000 	stmdagt	r5, {}	; <UNPREDICTABLE>
    4ac8:	03000001 	movweq	r0, #1
    4acc:	00000a6d 	andeq	r0, r0, sp, ror #20
    4ad0:	008db003 	addeq	fp, sp, r3
    4ad4:	040c0000 	streq	r0, [ip], #-0
    4ad8:	000001f3 	strdeq	r0, [r0], -r3
    4adc:	6f080102 	svcvs	0x00080102
    4ae0:	0c000000 	stceq	0, cr0, [r0], {-0}
    4ae4:	00020004 	andeq	r0, r2, r4
    4ae8:	01f30900 	mvnseq	r0, r0, lsl #18
    4aec:	300d0000 	andcc	r0, sp, r0
    4af0:	0100000b 	tsteq	r0, fp
    4af4:	006e0c12 	rsbeq	r0, lr, r2, lsl ip
    4af8:	00003008 	andeq	r3, r0, r8
    4afc:	489c0100 	ldmmi	ip, {r8}
    4b00:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    4b04:	08006e12 	stmdaeq	r0, {r1, r4, r9, sl, fp, sp, lr}
    4b08:	000004c7 	andeq	r0, r0, r7, asr #9
    4b0c:	006e160e 	rsbeq	r1, lr, lr, lsl #12
    4b10:	0004ce08 	andeq	ip, r4, r8, lsl #28
    4b14:	6e1a0e00 	cdpvs	14, 1, cr0, cr10, cr0, {0}
    4b18:	04d50800 	ldrbeq	r0, [r5], #2048	; 0x800
    4b1c:	220f0000 	andcs	r0, pc, #0
    4b20:	dc08006e 	stcle	0, cr0, [r8], {110}	; 0x6e
    4b24:	10000004 	andne	r0, r0, r4
    4b28:	08045001 	stmdaeq	r4, {r0, ip, lr}
    4b2c:	002439e1 	eoreq	r3, r4, r1, ror #19
    4b30:	0afe0d00 	beq	fff87f38 <MSP_BASE+0xdff82f38>
    4b34:	1f010000 	svcne	0x00010000
    4b38:	08006e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp, lr}
    4b3c:	0000016c 	andeq	r0, r0, ip, ror #2
    4b40:	046f9c01 	strbteq	r9, [pc], #-3073	; 4b48 <__RW_SIZE__+0x45c0>
    4b44:	86110000 	ldrhi	r0, [r1], -r0
    4b48:	0100000a 	tsteq	r0, sl
    4b4c:	0000732a 	andeq	r7, r0, sl, lsr #6
    4b50:	91119b00 	tstls	r1, r0, lsl #22
    4b54:	0100000a 	tsteq	r0, sl
    4b58:	0000732a 	andeq	r7, r0, sl, lsr #6
    4b5c:	c511e500 	ldrgt	lr, [r1, #-1280]	; 0xfffffb00
    4b60:	0100000a 	tsteq	r0, sl
    4b64:	0000732b 	andeq	r7, r0, fp, lsr #6
    4b68:	cf110000 	svcgt	0x00110000
    4b6c:	0100000a 	tsteq	r0, sl
    4b70:	0000732b 	andeq	r7, r0, fp, lsr #6
    4b74:	a6127300 	ldrge	r7, [r2], -r0, lsl #6
    4b78:	0100000a 	tsteq	r0, sl
    4b7c:	0000732c 	andeq	r7, r0, ip, lsr #6
    4b80:	00196800 	andseq	r6, r9, r0, lsl #16
    4b84:	0a3a1200 	beq	e8938c <__RW_SIZE__+0xe88e04>
    4b88:	2d010000 	stccs	0, cr0, [r1, #-0]
    4b8c:	00000073 	andeq	r0, r0, r3, ror r0
    4b90:	00001993 	muleq	r0, r3, r9
    4b94:	006e460e 	rsbeq	r4, lr, lr, lsl #12
    4b98:	00020508 	andeq	r0, r2, r8, lsl #10
    4b9c:	6e521300 	cdpvs	3, 5, cr1, cr2, cr0, {0}
    4ba0:	04ed0800 	strbteq	r0, [sp], #2048	; 0x800
    4ba4:	02cb0000 	sbceq	r0, fp, #0
    4ba8:	01100000 	tsteq	r0, r0
    4bac:	28030550 	stmdacs	r3, {r4, r6, r8, sl}
    4bb0:	000800ef 	andeq	r0, r8, pc, ror #1
    4bb4:	006e5813 	rsbeq	r5, lr, r3, lsl r8
    4bb8:	0004ff08 	andeq	pc, r4, r8, lsl #30
    4bbc:	0002de00 	andeq	sp, r2, r0, lsl #28
    4bc0:	50011000 	andpl	r1, r1, r0
    4bc4:	0e003301 	cdpeq	3, 0, cr3, cr0, cr1, {0}
    4bc8:	08006e5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, fp, sp, lr}
    4bcc:	00000510 	andeq	r0, r0, r0, lsl r5
    4bd0:	006e6213 	rsbeq	r6, lr, r3, lsl r2
    4bd4:	00051708 	andeq	r1, r5, r8, lsl #14
    4bd8:	0002fa00 	andeq	pc, r2, r0, lsl #20
    4bdc:	50011000 	andpl	r1, r1, r0
    4be0:	13003101 	movwne	r3, #257	; 0x101
    4be4:	08006e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, sp, lr}
    4be8:	00000528 	andeq	r0, r0, r8, lsr #10
    4bec:	0000030d 	andeq	r0, r0, sp, lsl #6
    4bf0:	01500110 	cmpeq	r0, r0, lsl r1
    4bf4:	6c0e0031 	stcvs	0, cr0, [lr], {49}	; 0x31
    4bf8:	3908006e 	stmdbcc	r8, {r1, r2, r3, r5, r6}
    4bfc:	13000005 	movwne	r0, #5
    4c00:	08006e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, sp, lr}
    4c04:	00000540 	andeq	r0, r0, r0, asr #10
    4c08:	0000032f 	andeq	r0, r0, pc, lsr #6
    4c0c:	02510110 	subseq	r0, r1, #16, 2
    4c10:	01106408 	tsteq	r0, r8, lsl #8
    4c14:	00310150 	eorseq	r0, r1, r0, asr r1
    4c18:	006e9613 	rsbeq	r9, lr, r3, lsl r6
    4c1c:	00055608 	andeq	r5, r5, r8, lsl #12
    4c20:	00037200 	andeq	r7, r3, r0, lsl #4
    4c24:	53011000 	movwpl	r1, #4096	; 0x1000
    4c28:	ffff0a03 			; <UNDEFINED> instruction: 0xffff0a03
    4c2c:	01520110 	cmpeq	r2, r0, lsl r1
    4c30:	5101104f 	tstpl	r1, pc, asr #32
    4c34:	01103001 	tsteq	r0, r1
    4c38:	10300150 	eorsne	r0, r0, r0, asr r1
    4c3c:	020c7d02 	andeq	r7, ip, #2, 26	; 0x80
    4c40:	02106408 	andseq	r6, r0, #8, 8	; 0x8000000
    4c44:	0305087d 	movweq	r0, #22653	; 0x587d
    4c48:	0800ef38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp, sp, lr, pc}
    4c4c:	047d0210 	ldrbteq	r0, [sp], #-528	; 0xfffffdf0
    4c50:	10007602 	andne	r7, r0, r2, lsl #12
    4c54:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    4c58:	13000076 	movwne	r0, #118	; 0x76
    4c5c:	08006ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, sp, lr}
    4c60:	00000586 	andeq	r0, r0, r6, lsl #11
    4c64:	0000039d 	muleq	r0, sp, r3
    4c68:	01530110 	cmpeq	r3, r0, lsl r1
    4c6c:	5201103a 	andpl	r1, r1, #58	; 0x3a
    4c70:	01103a01 	tsteq	r0, r1, lsl #20
    4c74:	e5080251 	str	r0, [r8, #-593]	; 0xfffffdaf
    4c78:	02500110 	subseq	r0, r0, #16, 2
    4c7c:	02109b08 	andseq	r9, r0, #8, 22	; 0x2000
    4c80:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    4c84:	b6130000 	ldrlt	r0, [r3], -r0
    4c88:	8608006e 	strhi	r0, [r8], -lr, rrx
    4c8c:	c7000005 	strgt	r0, [r0, -r5]
    4c90:	10000003 	andne	r0, r0, r3
    4c94:	44015301 	strmi	r5, [r1], #-769	; 0xfffffcff
    4c98:	01520110 	cmpeq	r2, r0, lsl r1
    4c9c:	51011044 	tstpl	r1, r4, asr #32
    4ca0:	10730802 	rsbsne	r0, r3, r2, lsl #16
    4ca4:	30015001 	andcc	r5, r1, r1
    4ca8:	007d0210 	rsbseq	r0, sp, r0, lsl r2
    4cac:	00007402 	andeq	r7, r0, r2, lsl #8
    4cb0:	006f2013 	rsbeq	r2, pc, r3, lsl r0	; <UNPREDICTABLE>
    4cb4:	0004ed08 	andeq	lr, r4, r8, lsl #26
    4cb8:	0003de00 	andeq	sp, r3, r0, lsl #28
    4cbc:	50011000 	andpl	r1, r1, r0
    4cc0:	ef440305 	svc	0x00440305
    4cc4:	13000800 	movwne	r0, #2048	; 0x800
    4cc8:	08006f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, sp, lr}
    4ccc:	00000556 	andeq	r0, r0, r6, asr r5
    4cd0:	0000041b 	andeq	r0, r0, fp, lsl r4
    4cd4:	02530110 	subseq	r0, r3, #16, 2
    4cd8:	01100078 	tsteq	r0, r8, ror r0
    4cdc:	000a0352 	andeq	r0, sl, r2, asr r3
    4ce0:	510110f8 	strdpl	r1, [r1, -r8]
    4ce4:	10007802 	andne	r7, r0, r2, lsl #16
    4ce8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4cec:	7d0210c8 	stcvc	0, cr1, [r2, #-800]	; 0xfffffce0
    4cf0:	48910308 	ldmmi	r1, {r3, r8, r9}
    4cf4:	7d021006 	stcvc	0, cr1, [r2, #-24]	; 0xffffffe8
    4cf8:	00760204 	rsbseq	r0, r6, r4, lsl #4
    4cfc:	007d0210 	rsbseq	r0, sp, r0, lsl r2
    4d00:	00007602 	andeq	r7, r0, r2, lsl #12
    4d04:	006f4e13 	rsbeq	r4, pc, r3, lsl lr	; <UNPREDICTABLE>
    4d08:	00058608 	andeq	r8, r5, r8, lsl #12
    4d0c:	00043f00 	andeq	r3, r4, r0, lsl #30
    4d10:	53011000 	movwpl	r1, #4096	; 0x1000
    4d14:	01103a01 	tsteq	r0, r1, lsl #20
    4d18:	103a0152 	eorsne	r0, sl, r2, asr r1
    4d1c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    4d20:	500110e5 	andpl	r1, r1, r5, ror #1
    4d24:	009b0802 	addseq	r0, fp, r2, lsl #16
    4d28:	006f900f 	rsbeq	r9, pc, pc
    4d2c:	00058608 	andeq	r8, r5, r8, lsl #12
    4d30:	53011000 	movwpl	r1, #4096	; 0x1000
    4d34:	01104401 	tsteq	r0, r1, lsl #8
    4d38:	10440152 	subne	r0, r4, r2, asr r1
    4d3c:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    4d40:	50011073 	andpl	r1, r1, r3, ror r0
    4d44:	10007702 	andne	r7, r0, r2, lsl #14
    4d48:	0a007d02 	beq	24158 <__RW_SIZE__+0x23bd0>
    4d4c:	31065091 	swpcc	r5, r1, [r6]
    4d50:	22007924 	andcs	r7, r0, #36, 18	; 0x90000
    4d54:	00000294 	muleq	r0, r4, r2
    4d58:	0000450a 	andeq	r4, r0, sl, lsl #10
    4d5c:	00047f00 	andeq	r7, r4, r0, lsl #30
    4d60:	00810b00 	addeq	r0, r1, r0, lsl #22
    4d64:	00050000 	andeq	r0, r5, r0
    4d68:	000aaa14 	andeq	sl, sl, r4, lsl sl
    4d6c:	900c0100 	andls	r0, ip, r0, lsl #2
    4d70:	05000004 	streq	r0, [r0, #-4]
    4d74:	00ec5803 	rsceq	r5, ip, r3, lsl #16
    4d78:	046f0908 	strbteq	r0, [pc], #-2312	; 4d80 <__RW_SIZE__+0x47f8>
    4d7c:	51150000 	tstpl	r5, r0
    4d80:	03000000 	movweq	r0, #0
    4d84:	04a106ce 	strteq	r0, [r1], #1742	; 0x6ce
    4d88:	73050000 	movwvc	r0, #20480	; 0x5000
    4d8c:	16000000 	strne	r0, [r0], -r0
    4d90:	00000ab8 			; <UNDEFINED> instruction: 0x00000ab8
    4d94:	04a10e01 	strteq	r0, [r1], #3585	; 0xe01
    4d98:	7b160000 	blvc	584da0 <__RW_SIZE__+0x584818>
    4d9c:	0100000a 	tsteq	r0, sl
    4da0:	0004a10f 	andeq	sl, r4, pc, lsl #2
    4da4:	0ab01600 	beq	fec0a5ac <MSP_BASE+0xdec055ac>
    4da8:	10010000 	andne	r0, r1, r0
    4dac:	000004a1 	andeq	r0, r0, r1, lsr #9
    4db0:	00014c17 	andeq	r4, r1, r7, lsl ip
    4db4:	17220400 	strne	r0, [r2, -r0, lsl #8]!
    4db8:	00000a31 	andeq	r0, r0, r1, lsr sl
    4dbc:	08170a04 	ldmdaeq	r7, {r2, r9, fp}
    4dc0:	04000008 	streq	r0, [r0], #-8
    4dc4:	0ad91826 	beq	ff64ae64 <MSP_BASE+0xdf645e64>
    4dc8:	16040000 	strne	r0, [r4], -r0
    4dcc:	000004ed 	andeq	r0, r0, sp, ror #9
    4dd0:	00007319 	andeq	r7, r0, r9, lsl r3
    4dd4:	3c180000 	ldccc	0, cr0, [r8], {-0}
    4dd8:	0400000b 	streq	r0, [r0], #-11
    4ddc:	0004ff19 	andeq	pc, r4, r9, lsl pc	; <UNPREDICTABLE>
    4de0:	01ed1900 	mvneq	r1, r0, lsl #18
    4de4:	001a0000 	andseq	r0, sl, r0
    4de8:	00086a18 	andeq	r6, r8, r8, lsl sl
    4dec:	100c0500 	andne	r0, ip, r0, lsl #10
    4df0:	19000005 	stmdbne	r0, {r0, r2}
    4df4:	00000073 	andeq	r0, r0, r3, ror r0
    4df8:	04431700 	strbeq	r1, [r3], #-1792	; 0xfffff900
    4dfc:	43040000 	movwmi	r0, #16384	; 0x4000
    4e00:	00074618 	andeq	r4, r7, r8, lsl r6
    4e04:	28480400 	stmdacs	r8, {sl}^
    4e08:	19000005 	stmdbne	r0, {r0, r2}
    4e0c:	00000073 	andeq	r0, r0, r3, ror r0
    4e10:	0b161800 	bleq	58ae18 <__RW_SIZE__+0x58a890>
    4e14:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    4e18:	00000539 	andeq	r0, r0, r9, lsr r5
    4e1c:	00007319 	andeq	r7, r0, r9, lsl r3
    4e20:	4e170000 	cdpmi	0, 1, cr0, cr7, cr0, {0}
    4e24:	05000008 	streq	r0, [r0, #-8]
    4e28:	0a501811 	beq	140ae74 <__RW_SIZE__+0x140a8ec>
    4e2c:	2f040000 	svccs	0x00040000
    4e30:	00000556 	andeq	r0, r0, r6, asr r5
    4e34:	00007319 	andeq	r7, r0, r9, lsl r3
    4e38:	00731900 	rsbseq	r1, r3, r0, lsl #18
    4e3c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4e40:	0000033d 	andeq	r0, r0, sp, lsr r3
    4e44:	05860906 	streq	r0, [r6, #2310]	; 0x906
    4e48:	73190000 	tstvc	r9, #0
    4e4c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e50:	00000073 	andeq	r0, r0, r3, ror r0
    4e54:	00007319 	andeq	r7, r0, r9, lsl r3
    4e58:	00731900 	rsbseq	r1, r3, r0, lsl #18
    4e5c:	73190000 	tstvc	r9, #0
    4e60:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e64:	00000073 	andeq	r0, r0, r3, ror r0
    4e68:	0001fa19 	andeq	pc, r1, r9, lsl sl	; <UNPREDICTABLE>
    4e6c:	1b001a00 	blne	b674 <__RW_SIZE__+0xb0ec>
    4e70:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    4e74:	73191405 	tstvc	r9, #83886080	; 0x5000000
    4e78:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4e7c:	00000073 	andeq	r0, r0, r3, ror r0
    4e80:	00007319 	andeq	r7, r0, r9, lsl r3
    4e84:	00731900 	rsbseq	r1, r3, r0, lsl #18
    4e88:	45190000 	ldrmi	r0, [r9, #-0]
    4e8c:	00000000 	andeq	r0, r0, r0
    4e90:	0000fb00 	andeq	pc, r0, r0, lsl #22
    4e94:	e1000400 	tst	r0, r0, lsl #8
    4e98:	0400000c 	streq	r0, [r0], #-12
    4e9c:	0000ad01 	andeq	sl, r0, r1, lsl #26
    4ea0:	0b650100 	bleq	19452a8 <__RW_SIZE__+0x1944d20>
    4ea4:	01570000 	cmpeq	r7, r0
    4ea8:	6fa80000 	svcvs	0x00a80000
    4eac:	00440800 	subeq	r0, r4, r0, lsl #16
    4eb0:	1a5f0000 	bne	17c4eb8 <__RW_SIZE__+0x17c4930>
    4eb4:	01020000 	mrseq	r0, (UNDEF: 2)
    4eb8:	00006806 	andeq	r6, r0, r6, lsl #16
    4ebc:	08010200 	stmdaeq	r1, {r9}
    4ec0:	00000066 	andeq	r0, r0, r6, rrx
    4ec4:	a2050202 	andge	r0, r5, #536870912	; 0x20000000
    4ec8:	02000001 	andeq	r0, r0, #1
    4ecc:	003e0702 	eorseq	r0, lr, r2, lsl #14
    4ed0:	04020000 	streq	r0, [r2], #-0
    4ed4:	00000505 	andeq	r0, r0, r5, lsl #10
    4ed8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4edc:	0000009b 	muleq	r0, fp, r0
    4ee0:	00050802 	andeq	r0, r5, r2, lsl #16
    4ee4:	02000000 	andeq	r0, r0, #0
    4ee8:	00960708 	addseq	r0, r6, r8, lsl #14
    4eec:	04030000 	streq	r0, [r3], #-0
    4ef0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4ef4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4ef8:	000000a0 	andeq	r0, r0, r0, lsr #1
    4efc:	43070402 	movwmi	r0, #29698	; 0x7402
    4f00:	04000001 	streq	r0, [r0], #-1
    4f04:	00007804 	andeq	r7, r0, r4, lsl #16
    4f08:	08010200 	stmdaeq	r1, {r9}
    4f0c:	0000006f 	andeq	r0, r0, pc, rrx
    4f10:	000b6f05 	andeq	r6, fp, r5, lsl #30
    4f14:	72030100 	andvc	r0, r3, #0, 2
    4f18:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    4f1c:	4408006f 	strmi	r0, [r8], #-111	; 0xffffff91
    4f20:	01000000 	mrseq	r0, (UNDEF: 0)
    4f24:	0000e29c 	muleq	r0, ip, r2
    4f28:	6e690600 	cdpvs	6, 6, cr0, cr9, cr0, {0}
    4f2c:	03010063 	movweq	r0, #4195	; 0x1063
    4f30:	0000005d 	andeq	r0, r0, sp, asr r0
    4f34:	000019c4 	andeq	r1, r0, r4, asr #19
    4f38:	000b7507 	andeq	r7, fp, r7, lsl #10
    4f3c:	2c050100 	stfcss	f0, [r5], {-0}
    4f40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f44:	00000b4e 	andeq	r0, r0, lr, asr #22
    4f48:	00720601 	rsbseq	r0, r2, r1, lsl #12
    4f4c:	03050000 	movweq	r0, #20480	; 0x5000
    4f50:	20000598 	mulcs	r0, r8, r5
    4f54:	000b5309 	andeq	r5, fp, r9, lsl #6
    4f58:	72080100 	andvc	r0, r8, #0, 2
    4f5c:	13000000 	movwne	r0, #0
    4f60:	0900001a 	stmdbeq	r0, {r1, r3, r4}
    4f64:	00000b5c 	andeq	r0, r0, ip, asr fp
    4f68:	00720901 	rsbseq	r0, r2, r1, lsl #18
    4f6c:	1a260000 	bne	984f74 <__RW_SIZE__+0x9849ec>
    4f70:	0a000000 	beq	4f78 <__RW_SIZE__+0x49f0>
    4f74:	00000051 	andeq	r0, r0, r1, asr r0
    4f78:	ee06ce02 	cdp	14, 0, cr12, cr6, cr2, {0}
    4f7c:	0b000000 	bleq	4f84 <__RW_SIZE__+0x49fc>
    4f80:	0000005d 	andeq	r0, r0, sp, asr r0
    4f84:	000b7507 	andeq	r7, fp, r7, lsl #10
    4f88:	2c050100 	stfcss	f0, [r5], {-0}
    4f8c:	00000000 	andeq	r0, r0, r0
    4f90:	00001216 	andeq	r1, r0, r6, lsl r2
    4f94:	0d860004 	stceq	0, cr0, [r6, #16]
    4f98:	01040000 	mrseq	r0, (UNDEF: 4)
    4f9c:	000000ad 	andeq	r0, r0, sp, lsr #1
    4fa0:	000e6c01 	andeq	r6, lr, r1, lsl #24
    4fa4:	00015700 	andeq	r5, r1, r0, lsl #14
    4fa8:	006fec00 	rsbeq	lr, pc, r0, lsl #24
    4fac:	00044208 	andeq	r4, r4, r8, lsl #4
    4fb0:	001ab500 	andseq	fp, sl, r0, lsl #10
    4fb4:	04320200 	ldrteq	r0, [r2], #-512	; 0xfffffe00
    4fb8:	03010000 	movweq	r0, #4096	; 0x1000
    4fbc:	000164a8 	andeq	r6, r1, r8, lsr #9
    4fc0:	065d0300 	ldrbeq	r0, [sp], -r0, lsl #6
    4fc4:	03720000 	cmneq	r2, #0
    4fc8:	0000045a 	andeq	r0, r0, sl, asr r4
    4fcc:	059a0374 	ldreq	r0, [sl, #884]	; 0x374
    4fd0:	03750000 	cmneq	r5, #0
    4fd4:	0000071d 	andeq	r0, r0, sp, lsl r7
    4fd8:	073a0376 			; <UNDEFINED> instruction: 0x073a0376
    4fdc:	037b0000 	cmneq	fp, #0
    4fe0:	0000070b 	andeq	r0, r0, fp, lsl #14
    4fe4:	0437037c 	ldrteq	r0, [r7], #-892	; 0xfffffc84
    4fe8:	037e0000 	cmneq	lr, #0
    4fec:	000006ce 	andeq	r0, r0, lr, asr #13
    4ff0:	0590037f 	ldreq	r0, [r0, #895]	; 0x37f
    4ff4:	03000000 	movweq	r0, #0
    4ff8:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
    4ffc:	07be0301 	ldreq	r0, [lr, r1, lsl #6]!
    5000:	03020000 	movweq	r0, #8192	; 0x2000
    5004:	00000609 	andeq	r0, r0, r9, lsl #12
    5008:	040d0303 	streq	r0, [sp], #-771	; 0xfffffcfd
    500c:	03040000 	movweq	r0, #16384	; 0x4000
    5010:	00000451 	andeq	r0, r0, r1, asr r4
    5014:	041d0305 	ldreq	r0, [sp], #-773	; 0xfffffcfb
    5018:	03060000 	movweq	r0, #24576	; 0x6000
    501c:	00000683 	andeq	r0, r0, r3, lsl #13
    5020:	05000307 	streq	r0, [r0, #-775]	; 0xfffffcf9
    5024:	03080000 	movweq	r0, #32768	; 0x8000
    5028:	0000077c 	andeq	r0, r0, ip, ror r7
    502c:	05a80309 	streq	r0, [r8, #777]!	; 0x309
    5030:	030a0000 	movweq	r0, #40960	; 0xa000
    5034:	00000567 	andeq	r0, r0, r7, ror #10
    5038:	03fa030b 	mvnseq	r0, #738197504	; 0x2c000000
    503c:	030c0000 	movweq	r0, #49152	; 0xc000
    5040:	000005d7 	ldrdeq	r0, [r0], -r7
    5044:	0496030d 	ldreq	r0, [r6], #781	; 0x30d
    5048:	030e0000 	movweq	r0, #57344	; 0xe000
    504c:	00000769 	andeq	r0, r0, r9, ror #14
    5050:	0535030f 	ldreq	r0, [r5, #-783]!	; 0xfffffcf1
    5054:	03100000 	tsteq	r0, #0
    5058:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    505c:	078c0311 	usada8eq	ip, r1, r3, r0
    5060:	03120000 	tsteq	r2, #0
    5064:	000004d6 	ldrdeq	r0, [r0], -r6
    5068:	03a80313 			; <UNDEFINED> instruction: 0x03a80313
    506c:	03140000 	tsteq	r4, #0
    5070:	000004c8 	andeq	r0, r0, r8, asr #9
    5074:	03c20315 	biceq	r0, r2, #1409286144	; 0x54000000
    5078:	03160000 	tsteq	r6, #0
    507c:	0000072d 	andeq	r0, r0, sp, lsr #14
    5080:	04750317 	ldrbteq	r0, [r5], #-791	; 0xfffffce9
    5084:	03180000 	tsteq	r8, #0
    5088:	000005f7 	strdeq	r0, [r0], -r7
    508c:	06980319 			; <UNDEFINED> instruction: 0x06980319
    5090:	031a0000 	tsteq	sl, #0
    5094:	00000671 	andeq	r0, r0, r1, ror r6
    5098:	06e7031b 	usateq	r0, #7, fp, lsl #6
    509c:	031c0000 	tsteq	ip, #0
    50a0:	0000055d 	andeq	r0, r0, sp, asr r5
    50a4:	03f0031d 	mvnseq	r0, #1946157056	; 0x74000000
    50a8:	031e0000 	tsteq	lr, #0
    50ac:	000005ea 	andeq	r0, r0, sl, ror #11
    50b0:	06b7031f 	ssateq	r0, #24, pc, lsl #6	; <UNPREDICTABLE>
    50b4:	03200000 	teqeq	r0, #0
    50b8:	0000051b 	andeq	r0, r0, fp, lsl r5
    50bc:	03e30321 	mvneq	r0, #-2080374784	; 0x84000000
    50c0:	03220000 	teqeq	r2, #0
    50c4:	0000048c 	andeq	r0, r0, ip, lsl #9
    50c8:	075a0323 	ldrbeq	r0, [sl, -r3, lsr #6]
    50cc:	03240000 	teqeq	r4, #0
    50d0:	00000651 	andeq	r0, r0, r1, asr r6
    50d4:	04f40325 	ldrbteq	r0, [r4], #805	; 0x325
    50d8:	03260000 	teqeq	r6, #0
    50dc:	00000798 	muleq	r0, r8, r7
    50e0:	04280327 	strteq	r0, [r8], #-807	; 0xfffffcd9
    50e4:	03280000 	teqeq	r8, #0
    50e8:	000007cf 	andeq	r0, r0, pc, asr #15
    50ec:	05810329 	streq	r0, [r1, #809]	; 0x329
    50f0:	002a0000 	eoreq	r0, sl, r0
    50f4:	0004ea04 	andeq	lr, r4, r4, lsl #20
    50f8:	01d90300 	bicseq	r0, r9, r0, lsl #6
    50fc:	00000025 	andeq	r0, r0, r5, lsr #32
    5100:	68060105 	stmdavs	r6, {r0, r2, r8}
    5104:	06000000 	streq	r0, [r0], -r0
    5108:	0000027c 	andeq	r0, r0, ip, ror r2
    510c:	01822a04 	orreq	r2, r2, r4, lsl #20
    5110:	01050000 	mrseq	r0, (UNDEF: 5)
    5114:	00006608 	andeq	r6, r0, r8, lsl #12
    5118:	05020500 	streq	r0, [r2, #-1280]	; 0xfffffb00
    511c:	000001a2 	andeq	r0, r0, r2, lsr #3
    5120:	0002d906 	andeq	sp, r2, r6, lsl #18
    5124:	9b360400 	blls	d8612c <__RW_SIZE__+0xd85ba4>
    5128:	05000001 	streq	r0, [r0, #-1]
    512c:	003e0702 	eorseq	r0, lr, r2, lsl #14
    5130:	04050000 	streq	r0, [r5], #-0
    5134:	00000505 	andeq	r0, r0, r5, lsl #10
    5138:	01b80600 			; <UNDEFINED> instruction: 0x01b80600
    513c:	50040000 	andpl	r0, r4, r0
    5140:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    5144:	9b070405 	blls	1c6160 <__RW_SIZE__+0x1c5bd8>
    5148:	05000000 	streq	r0, [r0, #-0]
    514c:	00000508 	andeq	r0, r0, r8, lsl #10
    5150:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    5154:	00009607 	andeq	r9, r0, r7, lsl #12
    5158:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
    515c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5160:	a0070405 	andge	r0, r7, r5, lsl #8
    5164:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5168:	84020e04 	strhi	r0, [r2], #-3588	; 0xfffff1fc
    516c:	00000285 	andeq	r0, r0, r5, lsl #5
    5170:	00047009 	andeq	r7, r4, r9
    5174:	9c860200 	sfmls	f0, 4, [r6], {0}
    5178:	00000002 	andeq	r0, r0, r2
    517c:	00061209 	andeq	r1, r6, r9, lsl #4
    5180:	a1870200 	orrge	r0, r7, r0, lsl #4
    5184:	20000002 	andcs	r0, r0, r2
    5188:	00075509 	andeq	r5, r7, r9, lsl #10
    518c:	b1880200 	orrlt	r0, r8, r0, lsl #4
    5190:	80000002 	andhi	r0, r0, r2
    5194:	00048309 	andeq	r8, r4, r9, lsl #6
    5198:	a1890200 	orrge	r0, r9, r0, lsl #4
    519c:	a0000002 	andge	r0, r0, r2
    51a0:	0007870a 	andeq	r8, r7, sl, lsl #14
    51a4:	b68a0200 	strlt	r0, [sl], r0, lsl #4
    51a8:	00000002 	andeq	r0, r0, r2
    51ac:	061c0a01 	ldreq	r0, [ip], -r1, lsl #20
    51b0:	8b020000 	blhi	851b8 <__RW_SIZE__+0x84c30>
    51b4:	000002a1 	andeq	r0, r0, r1, lsr #5
    51b8:	bc0a0120 	stflts	f0, [sl], {32}
    51bc:	02000005 	andeq	r0, r0, #5
    51c0:	0002bb8c 	andeq	fp, r2, ip, lsl #23
    51c4:	0a018000 	beq	651cc <__RW_SIZE__+0x64c44>
    51c8:	00000626 	andeq	r0, r0, r6, lsr #12
    51cc:	02a18d02 	adceq	r8, r1, #2, 26	; 0x80
    51d0:	01a00000 	moveq	r0, r0
    51d4:	0007640a 	andeq	r6, r7, sl, lsl #8
    51d8:	c08e0200 	addgt	r0, lr, r0, lsl #4
    51dc:	00000002 	andeq	r0, r0, r2
    51e0:	06300a02 	ldrteq	r0, [r0], -r2, lsl #20
    51e4:	8f020000 	svchi	0x00020000
    51e8:	000002c5 	andeq	r0, r0, r5, asr #5
    51ec:	490b0220 	stmdbmi	fp, {r5, r9}
    51f0:	90020050 	andls	r0, r2, r0, asr r0
    51f4:	000002e5 	andeq	r0, r0, r5, ror #5
    51f8:	3a0a0300 	bcc	285e00 <__RW_SIZE__+0x285878>
    51fc:	02000006 	andeq	r0, r0, #6
    5200:	0002ea91 	muleq	r2, r1, sl
    5204:	0a03f000 	beq	10120c <__RW_SIZE__+0x100c84>
    5208:	00000604 	andeq	r0, r0, r4, lsl #12
    520c:	02fb9202 	rscseq	r9, fp, #536870912	; 0x20000000
    5210:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5214:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    5218:	02950000 	addseq	r0, r5, #0
    521c:	950d0000 	strls	r0, [sp, #-0]
    5220:	07000002 	streq	r0, [r0, -r2]
    5224:	07040500 	streq	r0, [r4, -r0, lsl #10]
    5228:	00000143 	andeq	r0, r0, r3, asr #2
    522c:	0002850e 	andeq	r8, r2, lr, lsl #10
    5230:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    5234:	02b10000 	adcseq	r0, r1, #0
    5238:	950d0000 	strls	r0, [sp, #-0]
    523c:	17000002 	strne	r0, [r0, -r2]
    5240:	02850e00 	addeq	r0, r5, #0, 28
    5244:	850e0000 	strhi	r0, [lr, #-0]
    5248:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    524c:	00000285 	andeq	r0, r0, r5, lsl #5
    5250:	0002850e 	andeq	r8, r2, lr, lsl #10
    5254:	01a90c00 			; <UNDEFINED> instruction: 0x01a90c00
    5258:	02d50000 	sbcseq	r0, r5, #0
    525c:	950d0000 	strls	r0, [sp, #-0]
    5260:	37000002 	strcc	r0, [r0, -r2]
    5264:	01770c00 	cmneq	r7, r0, lsl #24
    5268:	02e50000 	rsceq	r0, r5, #0
    526c:	950d0000 	strls	r0, [sp, #-0]
    5270:	ef000002 	svc	0x00000002
    5274:	02d50e00 	sbcseq	r0, r5, #0, 28
    5278:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    527c:	fb000001 	blx	528a <__RW_SIZE__+0x4d02>
    5280:	0f000002 	svceq	0x00000002
    5284:	00000295 	muleq	r0, r5, r2
    5288:	0e000283 	cdpeq	2, 0, cr0, cr0, cr3, {4}
    528c:	000001a9 	andeq	r0, r0, r9, lsr #3
    5290:	00068e06 	andeq	r8, r6, r6, lsl #28
    5294:	d7930200 	ldrle	r0, [r3, r0, lsl #4]
    5298:	10000001 	andne	r0, r0, r1
    529c:	f89b0274 			; <UNDEFINED> instruction: 0xf89b0274
    52a0:	09000003 	stmdbeq	r0, {r0, r1}
    52a4:	00000b03 	andeq	r0, r0, r3, lsl #22
    52a8:	03f89d02 	mvnseq	r9, #2, 26	; 0x80
    52ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    52b0:	00000ae9 	andeq	r0, r0, r9, ror #21
    52b4:	02fb9e02 	rscseq	r9, fp, #2, 28
    52b8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    52bc:	00000a9c 	muleq	r0, ip, sl
    52c0:	02fb9f02 	rscseq	r9, fp, #2, 30
    52c4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    52c8:	00000aee 	andeq	r0, r0, lr, ror #21
    52cc:	02fba002 	rscseq	sl, fp, #2
    52d0:	110c0000 	mrsne	r0, (UNDEF: 12)
    52d4:	00524353 	subseq	r4, r2, r3, asr r3
    52d8:	02fba102 	rscseq	sl, fp, #-2147483648	; 0x80000000
    52dc:	11100000 	tstne	r0, r0
    52e0:	00524343 	subseq	r4, r2, r3, asr #6
    52e4:	02fba202 	rscseq	sl, fp, #536870912	; 0x20000000
    52e8:	11140000 	tstne	r4, r0
    52ec:	00504853 	subseq	r4, r0, r3, asr r8
    52f0:	040da302 	streq	sl, [sp], #-770	; 0xfffffcfe
    52f4:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    52f8:	00000a4a 	andeq	r0, r0, sl, asr #20
    52fc:	02fba402 	rscseq	sl, fp, #33554432	; 0x2000000
    5300:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    5304:	00000a76 	andeq	r0, r0, r6, ror sl
    5308:	02fba502 	rscseq	sl, fp, #8388608	; 0x800000
    530c:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
    5310:	00000aa1 	andeq	r0, r0, r1, lsr #21
    5314:	02fba602 	rscseq	sl, fp, #2097152	; 0x200000
    5318:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
    531c:	00000ae4 	andeq	r0, r0, r4, ror #21
    5320:	02fba702 	rscseq	sl, fp, #524288	; 0x80000
    5324:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    5328:	00000b10 	andeq	r0, r0, r0, lsl fp
    532c:	02fba802 	rscseq	sl, fp, #131072	; 0x20000
    5330:	09340000 	ldmdbeq	r4!, {}	; <UNPREDICTABLE>
    5334:	00000af9 	strdeq	r0, [r0], -r9
    5338:	02fba902 	rscseq	sl, fp, #32768	; 0x8000
    533c:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
    5340:	00000b49 	andeq	r0, r0, r9, asr #22
    5344:	02fbaa02 	rscseq	sl, fp, #8192	; 0x2000
    5348:	113c0000 	teqne	ip, r0
    534c:	00524650 	subseq	r4, r2, r0, asr r6
    5350:	0422ab02 	strteq	sl, [r2], #-2818	; 0xfffff4fe
    5354:	11400000 	mrsne	r0, (UNDEF: 64)
    5358:	00524644 	subseq	r4, r2, r4, asr #12
    535c:	03f8ac02 	mvnseq	sl, #512	; 0x200
    5360:	11480000 	mrsne	r0, (UNDEF: 72)
    5364:	00524441 	subseq	r4, r2, r1, asr #8
    5368:	03f8ad02 	mvnseq	sl, #2, 26	; 0x80
    536c:	094c0000 	stmdbeq	ip, {}^	; <UNPREDICTABLE>
    5370:	00000a45 	andeq	r0, r0, r5, asr #20
    5374:	043cae02 	ldrteq	sl, [ip], #-3586	; 0xfffff1fe
    5378:	09500000 	ldmdbeq	r0, {}^	; <UNPREDICTABLE>
    537c:	00000af4 	strdeq	r0, [r0], -r4
    5380:	0456af02 	ldrbeq	sl, [r6], #-3842	; 0xfffff0fe
    5384:	00600000 	rsbeq	r0, r0, r0
    5388:	0002fb12 	andeq	pc, r2, r2, lsl fp	; <UNPREDICTABLE>
    538c:	01770c00 	cmneq	r7, r0, lsl #24
    5390:	040d0000 	streq	r0, [sp], #-0
    5394:	950d0000 	strls	r0, [sp, #-0]
    5398:	0b000002 	bleq	53a8 <__RW_SIZE__+0x4e20>
    539c:	03fd0e00 	mvnseq	r0, #0, 28
    53a0:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    53a4:	22000001 	andcs	r0, r0, #1
    53a8:	0d000004 	stceq	0, cr0, [r0, #-16]
    53ac:	00000295 	muleq	r0, r5, r2
    53b0:	27120001 	ldrcs	r0, [r2, -r1]
    53b4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    53b8:	00000412 	andeq	r0, r0, r2, lsl r4
    53bc:	0001a90c 	andeq	sl, r1, ip, lsl #18
    53c0:	00043c00 	andeq	r3, r4, r0, lsl #24
    53c4:	02950d00 	addseq	r0, r5, #0, 26
    53c8:	00030000 	andeq	r0, r3, r0
    53cc:	00044112 	andeq	r4, r4, r2, lsl r1
    53d0:	042c0e00 	strteq	r0, [ip], #-3584	; 0xfffff200
    53d4:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
    53d8:	56000001 	strpl	r0, [r0], -r1
    53dc:	0d000004 	stceq	0, cr0, [r0, #-16]
    53e0:	00000295 	muleq	r0, r5, r2
    53e4:	5b120004 	blpl	4853fc <__RW_SIZE__+0x484e74>
    53e8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    53ec:	00000446 	andeq	r0, r0, r6, asr #8
    53f0:	000a6d06 	andeq	r6, sl, r6, lsl #26
    53f4:	0bb00200 	bleq	fec05bfc <MSP_BASE+0xdec00bfc>
    53f8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    53fc:	00000190 	muleq	r0, r0, r1
    5400:	77031813 	smladvc	r3, r3, r8, r1
    5404:	0004c703 	andeq	ip, r4, r3, lsl #14
    5408:	4d491400 	cfstrdmi	mvd1, [r9, #-0]
    540c:	79030052 	stmdbvc	r3, {r1, r4, r6}
    5410:	0002fb03 	andeq	pc, r2, r3, lsl #22
    5414:	45140000 	ldrmi	r0, [r4, #-0]
    5418:	0300524d 	movweq	r5, #589	; 0x24d
    541c:	02fb037a 	rscseq	r0, fp, #-402653183	; 0xe8000001
    5420:	15040000 	strne	r0, [r4, #-0]
    5424:	0000067e 	andeq	r0, r0, lr, ror r6
    5428:	fb037b03 	blx	e403e <__RW_SIZE__+0xe3ab6>
    542c:	08000002 	stmdaeq	r0, {r1}
    5430:	0006f115 	andeq	pc, r6, r5, lsl r1	; <UNPREDICTABLE>
    5434:	037c0300 	cmneq	ip, #0, 6
    5438:	000002fb 	strdeq	r0, [r0], -fp
    543c:	06e1150c 	strbteq	r1, [r1], ip, lsl #10
    5440:	7d030000 	stcvc	0, cr0, [r3, #-0]
    5444:	0002fb03 	andeq	pc, r2, r3, lsl #22
    5448:	50141000 	andspl	r1, r4, r0
    544c:	7e030052 	mcrvc	0, 0, r0, cr3, cr2, {2}
    5450:	0002fb03 	andeq	pc, r2, r3, lsl #22
    5454:	04001400 	streq	r1, [r0], #-1024	; 0xfffffc00
    5458:	00000644 	andeq	r0, r0, r4, asr #12
    545c:	70037f03 	andvc	r7, r3, r3, lsl #30
    5460:	13000004 	movwne	r0, #4
    5464:	04a20350 	strteq	r0, [r2], #848	; 0x350
    5468:	000006e4 	andeq	r0, r0, r4, ror #13
    546c:	31524314 	cmpcc	r2, r4, lsl r3
    5470:	04a40300 	strteq	r0, [r4], #768	; 0x300
    5474:	0000046b 	andeq	r0, r0, fp, ror #8
    5478:	06121500 	ldreq	r1, [r2], -r0, lsl #10
    547c:	a5030000 	strge	r0, [r3, #-0]
    5480:	00019004 	andeq	r9, r1, r4
    5484:	43140200 	tstmi	r4, #0, 4
    5488:	03003252 	movweq	r3, #594	; 0x252
    548c:	046b04a6 	strbteq	r0, [fp], #-1190	; 0xfffffb5a
    5490:	15040000 	strne	r0, [r4, #-0]
    5494:	0000096e 	andeq	r0, r0, lr, ror #18
    5498:	9004a703 	andls	sl, r4, r3, lsl #14
    549c:	06000001 	streq	r0, [r0], -r1
    54a0:	000f3e15 	andeq	r3, pc, r5, lsl lr	; <UNPREDICTABLE>
    54a4:	04a80300 	strteq	r0, [r8], #768	; 0x300
    54a8:	0000046b 	andeq	r0, r0, fp, ror #8
    54ac:	061c1508 	ldreq	r1, [ip], -r8, lsl #10
    54b0:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    54b4:	00019004 	andeq	r9, r1, r4
    54b8:	9c150a00 	ldcls	10, cr0, [r5], {-0}
    54bc:	0300000b 	movweq	r0, #11
    54c0:	046b04aa 	strbteq	r0, [fp], #-1194	; 0xfffffb56
    54c4:	150c0000 	strne	r0, [ip, #-0]
    54c8:	00000626 	andeq	r0, r0, r6, lsr #12
    54cc:	9004ab03 	andls	sl, r4, r3, lsl #22
    54d0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    54d4:	00525314 	subseq	r5, r2, r4, lsl r3
    54d8:	6b04ac03 	blvs	1304ec <__RW_SIZE__+0x12ff64>
    54dc:	10000004 	andne	r0, r0, r4
    54e0:	00063015 	andeq	r3, r6, r5, lsl r0
    54e4:	04ad0300 	strteq	r0, [sp], #768	; 0x300
    54e8:	00000190 	muleq	r0, r0, r1
    54ec:	47451412 	smlaldmi	r1, r5, r2, r4
    54f0:	ae030052 	mcrge	0, 0, r0, cr3, cr2, {2}
    54f4:	00046b04 	andeq	r6, r4, r4, lsl #22
    54f8:	3a151400 	bcc	54a500 <__RW_SIZE__+0x549f78>
    54fc:	03000006 	movweq	r0, #6
    5500:	019004af 	orrseq	r0, r0, pc, lsr #9
    5504:	15160000 	ldrne	r0, [r6, #-0]
    5508:	00000c51 	andeq	r0, r0, r1, asr ip
    550c:	6b04b003 	blvs	131520 <__RW_SIZE__+0x130f98>
    5510:	18000004 	stmdane	r0, {r2}
    5514:	00097815 	andeq	r7, r9, r5, lsl r8
    5518:	04b10300 	ldrteq	r0, [r1], #768	; 0x300
    551c:	00000190 	muleq	r0, r0, r1
    5520:	0c57151a 	cfldr64eq	mvdx1, [r7], {26}
    5524:	b2030000 	andlt	r0, r3, #0
    5528:	00046b04 	andeq	r6, r4, r4, lsl #22
    552c:	82151c00 	andshi	r1, r5, #0, 24
    5530:	03000009 	movweq	r0, #9
    5534:	019004b3 			; <UNDEFINED> instruction: 0x019004b3
    5538:	151e0000 	ldrne	r0, [lr, #-0]
    553c:	00000d05 	andeq	r0, r0, r5, lsl #26
    5540:	6b04b403 	blvs	132554 <__RW_SIZE__+0x131fcc>
    5544:	20000004 	andcs	r0, r0, r4
    5548:	00098c15 	andeq	r8, r9, r5, lsl ip
    554c:	04b50300 	ldrteq	r0, [r5], #768	; 0x300
    5550:	00000190 	muleq	r0, r0, r1
    5554:	4e431422 	cdpmi	4, 4, cr1, cr3, cr2, {1}
    5558:	b6030054 			; <UNDEFINED> instruction: 0xb6030054
    555c:	00046b04 	andeq	r6, r4, r4, lsl #22
    5560:	94152400 	ldrls	r2, [r5], #-1024	; 0xfffffc00
    5564:	0300000e 	movweq	r0, #14
    5568:	019004b7 			; <UNDEFINED> instruction: 0x019004b7
    556c:	14260000 	strtne	r0, [r6], #-0
    5570:	00435350 	subeq	r5, r3, r0, asr r3
    5574:	6b04b803 	blvs	133588 <__RW_SIZE__+0x133000>
    5578:	28000004 	stmdacs	r0, {r2}
    557c:	000c8d15 	andeq	r8, ip, r5, lsl sp
    5580:	04b90300 	ldrteq	r0, [r9], #768	; 0x300
    5584:	00000190 	muleq	r0, r0, r1
    5588:	5241142a 	subpl	r1, r1, #704643072	; 0x2a000000
    558c:	ba030052 	blt	c56dc <__RW_SIZE__+0xc5154>
    5590:	00046b04 	andeq	r6, r4, r4, lsl #22
    5594:	98152c00 	ldmdals	r5, {sl, fp, sp}
    5598:	0300000c 	movweq	r0, #12
    559c:	019004bb 			; <UNDEFINED> instruction: 0x019004bb
    55a0:	142e0000 	strtne	r0, [lr], #-0
    55a4:	00524352 	subseq	r4, r2, r2, asr r3
    55a8:	6b04bc03 	blvs	1345bc <__RW_SIZE__+0x134034>
    55ac:	30000004 	andcc	r0, r0, r4
    55b0:	000e5215 	andeq	r5, lr, r5, lsl r2
    55b4:	04bd0300 	ldrteq	r0, [sp], #768	; 0x300
    55b8:	00000190 	muleq	r0, r0, r1
    55bc:	0fb61532 	svceq	0x00b61532
    55c0:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    55c4:	00046b04 	andeq	r6, r4, r4, lsl #22
    55c8:	a3153400 	tstge	r5, #0, 8
    55cc:	0300000c 	movweq	r0, #12
    55d0:	019004bf 			; <UNDEFINED> instruction: 0x019004bf
    55d4:	15360000 	ldrne	r0, [r6, #-0]!
    55d8:	00000c26 	andeq	r0, r0, r6, lsr #24
    55dc:	6b04c003 	blvs	1355f0 <__RW_SIZE__+0x135068>
    55e0:	38000004 	stmdacc	r0, {r2}
    55e4:	000cae15 	andeq	sl, ip, r5, lsl lr
    55e8:	04c10300 	strbeq	r0, [r1], #768	; 0x300
    55ec:	00000190 	muleq	r0, r0, r1
    55f0:	0fbb153a 	svceq	0x00bb153a
    55f4:	c2030000 	andgt	r0, r3, #0
    55f8:	00046b04 	andeq	r6, r4, r4, lsl #22
    55fc:	b9153c00 	ldmdblt	r5, {sl, fp, ip, sp}
    5600:	0300000c 	movweq	r0, #12
    5604:	019004c3 	orrseq	r0, r0, r3, asr #9
    5608:	153e0000 	ldrne	r0, [lr, #-0]!
    560c:	00000fc0 	andeq	r0, r0, r0, asr #31
    5610:	6b04c403 	blvs	136624 <__RW_SIZE__+0x13609c>
    5614:	40000004 	andmi	r0, r0, r4
    5618:	000fc515 	andeq	ip, pc, r5, lsl r5	; <UNPREDICTABLE>
    561c:	04c50300 	strbeq	r0, [r5], #768	; 0x300
    5620:	00000190 	muleq	r0, r0, r1
    5624:	0d931542 	cfldr32eq	mvfx1, [r3, #264]	; 0x108
    5628:	c6030000 	strgt	r0, [r3], -r0
    562c:	00046b04 	andeq	r6, r4, r4, lsl #22
    5630:	d1154400 	tstle	r5, r0, lsl #8
    5634:	0300000c 	movweq	r0, #12
    5638:	019004c7 	orrseq	r0, r0, r7, asr #9
    563c:	14460000 	strbne	r0, [r6], #-0
    5640:	00524344 	subseq	r4, r2, r4, asr #6
    5644:	6b04c803 	blvs	137658 <__RW_SIZE__+0x1370d0>
    5648:	48000004 	stmdami	r0, {r2}
    564c:	000cdc15 	andeq	sp, ip, r5, lsl ip
    5650:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    5654:	00000190 	muleq	r0, r0, r1
    5658:	0f71154a 	svceq	0x0071154a
    565c:	ca030000 	bgt	c5664 <__RW_SIZE__+0xc50dc>
    5660:	00046b04 	andeq	r6, r4, r4, lsl #22
    5664:	e7154c00 	ldr	r4, [r5, -r0, lsl #24]
    5668:	0300000c 	movweq	r0, #12
    566c:	019004cb 	orrseq	r0, r0, fp, asr #9
    5670:	004e0000 	subeq	r0, lr, r0
    5674:	000bfb04 	andeq	pc, fp, r4, lsl #22
    5678:	04cc0300 	strbeq	r0, [ip], #768	; 0x300
    567c:	000004d3 	ldrdeq	r0, [r0], -r3
    5680:	06f60416 	usateq	r0, #22, r6, lsl #8
    5684:	01050000 	mrseq	r0, (UNDEF: 5)
    5688:	00006f08 	andeq	r6, r0, r8, lsl #30
    568c:	03041600 	movweq	r1, #17920	; 0x4600
    5690:	12000007 	andne	r0, r0, #7
    5694:	000006f6 	strdeq	r0, [r0], -r6
    5698:	00054817 	andeq	r4, r5, r7, lsl r8
    569c:	06130200 	ldreq	r0, [r3], -r0, lsl #4
    56a0:	00072203 	andeq	r2, r7, r3, lsl #4
    56a4:	04321800 	ldrteq	r1, [r2], #-2048	; 0xfffff800
    56a8:	13020000 	movwne	r0, #8192	; 0x2000
    56ac:	00016406 	andeq	r6, r1, r6, lsl #8
    56b0:	f3190000 	vhadd.u16	d0, d9, d0
    56b4:	0100000e 	tsteq	r0, lr
    56b8:	006fec25 	rsbeq	lr, pc, r5, lsr #24
    56bc:	00003808 	andeq	r3, r0, r8, lsl #16
    56c0:	819c0100 	orrshi	r0, ip, r0, lsl #2
    56c4:	1a000007 	bne	56e8 <__RW_SIZE__+0x5160>
    56c8:	00001085 	andeq	r1, r0, r5, lsl #1
    56cc:	06fd2501 	ldrbteq	r2, [sp], r1, lsl #10
    56d0:	1a390000 	bne	e456d8 <__RW_SIZE__+0xe45150>
    56d4:	731b0000 	tstvc	fp, #0
    56d8:	25010070 	strcs	r0, [r1, #-112]	; 0xffffff90
    56dc:	00000781 	andeq	r0, r0, r1, lsl #15
    56e0:	00001a65 	andeq	r1, r0, r5, ror #20
    56e4:	0100691c 	tsteq	r0, ip, lsl r9
    56e8:	0001c927 	andeq	ip, r1, r7, lsr #18
    56ec:	001a9100 	andseq	r9, sl, r0, lsl #2
    56f0:	70161d00 	andsvc	r1, r6, r0, lsl #26
    56f4:	11fc0800 	mvnsne	r0, r0, lsl #16
    56f8:	011e0000 	tsteq	lr, r0
    56fc:	7f740252 	svcvc	0x00740252
    5700:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    5704:	011e0076 	tsteq	lr, r6, ror r0
    5708:	5c030550 	cfstr32pl	mvfx0, [r3], {80}	; 0x50
    570c:	000800ef 	andeq	r0, r8, pc, ror #1
    5710:	d0041600 	andle	r1, r4, r0, lsl #12
    5714:	1f000001 	svcne	0x00000001
    5718:	00000f32 	andeq	r0, r0, r2, lsr pc
    571c:	70241c01 	eorvc	r1, r4, r1, lsl #24
    5720:	00320800 	eorseq	r0, r2, r0, lsl #16
    5724:	9c010000 	stcls	0, cr0, [r1], {-0}
    5728:	000007c7 	andeq	r0, r0, r7, asr #15
    572c:	00704020 	rsbseq	r4, r0, r0, lsr #32
    5730:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5734:	0007b300 	andeq	fp, r7, r0, lsl #6
    5738:	50011e00 	andpl	r1, r1, r0, lsl #28
    573c:	ef700305 	svc	0x00700305
    5740:	1d000800 	stcne	8, cr0, [r0, #-0]
    5744:	08007054 	stmdaeq	r0, {r2, r4, r6, ip, sp, lr}
    5748:	000011fc 	strdeq	r1, [r0], -ip
    574c:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    5750:	00ef8803 	rsceq	r8, pc, r3, lsl #16
    5754:	1f000008 	svcne	0x00000008
    5758:	00000b90 	muleq	r0, r0, fp
    575c:	70584801 	subsvc	r4, r8, r1, lsl #16
    5760:	00100800 	andseq	r0, r0, r0, lsl #16
    5764:	9c010000 	stcls	0, cr0, [r1], {-0}
    5768:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    576c:	0070661d 	rsbseq	r6, r0, sp, lsl r6
    5770:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5774:	50011e00 	andpl	r1, r1, r0, lsl #28
    5778:	ef9c0305 	svc	0x009c0305
    577c:	00000800 	andeq	r0, r0, r0, lsl #16
    5780:	000c1921 	andeq	r1, ip, r1, lsr #18
    5784:	012f0100 	teqeq	pc, r0, lsl #2
    5788:	0000081d 	andeq	r0, r0, sp, lsl r8
    578c:	70736d22 	rsbsvc	r6, r3, r2, lsr #26
    5790:	812f0100 	teqhi	pc, r0, lsl #2
    5794:	22000007 	andcs	r0, r0, #7
    5798:	0100726c 	tsteq	r0, ip, ror #4
    579c:	0001d02f 	andeq	sp, r1, pc, lsr #32
    57a0:	73702200 	cmnvc	r0, #0, 4
    57a4:	2f010070 	svccs	0x00010070
    57a8:	00000781 	andeq	r0, r0, r1, lsl #15
    57ac:	0dbf1f00 	ldceq	15, cr1, [pc]	; 57b4 <__RW_SIZE__+0x522c>
    57b0:	55010000 	strpl	r0, [r1, #-0]
    57b4:	08007068 	stmdaeq	r0, {r3, r5, r6, ip, sp, lr}
    57b8:	0000012a 	andeq	r0, r0, sl, lsr #2
    57bc:	0a0a9c01 	beq	2ac7c8 <__RW_SIZE__+0x2ac240>
    57c0:	6d1b0000 	ldcvs	0, cr0, [fp, #-0]
    57c4:	01007073 	tsteq	r0, r3, ror r0
    57c8:	00078155 	andeq	r8, r7, r5, asr r1
    57cc:	001ade00 	andseq	sp, sl, r0, lsl #28
    57d0:	726c1b00 	rsbvc	r1, ip, #0, 22
    57d4:	d0550100 	subsle	r0, r5, r0, lsl #2
    57d8:	15000001 	strne	r0, [r0, #-1]
    57dc:	1b00001b 	blne	5850 <__RW_SIZE__+0x52c8>
    57e0:	00707370 	rsbseq	r7, r0, r0, ror r3
    57e4:	07815501 	streq	r5, [r1, r1, lsl #10]
    57e8:	1b330000 	blne	cc57f0 <__RW_SIZE__+0xcc5268>
    57ec:	f0230000 			; <UNDEFINED> instruction: 0xf0230000
    57f0:	7c000007 	stcvc	0, cr0, [r0], {7}
    57f4:	38080070 	stmdacc	r8, {r4, r5, r6}
    57f8:	01000023 	tsteq	r0, r3, lsr #32
    57fc:	00098359 	andeq	r8, r9, r9, asr r3
    5800:	08112400 	ldmdaeq	r1, {sl, sp}
    5804:	56010000 	strpl	r0, [r1], -r0
    5808:	00080724 	andeq	r0, r8, r4, lsr #14
    580c:	25550100 	ldrbcs	r0, [r5, #-256]	; 0xffffff00
    5810:	000007fc 	strdeq	r0, [r0], -ip
    5814:	00001b51 	andeq	r1, r0, r1, asr fp
    5818:	00708a20 	rsbseq	r8, r0, r0, lsr #20
    581c:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5820:	0008a500 	andeq	sl, r8, r0, lsl #10
    5824:	51011e00 	tstpl	r1, r0, lsl #28
    5828:	1e007502 	cfsh32ne	mvfx7, mvfx0, #2
    582c:	03055001 	movweq	r5, #20481	; 0x5001
    5830:	0800efb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
    5834:	70982000 	addsvc	r2, r8, r0
    5838:	11fc0800 	mvnsne	r0, r0, lsl #16
    583c:	08c20000 	stmiaeq	r2, {}^	; <UNPREDICTABLE>
    5840:	011e0000 	tsteq	lr, r0
    5844:	00740251 	rsbseq	r0, r4, r1, asr r2
    5848:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    584c:	00efcc03 	rsceq	ip, pc, r3, lsl #24
    5850:	a6200008 	strtge	r0, [r0], -r8
    5854:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    5858:	df000011 	svcle	0x00000011
    585c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    5860:	76025101 	strvc	r5, [r2], -r1, lsl #2
    5864:	50011e00 	andpl	r1, r1, r0, lsl #28
    5868:	efd80305 	svc	0x00d80305
    586c:	20000800 	andcs	r0, r0, r0, lsl #16
    5870:	080070e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, ip, sp, lr}
    5874:	000011fc 	strdeq	r1, [r0], -ip
    5878:	000008fe 	strdeq	r0, [r0], -lr
    587c:	0451011e 	ldrbeq	r0, [r1], #-286	; 0xfffffee2
    5880:	1a3f0075 	bne	fc5a5c <__RW_SIZE__+0xfc54d4>
    5884:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    5888:	00f06803 	rscseq	r6, r0, r3, lsl #16
    588c:	fc200008 	stc2	0, cr0, [r0], #-32	; 0xffffffe0
    5890:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    5894:	15000011 	strne	r0, [r0, #-17]	; 0xffffffef
    5898:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    589c:	03055001 	movweq	r5, #20481	; 0x5001
    58a0:	0800f094 	stmdaeq	r0, {r2, r4, r7, ip, sp, lr, pc}
    58a4:	710a2000 	mrsvc	r2, (UNDEF: 10)
    58a8:	11fc0800 	mvnsne	r0, r0, lsl #16
    58ac:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
    58b0:	011e0000 	tsteq	lr, r0
    58b4:	a4030550 	strge	r0, [r3], #-1360	; 0xfffffab0
    58b8:	000800f0 	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
    58bc:	00716626 	rsbseq	r6, r1, r6, lsr #12
    58c0:	0011fc08 	andseq	pc, r1, r8, lsl #24
    58c4:	71742000 	cmnvc	r4, r0
    58c8:	07220800 	streq	r0, [r2, -r0, lsl #16]!
    58cc:	09520000 	ldmdbeq	r2, {}^	; <UNPREDICTABLE>
    58d0:	011e0000 	tsteq	lr, r0
    58d4:	00740251 	rsbseq	r0, r4, r1, asr r2
    58d8:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    58dc:	00f00803 	rscseq	r0, r0, r3, lsl #16
    58e0:	82200008 	eorhi	r0, r0, #8
    58e4:	fc080071 	stc2	0, cr0, [r8], {113}	; 0x71
    58e8:	69000011 	stmdbvs	r0, {r0, r4}
    58ec:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    58f0:	03055001 	movweq	r5, #20481	; 0x5001
    58f4:	0800f038 	stmdaeq	r0, {r3, r4, r5, ip, sp, lr, pc}
    58f8:	71901d00 	orrsvc	r1, r0, r0, lsl #26
    58fc:	07220800 	streq	r0, [r2, -r0, lsl #16]!
    5900:	011e0000 	tsteq	lr, r0
    5904:	00760251 	rsbseq	r0, r6, r1, asr r2
    5908:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    590c:	00f06403 	rscseq	r6, r0, r3, lsl #8
    5910:	20000008 	andcs	r0, r0, r8
    5914:	0800707c 	stmdaeq	r0, {r2, r3, r4, r5, r6, ip, sp, lr}
    5918:	000011fc 	strdeq	r1, [r0], -ip
    591c:	0000099a 	muleq	r0, sl, r9
    5920:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    5924:	00efa403 	rsceq	sl, pc, r3, lsl #8
    5928:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
    592c:	fc080071 	stc2	0, cr0, [r8], {113}	; 0x71
    5930:	b1000011 	tstlt	r0, r1, lsl r0
    5934:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    5938:	03055001 	movweq	r5, #20481	; 0x5001
    593c:	0800f0c4 	stmdaeq	r0, {r2, r6, r7, ip, sp, lr, pc}
    5940:	712a2000 	teqvc	sl, r0
    5944:	11fc0800 	mvnsne	r0, r0, lsl #16
    5948:	09c80000 	stmibeq	r8, {}^	; <UNPREDICTABLE>
    594c:	011e0000 	tsteq	lr, r0
    5950:	d8030550 	stmdale	r3, {r4, r6, r8, sl}
    5954:	000800f0 	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
    5958:	00713c20 	rsbseq	r3, r1, r0, lsr #24
    595c:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5960:	0009df00 	andeq	sp, r9, r0, lsl #30
    5964:	50011e00 	andpl	r1, r1, r0, lsl #28
    5968:	f0e80305 			; <UNDEFINED> instruction: 0xf0e80305
    596c:	20000800 	andcs	r0, r0, r0, lsl #16
    5970:	0800714a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp, lr}
    5974:	000011fc 	strdeq	r1, [r0], -ip
    5978:	000009f6 	strdeq	r0, [r0], -r6
    597c:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    5980:	00f0fc03 	rscseq	pc, r0, r3, lsl #24
    5984:	581d0008 	ldmdapl	sp, {r3}
    5988:	fc080071 	stc2	0, cr0, [r8], {113}	; 0x71
    598c:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    5990:	03055001 	movweq	r5, #20481	; 0x5001
    5994:	0800f10c 	stmdaeq	r0, {r2, r3, r8, ip, sp, lr, pc}
    5998:	ad1f0000 	ldcge	0, cr0, [pc, #-0]	; 59a0 <__RW_SIZE__+0x5418>
    599c:	0100000d 	tsteq	r0, sp
    59a0:	0071946b 	rsbseq	r9, r1, fp, ror #8
    59a4:	00001008 	andeq	r1, r0, r8
    59a8:	5f9c0100 	svcpl	0x009c0100
    59ac:	1b00000a 	blne	59dc <__RW_SIZE__+0x5454>
    59b0:	0070736d 	rsbseq	r7, r0, sp, ror #6
    59b4:	07816b01 	streq	r6, [r1, r1, lsl #22]
    59b8:	1b7d0000 	blne	1f459c0 <__RW_SIZE__+0x1f45438>
    59bc:	6c1b0000 	ldcvs	0, cr0, [fp], {-0}
    59c0:	6b010072 	blvs	45b90 <__RW_SIZE__+0x45608>
    59c4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    59c8:	00001b9e 	muleq	r0, lr, fp
    59cc:	7073701b 	rsbsvc	r7, r3, fp, lsl r0
    59d0:	816b0100 	cmnhi	fp, r0, lsl #2
    59d4:	bf000007 	svclt	0x00000007
    59d8:	1d00001b 	stcne	0, cr0, [r0, #-108]	; 0xffffff94
    59dc:	080071a2 	stmdaeq	r0, {r1, r5, r7, r8, ip, sp, lr}
    59e0:	000011fc 	strdeq	r1, [r0], -ip
    59e4:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    59e8:	00f13003 	rscseq	r3, r1, r3
    59ec:	1f000008 	svcne	0x00000008
    59f0:	00000f43 	andeq	r0, r0, r3, asr #30
    59f4:	71a47801 			; <UNDEFINED> instruction: 0x71a47801
    59f8:	00100800 	andseq	r0, r0, r0, lsl #16
    59fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a00:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    5a04:	70736d1b 	rsbsvc	r6, r3, fp, lsl sp
    5a08:	81780100 	cmnhi	r8, r0, lsl #2
    5a0c:	e0000007 	and	r0, r0, r7
    5a10:	1b00001b 	blne	5a84 <__RW_SIZE__+0x54fc>
    5a14:	0100726c 	tsteq	r0, ip, ror #4
    5a18:	0001d078 	andeq	sp, r1, r8, ror r0
    5a1c:	001c0100 	andseq	r0, ip, r0, lsl #2
    5a20:	73701b00 	cmnvc	r0, #0, 22
    5a24:	78010070 	stmdavc	r1, {r4, r5, r6}
    5a28:	00000781 	andeq	r0, r0, r1, lsl #15
    5a2c:	00001c22 	andeq	r1, r0, r2, lsr #24
    5a30:	0071b21d 	rsbseq	fp, r1, sp, lsl r2
    5a34:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5a38:	50011e00 	andpl	r1, r1, r0, lsl #28
    5a3c:	f14c0305 			; <UNDEFINED> instruction: 0xf14c0305
    5a40:	00000800 	andeq	r0, r0, r0, lsl #16
    5a44:	000cf21f 	andeq	pc, ip, pc, lsl r2	; <UNPREDICTABLE>
    5a48:	b4850100 	strlt	r0, [r5], #256	; 0x100
    5a4c:	10080071 	andne	r0, r8, r1, ror r0
    5a50:	01000000 	mrseq	r0, (UNDEF: 0)
    5a54:	000b099c 	muleq	fp, ip, r9
    5a58:	736d1b00 	cmnvc	sp, #0, 22
    5a5c:	85010070 	strhi	r0, [r1, #-112]	; 0xffffff90
    5a60:	00000781 	andeq	r0, r0, r1, lsl #15
    5a64:	00001c43 	andeq	r1, r0, r3, asr #24
    5a68:	00726c1b 	rsbseq	r6, r2, fp, lsl ip
    5a6c:	01d08501 	bicseq	r8, r0, r1, lsl #10
    5a70:	1c640000 	stclne	0, cr0, [r4], #-0
    5a74:	701b0000 	andsvc	r0, fp, r0
    5a78:	01007073 	tsteq	r0, r3, ror r0
    5a7c:	00078185 	andeq	r8, r7, r5, lsl #3
    5a80:	001c8500 	andseq	r8, ip, r0, lsl #10
    5a84:	71c21d00 	bicvc	r1, r2, r0, lsl #26
    5a88:	11fc0800 	mvnsne	r0, r0, lsl #16
    5a8c:	011e0000 	tsteq	lr, r0
    5a90:	58030550 	stmdapl	r3, {r4, r6, r8, sl}
    5a94:	000800f1 	strdeq	r0, [r8], -r1
    5a98:	0ee71f00 	cdpeq	15, 14, cr1, cr7, cr0, {0}
    5a9c:	92010000 	andls	r0, r1, #0
    5aa0:	080071c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp, lr}
    5aa4:	00000010 	andeq	r0, r0, r0, lsl r0
    5aa8:	0b329c01 	bleq	cacab4 <__RW_SIZE__+0xcac52c>
    5aac:	d21d0000 	andsle	r0, sp, #0
    5ab0:	fc080071 	stc2	0, cr0, [r8], {113}	; 0x71
    5ab4:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    5ab8:	03055001 	movweq	r5, #20481	; 0x5001
    5abc:	0800f168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp, lr, pc}
    5ac0:	a11f0000 	tstge	pc, r0
    5ac4:	0100000b 	tsteq	r0, fp
    5ac8:	0071d49f 			; <UNDEFINED> instruction: 0x0071d49f
    5acc:	00001008 	andeq	r1, r0, r8
    5ad0:	5b9c0100 	blpl	fe705ed8 <MSP_BASE+0xde700ed8>
    5ad4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    5ad8:	080071e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, ip, sp, lr}
    5adc:	000011fc 	strdeq	r1, [r0], -ip
    5ae0:	0550011e 	ldrbeq	r0, [r0, #-286]	; 0xfffffee2
    5ae4:	00f17403 	rscseq	r7, r1, r3, lsl #8
    5ae8:	1f000008 	svcne	0x00000008
    5aec:	00000e5d 	andeq	r0, r0, sp, asr lr
    5af0:	71e4ac01 	mvnvc	sl, r1, lsl #24
    5af4:	00100800 	andseq	r0, r0, r0, lsl #16
    5af8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5afc:	00000b84 	andeq	r0, r0, r4, lsl #23
    5b00:	0071f21d 	rsbseq	pc, r1, sp, lsl r2	; <UNPREDICTABLE>
    5b04:	0011fc08 	andseq	pc, r1, r8, lsl #24
    5b08:	50011e00 	andpl	r1, r1, r0, lsl #28
    5b0c:	f1840305 			; <UNDEFINED> instruction: 0xf1840305
    5b10:	00000800 	andeq	r0, r0, r0, lsl #16
    5b14:	000f0e27 	andeq	r0, pc, r7, lsr #28
    5b18:	f4bb0100 			; <UNDEFINED> instruction: 0xf4bb0100
    5b1c:	0e080071 	mcreq	0, 0, r0, cr8, cr1, {3}
    5b20:	01000000 	mrseq	r0, (UNDEF: 0)
    5b24:	0beb1f9c 	bleq	ffacd99c <MSP_BASE+0xdfac899c>
    5b28:	c7010000 	strgt	r0, [r1, -r0]
    5b2c:	08007204 	stmdaeq	r0, {r2, r9, ip, sp, lr}
    5b30:	00000006 	andeq	r0, r0, r6
    5b34:	0bb49c01 	bleq	fed2cb40 <MSP_BASE+0xded27b40>
    5b38:	0a260000 	beq	985b40 <__RW_SIZE__+0x9855b8>
    5b3c:	87080072 	smlsdxhi	r8, r2, r0, r0
    5b40:	00000007 	andeq	r0, r0, r7
    5b44:	000c6d1f 	andeq	r6, ip, pc, lsl sp
    5b48:	0cd30100 	ldfeqe	f0, [r3], {0}
    5b4c:	06080072 			; <UNDEFINED> instruction: 0x06080072
    5b50:	01000000 	mrseq	r0, (UNDEF: 0)
    5b54:	000bd39c 	muleq	fp, ip, r3
    5b58:	72122600 	andsvc	r2, r2, #0, 12
    5b5c:	07870800 	streq	r0, [r7, r0, lsl #16]
    5b60:	1f000000 	svcne	0x00000000
    5b64:	00000ffa 	strdeq	r0, [r0], -sl
    5b68:	7214df01 	andsvc	sp, r4, #1, 30
    5b6c:	00060800 	andeq	r0, r6, r0, lsl #16
    5b70:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b74:	00000bf2 	strdeq	r0, [r0], -r2
    5b78:	00721a26 	rsbseq	r1, r2, r6, lsr #20
    5b7c:	00078708 	andeq	r8, r7, r8, lsl #14
    5b80:	d81f0000 	ldmdale	pc, {}	; <UNPREDICTABLE>
    5b84:	0100000e 	tsteq	r0, lr
    5b88:	00721ceb 	rsbseq	r1, r2, fp, ror #25
    5b8c:	00000608 	andeq	r0, r0, r8, lsl #12
    5b90:	119c0100 	orrsne	r0, ip, r0, lsl #2
    5b94:	2600000c 	strcs	r0, [r0], -ip
    5b98:	08007222 	stmdaeq	r0, {r1, r5, r9, ip, sp, lr}
    5b9c:	00000787 	andeq	r0, r0, r7, lsl #15
    5ba0:	0dd11f00 	ldcleq	15, cr1, [r1]
    5ba4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    5ba8:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
    5bac:	00000006 	andeq	r0, r0, r6
    5bb0:	0c309c01 	ldceq	12, cr9, [r0], #-4
    5bb4:	2a260000 	bcs	985bbc <__RW_SIZE__+0x985634>
    5bb8:	87080072 	smlsdxhi	r8, r2, r0, r0
    5bbc:	00000007 	andeq	r0, r0, r7
    5bc0:	000eb028 	andeq	fp, lr, r8, lsr #32
    5bc4:	01030100 	mrseq	r0, (UNDEF: 19)
    5bc8:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
    5bcc:	00000006 	andeq	r0, r0, r6
    5bd0:	0c509c01 	mrrceq	12, 0, r9, r0, cr1
    5bd4:	32260000 	eorcc	r0, r6, #0
    5bd8:	87080072 	smlsdxhi	r8, r2, r0, r0
    5bdc:	00000007 	andeq	r0, r0, r7
    5be0:	000de228 	andeq	lr, sp, r8, lsr #4
    5be4:	010f0100 	mrseq	r0, (UNDEF: 31)
    5be8:	08007234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp, lr}
    5bec:	00000006 	andeq	r0, r0, r6
    5bf0:	0c709c01 	ldcleq	12, cr9, [r0], #-4
    5bf4:	3a260000 	bcc	985bfc <__RW_SIZE__+0x985674>
    5bf8:	87080072 	smlsdxhi	r8, r2, r0, r0
    5bfc:	00000007 	andeq	r0, r0, r7
    5c00:	000e4128 	andeq	r4, lr, r8, lsr #2
    5c04:	011b0100 	tsteq	fp, r0, lsl #2
    5c08:	0800723c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp, lr}
    5c0c:	00000006 	andeq	r0, r0, r6
    5c10:	0c909c01 	ldceq	12, cr9, [r0], {1}
    5c14:	42260000 	eormi	r0, r6, #0
    5c18:	87080072 	smlsdxhi	r8, r2, r0, r0
    5c1c:	00000007 	andeq	r0, r0, r7
    5c20:	000fe928 	andeq	lr, pc, r8, lsr #18
    5c24:	01270100 	teqeq	r7, r0, lsl #2
    5c28:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
    5c2c:	00000006 	andeq	r0, r0, r6
    5c30:	0cb09c01 	ldceq	12, cr9, [r0], #4
    5c34:	4a260000 	bmi	985c3c <__RW_SIZE__+0x9856b4>
    5c38:	87080072 	smlsdxhi	r8, r2, r0, r0
    5c3c:	00000007 	andeq	r0, r0, r7
    5c40:	000c7c28 	andeq	r7, ip, r8, lsr #24
    5c44:	01360100 	teqeq	r6, r0, lsl #2
    5c48:	0800724c 	stmdaeq	r0, {r2, r3, r6, r9, ip, sp, lr}
    5c4c:	00000032 	andeq	r0, r0, r2, lsr r0
    5c50:	0cde9c01 	ldcleq	12, cr9, [lr], {1}
    5c54:	08290000 	stmdaeq	r9!, {}	; <UNPREDICTABLE>
    5c58:	56000007 	strpl	r0, [r0], -r7
    5c5c:	50080072 	andpl	r0, r8, r2, ror r0
    5c60:	01000023 	tsteq	r0, r3, lsr #32
    5c64:	152a013c 	strne	r0, [sl, #-316]!	; 0xfffffec4
    5c68:	09000007 	stmdbeq	r0, {r0, r1, r2}
    5c6c:	b2280000 	eorlt	r0, r8, #0
    5c70:	0100000b 	tsteq	r0, fp
    5c74:	72800146 	addvc	r0, r0, #-2147483631	; 0x80000011
    5c78:	00060800 	andeq	r0, r6, r0, lsl #16
    5c7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5c80:	00000cfe 	strdeq	r0, [r0], -lr
    5c84:	00728626 	rsbseq	r8, r2, r6, lsr #12
    5c88:	00078708 	andeq	r8, r7, r8, lsl #14
    5c8c:	0c280000 	stceq	0, cr0, [r8], #-0
    5c90:	01000010 	tsteq	r0, r0, lsl r0
    5c94:	72880152 	addvc	r0, r8, #-2147483628	; 0x80000014
    5c98:	00060800 	andeq	r0, r6, r0, lsl #16
    5c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ca0:	00000d1e 	andeq	r0, r0, lr, lsl sp
    5ca4:	00728e26 	rsbseq	r8, r2, r6, lsr #28
    5ca8:	00078708 	andeq	r8, r7, r8, lsl #14
    5cac:	28280000 	stmdacs	r8!, {}	; <UNPREDICTABLE>
    5cb0:	0100000e 	tsteq	r0, lr
    5cb4:	7290015e 	addsvc	r0, r0, #-2147483625	; 0x80000017
    5cb8:	00060800 	andeq	r0, r6, r0, lsl #16
    5cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cc0:	00000d3e 	andeq	r0, r0, lr, lsr sp
    5cc4:	00729626 	rsbseq	r9, r2, r6, lsr #12
    5cc8:	00078708 	andeq	r8, r7, r8, lsl #14
    5ccc:	d0280000 	eorle	r0, r8, r0
    5cd0:	0100000f 	tsteq	r0, pc
    5cd4:	7298016a 	addsvc	r0, r8, #-2147483622	; 0x8000001a
    5cd8:	00060800 	andeq	r0, r6, r0, lsl #16
    5cdc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ce0:	00000d5e 	andeq	r0, r0, lr, asr sp
    5ce4:	00729e26 	rsbseq	r9, r2, r6, lsr #28
    5ce8:	00078708 	andeq	r8, r7, r8, lsl #14
    5cec:	46280000 	strtmi	r0, [r8], -r0
    5cf0:	0100000d 	tsteq	r0, sp
    5cf4:	72a00176 	adcvc	r0, r0, #-2147483619	; 0x8000001d
    5cf8:	00060800 	andeq	r0, r6, r0, lsl #16
    5cfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d00:	00000d7e 	andeq	r0, r0, lr, ror sp
    5d04:	0072a626 	rsbseq	sl, r2, r6, lsr #12
    5d08:	00078708 	andeq	r8, r7, r8, lsl #14
    5d0c:	7b280000 	blvc	a05d14 <__RW_SIZE__+0xa0578c>
    5d10:	0100000e 	tsteq	r0, lr
    5d14:	72a80182 	adcvc	r0, r8, #-2147483616	; 0x80000020
    5d18:	00060800 	andeq	r0, r6, r0, lsl #16
    5d1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d20:	00000d9e 	muleq	r0, lr, sp
    5d24:	0072ae26 	rsbseq	sl, r2, r6, lsr #28
    5d28:	00078708 	andeq	r8, r7, r8, lsl #14
    5d2c:	bf280000 	svclt	0x00280000
    5d30:	0100000e 	tsteq	r0, lr
    5d34:	72b0018e 	adcsvc	r0, r0, #-2147483613	; 0x80000023
    5d38:	00060800 	andeq	r0, r6, r0, lsl #16
    5d3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d40:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
    5d44:	0072b626 	rsbseq	fp, r2, r6, lsr #12
    5d48:	00078708 	andeq	r8, r7, r8, lsl #14
    5d4c:	d2280000 	eorle	r0, r8, #0
    5d50:	0100000b 	tsteq	r0, fp
    5d54:	72b8019a 	adcsvc	r0, r8, #-2147483610	; 0x80000026
    5d58:	00060800 	andeq	r0, r6, r0, lsl #16
    5d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d60:	00000dde 	ldrdeq	r0, [r0], -lr
    5d64:	0072be26 	rsbseq	fp, r2, r6, lsr #28
    5d68:	00078708 	andeq	r8, r7, r8, lsl #14
    5d6c:	f3280000 	vhadd.u32	d0, d8, d0
    5d70:	0100000d 	tsteq	r0, sp
    5d74:	72c001a6 	sbcvc	r0, r0, #-2147483607	; 0x80000029
    5d78:	00060800 	andeq	r0, r6, r0, lsl #16
    5d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d80:	00000dfe 	strdeq	r0, [r0], -lr
    5d84:	0072c626 	rsbseq	ip, r2, r6, lsr #12
    5d88:	00078708 	andeq	r8, r7, r8, lsl #14
    5d8c:	1a280000 	bne	a05d94 <__RW_SIZE__+0xa0580c>
    5d90:	0100000d 	tsteq	r0, sp
    5d94:	72c801b3 	sbcvc	r0, r8, #-1073741780	; 0xc000002c
    5d98:	00060800 	andeq	r0, r6, r0, lsl #16
    5d9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5da0:	00000e1e 	andeq	r0, r0, lr, lsl lr
    5da4:	0072ce26 	rsbseq	ip, r2, r6, lsr #28
    5da8:	00078708 	andeq	r8, r7, r8, lsl #14
    5dac:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
    5db0:	0100000f 	tsteq	r0, pc
    5db4:	72d001c0 	sbcsvc	r0, r0, #192, 2	; 0x30
    5db8:	00060800 	andeq	r0, r6, r0, lsl #16
    5dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5dc0:	00000e3e 	andeq	r0, r0, lr, lsr lr
    5dc4:	0072d626 	rsbseq	sp, r2, r6, lsr #12
    5dc8:	00078708 	andeq	r8, r7, r8, lsl #14
    5dcc:	05280000 	streq	r0, [r8, #-0]!
    5dd0:	0100000e 	tsteq	r0, lr
    5dd4:	72d801cc 	sbcsvc	r0, r8, #204, 2	; 0x33
    5dd8:	00060800 	andeq	r0, r6, r0, lsl #16
    5ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5de0:	00000e5e 	andeq	r0, r0, lr, asr lr
    5de4:	0072de26 	rsbseq	sp, r2, r6, lsr #28
    5de8:	00078708 	andeq	r8, r7, r8, lsl #14
    5dec:	2b280000 	blcs	a05df4 <__RW_SIZE__+0xa0586c>
    5df0:	0100000c 	tsteq	r0, ip
    5df4:	72e001d8 	rscvc	r0, r0, #216, 2	; 0x36
    5df8:	00060800 	andeq	r0, r6, r0, lsl #16
    5dfc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e00:	00000e7e 	andeq	r0, r0, lr, ror lr
    5e04:	0072e626 	rsbseq	lr, r2, r6, lsr #12
    5e08:	00078708 	andeq	r8, r7, r8, lsl #14
    5e0c:	4c280000 	stcmi	0, cr0, [r8], #-0
    5e10:	01000010 	tsteq	r0, r0, lsl r0
    5e14:	72e801e4 	rscvc	r0, r8, #228, 2	; 0x39
    5e18:	00440800 	subeq	r0, r4, r0, lsl #16
    5e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5e20:	00000ebe 			; <UNDEFINED> instruction: 0x00000ebe
    5e24:	000d6f2b 	andeq	r6, sp, fp, lsr #30
    5e28:	01e70100 	mvneq	r0, r0, lsl #2
    5e2c:	00000ece 	andeq	r0, r0, lr, asr #29
    5e30:	ec840305 	stc	3, cr0, [r4], {5}
    5e34:	08290800 	stmdaeq	r9!, {fp}
    5e38:	06000007 	streq	r0, [r0], -r7
    5e3c:	70080073 	andvc	r0, r8, r3, ror r0
    5e40:	01000023 	tsteq	r0, r3, lsr #32
    5e44:	152a01eb 	strne	r0, [sl, #-491]!	; 0xfffffe15
    5e48:	17000007 	strne	r0, [r0, -r7]
    5e4c:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
    5e50:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    5e54:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    5e58:	00000295 	muleq	r0, r5, r2
    5e5c:	be120007 	cdplt	0, 1, cr0, cr2, cr7, {0}
    5e60:	2800000e 	stmdacs	r0, {r1, r2, r3}
    5e64:	00000f1e 	andeq	r0, r0, lr, lsl pc
    5e68:	2c01f501 	cfstr32cs	mvfx15, [r1], {1}
    5e6c:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5e70:	01000000 	mrseq	r0, (UNDEF: 0)
    5e74:	000ef39c 	muleq	lr, ip, r3
    5e78:	73322600 	teqvc	r2, #0, 12
    5e7c:	07870800 	streq	r0, [r7, r0, lsl #16]
    5e80:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5e84:	00000d33 	andeq	r0, r0, r3, lsr sp
    5e88:	34020201 	strcc	r0, [r2], #-513	; 0xfffffdff
    5e8c:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5e90:	01000000 	mrseq	r0, (UNDEF: 0)
    5e94:	000f139c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    5e98:	733a2600 	teqvc	sl, #0, 12
    5e9c:	07870800 	streq	r0, [r7, r0, lsl #16]
    5ea0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ea4:	00000d7b 	andeq	r0, r0, fp, ror sp
    5ea8:	3c020f01 	stccc	15, cr0, [r2], {1}
    5eac:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    5eb4:	000f339c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    5eb8:	73422600 	movtvc	r2, #9728	; 0x2600
    5ebc:	07870800 	streq	r0, [r7, r0, lsl #16]
    5ec0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ec4:	00000fa3 	andeq	r0, r0, r3, lsr #31
    5ec8:	44021b01 	strmi	r1, [r2], #-2817	; 0xfffff4ff
    5ecc:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ed4:	000f539c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    5ed8:	734a2600 	movtvc	r2, #42496	; 0xa600
    5edc:	07870800 	streq	r0, [r7, r0, lsl #16]
    5ee0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ee4:	0000109e 	muleq	r0, lr, r0
    5ee8:	4c022701 	stcmi	7, cr2, [r2], {1}
    5eec:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ef4:	000f739c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    5ef8:	73522600 	cmpvc	r2, #0, 12
    5efc:	07870800 	streq	r0, [r7, r0, lsl #16]
    5f00:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5f04:	00000d5f 	andeq	r0, r0, pc, asr sp
    5f08:	54023301 	strpl	r3, [r2], #-769	; 0xfffffcff
    5f0c:	06080073 			; <UNDEFINED> instruction: 0x06080073
    5f10:	01000000 	mrseq	r0, (UNDEF: 0)
    5f14:	000f939c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    5f18:	735a2600 	cmpvc	sl, #0, 12
    5f1c:	07870800 	streq	r0, [r7, r0, lsl #16]
    5f20:	2c000000 	stccs	0, cr0, [r0], {-0}
    5f24:	00000efe 	strdeq	r0, [r0], -lr
    5f28:	5c024101 	stfpls	f4, [r2], {1}
    5f2c:	22080073 	andcs	r0, r8, #115	; 0x73
    5f30:	01000000 	mrseq	r0, (UNDEF: 0)
    5f34:	108b289c 	umullne	r2, fp, ip, r8
    5f38:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    5f3c:	00738002 	rsbseq	r8, r3, r2
    5f40:	00000608 	andeq	r0, r0, r8, lsl #12
    5f44:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    5f48:	2600000f 	strcs	r0, [r0], -pc
    5f4c:	08007386 	stmdaeq	r0, {r1, r2, r7, r8, r9, ip, sp, lr}
    5f50:	00000787 	andeq	r0, r0, r7, lsl #15
    5f54:	0f762800 	svceq	0x00762800
    5f58:	5a010000 	bpl	45f60 <__RW_SIZE__+0x459d8>
    5f5c:	00738802 	rsbseq	r8, r3, r2, lsl #16
    5f60:	00000608 	andeq	r0, r0, r8, lsl #12
    5f64:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    5f68:	2600000f 	strcs	r0, [r0], -pc
    5f6c:	0800738e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip, sp, lr}
    5f70:	00000787 	andeq	r0, r0, r7, lsl #15
    5f74:	0f5e2800 	svceq	0x005e2800
    5f78:	66010000 	strvs	r0, [r1], -r0
    5f7c:	00739002 	rsbseq	r9, r3, r2
    5f80:	00000608 	andeq	r0, r0, r8, lsl #12
    5f84:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    5f88:	26000010 			; <UNDEFINED> instruction: 0x26000010
    5f8c:	08007396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip, sp, lr}
    5f90:	00000787 	andeq	r0, r0, r7, lsl #15
    5f94:	0c3e2800 	ldceq	8, cr2, [lr], #-0
    5f98:	72010000 	andvc	r0, r1, #0
    5f9c:	00739802 	rsbseq	r9, r3, r2, lsl #16
    5fa0:	00000608 	andeq	r0, r0, r8, lsl #12
    5fa4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    5fa8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    5fac:	0800739e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, sp, lr}
    5fb0:	00000787 	andeq	r0, r0, r7, lsl #15
    5fb4:	0c5d2800 	mrrceq	8, 0, r2, sp, cr0
    5fb8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    5fbc:	0073a002 	rsbseq	sl, r3, r2
    5fc0:	00000608 	andeq	r0, r0, r8, lsl #12
    5fc4:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    5fc8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    5fcc:	080073a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip, sp, lr}
    5fd0:	00000787 	andeq	r0, r0, r7, lsl #15
    5fd4:	0e182800 	cdpeq	8, 1, cr2, cr8, cr0, {0}
    5fd8:	8a010000 	bhi	45fe0 <__RW_SIZE__+0x45a58>
    5fdc:	0073a802 	rsbseq	sl, r3, r2, lsl #16
    5fe0:	00000608 	andeq	r0, r0, r8, lsl #12
    5fe4:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    5fe8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    5fec:	080073ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, sp, lr}
    5ff0:	00000787 	andeq	r0, r0, r7, lsl #15
    5ff4:	0c072800 	stceq	8, cr2, [r7], {-0}
    5ff8:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    5ffc:	0073b002 	rsbseq	fp, r3, r2
    6000:	00001608 	andeq	r1, r0, r8, lsl #12
    6004:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
    6008:	26000010 			; <UNDEFINED> instruction: 0x26000010
    600c:	080073c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, sp, lr}
    6010:	0000120e 	andeq	r1, r0, lr, lsl #4
    6014:	10732800 	rsbsne	r2, r3, r0, lsl #16
    6018:	a6010000 	strge	r0, [r1], -r0
    601c:	0073c802 	rsbseq	ip, r3, r2, lsl #16
    6020:	00000608 	andeq	r0, r0, r8, lsl #12
    6024:	a59c0100 	ldrge	r0, [ip, #256]	; 0x100
    6028:	26000010 			; <UNDEFINED> instruction: 0x26000010
    602c:	080073ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, ip, sp, lr}
    6030:	00000787 	andeq	r0, r0, r7, lsl #15
    6034:	10252800 	eorne	r2, r5, r0, lsl #16
    6038:	b2010000 	andlt	r0, r1, #0
    603c:	0073d002 	rsbseq	sp, r3, r2
    6040:	00000608 	andeq	r0, r0, r8, lsl #12
    6044:	c59c0100 	ldrgt	r0, [ip, #256]	; 0x100
    6048:	26000010 			; <UNDEFINED> instruction: 0x26000010
    604c:	080073d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, sp, lr}
    6050:	00000787 	andeq	r0, r0, r7, lsl #15
    6054:	10372800 	eorsne	r2, r7, r0, lsl #16
    6058:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    605c:	0073d802 	rsbseq	sp, r3, r2, lsl #16
    6060:	00004608 	andeq	r4, r0, r8, lsl #12
    6064:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    6068:	2b000011 	blcs	60b4 <__RW_SIZE__+0x5b2c>
    606c:	00000b82 	andeq	r0, r0, r2, lsl #23
    6070:	1502c101 	strne	ip, [r2, #-257]	; 0xfffffeff
    6074:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    6078:	00eca403 	rsceq	sl, ip, r3, lsl #8
    607c:	07082908 	streq	r2, [r8, -r8, lsl #18]
    6080:	73f60000 	mvnsvc	r0, #0
    6084:	23900800 	orrscs	r0, r0, #0, 16
    6088:	c5010000 	strgt	r0, [r1, #-0]
    608c:	07152a02 	ldreq	r2, [r5, -r2, lsl #20]
    6090:	00280000 	eoreq	r0, r8, r0
    6094:	01c90c00 	biceq	r0, r9, r0, lsl #24
    6098:	11150000 	tstne	r5, r0
    609c:	950d0000 	strls	r0, [sp, #-0]
    60a0:	03000002 	movweq	r0, #2
    60a4:	11051200 	mrsne	r1, SP_usr
    60a8:	5f280000 	svcpl	0x00280000
    60ac:	01000010 	tsteq	r0, r0, lsl r0
    60b0:	742002cf 	strtvc	r0, [r0], #-719	; 0xfffffd31
    60b4:	00060800 	andeq	r0, r6, r0, lsl #16
    60b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    60bc:	0000113a 	andeq	r1, r0, sl, lsr r1
    60c0:	00742626 	rsbseq	r2, r4, r6, lsr #12
    60c4:	00078708 	andeq	r8, r7, r8, lsl #14
    60c8:	98280000 	stmdals	r8!, {}	; <UNPREDICTABLE>
    60cc:	0100000d 	tsteq	r0, sp
    60d0:	742802db 	strtvc	r0, [r8], #-731	; 0xfffffd25
    60d4:	00060800 	andeq	r0, r6, r0, lsl #16
    60d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    60dc:	0000115a 	andeq	r1, r0, sl, asr r1
    60e0:	00742e26 	rsbseq	r2, r4, r6, lsr #28
    60e4:	00078708 	andeq	r8, r7, r8, lsl #14
    60e8:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    60ec:	6a000006 	bvs	610c <__RW_SIZE__+0x5b84>
    60f0:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    60f4:	00000295 	muleq	r0, r5, r2
    60f8:	542d0007 	strtpl	r0, [sp], #-7
    60fc:	0100000f 	tsteq	r0, pc
    6100:	00117b23 	andseq	r7, r1, r3, lsr #22
    6104:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
    6108:	120800ec 	andne	r0, r8, #236	; 0xec
    610c:	0000115a 	andeq	r1, r0, sl, asr r1
    6110:	0000512e 	andeq	r5, r0, lr, lsr #2
    6114:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    6118:	0000118c 	andeq	r1, r0, ip, lsl #3
    611c:	0001c90e 	andeq	ip, r1, lr, lsl #18
    6120:	0cc42f00 	stcleq	15, cr2, [r4], {0}
    6124:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    6128:	0000118c 	andeq	r1, r0, ip, lsl #3
    612c:	059c0305 	ldreq	r0, [ip, #773]	; 0x305
    6130:	7b302000 	blvc	c0e138 <__RW_SIZE__+0xc0dbb0>
    6134:	0100000a 	tsteq	r0, sl
    6138:	118c0133 	orrne	r0, ip, r3, lsr r1
    613c:	03050000 	movweq	r0, #20480	; 0x5000
    6140:	200005a0 	andcs	r0, r0, r0, lsr #11
    6144:	000ab030 	andeq	fp, sl, r0, lsr r0
    6148:	01340100 	teqeq	r4, r0, lsl #2
    614c:	0000118c 	andeq	r1, r0, ip, lsl #3
    6150:	05a40305 	streq	r0, [r4, #773]!	; 0x305
    6154:	b8302000 	ldmdalt	r0!, {sp}
    6158:	0100000a 	tsteq	r0, sl
    615c:	118c023f 	orrne	r0, ip, pc, lsr r2
    6160:	03050000 	movweq	r0, #20480	; 0x5000
    6164:	200005a8 	andcs	r0, r0, r8, lsr #11
    6168:	000d0a30 	andeq	r0, sp, r0, lsr sl
    616c:	02960100 	addseq	r0, r6, #0, 2
    6170:	0000118c 	andeq	r1, r0, ip, lsl #3
    6174:	05ac0305 	streq	r0, [ip, #773]!	; 0x305
    6178:	c3302000 	teqgt	r0, #0
    617c:	0100000b 	tsteq	r0, fp
    6180:	118c0297 			; <UNDEFINED> instruction: 0x118c0297
    6184:	03050000 	movweq	r0, #20480	; 0x5000
    6188:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    618c:	000b3c31 	andeq	r3, fp, r1, lsr ip
    6190:	0e190500 	cfmul32eq	mvfx0, mvfx9, mvfx0
    6194:	32000012 	andcc	r0, r0, #18
    6198:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    619c:	9e340033 	mrcls	0, 1, r0, cr4, cr3, {1}
    61a0:	0500000e 	streq	r0, [r0, #-14]
    61a4:	0006f61b 	andeq	pc, r6, fp, lsl r6	; <UNPREDICTABLE>
    61a8:	01800000 	orreq	r0, r0, r0
    61ac:	00040000 	andeq	r0, r4, r0
    61b0:	00001067 	andeq	r1, r0, r7, rrx
    61b4:	00ad0104 	adceq	r0, sp, r4, lsl #2
    61b8:	bb010000 	bllt	461c0 <__RW_SIZE__+0x45c38>
    61bc:	57000010 	smladpl	r0, r0, r0, r0
    61c0:	30000001 	andcc	r0, r0, r1
    61c4:	9c080074 	stcls	0, cr0, [r8], {116}	; 0x74
    61c8:	fb000000 	blx	61d2 <__RW_SIZE__+0x5c4a>
    61cc:	0200001c 	andeq	r0, r0, #28
    61d0:	00680601 	rsbeq	r0, r8, r1, lsl #12
    61d4:	01020000 	mrseq	r0, (UNDEF: 2)
    61d8:	00006608 	andeq	r6, r0, r8, lsl #12
    61dc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    61e0:	000001a2 	andeq	r0, r0, r2, lsr #3
    61e4:	3e070202 	cdpcc	2, 0, cr0, cr7, cr2, {0}
    61e8:	02000000 	andeq	r0, r0, #0
    61ec:	00050504 	andeq	r0, r5, r4, lsl #10
    61f0:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    61f4:	03000001 	movweq	r0, #1
    61f8:	00005350 	andeq	r5, r0, r0, asr r3
    61fc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6200:	0000009b 	muleq	r0, fp, r0
    6204:	00050802 	andeq	r0, r5, r2, lsl #16
    6208:	02000000 	andeq	r0, r0, #0
    620c:	00960708 	addseq	r0, r6, r8, lsl #14
    6210:	04040000 	streq	r0, [r4], #-0
    6214:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6218:	07040200 	streq	r0, [r4, -r0, lsl #4]
    621c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6220:	43070402 	movwmi	r0, #29698	; 0x7402
    6224:	05000001 	streq	r0, [r0, #-1]
    6228:	00000048 	andeq	r0, r0, r8, asr #32
    622c:	00007d06 	andeq	r7, r0, r6, lsl #26
    6230:	02100700 	andseq	r0, r0, #0, 14
    6234:	00c5016d 	sbceq	r0, r5, sp, ror #2
    6238:	e1080000 	mrs	r0, (UNDEF: 8)
    623c:	02000010 	andeq	r0, r0, #16
    6240:	007d016f 	rsbseq	r0, sp, pc, ror #2
    6244:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6248:	000010e6 	andeq	r1, r0, r6, ror #1
    624c:	7d017002 	stcvc	0, cr7, [r1, #-8]
    6250:	04000000 	streq	r0, [r0], #-0
    6254:	4c415609 	mcrrmi	6, 0, r5, r1, cr9
    6258:	01710200 	cmneq	r1, r0, lsl #4
    625c:	0000007d 	andeq	r0, r0, sp, ror r0
    6260:	10c50808 	sbcne	r0, r5, r8, lsl #16
    6264:	72020000 	andvc	r0, r2, #0
    6268:	00008201 	andeq	r8, r0, r1, lsl #4
    626c:	0a000c00 	beq	9274 <__RW_SIZE__+0x8cec>
    6270:	000010f7 	strdeq	r1, [r0], -r7
    6274:	87017302 	strhi	r7, [r1, -r2, lsl #6]
    6278:	02000000 	andeq	r0, r0, #0
    627c:	006f0801 	rsbeq	r0, pc, r1, lsl #16
    6280:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    6284:	01000011 	tsteq	r0, r1, lsl r0
    6288:	00743003 	rsbseq	r3, r4, r3
    628c:	00004808 	andeq	r4, r0, r8, lsl #16
    6290:	fd9c0100 	ldc2	1, cr0, [ip]
    6294:	0c000000 	stceq	0, cr0, [r0], {-0}
    6298:	00001104 	andeq	r1, r0, r4, lsl #2
    629c:	006f0301 	rsbeq	r0, pc, r1, lsl #6
    62a0:	1ca60000 	stcne	0, cr0, [r6]
    62a4:	0d000000 	stceq	0, cr0, [r0, #-0]
    62a8:	000010eb 	andeq	r1, r0, fp, ror #1
    62ac:	74780b01 	ldrbtvc	r0, [r8], #-2817	; 0xfffff4ff
    62b0:	001c0800 	andseq	r0, ip, r0, lsl #16
    62b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    62b8:	00000122 	andeq	r0, r0, r2, lsr #2
    62bc:	0011040c 	andseq	r0, r1, ip, lsl #8
    62c0:	6f0b0100 	svcvs	0x000b0100
    62c4:	c7000000 	strgt	r0, [r0, -r0]
    62c8:	0000001c 	andeq	r0, r0, ip, lsl r0
    62cc:	0010ae0e 	andseq	sl, r0, lr, lsl #28
    62d0:	94120100 	ldrls	r0, [r2], #-256	; 0xffffff00
    62d4:	0e080074 	mcreq	0, 0, r0, cr8, cr4, {3}
    62d8:	01000000 	mrseq	r0, (UNDEF: 0)
    62dc:	11190f9c 			; <UNDEFINED> instruction: 0x11190f9c
    62e0:	17010000 	strne	r0, [r1, -r0]
    62e4:	0000006f 	andeq	r0, r0, pc, rrx
    62e8:	080074a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, sp, lr}
    62ec:	0000000c 	andeq	r0, r0, ip
    62f0:	2a0f9c01 	bcs	3ed2fc <__RW_SIZE__+0x3ecd74>
    62f4:	01000011 	tsteq	r0, r1, lsl r0
    62f8:	00006f1c 	andeq	r6, r0, ip, lsl pc
    62fc:	0074b000 	rsbseq	fp, r4, r0
    6300:	00000c08 	andeq	r0, r0, r8, lsl #24
    6304:	0f9c0100 	svceq	0x009c0100
    6308:	000010cb 	andeq	r1, r0, fp, asr #1
    630c:	00682101 	rsbeq	r2, r8, r1, lsl #2
    6310:	74bc0000 	ldrtvc	r0, [ip], #0
    6314:	00100800 	andseq	r0, r0, r0, lsl #16
    6318:	9c010000 	stcls	0, cr0, [r1], {-0}
    631c:	00005110 	andeq	r5, r0, r0, lsl r1
    6320:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    6324:	0000017e 	andeq	r0, r0, lr, ror r1
    6328:	00006805 	andeq	r6, r0, r5, lsl #16
    632c:	06e40000 	strbteq	r0, [r4], r0
    6330:	00040000 	andeq	r0, r4, r0
    6334:	0000116a 	andeq	r1, r0, sl, ror #2
    6338:	00ad0104 	adceq	r0, sp, r4, lsl #2
    633c:	45010000 	strmi	r0, [r1, #-0]
    6340:	57000011 	smladpl	r0, r1, r0, r0
    6344:	d0000001 	andle	r0, r0, r1
    6348:	aa080074 	bge	206520 <__RW_SIZE__+0x205f98>
    634c:	9c000001 	stcls	0, cr0, [r0], {1}
    6350:	0200001d 	andeq	r0, r0, #29
    6354:	00000432 	andeq	r0, r0, r2, lsr r4
    6358:	64a80301 	strtvs	r0, [r8], #769	; 0x301
    635c:	03000001 	movweq	r0, #1
    6360:	0000065d 	andeq	r0, r0, sp, asr r6
    6364:	045a0372 	ldrbeq	r0, [sl], #-882	; 0xfffffc8e
    6368:	03740000 	cmneq	r4, #0
    636c:	0000059a 	muleq	r0, sl, r5
    6370:	071d0375 			; <UNDEFINED> instruction: 0x071d0375
    6374:	03760000 	cmneq	r6, #0
    6378:	0000073a 	andeq	r0, r0, sl, lsr r7
    637c:	070b037b 	smlsdxeq	fp, fp, r3, r0
    6380:	037c0000 	cmneq	ip, #0
    6384:	00000437 	andeq	r0, r0, r7, lsr r4
    6388:	06ce037e 			; <UNDEFINED> instruction: 0x06ce037e
    638c:	037f0000 	cmneq	pc, #0
    6390:	00000590 	muleq	r0, r0, r5
    6394:	05b30300 	ldreq	r0, [r3, #768]!	; 0x300
    6398:	03010000 	movweq	r0, #4096	; 0x1000
    639c:	000007be 			; <UNDEFINED> instruction: 0x000007be
    63a0:	06090302 	streq	r0, [r9], -r2, lsl #6
    63a4:	03030000 	movweq	r0, #12288	; 0x3000
    63a8:	0000040d 	andeq	r0, r0, sp, lsl #8
    63ac:	04510304 	ldrbeq	r0, [r1], #-772	; 0xfffffcfc
    63b0:	03050000 	movweq	r0, #20480	; 0x5000
    63b4:	0000041d 	andeq	r0, r0, sp, lsl r4
    63b8:	06830306 	streq	r0, [r3], r6, lsl #6
    63bc:	03070000 	movweq	r0, #28672	; 0x7000
    63c0:	00000500 	andeq	r0, r0, r0, lsl #10
    63c4:	077c0308 	ldrbeq	r0, [ip, -r8, lsl #6]!
    63c8:	03090000 	movweq	r0, #36864	; 0x9000
    63cc:	000005a8 	andeq	r0, r0, r8, lsr #11
    63d0:	0567030a 	strbeq	r0, [r7, #-778]!	; 0xfffffcf6
    63d4:	030b0000 	movweq	r0, #45056	; 0xb000
    63d8:	000003fa 	strdeq	r0, [r0], -sl
    63dc:	05d7030c 	ldrbeq	r0, [r7, #780]	; 0x30c
    63e0:	030d0000 	movweq	r0, #53248	; 0xd000
    63e4:	00000496 	muleq	r0, r6, r4
    63e8:	0769030e 	strbeq	r0, [r9, -lr, lsl #6]!
    63ec:	030f0000 	movweq	r0, #61440	; 0xf000
    63f0:	00000535 	andeq	r0, r0, r5, lsr r5
    63f4:	03d00310 	bicseq	r0, r0, #16, 6	; 0x40000000
    63f8:	03110000 	tsteq	r1, #0
    63fc:	0000078c 	andeq	r0, r0, ip, lsl #15
    6400:	04d60312 	ldrbeq	r0, [r6], #786	; 0x312
    6404:	03130000 	tsteq	r3, #0
    6408:	000003a8 	andeq	r0, r0, r8, lsr #7
    640c:	04c80314 	strbeq	r0, [r8], #788	; 0x314
    6410:	03150000 	tsteq	r5, #0
    6414:	000003c2 	andeq	r0, r0, r2, asr #7
    6418:	072d0316 			; <UNDEFINED> instruction: 0x072d0316
    641c:	03170000 	tsteq	r7, #0
    6420:	00000475 	andeq	r0, r0, r5, ror r4
    6424:	05f70318 	ldrbeq	r0, [r7, #792]!	; 0x318
    6428:	03190000 	tsteq	r9, #0
    642c:	00000698 	muleq	r0, r8, r6
    6430:	0671031a 			; <UNDEFINED> instruction: 0x0671031a
    6434:	031b0000 	tsteq	fp, #0
    6438:	000006e7 	andeq	r0, r0, r7, ror #13
    643c:	055d031c 	ldrbeq	r0, [sp, #-796]	; 0xfffffce4
    6440:	031d0000 	tsteq	sp, #0
    6444:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6448:	05ea031e 	strbeq	r0, [sl, #798]!	; 0x31e
    644c:	031f0000 	tsteq	pc, #0
    6450:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    6454:	051b0320 	ldreq	r0, [fp, #-800]	; 0xfffffce0
    6458:	03210000 	teqeq	r1, #0
    645c:	000003e3 	andeq	r0, r0, r3, ror #7
    6460:	048c0322 	streq	r0, [ip], #802	; 0x322
    6464:	03230000 	teqeq	r3, #0
    6468:	0000075a 	andeq	r0, r0, sl, asr r7
    646c:	06510324 	ldrbeq	r0, [r1], -r4, lsr #6
    6470:	03250000 	teqeq	r5, #0
    6474:	000004f4 	strdeq	r0, [r0], -r4
    6478:	07980326 	ldreq	r0, [r8, r6, lsr #6]
    647c:	03270000 	teqeq	r7, #0
    6480:	00000428 	andeq	r0, r0, r8, lsr #8
    6484:	07cf0328 	strbeq	r0, [pc, r8, lsr #6]
    6488:	03290000 	teqeq	r9, #0
    648c:	00000581 	andeq	r0, r0, r1, lsl #11
    6490:	ea04002a 	b	106540 <__RW_SIZE__+0x105fb8>
    6494:	03000004 	movweq	r0, #4
    6498:	002501d9 	ldrdeq	r0, [r5], -r9	; <UNPREDICTABLE>
    649c:	01050000 	mrseq	r0, (UNDEF: 5)
    64a0:	00006806 	andeq	r6, r0, r6, lsl #16
    64a4:	027c0600 	rsbseq	r0, ip, #0, 12
    64a8:	2a040000 	bcs	1064b0 <__RW_SIZE__+0x105f28>
    64ac:	00000182 	andeq	r0, r0, r2, lsl #3
    64b0:	66080105 	strvs	r0, [r8], -r5, lsl #2
    64b4:	05000000 	streq	r0, [r0, #-0]
    64b8:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
    64bc:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
    64c0:	04000002 	streq	r0, [r0], #-2
    64c4:	00019b36 	andeq	r9, r1, r6, lsr fp
    64c8:	07020500 	streq	r0, [r2, -r0, lsl #10]
    64cc:	0000003e 	andeq	r0, r0, lr, lsr r0
    64d0:	05050405 	streq	r0, [r5, #-1029]	; 0xfffffbfb
    64d4:	06000000 	streq	r0, [r0], -r0
    64d8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    64dc:	01b45004 			; <UNDEFINED> instruction: 0x01b45004
    64e0:	04050000 	streq	r0, [r5], #-0
    64e4:	00009b07 	andeq	r9, r0, r7, lsl #22
    64e8:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
    64ec:	00000000 	andeq	r0, r0, r0
    64f0:	96070805 	strls	r0, [r7], -r5, lsl #16
    64f4:	07000000 	streq	r0, [r0, -r0]
    64f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    64fc:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
    6500:	0000a007 	andeq	sl, r0, r7
    6504:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
    6508:	02858402 	addeq	r8, r5, #33554432	; 0x2000000
    650c:	70090000 	andvc	r0, r9, r0
    6510:	02000004 	andeq	r0, r0, #4
    6514:	00029c86 	andeq	r9, r2, r6, lsl #25
    6518:	12090000 	andne	r0, r9, #0
    651c:	02000006 	andeq	r0, r0, #6
    6520:	0002a187 	andeq	sl, r2, r7, lsl #3
    6524:	55092000 	strpl	r2, [r9, #-0]
    6528:	02000007 	andeq	r0, r0, #7
    652c:	0002b188 	andeq	fp, r2, r8, lsl #3
    6530:	83098000 	movwhi	r8, #36864	; 0x9000
    6534:	02000004 	andeq	r0, r0, #4
    6538:	0002a189 	andeq	sl, r2, r9, lsl #3
    653c:	870aa000 	strhi	sl, [sl, -r0]
    6540:	02000007 	andeq	r0, r0, #7
    6544:	0002b68a 	andeq	fp, r2, sl, lsl #13
    6548:	0a010000 	beq	46550 <__RW_SIZE__+0x45fc8>
    654c:	0000061c 	andeq	r0, r0, ip, lsl r6
    6550:	02a18b02 	adceq	r8, r1, #2048	; 0x800
    6554:	01200000 	teqeq	r0, r0
    6558:	0005bc0a 	andeq	fp, r5, sl, lsl #24
    655c:	bb8c0200 	bllt	fe306d64 <MSP_BASE+0xde301d64>
    6560:	80000002 	andhi	r0, r0, r2
    6564:	06260a01 	strteq	r0, [r6], -r1, lsl #20
    6568:	8d020000 	stchi	0, cr0, [r2, #-0]
    656c:	000002a1 	andeq	r0, r0, r1, lsr #5
    6570:	640a01a0 	strvs	r0, [sl], #-416	; 0xfffffe60
    6574:	02000007 	andeq	r0, r0, #7
    6578:	0002c08e 	andeq	ip, r2, lr, lsl #1
    657c:	0a020000 	beq	86584 <__RW_SIZE__+0x85ffc>
    6580:	00000630 	andeq	r0, r0, r0, lsr r6
    6584:	02c58f02 	sbceq	r8, r5, #2, 30
    6588:	02200000 	eoreq	r0, r0, #0
    658c:	0050490b 	subseq	r4, r0, fp, lsl #18
    6590:	02e59002 	rsceq	r9, r5, #2
    6594:	03000000 	movweq	r0, #0
    6598:	00063a0a 	andeq	r3, r6, sl, lsl #20
    659c:	ea910200 	b	fe446da4 <MSP_BASE+0xde441da4>
    65a0:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    65a4:	06040a03 	streq	r0, [r4], -r3, lsl #20
    65a8:	92020000 	andls	r0, r2, #0
    65ac:	000002fb 	strdeq	r0, [r0], -fp
    65b0:	0c000e00 	stceq	14, cr0, [r0], {-0}
    65b4:	000001a9 	andeq	r0, r0, r9, lsr #3
    65b8:	00000295 	muleq	r0, r5, r2
    65bc:	0002950d 	andeq	r9, r2, sp, lsl #10
    65c0:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
    65c4:	01430704 	cmpeq	r3, r4, lsl #14
    65c8:	850e0000 	strhi	r0, [lr, #-0]
    65cc:	0c000002 	stceq	0, cr0, [r0], {2}
    65d0:	000001a9 	andeq	r0, r0, r9, lsr #3
    65d4:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    65d8:	0002950d 	andeq	r9, r2, sp, lsl #10
    65dc:	0e001700 	cdpeq	7, 0, cr1, cr0, cr0, {0}
    65e0:	00000285 	andeq	r0, r0, r5, lsl #5
    65e4:	0002850e 	andeq	r8, r2, lr, lsl #10
    65e8:	02850e00 	addeq	r0, r5, #0, 28
    65ec:	850e0000 	strhi	r0, [lr, #-0]
    65f0:	0c000002 	stceq	0, cr0, [r0], {2}
    65f4:	000001a9 	andeq	r0, r0, r9, lsr #3
    65f8:	000002d5 	ldrdeq	r0, [r0], -r5
    65fc:	0002950d 	andeq	r9, r2, sp, lsl #10
    6600:	0c003700 	stceq	7, cr3, [r0], {-0}
    6604:	00000177 	andeq	r0, r0, r7, ror r1
    6608:	000002e5 	andeq	r0, r0, r5, ror #5
    660c:	0002950d 	andeq	r9, r2, sp, lsl #10
    6610:	0e00ef00 	cdpeq	15, 0, cr14, cr0, cr0, {0}
    6614:	000002d5 	ldrdeq	r0, [r0], -r5
    6618:	0001a90c 	andeq	sl, r1, ip, lsl #18
    661c:	0002fb00 	andeq	pc, r2, r0, lsl #22
    6620:	02950f00 	addseq	r0, r5, #0, 30
    6624:	02830000 	addeq	r0, r3, #0
    6628:	01a90e00 			; <UNDEFINED> instruction: 0x01a90e00
    662c:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    6630:	02000006 	andeq	r0, r0, #6
    6634:	0001d793 	muleq	r1, r3, r7
    6638:	01900e00 	orrseq	r0, r0, r0, lsl #28
    663c:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    6640:	9b043403 	blls	113654 <__RW_SIZE__+0x1130cc>
    6644:	11000003 	tstne	r0, r3
    6648:	03005243 	movweq	r5, #579	; 0x243
    664c:	02fb0436 	rscseq	r0, fp, #905969664	; 0x36000000
    6650:	12000000 	andne	r0, r0, #0
    6654:	00000860 	andeq	r0, r0, r0, ror #16
    6658:	fb043703 	blx	11426e <__RW_SIZE__+0x113ce6>
    665c:	04000002 	streq	r0, [r0], #-2
    6660:	52494311 	subpl	r4, r9, #1140850688	; 0x44000000
    6664:	04380300 	ldrteq	r0, [r8], #-768	; 0xfffffd00
    6668:	000002fb 	strdeq	r0, [r0], -fp
    666c:	008d1208 	addeq	r1, sp, r8, lsl #4
    6670:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    6674:	0002fb04 	andeq	pc, r2, r4, lsl #22
    6678:	35120c00 	ldrcc	r0, [r2, #-3072]	; 0xfffff400
    667c:	03000000 	movweq	r0, #0
    6680:	02fb043a 	rscseq	r0, fp, #973078528	; 0x3a000000
    6684:	12100000 	andsne	r0, r0, #0
    6688:	00000021 	andeq	r0, r0, r1, lsr #32
    668c:	fb043b03 	blx	1152a2 <__RW_SIZE__+0x114d1a>
    6690:	14000002 	strne	r0, [r0], #-2
    6694:	00007d12 	andeq	r7, r0, r2, lsl sp
    6698:	043c0300 	ldrteq	r0, [ip], #-768	; 0xfffffd00
    669c:	000002fb 	strdeq	r0, [r0], -fp
    66a0:	00851218 	addeq	r1, r5, r8, lsl r2
    66a4:	3d030000 	stccc	0, cr0, [r3, #-0]
    66a8:	0002fb04 	andeq	pc, r2, r4, lsl #22
    66ac:	0e121c00 	cdpeq	12, 1, cr1, cr2, cr0, {0}
    66b0:	03000000 	movweq	r0, #0
    66b4:	02fb043e 	rscseq	r0, fp, #1040187392	; 0x3e000000
    66b8:	11200000 	teqne	r0, r0
    66bc:	00525343 	subseq	r5, r2, r3, asr #6
    66c0:	fb043f03 	blx	1162d6 <__RW_SIZE__+0x115d4e>
    66c4:	24000002 	strcs	r0, [r0], #-2
    66c8:	01ac0400 			; <UNDEFINED> instruction: 0x01ac0400
    66cc:	4a030000 	bmi	c66d4 <__RW_SIZE__+0xc614c>
    66d0:	00031004 	andeq	r1, r3, r4
    66d4:	03501000 	cmpeq	r0, #0
    66d8:	05b804a2 	ldreq	r0, [r8, #1186]!	; 0x4a2
    66dc:	43110000 	tstmi	r1, #0
    66e0:	03003152 	movweq	r3, #338	; 0x152
    66e4:	030b04a4 	movweq	r0, #46244	; 0xb4a4
    66e8:	12000000 	andne	r0, r0, #0
    66ec:	00000612 	andeq	r0, r0, r2, lsl r6
    66f0:	9004a503 	andls	sl, r4, r3, lsl #10
    66f4:	02000001 	andeq	r0, r0, #1
    66f8:	32524311 	subscc	r4, r2, #1140850688	; 0x44000000
    66fc:	04a60300 	strteq	r0, [r6], #768	; 0x300
    6700:	0000030b 	andeq	r0, r0, fp, lsl #6
    6704:	096e1204 	stmdbeq	lr!, {r2, r9, ip}^
    6708:	a7030000 	strge	r0, [r3, -r0]
    670c:	00019004 	andeq	r9, r1, r4
    6710:	3e120600 	cfmsub32cc	mvax0, mvfx0, mvfx2, mvfx0
    6714:	0300000f 	movweq	r0, #15
    6718:	030b04a8 	movweq	r0, #46248	; 0xb4a8
    671c:	12080000 	andne	r0, r8, #0
    6720:	0000061c 	andeq	r0, r0, ip, lsl r6
    6724:	9004a903 	andls	sl, r4, r3, lsl #18
    6728:	0a000001 	beq	6734 <__RW_SIZE__+0x61ac>
    672c:	000b9c12 	andeq	r9, fp, r2, lsl ip
    6730:	04aa0300 	strteq	r0, [sl], #768	; 0x300
    6734:	0000030b 	andeq	r0, r0, fp, lsl #6
    6738:	0626120c 	strteq	r1, [r6], -ip, lsl #4
    673c:	ab030000 	blge	c6744 <__RW_SIZE__+0xc61bc>
    6740:	00019004 	andeq	r9, r1, r4
    6744:	53110e00 	tstpl	r1, #0, 28
    6748:	ac030052 	stcge	0, cr0, [r3], {82}	; 0x52
    674c:	00030b04 	andeq	r0, r3, r4, lsl #22
    6750:	30121000 	andscc	r1, r2, r0
    6754:	03000006 	movweq	r0, #6
    6758:	019004ad 	orrseq	r0, r0, sp, lsr #9
    675c:	11120000 	tstne	r2, r0
    6760:	00524745 	subseq	r4, r2, r5, asr #14
    6764:	0b04ae03 	bleq	131f78 <__RW_SIZE__+0x1319f0>
    6768:	14000003 	strne	r0, [r0], #-3
    676c:	00063a12 	andeq	r3, r6, r2, lsl sl
    6770:	04af0300 	strteq	r0, [pc], #768	; 6778 <__RW_SIZE__+0x61f0>
    6774:	00000190 	muleq	r0, r0, r1
    6778:	0c511216 	lfmeq	f1, 2, [r1], {22}
    677c:	b0030000 	andlt	r0, r3, r0
    6780:	00030b04 	andeq	r0, r3, r4, lsl #22
    6784:	78121800 	ldmdavc	r2, {fp, ip}
    6788:	03000009 	movweq	r0, #9
    678c:	019004b1 			; <UNDEFINED> instruction: 0x019004b1
    6790:	121a0000 	andsne	r0, sl, #0
    6794:	00000c57 	andeq	r0, r0, r7, asr ip
    6798:	0b04b203 	bleq	132fac <__RW_SIZE__+0x132a24>
    679c:	1c000003 	stcne	0, cr0, [r0], {3}
    67a0:	00098212 	andeq	r8, r9, r2, lsl r2
    67a4:	04b30300 	ldrteq	r0, [r3], #768	; 0x300
    67a8:	00000190 	muleq	r0, r0, r1
    67ac:	0d05121e 	sfmeq	f1, 4, [r5, #-120]	; 0xffffff88
    67b0:	b4030000 	strlt	r0, [r3], #-0
    67b4:	00030b04 	andeq	r0, r3, r4, lsl #22
    67b8:	8c122000 	ldchi	0, cr2, [r2], {-0}
    67bc:	03000009 	movweq	r0, #9
    67c0:	019004b5 			; <UNDEFINED> instruction: 0x019004b5
    67c4:	11220000 	teqne	r2, r0
    67c8:	00544e43 	subseq	r4, r4, r3, asr #28
    67cc:	0b04b603 	bleq	133fe0 <__RW_SIZE__+0x133a58>
    67d0:	24000003 	strcs	r0, [r0], #-3
    67d4:	000e9412 	andeq	r9, lr, r2, lsl r4
    67d8:	04b70300 	ldrteq	r0, [r7], #768	; 0x300
    67dc:	00000190 	muleq	r0, r0, r1
    67e0:	53501126 	cmppl	r0, #-2147483639	; 0x80000009
    67e4:	b8030043 	stmdalt	r3, {r0, r1, r6}
    67e8:	00030b04 	andeq	r0, r3, r4, lsl #22
    67ec:	8d122800 	ldchi	8, cr2, [r2, #-0]
    67f0:	0300000c 	movweq	r0, #12
    67f4:	019004b9 			; <UNDEFINED> instruction: 0x019004b9
    67f8:	112a0000 	teqne	sl, r0
    67fc:	00525241 	subseq	r5, r2, r1, asr #4
    6800:	0b04ba03 	bleq	135014 <__RW_SIZE__+0x134a8c>
    6804:	2c000003 	stccs	0, cr0, [r0], {3}
    6808:	000c9812 	andeq	r9, ip, r2, lsl r8
    680c:	04bb0300 	ldrteq	r0, [fp], #768	; 0x300
    6810:	00000190 	muleq	r0, r0, r1
    6814:	4352112e 	cmpmi	r2, #-2147483637	; 0x8000000b
    6818:	bc030052 	stclt	0, cr0, [r3], {82}	; 0x52
    681c:	00030b04 	andeq	r0, r3, r4, lsl #22
    6820:	52123000 	andspl	r3, r2, #0
    6824:	0300000e 	movweq	r0, #14
    6828:	019004bd 			; <UNDEFINED> instruction: 0x019004bd
    682c:	12320000 	eorsne	r0, r2, #0
    6830:	00000fb6 			; <UNDEFINED> instruction: 0x00000fb6
    6834:	0b04be03 	bleq	136048 <__RW_SIZE__+0x135ac0>
    6838:	34000003 	strcc	r0, [r0], #-3
    683c:	000ca312 	andeq	sl, ip, r2, lsl r3
    6840:	04bf0300 	ldrteq	r0, [pc], #768	; 6848 <__RW_SIZE__+0x62c0>
    6844:	00000190 	muleq	r0, r0, r1
    6848:	0c261236 	sfmeq	f1, 4, [r6], #-216	; 0xffffff28
    684c:	c0030000 	andgt	r0, r3, r0
    6850:	00030b04 	andeq	r0, r3, r4, lsl #22
    6854:	ae123800 	cdpge	8, 1, cr3, cr2, cr0, {0}
    6858:	0300000c 	movweq	r0, #12
    685c:	019004c1 	orrseq	r0, r0, r1, asr #9
    6860:	123a0000 	eorsne	r0, sl, #0
    6864:	00000fbb 			; <UNDEFINED> instruction: 0x00000fbb
    6868:	0b04c203 	bleq	13707c <__RW_SIZE__+0x136af4>
    686c:	3c000003 	stccc	0, cr0, [r0], {3}
    6870:	000cb912 	andeq	fp, ip, r2, lsl r9
    6874:	04c30300 	strbeq	r0, [r3], #768	; 0x300
    6878:	00000190 	muleq	r0, r0, r1
    687c:	0fc0123e 	svceq	0x00c0123e
    6880:	c4030000 	strgt	r0, [r3], #-0
    6884:	00030b04 	andeq	r0, r3, r4, lsl #22
    6888:	c5124000 	ldrgt	r4, [r2, #-0]
    688c:	0300000f 	movweq	r0, #15
    6890:	019004c5 	orrseq	r0, r0, r5, asr #9
    6894:	12420000 	subne	r0, r2, #0
    6898:	00000d93 	muleq	r0, r3, sp
    689c:	0b04c603 	bleq	1380b0 <__RW_SIZE__+0x137b28>
    68a0:	44000003 	strmi	r0, [r0], #-3
    68a4:	000cd112 	andeq	sp, ip, r2, lsl r1
    68a8:	04c70300 	strbeq	r0, [r7], #768	; 0x300
    68ac:	00000190 	muleq	r0, r0, r1
    68b0:	43441146 	movtmi	r1, #16710	; 0x4146
    68b4:	c8030052 	stmdagt	r3, {r1, r4, r6}
    68b8:	00030b04 	andeq	r0, r3, r4, lsl #22
    68bc:	dc124800 	ldcle	8, cr4, [r2], {-0}
    68c0:	0300000c 	movweq	r0, #12
    68c4:	019004c9 	orrseq	r0, r0, r9, asr #9
    68c8:	124a0000 	subne	r0, sl, #0
    68cc:	00000f71 	andeq	r0, r0, r1, ror pc
    68d0:	0b04ca03 	bleq	1390e4 <__RW_SIZE__+0x138b5c>
    68d4:	4c000003 	stcmi	0, cr0, [r0], {3}
    68d8:	000ce712 	andeq	lr, ip, r2, lsl r7
    68dc:	04cb0300 	strbeq	r0, [fp], #768	; 0x300
    68e0:	00000190 	muleq	r0, r0, r1
    68e4:	fb04004e 	blx	106a26 <__RW_SIZE__+0x10649e>
    68e8:	0300000b 	movweq	r0, #11
    68ec:	03a704cc 			; <UNDEFINED> instruction: 0x03a704cc
    68f0:	01050000 	mrseq	r0, (UNDEF: 5)
    68f4:	00006f08 	andeq	r6, r0, r8, lsl #30
    68f8:	05481300 	strbeq	r1, [r8, #-768]	; 0xfffffd00
    68fc:	13020000 	movwne	r0, #8192	; 0x2000
    6900:	05e50306 	strbeq	r0, [r5, #774]!	; 0x306
    6904:	32140000 	andscc	r0, r4, #0
    6908:	02000004 	andeq	r0, r0, #4
    690c:	01640613 	cmneq	r4, r3, lsl r6
    6910:	13000000 	movwne	r0, #0
    6914:	000004a9 	andeq	r0, r0, r9, lsr #9
    6918:	0305de02 	movweq	sp, #24066	; 0x5e02
    691c:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6920:	00043214 	andeq	r3, r4, r4, lsl r2
    6924:	05de0200 	ldrbeq	r0, [lr, #512]	; 0x200
    6928:	00000164 	andeq	r0, r0, r4, ror #2
    692c:	08261300 	stmdaeq	r6!, {r8, r9, ip}
    6930:	eb020000 	bl	86938 <__RW_SIZE__+0x863b0>
    6934:	06190305 	ldreq	r0, [r9], -r5, lsl #6
    6938:	32140000 	andscc	r0, r4, #0
    693c:	02000004 	andeq	r0, r0, #4
    6940:	016405eb 	smultteq	r4, fp, r5
    6944:	15000000 	strne	r0, [r0, #-0]
    6948:	0000114d 	andeq	r1, r0, sp, asr #2
    694c:	74d00801 	ldrbvc	r0, [r0], #2049	; 0x801
    6950:	00f40800 	rscseq	r0, r4, r0, lsl #16
    6954:	9c010000 	stcls	0, cr0, [r1], {-0}
    6958:	00000656 	andeq	r0, r0, r6, asr r6
    695c:	00114016 	andseq	r4, r1, r6, lsl r0
    6960:	c9080100 	stmdbgt	r8, {r8}
    6964:	e8000001 	stmda	r0, {r0}
    6968:	1700001c 	smladne	r0, ip, r0, r0
    696c:	0a010069 	beq	46b18 <__RW_SIZE__+0x46590>
    6970:	000001c9 	andeq	r0, r0, r9, asr #3
    6974:	00001d09 	andeq	r1, r0, r9, lsl #26
    6978:	01007418 	tsteq	r0, r8, lsl r4
    697c:	0001d00b 	andeq	sp, r1, fp
    6980:	00500100 	subseq	r0, r0, r0, lsl #2
    6984:	000a5015 	andeq	r5, sl, r5, lsl r0
    6988:	c42d0100 	strtgt	r0, [sp], #-256	; 0xffffff00
    698c:	b6080075 			; <UNDEFINED> instruction: 0xb6080075
    6990:	01000000 	mrseq	r0, (UNDEF: 0)
    6994:	0006d69c 	muleq	r6, ip, r6
    6998:	6e651900 	cdpvs	9, 6, cr1, cr5, cr0, {0}
    699c:	c92d0100 	stmfdgt	sp!, {r8}
    69a0:	28000001 	stmdacs	r0, {r0}
    69a4:	1600001d 			; <UNDEFINED> instruction: 0x1600001d
    69a8:	00001140 	andeq	r1, r0, r0, asr #2
    69ac:	01c92d01 	biceq	r2, r9, r1, lsl #26
    69b0:	1d490000 	stclne	0, cr0, [r9, #-0]
    69b4:	ff1a0000 			; <UNDEFINED> instruction: 0xff1a0000
    69b8:	c8000005 	stmdagt	r0, {r0, r2}
    69bc:	b0080075 	andlt	r0, r8, r5, ror r0
    69c0:	01000023 	tsteq	r0, r3, lsr #32
    69c4:	0006a541 	andeq	sl, r6, r1, asr #10
    69c8:	060c1b00 	streq	r1, [ip], -r0, lsl #22
    69cc:	1d830000 	stcne	0, cr0, [r3]
    69d0:	1a000000 	bne	69d8 <__RW_SIZE__+0x6450>
    69d4:	000005cb 	andeq	r0, r0, fp, asr #11
    69d8:	0800763e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r9, sl, ip, sp, lr}
    69dc:	000023c8 	andeq	r2, r0, r8, asr #7
    69e0:	06bf3901 	ldrteq	r3, [pc], r1, lsl #18
    69e4:	d81c0000 	ldmdale	ip, {}	; <UNPREDICTABLE>
    69e8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    69ec:	05e51d00 	strbeq	r1, [r5, #3328]!	; 0xd00
    69f0:	766a0000 	strbtvc	r0, [sl], -r0
    69f4:	00020800 	andeq	r0, r2, r0, lsl #16
    69f8:	3b010000 	blcc	46a00 <__RW_SIZE__+0x46478>
    69fc:	0005f21c 	andeq	pc, r5, ip, lsl r2	; <UNPREDICTABLE>
    6a00:	00001e00 	andeq	r1, r0, r0, lsl #28
    6a04:	0000511e 	andeq	r5, r0, lr, lsl r1
    6a08:	06ce0200 	strbeq	r0, [lr], r0, lsl #4
    6a0c:	000006e2 	andeq	r0, r0, r2, ror #13
    6a10:	0001c90e 	andeq	ip, r1, lr, lsl #18
    6a14:	09ab0000 	stmibeq	fp!, {}	; <UNPREDICTABLE>
    6a18:	00040000 	andeq	r0, r4, r0
    6a1c:	00001304 	andeq	r1, r0, r4, lsl #6
    6a20:	00ad0104 	adceq	r0, sp, r4, lsl #2
    6a24:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    6a28:	57000011 	smladpl	r0, r1, r0, r0
    6a2c:	80000001 	andhi	r0, r0, r1
    6a30:	62080076 	andvs	r0, r8, #118	; 0x76
    6a34:	da000003 	ble	6a48 <__RW_SIZE__+0x64c0>
    6a38:	0200001e 	andeq	r0, r0, #30
    6a3c:	00000432 	andeq	r0, r0, r2, lsr r4
    6a40:	64a80301 	strtvs	r0, [r8], #769	; 0x301
    6a44:	03000001 	movweq	r0, #1
    6a48:	0000065d 	andeq	r0, r0, sp, asr r6
    6a4c:	045a0372 	ldrbeq	r0, [sl], #-882	; 0xfffffc8e
    6a50:	03740000 	cmneq	r4, #0
    6a54:	0000059a 	muleq	r0, sl, r5
    6a58:	071d0375 			; <UNDEFINED> instruction: 0x071d0375
    6a5c:	03760000 	cmneq	r6, #0
    6a60:	0000073a 	andeq	r0, r0, sl, lsr r7
    6a64:	070b037b 	smlsdxeq	fp, fp, r3, r0
    6a68:	037c0000 	cmneq	ip, #0
    6a6c:	00000437 	andeq	r0, r0, r7, lsr r4
    6a70:	06ce037e 			; <UNDEFINED> instruction: 0x06ce037e
    6a74:	037f0000 	cmneq	pc, #0
    6a78:	00000590 	muleq	r0, r0, r5
    6a7c:	05b30300 	ldreq	r0, [r3, #768]!	; 0x300
    6a80:	03010000 	movweq	r0, #4096	; 0x1000
    6a84:	000007be 			; <UNDEFINED> instruction: 0x000007be
    6a88:	06090302 	streq	r0, [r9], -r2, lsl #6
    6a8c:	03030000 	movweq	r0, #12288	; 0x3000
    6a90:	0000040d 	andeq	r0, r0, sp, lsl #8
    6a94:	04510304 	ldrbeq	r0, [r1], #-772	; 0xfffffcfc
    6a98:	03050000 	movweq	r0, #20480	; 0x5000
    6a9c:	0000041d 	andeq	r0, r0, sp, lsl r4
    6aa0:	06830306 	streq	r0, [r3], r6, lsl #6
    6aa4:	03070000 	movweq	r0, #28672	; 0x7000
    6aa8:	00000500 	andeq	r0, r0, r0, lsl #10
    6aac:	077c0308 	ldrbeq	r0, [ip, -r8, lsl #6]!
    6ab0:	03090000 	movweq	r0, #36864	; 0x9000
    6ab4:	000005a8 	andeq	r0, r0, r8, lsr #11
    6ab8:	0567030a 	strbeq	r0, [r7, #-778]!	; 0xfffffcf6
    6abc:	030b0000 	movweq	r0, #45056	; 0xb000
    6ac0:	000003fa 	strdeq	r0, [r0], -sl
    6ac4:	05d7030c 	ldrbeq	r0, [r7, #780]	; 0x30c
    6ac8:	030d0000 	movweq	r0, #53248	; 0xd000
    6acc:	00000496 	muleq	r0, r6, r4
    6ad0:	0769030e 	strbeq	r0, [r9, -lr, lsl #6]!
    6ad4:	030f0000 	movweq	r0, #61440	; 0xf000
    6ad8:	00000535 	andeq	r0, r0, r5, lsr r5
    6adc:	03d00310 	bicseq	r0, r0, #16, 6	; 0x40000000
    6ae0:	03110000 	tsteq	r1, #0
    6ae4:	0000078c 	andeq	r0, r0, ip, lsl #15
    6ae8:	04d60312 	ldrbeq	r0, [r6], #786	; 0x312
    6aec:	03130000 	tsteq	r3, #0
    6af0:	000003a8 	andeq	r0, r0, r8, lsr #7
    6af4:	04c80314 	strbeq	r0, [r8], #788	; 0x314
    6af8:	03150000 	tsteq	r5, #0
    6afc:	000003c2 	andeq	r0, r0, r2, asr #7
    6b00:	072d0316 			; <UNDEFINED> instruction: 0x072d0316
    6b04:	03170000 	tsteq	r7, #0
    6b08:	00000475 	andeq	r0, r0, r5, ror r4
    6b0c:	05f70318 	ldrbeq	r0, [r7, #792]!	; 0x318
    6b10:	03190000 	tsteq	r9, #0
    6b14:	00000698 	muleq	r0, r8, r6
    6b18:	0671031a 			; <UNDEFINED> instruction: 0x0671031a
    6b1c:	031b0000 	tsteq	fp, #0
    6b20:	000006e7 	andeq	r0, r0, r7, ror #13
    6b24:	055d031c 	ldrbeq	r0, [sp, #-796]	; 0xfffffce4
    6b28:	031d0000 	tsteq	sp, #0
    6b2c:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6b30:	05ea031e 	strbeq	r0, [sl, #798]!	; 0x31e
    6b34:	031f0000 	tsteq	pc, #0
    6b38:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    6b3c:	051b0320 	ldreq	r0, [fp, #-800]	; 0xfffffce0
    6b40:	03210000 	teqeq	r1, #0
    6b44:	000003e3 	andeq	r0, r0, r3, ror #7
    6b48:	048c0322 	streq	r0, [ip], #802	; 0x322
    6b4c:	03230000 	teqeq	r3, #0
    6b50:	0000075a 	andeq	r0, r0, sl, asr r7
    6b54:	06510324 	ldrbeq	r0, [r1], -r4, lsr #6
    6b58:	03250000 	teqeq	r5, #0
    6b5c:	000004f4 	strdeq	r0, [r0], -r4
    6b60:	07980326 	ldreq	r0, [r8, r6, lsr #6]
    6b64:	03270000 	teqeq	r7, #0
    6b68:	00000428 	andeq	r0, r0, r8, lsr #8
    6b6c:	07cf0328 	strbeq	r0, [pc, r8, lsr #6]
    6b70:	03290000 	teqeq	r9, #0
    6b74:	00000581 	andeq	r0, r0, r1, lsl #11
    6b78:	ea04002a 	b	106c28 <__RW_SIZE__+0x1066a0>
    6b7c:	03000004 	movweq	r0, #4
    6b80:	002501d9 	ldrdeq	r0, [r5], -r9	; <UNPREDICTABLE>
    6b84:	01050000 	mrseq	r0, (UNDEF: 5)
    6b88:	00006806 	andeq	r6, r0, r6, lsl #16
    6b8c:	027c0600 	rsbseq	r0, ip, #0, 12
    6b90:	2a040000 	bcs	106b98 <__RW_SIZE__+0x106610>
    6b94:	00000182 	andeq	r0, r0, r2, lsl #3
    6b98:	66080105 	strvs	r0, [r8], -r5, lsl #2
    6b9c:	05000000 	streq	r0, [r0, #-0]
    6ba0:	01a20502 			; <UNDEFINED> instruction: 0x01a20502
    6ba4:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
    6ba8:	04000002 	streq	r0, [r0], #-2
    6bac:	00019b36 	andeq	r9, r1, r6, lsr fp
    6bb0:	07020500 	streq	r0, [r2, -r0, lsl #10]
    6bb4:	0000003e 	andeq	r0, r0, lr, lsr r0
    6bb8:	05050405 	streq	r0, [r5, #-1029]	; 0xfffffbfb
    6bbc:	06000000 	streq	r0, [r0], -r0
    6bc0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    6bc4:	01b45004 			; <UNDEFINED> instruction: 0x01b45004
    6bc8:	04050000 	streq	r0, [r5], #-0
    6bcc:	00009b07 	andeq	r9, r0, r7, lsl #22
    6bd0:	05080500 	streq	r0, [r8, #-1280]	; 0xfffffb00
    6bd4:	00000000 	andeq	r0, r0, r0
    6bd8:	96070805 	strls	r0, [r7], -r5, lsl #16
    6bdc:	07000000 	streq	r0, [r0, -r0]
    6be0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6be4:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
    6be8:	0000a007 	andeq	sl, r0, r7
    6bec:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
    6bf0:	02858402 	addeq	r8, r5, #33554432	; 0x2000000
    6bf4:	70090000 	andvc	r0, r9, r0
    6bf8:	02000004 	andeq	r0, r0, #4
    6bfc:	00029c86 	andeq	r9, r2, r6, lsl #25
    6c00:	12090000 	andne	r0, r9, #0
    6c04:	02000006 	andeq	r0, r0, #6
    6c08:	0002a187 	andeq	sl, r2, r7, lsl #3
    6c0c:	55092000 	strpl	r2, [r9, #-0]
    6c10:	02000007 	andeq	r0, r0, #7
    6c14:	0002b188 	andeq	fp, r2, r8, lsl #3
    6c18:	83098000 	movwhi	r8, #36864	; 0x9000
    6c1c:	02000004 	andeq	r0, r0, #4
    6c20:	0002a189 	andeq	sl, r2, r9, lsl #3
    6c24:	870aa000 	strhi	sl, [sl, -r0]
    6c28:	02000007 	andeq	r0, r0, #7
    6c2c:	0002b68a 	andeq	fp, r2, sl, lsl #13
    6c30:	0a010000 	beq	46c38 <__RW_SIZE__+0x466b0>
    6c34:	0000061c 	andeq	r0, r0, ip, lsl r6
    6c38:	02a18b02 	adceq	r8, r1, #2048	; 0x800
    6c3c:	01200000 	teqeq	r0, r0
    6c40:	0005bc0a 	andeq	fp, r5, sl, lsl #24
    6c44:	bb8c0200 	bllt	fe30744c <MSP_BASE+0xde30244c>
    6c48:	80000002 	andhi	r0, r0, r2
    6c4c:	06260a01 	strteq	r0, [r6], -r1, lsl #20
    6c50:	8d020000 	stchi	0, cr0, [r2, #-0]
    6c54:	000002a1 	andeq	r0, r0, r1, lsr #5
    6c58:	640a01a0 	strvs	r0, [sl], #-416	; 0xfffffe60
    6c5c:	02000007 	andeq	r0, r0, #7
    6c60:	0002c08e 	andeq	ip, r2, lr, lsl #1
    6c64:	0a020000 	beq	86c6c <__RW_SIZE__+0x866e4>
    6c68:	00000630 	andeq	r0, r0, r0, lsr r6
    6c6c:	02c58f02 	sbceq	r8, r5, #2, 30
    6c70:	02200000 	eoreq	r0, r0, #0
    6c74:	0050490b 	subseq	r4, r0, fp, lsl #18
    6c78:	02e59002 	rsceq	r9, r5, #2
    6c7c:	03000000 	movweq	r0, #0
    6c80:	00063a0a 	andeq	r3, r6, sl, lsl #20
    6c84:	ea910200 	b	fe44748c <MSP_BASE+0xde44248c>
    6c88:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    6c8c:	06040a03 	streq	r0, [r4], -r3, lsl #20
    6c90:	92020000 	andls	r0, r2, #0
    6c94:	000002fb 	strdeq	r0, [r0], -fp
    6c98:	0c000e00 	stceq	14, cr0, [r0], {-0}
    6c9c:	000001a9 	andeq	r0, r0, r9, lsr #3
    6ca0:	00000295 	muleq	r0, r5, r2
    6ca4:	0002950d 	andeq	r9, r2, sp, lsl #10
    6ca8:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
    6cac:	01430704 	cmpeq	r3, r4, lsl #14
    6cb0:	850e0000 	strhi	r0, [lr, #-0]
    6cb4:	0c000002 	stceq	0, cr0, [r0], {2}
    6cb8:	000001a9 	andeq	r0, r0, r9, lsr #3
    6cbc:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    6cc0:	0002950d 	andeq	r9, r2, sp, lsl #10
    6cc4:	0e001700 	cdpeq	7, 0, cr1, cr0, cr0, {0}
    6cc8:	00000285 	andeq	r0, r0, r5, lsl #5
    6ccc:	0002850e 	andeq	r8, r2, lr, lsl #10
    6cd0:	02850e00 	addeq	r0, r5, #0, 28
    6cd4:	850e0000 	strhi	r0, [lr, #-0]
    6cd8:	0c000002 	stceq	0, cr0, [r0], {2}
    6cdc:	000001a9 	andeq	r0, r0, r9, lsr #3
    6ce0:	000002d5 	ldrdeq	r0, [r0], -r5
    6ce4:	0002950d 	andeq	r9, r2, sp, lsl #10
    6ce8:	0c003700 	stceq	7, cr3, [r0], {-0}
    6cec:	00000177 	andeq	r0, r0, r7, ror r1
    6cf0:	000002e5 	andeq	r0, r0, r5, ror #5
    6cf4:	0002950d 	andeq	r9, r2, sp, lsl #10
    6cf8:	0e00ef00 	cdpeq	15, 0, cr14, cr0, cr0, {0}
    6cfc:	000002d5 	ldrdeq	r0, [r0], -r5
    6d00:	0001a90c 	andeq	sl, r1, ip, lsl #18
    6d04:	0002fb00 	andeq	pc, r2, r0, lsl #22
    6d08:	02950f00 	addseq	r0, r5, #0, 30
    6d0c:	02830000 	addeq	r0, r3, #0
    6d10:	01a90e00 			; <UNDEFINED> instruction: 0x01a90e00
    6d14:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    6d18:	02000006 	andeq	r0, r0, #6
    6d1c:	0001d793 	muleq	r1, r3, r7
    6d20:	01900e00 	orrseq	r0, r0, r0, lsl #28
    6d24:	1c100000 	ldcne	0, cr0, [r0], {-0}
    6d28:	7503e903 	strvc	lr, [r3, #-2307]	; 0xfffff6fd
    6d2c:	11000003 	tstne	r0, r3
    6d30:	004c5243 	subeq	r5, ip, r3, asr #4
    6d34:	fb03eb03 	blx	10194a <__RW_SIZE__+0x1013c2>
    6d38:	00000002 	andeq	r0, r0, r2
    6d3c:	48524311 	ldmdami	r2, {r0, r4, r8, r9, lr}^
    6d40:	03ec0300 	mvneq	r0, #0, 6
    6d44:	000002fb 	strdeq	r0, [r0], -fp
    6d48:	44491104 	strbmi	r1, [r9], #-260	; 0xfffffefc
    6d4c:	ed030052 	stc	0, cr0, [r3, #-328]	; 0xfffffeb8
    6d50:	0002fb03 	andeq	pc, r2, r3, lsl #22
    6d54:	4f110800 	svcmi	0x00110800
    6d58:	03005244 	movweq	r5, #580	; 0x244
    6d5c:	02fb03ee 	rscseq	r0, fp, #-1207959549	; 0xb8000003
    6d60:	120c0000 	andne	r0, ip, #0
    6d64:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    6d68:	fb03ef03 	blx	10297e <__RW_SIZE__+0x1023f6>
    6d6c:	10000002 	andne	r0, r0, r2
    6d70:	52524211 	subspl	r4, r2, #268435457	; 0x10000001
    6d74:	03f00300 	mvnseq	r0, #0, 6
    6d78:	000002fb 	strdeq	r0, [r0], -fp
    6d7c:	07ca1214 	bfieq	r1, r4, #4, #7
    6d80:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    6d84:	0002fb03 	andeq	pc, r2, r3, lsl #22
    6d88:	04001800 	streq	r1, [r0], #-2048	; 0xfffff800
    6d8c:	000006aa 	andeq	r0, r0, sl, lsr #13
    6d90:	1003f203 	andne	pc, r3, r3, lsl #4
    6d94:	10000003 	andne	r0, r0, r3
    6d98:	04340328 	ldrteq	r0, [r4], #-808	; 0xfffffcd8
    6d9c:	0000040c 	andeq	r0, r0, ip, lsl #8
    6da0:	00524311 	subseq	r4, r2, r1, lsl r3
    6da4:	fb043603 	blx	1145ba <__RW_SIZE__+0x114032>
    6da8:	00000002 	andeq	r0, r0, r2
    6dac:	00086012 	andeq	r6, r8, r2, lsl r0
    6db0:	04370300 	ldrteq	r0, [r7], #-768	; 0xfffffd00
    6db4:	000002fb 	strdeq	r0, [r0], -fp
    6db8:	49431104 	stmdbmi	r3, {r2, r8, ip}^
    6dbc:	38030052 	stmdacc	r3, {r1, r4, r6}
    6dc0:	0002fb04 	andeq	pc, r2, r4, lsl #22
    6dc4:	8d120800 	ldchi	8, cr0, [r2, #-0]
    6dc8:	03000000 	movweq	r0, #0
    6dcc:	02fb0439 	rscseq	r0, fp, #956301312	; 0x39000000
    6dd0:	120c0000 	andne	r0, ip, #0
    6dd4:	00000035 	andeq	r0, r0, r5, lsr r0
    6dd8:	fb043a03 	blx	1155ee <__RW_SIZE__+0x115066>
    6ddc:	10000002 	andne	r0, r0, r2
    6de0:	00002112 	andeq	r2, r0, r2, lsl r1
    6de4:	043b0300 	ldrteq	r0, [fp], #-768	; 0xfffffd00
    6de8:	000002fb 	strdeq	r0, [r0], -fp
    6dec:	007d1214 	rsbseq	r1, sp, r4, lsl r2
    6df0:	3c030000 	stccc	0, cr0, [r3], {-0}
    6df4:	0002fb04 	andeq	pc, r2, r4, lsl #22
    6df8:	85121800 	ldrhi	r1, [r2, #-2048]	; 0xfffff800
    6dfc:	03000000 	movweq	r0, #0
    6e00:	02fb043d 	rscseq	r0, fp, #1023410176	; 0x3d000000
    6e04:	121c0000 	andsne	r0, ip, #0
    6e08:	0000000e 	andeq	r0, r0, lr
    6e0c:	fb043e03 	blx	116622 <__RW_SIZE__+0x11609a>
    6e10:	20000002 	andcs	r0, r0, r2
    6e14:	52534311 	subspl	r4, r3, #1140850688	; 0x44000000
    6e18:	043f0300 	ldrteq	r0, [pc], #-768	; 6e20 <__RW_SIZE__+0x6898>
    6e1c:	000002fb 	strdeq	r0, [r0], -fp
    6e20:	ac040024 	stcge	0, cr0, [r4], {36}	; 0x24
    6e24:	03000001 	movweq	r0, #1
    6e28:	0381044a 	orreq	r0, r1, #1241513984	; 0x4a000000
    6e2c:	1c100000 	ldcne	0, cr0, [r0], {-0}
    6e30:	d604d203 	strle	sp, [r4], -r3, lsl #4
    6e34:	11000004 	tstne	r0, r4
    6e38:	03005253 	movweq	r5, #595	; 0x253
    6e3c:	030b04d4 	movweq	r0, #46292	; 0xb4d4
    6e40:	12000000 	andne	r0, r0, #0
    6e44:	00000612 	andeq	r0, r0, r2, lsl r6
    6e48:	9004d503 	andls	sp, r4, r3, lsl #10
    6e4c:	02000001 	andeq	r0, r0, #1
    6e50:	00524411 	subseq	r4, r2, r1, lsl r4
    6e54:	0b04d603 	bleq	13c668 <__RW_SIZE__+0x13c0e0>
    6e58:	04000003 	streq	r0, [r0], #-3
    6e5c:	00096e12 	andeq	r6, r9, r2, lsl lr
    6e60:	04d70300 	ldrbeq	r0, [r7], #768	; 0x300
    6e64:	00000190 	muleq	r0, r0, r1
    6e68:	52421106 	subpl	r1, r2, #-2147483647	; 0x80000001
    6e6c:	d8030052 	stmdale	r3, {r1, r4, r6}
    6e70:	00030b04 	andeq	r0, r3, r4, lsl #22
    6e74:	1c120800 	ldcne	8, cr0, [r2], {-0}
    6e78:	03000006 	movweq	r0, #6
    6e7c:	019004d9 			; <UNDEFINED> instruction: 0x019004d9
    6e80:	110a0000 	mrsne	r0, (UNDEF: 10)
    6e84:	00315243 	eorseq	r5, r1, r3, asr #4
    6e88:	0b04da03 	bleq	13d69c <__RW_SIZE__+0x13d114>
    6e8c:	0c000003 	stceq	0, cr0, [r0], {3}
    6e90:	00062612 	andeq	r2, r6, r2, lsl r6
    6e94:	04db0300 	ldrbeq	r0, [fp], #768	; 0x300
    6e98:	00000190 	muleq	r0, r0, r1
    6e9c:	5243110e 	subpl	r1, r3, #-2147483645	; 0x80000003
    6ea0:	dc030032 	stcle	0, cr0, [r3], {50}	; 0x32
    6ea4:	00030b04 	andeq	r0, r3, r4, lsl #22
    6ea8:	30121000 	andscc	r1, r2, r0
    6eac:	03000006 	movweq	r0, #6
    6eb0:	019004dd 			; <UNDEFINED> instruction: 0x019004dd
    6eb4:	11120000 	tstne	r2, r0
    6eb8:	00335243 	eorseq	r5, r3, r3, asr #4
    6ebc:	0b04de03 	bleq	13e6d0 <__RW_SIZE__+0x13e148>
    6ec0:	14000003 	strne	r0, [r0], #-3
    6ec4:	00063a12 	andeq	r3, r6, r2, lsl sl
    6ec8:	04df0300 	ldrbeq	r0, [pc], #768	; 6ed0 <__RW_SIZE__+0x6948>
    6ecc:	00000190 	muleq	r0, r0, r1
    6ed0:	11731216 	cmnne	r3, r6, lsl r2
    6ed4:	e0030000 	and	r0, r3, r0
    6ed8:	00030b04 	andeq	r0, r3, r4, lsl #22
    6edc:	78121800 	ldmdavc	r2, {fp, ip}
    6ee0:	03000009 	movweq	r0, #9
    6ee4:	019004e1 	orrseq	r0, r0, r1, ror #9
    6ee8:	001a0000 	andseq	r0, sl, r0
    6eec:	0011a704 	andseq	sl, r1, r4, lsl #14
    6ef0:	04e20300 	strbteq	r0, [r2], #768	; 0x300
    6ef4:	00000418 	andeq	r0, r0, r8, lsl r4
    6ef8:	04140413 	ldreq	r0, [r4], #-1043	; 0xfffffbed
    6efc:	000004ea 	andeq	r0, r0, sl, ror #9
    6f00:	6f080105 	svcvs	0x00080105
    6f04:	14000000 	strne	r0, [r0], #-0
    6f08:	0004f704 	andeq	pc, r4, r4, lsl #14
    6f0c:	04ea1500 	strbteq	r1, [sl], #1280	; 0x500
    6f10:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    6f14:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
    6f18:	0001d0d4 	ldrdeq	sp, [r1], -r4
    6f1c:	03480600 	movteq	r0, #34304	; 0x8600
    6f20:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    6f24:	00000512 	andeq	r0, r0, r2, lsl r5
    6f28:	00035716 	andeq	r5, r3, r6, lsl r7
    6f2c:	000b0400 	andeq	r0, fp, r0, lsl #8
    6f30:	00000529 	andeq	r0, r0, r9, lsr #10
    6f34:	00037d17 	andeq	r7, r3, r7, lsl sp
    6f38:	0004e200 	andeq	lr, r4, r0, lsl #4
    6f3c:	06000000 	streq	r0, [r0], -r0
    6f40:	00000359 	andeq	r0, r0, r9, asr r3
    6f44:	05076206 	streq	r6, [r7, #-518]	; 0xfffffdfa
    6f48:	ea180000 	b	606f50 <__RW_SIZE__+0x6069c8>
    6f4c:	01000011 	tsteq	r0, r1, lsl r0
    6f50:	054b012b 	strbeq	r0, [fp, #-299]	; 0xfffffed5
    6f54:	70190000 	andsvc	r0, r9, r0
    6f58:	2b010074 	blcs	47130 <__RW_SIZE__+0x46ba8>
    6f5c:	000004e4 	andeq	r0, r0, r4, ror #9
    6f60:	0e9e1a00 	vfnmseq.f32	s2, s28, s0
    6f64:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6f68:	000004ea 	andeq	r0, r0, sl, ror #9
    6f6c:	11db1b01 	bicsne	r1, fp, r1, lsl #22
    6f70:	4a010000 	bmi	46f78 <__RW_SIZE__+0x469f0>
    6f74:	000004ea 	andeq	r0, r0, sl, ror #9
    6f78:	00057201 	andeq	r7, r5, r1, lsl #4
    6f7c:	78721c00 	ldmdavc	r2!, {sl, fp, ip}^
    6f80:	ea4c0100 	b	1307388 <__RW_SIZE__+0x1306e00>
    6f84:	00000004 	andeq	r0, r0, r4
    6f88:	0005481d 	andeq	r4, r5, sp, lsl r8
    6f8c:	06130200 	ldreq	r0, [r3], -r0, lsl #4
    6f90:	00058c03 	andeq	r8, r5, r3, lsl #24
    6f94:	04321e00 	ldrteq	r1, [r2], #-3584	; 0xfffff200
    6f98:	13020000 	movwne	r0, #8192	; 0x2000
    6f9c:	00016406 	andeq	r6, r1, r6, lsl #8
    6fa0:	a91d0000 	ldmdbge	sp, {}	; <UNPREDICTABLE>
    6fa4:	02000004 	andeq	r0, r0, #4
    6fa8:	a60305de 			; <UNDEFINED> instruction: 0xa60305de
    6fac:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    6fb0:	00000432 	andeq	r0, r0, r2, lsr r4
    6fb4:	6405de02 	strvs	sp, [r5], #-3586	; 0xfffff1fe
    6fb8:	00000001 	andeq	r0, r0, r1
    6fbc:	0008261d 	andeq	r2, r8, sp, lsl r6
    6fc0:	05eb0200 	strbeq	r0, [fp, #512]!	; 0x200
    6fc4:	0005c003 	andeq	ip, r5, r3
    6fc8:	04321e00 	ldrteq	r1, [r2], #-3584	; 0xfffff200
    6fcc:	eb020000 	bl	86fd4 <__RW_SIZE__+0x86a4c>
    6fd0:	00016405 	andeq	r6, r1, r5, lsl #8
    6fd4:	d91f0000 	ldmdble	pc, {}	; <UNPREDICTABLE>
    6fd8:	0100000a 	tsteq	r0, sl
    6fdc:	00768008 	rsbseq	r8, r6, r8
    6fe0:	0000b808 	andeq	fp, r0, r8, lsl #16
    6fe4:	129c0100 	addsne	r0, ip, #0, 2
    6fe8:	20000006 	andcs	r0, r0, r6
    6fec:	00001215 	andeq	r1, r0, r5, lsl r2
    6ff0:	01c90801 	biceq	r0, r9, r1, lsl #16
    6ff4:	1d970000 	ldcne	0, cr0, [r7]
    6ff8:	64210000 	strtvs	r0, [r1], #-0
    6ffc:	01007669 	tsteq	r0, r9, ror #12
    7000:	0006120a 	andeq	r1, r6, sl, lsl #4
    7004:	001db800 	andseq	fp, sp, r0, lsl #16
    7008:	12062200 	andne	r2, r6, #0, 4
    700c:	0b010000 	bleq	47014 <__RW_SIZE__+0x46a8c>
    7010:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7014:	00001dd0 	ldrdeq	r1, [r0], -r0
    7018:	0011fc22 	andseq	pc, r1, r2, lsr #24
    701c:	d00c0100 	andle	r0, ip, r0, lsl #2
    7020:	0b000001 	bleq	702c <__RW_SIZE__+0x6aa4>
    7024:	0000001e 	andeq	r0, r0, lr, lsl r0
    7028:	7f040805 	svcvc	0x00040805
    702c:	18000011 	stmdane	r0, {r0, r4}
    7030:	000011b5 			; <UNDEFINED> instruction: 0x000011b5
    7034:	31011f01 	tstcc	r1, r1, lsl #30
    7038:	23000006 	movwcs	r0, #6
    703c:	00000bcd 	andeq	r0, r0, sp, asr #23
    7040:	04ea1f01 	strbteq	r1, [sl], #3841	; 0xf01
    7044:	24000000 	strcs	r0, [r0], #-0
    7048:	00000619 	andeq	r0, r0, r9, lsl r6
    704c:	08007738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp, lr}
    7050:	0000003a 	andeq	r0, r0, sl, lsr r0
    7054:	064c9c01 	strbeq	r9, [ip], -r1, lsl #24
    7058:	25250000 	strcs	r0, [r5, #-0]!
    705c:	01000006 	tsteq	r0, r6
    7060:	34240050 	strtcc	r0, [r4], #-80	; 0xffffffb0
    7064:	74000005 	strvc	r0, [r0], #-5
    7068:	42080077 	andmi	r0, r8, #119	; 0x77
    706c:	01000000 	mrseq	r0, (UNDEF: 0)
    7070:	0006829c 	muleq	r6, ip, r2
    7074:	05402600 	strbeq	r2, [r0, #-1536]	; 0xfffffa00
    7078:	1e2d0000 	cdpne	0, 2, cr0, cr13, cr0, {0}
    707c:	19270000 	stmdbne	r7!, {}	; <UNPREDICTABLE>
    7080:	7a000006 	bvc	70a0 <__RW_SIZE__+0x6b18>
    7084:	f0080077 			; <UNDEFINED> instruction: 0xf0080077
    7088:	01000023 	tsteq	r0, r3, lsr #32
    708c:	0625262f 	strteq	r2, [r5], -pc, lsr #12
    7090:	1e650000 	cdpne	0, 6, cr0, cr5, cr0, {0}
    7094:	00000000 	andeq	r0, r0, r0
    7098:	000b3c28 	andeq	r3, fp, r8, lsr #24
    709c:	b8330100 	ldmdalt	r3!, {r8}
    70a0:	60080077 	andvs	r0, r8, r7, ror r0
    70a4:	01000000 	mrseq	r0, (UNDEF: 0)
    70a8:	0007189c 	muleq	r7, ip, r8
    70ac:	6d662900 	stclvs	9, cr2, [r6, #-0]
    70b0:	33010074 	movwcc	r0, #4212	; 0x1074
    70b4:	000004e4 	andeq	r0, r0, r4, ror #9
    70b8:	2a709102 	bcs	1c2b4c8 <__RW_SIZE__+0x1c2af40>
    70bc:	0070612b 	rsbseq	r6, r0, fp, lsr #2
    70c0:	05293501 	streq	r3, [r9, #-1281]!	; 0xfffffaff
    70c4:	91030000 	mrsls	r0, (UNDEF: 3)
    70c8:	312c7ddc 	ldrdcc	r7, [ip, -ip]!
    70cc:	01000003 	tsteq	r0, r3
    70d0:	00071836 	andeq	r1, r7, r6, lsr r8
    70d4:	e0910300 	adds	r0, r1, r0, lsl #6
    70d8:	05342d7d 	ldreq	r2, [r4, #-3453]!	; 0xfffff283
    70dc:	77ce0000 	strbvc	r0, [lr, r0]
    70e0:	24080800 	strcs	r0, [r8], #-2048	; 0xfffff800
    70e4:	3a010000 	bcc	470ec <__RW_SIZE__+0x46b64>
    70e8:	000006f9 	strdeq	r0, [r0], -r9
    70ec:	00054026 	andeq	r4, r5, r6, lsr #32
    70f0:	001e8300 	andseq	r8, lr, r0, lsl #6
    70f4:	06192700 	ldreq	r2, [r9], -r0, lsl #14
    70f8:	77d40000 	ldrbvc	r0, [r4, r0]
    70fc:	24200800 	strtcs	r0, [r0], #-2048	; 0xfffff800
    7100:	2f010000 	svccs	0x00010000
    7104:	00062526 	andeq	r2, r6, r6, lsr #10
    7108:	001ec900 	andseq	ip, lr, r0, lsl #18
    710c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7110:	080077ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
    7114:	00000969 	andeq	r0, r0, r9, ror #18
    7118:	0252012f 	subseq	r0, r2, #-1073741813	; 0xc000000b
    711c:	012f5491 			; <UNDEFINED> instruction: 0x012f5491
    7120:	50910351 	addspl	r0, r1, r1, asr r3
    7124:	50012f06 	andpl	r2, r1, r6, lsl #30
    7128:	7dc09103 	stfvcp	f1, [r0, #12]
    712c:	ea0c0000 	b	307134 <__RW_SIZE__+0x306bac>
    7130:	28000004 	stmdacs	r0, {r2}
    7134:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    7138:	00000295 	muleq	r0, r5, r2
    713c:	4b3000ff 	blmi	c07540 <__RW_SIZE__+0xc06fb8>
    7140:	18000005 	stmdane	r0, {r0, r2}
    7144:	16080078 			; <UNDEFINED> instruction: 0x16080078
    7148:	01000000 	mrseq	r0, (UNDEF: 0)
    714c:	0557249c 	ldrbeq	r2, [r7, #-1180]	; 0xfffffb64
    7150:	78300000 	ldmdavc	r0!, {}	; <UNPREDICTABLE>
    7154:	00180800 	andseq	r0, r8, r0, lsl #16
    7158:	9c010000 	stcls	0, cr0, [r1], {-0}
    715c:	0000075f 	andeq	r0, r0, pc, asr r7
    7160:	00056731 	andeq	r6, r5, r1, lsr r7
    7164:	054b3200 	strbeq	r3, [fp, #-512]	; 0xfffffe00
    7168:	78300000 	ldmdavc	r0!, {}	; <UNPREDICTABLE>
    716c:	00120800 	andseq	r0, r2, r0, lsl #16
    7170:	50010000 	andpl	r0, r1, r0
    7174:	11ca2800 	bicne	r2, sl, r0, lsl #16
    7178:	56010000 	strpl	r0, [r1], -r0
    717c:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}
    7180:	0000009c 	muleq	r0, ip, r0
    7184:	08149c01 	ldmdaeq	r4, {r0, sl, fp, ip, pc}
    7188:	31200000 	teqcc	r0, r0
    718c:	01000003 	tsteq	r0, r3
    7190:	0004e456 	andeq	lr, r4, r6, asr r4
    7194:	001ee700 	andseq	lr, lr, r0, lsl #14
    7198:	11862200 	orrne	r2, r6, r0, lsl #4
    719c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    71a0:	000004e4 	andeq	r0, r0, r4, ror #9
    71a4:	00001f1d 	andeq	r1, r0, sp, lsl pc
    71a8:	0100631c 	tsteq	r0, ip, lsl r3
    71ac:	0004ea59 	andeq	lr, r4, r9, asr sl
    71b0:	05572d00 	ldrbeq	r2, [r7, #-3328]	; 0xfffff300
    71b4:	784a0000 	stmdavc	sl, {}^	; <UNPREDICTABLE>
    71b8:	24380800 	ldrtcs	r0, [r8], #-2048	; 0xfffff800
    71bc:	5b010000 	blpl	471c4 <__RW_SIZE__+0x46c3c>
    71c0:	000007c9 	andeq	r0, r0, r9, asr #15
    71c4:	00243833 	eoreq	r3, r4, r3, lsr r8
    71c8:	05673100 	strbeq	r3, [r7, #-256]!	; 0xffffff00
    71cc:	4b340000 	blmi	d071d4 <__RW_SIZE__+0xd06c4c>
    71d0:	4a000005 	bmi	71ec <__RW_SIZE__+0x6c64>
    71d4:	58080078 	stmdapl	r8, {r3, r4, r5, r6}
    71d8:	01000024 	tsteq	r0, r4, lsr #32
    71dc:	2d000050 	stccs	0, cr0, [r0, #-320]	; 0xfffffec0
    71e0:	00000619 	andeq	r0, r0, r9, lsl r6
    71e4:	08007856 	stmdaeq	r0, {r1, r2, r4, r6, fp, ip, sp, lr}
    71e8:	00002478 	andeq	r2, r0, r8, ror r4
    71ec:	07e66901 	strbeq	r6, [r6, r1, lsl #18]!
    71f0:	25260000 	strcs	r0, [r6, #-0]!
    71f4:	3b000006 	blcc	7214 <__RW_SIZE__+0x6c8c>
    71f8:	0000001f 	andeq	r0, r0, pc, lsl r0
    71fc:	0006192d 	andeq	r1, r6, sp, lsr #18
    7200:	0078b400 	rsbseq	fp, r8, r0, lsl #8
    7204:	00249808 	eoreq	r9, r4, r8, lsl #16
    7208:	006e0100 	rsbeq	r0, lr, r0, lsl #2
    720c:	35000008 	strcc	r0, [r0, #-8]
    7210:	00000625 	andeq	r0, r0, r5, lsr #12
    7214:	802e000a 	eorhi	r0, lr, sl
    7218:	82080078 	andhi	r0, r8, #120	; 0x78
    721c:	2f000006 	svccs	0x00000006
    7220:	03055001 	movweq	r5, #20481	; 0x5001
    7224:	0800f1b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp, lr, pc}
    7228:	95360000 	ldrls	r0, [r6, #-0]!
    722c:	01000011 	tsteq	r0, r1, lsl r0
    7230:	0001c971 	andeq	ip, r1, r1, ror r9
    7234:	0078e400 	rsbseq	lr, r8, r0, lsl #8
    7238:	0000ba08 	andeq	fp, r0, r8, lsl #20
    723c:	cc9c0100 	ldfgts	f0, [ip], {0}
    7240:	2b000008 	blcs	7268 <__RW_SIZE__+0x6ce0>
    7244:	00727473 	rsbseq	r7, r2, r3, ror r4
    7248:	08cc7301 	stmiaeq	ip, {r0, r8, r9, ip, sp, lr}^
    724c:	91020000 	mrsls	r0, (UNDEF: 2)
    7250:	03312248 	teqeq	r1, #72, 4	; 0x80000004
    7254:	74010000 	strvc	r0, [r1], #-0
    7258:	000004e4 	andeq	r0, r0, r4, ror #9
    725c:	00001f59 	andeq	r1, r0, r9, asr pc
    7260:	0011c522 	andseq	ip, r1, r2, lsr #10
    7264:	c9750100 	ldmdbgt	r5!, {r8}^
    7268:	84000001 	strhi	r0, [r0], #-1
    726c:	2200001f 	andcs	r0, r0, #31
    7270:	0000116d 	andeq	r1, r0, sp, ror #2
    7274:	01c97601 	biceq	r7, r9, r1, lsl #12
    7278:	1fba0000 	svcne	0x00ba0000
    727c:	84220000 	strthi	r0, [r2], #-0
    7280:	01000002 	tsteq	r0, r2
    7284:	0001c977 	andeq	ip, r1, r7, ror r9
    7288:	001fe500 	andseq	lr, pc, r0, lsl #10
    728c:	120b2200 	andne	r2, fp, #0, 4
    7290:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    7294:	000001c9 	andeq	r0, r0, r9, asr #3
    7298:	00002040 	andeq	r2, r0, r0, asr #32
    729c:	01006921 	tsteq	r0, r1, lsr #18
    72a0:	0001c979 	andeq	ip, r1, r9, ror r9
    72a4:	00208100 	eoreq	r8, r0, r0, lsl #2
    72a8:	78ee3700 	stmiavc	lr!, {r8, r9, sl, ip, sp}^
    72ac:	075f0800 	ldrbeq	r0, [pc, -r0, lsl #16]
    72b0:	08a70000 	stmiaeq	r7!, {}	; <UNPREDICTABLE>
    72b4:	012f0000 	teqeq	pc, r0
    72b8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    72bc:	79103700 	ldmdbvc	r0, {r8, r9, sl, ip, sp}
    72c0:	09880800 	stmibeq	r8, {fp}
    72c4:	08bb0000 	ldmeq	fp!, {}	; <UNPREDICTABLE>
    72c8:	012f0000 	teqeq	pc, r0
    72cc:	00750250 	rsbseq	r0, r5, r0, asr r2
    72d0:	79902e00 	ldmibvc	r0, {r9, sl, fp, sp}
    72d4:	099d0800 	ldmibeq	sp, {fp}
    72d8:	012f0000 	teqeq	pc, r0
    72dc:	00750250 	rsbseq	r0, r5, r0, asr r2
    72e0:	ea0c0000 	b	3072e8 <__RW_SIZE__+0x306d60>
    72e4:	dc000004 	stcle	0, cr0, [r0], {4}
    72e8:	0d000008 	stceq	0, cr0, [r0, #-32]	; 0xffffffe0
    72ec:	00000295 	muleq	r0, r5, r2
    72f0:	1628001d 			; <UNDEFINED> instruction: 0x1628001d
    72f4:	0100000b 	tsteq	r0, fp
    72f8:	0079a0b0 	ldrhteq	sl, [r9], #-0
    72fc:	00004208 	andeq	r4, r0, r8, lsl #4
    7300:	4d9c0100 	ldfmis	f0, [ip]
    7304:	38000009 	stmdacc	r0, {r0, r3}
    7308:	01006e65 	tsteq	r0, r5, ror #28
    730c:	0001c9b0 			; <UNDEFINED> instruction: 0x0001c9b0
    7310:	0020a000 	eoreq	sl, r0, r0
    7314:	05a62d00 	streq	r2, [r6, #3328]!	; 0xd00
    7318:	79ac0000 	stmibvc	ip!, {}	; <UNPREDICTABLE>
    731c:	24b00800 	ldrtcs	r0, [r0], #2048	; 0x800
    7320:	bc010000 	stclt	0, cr0, [r1], {-0}
    7324:	0000091c 	andeq	r0, r0, ip, lsl r9
    7328:	0005b326 	andeq	fp, r5, r6, lsr #6
    732c:	0020da00 	eoreq	sp, r0, r0, lsl #20
    7330:	722d0000 	eorvc	r0, sp, #0
    7334:	c8000005 	stmdagt	r0, {r0, r2}
    7338:	d0080079 	andle	r0, r8, r9, ror r0
    733c:	01000024 	tsteq	r0, r4, lsr #32
    7340:	000936b5 			; <UNDEFINED> instruction: 0x000936b5
    7344:	057f3500 	ldrbeq	r3, [pc, #-1280]!	; 6e4c <__RW_SIZE__+0x68c4>
    7348:	00250000 	eoreq	r0, r5, r0
    734c:	00058c39 	andeq	r8, r5, r9, lsr ip
    7350:	0079de00 	rsbseq	sp, r9, r0, lsl #28
    7354:	00000408 	andeq	r0, r0, r8, lsl #8
    7358:	35b60100 	ldrcc	r0, [r6, #256]!	; 0x100
    735c:	00000599 	muleq	r0, r9, r5
    7360:	3a000025 	bcc	73fc <__RW_SIZE__+0x6e74>
    7364:	00000051 	andeq	r0, r0, r1, asr r0
    7368:	5906ce02 	stmdbpl	r6, {r1, r9, sl, fp, lr, pc}
    736c:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    7370:	000001c9 	andeq	r0, r0, r9, asr #3
    7374:	00115f3b 	andseq	r5, r1, fp, lsr pc
    7378:	f1550700 			; <UNDEFINED> instruction: 0xf1550700
    737c:	3c000004 	stccc	0, cr0, [r0], {4}
    7380:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    7384:	01c9dc08 	biceq	sp, r9, r8, lsl #24
    7388:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    738c:	e43d0000 	ldrt	r0, [sp], #-0
    7390:	3d000004 	stccc	0, cr0, [r0, #-16]
    7394:	000004f1 	strdeq	r0, [r0], -r1
    7398:	0005073d 	andeq	r0, r5, sp, lsr r7
    739c:	8e3c0000 	cdphi	0, 3, cr0, cr12, cr0, {0}
    73a0:	09000011 	stmdbeq	r0, {r0, r4}
    73a4:	0004fc21 	andeq	pc, r4, r1, lsr #24
    73a8:	00099d00 	andeq	r9, r9, r0, lsl #26
    73ac:	04f13d00 	ldrbteq	r3, [r1], #3328	; 0xd00
    73b0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    73b4:	00001201 	andeq	r1, r0, r1, lsl #4
    73b8:	01c94c0a 	biceq	r4, r9, sl, lsl #24
    73bc:	f13d0000 			; <UNDEFINED> instruction: 0xf13d0000
    73c0:	00000004 	andeq	r0, r0, r4
    73c4:	00007700 	andeq	r7, r0, r0, lsl #14
    73c8:	65000200 	strvs	r0, [r0, #-512]	; 0xfffffe00
    73cc:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    73d0:	00215801 	eoreq	r5, r1, r1, lsl #16
    73d4:	00300000 	eorseq	r0, r0, r0
    73d8:	0031ec08 	eorseq	lr, r1, r8, lsl #24
    73dc:	74726308 	ldrbtvc	r6, [r2], #-776	; 0xfffffcf8
    73e0:	00732e30 	rsbseq	r2, r3, r0, lsr lr
    73e4:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
    73e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    73ec:	63636b5c 	cmnvs	r3, #92, 22	; 0x17000
    73f0:	63747369 	cmnvs	r4, #-1543503871	; 0xa4000001
    73f4:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
    73f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    73fc:	4d41475c 	stclmi	7, cr4, [r1, #-368]	; 0xfffffe90
    7400:	52505f45 	subspl	r5, r0, #276	; 0x114
    7404:	43454a4f 	movtmi	r4, #23119	; 0x5a4f
    7408:	58455f54 	stmdapl	r5, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    740c:	c7c5bd28 	strbgt	fp, [r5, r8, lsr #26]
    7410:	44434cfc 	strbmi	r4, [r3], #-3324	; 0xfffff304
    7414:	d4c7f7c6 	strble	pc, [r7], #1990	; 0x7c6	; <UNPREDICTABLE>
    7418:	39395c29 	ldmdbcc	r9!, {r0, r3, r5, sl, fp, ip, lr}
    741c:	41472e31 	cmpmi	r7, r1, lsr lr
    7420:	545f454d 	ldrbpl	r4, [pc], #-1357	; 7428 <__RW_SIZE__+0x6ea0>
    7424:	4c504d45 	mrrcmi	13, 4, r4, r0, cr5
    7428:	5f455441 	svcpl	0x00455441
    742c:	47005845 	strmi	r5, [r0, -r5, asr #16]
    7430:	4120554e 	teqmi	r0, lr, asr #10
    7434:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    7438:	352e3332 	strcc	r3, [lr, #-818]!	; 0xfffffcce
    743c:	80010032 	andhi	r0, r1, r2, lsr r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__RW_SIZE__+0x2bfb24>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__RW_SIZE__+0x3806a0>
      24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
      2c:	0b0b0024 	bleq	2c00c4 <__RW_SIZE__+0x2bfb3c>
      30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      34:	35050000 	strcc	r0, [r5, #-0]
      38:	00134900 	andseq	r4, r3, r0, lsl #18
      3c:	01130600 	tsteq	r3, r0, lsl #12
      40:	0b3a0b0b 	bleq	e82c74 <__RW_SIZE__+0xe826ec>
      44:	1301053b 	movwne	r0, #5435	; 0x153b
      48:	0d070000 	stceq	0, cr0, [r7, #-0]
      4c:	3a080300 	bcc	200c54 <__RW_SIZE__+0x2006cc>
      50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      54:	000b3813 	andeq	r3, fp, r3, lsl r8
      58:	000d0800 	andeq	r0, sp, r0, lsl #16
      5c:	0b3a0e03 	bleq	e83870 <__RW_SIZE__+0xe832e8>
      60:	1349053b 	movtne	r0, #38203	; 0x953b
      64:	00000b38 	andeq	r0, r0, r8, lsr fp
      68:	03001609 	movweq	r1, #1545	; 0x609
      6c:	3b0b3a0e 	blcc	2ce8ac <__RW_SIZE__+0x2ce324>
      70:	00134905 	andseq	r4, r3, r5, lsl #18
      74:	002e0a00 	eoreq	r0, lr, r0, lsl #20
      78:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      7c:	0b3b0b3a 	bleq	ec2d6c <__RW_SIZE__+0xec27e4>
      80:	01111927 	tsteq	r1, r7, lsr #18
      84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      88:	00194297 	mulseq	r9, r7, r2
      8c:	00340b00 	eorseq	r0, r4, r0, lsl #22
      90:	0b3a0e03 	bleq	e838a4 <__RW_SIZE__+0xe8331c>
      94:	1349053b 	movtne	r0, #38203	; 0x953b
      98:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
      a4:	0e030b13 	vmoveq.32	d3[0], r0
      a8:	17550e1b 	smmlane	r5, fp, lr, r0
      ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
      b0:	24020000 	strcs	r0, [r2], #-0
      b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      b8:	000e030b 	andeq	r0, lr, fp, lsl #6
      bc:	00160300 	andseq	r0, r6, r0, lsl #6
      c0:	0b3a0e03 	bleq	e838d4 <__RW_SIZE__+0xe8334c>
      c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      c8:	24040000 	strcs	r0, [r4], #-0
      cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      d0:	0008030b 	andeq	r0, r8, fp, lsl #6
      d4:	012e0500 	teqeq	lr, r0, lsl #10
      d8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
      dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      e0:	13491927 	movtne	r1, #39207	; 0x9927
      e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
      e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
      ec:	00130119 	andseq	r0, r3, r9, lsl r1
      f0:	00340600 	eorseq	r0, r4, r0, lsl #12
      f4:	0b3a0e03 	bleq	e83908 <__RW_SIZE__+0xe83380>
      f8:	1349053b 	movtne	r0, #38203	; 0x953b
      fc:	00001702 	andeq	r1, r0, r2, lsl #14
     100:	3f012e07 	svccc	0x00012e07
     104:	3a0e0319 	bcc	380d70 <__RW_SIZE__+0x3807e8>
     108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     110:	97184006 	ldrls	r4, [r8, -r6]
     114:	13011942 	movwne	r1, #6466	; 0x1942
     118:	05080000 	streq	r0, [r8, #-0]
     11c:	3a0e0300 	bcc	380d24 <__RW_SIZE__+0x38079c>
     120:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     124:	00180213 	andseq	r0, r8, r3, lsl r2
     128:	00050900 	andeq	r0, r5, r0, lsl #18
     12c:	0b3a0e03 	bleq	e83940 <__RW_SIZE__+0xe833b8>
     130:	1349053b 	movtne	r0, #38203	; 0x953b
     134:	00001702 	andeq	r1, r0, r2, lsl #14
     138:	0b000f0a 	bleq	3d68 <__RW_SIZE__+0x37e0>
     13c:	0013490b 	andseq	r4, r3, fp, lsl #18
     140:	012e0b00 	teqeq	lr, r0, lsl #22
     144:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     14c:	13491927 	movtne	r1, #39207	; 0x9927
     150:	06120111 			; <UNDEFINED> instruction: 0x06120111
     154:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     158:	00000019 	andeq	r0, r0, r9, lsl r0
     15c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     160:	030b130e 	movweq	r1, #45838	; 0xb30e
     164:	110e1b0e 	tstne	lr, lr, lsl #22
     168:	10061201 	andne	r1, r6, r1, lsl #4
     16c:	02000017 	andeq	r0, r0, #23
     170:	0b0b0024 	bleq	2c0208 <__RW_SIZE__+0x2bfc80>
     174:	0e030b3e 	vmoveq.16	d3[0], r0
     178:	24030000 	strcs	r0, [r3], #-0
     17c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     180:	0008030b 	andeq	r0, r8, fp, lsl #6
     184:	000f0400 	andeq	r0, pc, r0, lsl #8
     188:	00000b0b 	andeq	r0, r0, fp, lsl #22
     18c:	0b000f05 	bleq	3da8 <__RW_SIZE__+0x3820>
     190:	0013490b 	andseq	r4, r3, fp, lsl #18
     194:	00260600 	eoreq	r0, r6, r0, lsl #12
     198:	00001349 	andeq	r1, r0, r9, asr #6
     19c:	03001607 	movweq	r1, #1543	; 0x607
     1a0:	3b0b3a0e 	blcc	2ce9e0 <__RW_SIZE__+0x2ce458>
     1a4:	0013490b 	andseq	r4, r3, fp, lsl #18
     1a8:	01130800 	tsteq	r3, r0, lsl #16
     1ac:	0b0b0e03 	bleq	2c39c0 <__RW_SIZE__+0x2c3438>
     1b0:	0b3b0b3a 	bleq	ec2ea0 <__RW_SIZE__+0xec2918>
     1b4:	00001301 	andeq	r1, r0, r1, lsl #6
     1b8:	03000d09 	movweq	r0, #3337	; 0xd09
     1bc:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     1c0:	0019340b 	andseq	r3, r9, fp, lsl #8
     1c4:	012e0a00 	teqeq	lr, r0, lsl #20
     1c8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     1cc:	0b3b0b3a 	bleq	ec2ebc <__RW_SIZE__+0xec2934>
     1d0:	0b201927 	bleq	806674 <__RW_SIZE__+0x8060ec>
     1d4:	00001301 	andeq	r1, r0, r1, lsl #6
     1d8:	0300050b 	movweq	r0, #1291	; 0x50b
     1dc:	3b0b3a08 	blcc	2cea04 <__RW_SIZE__+0x2ce47c>
     1e0:	0013490b 	andseq	r4, r3, fp, lsl #18
     1e4:	00050c00 	andeq	r0, r5, r0, lsl #24
     1e8:	0b3a0e03 	bleq	e839fc <__RW_SIZE__+0xe83474>
     1ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     1f0:	340d0000 	strcc	r0, [sp], #-0
     1f4:	3a0e0300 	bcc	380dfc <__RW_SIZE__+0x380874>
     1f8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1fc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     200:	08030034 	stmdaeq	r3, {r2, r4, r5}
     204:	0b3b0b3a 	bleq	ec2ef4 <__RW_SIZE__+0xec296c>
     208:	00001349 	andeq	r1, r0, r9, asr #6
     20c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     210:	00130113 	andseq	r0, r3, r3, lsl r1
     214:	00211000 	eoreq	r1, r1, r0
     218:	0b2f1349 	bleq	bc4f44 <__RW_SIZE__+0xbc49bc>
     21c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     220:	11133101 	tstne	r3, r1, lsl #2
     224:	40061201 	andmi	r1, r6, r1, lsl #4
     228:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     22c:	00001301 	andeq	r1, r0, r1, lsl #6
     230:	31000512 	tstcc	r0, r2, lsl r5
     234:	00170213 	andseq	r0, r7, r3, lsl r2
     238:	00341300 	eorseq	r1, r4, r0, lsl #6
     23c:	17021331 	smladxne	r2, r1, r3, r1
     240:	34140000 	ldrcc	r0, [r4], #-0
     244:	1c133100 	ldfnes	f3, [r3], {-0}
     248:	1500000b 	strne	r0, [r0, #-11]
     24c:	13310034 	teqne	r1, #52	; 0x34
     250:	00001802 	andeq	r1, r0, r2, lsl #16
     254:	01828916 	orreq	r8, r2, r6, lsl r9
     258:	31011101 	tstcc	r1, r1, lsl #2
     25c:	00130113 	andseq	r0, r3, r3, lsl r1
     260:	828a1700 	addhi	r1, sl, #0, 14
     264:	18020001 	stmdane	r2, {r0}
     268:	00184291 	mulseq	r8, r1, r2
     26c:	82891800 	addhi	r1, r9, #0, 16
     270:	01110001 	tsteq	r1, r1
     274:	00001331 	andeq	r1, r0, r1, lsr r3
     278:	01828919 	orreq	r8, r2, r9, lsl r9
     27c:	31011101 	tstcc	r1, r1, lsl #2
     280:	1a000013 	bne	2d4 <__ZI_SIZE__+0x264>
     284:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     288:	17550152 			; <UNDEFINED> instruction: 0x17550152
     28c:	0b590b58 	bleq	1642ff4 <__RW_SIZE__+0x1642a6c>
     290:	051b0000 	ldreq	r0, [fp, #-0]
     294:	00133100 	andseq	r3, r3, r0, lsl #2
     298:	010b1c00 	tsteq	fp, r0, lsl #24
     29c:	00001755 	andeq	r1, r0, r5, asr r7
     2a0:	3100341d 	tstcc	r0, sp, lsl r4
     2a4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     2a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     2ac:	0b3a0e03 	bleq	e83ac0 <__RW_SIZE__+0xe83538>
     2b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     2b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2bc:	00130119 	andseq	r0, r3, r9, lsl r1
     2c0:	00051f00 	andeq	r1, r5, r0, lsl #30
     2c4:	0b3a0803 	bleq	e822d8 <__RW_SIZE__+0xe81d50>
     2c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2cc:	00001702 	andeq	r1, r0, r2, lsl #14
     2d0:	03000520 	movweq	r0, #1312	; 0x520
     2d4:	3b0b3a0e 	blcc	2ceb14 <__RW_SIZE__+0x2ce58c>
     2d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2dc:	21000017 	tstcs	r0, r7, lsl r0
     2e0:	00000018 	andeq	r0, r0, r8, lsl r0
     2e4:	03003422 	movweq	r3, #1058	; 0x422
     2e8:	3b0b3a08 	blcc	2ceb10 <__RW_SIZE__+0x2ce588>
     2ec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2f0:	23000018 	movwcs	r0, #24
     2f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2f8:	0b3b0b3a 	bleq	ec2fe8 <__RW_SIZE__+0xec2a60>
     2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     300:	1d240000 	stcne	0, cr0, [r4, #-0]
     304:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     308:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     30c:	010b590b 	tsteq	fp, fp, lsl #18
     310:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     31c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     320:	0000193c 	andeq	r1, r0, ip, lsr r9
     324:	49003526 	stmdbmi	r0, {r1, r2, r5, r8, sl, ip, sp}
     328:	27000013 	smladcs	r0, r3, r0, r0
     32c:	13490021 	movtne	r0, #36897	; 0x9021
     330:	0000052f 	andeq	r0, r0, pc, lsr #10
     334:	03003428 	movweq	r3, #1064	; 0x428
     338:	3b0b3a0e 	blcc	2ceb78 <__RW_SIZE__+0x2ce5f0>
     33c:	3f13490b 	svccc	0x0013490b
     340:	00180219 	andseq	r0, r8, r9, lsl r2
     344:	012e2900 	teqeq	lr, r0, lsl #18
     348:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     34c:	0b3b0b3a 	bleq	ec303c <__RW_SIZE__+0xec2ab4>
     350:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     354:	00001301 	andeq	r1, r0, r1, lsl #6
     358:	4900052a 	stmdbmi	r0, {r1, r3, r5, r8, sl}
     35c:	2b000013 	blcs	3b0 <__ZI_SIZE__+0x340>
     360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     364:	0b3a0e03 	bleq	e83b78 <__RW_SIZE__+0xe835f0>
     368:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     36c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     370:	01000000 	mrseq	r0, (UNDEF: 0)
     374:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     378:	0e030b13 	vmoveq.32	d3[0], r0
     37c:	01110e1b 	tsteq	r1, fp, lsl lr
     380:	17100612 			; <UNDEFINED> instruction: 0x17100612
     384:	04020000 	streq	r0, [r2], #-0
     388:	0b0e0301 	bleq	380f94 <__RW_SIZE__+0x380a0c>
     38c:	3b0b3a0b 	blcc	2cebc0 <__RW_SIZE__+0x2ce638>
     390:	0013010b 	andseq	r0, r3, fp, lsl #2
     394:	00280300 	eoreq	r0, r8, r0, lsl #6
     398:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     39c:	16040000 	strne	r0, [r4], -r0
     3a0:	3a0e0300 	bcc	380fa8 <__RW_SIZE__+0x380a20>
     3a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a8:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     3ac:	0b0b0024 	bleq	2c0444 <__RW_SIZE__+0x2bfebc>
     3b0:	0e030b3e 	vmoveq.16	d3[0], r0
     3b4:	16060000 	strne	r0, [r6], -r0
     3b8:	3a0e0300 	bcc	380fc0 <__RW_SIZE__+0x380a38>
     3bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3c0:	07000013 	smladeq	r0, r3, r0, r0
     3c4:	0b0b0024 	bleq	2c045c <__RW_SIZE__+0x2bfed4>
     3c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3cc:	13080000 	movwne	r0, #32768	; 0x8000
     3d0:	3a050b01 	bcc	142fdc <__RW_SIZE__+0x142a54>
     3d4:	010b3b0b 	tsteq	fp, fp, lsl #22
     3d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
     3dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     3e0:	0b3b0b3a 	bleq	ec30d0 <__RW_SIZE__+0xec2b48>
     3e4:	0b381349 	bleq	e05110 <__RW_SIZE__+0xe04b88>
     3e8:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     3ec:	3a0e0300 	bcc	380ff4 <__RW_SIZE__+0x380a6c>
     3f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f4:	00053813 	andeq	r3, r5, r3, lsl r8
     3f8:	000d0b00 	andeq	r0, sp, r0, lsl #22
     3fc:	0b3a0803 	bleq	e82410 <__RW_SIZE__+0xe81e88>
     400:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     404:	00000538 	andeq	r0, r0, r8, lsr r5
     408:	4901010c 	stmdbmi	r1, {r2, r3, r8}
     40c:	00130113 	andseq	r0, r3, r3, lsl r1
     410:	00210d00 	eoreq	r0, r1, r0, lsl #26
     414:	0b2f1349 	bleq	bc5140 <__RW_SIZE__+0xbc4bb8>
     418:	350e0000 	strcc	r0, [lr, #-0]
     41c:	00134900 	andseq	r4, r3, r0, lsl #18
     420:	00210f00 	eoreq	r0, r1, r0, lsl #30
     424:	052f1349 	streq	r1, [pc, #-841]!	; e3 <__ZI_SIZE__+0x73>
     428:	13100000 	tstne	r0, #0
     42c:	3a0b0b01 	bcc	2c3038 <__RW_SIZE__+0x2c2ab0>
     430:	01053b0b 	tsteq	r5, fp, lsl #22
     434:	11000013 	tstne	r0, r3, lsl r0
     438:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     43c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     440:	0b381349 	bleq	e0516c <__RW_SIZE__+0xe04be4>
     444:	0d120000 	ldceq	0, cr0, [r2, #-0]
     448:	3a0e0300 	bcc	381050 <__RW_SIZE__+0x380ac8>
     44c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	000b3813 	andeq	r3, fp, r3, lsl r8
     454:	012e1300 	teqeq	lr, r0, lsl #6
     458:	0b3a0e03 	bleq	e83c6c <__RW_SIZE__+0xe836e4>
     45c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     460:	13010b20 	movwne	r0, #6944	; 0x1b20
     464:	05140000 	ldreq	r0, [r4, #-0]
     468:	3a0e0300 	bcc	381070 <__RW_SIZE__+0x380ae8>
     46c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     470:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     474:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     478:	0b3a0e03 	bleq	e83c8c <__RW_SIZE__+0xe83704>
     47c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     480:	06120111 			; <UNDEFINED> instruction: 0x06120111
     484:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     488:	16000019 			; <UNDEFINED> instruction: 0x16000019
     48c:	0e03012e 	adfeqsp	f0, f3, #0.5
     490:	0b3b0b3a 	bleq	ec3180 <__RW_SIZE__+0xec2bf8>
     494:	13491927 	movtne	r1, #39207	; 0x9927
     498:	13010b20 	movwne	r0, #6944	; 0x1b20
     49c:	34170000 	ldrcc	r0, [r7], #-0
     4a0:	3a080300 	bcc	2010a8 <__RW_SIZE__+0x200b20>
     4a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a8:	18000013 	stmdane	r0, {r0, r1, r4}
     4ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4b0:	0b3a0e03 	bleq	e83cc4 <__RW_SIZE__+0xe8373c>
     4b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     4b8:	01111349 	tsteq	r1, r9, asr #6
     4bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     4c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     4c4:	19000013 	stmdbne	r0, {r0, r1, r4}
     4c8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4cc:	0b3b0b3a 	bleq	ec31bc <__RW_SIZE__+0xec2c34>
     4d0:	17021349 	strne	r1, [r2, -r9, asr #6]
     4d4:	341a0000 	ldrcc	r0, [sl], #-0
     4d8:	3a080300 	bcc	2010e0 <__RW_SIZE__+0x200b58>
     4dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4e0:	00180213 	andseq	r0, r8, r3, lsl r2
     4e4:	011d1b00 	tsteq	sp, r0, lsl #22
     4e8:	01111331 	tsteq	r1, r1, lsr r3
     4ec:	0b580612 	bleq	1601d3c <__RW_SIZE__+0x16017b4>
     4f0:	13010b59 	movwne	r0, #7001	; 0x1b59
     4f4:	0b1c0000 	bleq	7004fc <__RW_SIZE__+0x6fff74>
     4f8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     4fc:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
     500:	13310034 	teqne	r1, #52	; 0x34
     504:	00001702 	andeq	r1, r0, r2, lsl #14
     508:	31011d1e 	tstcc	r1, lr, lsl sp
     50c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     510:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     514:	1f00000b 	svcne	0x0000000b
     518:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     51c:	0b3a0e03 	bleq	e83d30 <__RW_SIZE__+0xe837a8>
     520:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     524:	0b201349 	bleq	805250 <__RW_SIZE__+0x804cc8>
     528:	00001301 	andeq	r1, r0, r1, lsl #6
     52c:	31012e20 	tstcc	r1, r0, lsr #28
     530:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     534:	97184006 	ldrls	r4, [r8, -r6]
     538:	13011942 	movwne	r1, #6466	; 0x1942
     53c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     540:	03193f01 	tsteq	r9, #1, 30
     544:	3b0b3a0e 	blcc	2ced84 <__RW_SIZE__+0x2ce7fc>
     548:	1119270b 	tstne	r9, fp, lsl #14
     54c:	40061201 	andmi	r1, r6, r1, lsl #4
     550:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     554:	00001301 	andeq	r1, r0, r1, lsl #6
     558:	03000522 	movweq	r0, #1314	; 0x522
     55c:	3b0b3a08 	blcc	2ced84 <__RW_SIZE__+0x2ce7fc>
     560:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     564:	23000017 	movwcs	r0, #23
     568:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     56c:	17550152 			; <UNDEFINED> instruction: 0x17550152
     570:	0b590b58 	bleq	16432d8 <__RW_SIZE__+0x1642d50>
     574:	00001301 	andeq	r1, r0, r1, lsl #6
     578:	31000524 	tstcc	r0, r4, lsr #10
     57c:	00170213 	andseq	r0, r7, r3, lsl r2
     580:	00052500 	andeq	r2, r5, r0, lsl #10
     584:	0b1c1331 	bleq	705250 <__RW_SIZE__+0x704cc8>
     588:	34260000 	strtcc	r0, [r6], #-0
     58c:	3a0e0300 	bcc	381194 <__RW_SIZE__+0x380c0c>
     590:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	3c193f13 	ldccc	15, cr3, [r9], {19}
     598:	00000019 	andeq	r0, r0, r9, lsl r0
     59c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     5a0:	030b130e 	movweq	r1, #45838	; 0xb30e
     5a4:	110e1b0e 	tstne	lr, lr, lsl #22
     5a8:	10061201 	andne	r1, r6, r1, lsl #4
     5ac:	02000017 	andeq	r0, r0, #23
     5b0:	0e030104 	adfeqs	f0, f3, f4
     5b4:	0b3a0b0b 	bleq	e831e8 <__RW_SIZE__+0xe82c60>
     5b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     5bc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     5c0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     5c4:	0400000d 	streq	r0, [r0], #-13
     5c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     5cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5d0:	00001349 	andeq	r1, r0, r9, asr #6
     5d4:	0b002405 	bleq	95f0 <__RW_SIZE__+0x9068>
     5d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5dc:	0600000e 	streq	r0, [r0], -lr
     5e0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     5e4:	0b3b0b3a 	bleq	ec32d4 <__RW_SIZE__+0xec2d4c>
     5e8:	00001349 	andeq	r1, r0, r9, asr #6
     5ec:	0b002407 	bleq	9610 <__RW_SIZE__+0x9088>
     5f0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5f4:	08000008 	stmdaeq	r0, {r3}
     5f8:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
     5fc:	0b3b0b3a 	bleq	ec32ec <__RW_SIZE__+0xec2d64>
     600:	00001301 	andeq	r1, r0, r1, lsl #6
     604:	03000d09 	movweq	r0, #3337	; 0xd09
     608:	3b0b3a0e 	blcc	2cee48 <__RW_SIZE__+0x2ce8c0>
     60c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     610:	0a00000b 	beq	644 <__RW_SIZE__+0xbc>
     614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     618:	0b3b0b3a 	bleq	ec3308 <__RW_SIZE__+0xec2d80>
     61c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     620:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     624:	3a080300 	bcc	20122c <__RW_SIZE__+0x200ca4>
     628:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     62c:	00053813 	andeq	r3, r5, r3, lsl r8
     630:	01010c00 	tsteq	r1, r0, lsl #24
     634:	13011349 	movwne	r1, #4937	; 0x1349
     638:	210d0000 	mrscs	r0, (UNDEF: 13)
     63c:	2f134900 	svccs	0x00134900
     640:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     644:	13490035 	movtne	r0, #36917	; 0x9035
     648:	210f0000 	mrscs	r0, CPSR
     64c:	2f134900 	svccs	0x00134900
     650:	10000005 	andne	r0, r0, r5
     654:	0b0b0113 	bleq	2c0aa8 <__RW_SIZE__+0x2c0520>
     658:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     65c:	00001301 	andeq	r1, r0, r1, lsl #6
     660:	03000d11 	movweq	r0, #3345	; 0xd11
     664:	3b0b3a08 	blcc	2cee8c <__RW_SIZE__+0x2ce904>
     668:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     66c:	1200000b 	andne	r0, r0, #11
     670:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     674:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     678:	0b381349 	bleq	e053a4 <__RW_SIZE__+0xe04e1c>
     67c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     680:	03193f00 	tsteq	r9, #0, 30
     684:	3b0b3a0e 	blcc	2ceec4 <__RW_SIZE__+0x2ce93c>
     688:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     68c:	000b2013 	andeq	r2, fp, r3, lsl r0
     690:	012e1400 	teqeq	lr, r0, lsl #8
     694:	0b3a0e03 	bleq	e83ea8 <__RW_SIZE__+0xe83920>
     698:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     69c:	13010b20 	movwne	r0, #6944	; 0x1b20
     6a0:	05150000 	ldreq	r0, [r5, #-0]
     6a4:	3a0e0300 	bcc	3812ac <__RW_SIZE__+0x380d24>
     6a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6ac:	16000013 			; <UNDEFINED> instruction: 0x16000013
     6b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6b4:	0b3a0e03 	bleq	e83ec8 <__RW_SIZE__+0xe83940>
     6b8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6c0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6c4:	17000019 	smladne	r0, r9, r0, r0
     6c8:	1331002e 	teqne	r1, #46	; 0x2e
     6cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6d4:	18000019 	stmdane	r0, {r0, r3, r4}
     6d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6dc:	0b3a0e03 	bleq	e83ef0 <__RW_SIZE__+0xe83968>
     6e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6ec:	00130119 	andseq	r0, r3, r9, lsl r1
     6f0:	001d1900 	andseq	r1, sp, r0, lsl #18
     6f4:	01111331 	tsteq	r1, r1, lsr r3
     6f8:	0b580612 	bleq	1601f48 <__RW_SIZE__+0x16019c0>
     6fc:	00000b59 	andeq	r0, r0, r9, asr fp
     700:	3f012e1a 	svccc	0x00012e1a
     704:	3a0e0319 	bcc	381370 <__RW_SIZE__+0x380de8>
     708:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     70c:	11134919 	tstne	r3, r9, lsl r9
     710:	40061201 	andmi	r1, r6, r1, lsl #4
     714:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     718:	00001301 	andeq	r1, r0, r1, lsl #6
     71c:	0300341b 	movweq	r3, #1051	; 0x41b
     720:	3b0b3a08 	blcc	2cef48 <__RW_SIZE__+0x2ce9c0>
     724:	0013490b 	andseq	r4, r3, fp, lsl #18
     728:	00051c00 	andeq	r1, r5, r0, lsl #24
     72c:	0b3a0803 	bleq	e82740 <__RW_SIZE__+0xe821b8>
     730:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     734:	00001702 	andeq	r1, r0, r2, lsl #14
     738:	31011d1d 	tstcc	r1, sp, lsl sp
     73c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     740:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     744:	0013010b 	andseq	r0, r3, fp, lsl #2
     748:	00051e00 	andeq	r1, r5, r0, lsl #28
     74c:	17021331 	smladxne	r2, r1, r3, r1
     750:	1d1f0000 	ldcne	0, cr0, [pc, #-0]	; 758 <__RW_SIZE__+0x1d0>
     754:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     758:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     75c:	010b590b 	tsteq	fp, fp, lsl #18
     760:	20000013 	andcs	r0, r0, r3, lsl r0
     764:	13310005 	teqne	r1, #5
     768:	00000b1c 	andeq	r0, r0, ip, lsl fp
     76c:	31011d21 	tstcc	r1, r1, lsr #26
     770:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     774:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     778:	2200000b 	andcs	r0, r0, #11
     77c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     780:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     784:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     788:	0000193c 	andeq	r1, r0, ip, lsr r9
     78c:	01110100 	tsteq	r1, r0, lsl #2
     790:	0b130e25 	bleq	4c402c <__RW_SIZE__+0x4c3aa4>
     794:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     798:	06120111 			; <UNDEFINED> instruction: 0x06120111
     79c:	00001710 	andeq	r1, r0, r0, lsl r7
     7a0:	0b002402 	bleq	97b0 <__RW_SIZE__+0x9228>
     7a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7a8:	0300000e 	movweq	r0, #14
     7ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7b0:	0b3b0b3a 	bleq	ec34a0 <__RW_SIZE__+0xec2f18>
     7b4:	00001349 	andeq	r1, r0, r9, asr #6
     7b8:	0b002404 	bleq	97d0 <__RW_SIZE__+0x9248>
     7bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     7c0:	05000008 	streq	r0, [r0, #-8]
     7c4:	13490035 	movtne	r0, #36917	; 0x9035
     7c8:	13060000 	movwne	r0, #24576	; 0x6000
     7cc:	3a0b0b01 	bcc	2c33d8 <__RW_SIZE__+0x2c2e50>
     7d0:	01053b0b 	tsteq	r5, fp, lsl #22
     7d4:	07000013 	smladeq	r0, r3, r0, r0
     7d8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7e0:	0b381349 	bleq	e0550c <__RW_SIZE__+0xe04f84>
     7e4:	0d080000 	stceq	0, cr0, [r8, #-0]
     7e8:	3a0e0300 	bcc	3813f0 <__RW_SIZE__+0x380e68>
     7ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7f0:	000b3813 	andeq	r3, fp, r3, lsl r8
     7f4:	00160900 	andseq	r0, r6, r0, lsl #18
     7f8:	0b3a0e03 	bleq	e8400c <__RW_SIZE__+0xe83a84>
     7fc:	1349053b 	movtne	r0, #38203	; 0x953b
     800:	130a0000 	movwne	r0, #40960	; 0xa000
     804:	3a0b0b01 	bcc	2c3410 <__RW_SIZE__+0x2c2e88>
     808:	010b3b0b 	tsteq	fp, fp, lsl #22
     80c:	0b000013 	bleq	860 <__RW_SIZE__+0x2d8>
     810:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     814:	0b3b0b3a 	bleq	ec3504 <__RW_SIZE__+0xec2f7c>
     818:	0b381349 	bleq	e05544 <__RW_SIZE__+0xe04fbc>
     81c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     820:	3a080300 	bcc	201428 <__RW_SIZE__+0x200ea0>
     824:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     828:	000b3813 	andeq	r3, fp, r3, lsl r8
     82c:	012e0d00 	teqeq	lr, r0, lsl #26
     830:	0b3a0e03 	bleq	e84044 <__RW_SIZE__+0xe83abc>
     834:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     838:	13010b20 	movwne	r0, #6944	; 0x1b20
     83c:	050e0000 	streq	r0, [lr, #-0]
     840:	3a0e0300 	bcc	381448 <__RW_SIZE__+0x380ec0>
     844:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     848:	0f000013 	svceq	0x00000013
     84c:	08030005 	stmdaeq	r3, {r0, r2}
     850:	0b3b0b3a 	bleq	ec3540 <__RW_SIZE__+0xec2fb8>
     854:	00001349 	andeq	r1, r0, r9, asr #6
     858:	03003410 	movweq	r3, #1040	; 0x410
     85c:	3b0b3a08 	blcc	2cf084 <__RW_SIZE__+0x2ceafc>
     860:	0013490b 	andseq	r4, r3, fp, lsl #18
     864:	012e1100 	teqeq	lr, r0, lsl #2
     868:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     86c:	0b3b0b3a 	bleq	ec355c <__RW_SIZE__+0xec2fd4>
     870:	0b201927 	bleq	806d14 <__RW_SIZE__+0x80678c>
     874:	00001301 	andeq	r1, r0, r1, lsl #6
     878:	3f002e12 	svccc	0x00002e12
     87c:	3a0e0319 	bcc	3814e8 <__RW_SIZE__+0x380f60>
     880:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     884:	000b2019 	andeq	r2, fp, r9, lsl r0
     888:	002e1300 	eoreq	r1, lr, r0, lsl #6
     88c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     894:	0b201927 	bleq	806d38 <__RW_SIZE__+0x8067b0>
     898:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     89c:	11133100 	tstne	r3, r0, lsl #2
     8a0:	40061201 	andmi	r1, r6, r1, lsl #4
     8a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8a8:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
     8ac:	11133101 	tstne	r3, r1, lsl #2
     8b0:	40061201 	andmi	r1, r6, r1, lsl #4
     8b4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	31000516 	tstcc	r0, r6, lsl r5
     8c0:	00170213 	andseq	r0, r7, r3, lsl r2
     8c4:	011d1700 	tsteq	sp, r0, lsl #14
     8c8:	01521331 	cmpeq	r2, r1, lsr r3
     8cc:	0b581755 	bleq	1606628 <__RW_SIZE__+0x16060a0>
     8d0:	13010b59 	movwne	r0, #7001	; 0x1b59
     8d4:	1d180000 	ldcne	0, cr0, [r8, #-0]
     8d8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     8dc:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     8e0:	000b590b 	andeq	r5, fp, fp, lsl #18
     8e4:	00051900 	andeq	r1, r5, r0, lsl #18
     8e8:	00001331 	andeq	r1, r0, r1, lsr r3
     8ec:	31011d1a 	tstcc	r1, sl, lsl sp
     8f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     8f4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     8f8:	1b00000b 	blne	92c <__RW_SIZE__+0x3a4>
     8fc:	13310005 	teqne	r1, #5
     900:	00000b1c 	andeq	r0, r0, ip, lsl fp
     904:	55010b1c 	strpl	r0, [r1, #-2844]	; 0xfffff4e4
     908:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
     90c:	13310034 	teqne	r1, #52	; 0x34
     910:	00001802 	andeq	r1, r0, r2, lsl #16
     914:	3100051e 	tstcc	r0, lr, lsl r5
     918:	00180213 	andseq	r0, r8, r3, lsl r2
     91c:	012e1f00 	teqeq	lr, r0, lsl #30
     920:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     924:	0b3b0b3a 	bleq	ec3614 <__RW_SIZE__+0xec308c>
     928:	01111927 	tsteq	r1, r7, lsr #18
     92c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     930:	01194297 			; <UNDEFINED> instruction: 0x01194297
     934:	20000013 	andcs	r0, r0, r3, lsl r0
     938:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     93c:	0b3b0b3a 	bleq	ec362c <__RW_SIZE__+0xec30a4>
     940:	17021349 	strne	r1, [r2, -r9, asr #6]
     944:	05210000 	streq	r0, [r1, #-0]!
     948:	1c133100 	ldfnes	f3, [r3], {-0}
     94c:	2200000d 	andcs	r0, r0, #13
     950:	08030005 	stmdaeq	r3, {r0, r2}
     954:	0b3b0b3a 	bleq	ec3644 <__RW_SIZE__+0xec30bc>
     958:	17021349 	strne	r1, [r2, -r9, asr #6]
     95c:	34230000 	strtcc	r0, [r3], #-0
     960:	3a080300 	bcc	201568 <__RW_SIZE__+0x200fe0>
     964:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	00170213 	andseq	r0, r7, r3, lsl r2
     96c:	00342400 	eorseq	r2, r4, r0, lsl #8
     970:	0b3a0e03 	bleq	e84184 <__RW_SIZE__+0xe83bfc>
     974:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     978:	00001702 	andeq	r1, r0, r2, lsl #14
     97c:	01828925 	orreq	r8, r2, r5, lsr #18
     980:	31011100 	mrscc	r1, (UNDEF: 17)
     984:	26000013 			; <UNDEFINED> instruction: 0x26000013
     988:	01018289 	smlabbeq	r1, r9, r2, r8
     98c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     990:	00133119 	andseq	r3, r3, r9, lsl r1
     994:	828a2700 	addhi	r2, sl, #0, 14
     998:	18020001 	stmdane	r2, {r0}
     99c:	00184291 	mulseq	r8, r1, r2
     9a0:	00342800 	eorseq	r2, r4, r0, lsl #16
     9a4:	0b3a0803 	bleq	e829b8 <__RW_SIZE__+0xe82430>
     9a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9ac:	00001802 	andeq	r1, r0, r2, lsl #16
     9b0:	31011d29 	tstcc	r1, r9, lsr #26
     9b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9b8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     9bc:	00130105 	andseq	r0, r3, r5, lsl #2
     9c0:	82892a00 	addhi	r2, r9, #0, 20
     9c4:	01110101 	tsteq	r1, r1, lsl #2
     9c8:	00001331 	andeq	r1, r0, r1, lsr r3
     9cc:	3f012e2b 	svccc	0x00012e2b
     9d0:	3a0e0319 	bcc	38163c <__RW_SIZE__+0x3810b4>
     9d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9d8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9dc:	97184006 	ldrls	r4, [r8, -r6]
     9e0:	13011942 	movwne	r1, #6466	; 0x1942
     9e4:	052c0000 	streq	r0, [ip, #-0]!
     9e8:	3a080300 	bcc	2015f0 <__RW_SIZE__+0x201068>
     9ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f0:	00170213 	andseq	r0, r7, r3, lsl r2
     9f4:	00052d00 	andeq	r2, r5, r0, lsl #26
     9f8:	0b3a0e03 	bleq	e8420c <__RW_SIZE__+0xe83c84>
     9fc:	1349053b 	movtne	r0, #38203	; 0x953b
     a00:	00001802 	andeq	r1, r0, r2, lsl #16
     a04:	0300342e 	movweq	r3, #1070	; 0x42e
     a08:	3b0b3a08 	blcc	2cf230 <__RW_SIZE__+0x2ceca8>
     a0c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     a10:	2f000017 	svccs	0x00000017
     a14:	08030034 	stmdaeq	r3, {r2, r4, r5}
     a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a1c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a20:	1d300000 	ldcne	0, cr0, [r0, #-0]
     a24:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a28:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     a2c:	0105590b 	tsteq	r5, fp, lsl #18
     a30:	31000013 	tstcc	r0, r3, lsl r0
     a34:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     a38:	0b3b0b3a 	bleq	ec3728 <__RW_SIZE__+0xec31a0>
     a3c:	0b201927 	bleq	806ee0 <__RW_SIZE__+0x806958>
     a40:	05320000 	ldreq	r0, [r2, #-0]!
     a44:	3a0e0300 	bcc	38164c <__RW_SIZE__+0x3810c4>
     a48:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a4c:	00170213 	andseq	r0, r7, r3, lsl r2
     a50:	001d3300 	andseq	r3, sp, r0, lsl #6
     a54:	01521331 	cmpeq	r2, r1, lsr r3
     a58:	0b581755 	bleq	16067b4 <__RW_SIZE__+0x160622c>
     a5c:	00000559 	andeq	r0, r0, r9, asr r5
     a60:	31000534 	tstcc	r0, r4, lsr r5
     a64:	00051c13 	andeq	r1, r5, r3, lsl ip
     a68:	010b3500 	tsteq	fp, r0, lsl #10
     a6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a70:	1d360000 	ldcne	0, cr0, [r6, #-0]
     a74:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a78:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     a7c:	0005590b 	andeq	r5, r5, fp, lsl #18
     a80:	011d3700 	tsteq	sp, r0, lsl #14
     a84:	01111331 	tsteq	r1, r1, lsr r3
     a88:	0b580612 	bleq	16022d8 <__RW_SIZE__+0x1601d50>
     a8c:	13010b59 	movwne	r0, #7001	; 0x1b59
     a90:	34380000 	ldrtcc	r0, [r8], #-0
     a94:	3a0e0300 	bcc	38169c <__RW_SIZE__+0x381114>
     a98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a9c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     aa0:	39000019 	stmdbcc	r0, {r0, r3, r4}
     aa4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa8:	0b3b0b3a 	bleq	ec3798 <__RW_SIZE__+0xec3210>
     aac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ab0:	00001802 	andeq	r1, r0, r2, lsl #16
     ab4:	01110100 	tsteq	r1, r0, lsl #2
     ab8:	0b130e25 	bleq	4c4354 <__RW_SIZE__+0x4c3dcc>
     abc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     ac0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ac4:	00001710 	andeq	r1, r0, r0, lsl r7
     ac8:	0b002402 	bleq	9ad8 <__RW_SIZE__+0x9550>
     acc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ad0:	0300000e 	movweq	r0, #14
     ad4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ad8:	0b3b0b3a 	bleq	ec37c8 <__RW_SIZE__+0xec3240>
     adc:	00001349 	andeq	r1, r0, r9, asr #6
     ae0:	0b002404 	bleq	9af8 <__RW_SIZE__+0x9570>
     ae4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ae8:	05000008 	streq	r0, [r0, #-8]
     aec:	13490035 	movtne	r0, #36917	; 0x9035
     af0:	13060000 	movwne	r0, #24576	; 0x6000
     af4:	3a0b0b01 	bcc	2c3700 <__RW_SIZE__+0x2c3178>
     af8:	01053b0b 	tsteq	r5, fp, lsl #22
     afc:	07000013 	smladeq	r0, r3, r0, r0
     b00:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     b04:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b08:	0b381349 	bleq	e05834 <__RW_SIZE__+0xe052ac>
     b0c:	0d080000 	stceq	0, cr0, [r8, #-0]
     b10:	3a0e0300 	bcc	381718 <__RW_SIZE__+0x381190>
     b14:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	000b3813 	andeq	r3, fp, r3, lsl r8
     b1c:	00160900 	andseq	r0, r6, r0, lsl #18
     b20:	0b3a0e03 	bleq	e84334 <__RW_SIZE__+0xe83dac>
     b24:	1349053b 	movtne	r0, #38203	; 0x953b
     b28:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     b2c:	03193f00 	tsteq	r9, #0, 30
     b30:	3b0b3a0e 	blcc	2cf370 <__RW_SIZE__+0x2cede8>
     b34:	1119270b 	tstne	r9, fp, lsl #14
     b38:	40061201 	andmi	r1, r6, r1, lsl #4
     b3c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b40:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     b44:	03193f01 	tsteq	r9, #1, 30
     b48:	3b0b3a0e 	blcc	2cf388 <__RW_SIZE__+0x2cee00>
     b4c:	1119270b 	tstne	r9, fp, lsl #14
     b50:	40061201 	andmi	r1, r6, r1, lsl #4
     b54:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b58:	00001301 	andeq	r1, r0, r1, lsl #6
     b5c:	0300050c 	movweq	r0, #1292	; 0x50c
     b60:	3b0b3a08 	blcc	2cf388 <__RW_SIZE__+0x2cee00>
     b64:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b68:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
     b6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b74:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b78:	0000193c 	andeq	r1, r0, ip, lsr r9
     b7c:	01110100 	tsteq	r1, r0, lsl #2
     b80:	0b130e25 	bleq	4c441c <__RW_SIZE__+0x4c3e94>
     b84:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b88:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b8c:	00001710 	andeq	r1, r0, r0, lsl r7
     b90:	0b002402 	bleq	9ba0 <__RW_SIZE__+0x9618>
     b94:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b98:	0300000e 	movweq	r0, #14
     b9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ba0:	0b3b0b3a 	bleq	ec3890 <__RW_SIZE__+0xec3308>
     ba4:	00001349 	andeq	r1, r0, r9, asr #6
     ba8:	0b002404 	bleq	9bc0 <__RW_SIZE__+0x9638>
     bac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     bb0:	05000008 	streq	r0, [r0, #-8]
     bb4:	13490035 	movtne	r0, #36917	; 0x9035
     bb8:	13060000 	movwne	r0, #24576	; 0x6000
     bbc:	3a0b0b01 	bcc	2c37c8 <__RW_SIZE__+0x2c3240>
     bc0:	010b3b0b 	tsteq	fp, fp, lsl #22
     bc4:	07000013 	smladeq	r0, r3, r0, r0
     bc8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     bcc:	0b3b0b3a 	bleq	ec38bc <__RW_SIZE__+0xec3334>
     bd0:	0b381349 	bleq	e058fc <__RW_SIZE__+0xe05374>
     bd4:	0d080000 	stceq	0, cr0, [r8, #-0]
     bd8:	3a080300 	bcc	2017e0 <__RW_SIZE__+0x201258>
     bdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     be0:	000b3813 	andeq	r3, fp, r3, lsl r8
     be4:	00260900 	eoreq	r0, r6, r0, lsl #18
     be8:	00001349 	andeq	r1, r0, r9, asr #6
     bec:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     bf0:	00130113 	andseq	r0, r3, r3, lsl r1
     bf4:	00210b00 	eoreq	r0, r1, r0, lsl #22
     bf8:	0b2f1349 	bleq	bc5924 <__RW_SIZE__+0xbc539c>
     bfc:	0f0c0000 	svceq	0x000c0000
     c00:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c04:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     c08:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c0c:	0b3a0e03 	bleq	e84420 <__RW_SIZE__+0xe83e98>
     c10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     c14:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c18:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c1c:	00130119 	andseq	r0, r3, r9, lsl r1
     c20:	82890e00 	addhi	r0, r9, #0, 28
     c24:	01110001 	tsteq	r1, r1
     c28:	00001331 	andeq	r1, r0, r1, lsr r3
     c2c:	0182890f 	orreq	r8, r2, pc, lsl #18
     c30:	31011101 	tstcc	r1, r1, lsl #2
     c34:	10000013 	andne	r0, r0, r3, lsl r0
     c38:	0001828a 	andeq	r8, r1, sl, lsl #5
     c3c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     c40:	11000018 	tstne	r0, r8, lsl r0
     c44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c48:	0b3b0b3a 	bleq	ec3938 <__RW_SIZE__+0xec33b0>
     c4c:	0b1c1349 	bleq	705978 <__RW_SIZE__+0x7053f0>
     c50:	34120000 	ldrcc	r0, [r2], #-0
     c54:	3a0e0300 	bcc	38185c <__RW_SIZE__+0x3812d4>
     c58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c5c:	00170213 	andseq	r0, r7, r3, lsl r2
     c60:	82891300 	addhi	r1, r9, #0, 6
     c64:	01110101 	tsteq	r1, r1, lsl #2
     c68:	13011331 	movwne	r1, #4913	; 0x1331
     c6c:	34140000 	ldrcc	r0, [r4], #-0
     c70:	3a0e0300 	bcc	381878 <__RW_SIZE__+0x3812f0>
     c74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	00180213 	andseq	r0, r8, r3, lsl r2
     c7c:	00341500 	eorseq	r1, r4, r0, lsl #10
     c80:	0b3a0e03 	bleq	e84494 <__RW_SIZE__+0xe83f0c>
     c84:	1349053b 	movtne	r0, #38203	; 0x953b
     c88:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     c8c:	34160000 	ldrcc	r0, [r6], #-0
     c90:	3a0e0300 	bcc	381898 <__RW_SIZE__+0x381310>
     c94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c98:	3c193f13 	ldccc	15, cr3, [r9], {19}
     c9c:	17000019 	smladne	r0, r9, r0, r0
     ca0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ca4:	0b3a0e03 	bleq	e844b8 <__RW_SIZE__+0xe83f30>
     ca8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cac:	0000193c 	andeq	r1, r0, ip, lsr r9
     cb0:	3f012e18 	svccc	0x00012e18
     cb4:	3a0e0319 	bcc	381920 <__RW_SIZE__+0x381398>
     cb8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     cbc:	01193c19 	tsteq	r9, r9, lsl ip
     cc0:	19000013 	stmdbne	r0, {r0, r1, r4}
     cc4:	13490005 	movtne	r0, #36869	; 0x9005
     cc8:	181a0000 	ldmdane	sl, {}	; <UNPREDICTABLE>
     ccc:	1b000000 	blne	cd4 <__RW_SIZE__+0x74c>
     cd0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     cd4:	0b3a0e03 	bleq	e844e8 <__RW_SIZE__+0xe83f60>
     cd8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     cdc:	0000193c 	andeq	r1, r0, ip, lsr r9
     ce0:	01110100 	tsteq	r1, r0, lsl #2
     ce4:	0b130e25 	bleq	4c4580 <__RW_SIZE__+0x4c3ff8>
     ce8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     cec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cf0:	00001710 	andeq	r1, r0, r0, lsl r7
     cf4:	0b002402 	bleq	9d04 <__RW_SIZE__+0x977c>
     cf8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     cfc:	0300000e 	movweq	r0, #14
     d00:	0b0b0024 	bleq	2c0d98 <__RW_SIZE__+0x2c0810>
     d04:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     d08:	0f040000 	svceq	0x00040000
     d0c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     d10:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     d14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d18:	0b3a0e03 	bleq	e8452c <__RW_SIZE__+0xe83fa4>
     d1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d20:	01111349 	tsteq	r1, r9, asr #6
     d24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d28:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     d30:	08030005 	stmdaeq	r3, {r0, r2}
     d34:	0b3b0b3a 	bleq	ec3a24 <__RW_SIZE__+0xec349c>
     d38:	17021349 	strne	r1, [r2, -r9, asr #6]
     d3c:	34070000 	strcc	r0, [r7], #-0
     d40:	3a0e0300 	bcc	381948 <__RW_SIZE__+0x3813c0>
     d44:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d48:	3c193f13 	ldccc	15, cr3, [r9], {19}
     d4c:	08000019 	stmdaeq	r0, {r0, r3, r4}
     d50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d54:	0b3b0b3a 	bleq	ec3a44 <__RW_SIZE__+0xec34bc>
     d58:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     d5c:	34090000 	strcc	r0, [r9], #-0
     d60:	3a0e0300 	bcc	381968 <__RW_SIZE__+0x3813e0>
     d64:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d68:	00170213 	andseq	r0, r7, r3, lsl r2
     d6c:	00340a00 	eorseq	r0, r4, r0, lsl #20
     d70:	0b3a0e03 	bleq	e84584 <__RW_SIZE__+0xe83ffc>
     d74:	1349053b 	movtne	r0, #38203	; 0x953b
     d78:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     d7c:	350b0000 	strcc	r0, [fp, #-0]
     d80:	00134900 	andseq	r4, r3, r0, lsl #18
     d84:	11010000 	mrsne	r0, (UNDEF: 1)
     d88:	130e2501 	movwne	r2, #58625	; 0xe501
     d8c:	1b0e030b 	blne	3819c0 <__RW_SIZE__+0x381438>
     d90:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     d94:	00171006 	andseq	r1, r7, r6
     d98:	01040200 	mrseq	r0, R12_usr
     d9c:	0b0b0e03 	bleq	2c45b0 <__RW_SIZE__+0x2c4028>
     da0:	0b3b0b3a 	bleq	ec3a90 <__RW_SIZE__+0xec3508>
     da4:	00001301 	andeq	r1, r0, r1, lsl #6
     da8:	03002803 	movweq	r2, #2051	; 0x803
     dac:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     db0:	00160400 	andseq	r0, r6, r0, lsl #8
     db4:	0b3a0e03 	bleq	e845c8 <__RW_SIZE__+0xe84040>
     db8:	1349053b 	movtne	r0, #38203	; 0x953b
     dbc:	24050000 	strcs	r0, [r5], #-0
     dc0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dc4:	000e030b 	andeq	r0, lr, fp, lsl #6
     dc8:	00160600 	andseq	r0, r6, r0, lsl #12
     dcc:	0b3a0e03 	bleq	e845e0 <__RW_SIZE__+0xe84058>
     dd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     dd4:	24070000 	strcs	r0, [r7], #-0
     dd8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ddc:	0008030b 	andeq	r0, r8, fp, lsl #6
     de0:	01130800 	tsteq	r3, r0, lsl #16
     de4:	0b3a050b 	bleq	e82218 <__RW_SIZE__+0xe81c90>
     de8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     dec:	0d090000 	stceq	0, cr0, [r9, #-0]
     df0:	3a0e0300 	bcc	3819f8 <__RW_SIZE__+0x381470>
     df4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     df8:	000b3813 	andeq	r3, fp, r3, lsl r8
     dfc:	000d0a00 	andeq	r0, sp, r0, lsl #20
     e00:	0b3a0e03 	bleq	e84614 <__RW_SIZE__+0xe8408c>
     e04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e08:	00000538 	andeq	r0, r0, r8, lsr r5
     e0c:	03000d0b 	movweq	r0, #3339	; 0xd0b
     e10:	3b0b3a08 	blcc	2cf638 <__RW_SIZE__+0x2cf0b0>
     e14:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     e18:	0c000005 	stceq	0, cr0, [r0], {5}
     e1c:	13490101 	movtne	r0, #37121	; 0x9101
     e20:	00001301 	andeq	r1, r0, r1, lsl #6
     e24:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     e28:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e2c:	00350e00 	eorseq	r0, r5, r0, lsl #28
     e30:	00001349 	andeq	r1, r0, r9, asr #6
     e34:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     e38:	00052f13 	andeq	r2, r5, r3, lsl pc
     e3c:	01131000 	tsteq	r3, r0
     e40:	0b3a0b0b 	bleq	e83a74 <__RW_SIZE__+0xe834ec>
     e44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     e48:	0d110000 	ldceq	0, cr0, [r1, #-0]
     e4c:	3a080300 	bcc	201a54 <__RW_SIZE__+0x2014cc>
     e50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e54:	000b3813 	andeq	r3, fp, r3, lsl r8
     e58:	00261200 	eoreq	r1, r6, r0, lsl #4
     e5c:	00001349 	andeq	r1, r0, r9, asr #6
     e60:	0b011313 	bleq	45ab4 <__RW_SIZE__+0x4552c>
     e64:	3b0b3a0b 	blcc	2cf698 <__RW_SIZE__+0x2cf110>
     e68:	00130105 	andseq	r0, r3, r5, lsl #2
     e6c:	000d1400 	andeq	r1, sp, r0, lsl #8
     e70:	0b3a0803 	bleq	e82e84 <__RW_SIZE__+0xe828fc>
     e74:	1349053b 	movtne	r0, #38203	; 0x953b
     e78:	00000b38 	andeq	r0, r0, r8, lsr fp
     e7c:	03000d15 	movweq	r0, #3349	; 0xd15
     e80:	3b0b3a0e 	blcc	2cf6c0 <__RW_SIZE__+0x2cf138>
     e84:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     e88:	1600000b 	strne	r0, [r0], -fp
     e8c:	0b0b000f 	bleq	2c0ed0 <__RW_SIZE__+0x2c0948>
     e90:	00001349 	andeq	r1, r0, r9, asr #6
     e94:	03012e17 	movweq	r2, #7703	; 0x1e17
     e98:	3b0b3a0e 	blcc	2cf6d8 <__RW_SIZE__+0x2cf150>
     e9c:	20192705 	andscs	r2, r9, r5, lsl #14
     ea0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ea4:	00051800 	andeq	r1, r5, r0, lsl #16
     ea8:	0b3a0e03 	bleq	e846bc <__RW_SIZE__+0xe84134>
     eac:	1349053b 	movtne	r0, #38203	; 0x953b
     eb0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     eb4:	3a0e0301 	bcc	381ac0 <__RW_SIZE__+0x381538>
     eb8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ebc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     ec0:	97184006 	ldrls	r4, [r8, -r6]
     ec4:	13011942 	movwne	r1, #6466	; 0x1942
     ec8:	051a0000 	ldreq	r0, [sl, #-0]
     ecc:	3a0e0300 	bcc	381ad4 <__RW_SIZE__+0x38154c>
     ed0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed4:	00170213 	andseq	r0, r7, r3, lsl r2
     ed8:	00051b00 	andeq	r1, r5, r0, lsl #22
     edc:	0b3a0803 	bleq	e82ef0 <__RW_SIZE__+0xe82968>
     ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ee4:	00001702 	andeq	r1, r0, r2, lsl #14
     ee8:	0300341c 	movweq	r3, #1052	; 0x41c
     eec:	3b0b3a08 	blcc	2cf714 <__RW_SIZE__+0x2cf18c>
     ef0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ef4:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
     ef8:	01018289 	smlabbeq	r1, r9, r2, r8
     efc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     f00:	8a1e0000 	bhi	780f08 <__RW_SIZE__+0x780980>
     f04:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     f08:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     f0c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     f10:	03193f01 	tsteq	r9, #1, 30
     f14:	3b0b3a0e 	blcc	2cf754 <__RW_SIZE__+0x2cf1cc>
     f18:	1119270b 	tstne	r9, fp, lsl #14
     f1c:	40061201 	andmi	r1, r6, r1, lsl #4
     f20:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f24:	00001301 	andeq	r1, r0, r1, lsl #6
     f28:	01828920 	orreq	r8, r2, r0, lsr #18
     f2c:	31011101 	tstcc	r1, r1, lsl #2
     f30:	00130113 	andseq	r0, r3, r3, lsl r1
     f34:	012e2100 	teqeq	lr, r0, lsl #2
     f38:	0b3a0e03 	bleq	e8474c <__RW_SIZE__+0xe841c4>
     f3c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     f40:	13010b20 	movwne	r0, #6944	; 0x1b20
     f44:	05220000 	streq	r0, [r2, #-0]!
     f48:	3a080300 	bcc	201b50 <__RW_SIZE__+0x2015c8>
     f4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f50:	23000013 	movwcs	r0, #19
     f54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     f58:	17550152 			; <UNDEFINED> instruction: 0x17550152
     f5c:	0b590b58 	bleq	1643cc4 <__RW_SIZE__+0x164373c>
     f60:	00001301 	andeq	r1, r0, r1, lsl #6
     f64:	31000524 	tstcc	r0, r4, lsr #10
     f68:	00180213 	andseq	r0, r8, r3, lsl r2
     f6c:	00052500 	andeq	r2, r5, r0, lsl #10
     f70:	17021331 	smladxne	r2, r1, r3, r1
     f74:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
     f78:	11000182 	smlabbne	r0, r2, r1, r0
     f7c:	00133101 	andseq	r3, r3, r1, lsl #2
     f80:	002e2700 	eoreq	r2, lr, r0, lsl #14
     f84:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f88:	0b3b0b3a 	bleq	ec3c78 <__RW_SIZE__+0xec36f0>
     f8c:	01111927 	tsteq	r1, r7, lsr #18
     f90:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f94:	00194297 	mulseq	r9, r7, r2
     f98:	012e2800 	teqeq	lr, r0, lsl #16
     f9c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     fa0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fa4:	01111927 	tsteq	r1, r7, lsr #18
     fa8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fac:	01194297 			; <UNDEFINED> instruction: 0x01194297
     fb0:	29000013 	stmdbcs	r0, {r0, r1, r4}
     fb4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     fb8:	17550152 			; <UNDEFINED> instruction: 0x17550152
     fbc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     fc0:	052a0000 	streq	r0, [sl, #-0]!
     fc4:	1c133100 	ldfnes	f3, [r3], {-0}
     fc8:	2b00000b 	blcs	ffc <__RW_SIZE__+0xa74>
     fcc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     fd8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     fdc:	03193f00 	tsteq	r9, #0, 30
     fe0:	3b0b3a0e 	blcc	2cf820 <__RW_SIZE__+0x2cf298>
     fe4:	11192705 	tstne	r9, r5, lsl #14
     fe8:	40061201 	andmi	r1, r6, r1, lsl #4
     fec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ff0:	342d0000 	strtcc	r0, [sp], #-0
     ff4:	3a0e0300 	bcc	381bfc <__RW_SIZE__+0x381674>
     ff8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ffc:	00180213 	andseq	r0, r8, r3, lsl r2
    1000:	00342e00 	eorseq	r2, r4, r0, lsl #28
    1004:	0b3a0e03 	bleq	e84818 <__RW_SIZE__+0xe84290>
    1008:	1349053b 	movtne	r0, #38203	; 0x953b
    100c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1010:	342f0000 	strtcc	r0, [pc], #-0	; 1018 <__RW_SIZE__+0xa90>
    1014:	3a0e0300 	bcc	381c1c <__RW_SIZE__+0x381694>
    1018:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    101c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1020:	30000018 	andcc	r0, r0, r8, lsl r0
    1024:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1028:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    102c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1030:	00001802 	andeq	r1, r0, r2, lsl #16
    1034:	3f012e31 	svccc	0x00012e31
    1038:	3a0e0319 	bcc	381ca4 <__RW_SIZE__+0x38171c>
    103c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1040:	01193c19 	tsteq	r9, r9, lsl ip
    1044:	32000013 	andcc	r0, r0, #19
    1048:	13490005 	movtne	r0, #36869	; 0x9005
    104c:	18330000 	ldmdane	r3!, {}	; <UNPREDICTABLE>
    1050:	34000000 	strcc	r0, [r0], #-0
    1054:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    1058:	0b3a0e03 	bleq	e8486c <__RW_SIZE__+0xe842e4>
    105c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1060:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1064:	01000000 	mrseq	r0, (UNDEF: 0)
    1068:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    106c:	0e030b13 	vmoveq.32	d3[0], r0
    1070:	01110e1b 	tsteq	r1, fp, lsl lr
    1074:	17100612 			; <UNDEFINED> instruction: 0x17100612
    1078:	24020000 	strcs	r0, [r2], #-0
    107c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1080:	000e030b 	andeq	r0, lr, fp, lsl #6
    1084:	00160300 	andseq	r0, r6, r0, lsl #6
    1088:	0b3a0e03 	bleq	e8489c <__RW_SIZE__+0xe84314>
    108c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1090:	24040000 	strcs	r0, [r4], #-0
    1094:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1098:	0008030b 	andeq	r0, r8, fp, lsl #6
    109c:	00350500 	eorseq	r0, r5, r0, lsl #10
    10a0:	00001349 	andeq	r1, r0, r9, asr #6
    10a4:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    10a8:	07000013 	smladeq	r0, r3, r0, r0
    10ac:	0b0b0113 	bleq	2c1500 <__RW_SIZE__+0x2c0f78>
    10b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	03000d08 	movweq	r0, #3336	; 0xd08
    10bc:	3b0b3a0e 	blcc	2cf8fc <__RW_SIZE__+0x2cf374>
    10c0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    10c4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    10c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    10cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10d0:	0b381349 	bleq	e05dfc <__RW_SIZE__+0xe05874>
    10d4:	160a0000 	strne	r0, [sl], -r0
    10d8:	3a0e0300 	bcc	381ce0 <__RW_SIZE__+0x381758>
    10dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e0:	0b000013 	bleq	1134 <__RW_SIZE__+0xbac>
    10e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    10e8:	0b3a0e03 	bleq	e848fc <__RW_SIZE__+0xe84374>
    10ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    10f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    10f8:	00130119 	andseq	r0, r3, r9, lsl r1
    10fc:	00050c00 	andeq	r0, r5, r0, lsl #24
    1100:	0b3a0e03 	bleq	e84914 <__RW_SIZE__+0xe8438c>
    1104:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1108:	00001702 	andeq	r1, r0, r2, lsl #14
    110c:	3f012e0d 	svccc	0x00012e0d
    1110:	3a0e0319 	bcc	381d7c <__RW_SIZE__+0x3817f4>
    1114:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1118:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    111c:	97184006 	ldrls	r4, [r8, -r6]
    1120:	13011942 	movwne	r1, #6466	; 0x1942
    1124:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1128:	03193f00 	tsteq	r9, #0, 30
    112c:	3b0b3a0e 	blcc	2cf96c <__RW_SIZE__+0x2cf3e4>
    1130:	1119270b 	tstne	r9, fp, lsl #14
    1134:	40061201 	andmi	r1, r6, r1, lsl #4
    1138:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    113c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    1140:	03193f00 	tsteq	r9, #0, 30
    1144:	3b0b3a0e 	blcc	2cf984 <__RW_SIZE__+0x2cf3fc>
    1148:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    114c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1150:	97184006 	ldrls	r4, [r8, -r6]
    1154:	00001942 	andeq	r1, r0, r2, asr #18
    1158:	03003410 	movweq	r3, #1040	; 0x410
    115c:	3b0b3a0e 	blcc	2cf99c <__RW_SIZE__+0x2cf414>
    1160:	3f134905 	svccc	0x00134905
    1164:	00193c19 	andseq	r3, r9, r9, lsl ip
    1168:	11010000 	mrsne	r0, (UNDEF: 1)
    116c:	130e2501 	movwne	r2, #58625	; 0xe501
    1170:	1b0e030b 	blne	381da4 <__RW_SIZE__+0x38181c>
    1174:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1178:	00171006 	andseq	r1, r7, r6
    117c:	01040200 	mrseq	r0, R12_usr
    1180:	0b0b0e03 	bleq	2c4994 <__RW_SIZE__+0x2c440c>
    1184:	0b3b0b3a 	bleq	ec3e74 <__RW_SIZE__+0xec38ec>
    1188:	00001301 	andeq	r1, r0, r1, lsl #6
    118c:	03002803 	movweq	r2, #2051	; 0x803
    1190:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1194:	00160400 	andseq	r0, r6, r0, lsl #8
    1198:	0b3a0e03 	bleq	e849ac <__RW_SIZE__+0xe84424>
    119c:	1349053b 	movtne	r0, #38203	; 0x953b
    11a0:	24050000 	strcs	r0, [r5], #-0
    11a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11a8:	000e030b 	andeq	r0, lr, fp, lsl #6
    11ac:	00160600 	andseq	r0, r6, r0, lsl #12
    11b0:	0b3a0e03 	bleq	e849c4 <__RW_SIZE__+0xe8443c>
    11b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11b8:	24070000 	strcs	r0, [r7], #-0
    11bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    11c0:	0008030b 	andeq	r0, r8, fp, lsl #6
    11c4:	01130800 	tsteq	r3, r0, lsl #16
    11c8:	0b3a050b 	bleq	e825fc <__RW_SIZE__+0xe82074>
    11cc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    11d0:	0d090000 	stceq	0, cr0, [r9, #-0]
    11d4:	3a0e0300 	bcc	381ddc <__RW_SIZE__+0x381854>
    11d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11dc:	000b3813 	andeq	r3, fp, r3, lsl r8
    11e0:	000d0a00 	andeq	r0, sp, r0, lsl #20
    11e4:	0b3a0e03 	bleq	e849f8 <__RW_SIZE__+0xe84470>
    11e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    11ec:	00000538 	andeq	r0, r0, r8, lsr r5
    11f0:	03000d0b 	movweq	r0, #3339	; 0xd0b
    11f4:	3b0b3a08 	blcc	2cfa1c <__RW_SIZE__+0x2cf494>
    11f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    11fc:	0c000005 	stceq	0, cr0, [r0], {5}
    1200:	13490101 	movtne	r0, #37121	; 0x9101
    1204:	00001301 	andeq	r1, r0, r1, lsl #6
    1208:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
    120c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1210:	00350e00 	eorseq	r0, r5, r0, lsl #28
    1214:	00001349 	andeq	r1, r0, r9, asr #6
    1218:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
    121c:	00052f13 	andeq	r2, r5, r3, lsl pc
    1220:	01131000 	tsteq	r3, r0
    1224:	0b3a0b0b 	bleq	e83e58 <__RW_SIZE__+0xe838d0>
    1228:	1301053b 	movwne	r0, #5435	; 0x153b
    122c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    1230:	3a080300 	bcc	201e38 <__RW_SIZE__+0x2018b0>
    1234:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1238:	000b3813 	andeq	r3, fp, r3, lsl r8
    123c:	000d1200 	andeq	r1, sp, r0, lsl #4
    1240:	0b3a0e03 	bleq	e84a54 <__RW_SIZE__+0xe844cc>
    1244:	1349053b 	movtne	r0, #38203	; 0x953b
    1248:	00000b38 	andeq	r0, r0, r8, lsr fp
    124c:	03012e13 	movweq	r2, #7699	; 0x1e13
    1250:	3b0b3a0e 	blcc	2cfa90 <__RW_SIZE__+0x2cf508>
    1254:	20192705 	andscs	r2, r9, r5, lsl #14
    1258:	0013010b 	andseq	r0, r3, fp, lsl #2
    125c:	00051400 	andeq	r1, r5, r0, lsl #8
    1260:	0b3a0e03 	bleq	e84a74 <__RW_SIZE__+0xe844ec>
    1264:	1349053b 	movtne	r0, #38203	; 0x953b
    1268:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    126c:	03193f01 	tsteq	r9, #1, 30
    1270:	3b0b3a0e 	blcc	2cfab0 <__RW_SIZE__+0x2cf528>
    1274:	1119270b 	tstne	r9, fp, lsl #14
    1278:	40061201 	andmi	r1, r6, r1, lsl #4
    127c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1280:	00001301 	andeq	r1, r0, r1, lsl #6
    1284:	03000516 	movweq	r0, #1302	; 0x516
    1288:	3b0b3a0e 	blcc	2cfac8 <__RW_SIZE__+0x2cf540>
    128c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1290:	17000017 	smladne	r0, r7, r0, r0
    1294:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1298:	0b3b0b3a 	bleq	ec3f88 <__RW_SIZE__+0xec3a00>
    129c:	17021349 	strne	r1, [r2, -r9, asr #6]
    12a0:	34180000 	ldrcc	r0, [r8], #-0
    12a4:	3a080300 	bcc	201eac <__RW_SIZE__+0x201924>
    12a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12ac:	00180213 	andseq	r0, r8, r3, lsl r2
    12b0:	00051900 	andeq	r1, r5, r0, lsl #18
    12b4:	0b3a0803 	bleq	e832c8 <__RW_SIZE__+0xe82d40>
    12b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12bc:	00001702 	andeq	r1, r0, r2, lsl #14
    12c0:	31011d1a 	tstcc	r1, sl, lsl sp
    12c4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    12c8:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    12cc:	0013010b 	andseq	r0, r3, fp, lsl #2
    12d0:	00051b00 	andeq	r1, r5, r0, lsl #22
    12d4:	17021331 	smladxne	r2, r1, r3, r1
    12d8:	051c0000 	ldreq	r0, [ip, #-0]
    12dc:	1c133100 	ldfnes	f3, [r3], {-0}
    12e0:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    12e4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    12e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12ec:	0b590b58 	bleq	1644054 <__RW_SIZE__+0x1643acc>
    12f0:	341e0000 	ldrcc	r0, [lr], #-0
    12f4:	3a0e0300 	bcc	381efc <__RW_SIZE__+0x381974>
    12f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    12fc:	3c193f13 	ldccc	15, cr3, [r9], {19}
    1300:	00000019 	andeq	r0, r0, r9, lsl r0
    1304:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1308:	030b130e 	movweq	r1, #45838	; 0xb30e
    130c:	110e1b0e 	tstne	lr, lr, lsl #22
    1310:	10061201 	andne	r1, r6, r1, lsl #4
    1314:	02000017 	andeq	r0, r0, #23
    1318:	0e030104 	adfeqs	f0, f3, f4
    131c:	0b3a0b0b 	bleq	e83f50 <__RW_SIZE__+0xe839c8>
    1320:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1324:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    1328:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    132c:	0400000d 	streq	r0, [r0], #-13
    1330:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1338:	00001349 	andeq	r1, r0, r9, asr #6
    133c:	0b002405 	bleq	a358 <__RW_SIZE__+0x9dd0>
    1340:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1344:	0600000e 	streq	r0, [r0], -lr
    1348:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    134c:	0b3b0b3a 	bleq	ec403c <__RW_SIZE__+0xec3ab4>
    1350:	00001349 	andeq	r1, r0, r9, asr #6
    1354:	0b002407 	bleq	a378 <__RW_SIZE__+0x9df0>
    1358:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    135c:	08000008 	stmdaeq	r0, {r3}
    1360:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
    1364:	0b3b0b3a 	bleq	ec4054 <__RW_SIZE__+0xec3acc>
    1368:	00001301 	andeq	r1, r0, r1, lsl #6
    136c:	03000d09 	movweq	r0, #3337	; 0xd09
    1370:	3b0b3a0e 	blcc	2cfbb0 <__RW_SIZE__+0x2cf628>
    1374:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1378:	0a00000b 	beq	13ac <__RW_SIZE__+0xe24>
    137c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1380:	0b3b0b3a 	bleq	ec4070 <__RW_SIZE__+0xec3ae8>
    1384:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1388:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    138c:	3a080300 	bcc	201f94 <__RW_SIZE__+0x201a0c>
    1390:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1394:	00053813 	andeq	r3, r5, r3, lsl r8
    1398:	01010c00 	tsteq	r1, r0, lsl #24
    139c:	13011349 	movwne	r1, #4937	; 0x1349
    13a0:	210d0000 	mrscs	r0, (UNDEF: 13)
    13a4:	2f134900 	svccs	0x00134900
    13a8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    13ac:	13490035 	movtne	r0, #36917	; 0x9035
    13b0:	210f0000 	mrscs	r0, CPSR
    13b4:	2f134900 	svccs	0x00134900
    13b8:	10000005 	andne	r0, r0, r5
    13bc:	0b0b0113 	bleq	2c1810 <__RW_SIZE__+0x2c1288>
    13c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13c4:	00001301 	andeq	r1, r0, r1, lsl #6
    13c8:	03000d11 	movweq	r0, #3345	; 0xd11
    13cc:	3b0b3a08 	blcc	2cfbf4 <__RW_SIZE__+0x2cf66c>
    13d0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    13d4:	1200000b 	andne	r0, r0, #11
    13d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    13dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13e0:	0b381349 	bleq	e0610c <__RW_SIZE__+0xe05b84>
    13e4:	0f130000 	svceq	0x00130000
    13e8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    13ec:	000f1400 	andeq	r1, pc, r0, lsl #8
    13f0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    13f4:	26150000 	ldrcs	r0, [r5], -r0
    13f8:	00134900 	andseq	r4, r3, r0, lsl #18
    13fc:	01131600 	tsteq	r3, r0, lsl #12
    1400:	0b0b0e03 	bleq	2c4c14 <__RW_SIZE__+0x2c468c>
    1404:	0b3b0b3a 	bleq	ec40f4 <__RW_SIZE__+0xec3b6c>
    1408:	00001301 	andeq	r1, r0, r1, lsl #6
    140c:	03000d17 	movweq	r0, #3351	; 0xd17
    1410:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    1414:	0019340b 	andseq	r3, r9, fp, lsl #8
    1418:	012e1800 	teqeq	lr, r0, lsl #16
    141c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1420:	0b3b0b3a 	bleq	ec4110 <__RW_SIZE__+0xec3b88>
    1424:	0b201927 	bleq	8078c8 <__RW_SIZE__+0x807340>
    1428:	00001301 	andeq	r1, r0, r1, lsl #6
    142c:	03000519 	movweq	r0, #1305	; 0x519
    1430:	3b0b3a08 	blcc	2cfc58 <__RW_SIZE__+0x2cf6d0>
    1434:	0013490b 	andseq	r4, r3, fp, lsl #18
    1438:	002e1a00 	eoreq	r1, lr, r0, lsl #20
    143c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1440:	0b3b0b3a 	bleq	ec4130 <__RW_SIZE__+0xec3ba8>
    1444:	13491927 	movtne	r1, #39207	; 0x9927
    1448:	00000b20 	andeq	r0, r0, r0, lsr #22
    144c:	3f012e1b 	svccc	0x00012e1b
    1450:	3a0e0319 	bcc	3820bc <__RW_SIZE__+0x381b34>
    1454:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1458:	20134919 	andscs	r4, r3, r9, lsl r9
    145c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1460:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1464:	0b3a0803 	bleq	e83478 <__RW_SIZE__+0xe82ef0>
    1468:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    146c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    1470:	3a0e0301 	bcc	38207c <__RW_SIZE__+0x381af4>
    1474:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1478:	010b2019 	tsteq	fp, r9, lsl r0
    147c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1480:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1488:	00001349 	andeq	r1, r0, r9, asr #6
    148c:	3f012e1f 	svccc	0x00012e1f
    1490:	3a0e0319 	bcc	3820fc <__RW_SIZE__+0x381b74>
    1494:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1498:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    149c:	96184006 	ldrls	r4, [r8], -r6
    14a0:	13011942 	movwne	r1, #6466	; 0x1942
    14a4:	05200000 	streq	r0, [r0, #-0]!
    14a8:	3a0e0300 	bcc	3820b0 <__RW_SIZE__+0x381b28>
    14ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14b0:	00170213 	andseq	r0, r7, r3, lsl r2
    14b4:	00342100 	eorseq	r2, r4, r0, lsl #2
    14b8:	0b3a0803 	bleq	e834cc <__RW_SIZE__+0xe82f44>
    14bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14c0:	00001702 	andeq	r1, r0, r2, lsl #14
    14c4:	03003422 	movweq	r3, #1058	; 0x422
    14c8:	3b0b3a0e 	blcc	2cfd08 <__RW_SIZE__+0x2cf780>
    14cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    14d0:	23000017 	movwcs	r0, #23
    14d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14d8:	0b3b0b3a 	bleq	ec41c8 <__RW_SIZE__+0xec3c40>
    14dc:	00001349 	andeq	r1, r0, r9, asr #6
    14e0:	31012e24 	tstcc	r1, r4, lsr #28
    14e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14e8:	97184006 	ldrls	r4, [r8, -r6]
    14ec:	13011942 	movwne	r1, #6466	; 0x1942
    14f0:	05250000 	streq	r0, [r5, #-0]!
    14f4:	02133100 	andseq	r3, r3, #0, 2
    14f8:	26000018 			; <UNDEFINED> instruction: 0x26000018
    14fc:	13310005 	teqne	r1, #5
    1500:	00001702 	andeq	r1, r0, r2, lsl #14
    1504:	31011d27 	tstcc	r1, r7, lsr #26
    1508:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    150c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1510:	2800000b 	stmdacs	r0, {r0, r1, r3}
    1514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1518:	0b3a0e03 	bleq	e84d2c <__RW_SIZE__+0xe847a4>
    151c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1520:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1528:	00130119 	andseq	r0, r3, r9, lsl r1
    152c:	00052900 	andeq	r2, r5, r0, lsl #18
    1530:	0b3a0803 	bleq	e83544 <__RW_SIZE__+0xe82fbc>
    1534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1538:	00001802 	andeq	r1, r0, r2, lsl #16
    153c:	0000182a 	andeq	r1, r0, sl, lsr #16
    1540:	00342b00 	eorseq	r2, r4, r0, lsl #22
    1544:	0b3a0803 	bleq	e83558 <__RW_SIZE__+0xe82fd0>
    1548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    154c:	00001802 	andeq	r1, r0, r2, lsl #16
    1550:	0300342c 	movweq	r3, #1068	; 0x42c
    1554:	3b0b3a0e 	blcc	2cfd94 <__RW_SIZE__+0x2cf80c>
    1558:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    155c:	2d000018 	stccs	0, cr0, [r0, #-96]	; 0xffffffa0
    1560:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1564:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1568:	0b590b58 	bleq	16442d0 <__RW_SIZE__+0x1643d48>
    156c:	00001301 	andeq	r1, r0, r1, lsl #6
    1570:	0182892e 	orreq	r8, r2, lr, lsr #18
    1574:	31011101 	tstcc	r1, r1, lsl #2
    1578:	2f000013 	svccs	0x00000013
    157c:	0001828a 	andeq	r8, r1, sl, lsl #5
    1580:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    1584:	30000018 	andcc	r0, r0, r8, lsl r0
    1588:	1331002e 	teqne	r1, #46	; 0x2e
    158c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1590:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1594:	31000019 	tstcc	r0, r9, lsl r0
    1598:	13310034 	teqne	r1, #52	; 0x34
    159c:	1d320000 	ldcne	0, cr0, [r2, #-0]
    15a0:	11133100 	tstne	r3, r0, lsl #2
    15a4:	58061201 	stmdapl	r6, {r0, r9, ip}
    15a8:	000b590b 	andeq	r5, fp, fp, lsl #18
    15ac:	010b3300 	mrseq	r3, (UNDEF: 59)
    15b0:	00001755 	andeq	r1, r0, r5, asr r7
    15b4:	31001d34 	tstcc	r0, r4, lsr sp
    15b8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    15bc:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    15c0:	3500000b 	strcc	r0, [r0, #-11]
    15c4:	13310005 	teqne	r1, #5
    15c8:	00000b1c 	andeq	r0, r0, ip, lsl fp
    15cc:	3f012e36 	svccc	0x00012e36
    15d0:	3a0e0319 	bcc	38223c <__RW_SIZE__+0x381cb4>
    15d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15d8:	11134919 	tstne	r3, r9, lsl r9
    15dc:	40061201 	andmi	r1, r6, r1, lsl #4
    15e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    15e4:	00001301 	andeq	r1, r0, r1, lsl #6
    15e8:	01828937 	orreq	r8, r2, r7, lsr r9
    15ec:	31011101 	tstcc	r1, r1, lsl #2
    15f0:	00130113 	andseq	r0, r3, r3, lsl r1
    15f4:	00053800 	andeq	r3, r5, r0, lsl #16
    15f8:	0b3a0803 	bleq	e8360c <__RW_SIZE__+0xe83084>
    15fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1600:	00001702 	andeq	r1, r0, r2, lsl #14
    1604:	31011d39 	tstcc	r1, r9, lsr sp
    1608:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    160c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1610:	3a00000b 	bcc	1644 <__RW_SIZE__+0x10bc>
    1614:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1618:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    161c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1620:	0000193c 	andeq	r1, r0, ip, lsr r9
    1624:	0300343b 	movweq	r3, #1083	; 0x43b
    1628:	3b0b3a0e 	blcc	2cfe68 <__RW_SIZE__+0x2cf8e0>
    162c:	3f13490b 	svccc	0x0013490b
    1630:	00193c19 	andseq	r3, r9, r9, lsl ip
    1634:	012e3c00 	teqeq	lr, r0, lsl #24
    1638:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    163c:	0b3b0b3a 	bleq	ec432c <__RW_SIZE__+0xec3da4>
    1640:	13491927 	movtne	r1, #39207	; 0x9927
    1644:	1301193c 	movwne	r1, #6460	; 0x193c
    1648:	053d0000 	ldreq	r0, [sp, #-0]!
    164c:	00134900 	andseq	r4, r3, r0, lsl #18
    1650:	012e3e00 	teqeq	lr, r0, lsl #28
    1654:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1658:	0b3b0b3a 	bleq	ec4348 <__RW_SIZE__+0xec3dc0>
    165c:	13491927 	movtne	r1, #39207	; 0x9927
    1660:	0000193c 	andeq	r1, r0, ip, lsr r9
    1664:	00110100 	andseq	r0, r1, r0, lsl #2
    1668:	01110610 	tsteq	r1, r0, lsl r6
    166c:	08030112 	stmdaeq	r3, {r1, r4, r8}
    1670:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    1674:	00000513 	andeq	r0, r0, r3, lsl r5
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
  14:	00000068 	andeq	r0, r0, r8, rrx
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01cb0002 	biceq	r0, fp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
  34:	000000a2 	andeq	r0, r0, r2, lsr #1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	06d40002 	ldrbeq	r0, [r4], r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	080032f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp}
  54:	0000067e 	andeq	r0, r0, lr, ror r6
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	10f40002 	rscsne	r0, r4, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	08003978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, ip, sp}
  74:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	18920002 	ldmne	r2, {r1}
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	08003c00 	stmdaeq	r0, {sl, fp, ip, sp}
  94:	000000f2 	strdeq	r0, [r0], -r2
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	1ec40002 	cdpne	0, 12, cr0, cr4, cr2, {0}
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
  b4:	000030a4 	andeq	r3, r0, r4, lsr #1
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	46ee0002 	strbtmi	r0, [lr], r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	08006d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, lr}
  d4:	00000072 	andeq	r0, r0, r2, ror r0
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	48e90002 	stmiami	r9!, {r1}^
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
  f4:	0000019c 	muleq	r0, ip, r1
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	4e910002 	cdpmi	0, 9, cr0, cr1, cr2, {0}
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	08006fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp, lr}
 114:	00000044 	andeq	r0, r0, r4, asr #32
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	4f900002 	svcmi	0x00900002
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	08006fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 134:	00000442 	andeq	r0, r0, r2, asr #8
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	61aa0002 			; <UNDEFINED> instruction: 0x61aa0002
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	08007430 	stmdaeq	r0, {r4, r5, sl, ip, sp, lr}
 154:	0000009c 	muleq	r0, ip, r0
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	632e0002 	teqvs	lr, #2
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
 174:	000001aa 	andeq	r0, r0, sl, lsr #3
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	6a160002 	bvs	580194 <__RW_SIZE__+0x57fc0c>
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	08007680 	stmdaeq	r0, {r7, r9, sl, ip, sp, lr}
 194:	00000362 	andeq	r0, r0, r2, ror #6
	...
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	73c50002 	bicvc	r0, r5, #2
 1a8:	00040000 	andeq	r0, r4, r0
 1ac:	00000000 	andeq	r0, r0, r0
 1b0:	08003000 	stmdaeq	r0, {ip, sp}
 1b4:	000001ec 	andeq	r0, r0, ip, ror #3
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000000a6 	andeq	r0, r0, r6, lsr #1
       4:	007f0002 	rsbseq	r0, pc, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	6f435c3a 	svcvs	0x00435c3a
      20:	6f536564 	svcvs	0x00536564
      24:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      28:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
      2c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
      30:	20797265 	rsbscs	r7, r9, r5, ror #4
      34:	202b2b47 	eorcs	r2, fp, r7, asr #22
      38:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
      3c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      44:	61652d65 	cmnvs	r5, r5, ror #26
      48:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      50:	00006564 	andeq	r6, r0, r4, ror #10
      54:	636f6c63 	cmnvs	pc, #25344	; 0x6300
      58:	00632e6b 	rsbeq	r2, r3, fp, ror #28
      5c:	73000000 	movwvc	r0, #0
      60:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
      64:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      68:	0000682e 	andeq	r6, r0, lr, lsr #16
      6c:	74730000 	ldrbtvc	r0, [r3], #-0
      70:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
      74:	0100682e 	tsteq	r0, lr, lsr #16
      78:	6f630000 	svcvs	0x00630000
      7c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
      80:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
      84:	00000000 	andeq	r0, r0, r0
      88:	02050000 	andeq	r0, r5, #0
      8c:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
      90:	21681315 	cmncs	r8, r5, lsl r3
      94:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
      98:	5a763d01 	bpl	1d8f4a4 <__RW_SIZE__+0x1d8ef1c>
      9c:	02001f21 	andeq	r1, r0, #33, 30	; 0x84
      a0:	763d0104 	ldrtvc	r0, [sp], -r4, lsl #2
      a4:	0007029f 	muleq	r7, pc, r2	; <UNPREDICTABLE>
      a8:	00e20101 	rsceq	r0, r2, r1, lsl #2
      ac:	00020000 	andeq	r0, r2, r0
      b0:	00000065 	andeq	r0, r0, r5, rrx
      b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
      b8:	0101000d 	tsteq	r1, sp
      bc:	00000101 	andeq	r0, r0, r1, lsl #2
      c0:	00000100 	andeq	r0, r0, r0, lsl #2
      c4:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
      c8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
      cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      d0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
      d4:	756f535c 	strbvc	r5, [pc, #-860]!	; fffffd80 <MSP_BASE+0xdfffad80>
      d8:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
      dc:	2b472079 	blcs	11c82c8 <__RW_SIZE__+0x11c7d40>
      e0:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
      e4:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
      e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      fc:	6f630000 	svcvs	0x00630000
     100:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     104:	632e336d 	teqvs	lr, #-1275068415	; 0xb4000001
     108:	00000000 	andeq	r0, r0, r0
     10c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     110:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     114:	00000100 	andeq	r0, r0, r0, lsl #2
     118:	02050000 	andeq	r0, r5, #0
     11c:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
     120:	0103bf03 	tsteq	r3, r3, lsl #30
     124:	0c034e15 	stceq	14, cr4, [r3], {21}
     128:	034c1301 	movteq	r1, #49921	; 0xc301
     12c:	4e15010c 	mufmis	f0, f5, #4.0
     130:	13010c03 	movwne	r0, #7171	; 0x1c03
     134:	010a034c 	tsteq	sl, ip, asr #6
     138:	0a033015 	beq	cc194 <__RW_SIZE__+0xcbc0c>
     13c:	0b03132e 	bleq	c4dfc <__RW_SIZE__+0xc4874>
     140:	0330154a 	teqeq	r0, #310378496	; 0x12800000
     144:	03132e0a 	tsteq	r3, #10, 28	; 0xa0
     148:	30154a0b 	andscc	r4, r5, fp, lsl #20
     14c:	132e0a03 	teqne	lr, #12288	; 0x3000
     150:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xfffff4fd
     154:	2e0a0330 	mcrcs	3, 0, r0, cr10, cr0, {1}
     158:	4a0d0313 	bmi	340dac <__RW_SIZE__+0x340824>
     15c:	0b032215 	bleq	c89b8 <__RW_SIZE__+0xc8430>
     160:	03221520 	teqeq	r2, #32, 10	; 0x8000000
     164:	2215200b 	andscs	r2, r5, #11
     168:	15200b03 	strne	r0, [r0, #-2819]!	; 0xfffff4fd
     16c:	2e0b0330 	mcrcs	3, 0, r0, cr11, cr0, {1}
     170:	0b033015 	bleq	cc1cc <__RW_SIZE__+0xcbc44>
     174:	0330152e 	teqeq	r0, #192937984	; 0xb800000
     178:	30152e0b 	andscc	r2, r5, fp, lsl #28
     17c:	152e0c03 	strne	r0, [lr, #-3075]!	; 0xfffff3fd
     180:	200c033e 	andcs	r0, ip, lr, lsr r3
     184:	0c033e15 	stceq	14, cr3, [r3], {21}
     188:	02301520 	eorseq	r1, r0, #32, 10	; 0x8000000
     18c:	01010001 	tsteq	r1, r1
     190:	00000215 	andeq	r0, r0, r5, lsl r2
     194:	00e80002 	rsceq	r0, r8, r2
     198:	01020000 	mrseq	r0, (UNDEF: 2)
     19c:	000d0efb 	strdeq	r0, [sp], -fp
     1a0:	01010101 	tsteq	r1, r1, lsl #2
     1a4:	01000000 	mrseq	r0, (UNDEF: 0)
     1a8:	43010000 	movwmi	r0, #4096	; 0x1000
     1ac:	6f435c3a 	svcvs	0x00435c3a
     1b0:	6f536564 	svcvs	0x00536564
     1b4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     1b8:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
     1bc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     1c0:	20797265 	rsbscs	r7, r9, r5, ror #4
     1c4:	202b2b47 	eorcs	r2, fp, r7, asr #22
     1c8:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
     1cc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     1d0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     1d4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     1d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     1dc:	61652d65 	cmnvs	r5, r5, ror #26
     1e0:	342f6962 	strtcc	r6, [pc], #-2402	; 1e8 <__ZI_SIZE__+0x178>
     1e4:	312e382e 	teqcc	lr, lr, lsr #16
     1e8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     1ec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     1f0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
     1f4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     1f8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     1fc:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     200:	756f535c 	strbvc	r5, [pc, #-860]!	; fffffeac <MSP_BASE+0xdfffaeac>
     204:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
     208:	2b472079 	blcs	11c83f4 <__RW_SIZE__+0x11c7e6c>
     20c:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
     210:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
     214:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     218:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     21c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     220:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     224:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     228:	72670000 	rsbvc	r0, r7, #0
     22c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     230:	632e7363 	teqvs	lr, #-1946157055	; 0x8c000001
     234:	00000000 	andeq	r0, r0, r0
     238:	61647473 	smcvs	18243	; 0x4743
     23c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
     240:	00000100 	andeq	r0, r0, r0, lsl #2
     244:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     248:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
     24c:	0000682e 	andeq	r6, r0, lr, lsr #16
     250:	4e450000 	cdpmi	0, 4, cr0, cr5, cr0, {0}
     254:	31583847 	cmpcc	r8, r7, asr #16
     258:	00482e36 	subeq	r2, r8, r6, lsr lr
     25c:	6c000000 	stcvs	0, cr0, [r0], {-0}
     260:	682e6463 	stmdavs	lr!, {r0, r1, r5, r6, sl, sp, lr}
     264:	00000000 	andeq	r0, r0, r0
     268:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     26c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     270:	3c000002 	stccc	0, cr0, [r0], {2}
     274:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
     278:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
     27c:	0000003e 	andeq	r0, r0, lr, lsr r0
     280:	05000000 	streq	r0, [r0, #-0]
     284:	0032f802 	eorseq	pc, r2, r2, lsl #16
     288:	010d0308 	tsteq	sp, r8, lsl #6
     28c:	32204632 	eorcc	r4, r0, #52428800	; 0x3200000
     290:	08110346 	ldmdaeq	r1, {r1, r2, r6, r8, r9}
     294:	03bf6b58 			; <UNDEFINED> instruction: 0x03bf6b58
     298:	0a033c76 	beq	cf478 <__RW_SIZE__+0xceef0>
     29c:	4a170320 	bmi	5c0f24 <__RW_SIZE__+0x5c099c>
     2a0:	032e6b03 	teqeq	lr, #3072	; 0xc00
     2a4:	25252e74 	strcs	r2, [r5, #-3700]!	; 0xfffff18c
     2a8:	01040200 	mrseq	r0, R12_usr
     2ac:	e477033a 	ldrbt	r0, [r7], #-826	; 0xfffffcc6
     2b0:	0341412f 	movteq	r4, #4399	; 0x112f
     2b4:	033e6670 	teqeq	lr, #112, 12	; 0x7000000
     2b8:	412f4a18 	teqmi	pc, r8, lsl sl	; <UNPREDICTABLE>
     2bc:	ad593e41 	ldclge	14, cr3, [r9, #-260]	; 0xfffffefc
     2c0:	90560359 	subsls	r0, r6, r9, asr r3
     2c4:	58310372 	ldmdapl	r1!, {r1, r4, r5, r6, r8, r9}
     2c8:	01040200 	mrseq	r0, R12_usr
     2cc:	004a6b03 	subeq	r6, sl, r3, lsl #22
     2d0:	03010402 	movweq	r0, #5122	; 0x1402
     2d4:	5977826b 	ldmdbpl	r7!, {r0, r1, r3, r5, r6, r9, pc}^
     2d8:	59741403 	ldmdbpl	r4!, {r0, r1, sl, ip}^
     2dc:	ac6b0394 	stclge	3, cr0, [fp], #-592	; 0xfffffdb0
     2e0:	597f2f89 	ldmdbpl	pc!, {r0, r3, r7, r8, r9, sl, fp, sp}^	; <UNPREDICTABLE>
     2e4:	581e03ad 	ldmdapl	lr, {r0, r2, r3, r5, r7, r8, r9}
     2e8:	311d313c 	tstcc	sp, ip, lsr r1
     2ec:	37e45603 	strbcc	r5, [r4, r3, lsl #12]!
     2f0:	034a0c03 	movteq	r0, #44035	; 0xac03
     2f4:	33292e79 	teqcc	r9, #1936	; 0x790
     2f8:	034a1c03 	movteq	r1, #44035	; 0xac03
     2fc:	76032e69 	strvc	r2, [r3], -r9, ror #28
     300:	9e0a032e 	cdpls	3, 0, cr0, cr10, cr14, {1}
     304:	033c6903 	teqeq	ip, #49152	; 0xc000
     308:	039e0815 	orrseq	r0, lr, #1376256	; 0x150000
     30c:	412fe477 	teqmi	pc, r7, ror r4	; <UNPREDICTABLE>
     310:	6670034f 	ldrbtvs	r0, [r0], -pc, asr #6
     314:	4a18033e 	bmi	601014 <__RW_SIZE__+0x600a8c>
     318:	3e41412f 	dvfccsp	f4, f1, #10.0
     31c:	0359ad59 	cmpeq	r9, #5696	; 0x1640
     320:	03729056 	cmneq	r2, #86	; 0x56
     324:	1c245837 	stcne	8, cr5, [r4], #-220	; 0xffffff24
     328:	03343840 	teqeq	r4, #64, 16	; 0x400000
     32c:	6b034a5f 	blvs	d2cb0 <__RW_SIZE__+0xd2728>
     330:	03597782 	cmpeq	r9, #34078720	; 0x2080000
     334:	94597414 	ldrbls	r7, [r9], #-1044	; 0xfffffbec
     338:	89ac6b03 	stmibhi	ip!, {r0, r1, r8, r9, fp, sp, lr}
     33c:	ad597f2f 	ldclge	15, cr7, [r9, #-188]	; 0xffffff44
     340:	404a2a03 	submi	r2, sl, r3, lsl #20
     344:	1c3b411c 	ldfnes	f4, [fp], #-112	; 0xffffff90
     348:	2e72034f 	cdpcs	3, 7, cr0, cr2, cr15, {2}
     34c:	37d65603 	ldrbcc	r5, [r6, r3, lsl #12]
     350:	03582103 	cmpeq	r8, #-1073741824	; 0xc0000000
     354:	1c037464 	cfstrsne	mvf7, [r3], {100}	; 0x64
     358:	2e69032e 	cdpcs	3, 6, cr0, cr9, cr14, {1}
     35c:	03587603 	cmpeq	r8, #3145728	; 0x300000
     360:	7903740c 	stmdbvc	r3, {r2, r3, sl, ip, sp, lr}
     364:	6903252e 	stmdbvs	r3, {r1, r2, r3, r5, r8, sl, sp}
     368:	08150358 	ldmdaeq	r5, {r3, r4, r6, r8, r9}
     36c:	f27703ac 	vcgt.s<illegal width 64>	d16, d23, d28
     370:	034f412f 	movteq	r4, #61743	; 0xf12f
     374:	034c7470 	movteq	r7, #50288	; 0xc470
     378:	412f3c18 	teqmi	pc, r8, lsl ip	; <UNPREDICTABLE>
     37c:	ad593e41 	ldclge	14, cr3, [r9, #-260]	; 0xfffffefc
     380:	9e560359 	mrcls	3, 2, r0, cr6, cr9, {2}
     384:	58370380 	ldmdapl	r7!, {r7, r8, r9}
     388:	38401c24 	stmdacc	r0, {r2, r5, sl, fp, ip}^
     38c:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
     390:	6b034a54 	blvs	d2ce8 <__RW_SIZE__+0xd2760>
     394:	03597782 	cmpeq	r9, #34078720	; 0x2080000
     398:	a2598214 	subsge	r8, r9, #20, 4	; 0x40000001
     39c:	89ac6b03 	stmibhi	ip!, {r0, r1, r8, r9, fp, sp, lr}
     3a0:	ad597f2f 	ldclge	15, cr7, [r9, #-188]	; 0xffffff44
     3a4:	01000402 	tsteq	r0, r2, lsl #8
     3a8:	0001f801 	andeq	pc, r1, r1, lsl #16
     3ac:	81000200 	mrshi	r0, R8_usr
     3b0:	02000000 	andeq	r0, r0, #0
     3b4:	0d0efb01 	vstreq	d15, [lr, #-4]
     3b8:	01010100 	mrseq	r0, (UNDEF: 17)
     3bc:	00000001 	andeq	r0, r0, r1
     3c0:	01000001 	tsteq	r0, r1
     3c4:	435c3a43 	cmpmi	ip, #274432	; 0x43000
     3c8:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
     3cc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3d0:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
     3d4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3d8:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     3dc:	2b2b4720 	blcs	ad2064 <__RW_SIZE__+0xad1adc>
     3e0:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
     3e4:	72612f65 	rsbvc	r2, r1, #404	; 0x194
     3e8:	6f6e2d6d 	svcvs	0x006e2d6d
     3ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     3f0:	2f696261 	svccs	0x00696261
     3f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     3f8:	00656475 	rsbeq	r6, r5, r5, ror r4
     3fc:	676f6a00 	strbvs	r6, [pc, -r0, lsl #20]!
     400:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
     404:	0000632e 	andeq	r6, r0, lr, lsr #6
     408:	6f630000 	svcvs	0x00630000
     40c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     410:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
     414:	00000000 	andeq	r0, r0, r0
     418:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     41c:	30316632 	eorscc	r6, r1, r2, lsr r6
     420:	00682e78 	rsbeq	r2, r8, r8, ror lr
     424:	73000000 	movwvc	r0, #0
     428:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     42c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     430:	00000001 	andeq	r0, r0, r1
     434:	78020500 	stmdavc	r2, {r8, sl}
     438:	03080039 	movweq	r0, #32825	; 0x8039
     43c:	5b130109 	blpl	4c0868 <__RW_SIZE__+0x4c02e0>
     440:	2c223d1d 	stccs	13, cr3, [r2], #-116	; 0xffffff8c
     444:	5a2c223e 	bpl	b08d44 <__RW_SIZE__+0xb087bc>
     448:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
     44c:	3e292559 	mcrcc	5, 1, r2, cr9, cr9, {2}
     450:	03674c83 	cmneq	r7, #33536	; 0x8300
     454:	7803581a 	stmdavc	r3, {r1, r3, r4, fp, ip, lr}
     458:	302c3020 	eorcc	r3, ip, r0, lsr #32
     45c:	1f21212c 	svcne	0x0021212c
     460:	2f2f3a21 	svccs	0x002f3a21
     464:	3a2f2f1e 	bcc	bcc0e4 <__RW_SIZE__+0xbcbb5c>
     468:	211f2121 	tstcs	pc, r1, lsr #2
     46c:	1e2f2f3a 	mcrne	15, 1, r2, cr15, cr10, {1}
     470:	0f032f2f 	svceq	0x00032f2f
     474:	0c032c20 	stceq	12, cr2, [r3], {32}
     478:	30153f2e 	andscc	r3, r5, lr, lsr #30
     47c:	212c302c 	teqcs	ip, ip, lsr #32
     480:	3a211f21 	bcc	84810c <__RW_SIZE__+0x847b84>
     484:	2f2d1f30 	svccs	0x002d1f30
     488:	79033131 	stmdbvc	r3, {r0, r4, r5, r8, ip, sp}
     48c:	302c3020 	eorcc	r3, ip, r0, lsr #32
     490:	01040200 	mrseq	r0, R12_usr
     494:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     498:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
     49c:	00210104 	eoreq	r0, r1, r4, lsl #2
     4a0:	1f010402 	svcne	0x00010402
     4a4:	01040200 	mrseq	r0, R12_usr
     4a8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
     4ac:	02003a01 	andeq	r3, r0, #4096	; 0x1000
     4b0:	002f0104 	eoreq	r0, pc, r4, lsl #2
     4b4:	2f010402 	svccs	0x00010402
     4b8:	01040200 	mrseq	r0, R12_usr
     4bc:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
     4c0:	02002f01 	andeq	r2, r0, #1, 30
     4c4:	30360104 	eorscc	r0, r6, r4, lsl #2
     4c8:	2072033f 	rsbscs	r0, r2, pc, lsr r3
     4cc:	00302c30 	eorseq	r2, r0, r0, lsr ip
     4d0:	2c010402 	cfstrscs	mvf0, [r1], {2}
     4d4:	01040200 	mrseq	r0, R12_usr
     4d8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
     4dc:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
     4e0:	001f0104 	andseq	r0, pc, r4, lsl #2
     4e4:	21010402 	tstcs	r1, r2, lsl #8
     4e8:	01040200 	mrseq	r0, R12_usr
     4ec:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
     4f0:	02002f01 	andeq	r2, r0, #1, 30
     4f4:	002f0104 	eoreq	r0, pc, r4, lsl #2
     4f8:	1e010402 	cdpne	4, 0, cr0, cr1, cr2, {0}
     4fc:	01040200 	mrseq	r0, R12_usr
     500:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     504:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
     508:	04213f2f 	strteq	r3, [r1], #-3887	; 0xfffff0d1
     50c:	0b820302 	bleq	fe08111c <MSP_BASE+0xde07c11c>
     510:	03010420 	movweq	r0, #5152	; 0x1420
     514:	049e759f 	ldreq	r7, [lr], #1439	; 0x59f
     518:	0ae10302 	beq	ff841128 <MSP_BASE+0xdf83c128>
     51c:	0301042e 	movweq	r0, #5166	; 0x142e
     520:	0420759f 	strteq	r7, [r0], #-1439	; 0xfffffa61
     524:	0ae10302 	beq	ff841134 <MSP_BASE+0xdf83c134>
     528:	0301042e 	movweq	r0, #5166	; 0x142e
     52c:	4b2e759f 	blmi	b9dbb0 <__RW_SIZE__+0xb9d628>
     530:	5d034c4b 	stcpl	12, cr4, [r3, #-300]	; 0xfffffed4
     534:	3d1c5c2e 	ldccc	12, cr5, [ip, #-184]	; 0xffffff48
     538:	263d2b23 	ldrtcs	r2, [sp], -r3, lsr #22
     53c:	3e2e7a03 	vmulcc.f32	s14, s28, s6
     540:	04592a24 	ldrbeq	r2, [r9], #-2596	; 0xfffff5dc
     544:	0bb00302 	bleq	fec01154 <MSP_BASE+0xdebfc154>
     548:	03010420 	movweq	r0, #5152	; 0x1420
     54c:	912e74d0 	ldrdls	r7, [lr, -r0]!
     550:	af030204 	svcge	0x00030204
     554:	0104200b 	tsteq	r4, fp
     558:	2e74d103 	expcss	f5, f3
     55c:	0302043e 	movweq	r0, #9278	; 0x243e
     560:	04200bad 	strteq	r0, [r0], #-2989	; 0xfffff453
     564:	74d30301 	ldrbvc	r0, [r3], #769	; 0x301
     568:	2b233d2e 	blcs	8cfa28 <__RW_SIZE__+0x8cf4a0>
     56c:	0302043d 	movweq	r0, #9277	; 0x243d
     570:	04200bab 	strteq	r0, [r0], #-2987	; 0xfffff455
     574:	74d50301 	ldrbvc	r0, [r5], #769	; 0x301
     578:	0302042e 	movweq	r0, #9262	; 0x242e
     57c:	042e0bab 	strteq	r0, [lr], #-2987	; 0xfffff455
     580:	74d50301 	ldrbvc	r0, [r5], #769	; 0x301
     584:	0204222e 	andeq	r2, r4, #-536870910	; 0xe0000002
     588:	200ba903 	andcs	sl, fp, r3, lsl #18
     58c:	dd030104 	stfles	f0, [r3, #-16]
     590:	4b4b6674 	blmi	12d9f68 <__RW_SIZE__+0x12d99e0>
     594:	ec030204 	sfm	f0, 4, [r3], {4}
     598:	01044a0a 	tsteq	r4, sl, lsl #20
     59c:	3c75a303 	ldclcc	3, cr10, [r5], #-12
     5a0:	01000202 	tsteq	r0, r2, lsl #4
     5a4:	00010101 	andeq	r0, r1, r1, lsl #2
     5a8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     5ac:	02000000 	andeq	r0, r0, #0
     5b0:	0d0efb01 	vstreq	d15, [lr, #-4]
     5b4:	01010100 	mrseq	r0, (UNDEF: 17)
     5b8:	00000001 	andeq	r0, r0, r1
     5bc:	01000001 	tsteq	r0, r1
     5c0:	435c3a43 	cmpmi	ip, #274432	; 0x43000
     5c4:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
     5c8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5cc:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
     5d0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     5d4:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     5d8:	2b2b4720 	blcs	ad2260 <__RW_SIZE__+0xad1cd8>
     5dc:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
     5e0:	72612f65 	rsbvc	r2, r1, #404	; 0x194
     5e4:	6f6e2d6d 	svcvs	0x006e2d6d
     5e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     5ec:	2f696261 	svccs	0x00696261
     5f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     5f4:	00656475 	rsbeq	r6, r5, r5, ror r4
     5f8:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
     5fc:	0000632e 	andeq	r6, r0, lr, lsr #6
     600:	6f630000 	svcvs	0x00630000
     604:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     608:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
     60c:	00000000 	andeq	r0, r0, r0
     610:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     614:	30316632 	eorscc	r6, r1, r2, lsr r6
     618:	00682e78 	rsbeq	r2, r8, r8, ror lr
     61c:	73000000 	movwvc	r0, #0
     620:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     624:	00682e74 	rsbeq	r2, r8, r4, ror lr
     628:	00000001 	andeq	r0, r0, r1
     62c:	00020500 	andeq	r0, r2, r0, lsl #10
     630:	1508003c 	strne	r0, [r8, #-60]	; 0xffffffc4
     634:	3d2d5913 	stccc	9, cr5, [sp, #-76]!	; 0xffffffb4
     638:	4d6713a2 	stclmi	3, cr1, [r7, #-648]!	; 0xfffffd78
     63c:	0402000e 	streq	r0, [r2], #-14
     640:	004a0601 	subeq	r0, sl, r1, lsl #12
     644:	06010402 	streq	r0, [r1], -r2, lsl #8
     648:	03233d33 	teqeq	r3, #3264	; 0xcc0
     64c:	02000177 	andeq	r0, r0, #-1073741795	; 0xc000001d
     650:	4a060104 	bmi	180a68 <__RW_SIZE__+0x1804e0>
     654:	01040200 	mrseq	r0, R12_usr
     658:	4a0f0306 	bmi	3c1278 <__RW_SIZE__+0x3c0cf0>
     65c:	04213131 	strteq	r3, [r1], #-305	; 0xfffffecf
     660:	0bcc0302 	bleq	ff301270 <MSP_BASE+0xdf2fc270>
     664:	03010420 	movweq	r0, #5152	; 0x1420
     668:	038274c7 	orreq	r7, r2, #-956301312	; 0xc7000000
     66c:	2b5b3c6f 	blcs	16cf830 <__RW_SIZE__+0x16cf2a8>
     670:	3e2c223d 	mcrcc	2, 1, r2, cr12, cr13, {1}
     674:	3d591f21 	ldclcc	15, cr1, [r9, #-132]	; 0xffffff7c
     678:	1d3f592d 	ldcne	9, cr5, [pc, #-180]!	; 5cc <__RW_SIZE__+0x44>
     67c:	0302043d 	movweq	r0, #9277	; 0x243d
     680:	04200bec 	strteq	r0, [r0], #-3052	; 0xfffff414
     684:	74940301 	ldrvc	r0, [r4], #769	; 0x301
     688:	0302042e 	movweq	r0, #9262	; 0x242e
     68c:	04200bec 	strteq	r0, [r0], #-3052	; 0xfffff414
     690:	74940301 	ldrvc	r0, [r4], #769	; 0x301
     694:	0204224a 	andeq	r2, r4, #-1610612732	; 0xa0000004
     698:	200bea03 	andcs	lr, fp, r3, lsl #20
     69c:	042e4b03 	strteq	r4, [lr], #-2819	; 0xfffff4fd
     6a0:	74d40301 	ldrbvc	r0, [r4], #769	; 0x301
     6a4:	00030220 	andeq	r0, r3, r0, lsr #4
     6a8:	12270101 	eorne	r0, r7, #1073741824	; 0x40000000
     6ac:	00020000 	andeq	r0, r2, r0
     6b0:	0000007d 	andeq	r0, r0, sp, ror r0
     6b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6b8:	0101000d 	tsteq	r1, sp
     6bc:	00000101 	andeq	r0, r0, r1, lsl #2
     6c0:	00000100 	andeq	r0, r0, r0, lsl #2
     6c4:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
     6c8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     6cc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     6d0:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
     6d4:	756f535c 	strbvc	r5, [pc, #-860]!	; 380 <__ZI_SIZE__+0x310>
     6d8:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
     6dc:	2b472079 	blcs	11c88c8 <__RW_SIZE__+0x11c8340>
     6e0:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
     6e4:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
     6e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     6ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     6f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     6f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     6f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     6fc:	636c0000 	cmnvs	ip, #0
     700:	00632e64 	rsbeq	r2, r3, r4, ror #28
     704:	73000000 	movwvc	r0, #0
     708:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     70c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     710:	73000001 	movwvc	r0, #1
     714:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     718:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     71c:	0000682e 	andeq	r6, r0, lr, lsr #16
     720:	6f630000 	svcvs	0x00630000
     724:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     728:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
     72c:	00000000 	andeq	r0, r0, r0
     730:	02050000 	andeq	r0, r5, #0
     734:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
     738:	0100ed03 	tsteq	r0, r3, lsl #26
     73c:	592b5b13 	stmdbpl	fp!, {r0, r1, r4, r8, r9, fp, ip, lr}
     740:	675a2c22 	ldrbvs	r2, [sl, -r2, lsr #24]
     744:	202b0386 	eorcs	r0, fp, r6, lsl #7
     748:	033d2d59 	teqeq	sp, #5696	; 0x1640
     74c:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     750:	034a00e4 	movteq	r0, #41188	; 0xa0e4
     754:	1f3c7f9d 	svcne	0x003c7f9d
     758:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     75c:	035eac00 	cmpeq	lr, #0, 24
     760:	21412e7a 	hvccs	4842	; 0x12ea
     764:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     768:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     76c:	95032000 	strls	r2, [r3, #-0]
     770:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     774:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     778:	824d0374 	subhi	r0, sp, #116, 6	; 0xd0000001
     77c:	2d59214d 	ldfcse	f2, [r9, #-308]	; 0xfffffecc
     780:	3c40033d 	mcrrcc	3, 3, r0, r0, cr13
     784:	2e00c003 	cdpcs	0, 0, cr12, cr0, cr3, {0}
     788:	032e4003 	teqeq	lr, #3
     78c:	1f2e00c1 	svcne	0x002e00c1
     790:	1f204103 	svcne	0x00204103
     794:	2faa3d21 	svccs	0x00aa3d21
     798:	00c1033d 	sbceq	r0, r1, sp, lsr r3
     79c:	16038374 			; <UNDEFINED> instruction: 0x16038374
     7a0:	0357134a 	cmpeq	r7, #671088641	; 0x28000001
     7a4:	3a032047 	bcc	c88c8 <__RW_SIZE__+0xc8340>
     7a8:	3c460320 	mcrrcc	3, 2, r0, r6, cr0
     7ac:	03d63c03 	bicseq	r3, r6, #768	; 0x300
     7b0:	3c035844 	stccc	8, cr5, [r3], {68}	; 0x44
     7b4:	3c440320 	mcrrcc	3, 2, r0, r4, cr0
     7b8:	3fd63e03 	svccc	0x00d63e03
     7bc:	3d2d5913 	stccc	9, cr5, [sp, #-76]!	; 0xffffffb4
     7c0:	3c7f9c03 	ldclcc	12, cr9, [pc], #-12	; 7bc <__RW_SIZE__+0x234>
     7c4:	4a00e403 	bmi	397d8 <__RW_SIZE__+0x39250>
     7c8:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 7c4 <__RW_SIZE__+0x23c>
     7cc:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     7d0:	a27400e4 	rsbsge	r0, r4, #228	; 0xe4
     7d4:	3d2d5913 	stccc	9, cr5, [sp, #-76]!	; 0xffffffb4
     7d8:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 7d4 <__RW_SIZE__+0x24c>
     7dc:	4a00ec03 	bmi	3b7f0 <__RW_SIZE__+0x3b268>
     7e0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 7dc <__RW_SIZE__+0x254>
     7e4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     7e8:	a27400ec 	rsbsge	r0, r4, #236	; 0xec
     7ec:	2f212d13 	svccs	0x00212d13
     7f0:	211d2121 	tstcs	sp, r1, lsr #2
     7f4:	03222121 	teqeq	r2, #1073741832	; 0x40000008
     7f8:	032f9017 	teqeq	pc, #23
     7fc:	2d032053 	stccs	0, cr2, [r3, #-332]	; 0xfffffeb4
     800:	54031f2e 	strpl	r1, [r3], #-3886	; 0xfffff0d2
     804:	3d2d3d20 	stccc	13, cr3, [sp, #-128]!	; 0xffffff80
     808:	3c7f9c03 	ldclcc	12, cr9, [pc], #-12	; 804 <__RW_SIZE__+0x27c>
     80c:	4a00e403 	bmi	39820 <__RW_SIZE__+0x39298>
     810:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
     814:	2000e403 	andcs	lr, r0, r3, lsl #8
     818:	207f9d03 	rsbscs	r9, pc, r3, lsl #26
     81c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     820:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
     824:	412e7a03 	teqmi	lr, r3, lsl #20
     828:	033d2d21 	teqeq	sp, #2112	; 0x840
     82c:	03207f94 	teqeq	r0, #148, 30	; 0x250
     830:	032000ec 	teqeq	r0, #236	; 0xec
     834:	1f3c7f95 	svcne	0x003c7f95
     838:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     83c:	28037400 	stmdacs	r3, {sl, ip, sp, lr}
     840:	3c650382 	stclcc	3, cr0, [r5], #-520	; 0xfffffdf8
     844:	2e670321 	cdpcs	3, 6, cr0, cr7, cr1, {1}
     848:	1f2e1903 	svcne	0x002e1903
     84c:	3d206803 	stccc	8, cr6, [r0, #-12]!
     850:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     854:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     858:	9c034a00 	stcls	10, cr4, [r3], {-0}
     85c:	e4032e7f 	str	r2, [r3], #-3711	; 0xfffff181
     860:	9d032000 	stcls	0, cr2, [r3, #-0]
     864:	211f207f 	tstcs	pc, pc, ror r0	; <UNPREDICTABLE>
     868:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     86c:	7a035eac 	bvc	d8324 <__RW_SIZE__+0xd7d9c>
     870:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     874:	7f94033d 	svcvc	0x0094033d
     878:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     87c:	7f950320 	svcvc	0x00950320
     880:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     884:	82018303 	andhi	r8, r1, #201326592	; 0xc000000
     888:	2e5d0321 	cdpcs	3, 5, cr0, cr13, cr1, {1}
     88c:	1f2e2303 	svcne	0x002e2303
     890:	3d205e03 	stccc	14, cr5, [r0, #-12]!
     894:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     898:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     89c:	9c034a00 	stcls	10, cr4, [r3], {-0}
     8a0:	e4032e7f 	str	r2, [r3], #-3711	; 0xfffff181
     8a4:	9d032000 	stcls	0, cr2, [r3, #-0]
     8a8:	211f207f 	tstcs	pc, pc, ror r0	; <UNPREDICTABLE>
     8ac:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     8b0:	7a035eac 	bvc	d8368 <__RW_SIZE__+0xd7de0>
     8b4:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     8b8:	7f94033d 	svcvc	0x0094033d
     8bc:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     8c0:	7f950320 	svcvc	0x00950320
     8c4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     8c8:	8200fe03 	andhi	pc, r0, #3, 28	; 0x30
     8cc:	2062032f 	rsbcs	r0, r2, pc, lsr #6
     8d0:	1f2e1e03 	svcne	0x002e1e03
     8d4:	3d206303 	stccc	3, cr6, [r0, #-12]!
     8d8:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     8dc:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     8e0:	9c034a00 	stcls	10, cr4, [r3], {-0}
     8e4:	e4032e7f 	str	r2, [r3], #-3711	; 0xfffff181
     8e8:	9d032000 	stcls	0, cr2, [r3, #-0]
     8ec:	211f207f 	tstcs	pc, pc, ror r0	; <UNPREDICTABLE>
     8f0:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     8f4:	7a035eac 	bvc	d83ac <__RW_SIZE__+0xd7e24>
     8f8:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     8fc:	7f94033d 	svcvc	0x0094033d
     900:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     904:	7f950320 	svcvc	0x00950320
     908:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     90c:	82018803 	andhi	r8, r1, #196608	; 0x30000
     910:	2058032f 	subscs	r0, r8, pc, lsr #6
     914:	1f2e2803 	svcne	0x002e2803
     918:	3d205903 	stccc	9, cr5, [r0, #-12]!
     91c:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     920:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     924:	9c034a00 	stcls	10, cr4, [r3], {-0}
     928:	e4032e7f 	str	r2, [r3], #-3711	; 0xfffff181
     92c:	9d032000 	stcls	0, cr2, [r3, #-0]
     930:	211f207f 	tstcs	pc, pc, ror r0	; <UNPREDICTABLE>
     934:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     938:	7a035eac 	bvc	d83f0 <__RW_SIZE__+0xd7e68>
     93c:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     940:	7f94033d 	svcvc	0x0094033d
     944:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     948:	7f950320 	svcvc	0x00950320
     94c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     950:	90019703 	andls	r9, r1, r3, lsl #14
     954:	03014a03 	movweq	r4, #6659	; 0x1a03
     958:	49035837 	stmdbmi	r3, {r0, r1, r2, r4, r5, fp, ip, lr}
     95c:	2e37032e 	cdpcs	3, 3, cr0, cr7, cr14, {1}
     960:	032e4a03 	teqeq	lr, #12288	; 0x3000
     964:	4a032e36 	bmi	cc244 <__RW_SIZE__+0xcbcbc>
     968:	03212d20 	teqeq	r1, #32, 26	; 0x800
     96c:	03207f9c 	teqeq	r0, #156, 30	; 0x270
     970:	035800e4 	cmpeq	r8, #228	; 0xe4
     974:	1f3c7f9d 	svcne	0x003c7f9d
     978:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     97c:	38037400 	stmdacc	r3, {sl, ip, sp, lr}
     980:	2045039e 	umaalcs	r0, r5, lr, r3
     984:	03583c03 	cmpeq	r8, #768	; 0x300
     988:	3c032e44 	stccc	14, cr2, [r3], {68}	; 0x44
     98c:	2e45032e 	cdpcs	3, 4, cr0, cr5, cr14, {1}
     990:	032e3b03 	teqeq	lr, #3072	; 0xc00
     994:	2f2d2045 	svccs	0x002d2045
     998:	2e7f9c03 	cdpcs	12, 7, cr9, cr15, cr3, {0}
     99c:	5800e403 	stmdapl	r0, {r0, r1, sl, sp, lr, pc}
     9a0:	4a7f9d03 	bmi	1fe7db4 <__RW_SIZE__+0x1fe782c>
     9a4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     9a8:	6cac00e4 	stcvs	0, cr0, [ip], #912	; 0x390
     9ac:	4f2e7a03 	svcmi	0x002e7a03
     9b0:	034b2d2f 	movteq	r2, #48431	; 0xbd2f
     9b4:	4c032034 	stcmi	0, cr2, [r3], {52}	; 0x34
     9b8:	7f95032e 	svcvc	0x0095032e
     9bc:	3d2f1f3c 	stccc	15, cr1, [pc, #-240]!	; 8d4 <__RW_SIZE__+0x34c>
     9c0:	ac00ec03 	stcge	12, cr14, [r0], {3}
     9c4:	2f473064 	svccs	0x00473064
     9c8:	94034b2d 	strls	r4, [r3], #-2861	; 0xfffff4d3
     9cc:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     9d0:	95032000 	strls	r2, [r3, #-0]
     9d4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     9d8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     9dc:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     9e0:	033d2d21 	teqeq	sp, #2112	; 0x840
     9e4:	4a032036 	bmi	c8ac4 <__RW_SIZE__+0xc853c>
     9e8:	7f950320 	svcvc	0x00950320
     9ec:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     9f0:	ac00ec03 	stcge	12, cr14, [r0], {3}
     9f4:	21393056 	teqcs	r9, r6, asr r0
     9f8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     9fc:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     a00:	95032000 	strls	r2, [r3, #-0]
     a04:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     a08:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     a0c:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
     a10:	032e0a03 	teqeq	lr, #12288	; 0x3000
     a14:	c2033c75 	andgt	r3, r3, #29952	; 0x7500
     a18:	be032000 	cdplt	0, 0, cr2, cr3, cr0, {0}
     a1c:	033d207f 	teqeq	sp, #127	; 0x7f
     a20:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     a24:	032000e4 	teqeq	r0, #228	; 0xe4
     a28:	1f3c7f9d 	svcne	0x003c7f9d
     a2c:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     a30:	035eac00 	cmpeq	lr, #0, 24
     a34:	21412e7a 	hvccs	4842	; 0x12ea
     a38:	3a033d2d 	bcc	cfef4 <__RW_SIZE__+0xcf96c>
     a3c:	20460320 	subcs	r0, r6, r0, lsr #6
     a40:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; a3c <__RW_SIZE__+0x4b4>
     a44:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     a48:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     a4c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     a50:	7f94033d 	svcvc	0x0094033d
     a54:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     a58:	7f950320 	svcvc	0x00950320
     a5c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     a60:	ac00ec03 	stcge	12, cr14, [r0], {3}
     a64:	21393056 	teqcs	r9, r6, asr r0
     a68:	3c033d2d 	stccc	13, cr3, [r3], {45}	; 0x2d
     a6c:	20440320 	subcs	r0, r4, r0, lsr #6
     a70:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; a6c <__RW_SIZE__+0x4e4>
     a74:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     a78:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     a7c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     a80:	7f94033d 	svcvc	0x0094033d
     a84:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     a88:	7f950320 	svcvc	0x00950320
     a8c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     a90:	ac00ec03 	stcge	12, cr14, [r0], {3}
     a94:	03587603 	cmpeq	r8, #3145728	; 0x300000
     a98:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     a9c:	2037033c 	eorscs	r0, r7, ip, lsr r3
     aa0:	3d204903 	stccc	9, cr4, [r0, #-12]!
     aa4:	3c7f9c03 	ldclcc	12, cr9, [pc], #-12	; aa0 <__RW_SIZE__+0x518>
     aa8:	2000e403 	andcs	lr, r0, r3, lsl #8
     aac:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; aa8 <__RW_SIZE__+0x520>
     ab0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     ab4:	037400e4 	cmneq	r4, #228	; 0xe4
     ab8:	038200c6 	orreq	r0, r2, #198	; 0xc6
     abc:	312e7f9b 			; <UNDEFINED> instruction: 0x312e7f9b
     ac0:	2c1f212d 	ldfcss	f2, [pc], {45}	; 0x2d
     ac4:	71033033 	tstvc	r3, r3, lsr r0
     ac8:	40032f2e 	andmi	r2, r3, lr, lsr #30
     acc:	2e3f032e 	cdpcs	3, 3, cr0, cr15, cr14, {1}
     ad0:	2e40032f 	cdpcs	3, 4, cr0, cr0, cr15, {1}
     ad4:	6600ce03 	strvs	ip, [r0], -r3, lsl #28
     ad8:	01040200 	mrseq	r0, R12_usr
     adc:	06200630 			; <UNDEFINED> instruction: 0x06200630
     ae0:	4b206f03 	blmi	81c6f4 <__RW_SIZE__+0x81c16c>
     ae4:	2f4a4003 	svccs	0x004a4003
     ae8:	3d2f723d 	sfmcc	f7, 4, [pc, #-244]!	; 9fc <__RW_SIZE__+0x474>
     aec:	3c00c103 	stfccd	f4, [r0], {3}
     af0:	03200d03 	teqeq	r0, #3, 26	; 0xc0
     af4:	0d032e73 	stceq	14, cr2, [r3, #-460]	; 0xfffffe34
     af8:	2073032e 	rsbscs	r0, r3, lr, lsr #6
     afc:	1e200d03 	cdpne	13, 2, cr0, cr0, cr3, {0}
     b00:	032dbb6e 	teqeq	sp, #112640	; 0x1b800
     b04:	032e00d9 	teqeq	lr, #217	; 0xd9
     b08:	03207fb4 	teqeq	r0, #180, 30	; 0x2d0
     b0c:	4403583c 	strmi	r5, [r3], #-2108	; 0xfffff7c4
     b10:	2e3c032e 	cdpcs	3, 3, cr0, cr12, cr14, {1}
     b14:	032e4503 	teqeq	lr, #12582912	; 0xc00000
     b18:	45032e3b 	strmi	r2, [r3, #-3643]	; 0xfffff1c5
     b1c:	03212d20 	teqeq	r1, #32, 26	; 0x800
     b20:	03207f9c 	teqeq	r0, #156, 30	; 0x270
     b24:	035800e4 	cmpeq	r8, #228	; 0xe4
     b28:	1f3c7f9d 	svcne	0x003c7f9d
     b2c:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     b30:	035eac00 	cmpeq	lr, #0, 24
     b34:	21412e7a 	hvccs	4842	; 0x12ea
     b38:	34033d2d 	strcc	r3, [r3], #-3373	; 0xfffff2d3
     b3c:	204c0320 	subcs	r0, ip, r0, lsr #6
     b40:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; b3c <__RW_SIZE__+0x5b4>
     b44:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     b48:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     b4c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     b50:	7f94033d 	svcvc	0x0094033d
     b54:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     b58:	7f950320 	svcvc	0x00950320
     b5c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     b60:	ac00ec03 	stcge	12, cr14, [r0], {3}
     b64:	21393056 	teqcs	r9, r6, asr r0
     b68:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
     b6c:	eb03207f 	bl	c8d70 <__RW_SIZE__+0xc87e8>
     b70:	94032000 	strls	r2, [r3], #-0
     b74:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
     b78:	ac00ec03 	stcge	12, cr14, [r0], {3}
     b7c:	21393056 	teqcs	r9, r6, asr r0
     b80:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
     b84:	eb03207f 	bl	c8d88 <__RW_SIZE__+0xc8800>
     b88:	94032000 	strls	r2, [r3], #-0
     b8c:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
     b90:	ac00ec03 	stcge	12, cr14, [r0], {3}
     b94:	03587603 	cmpeq	r8, #3145728	; 0x300000
     b98:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     b9c:	00c2033c 	sbceq	r0, r2, ip, lsr r3
     ba0:	7fbe0320 	svcvc	0x00be0320
     ba4:	9c033d20 	stcls	13, cr3, [r3], {32}
     ba8:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     bac:	9d032000 	stcls	0, cr2, [r3, #-0]
     bb0:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     bb4:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     bb8:	7a035eac 	bvc	d8670 <__RW_SIZE__+0xd80e8>
     bbc:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     bc0:	203a033d 	eorscs	r0, sl, sp, lsr r3
     bc4:	03204603 	teqeq	r0, #3145728	; 0x300000
     bc8:	1f3c7f95 	svcne	0x003c7f95
     bcc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     bd0:	3056ac00 	subscc	sl, r6, r0, lsl #24
     bd4:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     bd8:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     bdc:	2000ec03 	andcs	lr, r0, r3, lsl #24
     be0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; bdc <__RW_SIZE__+0x654>
     be4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     be8:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     bec:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     bf0:	7f95033d 	svcvc	0x0095033d
     bf4:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     bf8:	7f940320 	svcvc	0x00940320
     bfc:	033d213c 	teqeq	sp, #60, 2
     c00:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     c04:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     c08:	7f95033d 	svcvc	0x0095033d
     c0c:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     c10:	7f940320 	svcvc	0x00940320
     c14:	033d213c 	teqeq	sp, #60, 2
     c18:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     c1c:	0a035876 	beq	d6dfc <__RW_SIZE__+0xd6874>
     c20:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     c24:	03203703 	teqeq	r0, #786432	; 0xc0000
     c28:	033d2049 	teqeq	sp, #73	; 0x49
     c2c:	033c7f9c 	teqeq	ip, #156, 30	; 0x270
     c30:	032000e4 	teqeq	r0, #228	; 0xe4
     c34:	1f3c7f9d 	svcne	0x003c7f9d
     c38:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     c3c:	cb037400 	blgt	ddc44 <__RW_SIZE__+0xdd6bc>
     c40:	253f8200 	ldrcs	r8, [pc, #-512]!	; a48 <__RW_SIZE__+0x4c0>
     c44:	59842561 	stmibpl	r4, {r0, r5, r6, r8, sl, sp}
     c48:	7a033d2d 	bvc	d0104 <__RW_SIZE__+0xcfb7c>
     c4c:	033e263c 	teqeq	lr, #60, 12	; 0x3c00000
     c50:	03587ec2 	cmpeq	r8, #3104	; 0xc20
     c54:	034a01be 	movteq	r0, #41406	; 0xa1be
     c58:	212e7ec2 	smlawtcs	lr, r2, lr, r7
     c5c:	3d21723d 	sfmcc	f7, 4, [r1, #-244]!	; 0xffffff0c
     c60:	02040200 	andeq	r0, r4, #0, 4
     c64:	3c01bc03 	stccc	12, cr11, [r1], {3}
     c68:	4e139442 	cdpmi	4, 1, cr9, cr3, cr2, {2}
     c6c:	78033034 	stmdavc	r3, {r2, r4, r5, ip, sp}
     c70:	39346820 	ldmdbcc	r4!, {r5, fp, sp, lr}
     c74:	1d5b68a3 	ldclne	8, cr6, [fp, #-652]	; 0xfffffd74
     c78:	3a23492f 	bcc	8d313c <__RW_SIZE__+0x8d2bb4>
     c7c:	a6032c22 	strge	r2, [r3], -r2, lsr #24
     c80:	dc033c7e 	stcle	12, cr3, [r3], {126}	; 0x7e
     c84:	a4035801 	strge	r5, [r3], #-2049	; 0xfffff7ff
     c88:	3d212e7e 	stccc	14, cr2, [r1, #-504]!	; 0xfffffe08
     c8c:	003d2172 	eorseq	r2, sp, r2, ror r1
     c90:	03020402 	movweq	r0, #9218	; 0x2402
     c94:	423c01da 	eorsmi	r0, ip, #-2147483594	; 0x80000036
     c98:	7e8f03a2 	cdpvc	3, 8, cr0, cr15, cr2, {5}
     c9c:	3d2d5920 	stccc	9, cr5, [sp, #-128]!	; 0xffffff80
     ca0:	23672a40 	cmncs	r7, #64, 20	; 0x40000
     ca4:	2d213e2b 	stccs	14, cr3, [r1, #-172]!	; 0xffffff54
     ca8:	3803213d 	stmdacc	r3, {r0, r2, r3, r4, r5, r8, sp}
     cac:	2e480320 	cdpcs	3, 4, cr0, cr8, cr0, {1}
     cb0:	234a3503 	movtcs	r3, #42243	; 0xa503
     cb4:	b503592b 	strlt	r5, [r3, #-2347]	; 0xfffff6d5
     cb8:	cb032001 	blgt	c8cc4 <__RW_SIZE__+0xc873c>
     cbc:	035a207e 	cmpeq	sl, #126	; 0x7e
     cc0:	1203206e 	andne	r2, r3, #110	; 0x6e
     cc4:	6d035920 	stcvs	9, cr5, [r3, #-128]	; 0xffffff80
     cc8:	2e130320 	cdpcs	3, 1, cr0, cr3, cr0, {1}
     ccc:	5801b503 	stmdapl	r1, {r0, r1, r8, sl, ip, sp, pc}
     cd0:	207eb803 	rsbscs	fp, lr, r3, lsl #16
     cd4:	2e01c803 	cdpcs	8, 0, cr12, cr1, cr3, {0}
     cd8:	3c7ef203 	lfmcc	f7, 3, [lr], #-12
     cdc:	034a4603 	movteq	r4, #42499	; 0xa603
     ce0:	44039e3c 	strmi	r9, [r3], #-3644	; 0xfffff1c4
     ce4:	203c0358 	eorscs	r0, ip, r8, asr r3
     ce8:	033c4403 	teqeq	ip, #50331648	; 0x3000000
     cec:	59d600c2 	ldmibpl	r6, {r1, r6, r7}^
     cf0:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     cf4:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
     cf8:	9c034a00 	stcls	10, cr4, [r3], {-0}
     cfc:	e4032e7f 	str	r2, [r3], #-3711	; 0xfffff181
     d00:	9d032000 	stcls	0, cr2, [r3, #-0]
     d04:	211f207f 	tstcs	pc, pc, ror r0	; <UNPREDICTABLE>
     d08:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     d0c:	7a035ed6 	bvc	d886c <__RW_SIZE__+0xd82e4>
     d10:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     d14:	7f95033d 	svcvc	0x0095033d
     d18:	00eb0320 	rsceq	r0, fp, r0, lsr #6
     d1c:	7f940320 	svcvc	0x00940320
     d20:	033d213c 	teqeq	sp, #60, 2
     d24:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     d28:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     d2c:	7f94033d 	svcvc	0x0094033d
     d30:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     d34:	7f950320 	svcvc	0x00950320
     d38:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     d3c:	ac00ec03 	stcge	12, cr14, [r0], {3}
     d40:	21393056 	teqcs	r9, r6, asr r0
     d44:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     d48:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     d4c:	95032000 	strls	r2, [r3, #-0]
     d50:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     d54:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     d58:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
     d5c:	032e0a03 	teqeq	lr, #12288	; 0x3000
     d60:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
     d64:	7f9c033d 	svcvc	0x009c033d
     d68:	00e40320 	rsceq	r0, r4, r0, lsr #6
     d6c:	7f9d0320 	svcvc	0x009d0320
     d70:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     d74:	ac00e403 	cfstrsge	mvf14, [r0], {3}
     d78:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     d7c:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     d80:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     d84:	2000ec03 	andcs	lr, r0, r3, lsl #24
     d88:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; d84 <__RW_SIZE__+0x7fc>
     d8c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     d90:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
     d94:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
     d98:	7f94033d 	svcvc	0x0094033d
     d9c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     da0:	7f950320 	svcvc	0x00950320
     da4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     da8:	ac00ec03 	stcge	12, cr14, [r0], {3}
     dac:	21393056 	teqcs	r9, r6, asr r0
     db0:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     db4:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     db8:	95032000 	strls	r2, [r3, #-0]
     dbc:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     dc0:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     dc4:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     dc8:	033d2d21 	teqeq	sp, #2112	; 0x840
     dcc:	03207f94 	teqeq	r0, #148, 30	; 0x250
     dd0:	032000ec 	teqeq	r0, #236	; 0xec
     dd4:	1f3c7f95 	svcne	0x003c7f95
     dd8:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     ddc:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     de0:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     de4:	213c7503 	teqcs	ip, r3, lsl #10
     de8:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     dec:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     df0:	9d032000 	stcls	0, cr2, [r3, #-0]
     df4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     df8:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     dfc:	7a035eac 	bvc	d88b4 <__RW_SIZE__+0xd832c>
     e00:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     e04:	7f94033d 	svcvc	0x0094033d
     e08:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     e0c:	7f950320 	svcvc	0x00950320
     e10:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     e14:	ac00ec03 	stcge	12, cr14, [r0], {3}
     e18:	21393056 	teqcs	r9, r6, asr r0
     e1c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     e20:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     e24:	95032000 	strls	r2, [r3, #-0]
     e28:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     e2c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     e30:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     e34:	033d2d21 	teqeq	sp, #2112	; 0x840
     e38:	03207f94 	teqeq	r0, #148, 30	; 0x250
     e3c:	032000ec 	teqeq	r0, #236	; 0xec
     e40:	1f3c7f95 	svcne	0x003c7f95
     e44:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     e48:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     e4c:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     e50:	213c7503 	teqcs	ip, r3, lsl #10
     e54:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     e58:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     e5c:	9d032000 	stcls	0, cr2, [r3, #-0]
     e60:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     e64:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     e68:	7a035eac 	bvc	d8920 <__RW_SIZE__+0xd8398>
     e6c:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     e70:	7f94033d 	svcvc	0x0094033d
     e74:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     e78:	7f950320 	svcvc	0x00950320
     e7c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     e80:	ac00ec03 	stcge	12, cr14, [r0], {3}
     e84:	21393056 	teqcs	r9, r6, asr r0
     e88:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     e8c:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     e90:	95032000 	strls	r2, [r3, #-0]
     e94:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     e98:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     e9c:	393056d6 	ldmdbcc	r0!, {r1, r2, r4, r6, r7, r9, sl, ip, lr}
     ea0:	033d2d21 	teqeq	sp, #2112	; 0x840
     ea4:	03207f95 	teqeq	r0, #596	; 0x254
     ea8:	032000eb 	teqeq	r0, #235	; 0xeb
     eac:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
     eb0:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     eb4:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
     eb8:	033d2d21 	teqeq	sp, #2112	; 0x840
     ebc:	03207f94 	teqeq	r0, #148, 30	; 0x250
     ec0:	032000ec 	teqeq	r0, #236	; 0xec
     ec4:	1f3c7f95 	svcne	0x003c7f95
     ec8:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     ecc:	3056ac00 	subscc	sl, r6, r0, lsl #24
     ed0:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     ed4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
     ed8:	2000ec03 	andcs	lr, r0, r3, lsl #24
     edc:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; ed8 <__RW_SIZE__+0x950>
     ee0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     ee4:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
     ee8:	0a035876 	beq	d70c8 <__RW_SIZE__+0xd6b40>
     eec:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
     ef0:	033d2d21 	teqeq	sp, #2112	; 0x840
     ef4:	03207f9c 	teqeq	r0, #156, 30	; 0x270
     ef8:	032000e4 	teqeq	r0, #228	; 0xe4
     efc:	1f3c7f9d 	svcne	0x003c7f9d
     f00:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
     f04:	035eac00 	cmpeq	lr, #0, 24
     f08:	21412e7a 	hvccs	4842	; 0x12ea
     f0c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
     f10:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
     f14:	95032000 	strls	r2, [r3, #-0]
     f18:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     f1c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
     f20:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
     f24:	032e0a03 	teqeq	lr, #12288	; 0x3000
     f28:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
     f2c:	7f9c033d 	svcvc	0x009c033d
     f30:	00e40320 	rsceq	r0, r4, r0, lsr #6
     f34:	7f9d0320 	svcvc	0x009d0320
     f38:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     f3c:	d600e403 	strle	lr, [r0], -r3, lsl #8
     f40:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
     f44:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
     f48:	207f9503 	rsbscs	r9, pc, r3, lsl #10
     f4c:	2000eb03 	andcs	lr, r0, r3, lsl #22
     f50:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; f4c <__RW_SIZE__+0x9c4>
     f54:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     f58:	3056d600 	subscc	sp, r6, r0, lsl #12
     f5c:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
     f60:	207f9503 	rsbscs	r9, pc, r3, lsl #10
     f64:	2000eb03 	andcs	lr, r0, r3, lsl #22
     f68:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; f64 <__RW_SIZE__+0x9dc>
     f6c:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     f70:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     f74:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     f78:	213c7503 	teqcs	ip, r3, lsl #10
     f7c:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     f80:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     f84:	9d032000 	stcls	0, cr2, [r3, #-0]
     f88:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
     f8c:	00e4033d 	rsceq	r0, r4, sp, lsr r3
     f90:	7a035eac 	bvc	d8a48 <__RW_SIZE__+0xd84c0>
     f94:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
     f98:	7f94033d 	svcvc	0x0094033d
     f9c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
     fa0:	7f950320 	svcvc	0x00950320
     fa4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
     fa8:	ac00ec03 	stcge	12, cr14, [r0], {3}
     fac:	03587603 	cmpeq	r8, #3145728	; 0x300000
     fb0:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
     fb4:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
     fb8:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
     fbc:	2000e403 	andcs	lr, r0, r3, lsl #8
     fc0:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; fbc <__RW_SIZE__+0xa34>
     fc4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
     fc8:	5eac00e4 	cdppl	0, 10, cr0, cr12, cr4, {7}
     fcc:	412e7a03 	teqmi	lr, r3, lsl #20
     fd0:	033d2d21 	teqeq	sp, #2112	; 0x840
     fd4:	03207f94 	teqeq	r0, #148, 30	; 0x250
     fd8:	032000ec 	teqeq	r0, #236	; 0xec
     fdc:	1f3c7f95 	svcne	0x003c7f95
     fe0:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
     fe4:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
     fe8:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
     fec:	213c7503 	teqcs	ip, r3, lsl #10
     ff0:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
     ff4:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
     ff8:	9d032000 	stcls	0, cr2, [r3, #-0]
     ffc:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1000:	00e4033d 	rsceq	r0, r4, sp, lsr r3
    1004:	7a035eac 	bvc	d8abc <__RW_SIZE__+0xd8534>
    1008:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
    100c:	7f94033d 	svcvc	0x0094033d
    1010:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1014:	7f950320 	svcvc	0x00950320
    1018:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    101c:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1020:	21393056 	teqcs	r9, r6, asr r0
    1024:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1028:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    102c:	95032000 	strls	r2, [r3, #-0]
    1030:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1034:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1038:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    103c:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1040:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    1044:	7f9c033d 	svcvc	0x009c033d
    1048:	00e40320 	rsceq	r0, r4, r0, lsr #6
    104c:	7f9d0320 	svcvc	0x009d0320
    1050:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1054:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    1058:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    105c:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1060:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1064:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1068:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1064 <__RW_SIZE__+0xadc>
    106c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1070:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1074:	0a035876 	beq	d7254 <__RW_SIZE__+0xd6ccc>
    1078:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    107c:	033d2d21 	teqeq	sp, #2112	; 0x840
    1080:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    1084:	032000e4 	teqeq	r0, #228	; 0xe4
    1088:	1f3c7f9d 	svcne	0x003c7f9d
    108c:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1090:	035eac00 	cmpeq	lr, #0, 24
    1094:	21412e7a 	hvccs	4842	; 0x12ea
    1098:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    109c:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    10a0:	95032000 	strls	r2, [r3, #-0]
    10a4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    10a8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    10ac:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    10b0:	032e0a03 	teqeq	lr, #12288	; 0x3000
    10b4:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    10b8:	7f9c033d 	svcvc	0x009c033d
    10bc:	00e40320 	rsceq	r0, r4, r0, lsr #6
    10c0:	7f9d0320 	svcvc	0x009d0320
    10c4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    10c8:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    10cc:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    10d0:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    10d4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    10d8:	2000ec03 	andcs	lr, r0, r3, lsl #24
    10dc:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 10d8 <__RW_SIZE__+0xb50>
    10e0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    10e4:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    10e8:	0a035876 	beq	d72c8 <__RW_SIZE__+0xd6d40>
    10ec:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    10f0:	033d2d21 	teqeq	sp, #2112	; 0x840
    10f4:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    10f8:	032000e4 	teqeq	r0, #228	; 0xe4
    10fc:	1f3c7f9d 	svcne	0x003c7f9d
    1100:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1104:	035eac00 	cmpeq	lr, #0, 24
    1108:	21412e7a 	hvccs	4842	; 0x12ea
    110c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1110:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1114:	95032000 	strls	r2, [r3, #-0]
    1118:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    111c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1120:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1124:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1128:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    112c:	7f9c033d 	svcvc	0x009c033d
    1130:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1134:	7f9d0320 	svcvc	0x009d0320
    1138:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    113c:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    1140:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1144:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1148:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    114c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1150:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 114c <__RW_SIZE__+0xbc4>
    1154:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1158:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    115c:	0a035876 	beq	d733c <__RW_SIZE__+0xd6db4>
    1160:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1164:	033d2d21 	teqeq	sp, #2112	; 0x840
    1168:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    116c:	032000e4 	teqeq	r0, #228	; 0xe4
    1170:	1f3c7f9d 	svcne	0x003c7f9d
    1174:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1178:	035eac00 	cmpeq	lr, #0, 24
    117c:	21412e7a 	hvccs	4842	; 0x12ea
    1180:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1184:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1188:	95032000 	strls	r2, [r3, #-0]
    118c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1190:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1194:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1198:	032e0a03 	teqeq	lr, #12288	; 0x3000
    119c:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    11a0:	7f9c033d 	svcvc	0x009c033d
    11a4:	00e40320 	rsceq	r0, r4, r0, lsr #6
    11a8:	7f9d0320 	svcvc	0x009d0320
    11ac:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    11b0:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    11b4:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    11b8:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    11bc:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    11c0:	2000ec03 	andcs	lr, r0, r3, lsl #24
    11c4:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 11c0 <__RW_SIZE__+0xc38>
    11c8:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    11cc:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    11d0:	0a035876 	beq	d73b0 <__RW_SIZE__+0xd6e28>
    11d4:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    11d8:	033d2d21 	teqeq	sp, #2112	; 0x840
    11dc:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    11e0:	032000e4 	teqeq	r0, #228	; 0xe4
    11e4:	1f3c7f9d 	svcne	0x003c7f9d
    11e8:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    11ec:	035ed600 	cmpeq	lr, #0, 12
    11f0:	21412e7a 	hvccs	4842	; 0x12ea
    11f4:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    11f8:	eb03207f 	bl	c93fc <__RW_SIZE__+0xc8e74>
    11fc:	94032000 	strls	r2, [r3], #-0
    1200:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    1204:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1208:	21393056 	teqcs	r9, r6, asr r0
    120c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1210:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1214:	95032000 	strls	r2, [r3, #-0]
    1218:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    121c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1220:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    1224:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1228:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    122c:	7f9c033d 	svcvc	0x009c033d
    1230:	00e40320 	rsceq	r0, r4, r0, lsr #6
    1234:	7f9d0320 	svcvc	0x009d0320
    1238:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    123c:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    1240:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1244:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1248:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    124c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1250:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 124c <__RW_SIZE__+0xcc4>
    1254:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1258:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    125c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1260:	7f94033d 	svcvc	0x0094033d
    1264:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1268:	7f950320 	svcvc	0x00950320
    126c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1270:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1274:	03587603 	cmpeq	r8, #3145728	; 0x300000
    1278:	75032e0a 	strvc	r2, [r3, #-3594]	; 0xfffff1f6
    127c:	3d2d213c 	stfccs	f2, [sp, #-240]!	; 0xffffff10
    1280:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    1284:	2000e403 	andcs	lr, r0, r3, lsl #8
    1288:	3c7f9d03 	ldclcc	13, cr9, [pc], #-12	; 1284 <__RW_SIZE__+0xcfc>
    128c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1290:	5ed600e4 	cdppl	0, 13, cr0, cr6, cr4, {7}
    1294:	412e7a03 	teqmi	lr, r3, lsl #20
    1298:	033d2d21 	teqeq	sp, #2112	; 0x840
    129c:	03207f95 	teqeq	r0, #596	; 0x254
    12a0:	032000eb 	teqeq	r0, #235	; 0xeb
    12a4:	213c7f94 			; <UNDEFINED> instruction: 0x213c7f94
    12a8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    12ac:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    12b0:	032e0a03 	teqeq	lr, #12288	; 0x3000
    12b4:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    12b8:	7f9c033d 	svcvc	0x009c033d
    12bc:	00e40320 	rsceq	r0, r4, r0, lsr #6
    12c0:	7f9d0320 	svcvc	0x009d0320
    12c4:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    12c8:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    12cc:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    12d0:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    12d4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    12d8:	2000ec03 	andcs	lr, r0, r3, lsl #24
    12dc:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 12d8 <__RW_SIZE__+0xd50>
    12e0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    12e4:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    12e8:	0a035876 	beq	d74c8 <__RW_SIZE__+0xd6f40>
    12ec:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    12f0:	033d2d21 	teqeq	sp, #2112	; 0x840
    12f4:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    12f8:	032000e4 	teqeq	r0, #228	; 0xe4
    12fc:	1f3c7f9d 	svcne	0x003c7f9d
    1300:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1304:	035eac00 	cmpeq	lr, #0, 24
    1308:	21412e7a 	hvccs	4842	; 0x12ea
    130c:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1310:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1314:	95032000 	strls	r2, [r3, #-0]
    1318:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    131c:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1320:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1324:	033d2d21 	teqeq	sp, #2112	; 0x840
    1328:	03207f94 	teqeq	r0, #148, 30	; 0x250
    132c:	032000ec 	teqeq	r0, #236	; 0xec
    1330:	1f3c7f95 	svcne	0x003c7f95
    1334:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1338:	3056ac00 	subscc	sl, r6, r0, lsl #24
    133c:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1340:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1344:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1348:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1344 <__RW_SIZE__+0xdbc>
    134c:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1350:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1354:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1358:	7f94033d 	svcvc	0x0094033d
    135c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1360:	7f950320 	svcvc	0x00950320
    1364:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1368:	ac00ec03 	stcge	12, cr14, [r0], {3}
    136c:	21393056 	teqcs	r9, r6, asr r0
    1370:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1374:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1378:	95032000 	strls	r2, [r3, #-0]
    137c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1380:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1384:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1388:	033d2d21 	teqeq	sp, #2112	; 0x840
    138c:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1390:	032000ec 	teqeq	r0, #236	; 0xec
    1394:	1f3c7f95 	svcne	0x003c7f95
    1398:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    139c:	3056ac00 	subscc	sl, r6, r0, lsl #24
    13a0:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    13a4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    13a8:	2000ec03 	andcs	lr, r0, r3, lsl #24
    13ac:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 13a8 <__RW_SIZE__+0xe20>
    13b0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    13b4:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    13b8:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    13bc:	7f94033d 	svcvc	0x0094033d
    13c0:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    13c4:	7f950320 	svcvc	0x00950320
    13c8:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    13cc:	ac00ec03 	stcge	12, cr14, [r0], {3}
    13d0:	21393056 	teqcs	r9, r6, asr r0
    13d4:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    13d8:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    13dc:	95032000 	strls	r2, [r3, #-0]
    13e0:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    13e4:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    13e8:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    13ec:	033d2d21 	teqeq	sp, #2112	; 0x840
    13f0:	03207f94 	teqeq	r0, #148, 30	; 0x250
    13f4:	032000ec 	teqeq	r0, #236	; 0xec
    13f8:	1f3c7f95 	svcne	0x003c7f95
    13fc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1400:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1404:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1408:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    140c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1410:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 140c <__RW_SIZE__+0xe84>
    1414:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1418:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    141c:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1420:	7f94033d 	svcvc	0x0094033d
    1424:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1428:	7f950320 	svcvc	0x00950320
    142c:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1430:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1434:	21393056 	teqcs	r9, r6, asr r0
    1438:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    143c:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1440:	95032000 	strls	r2, [r3, #-0]
    1444:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1448:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    144c:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1450:	033d2d21 	teqeq	sp, #2112	; 0x840
    1454:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1458:	032000ec 	teqeq	r0, #236	; 0xec
    145c:	1f3c7f95 	svcne	0x003c7f95
    1460:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1464:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1468:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    146c:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1470:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1474:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1470 <__RW_SIZE__+0xee8>
    1478:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    147c:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1480:	0a035876 	beq	d7660 <__RW_SIZE__+0xd70d8>
    1484:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1488:	033d2d21 	teqeq	sp, #2112	; 0x840
    148c:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    1490:	032000e4 	teqeq	r0, #228	; 0xe4
    1494:	1f3c7f9d 	svcne	0x003c7f9d
    1498:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    149c:	035ed600 	cmpeq	lr, #0, 12
    14a0:	21412e7a 	hvccs	4842	; 0x12ea
    14a4:	95033d2d 	strls	r3, [r3, #-3373]	; 0xfffff2d3
    14a8:	eb03207f 	bl	c96ac <__RW_SIZE__+0xc9124>
    14ac:	94032000 	strls	r2, [r3], #-0
    14b0:	3d213c7f 	stccc	12, cr3, [r1, #-508]!	; 0xfffffe04
    14b4:	ac00ec03 	stcge	12, cr14, [r0], {3}
    14b8:	21393056 	teqcs	r9, r6, asr r0
    14bc:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    14c0:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    14c4:	95032000 	strls	r2, [r3, #-0]
    14c8:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    14cc:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    14d0:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    14d4:	033d2d21 	teqeq	sp, #2112	; 0x840
    14d8:	03207f94 	teqeq	r0, #148, 30	; 0x250
    14dc:	032000ec 	teqeq	r0, #236	; 0xec
    14e0:	1f3c7f95 	svcne	0x003c7f95
    14e4:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    14e8:	3056ac00 	subscc	sl, r6, r0, lsl #24
    14ec:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    14f0:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    14f4:	2000ec03 	andcs	lr, r0, r3, lsl #24
    14f8:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 14f4 <__RW_SIZE__+0xf6c>
    14fc:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1500:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1504:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1508:	7f94033d 	svcvc	0x0094033d
    150c:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1510:	7f950320 	svcvc	0x00950320
    1514:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1518:	ac00ec03 	stcge	12, cr14, [r0], {3}
    151c:	21393056 	teqcs	r9, r6, asr r0
    1520:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1524:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    1528:	95032000 	strls	r2, [r3, #-0]
    152c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1530:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1534:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1538:	033d2d21 	teqeq	sp, #2112	; 0x840
    153c:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1540:	032000ec 	teqeq	r0, #236	; 0xec
    1544:	1f3c7f95 	svcne	0x003c7f95
    1548:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    154c:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1550:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1554:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    1558:	2000ec03 	andcs	lr, r0, r3, lsl #24
    155c:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 1558 <__RW_SIZE__+0xfd0>
    1560:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1564:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1568:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    156c:	7f94033d 	svcvc	0x0094033d
    1570:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1574:	7f950320 	svcvc	0x00950320
    1578:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    157c:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1580:	21393056 	teqcs	r9, r6, asr r0
    1584:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1588:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    158c:	95032000 	strls	r2, [r3, #-0]
    1590:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1594:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1598:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    159c:	033d2d21 	teqeq	sp, #2112	; 0x840
    15a0:	03207f94 	teqeq	r0, #148, 30	; 0x250
    15a4:	032000ec 	teqeq	r0, #236	; 0xec
    15a8:	1f3c7f95 	svcne	0x003c7f95
    15ac:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    15b0:	3056ac00 	subscc	sl, r6, r0, lsl #24
    15b4:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    15b8:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    15bc:	2000ec03 	andcs	lr, r0, r3, lsl #24
    15c0:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 15bc <__RW_SIZE__+0x1034>
    15c4:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    15c8:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    15cc:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    15d0:	7f94033d 	svcvc	0x0094033d
    15d4:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    15d8:	7f950320 	svcvc	0x00950320
    15dc:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    15e0:	ac00ec03 	stcge	12, cr14, [r0], {3}
    15e4:	21393056 	teqcs	r9, r6, asr r0
    15e8:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    15ec:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    15f0:	95032000 	strls	r2, [r3, #-0]
    15f4:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    15f8:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    15fc:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1600:	033d2d21 	teqeq	sp, #2112	; 0x840
    1604:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1608:	032000ec 	teqeq	r0, #236	; 0xec
    160c:	1f3c7f95 	svcne	0x003c7f95
    1610:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1614:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
    1618:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
    161c:	213c7503 	teqcs	ip, r3, lsl #10
    1620:	9c033d2d 	stcls	13, cr3, [r3], {45}	; 0x2d
    1624:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
    1628:	9d032000 	stcls	0, cr2, [r3, #-0]
    162c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1630:	00e4033d 	rsceq	r0, r4, sp, lsr r3
    1634:	7a035ed6 	bvc	d9194 <__RW_SIZE__+0xd8c0c>
    1638:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
    163c:	7f95033d 	svcvc	0x0095033d
    1640:	00eb0320 	rsceq	r0, fp, r0, lsr #6
    1644:	7f940320 	svcvc	0x00940320
    1648:	033d213c 	teqeq	sp, #60, 2
    164c:	56d600ec 	ldrbpl	r0, [r6], ip, ror #1
    1650:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    1654:	7f95033d 	svcvc	0x0095033d
    1658:	00eb0320 	rsceq	r0, fp, r0, lsr #6
    165c:	7f940320 	svcvc	0x00940320
    1660:	033d213c 	teqeq	sp, #60, 2
    1664:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    1668:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    166c:	7f94033d 	svcvc	0x0094033d
    1670:	00ec0320 	rsceq	r0, ip, r0, lsr #6
    1674:	7f950320 	svcvc	0x00950320
    1678:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    167c:	ac00ec03 	stcge	12, cr14, [r0], {3}
    1680:	21393056 	teqcs	r9, r6, asr r0
    1684:	94033d2d 	strls	r3, [r3], #-3373	; 0xfffff2d3
    1688:	ec03207f 	stc	0, cr2, [r3], {127}	; 0x7f
    168c:	95032000 	strls	r2, [r3, #-0]
    1690:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1694:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1698:	587603ac 	ldmdapl	r6!, {r2, r3, r5, r7, r8, r9}^
    169c:	032e0a03 	teqeq	lr, #12288	; 0x3000
    16a0:	2d213c75 	stccs	12, cr3, [r1, #-468]!	; 0xfffffe2c
    16a4:	7f9c033d 	svcvc	0x009c033d
    16a8:	00e40320 	rsceq	r0, r4, r0, lsr #6
    16ac:	7f9d0320 	svcvc	0x009d0320
    16b0:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    16b4:	d600e403 	strle	lr, [r0], -r3, lsl #8
    16b8:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    16bc:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    16c0:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    16c4:	2000eb03 	andcs	lr, r0, r3, lsl #22
    16c8:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 16c4 <__RW_SIZE__+0x113c>
    16cc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    16d0:	3056d600 	subscc	sp, r6, r0, lsl #12
    16d4:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    16d8:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    16dc:	2000eb03 	andcs	lr, r0, r3, lsl #22
    16e0:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 16dc <__RW_SIZE__+0x1154>
    16e4:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    16e8:	3056d600 	subscc	sp, r6, r0, lsl #12
    16ec:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    16f0:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    16f4:	2000eb03 	andcs	lr, r0, r3, lsl #22
    16f8:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 16f4 <__RW_SIZE__+0x116c>
    16fc:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1700:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1704:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1708:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    170c:	2000ec03 	andcs	lr, r0, r3, lsl #24
    1710:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 170c <__RW_SIZE__+0x1184>
    1714:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    1718:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    171c:	0a035876 	beq	d78fc <__RW_SIZE__+0xd7374>
    1720:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1724:	033d2d21 	teqeq	sp, #2112	; 0x840
    1728:	03207f9c 	teqeq	r0, #156, 30	; 0x270
    172c:	032000e4 	teqeq	r0, #228	; 0xe4
    1730:	1f3c7f9d 	svcne	0x003c7f9d
    1734:	e4033d21 	str	r3, [r3], #-3361	; 0xfffff2df
    1738:	bb039e00 	bllt	e8f40 <__RW_SIZE__+0xe89b8>
    173c:	c503587f 	strgt	r5, [r3, #-2175]	; 0xfffff781
    1740:	bb032e00 	bllt	ccf48 <__RW_SIZE__+0xcc9c0>
    1744:	c2033c7f 	andgt	r3, r3, #32512	; 0x7f00
    1748:	2d59ba00 	vldrcs	s23, [r9, #-0]
    174c:	7f9c033d 	svcvc	0x009c033d
    1750:	00e4033c 	rsceq	r0, r4, ip, lsr r3
    1754:	7f9c034a 	svcvc	0x009c034a
    1758:	00e4032e 	rsceq	r0, r4, lr, lsr #6
    175c:	7f9d0320 	svcvc	0x009d0320
    1760:	3d211f20 	stccc	15, cr1, [r1, #-128]!	; 0xffffff80
    1764:	9e00e403 	cdpls	4, 0, cr14, cr0, cr3, {0}
    1768:	8201f603 	andhi	pc, r1, #3145728	; 0x300000
    176c:	2e7eed03 	cdpcs	13, 7, cr14, cr14, cr3, {0}
    1770:	3c7ed803 	ldclcc	8, cr13, [lr], #-12
    1774:	d602c003 	strle	ip, [r2], -r3
    1778:	fe033f83 	cdp2	15, 0, cr3, cr3, cr3, {4}
    177c:	3c03207d 	stccc	0, cr2, [r3], {125}	; 0x7d
    1780:	2e440358 	mcrcs	3, 2, r0, cr4, cr8, {2}
    1784:	032e3c03 	teqeq	lr, #768	; 0x300
    1788:	3b032e45 	blcc	cd0a4 <__RW_SIZE__+0xccb1c>
    178c:	2045032e 	subcs	r0, r5, lr, lsr #6
    1790:	9c03212d 	stflss	f2, [r3], {45}	; 0x2d
    1794:	e403207f 	str	r2, [r3], #-127	; 0xffffff81
    1798:	9d035800 	stcls	8, cr5, [r3, #-0]
    179c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    17a0:	00e4033d 	rsceq	r0, r4, sp, lsr r3
    17a4:	7a035eac 	bvc	d925c <__RW_SIZE__+0xd8cd4>
    17a8:	2d21412e 	stfcss	f4, [r1, #-184]!	; 0xffffff48
    17ac:	2034033d 	eorscs	r0, r4, sp, lsr r3
    17b0:	03204c03 	teqeq	r0, #768	; 0x300
    17b4:	1f3c7f95 	svcne	0x003c7f95
    17b8:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    17bc:	3064ac00 	rsbcc	sl, r4, r0, lsl #24
    17c0:	4b2d2f47 	blmi	b4d4e4 <__RW_SIZE__+0xb4cf5c>
    17c4:	207f9403 	rsbscs	r9, pc, r3, lsl #8
    17c8:	2000ec03 	andcs	lr, r0, r3, lsl #24
    17cc:	3c7f9503 	cfldr64cc	mvdx9, [pc], #-12	; 17c8 <__RW_SIZE__+0x1240>
    17d0:	033d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    17d4:	64ac00ec 	strtvs	r0, [ip], #236	; 0xec
    17d8:	2d2f4730 	stccs	7, cr4, [pc, #-192]!	; 1720 <__RW_SIZE__+0x1198>
    17dc:	7f95034b 	svcvc	0x0095034b
    17e0:	00eb032e 	rsceq	r0, fp, lr, lsr #6
    17e4:	7f940320 	svcvc	0x00940320
    17e8:	033d214a 	teqeq	sp, #-2147483630	; 0x80000012
    17ec:	56ac00ec 	strtpl	r0, [ip], ip, ror #1
    17f0:	2d213930 	stccs	9, cr3, [r1, #-192]!	; 0xffffff40
    17f4:	7f95033d 	svcvc	0x0095033d
    17f8:	00eb0320 	rsceq	r0, fp, r0, lsr #6
    17fc:	7f940320 	svcvc	0x00940320
    1800:	033d213c 	teqeq	sp, #60, 2
    1804:	03ac00ec 			; <UNDEFINED> instruction: 0x03ac00ec
    1808:	0a035876 	beq	d79e8 <__RW_SIZE__+0xd7460>
    180c:	3c75032e 	ldclcc	3, cr0, [r5], #-184	; 0xffffff48
    1810:	2000c203 	andcs	ip, r0, r3, lsl #4
    1814:	207fbe03 	rsbscs	fp, pc, r3, lsl #28
    1818:	7f9c033d 	svcvc	0x009c033d
    181c:	00e4033c 	rsceq	r0, r4, ip, lsr r3
    1820:	7f9d0320 	svcvc	0x009d0320
    1824:	3d211f3c 	stccc	15, cr1, [r1, #-240]!	; 0xffffff10
    1828:	ac00e403 	cfstrsge	mvf14, [r0], {3}
    182c:	2e7a035e 	mrccs	3, 3, r0, cr10, cr14, {2}
    1830:	3d2d2141 	stfccs	f2, [sp, #-260]!	; 0xfffffefc
    1834:	03203a03 	teqeq	r0, #12288	; 0x3000
    1838:	95032046 	strls	r2, [r3, #-70]	; 0xffffffba
    183c:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    1840:	00ec033d 	rsceq	r0, ip, sp, lsr r3
    1844:	393056ac 	ldmdbcc	r0!, {r2, r3, r5, r7, r9, sl, ip, lr}
    1848:	033d2d21 	teqeq	sp, #2112	; 0x840
    184c:	03207f94 	teqeq	r0, #148, 30	; 0x250
    1850:	032000ec 	teqeq	r0, #236	; 0xec
    1854:	1f3c7f95 	svcne	0x003c7f95
    1858:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    185c:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1860:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    1864:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    1868:	2000eb03 	andcs	lr, r0, r3, lsl #22
    186c:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 1868 <__RW_SIZE__+0x12e0>
    1870:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    1874:	3056ac00 	subscc	sl, r6, r0, lsl #24
    1878:	3d2d2139 	stfccs	f2, [sp, #-228]!	; 0xffffff1c
    187c:	207f9503 	rsbscs	r9, pc, r3, lsl #10
    1880:	2000eb03 	andcs	lr, r0, r3, lsl #22
    1884:	3c7f9403 	cfldrdcc	mvd9, [pc], #-12	; 1880 <__RW_SIZE__+0x12f8>
    1888:	ec033d21 	stc	13, cr3, [r3], {33}	; 0x21
    188c:	7603ac00 	strvc	sl, [r3], -r0, lsl #24
    1890:	2e0a0358 	mcrcs	3, 0, r0, cr10, cr8, {2}
    1894:	033c7503 	teqeq	ip, #12582912	; 0xc00000
    1898:	49032037 	stmdbmi	r3, {r0, r1, r2, r4, r5, sp}
    189c:	9c033d20 	stcls	13, cr3, [r3], {32}
    18a0:	e4033c7f 	str	r3, [r3], #-3199	; 0xfffff381
    18a4:	9d032000 	stcls	0, cr2, [r3, #-0]
    18a8:	211f3c7f 	tstcs	pc, pc, ror ip	; <UNPREDICTABLE>
    18ac:	00e4033d 	rsceq	r0, r4, sp, lsr r3
    18b0:	585a03ac 	ldmdapl	sl, {r2, r3, r5, r7, r8, r9}^
    18b4:	032e2603 	teqeq	lr, #3145728	; 0x300000
    18b8:	2d213c59 	stccs	12, cr3, [r1, #-356]!	; 0xfffffe9c
    18bc:	031f213d 	tsteq	pc, #1073741839	; 0x4000000f
    18c0:	211f3c41 	tstcs	pc, r1, asr #24
    18c4:	3d2faa3d 	vstmdbcc	pc!, {s20-s80}
    18c8:	7400c103 	strvc	ip, [r0], #-259	; 0xfffffefd
    18cc:	8202a503 	andhi	sl, r2, #12582912	; 0xc00000
    18d0:	01000202 	tsteq	r0, r2, lsl #4
    18d4:	00009b01 	andeq	r9, r0, r1, lsl #22
    18d8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    18dc:	02000000 	andeq	r0, r0, #0
    18e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    18e4:	01010100 	mrseq	r0, (UNDEF: 17)
    18e8:	00000001 	andeq	r0, r0, r1
    18ec:	01000001 	tsteq	r0, r1
    18f0:	435c3a43 	cmpmi	ip, #274432	; 0x43000
    18f4:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
    18f8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    18fc:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
    1900:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1904:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1908:	2b2b4720 	blcs	ad3590 <__RW_SIZE__+0xad3008>
    190c:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
    1910:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1914:	6f6e2d6d 	svcvs	0x006e2d6d
    1918:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    191c:	2f696261 	svccs	0x00696261
    1920:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1924:	00656475 	rsbeq	r6, r5, r5, ror r4
    1928:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
    192c:	0000632e 	andeq	r6, r0, lr, lsr #6
    1930:	74730000 	ldrbtvc	r0, [r3], #-0
    1934:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1938:	2e783031 	mrccs	0, 3, r3, cr8, cr1, {1}
    193c:	00000068 	andeq	r0, r0, r8, rrx
    1940:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1944:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1948:	00010068 	andeq	r0, r1, r8, rrx
    194c:	726f6300 	rsbvc	r6, pc, #0, 6
    1950:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1954:	00682e33 	rsbeq	r2, r8, r3, lsr lr
    1958:	00000000 	andeq	r0, r0, r0
    195c:	98020500 	stmdals	r2, {r8, sl}
    1960:	1508006d 	strne	r0, [r8, #-109]	; 0xffffff93
    1964:	3d2d5913 	stccc	9, cr5, [sp, #-76]!	; 0xffffffb4
    1968:	da136a83 	ble	4dc37c <__RW_SIZE__+0x4dbdf4>
    196c:	0213a213 	andseq	sl, r3, #805306369	; 0x30000001
    1970:	01010009 	tsteq	r1, r9
    1974:	000000e7 	andeq	r0, r0, r7, ror #1
    1978:	00990002 	addseq	r0, r9, r2
    197c:	01020000 	mrseq	r0, (UNDEF: 2)
    1980:	000d0efb 	strdeq	r0, [sp], -fp
    1984:	01010101 	tsteq	r1, r1, lsl #2
    1988:	01000000 	mrseq	r0, (UNDEF: 0)
    198c:	43010000 	movwmi	r0, #4096	; 0x1000
    1990:	6f435c3a 	svcvs	0x00435c3a
    1994:	6f536564 	svcvs	0x00536564
    1998:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    199c:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
    19a0:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    19a4:	20797265 	rsbscs	r7, r9, r5, ror #4
    19a8:	202b2b47 	eorcs	r2, fp, r7, asr #22
    19ac:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
    19b0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    19b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    19b8:	61652d65 	cmnvs	r5, r5, ror #26
    19bc:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    19c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    19c4:	00006564 	andeq	r6, r0, r4, ror #10
    19c8:	6e69616d 	powvsez	f6, f1, #5.0
    19cc:	0000632e 	andeq	r6, r0, lr, lsr #6
    19d0:	74730000 	ldrbtvc	r0, [r3], #-0
    19d4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    19d8:	0100682e 	tsteq	r0, lr, lsr #16
    19dc:	6f630000 	svcvs	0x00630000
    19e0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    19e4:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    19e8:	00000000 	andeq	r0, r0, r0
    19ec:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    19f0:	645f6563 	ldrbvs	r6, [pc], #-1379	; 19f8 <__RW_SIZE__+0x1470>
    19f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    19f8:	00682e72 	rsbeq	r2, r8, r2, ror lr
    19fc:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1a00:	682e6463 	stmdavs	lr!, {r0, r1, r5, r6, sl, sp, lr}
    1a04:	00000000 	andeq	r0, r0, r0
    1a08:	70617267 	rsbvc	r7, r1, r7, ror #4
    1a0c:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
    1a10:	0000682e 	andeq	r6, r0, lr, lsr #16
    1a14:	00000000 	andeq	r0, r0, r0
    1a18:	6e0c0205 	cdpvs	2, 0, cr0, cr12, cr5, {0}
    1a1c:	12030800 	andne	r0, r3, #0, 16
    1a20:	2f2f2101 	svccs	0x002f2101
    1a24:	2d834c2f 	stccs	12, cr4, [r3, #188]	; 0xbc
    1a28:	2f3d3421 	svccs	0x003d3421
    1a2c:	3d2f3d68 	stccc	13, cr3, [pc, #-416]!	; 1894 <__RW_SIZE__+0x130c>
    1a30:	084c353d 	stmdaeq	ip, {r0, r2, r3, r4, r5, r8, sl, ip, sp}^
    1a34:	0e039114 	mcreq	1, 0, r9, cr3, cr4, {0}
    1a38:	33b533ac 			; <UNDEFINED> instruction: 0x33b533ac
    1a3c:	032e6503 	teqeq	lr, #12582912	; 0xc00000
    1a40:	0a03200c 	beq	c9a78 <__RW_SIZE__+0xc94f0>
    1a44:	66032582 	strvs	r2, [r3], -r2, lsl #11
    1a48:	200e0320 	andcs	r0, lr, r0, lsr #6
    1a4c:	2e780379 	mrccs	3, 3, r0, cr8, cr9, {3}
    1a50:	9fc9753e 	svcls	0x00c9753e
    1a54:	42ae4c31 	adcmi	r4, lr, #12544	; 0x3100
    1a58:	0c029f38 	stceq	15, cr9, [r2], {56}	; 0x38
    1a5c:	52010100 	andpl	r0, r1, #0, 2
    1a60:	02000000 	andeq	r0, r0, #0
    1a64:	00002e00 	andeq	r2, r0, r0, lsl #28
    1a68:	fb010200 	blx	42272 <__RW_SIZE__+0x41cea>
    1a6c:	01000d0e 	tsteq	r0, lr, lsl #26
    1a70:	00010101 	andeq	r0, r1, r1, lsl #2
    1a74:	00010000 	andeq	r0, r1, r0
    1a78:	72000100 	andvc	r0, r0, #0, 2
    1a7c:	69746e75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1a80:	632e656d 	teqvs	lr, #457179136	; 0x1b400000
    1a84:	00000000 	andeq	r0, r0, r0
    1a88:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1a8c:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    1a90:	0000682e 	andeq	r6, r0, lr, lsr #16
    1a94:	00000000 	andeq	r0, r0, r0
    1a98:	6fa80205 	svcvs	0x00a80205
    1a9c:	27150800 	ldrcs	r0, [r5, -r0, lsl #16]
    1aa0:	27587903 	ldrbcs	r7, [r8, -r3, lsl #18]
    1aa4:	2c3e4c5b 	ldccs	12, cr4, [lr], #-364	; 0xfffffe94
    1aa8:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    1aac:	3c770301 	ldclcc	3, cr0, [r7], #-4
    1ab0:	01000902 	tsteq	r0, r2, lsl #18
    1ab4:	00024201 	andeq	r4, r2, r1, lsl #4
    1ab8:	99000200 	stmdbls	r0, {r9}
    1abc:	02000000 	andeq	r0, r0, #0
    1ac0:	0d0efb01 	vstreq	d15, [lr, #-4]
    1ac4:	01010100 	mrseq	r0, (UNDEF: 17)
    1ac8:	00000001 	andeq	r0, r0, r1
    1acc:	01000001 	tsteq	r0, r1
    1ad0:	435c3a43 	cmpmi	ip, #274432	; 0x43000
    1ad4:	5365646f 	cmnpl	r5, #1862270976	; 0x6f000000
    1ad8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1adc:	5c797265 	lfmpl	f7, 2, [r9], #-404	; 0xfffffe6c
    1ae0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1ae4:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1ae8:	2b2b4720 	blcs	ad3770 <__RW_SIZE__+0xad31e8>
    1aec:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
    1af0:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1af4:	6f6e2d6d 	svcvs	0x006e2d6d
    1af8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1afc:	2f696261 	svccs	0x00696261
    1b00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b04:	00656475 	rsbeq	r6, r5, r5, ror r4
    1b08:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1b0c:	31663233 	cmncc	r6, r3, lsr r2
    1b10:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    1b14:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1b18:	63000000 	movwvs	r0, #0
    1b1c:	5f65726f 	svcpl	0x0065726f
    1b20:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    1b24:	00000068 	andeq	r0, r0, r8, rrx
    1b28:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1b2c:	31663233 	cmncc	r6, r3, lsr r2
    1b30:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1b3c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1b40:	00000100 	andeq	r0, r0, r0, lsl #2
    1b44:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    1b48:	645f6563 	ldrbvs	r6, [pc], #-1379	; 1b50 <__RW_SIZE__+0x15c8>
    1b4c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1b50:	00682e72 	rsbeq	r2, r8, r2, ror lr
    1b54:	00000000 	andeq	r0, r0, r0
    1b58:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1b5c:	0308006f 	movweq	r0, #32879	; 0x806f
    1b60:	2b230125 	blcs	8c1ffc <__RW_SIZE__+0x8c1a74>
    1b64:	02003120 	andeq	r3, r0, #32, 2
    1b68:	00220204 	eoreq	r0, r2, r4, lsl #4
    1b6c:	aa020402 	bge	82b7c <__RW_SIZE__+0x825f4>
    1b70:	02040200 	andeq	r0, r4, #0, 4
    1b74:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    1b78:	03402c02 	movteq	r2, #3074	; 0xc02
    1b7c:	c9214a70 	stmdbgt	r1!, {r4, r5, r6, r9, fp, lr}
    1b80:	13ba2a03 			; <UNDEFINED> instruction: 0x13ba2a03
    1b84:	0c03212d 	stfeqs	f2, [r3], {45}	; 0x2d
    1b88:	212d2158 	teqcs	sp, r8, asr r1
    1b8c:	5a032f2d 	bpl	cd848 <__RW_SIZE__+0xcd2c0>
    1b90:	7675752e 	ldrbtvc	r7, [r5], -lr, lsr #10
    1b94:	25562208 	ldrbcs	r2, [r6, #-520]	; 0xfffffdf8
    1b98:	1d03ad85 	stcne	13, cr10, [r3, #-532]	; 0xfffffdec
    1b9c:	91759174 	cmnls	r5, r4, ror r1
    1ba0:	82590375 	subshi	r0, r9, #-738197503	; 0xd4000001
    1ba4:	e43303d7 	ldrt	r0, [r3], #-983	; 0xfffffc29
    1ba8:	03212d13 	teqeq	r1, #1216	; 0x4c0
    1bac:	2d13580c 	ldccs	8, cr5, [r3, #-48]	; 0xffffffd0
    1bb0:	580c0321 	stmdapl	ip, {r0, r5, r8, r9}
    1bb4:	03212d13 	teqeq	r1, #1216	; 0x4c0
    1bb8:	2d13580c 	ldccs	8, cr5, [r3, #-48]	; 0xffffffd0
    1bbc:	580c0321 	stmdapl	ip, {r0, r5, r8, r9}
    1bc0:	03212d13 	teqeq	r1, #1216	; 0x4c0
    1bc4:	2d13580c 	ldccs	8, cr5, [r3, #-48]	; 0xffffffd0
    1bc8:	580e0321 	stmdapl	lr, {r0, r5, r8, r9}
    1bcc:	820b0313 	andhi	r0, fp, #1275068416	; 0x4c000000
    1bd0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1bd4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1bd8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1bdc:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1be0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1be4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1be8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1bec:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1bf0:	3c0e0321 	stccc	3, cr0, [lr], {33}	; 0x21
    1bf4:	02043022 	andeq	r3, r4, #34	; 0x22
    1bf8:	2e09da03 	vmlacs.f32	s26, s18, s6
    1bfc:	a4030104 	strge	r0, [r3], #-260	; 0xfffffefc
    1c00:	213d2e76 	teqcs	sp, r6, ror lr
    1c04:	da030204 	ble	c241c <__RW_SIZE__+0xc1e94>
    1c08:	01043c09 	tsteq	r4, r9, lsl #24
    1c0c:	4a76a403 	bmi	1daac20 <__RW_SIZE__+0x1daa698>
    1c10:	02042121 	andeq	r2, r4, #1073741832	; 0x40000008
    1c14:	2009da03 	andcs	sp, r9, r3, lsl #20
    1c18:	a8030104 	stmdage	r3, {r2, r8}
    1c1c:	0a032e76 	beq	cd5fc <__RW_SIZE__+0xcd074>
    1c20:	0b03213c 	bleq	ca118 <__RW_SIZE__+0xc9b90>
    1c24:	0b03213c 	bleq	ca11c <__RW_SIZE__+0xc9b94>
    1c28:	0b03213c 	bleq	ca120 <__RW_SIZE__+0xc9b98>
    1c2c:	0b03213c 	bleq	ca124 <__RW_SIZE__+0xc9b9c>
    1c30:	0b03213c 	bleq	ca128 <__RW_SIZE__+0xc9ba0>
    1c34:	0b03213c 	bleq	ca12c <__RW_SIZE__+0xc9ba4>
    1c38:	0b03213c 	bleq	ca130 <__RW_SIZE__+0xc9ba8>
    1c3c:	0b03213c 	bleq	ca134 <__RW_SIZE__+0xc9bac>
    1c40:	0c03213c 	stfeqs	f2, [r3], {60}	; 0x3c
    1c44:	0c03213c 	stfeqs	f2, [r3], {60}	; 0x3c
    1c48:	0b03213c 	bleq	ca140 <__RW_SIZE__+0xc9bb8>
    1c4c:	0b03213c 	bleq	ca144 <__RW_SIZE__+0xc9bbc>
    1c50:	0b03213c 	bleq	ca148 <__RW_SIZE__+0xc9bc0>
    1c54:	0204233c 	andeq	r2, r4, #60, 6	; 0xf0000000
    1c58:	d608ad03 	strle	sl, [r8], -r3, lsl #26
    1c5c:	d3030104 	movwle	r0, #12548	; 0x3104
    1c60:	214b2e77 	hvccs	45799	; 0xb2e7
    1c64:	ab030204 	blge	c247c <__RW_SIZE__+0xc1ef4>
    1c68:	01042008 	tsteq	r4, r8
    1c6c:	4a77d303 	bmi	1df6880 <__RW_SIZE__+0x1df62f8>
    1c70:	02042121 	andeq	r2, r4, #1073741832	; 0x40000008
    1c74:	2008ab03 	andcs	sl, r8, r3, lsl #22
    1c78:	d7030104 	strle	r0, [r3, -r4, lsl #2]
    1c7c:	0a032e77 	beq	cd660 <__RW_SIZE__+0xcd0d8>
    1c80:	0c03212e 	stfeqs	f2, [r3], {46}	; 0x2e
    1c84:	0c03213c 	stfeqs	f2, [r3], {60}	; 0x3c
    1c88:	0b03213c 	bleq	ca180 <__RW_SIZE__+0xc9bf8>
    1c8c:	0b03213c 	bleq	ca184 <__RW_SIZE__+0xc9bfc>
    1c90:	0b03213c 	bleq	ca188 <__RW_SIZE__+0xc9c00>
    1c94:	0d03213c 	stfeqs	f2, [r3, #-240]	; 0xffffff10
    1c98:	2d59133c 	ldclcs	3, cr1, [r9, #-240]	; 0xffffff10
    1c9c:	9e0b0321 	cdpls	3, 0, cr0, cr11, cr1, {1}
    1ca0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1ca4:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1ca8:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1cac:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1cb0:	3c0b0321 	stccc	3, cr0, [fp], {33}	; 0x21
    1cb4:	3c0e0321 	stccc	3, cr0, [lr], {33}	; 0x21
    1cb8:	0b036721 	bleq	db944 <__RW_SIZE__+0xdb3bc>
    1cbc:	0b032158 	bleq	ca224 <__RW_SIZE__+0xc9c9c>
    1cc0:	0b03213c 	bleq	ca1b8 <__RW_SIZE__+0xc9c30>
    1cc4:	0204233c 	andeq	r2, r4, #60, 6	; 0xf0000000
    1cc8:	d606d303 	strle	sp, [r6], -r3, lsl #6
    1ccc:	ad030104 	stfges	f0, [r3, #-16]
    1cd0:	214b2e79 	hvccs	45801	; 0xb2e9
    1cd4:	d1030204 	tstle	r3, r4, lsl #4
    1cd8:	01042e06 	tsteq	r4, r6, lsl #28
    1cdc:	4a79ad03 	bmi	1e6d0f0 <__RW_SIZE__+0x1e6cb68>
    1ce0:	02042121 	andeq	r2, r4, #1073741832	; 0x40000008
    1ce4:	2006d103 	andcs	sp, r6, r3, lsl #2
    1ce8:	b1030104 	tstlt	r3, r4, lsl #2
    1cec:	0a032e79 	beq	cd6d8 <__RW_SIZE__+0xcd150>
    1cf0:	0b03213c 	bleq	ca1e8 <__RW_SIZE__+0xc9c60>
    1cf4:	0202213c 	andeq	r2, r2, #60, 2
    1cf8:	9d010100 	stflss	f0, [r1, #-0]
    1cfc:	02000000 	andeq	r0, r0, #0
    1d00:	00007200 	andeq	r7, r0, r0, lsl #4
    1d04:	fb010200 	blx	4250e <__RW_SIZE__+0x41f86>
    1d08:	01000d0e 	tsteq	r0, lr, lsl #26
    1d0c:	00010101 	andeq	r0, r1, r1, lsl #2
    1d10:	00010000 	andeq	r0, r1, r0
    1d14:	3a430100 	bcc	10c211c <__RW_SIZE__+0x10c1b94>
    1d18:	646f435c 	strbtvs	r4, [pc], #-860	; 1d20 <__RW_SIZE__+0x1798>
    1d1c:	756f5365 	strbvc	r5, [pc, #-869]!	; 19bf <__RW_SIZE__+0x1437>
    1d20:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    1d24:	6f535c79 	svcvs	0x00535c79
    1d28:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1d2c:	47207972 			; <UNDEFINED> instruction: 0x47207972
    1d30:	4c202b2b 	stcmi	11, cr2, [r0], #-172	; 0xffffff54
    1d34:	2f657469 	svccs	0x00657469
    1d38:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1d3c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1d40:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1d44:	6e692f69 	cdpvs	15, 6, cr2, cr9, cr9, {3}
    1d48:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1d4c:	73000065 	movwvc	r0, #101	; 0x65
    1d50:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1d54:	632e6b63 	teqvs	lr, #101376	; 0x18c00
    1d58:	00000000 	andeq	r0, r0, r0
    1d5c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    1d60:	336d635f 	cmncc	sp, #2080374785	; 0x7c000001
    1d64:	0000682e 	andeq	r6, r0, lr, lsr #16
    1d68:	74730000 	ldrbtvc	r0, [r3], #-0
    1d6c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1d70:	0100682e 	tsteq	r0, lr, lsr #16
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	74300205 	ldrtvc	r0, [r0], #-517	; 0xfffffdfb
    1d7c:	21150800 	tstcs	r5, r0, lsl #16
    1d80:	211fe567 	tstcs	pc, r7, ror #10
    1d84:	8313b021 	tsthi	r3, #33	; 0x21
    1d88:	21211e21 	teqcs	r1, r1, lsr #28
    1d8c:	13861332 	orrne	r1, r6, #-939524096	; 0xc8000000
    1d90:	59132359 	ldmdbpl	r3, {r0, r3, r4, r6, r8, r9, sp}
    1d94:	02591323 	subseq	r1, r9, #-1946157056	; 0x8c000000
    1d98:	01010003 	tsteq	r1, r3
    1d9c:	0000013a 	andeq	r0, r0, sl, lsr r1
    1da0:	007f0002 	rsbseq	r0, pc, r2
    1da4:	01020000 	mrseq	r0, (UNDEF: 2)
    1da8:	000d0efb 	strdeq	r0, [sp], -fp
    1dac:	01010101 	tsteq	r1, r1, lsl #2
    1db0:	01000000 	mrseq	r0, (UNDEF: 0)
    1db4:	43010000 	movwmi	r0, #4096	; 0x1000
    1db8:	6f435c3a 	svcvs	0x00435c3a
    1dbc:	6f536564 	svcvs	0x00536564
    1dc0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1dc4:	535c7972 	cmppl	ip, #1867776	; 0x1c8000
    1dc8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1dcc:	20797265 	rsbscs	r7, r9, r5, ror #4
    1dd0:	202b2b47 	eorcs	r2, fp, r7, asr #22
    1dd4:	6574694c 	ldrbvs	r6, [r4, #-2380]!	; 0xfffff6b4
    1dd8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1ddc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1de0:	61652d65 	cmnvs	r5, r5, ror #26
    1de4:	692f6962 	stmdbvs	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1de8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1dec:	00006564 	andeq	r6, r0, r4, ror #10
    1df0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1df4:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1df8:	63000000 	movwvs	r0, #0
    1dfc:	5f65726f 	svcpl	0x0065726f
    1e00:	2e336d63 	cdpcs	13, 3, cr6, cr3, cr3, {3}
    1e04:	00000068 	andeq	r0, r0, r8, rrx
    1e08:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1e0c:	31663233 	cmncc	r6, r3, lsr r2
    1e10:	682e7830 	stmdavs	lr!, {r4, r5, fp, ip, sp, lr}
    1e14:	00000000 	andeq	r0, r0, r0
    1e18:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1e1c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1e20:	00000100 	andeq	r0, r0, r0, lsl #2
    1e24:	02050000 	andeq	r0, r5, #0
    1e28:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
    1e2c:	2f5a241a 	svccs	0x005a241a
    1e30:	2c302a21 	ldccs	10, cr2, [r0], #-132	; 0xffffff7c
    1e34:	03212122 	teqeq	r1, #-2147483640	; 0x80000008
    1e38:	0327207a 	teqeq	r7, #122	; 0x7a
    1e3c:	23352079 	teqcs	r5, #121	; 0x79
    1e40:	232b312b 	teqcs	fp, #-1073741814	; 0xc000000a
    1e44:	4c1e222c 	lfmmi	f2, 4, [lr], {44}	; 0x2c
    1e48:	0067593e 	rsbeq	r5, r7, lr, lsr r9
    1e4c:	59010402 	stmdbpl	r1, {r1, sl}
    1e50:	23d74437 	bicscs	r4, r7, #922746880	; 0x37000000
    1e54:	00674b1d 	rsbeq	r4, r7, sp, lsl fp
    1e58:	59010402 	stmdbpl	r1, {r1, sl}
    1e5c:	592c225a 	stmdbpl	ip!, {r1, r3, r4, r6, r9, sp}
    1e60:	4b592d21 	blmi	164d2ec <__RW_SIZE__+0x164cd64>
    1e64:	02042136 	andeq	r2, r4, #-2147483635	; 0x8000000d
    1e68:	200bbe03 	andcs	fp, fp, r3, lsl #28
    1e6c:	d5030104 	strle	r0, [r3, #-260]	; 0xfffffefc
    1e70:	02046674 	andeq	r6, r4, #116, 12	; 0x7400000
    1e74:	2e0bab03 	vmlacs.f64	d10, d11, d3
    1e78:	d5030104 	strle	r0, [r3, #-260]	; 0xfffffefc
    1e7c:	2c3e2e74 	ldccs	14, cr2, [lr], #-464	; 0xfffffe30
    1e80:	592d2159 	pushpl	{r0, r3, r4, r6, r8, sp}
    1e84:	2e6b034c 	cdpcs	3, 6, cr0, cr11, cr12, {2}
    1e88:	3a242a4e 	bcc	90c7c8 <__RW_SIZE__+0x90c240>
    1e8c:	21301c4c 	teqcs	r0, ip, asr #24
    1e90:	2121222b 	teqcs	r1, fp, lsr #4
    1e94:	03020422 	movweq	r0, #9250	; 0x2422
    1e98:	04200bde 	strteq	r0, [r0], #-3038	; 0xfffff422
    1e9c:	74a20301 	strtvc	r0, [r2], #769	; 0x301
    1ea0:	02044b2e 	andeq	r4, r4, #47104	; 0xb800
    1ea4:	200bdd03 	andcs	sp, fp, r3, lsl #26
    1ea8:	a3030104 	movwge	r0, #12548	; 0x3104
    1eac:	02042e74 	andeq	r2, r4, #116, 28	; 0x740
    1eb0:	3c0bdd03 	stccc	13, cr13, [fp], {3}
    1eb4:	a3030104 	movwge	r0, #12548	; 0x3104
    1eb8:	02042e74 	andeq	r2, r4, #116, 28	; 0x740
    1ebc:	200bdd03 	andcs	sp, fp, r3, lsl #26
    1ec0:	a5030104 	strge	r0, [r3, #-260]	; 0xfffffefc
    1ec4:	02042e74 	andeq	r2, r4, #116, 28	; 0x740
    1ec8:	580ba603 	stmdapl	fp, {r0, r1, r9, sl, sp, pc}
    1ecc:	dc030104 	stfles	f0, [r3], {4}
    1ed0:	0a032074 	beq	ca0a8 <__RW_SIZE__+0xc9b20>
    1ed4:	00020258 	andeq	r0, r2, r8, asr r2
    1ed8:	027a0101 	rsbseq	r0, sl, #1073741824	; 0x40000000
    1edc:	00020000 	andeq	r0, r2, r0
    1ee0:	00000118 	andeq	r0, r0, r8, lsl r1
    1ee4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1ee8:	0101000d 	tsteq	r1, sp
    1eec:	00000101 	andeq	r0, r0, r1, lsl #2
    1ef0:	00000100 	andeq	r0, r0, r0, lsl #2
    1ef4:	5c3a4301 	ldcpl	3, cr4, [sl], #-4
    1ef8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    1efc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f00:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1f04:	756f535c 	strbvc	r5, [pc, #-860]!	; 1bb0 <__RW_SIZE__+0x1628>
    1f08:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    1f0c:	2b472079 	blcs	11ca0f8 <__RW_SIZE__+0x11c9b70>
    1f10:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
    1f14:	612f6574 	teqvs	pc, r4, ror r5	; <UNPREDICTABLE>
    1f18:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1f1c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1f20:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1f24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1f28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1f2c:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    1f30:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    1f34:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f38:	79726563 	ldmdbvc	r2!, {r0, r1, r5, r6, r8, sl, sp, lr}^
    1f3c:	756f535c 	strbvc	r5, [pc, #-860]!	; 1be8 <__RW_SIZE__+0x1660>
    1f40:	72656372 	rsbvc	r6, r5, #-939524095	; 0xc8000001
    1f44:	2b472079 	blcs	11ca130 <__RW_SIZE__+0x11c9ba8>
    1f48:	694c202b 	stmdbvs	ip, {r0, r1, r3, r5, sp}^
    1f4c:	6c2f6574 	cfstr32vs	mvfx6, [pc], #-464	; 1d84 <__RW_SIZE__+0x17fc>
    1f50:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1f54:	612f6363 	teqvs	pc, r3, ror #6
    1f58:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1f5c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1f60:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1f64:	382e342f 	stmdacc	lr!, {r0, r1, r2, r3, r5, sl, ip, sp}
    1f68:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1f6c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1f70:	00006564 	andeq	r6, r0, r4, ror #10
    1f74:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    1f78:	0000632e 	andeq	r6, r0, lr, lsr #6
    1f7c:	6f630000 	svcvs	0x00630000
    1f80:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1f84:	682e336d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    1f88:	00000000 	andeq	r0, r0, r0
    1f8c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f90:	30316632 	eorscc	r6, r1, r2, lsr r6
    1f94:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1f98:	73000000 	movwvc	r0, #0
    1f9c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1fa0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1fa4:	73000001 	movwvc	r0, #1
    1fa8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1fac:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1fb0:	73000002 	movwvc	r0, #2
    1fb4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    1fb8:	00682e67 	rsbeq	r2, r8, r7, ror #28
    1fbc:	63000002 	movwvs	r0, #2
    1fc0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    1fc4:	0100682e 	tsteq	r0, lr, lsr #16
    1fc8:	74730000 	ldrbtvc	r0, [r3], #-0
    1fcc:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
    1fd0:	00010068 	andeq	r0, r1, r8, rrx
    1fd4:	72747300 	rsbsvc	r7, r4, #0, 6
    1fd8:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1fdc:	00010068 	andeq	r0, r1, r8, rrx
    1fe0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1fe4:	2e62696c 	cdpcs	9, 6, cr6, cr2, cr12, {3}
    1fe8:	00010068 	andeq	r0, r1, r8, rrx
    1fec:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    1ff0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    1ff4:	003e6e69 	eorseq	r6, lr, r9, ror #28
    1ff8:	00000000 	andeq	r0, r0, r0
    1ffc:	80020500 	andhi	r0, r2, r0, lsl #10
    2000:	1a080076 	bne	2021e0 <__RW_SIZE__+0x201c58>
    2004:	3d2c5a25 	vstmdbcc	ip!, {s10-s46}
    2008:	673d2d21 	ldrvs	r2, [sp, -r1, lsr #26]!
    200c:	3d13084c 	ldccc	8, cr0, [r3, #-304]	; 0xfffffed0
    2010:	302f5908 	eorcc	r5, pc, r8, lsl #18
    2014:	2d211e68 	stccs	14, cr1, [r1, #-416]!	; 0xfffffe60
    2018:	6a212121 	bvs	84a4a4 <__RW_SIZE__+0x849f1c>
    201c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    2020:	29ad3401 	stmibcs	sp!, {r0, sl, ip, sp}
    2024:	01040200 	mrseq	r0, R12_usr
    2028:	75064a06 	strvc	r4, [r6, #-2566]	; 0xfffff5fa
    202c:	76032152 			; <UNDEFINED> instruction: 0x76032152
    2030:	341d4b2e 	ldrcc	r4, [sp], #-2862	; 0xfffff4d2
    2034:	034e2575 	movteq	r2, #58741	; 0xe575
    2038:	03752e72 	cmneq	r5, #1824	; 0x720
    203c:	413c3c10 	teqmi	ip, r0, lsl ip
    2040:	7403212d 	strvc	r2, [r3], #-301	; 0xfffffed3
    2044:	3c76032e 	ldclcc	3, cr0, [r6], #-184	; 0xffffff48
    2048:	75341d59 	ldrvc	r1, [r4, #-3417]!	; 0xfffff2a7
    204c:	4a0f0325 	bmi	3c2ce8 <__RW_SIZE__+0x3c2760>
    2050:	75586703 	ldrbvc	r6, [r8, #-1795]	; 0xfffff8fd
    2054:	132e1b03 	teqne	lr, #3072	; 0xc00
    2058:	03313484 	teqeq	r1, #132, 8	; 0x84000000
    205c:	02000175 	andeq	r0, r0, #1073741853	; 0x4000001d
    2060:	4a060104 	bmi	182478 <__RW_SIZE__+0x181ef0>
    2064:	0f033e06 	svceq	0x00033e06
    2068:	0323312e 	teqeq	r3, #-2147483637	; 0x8000000b
    206c:	17032069 	strne	r2, [r3, -r9, rrx]
    2070:	6503242e 	strvs	r2, [r3, #-1070]	; 0xfffffbd2
    2074:	2e640320 	cdpcs	3, 6, cr0, cr4, cr0, {1}
    2078:	3e201c03 	cdpcc	12, 2, cr1, cr0, cr3, {0}
    207c:	032e0f03 	teqeq	lr, #3, 30
    2080:	30302e0a 	eorscc	r2, r0, sl, lsl #28
    2084:	031f4b30 	tsteq	pc, #48, 22	; 0xc000
    2088:	c7033c40 	strgt	r3, [r3, -r0, asr #24]
    208c:	b9032000 	stmdblt	r3, {sp}
    2090:	75263c7f 	strvc	r3, [r6, #-3199]!	; 0xfffff381
    2094:	c9037537 	stmdbgt	r3, {r0, r1, r2, r4, r5, r8, sl, ip, sp, lr}
    2098:	b6032e00 	strlt	r2, [r3], -r0, lsl #28
    209c:	ca03207f 	bgt	ca2a0 <__RW_SIZE__+0xc9d18>
    20a0:	b6032e00 	strlt	r2, [r3], -r0, lsl #28
    20a4:	3191207f 	orrscc	r2, r1, pc, ror r0
    20a8:	00ca0375 	sbceq	r0, sl, r5, ror r3
    20ac:	2e09033c 	mcrcs	3, 0, r0, cr9, cr12, {1}
    20b0:	03493f3e 	movteq	r3, #40766	; 0x9f3e
    20b4:	03222075 	teqeq	r2, #117	; 0x75
    20b8:	72032e0d 	andvc	r2, r3, #13, 28	; 0xd0
    20bc:	2014032e 	andscs	r0, r4, lr, lsr #6
    20c0:	22221e4c 	eorcs	r1, r2, #76, 28	; 0x4c0
    20c4:	6671035f 			; <UNDEFINED> instruction: 0x6671035f
    20c8:	524a1903 	subpl	r1, sl, #49152	; 0xc000
    20cc:	362e7803 	strtcc	r7, [lr], -r3, lsl #16
    20d0:	223c7803 	eorscs	r7, ip, #196608	; 0x30000
    20d4:	1b212d3d 	blne	84d5d0 <__RW_SIZE__+0x84d048>
    20d8:	403c0e03 	eorsmi	r0, ip, r3, lsl #28
    20dc:	032e6203 	teqeq	lr, #805306368	; 0x30000000
    20e0:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    20e4:	67030104 	strvs	r0, [r3, -r4, lsl #2]
    20e8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    20ec:	02004d01 	andeq	r4, r0, #1, 26	; 0x40
    20f0:	002d0104 	eoreq	r0, sp, r4, lsl #2
    20f4:	1e010402 	cdpne	4, 0, cr0, cr1, cr2, {0}
    20f8:	3d2e1303 	stccc	3, cr1, [lr, #-12]!
    20fc:	01040200 	mrseq	r0, R12_usr
    2100:	03062e06 	movweq	r2, #28166	; 0x6e06
    2104:	26032e74 			; <UNDEFINED> instruction: 0x26032e74
    2108:	0348154a 	movteq	r1, #34122	; 0x854a
    210c:	02042009 	andeq	r2, r4, #9
    2110:	200ab203 	andcs	fp, sl, r3, lsl #4
    2114:	ce030104 	adfgts	f0, f3, f4
    2118:	02042e75 	andeq	r2, r4, #1872	; 0x750
    211c:	4a0ab203 	bmi	2ae930 <__RW_SIZE__+0x2ae3a8>
    2120:	ce030104 	adfgts	f0, f3, f4
    2124:	02043c75 	andeq	r3, r4, #29952	; 0x7500
    2128:	200ab203 	andcs	fp, sl, r3, lsl #4
    212c:	c7030104 	strgt	r0, [r3, -r4, lsl #2]
    2130:	02043c75 	andeq	r3, r4, #29952	; 0x7500
    2134:	200ae103 	andcs	lr, sl, r3, lsl #2
    2138:	9f030104 	svcls	0x00030104
    213c:	02042e75 	andeq	r2, r4, #1872	; 0x750
    2140:	200ae103 	andcs	lr, sl, r3, lsl #2
    2144:	9f030104 	svcls	0x00030104
    2148:	02043c75 	andeq	r3, r4, #29952	; 0x7500
    214c:	3c0ae103 	stfccd	f6, [sl], {3}
    2150:	022e4b03 	eoreq	r4, lr, #3072	; 0xc00
    2154:	01010002 	tsteq	r1, r2
    2158:	0000007c 	andeq	r0, r0, ip, ror r0
    215c:	001d0002 	andseq	r0, sp, r2
    2160:	01020000 	mrseq	r0, (UNDEF: 2)
    2164:	000d0efb 	strdeq	r0, [sp], -fp
    2168:	01010101 	tsteq	r1, r1, lsl #2
    216c:	01000000 	mrseq	r0, (UNDEF: 0)
    2170:	00010000 	andeq	r0, r1, r0
    2174:	30747263 	rsbscc	r7, r4, r3, ror #4
    2178:	0000732e 	andeq	r7, r0, lr, lsr #6
    217c:	00000000 	andeq	r0, r0, r0
    2180:	30ec0205 	rsccc	r0, ip, r5, lsl #4
    2184:	fb030800 	blx	c418e <__RW_SIZE__+0xc3c06>
    2188:	21210100 	teqcs	r1, r0, lsl #2
    218c:	21232122 	teqcs	r3, r2, lsr #2
    2190:	232f2f21 	teqcs	pc, #33, 30	; 0x84
    2194:	21213021 	teqcs	r1, r1, lsr #32
    2198:	200a032f 	andcs	r0, sl, pc, lsr #6
    219c:	30212f21 	eorcc	r2, r1, r1, lsr #30
    21a0:	2f2f2730 	svccs	0x002f2730
    21a4:	222f2f22 	eorcs	r2, pc, #34, 30	; 0x88
    21a8:	302f2121 	eorcc	r2, pc, r1, lsr #2
    21ac:	22212f2f 	eorcs	r2, r1, #47, 30	; 0xbc
    21b0:	302f2121 	eorcc	r2, pc, r1, lsr #2
    21b4:	032f2f21 	teqeq	pc, #33, 30	; 0x84
    21b8:	0128021b 	teqeq	r8, fp, lsl r2
    21bc:	21212f21 	teqcs	r1, r1, lsr #30
    21c0:	98032f2f 	stmdals	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    21c4:	2f2f207f 	svccs	0x002f207f
    21c8:	032e0d03 	teqeq	lr, #3, 26	; 0xc0
    21cc:	03302e10 	teqeq	r0, #16, 28	; 0x100
    21d0:	02302e12 	eorseq	r2, r0, #288	; 0x120
    21d4:	01010002 	tsteq	r1, r2

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
       4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
       8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
       c:	44420074 	strbmi	r0, [r2], #-116	; 0xffffff8c
      10:	46005243 	strmi	r5, [r0], -r3, asr #4
      14:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
      18:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      1c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      20:	42484100 	submi	r4, r8, #0, 2
      24:	00524e45 	subseq	r4, r2, r5, asr #28
      28:	52505257 	subspl	r5, r0, #1879048197	; 0x70000005
      2c:	6f6c6300 	svcvs	0x006c6300
      30:	632e6b63 	teqvs	lr, #101376	; 0x18c00
      34:	42504100 	subsmi	r4, r0, #0, 2
      38:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
      3c:	68730052 	ldmdavs	r3!, {r1, r4, r6}^
      40:	2074726f 	rsbscs	r7, r4, pc, ror #4
      44:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
      48:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
      4c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      50:	4d544900 	ldclmi	9, cr4, [r4, #-0]
      54:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
      58:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
      5c:	504f0072 	subpl	r0, pc, r2, ror r0	; <UNPREDICTABLE>
      60:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
      64:	6e750052 	mrcvs	0, 3, r0, cr5, cr2, {2}
      68:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
      6c:	63206465 	teqvs	r0, #1694498816	; 0x65000000
      70:	00726168 	rsbseq	r6, r2, r8, ror #2
      74:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
      78:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
      7c:	42504100 	subsmi	r4, r0, #0, 2
      80:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
      84:	42504100 	subsmi	r4, r0, #0, 2
      88:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
      8c:	42504100 	subsmi	r4, r0, #0, 2
      90:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
      94:	6f6c0052 	svcvs	0x006c0052
      98:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
      9c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      a0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
      a4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
      a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      ac:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      b0:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
      b4:	312e382e 	teqcc	lr, lr, lsr #16
      b8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
      bc:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
      c0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
      c4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
      c8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
      cc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
      d0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      d4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      d8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      dc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      e0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      e4:	73637061 	cmnvc	r3, #97	; 0x61
      e8:	6e6d2d20 	cdpvs	13, 6, cr2, cr13, cr0, {1}
      ec:	68742d6f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp}^
      f0:	2d626d75 	stclcs	13, cr6, [r2, #-468]!	; 0xfffffe2c
      f4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
      f8:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
      fc:	672d206b 	strvs	r2, [sp, -fp, rrx]!
     100:	334f2d20 	movtcc	r2, #64800	; 0xfd20
     104:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     108:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
     10c:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
     110:	662d206e 	strtvs	r2, [sp], -lr, rrx
     114:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     118:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     11c:	6168632d 	cmnvs	r8, sp, lsr #6
     120:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
     124:	732d6f6e 	teqvc	sp, #440	; 0x1b8
     128:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     12c:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
     130:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     134:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
     138:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; ffffffa8 <MSP_BASE+0xdfffafa8>
     13c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
     140:	73006e6f 	movwvc	r6, #3695	; 0xe6f
     144:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
     148:	00657079 	rsbeq	r7, r5, r9, ror r0
     14c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     150:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     154:	43007469 	movwmi	r7, #1129	; 0x469
     158:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     15c:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     160:	6963636b 	stmdbvs	r3!, {r0, r1, r3, r5, r6, r8, r9, sp, lr}^
     164:	5c637473 	cfstrdpl	mvd7, [r3], #-460	; 0xfffffe34
     168:	6b736544 	blvs	1cd9680 <__RW_SIZE__+0x1cd90f8>
     16c:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
     170:	454d4147 	strbmi	r4, [sp, #-327]	; 0xfffffeb9
     174:	4f52505f 	svcmi	0x0052505f
     178:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
     17c:	2858455f 	ldmdacs	r8, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
     180:	fcc7c5bd 	stc2l	5, cr12, [r7], {189}	; 0xbd
     184:	c644434c 	strbgt	r4, [r4], -ip, asr #6
     188:	29d4c7f7 	ldmibcs	r4, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, lr, pc}^
     18c:	3139395c 	teqcc	r9, ip, asr r9
     190:	4d41472e 	stclmi	7, cr4, [r1, #-184]	; 0xffffff48
     194:	45545f45 	ldrbmi	r5, [r4, #-3909]	; 0xfffff0bb
     198:	414c504d 	cmpmi	ip, sp, asr #32
     19c:	455f4554 	ldrbmi	r4, [pc, #-1364]	; fffffc50 <MSP_BASE+0xdfffac50>
     1a0:	68730058 	ldmdavs	r3!, {r3, r4, r6}^
     1a4:	2074726f 	rsbscs	r7, r4, pc, ror #4
     1a8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1ac:	5f434352 	svcpl	0x00434352
     1b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1b4:	00666544 	rsbeq	r6, r6, r4, asr #10
     1b8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     1bc:	745f3233 	ldrbvc	r3, [pc], #-563	; 1c4 <__ZI_SIZE__+0x154>
     1c0:	535f5f00 	cmppl	pc, #0, 30
     1c4:	58455254 	stmdapl	r5, {r2, r4, r6, r9, ip, lr}^
     1c8:	64610048 	strbtvs	r0, [r1], #-72	; 0xffffffb8
     1cc:	5f007264 	svcpl	0x00007264
     1d0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     1d4:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
     1d8:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
     1dc:	6c617600 	stclvs	6, cr7, [r1], #-0
     1e0:	5f006575 	svcpl	0x00006575
     1e4:	52444c5f 	subpl	r4, r4, #24320	; 0x5f00
     1e8:	00575845 	subseq	r5, r7, r5, asr #16
     1ec:	4d697270 	sfmmi	f7, 2, [r9, #-448]!	; 0xfffffe40
     1f0:	006b7361 	rsbeq	r7, fp, r1, ror #6
     1f4:	4f706f74 	svcmi	0x00706f74
     1f8:	6f725066 	svcvs	0x00725066
     1fc:	61745363 	cmnvs	r4, r3, ror #6
     200:	66006b63 	strvs	r6, [r0], -r3, ror #22
     204:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     208:	6b73614d 	blvs	1cd8744 <__RW_SIZE__+0x1cd81bc>
     20c:	726f6300 	rsbvc	r6, pc, #0, 6
     210:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     214:	00632e33 	rsbeq	r2, r3, r3, lsr lr
     218:	65675f5f 	strbvs	r5, [r7, #-3935]!	; 0xfffff0a1
     21c:	534d5f74 	movtpl	r5, #57204	; 0xdf74
     220:	5f5f0050 	svcpl	0x005f0050
     224:	5f746573 	svcpl	0x00746573
     228:	0050534d 	subseq	r5, r0, sp, asr #6
     22c:	65675f5f 	strbvs	r5, [r7, #-3935]!	; 0xfffff0a1
     230:	53505f74 	cmppl	r0, #116, 30	; 0x1d0
     234:	5f5f0050 	svcpl	0x005f0050
     238:	5f746573 	svcpl	0x00746573
     23c:	00505350 	subseq	r5, r0, r0, asr r3
     240:	45525f5f 	ldrbmi	r5, [r2, #-3935]	; 0xfffff0a1
     244:	00363156 	eorseq	r3, r6, r6, asr r1
     248:	65675f5f 	strbvs	r5, [r7, #-3935]!	; 0xfffff0a1
     24c:	52505f74 	subspl	r5, r0, #116, 30	; 0x1d0
     250:	53414d49 	movtpl	r4, #7497	; 0x1d49
     254:	5f5f004b 	svcpl	0x005f004b
     258:	5f746573 	svcpl	0x00746573
     25c:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
     260:	53414d54 	movtpl	r4, #7508	; 0x1d54
     264:	6f63004b 	svcvs	0x0063004b
     268:	6f72746e 	svcvs	0x0072746e
     26c:	5f5f006c 	svcpl	0x005f006c
     270:	5f746573 	svcpl	0x00746573
     274:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
     278:	00495250 	subeq	r5, r9, r0, asr r2
     27c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     280:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     284:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     288:	5f00746c 	svcpl	0x0000746c
     28c:	5645525f 			; <UNDEFINED> instruction: 0x5645525f
     290:	74004853 	strvc	r4, [r0], #-2131	; 0xfffff7ad
     294:	664f706f 	strbvs	r7, [pc], -pc, rrx
     298:	6e69614d 	powvsem	f6, f1, #5.0
     29c:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     2a0:	5f5f006b 	svcpl	0x005f006b
     2a4:	5f746573 	svcpl	0x00746573
     2a8:	4d495250 	sfmmi	f5, 2, [r9, #-320]	; 0xfffffec0
     2ac:	004b5341 	subeq	r5, fp, r1, asr #6
     2b0:	45525f5f 	ldrbmi	r5, [r2, #-3935]	; 0xfffff0a1
     2b4:	5f5f0056 	svcpl	0x005f0056
     2b8:	5f746567 	svcpl	0x00746567
     2bc:	544e4f43 	strbpl	r4, [lr], #-3907	; 0xfffff0bd
     2c0:	004c4f52 	subeq	r4, ip, r2, asr pc
     2c4:	42525f5f 	subsmi	r5, r2, #380	; 0x17c
     2c8:	5f005449 	svcpl	0x00005449
     2cc:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     2d0:	5341425f 	movtpl	r4, #4703	; 0x125f
     2d4:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
     2d8:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     2dc:	5f363174 	svcpl	0x00363174
     2e0:	5f5f0074 	svcpl	0x005f0074
     2e4:	45525453 	ldrbmi	r5, [r2, #-1107]	; 0xfffffbad
     2e8:	5f005758 	svcpl	0x00005758
     2ec:	52444c5f 	subpl	r4, r4, #24320	; 0x5f00
     2f0:	00425845 	subeq	r5, r2, r5, asr #16
     2f4:	54535f5f 	ldrbpl	r5, [r3], #-3935	; 0xfffff0a1
     2f8:	42584552 	subsmi	r4, r8, #343932928	; 0x14800000
     2fc:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
     300:	465f7465 	ldrbmi	r7, [pc], -r5, ror #8
     304:	544c5541 	strbpl	r5, [ip], #-1345	; 0xfffffabf
     308:	4b53414d 	blmi	14d0844 <__RW_SIZE__+0x14d02bc>
     30c:	4c5f5f00 	mrrcmi	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
     310:	58455244 	stmdapl	r5, {r2, r6, r9, ip, lr}^
     314:	6e650048 	cdpvs	0, 6, cr0, cr5, cr8, {2}
     318:	31783867 	cmncc	r8, r7, ror #16
     31c:	72670036 	rsbvc	r0, r7, #54	; 0x36
     320:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
     324:	632e7363 	teqvs	lr, #-1946157055	; 0x8c000001
     328:	636b6200 	cmnvs	fp, #0, 4
     32c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
     330:	72747300 	rsbsvc	r7, r4, #0, 6
     334:	00676e69 	rsbeq	r6, r7, r9, ror #28
     338:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
     33c:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     340:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     344:	0066746e 	rsbeq	r7, r6, lr, ror #8
     348:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
     34c:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
     350:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     354:	5f007473 	svcpl	0x00007473
     358:	5f61765f 	svcpl	0x0061765f
     35c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     360:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     364:	7475505f 	ldrbtvc	r5, [r5], #-95	; 0xffffffa1
     368:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     36c:	4c00706d 	stcmi	0, cr7, [r0], {109}	; 0x6d
     370:	505f6463 	subspl	r6, pc, r3, ror #8
     374:	505f7475 	subspl	r7, pc, r5, ror r4	; <UNPREDICTABLE>
     378:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
     37c:	615f5f00 	cmpvs	pc, r0, lsl #30
     380:	634c0070 	movtvs	r0, #49264	; 0xc070
     384:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
     388:	75505f67 	ldrbvc	r5, [r0, #-3943]	; 0xfffff099
     38c:	00686374 	rsbeq	r6, r8, r4, ror r3
     390:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
     394:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     398:	616d7469 	cmnvs	sp, r9, ror #8
     39c:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
     3a0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
     3a4:	0066746e 	rsbeq	r7, r6, lr, ror #8
     3a8:	5f425355 	svcpl	0x00425355
     3ac:	435f504c 	cmpmi	pc, #76	; 0x4c
     3b0:	5f314e41 	svcpl	0x00314e41
     3b4:	5f305852 	svcpl	0x00305852
     3b8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3bc:	52534200 	subspl	r4, r3, #0, 4
     3c0:	41430052 	qdaddmi	r0, r2, r3
     3c4:	535f314e 	cmppl	pc, #-2147483629	; 0x80000013
     3c8:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     3cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3d0:	31414d44 	cmpcc	r1, r4, asr #26
     3d4:	6168435f 	cmnvs	r8, pc, asr r3
     3d8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     3dc:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     3e0:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     3e4:	5f324332 	svcpl	0x00324332
     3e8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     3ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
     3f0:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     3f4:	5152495f 	cmppl	r2, pc, asr r9
     3f8:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     3fc:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     400:	6e6e6168 	powvsez	f6, f6, #0.0
     404:	5f326c65 	svcpl	0x00326c65
     408:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     40c:	414c4600 	cmpmi	ip, r0, lsl #12
     410:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     414:	006e5152 	rsbeq	r5, lr, r2, asr r1
     418:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
     41c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     420:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     424:	006e5152 	rsbeq	r5, lr, r2, asr r1
     428:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     42c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     430:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     434:	50006e51 	andpl	r6, r0, r1, asr lr
     438:	53646e65 	cmnpl	r4, #1616	; 0x650
     43c:	52495f56 	subpl	r5, r9, #344	; 0x158
     440:	4a006e51 	bmi	1bd8c <__RW_SIZE__+0x1b804>
     444:	505f676f 	subspl	r6, pc, pc, ror #14
     448:	5f6c6c6f 	svcpl	0x006c6c6f
     44c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     450:	43435200 	movtmi	r5, #12800	; 0x3200
     454:	5152495f 	cmppl	r2, pc, asr r9
     458:	654d006e 	strbvs	r0, [sp, #-110]	; 0xffffff92
     45c:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     460:	616e614d 	cmnvs	lr, sp, asr #2
     464:	656d6567 	strbvs	r6, [sp, #-1383]!	; 0xfffffa99
     468:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     46c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     470:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     474:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     478:	52425f31 	subpl	r5, r2, #49, 30	; 0xc4
     47c:	52495f4b 	subpl	r5, r9, #300	; 0x12c
     480:	52006e51 	andpl	r6, r0, #1296	; 0x510
     484:	56524553 			; <UNDEFINED> instruction: 0x56524553
     488:	00314445 	eorseq	r4, r1, r5, asr #8
     48c:	31495053 	qdaddcc	r5, r3, r9
     490:	5152495f 	cmppl	r2, pc, asr r9
     494:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     498:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     49c:	6e6e6168 	powvsez	f6, f6, #0.0
     4a0:	5f346c65 	svcpl	0x00346c65
     4a4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     4a8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     4ac:	6e455f43 	cdpvs	15, 4, cr5, cr5, cr3, {2}
     4b0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     4b4:	00515249 	subseq	r5, r1, r9, asr #4
     4b8:	5f79654b 	svcpl	0x0079654b
     4bc:	63656843 	cmnvs	r5, #4390912	; 0x430000
     4c0:	6e495f6b 	cdpvs	15, 4, cr5, cr9, cr11, {3}
     4c4:	00747570 	rsbseq	r7, r4, r0, ror r5
     4c8:	314e4143 	cmpcc	lr, r3, asr #2
     4cc:	3158525f 	cmpcc	r8, pc, asr r2
     4d0:	5152495f 	cmppl	r2, pc, asr r9
     4d4:	5355006e 	cmppl	r5, #110	; 0x6e
     4d8:	50485f42 	subpl	r5, r8, r2, asr #30
     4dc:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     4e0:	58545f31 	ldmdapl	r4, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     4e4:	5152495f 	cmppl	r2, pc, asr r9
     4e8:	5249006e 	subpl	r0, r9, #110	; 0x6e
     4ec:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 4f4 <MSP_SIZE+0xf4>
     4f0:	00657079 	rsbeq	r7, r5, r9, ror r0
     4f4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     4f8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     4fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     500:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     504:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     508:	4a006e51 	bmi	1be54 <__RW_SIZE__+0x1b8cc>
     50c:	475f676f 	ldrbmi	r6, [pc, -pc, ror #14]
     510:	505f7465 	subspl	r7, pc, r5, ror #8
     514:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     518:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     51c:	5f324332 	svcpl	0x00324332
     520:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
     524:	006e5152 	rsbeq	r5, lr, r2, asr r1
     528:	4f494641 	svcmi	0x00494641
     52c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     530:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     534:	414d4400 	cmpmi	sp, r0, lsl #8
     538:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     53c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     540:	495f366c 	ldmdbmi	pc, {r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     544:	006e5152 	rsbeq	r5, lr, r2, asr r1
     548:	4349564e 	movtmi	r5, #38478	; 0x964e
     54c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     550:	65507261 	ldrbvs	r7, [r0, #-609]	; 0xfffffd9f
     554:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     558:	51524967 	cmppl	r2, r7, ror #18
     55c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     560:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     564:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     568:	5f31414d 	svcpl	0x0031414d
     56c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     570:	316c656e 	cmncc	ip, lr, ror #10
     574:	5152495f 	cmppl	r2, pc, asr r9
     578:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     57c:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
     580:	42535500 	subsmi	r5, r3, #0, 10
     584:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     588:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     58c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     590:	47445757 	smlsldmi	r5, r4, r7, r7
     594:	5152495f 	cmppl	r2, pc, asr r9
     598:	7542006e 	strbvc	r0, [r2, #-110]	; 0xffffff92
     59c:	75614673 	strbvc	r4, [r1, #-1651]!	; 0xfffff98d
     5a0:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     5a4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5a8:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     5ac:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     5b0:	50006e51 	andpl	r6, r0, r1, asr lr
     5b4:	495f4456 	ldmdbmi	pc, {r1, r2, r4, r6, sl, lr}^	; <UNPREDICTABLE>
     5b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5bc:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     5c0:	676f4a00 	strbvs	r4, [pc, -r0, lsl #20]!
     5c4:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     5c8:	654b5f74 	strbvs	r5, [fp, #-3956]	; 0xfffff08c
     5cc:	65525f79 	ldrbvs	r5, [r2, #-3961]	; 0xfffff087
     5d0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     5d4:	44006465 	strmi	r6, [r0], #-1125	; 0xfffffb9b
     5d8:	5f31414d 	svcpl	0x0031414d
     5dc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     5e0:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     5e4:	5152495f 	cmppl	r2, pc, asr r9
     5e8:	3249006e 	subcc	r0, r9, #110	; 0x6e
     5ec:	455f3143 	ldrbmi	r3, [pc, #-323]	; 4b1 <MSP_SIZE+0xb1>
     5f0:	52495f56 	subpl	r5, r9, #344	; 0x158
     5f4:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     5f8:	5f314d49 	svcpl	0x00314d49
     5fc:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     600:	006e5152 	rsbeq	r5, lr, r2, asr r1
     604:	52495453 	subpl	r5, r9, #1392508928	; 0x53000000
     608:	43545200 	cmpmi	r4, #0, 4
     60c:	5152495f 	cmppl	r2, pc, asr r9
     610:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     614:	56524553 			; <UNDEFINED> instruction: 0x56524553
     618:	00304445 	eorseq	r4, r0, r5, asr #8
     61c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     620:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     624:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
     628:	56524553 			; <UNDEFINED> instruction: 0x56524553
     62c:	00334445 	eorseq	r4, r3, r5, asr #8
     630:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     634:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     638:	45520034 	ldrbmi	r0, [r2, #-52]	; 0xffffffcc
     63c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     640:	00354445 	eorseq	r4, r5, r5, asr #8
     644:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     648:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     64c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     650:	41535500 	cmpmi	r3, r0, lsl #10
     654:	5f315452 	svcpl	0x00315452
     658:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     65c:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
     660:	6b73614d 	blvs	1cd8b9c <__RW_SIZE__+0x1cd8614>
     664:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     668:	5f746e49 	svcpl	0x00746e49
     66c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     670:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     674:	43435f31 	movtmi	r5, #16177	; 0x3f31
     678:	5152495f 	cmppl	r2, pc, asr r9
     67c:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
     680:	45005253 	strmi	r5, [r0, #-595]	; 0xfffffdad
     684:	31495458 	cmpcc	r9, r8, asr r4
     688:	5152495f 	cmppl	r2, pc, asr r9
     68c:	564e006e 	strbpl	r0, [lr], -lr, rrx
     690:	545f4349 	ldrbpl	r4, [pc], #-841	; 698 <__RW_SIZE__+0x110>
     694:	00657079 	rsbeq	r7, r5, r9, ror r0
     698:	314d4954 	cmpcc	sp, r4, asr r9
     69c:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     6a0:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 52c <MSP_SIZE+0x12c>
     6a4:	5152495f 	cmppl	r2, pc, asr r9
     6a8:	5047006e 	subpl	r0, r7, lr, rrx
     6ac:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 6b4 <__RW_SIZE__+0x12c>
     6b0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     6b4:	49006665 	stmdbmi	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     6b8:	5f314332 	svcpl	0x00314332
     6bc:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     6c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6c4:	5f676f6a 	svcpl	0x00676f6a
     6c8:	2e79656b 	cdpcs	5, 7, cr6, cr9, cr11, {3}
     6cc:	79530063 	ldmdbvc	r3, {r0, r1, r5, r6}^
     6d0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     6d4:	52495f6b 	subpl	r5, r9, #428	; 0x1ac
     6d8:	4d006e51 	stcmi	14, cr6, [r0, #-324]	; 0xfffffebc
     6dc:	32525041 	subscc	r5, r2, #65	; 0x41
     6e0:	49575300 	ldmdbmi	r7, {r8, r9, ip, lr}^
     6e4:	54005245 	strpl	r5, [r0], #-581	; 0xfffffdbb
     6e8:	5f324d49 	svcpl	0x00324d49
     6ec:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6f0:	53544600 	cmppl	r4, #0, 12
     6f4:	6f4a0052 	svcvs	0x004a0052
     6f8:	65475f67 	strbvs	r5, [r7, #-3943]	; 0xfffff099
     6fc:	72505f74 	subsvc	r5, r0, #116, 30	; 0x1d0
     700:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
     704:	61435f64 	cmpvs	r3, r4, ror #30
     708:	44006d6c 	strmi	r6, [r0], #-3436	; 0xfffff294
     70c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
     710:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
     714:	5f726f74 	svcpl	0x00726f74
     718:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     71c:	61735500 	cmnvs	r3, r0, lsl #10
     720:	61466567 	cmpvs	r6, r7, ror #10
     724:	5f746c75 	svcpl	0x00746c75
     728:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     72c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     730:	355f3949 	ldrbcc	r3, [pc, #-2377]	; fffffdef <MSP_BASE+0xdfffadef>
     734:	5152495f 	cmppl	r2, pc, asr r9
     738:	5653006e 	ldrbpl	r0, [r3], -lr, rrx
     73c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     740:	5152495f 	cmppl	r2, pc, asr r9
     744:	6f4a006e 	svcvs	0x004a006e
     748:	53495f67 	movtpl	r5, #40807	; 0x9f67
     74c:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
     750:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     754:	45434900 	strbmi	r4, [r3, #-2304]	; 0xfffff700
     758:	50530052 	subspl	r0, r3, r2, asr r0
     75c:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     760:	006e5152 	rsbeq	r5, lr, r2, asr r1
     764:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     768:	414d4400 	cmpmi	sp, r0, lsl #8
     76c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     770:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     774:	495f356c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     778:	006e5152 	rsbeq	r5, lr, r2, asr r1
     77c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     780:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     784:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
     788:	00525053 	subseq	r5, r2, r3, asr r0
     78c:	31434441 	cmpcc	r3, r1, asr #8
     790:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     794:	006e5152 	rsbeq	r5, lr, r2, asr r1
     798:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     79c:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     7a0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7a4:	52435645 	subpl	r5, r3, #72351744	; 0x4500000
     7a8:	676f4a00 	strbvs	r4, [pc, -r0, lsl #20]!
     7ac:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     7b0:	654b5f74 	strbvs	r5, [fp, #-3956]	; 0xfffff08c
     7b4:	72505f79 	subsvc	r5, r0, #484	; 0x1e4
     7b8:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
     7bc:	41540064 	cmpmi	r4, r4, rrx
     7c0:	5245504d 	subpl	r5, r5, #77	; 0x4d
     7c4:	5152495f 	cmppl	r2, pc, asr r9
     7c8:	434c006e 	movtmi	r0, #49262	; 0xc06e
     7cc:	5200524b 	andpl	r5, r0, #-1342177276	; 0xb0000004
     7d0:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
     7d4:	5f6d7261 	svcpl	0x006d7261
     7d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7dc:	79654b00 	stmdbvc	r5!, {r8, r9, fp, lr}^
     7e0:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     7e4:	654b5f74 	strbvs	r5, [fp, #-3956]	; 0xfffff08c
     7e8:	72505f79 	subsvc	r5, r0, #484	; 0x1e4
     7ec:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
     7f0:	654b0064 	strbvs	r0, [fp, #-100]	; 0xffffff9c
     7f4:	61575f79 	cmpvs	r7, r9, ror pc
     7f8:	4b5f7469 	blmi	17dd9a4 <__RW_SIZE__+0x17dd41c>
     7fc:	525f7965 	subspl	r7, pc, #1654784	; 0x194000
     800:	61656c65 	cmnvs	r5, r5, ror #24
     804:	00646573 	rsbeq	r6, r4, r3, ror r5
     808:	5f79654b 	svcpl	0x0079654b
     80c:	6c6c6f50 	stclvs	15, cr6, [ip], #-320	; 0xfffffec0
     810:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     814:	654b0074 	strbvs	r0, [fp, #-116]	; 0xffffff8c
     818:	65475f79 	strbvs	r5, [r7, #-3961]	; 0xfffff087
     81c:	72505f74 	subsvc	r5, r0, #116, 30	; 0x1d0
     820:	65737365 	ldrbvs	r7, [r3, #-869]!	; 0xfffffc9b
     824:	564e0064 	strbpl	r0, [lr], -r4, rrx
     828:	445f4349 	ldrbmi	r4, [pc], #-841	; 830 <__RW_SIZE__+0x2a8>
     82c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     830:	5249656c 	subpl	r6, r9, #108, 10	; 0x1b000000
     834:	654b0051 	strbvs	r0, [fp, #-81]	; 0xffffffaf
     838:	53495f79 	movtpl	r5, #40825	; 0x9f79
     83c:	6e455f52 	mcrvs	15, 2, r5, cr5, cr2, {2}
     840:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     844:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     848:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     84c:	634c006c 	movtvs	r0, #49260	; 0xc06c
     850:	6c435f64 	mcrrvs	15, 6, r5, r3, cr4
     854:	63535f72 	cmpvs	r3, #456	; 0x1c8
     858:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     85c:	53324900 	teqpl	r2, #0, 18
     860:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     864:	646f6d00 	strbtvs	r6, [pc], #-3328	; 86c <__RW_SIZE__+0x2e4>
     868:	634c0065 	movtvs	r0, #49253	; 0xc065
     86c:	6e495f64 	cdpvs	15, 4, cr5, cr9, cr4, {3}
     870:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
     874:	43524358 	cmpmi	r2, #88, 6	; 0x60000001
     878:	58520052 	ldmdapl	r2, {r1, r4, r6}^
     87c:	52435243 	subpl	r5, r3, #805306372	; 0x30000004
     880:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     884:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     888:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
     88c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     890:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 898 <__RW_SIZE__+0x310>
     894:	69770065 	ldmdbvs	r7!, {r0, r2, r5, r6}^
     898:	00687464 	rsbeq	r7, r8, r4, ror #8
     89c:	79746573 	ldmdbvc	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     8a0:	00646d63 	rsbeq	r6, r4, r3, ror #26
     8a4:	4950535f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     8a8:	72575f31 	subsvc	r5, r7, #49, 30	; 0xc4
     8ac:	5f657469 	svcpl	0x00657469
     8b0:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
     8b4:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     8b8:	6172445f 	cmnvs	r2, pc, asr r4
     8bc:	6f425f77 	svcvs	0x00425f77
     8c0:	61440078 	hvcvs	16392	; 0x4008
     8c4:	4c006174 	stfmis	f6, [r0], {116}	; 0x74
     8c8:	575f6463 	ldrbpl	r6, [pc, -r3, ror #8]
     8cc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     8d0:	4d41525f 	sfmmi	f5, 2, [r1, #-380]	; 0xfffffe84
     8d4:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     8d8:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
     8dc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     8e0:	646d6378 	strbtvs	r6, [sp], #-888	; 0xfffffc88
     8e4:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
     8e8:	00746867 	rsbseq	r6, r4, r7, ror #16
     8ec:	6464636c 	strbtvs	r6, [r4], #-876	; 0xfffffc94
     8f0:	50007665 	andpl	r7, r0, r5, ror #12
     8f4:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
     8f8:	4c4f435f 	mcrrmi	3, 5, r4, pc, cr15
     8fc:	7700524f 	strvc	r5, [r0, -pc, asr #4]
     900:	636d6172 	cmnvs	sp, #-2147483620	; 0x8000001c
     904:	5f00646d 	svcpl	0x0000646d
     908:	31495053 	qdaddcc	r5, r3, r9
     90c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     910:	634c0074 	movtvs	r0, #49268	; 0xc074
     914:	65525f64 	ldrbvs	r5, [r2, #-3940]	; 0xfffff09c
     918:	434c0067 	movtmi	r0, #49255	; 0xc067
     91c:	4f435f44 	svcmi	0x00435f44
     920:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
     924:	43414200 	movtmi	r4, #4608	; 0x1200
     928:	4f435f4b 	svcmi	0x00435f4b
     92c:	00524f4c 	subseq	r4, r2, ip, asr #30
     930:	5f495053 	svcpl	0x00495053
     934:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     938:	00666544 	rsbeq	r6, r6, r4, asr #10
     93c:	2e64636c 	cdpcs	3, 6, cr6, cr4, cr12, {3}
     940:	32490063 	subcc	r0, r9, #99	; 0x63
     944:	00525053 	subseq	r5, r2, r3, asr r0
     948:	5f64634c 	svcpl	0x0064634c
     94c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
     950:	61445f65 	cmpvs	r4, r5, ror #30
     954:	315f6174 	cmpcc	pc, r4, ror r1	; <UNPREDICTABLE>
     958:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
     95c:	43524300 	cmpmi	r2, #0, 6
     960:	4c005250 	sfmmi	f5, 4, [r0], {80}	; 0x50
     964:	575f6463 	ldrbpl	r6, [pc, -r3, ror #8]
     968:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
     96c:	45520047 	ldrbmi	r0, [r2, #-71]	; 0xffffffb9
     970:	56524553 			; <UNDEFINED> instruction: 0x56524553
     974:	00314445 	eorseq	r4, r1, r5, asr #8
     978:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     97c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     980:	45520036 	ldrbmi	r0, [r2, #-54]	; 0xffffffca
     984:	56524553 			; <UNDEFINED> instruction: 0x56524553
     988:	00374445 	eorseq	r4, r7, r5, asr #8
     98c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     990:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     994:	634c0038 	movtvs	r0, #49208	; 0xc038
     998:	65525f64 	ldrbvs	r5, [r2, #-3940]	; 0xfffff09c
     99c:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
     9a0:	4c006575 	cfstr32mi	mvfx6, [r0], {117}	; 0x75
     9a4:	575f6463 	ldrbpl	r6, [pc, -r3, ror #8]
     9a8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     9ac:	6765525f 			; <UNDEFINED> instruction: 0x6765525f
     9b0:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     9b4:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
     9b8:	4c007465 	cfstrsmi	mvf7, [r0], {101}	; 0x65
     9bc:	535f6463 	cmppl	pc, #1660944384	; 0x63000000
     9c0:	575f7465 	ldrbpl	r7, [pc, -r5, ror #8]
     9c4:	6f646e69 	svcvs	0x00646e69
     9c8:	4c007377 	stcmi	3, cr7, [r0], {119}	; 0x77
     9cc:	475f6463 	ldrbmi	r6, [pc, -r3, ror #8]
     9d0:	5f4f4950 	svcpl	0x004f4950
     9d4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     9d8:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     9dc:	5f52575f 	svcpl	0x0052575f
     9e0:	41544144 	cmpmi	r4, r4, asr #2
     9e4:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
     9e8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     9ec:	7275435f 	rsbsvc	r4, r5, #2080374785	; 0x7c000001
     9f0:	00726f73 	rsbseq	r6, r2, r3, ror pc
     9f4:	5f64634c 	svcpl	0x0064634c
     9f8:	77617244 	strbvc	r7, [r1, -r4, asr #4]!
     9fc:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     a00:	6f435f6b 	svcvs	0x00435f6b
     a04:	00726f6c 	rsbseq	r6, r2, ip, ror #30
     a08:	5f44454c 	svcpl	0x0044454c
     a0c:	5f6c6c41 	svcpl	0x006c6c41
     a10:	0066664f 	rsbeq	r6, r6, pc, asr #12
     a14:	5f44454c 	svcpl	0x0044454c
     a18:	70736944 	rsbsvc	r6, r3, r4, asr #18
     a1c:	0079616c 	rsbseq	r6, r9, ip, ror #2
     a20:	2e64656c 	cdpcs	5, 6, cr6, cr4, cr12, {3}
     a24:	454c0063 	strbmi	r0, [ip, #-99]	; 0xffffff9d
     a28:	6c415f44 	mcrrvs	15, 4, r5, r1, cr4
     a2c:	6e4f5f6c 	cdpvs	15, 4, cr5, cr15, cr12, {3}
     a30:	44454c00 	strbmi	r4, [r5], #-3072	; 0xfffff400
     a34:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     a38:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
     a3c:	635f6b63 	cmpvs	pc, #101376	; 0x18c00
     a40:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     a44:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
     a48:	48530052 	ldmdami	r3, {r1, r4, r6}^
     a4c:	00525343 	subseq	r5, r2, r3, asr #6
     a50:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     a54:	7065525f 	rsbvc	r5, r5, pc, asr r2
     a58:	5f746165 	svcpl	0x00746165
     a5c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     a60:	70757272 	rsbsvc	r7, r5, r2, ror r2
     a64:	6e455f74 	mcrvs	15, 2, r5, cr5, cr4, {3}
     a68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     a6c:	42435300 	submi	r5, r3, #0, 6
     a70:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a74:	46430065 	strbmi	r0, [r3], -r5, rrx
     a78:	4a005253 	bmi	153cc <__RW_SIZE__+0x14e44>
     a7c:	6b5f676f 	blvs	17da840 <__RW_SIZE__+0x17da2b8>
     a80:	695f7965 	ldmdbvs	pc, {r0, r2, r5, r6, r8, fp, ip, sp, lr}^	; <UNPREDICTABLE>
     a84:	7266006e 	rsbvc	r0, r6, #110	; 0x6e
     a88:	705f676f 	subsvc	r6, pc, pc, ror #14
     a8c:	785f736f 	ldmdavc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     a90:	6f726600 	svcvs	0x00726600
     a94:	6f705f67 	svcvs	0x00705f67
     a98:	00795f73 	rsbseq	r5, r9, r3, ror pc
     a9c:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     aa0:	53464800 	movtpl	r4, #26624	; 0x6800
     aa4:	61630052 	qdsubvs	r0, r2, r3
     aa8:	6f635f72 	svcvs	0x00635f72
     aac:	00726f6c 	rsbseq	r6, r2, ip, ror #30
     ab0:	5f676f4a 	svcpl	0x00676f4a
     ab4:	0079656b 	rsbseq	r6, r9, fp, ror #10
     ab8:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
     abc:	7078655f 	rsbsvc	r6, r8, pc, asr r5
     ac0:	64657269 	strbtvs	r7, [r5], #-617	; 0xfffffd97
     ac4:	72616300 	rsbvc	r6, r1, #0, 6
     ac8:	736f705f 	cmnvc	pc, #95	; 0x5f
     acc:	6300785f 	movwvs	r7, #2143	; 0x85f
     ad0:	705f7261 	subsvc	r7, pc, r1, ror #4
     ad4:	795f736f 	ldmdbvc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     ad8:	72615500 	rsbvc	r5, r1, #0, 10
     adc:	495f3174 	ldmdbmi	pc, {r2, r4, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     ae0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     ae4:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     ae8:	53434900 	movtpl	r4, #14592	; 0x3900
     aec:	49410052 	stmdbmi	r1, {r1, r4, r6}^
     af0:	00524352 	subseq	r4, r2, r2, asr r3
     af4:	52415349 	subpl	r5, r1, #603979777	; 0x24000001
     af8:	41464200 	mrsmi	r4, (UNDEF: 102)
     afc:	614d0052 	qdaddvs	r0, r2, sp
     b00:	43006e69 	movwmi	r6, #3689	; 0xe69
     b04:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
     b08:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     b0c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     b10:	41464d4d 	cmpmi	r6, sp, asr #26
     b14:	61550052 	cmpvs	r5, r2, asr r0
     b18:	5f317472 	svcpl	0x00317472
     b1c:	495f5852 	ldmdbmi	pc, {r1, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     b20:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     b24:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     b28:	616e455f 	cmnvs	lr, pc, asr r5
     b2c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     b30:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     b34:	495f6d65 	ldmdbmi	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     b38:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b3c:	74726155 	ldrbtvc	r6, [r2], #-341	; 0xfffffeab
     b40:	72505f31 	subsvc	r5, r0, #49, 30	; 0xc4
     b44:	66746e69 	ldrbtvs	r6, [r4], -r9, ror #28
     b48:	53464100 	movtpl	r4, #24832	; 0x6100
     b4c:	65680052 	strbvs	r0, [r8, #-82]!	; 0xffffffae
     b50:	70007061 	andvc	r7, r0, r1, rrx
     b54:	48766572 	ldmdami	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     b58:	00706165 	rsbseq	r6, r0, r5, ror #2
     b5c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     b60:	70616548 	rsbvc	r6, r1, r8, asr #10
     b64:	6e757200 	cdpvs	2, 7, cr7, cr5, cr0, {0}
     b68:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     b6c:	5f00632e 	svcpl	0x0000632e
     b70:	6b726273 	blvs	1c99544 <__RW_SIZE__+0x1c98fbc>
     b74:	5a5f5f00 	bpl	17d877c <__RW_SIZE__+0x17d81f4>
     b78:	494c5f49 	stmdbmi	ip, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     b7c:	5f54494d 	svcpl	0x0054494d
     b80:	5845005f 	stmdapl	r5, {r0, r1, r2, r3, r4, r6}^
     b84:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
     b88:	5f30315f 	svcpl	0x0030315f
     b8c:	0054554c 	subseq	r5, r4, ip, asr #10
     b90:	5f494d4e 	svcpl	0x00494d4e
     b94:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     b98:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b9c:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
     ba0:	62654400 	rsbvs	r4, r5, #0, 8
     ba4:	6f4d6775 	svcvs	0x004d6775
     ba8:	61485f6e 	cmpvs	r8, lr, ror #30
     bac:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     bb0:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     bb4:	5f344954 	svcpl	0x00344954
     bb8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bbc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     bc0:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
     bc4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     bc8:	78725f31 	ldmdavc	r2!, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     bcc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     bd0:	4d440061 	stclmi	0, cr0, [r4, #-388]	; 0xfffffe7c
     bd4:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     bd8:	6e6e6168 	powvsez	f6, f6, #0.0
     bdc:	5f376c65 	svcpl	0x00376c65
     be0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     be4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     be8:	57007265 	strpl	r7, [r0, -r5, ror #4]
     bec:	5f474457 	svcpl	0x00474457
     bf0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     bf4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     bf8:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     bfc:	545f4d49 	ldrbpl	r4, [pc], #-3401	; c04 <__RW_SIZE__+0x67c>
     c00:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     c04:	55006665 	strpl	r6, [r0, #-1637]	; 0xfffff99b
     c08:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     c0c:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     c10:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     c14:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c18:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
     c1c:	525f746c 	subspl	r7, pc, #108, 8	; 0x6c000000
     c20:	726f7065 	rsbvc	r7, pc, #101	; 0x65
     c24:	43430074 	movtmi	r0, #12404	; 0x3074
     c28:	43003252 	movwmi	r3, #594	; 0x252
     c2c:	535f4e41 	cmppl	pc, #1040	; 0x410
     c30:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     c34:	61485152 	cmpvs	r8, r2, asr r1
     c38:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     c3c:	32490072 	subcc	r0, r9, #114	; 0x72
     c40:	455f3243 	ldrbmi	r3, [pc, #-579]	; a05 <__RW_SIZE__+0x47d>
     c44:	52495f52 	subpl	r5, r9, #328	; 0x148
     c48:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     c4c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c50:	4d434300 	stclmi	3, cr4, [r3, #-0]
     c54:	43003152 	movwmi	r3, #338	; 0x152
     c58:	32524d43 	subscc	r4, r2, #4288	; 0x10c0
     c5c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     c60:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     c64:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     c68:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c6c:	44565000 	ldrbmi	r5, [r6], #-0
     c70:	5152495f 	cmppl	r2, pc, asr r9
     c74:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c78:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c7c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     c80:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     c84:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     c88:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     c8c:	53455200 	movtpl	r5, #20992	; 0x5200
     c90:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     c94:	00303144 	eorseq	r3, r0, r4, asr #2
     c98:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     c9c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     ca0:	52003131 	andpl	r3, r0, #1073741836	; 0x4000000c
     ca4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     ca8:	31444556 	cmpcc	r4, r6, asr r5
     cac:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
     cb0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     cb4:	34314445 	ldrtcc	r4, [r1], #-1093	; 0xfffffbbb
     cb8:	53455200 	movtpl	r5, #20992	; 0x5200
     cbc:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     cc0:	00353144 	eorseq	r3, r5, r4, asr #2
     cc4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     cc8:	5f6b6369 	svcpl	0x006b6369
     ccc:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     cd0:	53455200 	movtpl	r5, #20992	; 0x5200
     cd4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     cd8:	00373144 	eorseq	r3, r7, r4, asr #2
     cdc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     ce0:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     ce4:	52003831 	andpl	r3, r0, #3211264	; 0x310000
     ce8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cec:	31444556 	cmpcc	r4, r6, asr r5
     cf0:	73550039 	cmpvc	r5, #57	; 0x39
     cf4:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     cf8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     cfc:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     d00:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     d04:	45434300 	strbmi	r4, [r3, #-768]	; 0xfffffd00
     d08:	53550052 	cmppl	r5, #82	; 0x52
     d0c:	31545241 	cmpcc	r4, r1, asr #4
     d10:	5f78725f 	svcpl	0x0078725f
     d14:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
     d18:	53550079 	cmppl	r5, #121	; 0x79
     d1c:	50485f42 	subpl	r5, r8, r2, asr #30
     d20:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     d24:	5f58545f 	svcpl	0x0058545f
     d28:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d2c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d30:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     d34:	5f314d49 	svcpl	0x00314d49
     d38:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     d3c:	61485152 	cmpvs	r8, r2, asr r1
     d40:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     d44:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     d48:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     d4c:	6e6e6168 	powvsez	f6, f6, #0.0
     d50:	5f346c65 	svcpl	0x00346c65
     d54:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d58:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d5c:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     d60:	5f334d49 	svcpl	0x00334d49
     d64:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d68:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d6c:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
     d70:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     d74:	4c5f355f 	cfldr64mi	mvdx3, [pc], {95}	; 0x5f
     d78:	54005455 	strpl	r5, [r0], #-1109	; 0xfffffbab
     d7c:	5f314d49 	svcpl	0x00314d49
     d80:	5f475254 	svcpl	0x00475254
     d84:	5f4d4f43 	svcpl	0x004d4f43
     d88:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     d8c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     d90:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
     d94:	00525444 	subseq	r5, r2, r4, asr #8
     d98:	57425355 	smlsldpl	r5, r2, r5, r3
     d9c:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     da0:	52495f70 	subpl	r5, r9, #112, 30	; 0x1c0
     da4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     da8:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     dac:	6d654d00 	stclvs	13, cr4, [r5, #-0]
     db0:	616e614d 	cmnvs	lr, sp, asr #2
     db4:	485f6567 	ldmdami	pc, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     db8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     dbc:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     dc0:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     dc4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     dc8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
     dcc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     dd0:	414c4600 	cmpmi	ip, r0, lsl #12
     dd4:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     dd8:	61485152 	cmpvs	r8, r2, asr r1
     ddc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     de0:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     de4:	5f304954 	svcpl	0x00304954
     de8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     dec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     df0:	41007265 	tstmi	r0, r5, ror #4
     df4:	5f314344 	svcpl	0x00314344
     df8:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     dfc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e00:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e04:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e08:	3158525f 	cmpcc	r8, pc, asr r2
     e0c:	5152495f 	cmppl	r2, pc, asr r9
     e10:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e14:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e18:	32495053 	subcc	r5, r9, #83	; 0x53
     e1c:	5152495f 	cmppl	r2, pc, asr r9
     e20:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e24:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e28:	31414d44 	cmpcc	r1, r4, asr #26
     e2c:	6168435f 	cmnvs	r8, pc, asr r3
     e30:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     e34:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     e38:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     e3c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e40:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     e44:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     e48:	61485152 	cmpvs	r8, r2, asr r1
     e4c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     e50:	45520072 	ldrbmi	r0, [r2, #-114]	; 0xffffff8e
     e54:	56524553 			; <UNDEFINED> instruction: 0x56524553
     e58:	32314445 	eorscc	r4, r1, #1157627904	; 0x45000000
     e5c:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
     e60:	5f565364 	svcpl	0x00565364
     e64:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e68:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e6c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e70:	30316632 	eorscc	r6, r1, r2, lsr r6
     e74:	74695f78 	strbtvc	r5, [r9], #-3960	; 0xfffff088
     e78:	4400632e 	strmi	r6, [r0], #-814	; 0xfffffcd2
     e7c:	5f31414d 	svcpl	0x0031414d
     e80:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     e84:	356c656e 	strbcc	r6, [ip, #-1390]!	; 0xfffffa92
     e88:	5152495f 	cmppl	r2, pc, asr r9
     e8c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     e90:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e94:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     e98:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     e9c:	61550039 	cmpvs	r5, r9, lsr r0
     ea0:	5f317472 	svcpl	0x00317472
     ea4:	5f746547 	svcpl	0x00746547
     ea8:	73657250 	cmnvc	r5, #80, 4
     eac:	00646573 	rsbeq	r6, r4, r3, ror r5
     eb0:	5f434352 	svcpl	0x00434352
     eb4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     eb8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ebc:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     ec0:	5f31414d 	svcpl	0x0031414d
     ec4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     ec8:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
     ecc:	5152495f 	cmppl	r2, pc, asr r9
     ed0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     ed4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ed8:	5f435452 	svcpl	0x00435452
     edc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ee0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ee4:	53007265 	movwpl	r7, #613	; 0x265
     ee8:	485f4356 	ldmdami	pc, {r1, r2, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     eec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     ef0:	53007265 	movwpl	r7, #613	; 0x265
     ef4:	6b636174 	blvs	18d94cc <__RW_SIZE__+0x18d8f44>
     ef8:	6d75445f 	cfldrdvs	mvd4, [r5, #-380]!	; 0xfffffe84
     efc:	49540070 	ldmdbmi	r4, {r4, r5, r6}^
     f00:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     f04:	61485152 	cmpvs	r8, r2, asr r1
     f08:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f0c:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
     f10:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     f14:	61485f6b 	cmpvs	r8, fp, ror #30
     f18:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f1c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     f20:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     f24:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^	; <UNPREDICTABLE>
     f28:	61485152 	cmpvs	r8, r2, asr r1
     f2c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     f30:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
     f34:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
     f38:	53495f64 	movtpl	r5, #40804	; 0x9f64
     f3c:	4d530052 	ldclmi	0, cr0, [r3, #-328]	; 0xfffffeb8
     f40:	42005243 	andmi	r5, r0, #805306372	; 0x30000004
     f44:	61467375 	hvcvs	26421	; 0x6735
     f48:	5f746c75 	svcpl	0x00746c75
     f4c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     f50:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f54:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
     f58:	65725f6b 	ldrbvs	r5, [r2, #-3947]!	; 0xfffff095
     f5c:	32490067 	subcc	r0, r9, #103	; 0x67
     f60:	455f3243 	ldrbmi	r3, [pc, #-579]	; d25 <__RW_SIZE__+0x79d>
     f64:	52495f56 	subpl	r5, r9, #344	; 0x158
     f68:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f6c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f70:	414d4400 	cmpmi	sp, r0, lsl #8
     f74:	32490052 	subcc	r0, r9, #82	; 0x52
     f78:	455f3143 	ldrbmi	r3, [pc, #-323]	; e3d <__RW_SIZE__+0x8b5>
     f7c:	52495f52 	subpl	r5, r9, #328	; 0x148
     f80:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     f84:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     f88:	42535500 	subsmi	r5, r3, #0, 10
     f8c:	5f504c5f 	svcpl	0x00504c5f
     f90:	5f4e4143 	svcpl	0x004e4143
     f94:	5f305852 	svcpl	0x00305852
     f98:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     f9c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     fa0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     fa4:	5f314d49 	svcpl	0x00314d49
     fa8:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     fac:	61485152 	cmpvs	r8, r2, asr r1
     fb0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fb4:	43430072 	movtmi	r0, #12402	; 0x3072
     fb8:	43003152 	movwmi	r3, #338	; 0x152
     fbc:	00335243 	eorseq	r5, r3, r3, asr #4
     fc0:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
     fc4:	53455200 	movtpl	r5, #20992	; 0x5200
     fc8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     fcc:	00363144 	eorseq	r3, r6, r4, asr #2
     fd0:	31414d44 	cmpcc	r1, r4, asr #26
     fd4:	6168435f 	cmnvs	r8, pc, asr r3
     fd8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     fdc:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     fe0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     fe4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     fe8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     fec:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     ff0:	61485152 	cmpvs	r8, r2, asr r1
     ff4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     ff8:	41540072 	cmpmi	r4, r2, ror r0
     ffc:	5245504d 	subpl	r5, r5, #77	; 0x4d
    1000:	5152495f 	cmppl	r2, pc, asr r9
    1004:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1008:	0072656c 	rsbseq	r6, r2, ip, ror #10
    100c:	31414d44 	cmpcc	r1, r4, asr #26
    1010:	6168435f 	cmnvs	r8, pc, asr r3
    1014:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1018:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    101c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1020:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1024:	41535500 	cmpmi	r3, r0, lsl #10
    1028:	5f335452 	svcpl	0x00335452
    102c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1030:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1034:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
    1038:	31495458 	cmpcc	r9, r8, asr r4
    103c:	30315f35 	eorscc	r5, r1, r5, lsr pc
    1040:	5152495f 	cmppl	r2, pc, asr r9
    1044:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1048:	0072656c 	rsbseq	r6, r2, ip, ror #10
    104c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1050:	5f355f39 	svcpl	0x00355f39
    1054:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    1058:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    105c:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1060:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
    1064:	5f6d7261 	svcpl	0x006d7261
    1068:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
    106c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1070:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    1074:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1078:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
    107c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
    1080:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1084:	61747300 	cmnvs	r4, r0, lsl #6
    1088:	49006b63 	stmdbmi	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    108c:	5f314332 	svcpl	0x00314332
    1090:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    1094:	61485152 	cmpvs	r8, r2, asr r1
    1098:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    109c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    10a0:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    10a4:	61485152 	cmpvs	r8, r2, asr r1
    10a8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    10ac:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    10b0:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    10b4:	74535f6b 	ldrbvc	r5, [r3], #-3947	; 0xfffff095
    10b8:	7300706f 	movwvc	r7, #111	; 0x6f
    10bc:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    10c0:	632e6b63 	teqvs	lr, #101376	; 0x18c00
    10c4:	4c414300 	mcrrmi	3, 0, r4, r1, cr0
    10c8:	53004249 	movwpl	r4, #585	; 0x249
    10cc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    10d0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    10d4:	6b636568 	blvs	18da67c <__RW_SIZE__+0x18da0f4>
    10d8:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    10dc:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    10e0:	52544300 	subspl	r4, r4, #0, 6
    10e4:	4f4c004c 	svcmi	0x004c004c
    10e8:	53004441 	movwpl	r4, #1089	; 0x441
    10ec:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    10f0:	525f6b63 	subspl	r6, pc, #101376	; 0x18c00
    10f4:	53006e75 	movwpl	r6, #3701	; 0xe75
    10f8:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    10fc:	545f6b63 	ldrbpl	r6, [pc], #-2915	; 1104 <__RW_SIZE__+0xb7c>
    1100:	00657079 	rsbeq	r7, r5, r9, ror r0
    1104:	6365736d 	cmnvs	r5, #-1275068415	; 0xb4000001
    1108:	73795300 	cmnvc	r9, #0, 6
    110c:	6b636954 	blvs	18db664 <__RW_SIZE__+0x18db0dc>
    1110:	5f534f5f 	svcpl	0x00534f5f
    1114:	6b636954 	blvs	18db66c <__RW_SIZE__+0x18db0e4>
    1118:	73795300 	cmnvc	r9, #0, 6
    111c:	6b636954 	blvs	18db674 <__RW_SIZE__+0x18db0ec>
    1120:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1124:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    1128:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    112c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1130:	65475f6b 	strbvs	r5, [r7, #-3947]	; 0xfffff095
    1134:	6f4c5f74 	svcvs	0x004c5f74
    1138:	545f6461 	ldrbpl	r6, [pc], #-1121	; 1140 <__RW_SIZE__+0xbb8>
    113c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1140:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1144:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1148:	632e7265 	teqvs	lr, #1342177286	; 0x50000006
    114c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1150:	65445f32 	strbvs	r5, [r4, #-3890]	; 0xfffff0ce
    1154:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1158:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    115c:	5f00745f 	svcpl	0x0000745f
    1160:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    1164:	705f6570 	subsvc	r6, pc, r0, ror r5	; <UNPREDICTABLE>
    1168:	5f5f7274 	svcpl	0x005f7274
    116c:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    1170:	47007375 	smlsdxmi	r0, r5, r3, r7
    1174:	00525054 	subseq	r5, r2, r4, asr r0
    1178:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    117c:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
    1180:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1184:	74730065 	ldrbtvc	r0, [r3], #-101	; 0xffffff9b
    1188:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    118c:	74730032 	ldrbtvc	r0, [r3], #-50	; 0xffffffce
    1190:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    1194:	72615500 	rsbvc	r5, r1, #0, 10
    1198:	475f3174 			; <UNDEFINED> instruction: 0x475f3174
    119c:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    11a0:	4e5f746e 	cdpmi	4, 5, cr7, cr15, cr14, {3}
    11a4:	55006d75 	strpl	r6, [r0, #-3445]	; 0xfffff28b
    11a8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11ac:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    11b0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    11b4:	72615500 	rsbvc	r5, r1, #0, 10
    11b8:	535f3174 	cmppl	pc, #116, 2
    11bc:	5f646e65 	svcpl	0x00646e65
    11c0:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    11c4:	73616200 	cmnvc	r1, #0, 4
    11c8:	61550065 	cmpvs	r5, r5, rrx
    11cc:	5f317472 	svcpl	0x00317472
    11d0:	5f746547 	svcpl	0x00746547
    11d4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
    11d8:	5500676e 	strpl	r6, [r0, #-1902]	; 0xfffff892
    11dc:	31747261 	cmncc	r4, r1, ror #4
    11e0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    11e4:	6168435f 	cmnvs	r8, pc, asr r3
    11e8:	61550072 	cmpvs	r5, r2, ror r0
    11ec:	5f317472 	svcpl	0x00317472
    11f0:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    11f4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    11f8:	00676e69 	rsbeq	r6, r7, r9, ror #28
    11fc:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    1200:	6f746100 	svcvs	0x00746100
    1204:	616d0069 	cmnvs	sp, r9, rrx
    1208:	6c00746e 	cfstrsvs	mvf7, [r0], {110}	; 0x6e
    120c:	49747361 	ldmdbmi	r4!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1210:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1214:	75616200 	strbvc	r6, [r1, #-512]!	; 0xfffffe00
    1218:	Address 0x00001218 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__RW_SIZE__+0x10d079c>
   4:	6f532820 	svcvs	0x00532820
   8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
   c:	43207972 	teqmi	r0, #1867776	; 0x1c8000
  10:	4265646f 	rsbmi	r6, r5, #1862270976	; 0x6f000000
  14:	68636e65 	stmdavs	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  18:	74694c20 	strbtvc	r4, [r9], #-3104	; 0xfffff3e0
  1c:	30322065 	eorscc	r2, r2, r5, rrx
  20:	312e3331 	teqcc	lr, r1, lsr r3
  24:	34322d31 	ldrtcc	r2, [r2], #-3377	; 0xfffff2cf
  28:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  2c:	00312e38 	eorseq	r2, r1, r8, lsr lr

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
  20:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__RW_SIZE__+0x45ab4>
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
      1c:	00000068 	andeq	r0, r0, r8, rrx
      20:	0000000c 	andeq	r0, r0, ip
      24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      28:	7c020001 	stcvc	0, cr0, [r2], {1}
      2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000020 	andeq	r0, r0, r0, lsr #32
      38:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
      3c:	00000008 	andeq	r0, r0, r8
      40:	0000000c 	andeq	r0, r0, ip
      44:	00000020 	andeq	r0, r0, r0, lsr #32
      48:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
      4c:	00000006 	andeq	r0, r0, r6
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000020 	andeq	r0, r0, r0, lsr #32
      58:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
      5c:	00000008 	andeq	r0, r0, r8
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000020 	andeq	r0, r0, r0, lsr #32
      68:	0800326c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip, sp}
      6c:	00000006 	andeq	r0, r0, r6
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000020 	andeq	r0, r0, r0, lsr #32
      78:	08003274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp}
      7c:	00000006 	andeq	r0, r0, r6
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000020 	andeq	r0, r0, r0, lsr #32
      88:	0800327c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, ip, sp}
      8c:	00000006 	andeq	r0, r0, r6
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000020 	andeq	r0, r0, r0, lsr #32
      98:	08003284 	stmdaeq	r0, {r2, r7, r9, ip, sp}
      9c:	00000006 	andeq	r0, r0, r6
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000020 	andeq	r0, r0, r0, lsr #32
      a8:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
      ac:	00000006 	andeq	r0, r0, r6
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000020 	andeq	r0, r0, r0, lsr #32
      b8:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
      bc:	00000006 	andeq	r0, r0, r6
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000020 	andeq	r0, r0, r0, lsr #32
      c8:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
      cc:	00000006 	andeq	r0, r0, r6
      d0:	0000000c 	andeq	r0, r0, ip
      d4:	00000020 	andeq	r0, r0, r0, lsr #32
      d8:	080032a4 	stmdaeq	r0, {r2, r5, r7, r9, ip, sp}
      dc:	00000006 	andeq	r0, r0, r6
      e0:	0000000c 	andeq	r0, r0, ip
      e4:	00000020 	andeq	r0, r0, r0, lsr #32
      e8:	080032ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip, sp}
      ec:	00000006 	andeq	r0, r0, r6
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	00000020 	andeq	r0, r0, r0, lsr #32
      f8:	080032b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, sp}
      fc:	00000004 	andeq	r0, r0, r4
     100:	0000000c 	andeq	r0, r0, ip
     104:	00000020 	andeq	r0, r0, r0, lsr #32
     108:	080032b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp}
     10c:	00000004 	andeq	r0, r0, r4
     110:	0000000c 	andeq	r0, r0, ip
     114:	00000020 	andeq	r0, r0, r0, lsr #32
     118:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
     11c:	00000004 	andeq	r0, r0, r4
     120:	0000000c 	andeq	r0, r0, ip
     124:	00000020 	andeq	r0, r0, r0, lsr #32
     128:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
     12c:	00000006 	andeq	r0, r0, r6
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000020 	andeq	r0, r0, r0, lsr #32
     138:	080032c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp}
     13c:	00000008 	andeq	r0, r0, r8
     140:	0000000c 	andeq	r0, r0, ip
     144:	00000020 	andeq	r0, r0, r0, lsr #32
     148:	080032d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, sp}
     14c:	00000008 	andeq	r0, r0, r8
     150:	0000000c 	andeq	r0, r0, ip
     154:	00000020 	andeq	r0, r0, r0, lsr #32
     158:	080032d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp}
     15c:	00000006 	andeq	r0, r0, r6
     160:	0000000c 	andeq	r0, r0, ip
     164:	00000020 	andeq	r0, r0, r0, lsr #32
     168:	080032e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp}
     16c:	00000008 	andeq	r0, r0, r8
     170:	0000000c 	andeq	r0, r0, ip
     174:	00000020 	andeq	r0, r0, r0, lsr #32
     178:	080032e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp}
     17c:	00000008 	andeq	r0, r0, r8
     180:	0000000c 	andeq	r0, r0, ip
     184:	00000020 	andeq	r0, r0, r0, lsr #32
     188:	080032f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, sp}
     18c:	00000006 	andeq	r0, r0, r6
     190:	0000000c 	andeq	r0, r0, ip
     194:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     198:	7c020001 	stcvc	0, cr0, [r2], {1}
     19c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1a0:	00000024 	andeq	r0, r0, r4, lsr #32
     1a4:	00000190 	muleq	r0, r0, r1
     1a8:	080032f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, ip, sp}
     1ac:	000001fa 	strdeq	r0, [r0], -sl
     1b0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     1b4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     1b8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     1bc:	8a048905 	bhi	1225d8 <__RW_SIZE__+0x122050>
     1c0:	8e028b03 	vmlahi.f64	d8, d2, d3
     1c4:	700e4501 	andvc	r4, lr, r1, lsl #10
     1c8:	00000028 	andeq	r0, r0, r8, lsr #32
     1cc:	00000190 	muleq	r0, r0, r1
     1d0:	080034f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, sp}
     1d4:	0000022c 	andeq	r0, r0, ip, lsr #4
     1d8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     1dc:	86088509 	strhi	r8, [r8], -r9, lsl #10
     1e0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     1e4:	8a048905 	bhi	122600 <__RW_SIZE__+0x122078>
     1e8:	8e028b03 	vmlahi.f64	d8, d2, d3
     1ec:	800e4101 	andhi	r4, lr, r1, lsl #2
     1f0:	00000001 	andeq	r0, r0, r1
     1f4:	00000028 	andeq	r0, r0, r8, lsr #32
     1f8:	00000190 	muleq	r0, r0, r1
     1fc:	08003720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp}
     200:	00000256 	andeq	r0, r0, r6, asr r2
     204:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     208:	86088509 	strhi	r8, [r8], -r9, lsl #10
     20c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     210:	8a048905 	bhi	12262c <__RW_SIZE__+0x1220a4>
     214:	8e028b03 	vmlahi.f64	d8, d2, d3
     218:	900e4101 	andls	r4, lr, r1, lsl #2
     21c:	00000003 	andeq	r0, r0, r3
     220:	0000000c 	andeq	r0, r0, ip
     224:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     228:	7c020001 	stcvc	0, cr0, [r2], {1}
     22c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     230:	0000000c 	andeq	r0, r0, ip
     234:	00000220 	andeq	r0, r0, r0, lsr #4
     238:	08003978 	stmdaeq	r0, {r3, r4, r5, r6, r8, fp, ip, sp}
     23c:	0000007c 	andeq	r0, r0, ip, ror r0
     240:	00000018 	andeq	r0, r0, r8, lsl r0
     244:	00000220 	andeq	r0, r0, r0, lsr #4
     248:	080039f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, sp}
     24c:	00000066 	andeq	r0, r0, r6, rrx
     250:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     254:	86028503 	strhi	r8, [r2], -r3, lsl #10
     258:	00000001 	andeq	r0, r0, r1
     25c:	0000000c 	andeq	r0, r0, ip
     260:	00000220 	andeq	r0, r0, r0, lsr #4
     264:	08003a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, ip, sp}
     268:	00000034 	andeq	r0, r0, r4, lsr r0
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	00000220 	andeq	r0, r0, r0, lsr #4
     274:	08003a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, sp}
     278:	0000003c 	andeq	r0, r0, ip, lsr r0
     27c:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     280:	00000001 	andeq	r0, r0, r1
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	00000220 	andeq	r0, r0, r0, lsr #4
     28c:	08003acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp, ip, sp}
     290:	0000003c 	andeq	r0, r0, ip, lsr r0
     294:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     298:	00000001 	andeq	r0, r0, r1
     29c:	00000018 	andeq	r0, r0, r8, lsl r0
     2a0:	00000220 	andeq	r0, r0, r0, lsr #4
     2a4:	08003b08 	stmdaeq	r0, {r3, r8, r9, fp, ip, sp}
     2a8:	000000f8 	strdeq	r0, [r0], -r8
     2ac:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     2b0:	86028503 	strhi	r8, [r2], -r3, lsl #10
     2b4:	00000001 	andeq	r0, r0, r1
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2c0:	7c020001 	stcvc	0, cr0, [r2], {1}
     2c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2c8:	0000000c 	andeq	r0, r0, ip
     2cc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2d0:	08003c00 	stmdaeq	r0, {sl, fp, ip, sp}
     2d4:	00000026 	andeq	r0, r0, r6, lsr #32
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2e0:	08003c28 	stmdaeq	r0, {r3, r5, sl, fp, ip, sp}
     2e4:	00000012 	andeq	r0, r0, r2, lsl r0
     2e8:	0000000c 	andeq	r0, r0, ip
     2ec:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     2f0:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
     2f4:	00000014 	andeq	r0, r0, r4, lsl r0
     2f8:	0000000c 	andeq	r0, r0, ip
     2fc:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     300:	08003c50 	stmdaeq	r0, {r4, r6, sl, fp, ip, sp}
     304:	00000016 	andeq	r0, r0, r6, lsl r0
     308:	00000014 	andeq	r0, r0, r4, lsl r0
     30c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
     310:	08003c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, ip, sp}
     314:	0000008a 	andeq	r0, r0, sl, lsl #1
     318:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     31c:	00000001 	andeq	r0, r0, r1
     320:	0000000c 	andeq	r0, r0, ip
     324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     328:	7c020001 	stcvc	0, cr0, [r2], {1}
     32c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     330:	0000000c 	andeq	r0, r0, ip
     334:	00000320 	andeq	r0, r0, r0, lsr #6
     338:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
     33c:	00000042 	andeq	r0, r0, r2, asr #32
     340:	00000014 	andeq	r0, r0, r4, lsl r0
     344:	00000320 	andeq	r0, r0, r0, lsr #6
     348:	08003d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, sp}
     34c:	000000a2 	andeq	r0, r0, r2, lsr #1
     350:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     354:	00000001 	andeq	r0, r0, r1
     358:	00000014 	andeq	r0, r0, r4, lsl r0
     35c:	00000320 	andeq	r0, r0, r0, lsr #6
     360:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
     364:	0000007a 	andeq	r0, r0, sl, ror r0
     368:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     36c:	00000001 	andeq	r0, r0, r1
     370:	00000010 	andeq	r0, r0, r0, lsl r0
     374:	00000320 	andeq	r0, r0, r0, lsr #6
     378:	08003e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, sp}
     37c:	00000062 	andeq	r0, r0, r2, rrx
     380:	00080e46 	andeq	r0, r8, r6, asr #28
     384:	0000000c 	andeq	r0, r0, ip
     388:	00000320 	andeq	r0, r0, r0, lsr #6
     38c:	08003ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, ip, sp}
     390:	00000052 	andeq	r0, r0, r2, asr r0
     394:	0000000c 	andeq	r0, r0, ip
     398:	00000320 	andeq	r0, r0, r0, lsr #6
     39c:	08003f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, sp}
     3a0:	00000052 	andeq	r0, r0, r2, asr r0
     3a4:	00000014 	andeq	r0, r0, r4, lsl r0
     3a8:	00000320 	andeq	r0, r0, r0, lsr #6
     3ac:	08003f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip, sp}
     3b0:	00000336 	andeq	r0, r0, r6, lsr r3
     3b4:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
     3b8:	00000001 	andeq	r0, r0, r1
     3bc:	0000000c 	andeq	r0, r0, ip
     3c0:	00000320 	andeq	r0, r0, r0, lsr #6
     3c4:	0800429c 	stmdaeq	r0, {r2, r3, r4, r7, r9, lr}
     3c8:	0000005e 	andeq	r0, r0, lr, asr r0
     3cc:	00000018 	andeq	r0, r0, r8, lsl r0
     3d0:	00000320 	andeq	r0, r0, r0, lsr #6
     3d4:	080042fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, lr}
     3d8:	00000364 	andeq	r0, r0, r4, ror #6
     3dc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     3e0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     3e4:	00018702 	andeq	r8, r1, r2, lsl #14
     3e8:	00000020 	andeq	r0, r0, r0, lsr #32
     3ec:	00000320 	andeq	r0, r0, r0, lsr #6
     3f0:	08004660 	stmdaeq	r0, {r5, r6, r9, sl, lr}
     3f4:	000000b8 	strheq	r0, [r0], -r8
     3f8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3fc:	86078508 	strhi	r8, [r7], -r8, lsl #10
     400:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     404:	8a038904 	bhi	e281c <__RW_SIZE__+0xe2294>
     408:	00018e02 	andeq	r8, r1, r2, lsl #28
     40c:	00000018 	andeq	r0, r0, r8, lsl r0
     410:	00000320 	andeq	r0, r0, r0, lsr #6
     414:	08004718 	stmdaeq	r0, {r3, r4, r8, r9, sl, lr}
     418:	00000342 	andeq	r0, r0, r2, asr #6
     41c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     420:	86038504 	strhi	r8, [r3], -r4, lsl #10
     424:	00018702 	andeq	r8, r1, r2, lsl #14
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	00000320 	andeq	r0, r0, r0, lsr #6
     430:	08004a5c 	stmdaeq	r0, {r2, r3, r4, r6, r9, fp, lr}
     434:	00000094 	muleq	r0, r4, r0
     438:	83180e41 	tsthi	r8, #1040	; 0x410
     43c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     440:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     444:	00018e02 	andeq	r8, r1, r2, lsl #28
     448:	0000000c 	andeq	r0, r0, ip
     44c:	00000320 	andeq	r0, r0, r0, lsr #6
     450:	08004af0 	stmdaeq	r0, {r4, r5, r6, r7, r9, fp, lr}
     454:	00000006 	andeq	r0, r0, r6
     458:	00000020 	andeq	r0, r0, r0, lsr #32
     45c:	00000320 	andeq	r0, r0, r0, lsr #6
     460:	08004af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, lr}
     464:	000000b8 	strheq	r0, [r0], -r8
     468:	83200e42 	teqhi	r0, #1056	; 0x420
     46c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     470:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     474:	89038804 	stmdbhi	r3, {r2, fp, pc}
     478:	00018e02 	andeq	r8, r1, r2, lsl #28
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
     480:	00000320 	andeq	r0, r0, r0, lsr #6
     484:	08004bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, lr}
     488:	00001e26 	andeq	r1, r0, r6, lsr #28
     48c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     490:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     494:	200e7301 	andcs	r7, lr, r1, lsl #6
     498:	00000018 	andeq	r0, r0, r8, lsl r0
     49c:	00000320 	andeq	r0, r0, r0, lsr #6
     4a0:	080069d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp, sp, lr}
     4a4:	000003c0 	andeq	r0, r0, r0, asr #7
     4a8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     4ac:	86038504 	strhi	r8, [r3], -r4, lsl #10
     4b0:	00018702 	andeq	r8, r1, r2, lsl #14
     4b4:	0000000c 	andeq	r0, r0, ip
     4b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4bc:	7c020001 	stcvc	0, cr0, [r2], {1}
     4c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4c4:	0000000c 	andeq	r0, r0, ip
     4c8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     4cc:	08006d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, sp, lr}
     4d0:	0000002e 	andeq	r0, r0, lr, lsr #32
     4d4:	0000000c 	andeq	r0, r0, ip
     4d8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     4dc:	08006dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, sp, lr}
     4e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     4e4:	0000000c 	andeq	r0, r0, ip
     4e8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     4ec:	08006de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, sp, lr}
     4f0:	00000012 	andeq	r0, r0, r2, lsl r0
     4f4:	0000000c 	andeq	r0, r0, ip
     4f8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     4fc:	08006df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
     500:	00000012 	andeq	r0, r0, r2, lsl r0
     504:	0000000c 	andeq	r0, r0, ip
     508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     50c:	7c020001 	stcvc	0, cr0, [r2], {1}
     510:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     514:	00000014 	andeq	r0, r0, r4, lsl r0
     518:	00000504 	andeq	r0, r0, r4, lsl #10
     51c:	08006e0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, lr}
     520:	00000030 	andeq	r0, r0, r0, lsr r0
     524:	83080e41 	movwhi	r0, #36417	; 0x8e41
     528:	00018e02 	andeq	r8, r1, r2, lsl #28
     52c:	00000024 	andeq	r0, r0, r4, lsr #32
     530:	00000504 	andeq	r0, r0, r4, lsl #10
     534:	08006e3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, fp, sp, lr}
     538:	0000016c 	andeq	r0, r0, ip, ror #2
     53c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     540:	86088509 	strhi	r8, [r8], -r9, lsl #10
     544:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     548:	8a048905 	bhi	122964 <__RW_SIZE__+0x1223dc>
     54c:	8e028b03 	vmlahi.f64	d8, d2, d3
     550:	480e4101 	stmdami	lr, {r0, r8, lr}
     554:	0000000c 	andeq	r0, r0, ip
     558:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     55c:	7c020001 	stcvc	0, cr0, [r2], {1}
     560:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     564:	00000014 	andeq	r0, r0, r4, lsl r0
     568:	00000554 	andeq	r0, r0, r4, asr r5
     56c:	08006fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, sp, lr}
     570:	00000044 	andeq	r0, r0, r4, asr #32
     574:	84040e41 	strhi	r0, [r4], #-3649	; 0xfffff1bf
     578:	00000001 	andeq	r0, r0, r1
     57c:	0000000c 	andeq	r0, r0, ip
     580:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     584:	7c020001 	stcvc	0, cr0, [r2], {1}
     588:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     58c:	0000001c 	andeq	r0, r0, ip, lsl r0
     590:	0000057c 	andeq	r0, r0, ip, ror r5
     594:	08006fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}
     598:	00000038 	andeq	r0, r0, r8, lsr r0
     59c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     5a0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     5a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     5a8:	200e4301 	andcs	r4, lr, r1, lsl #6
     5ac:	00000014 	andeq	r0, r0, r4, lsl r0
     5b0:	0000057c 	andeq	r0, r0, ip, ror r5
     5b4:	08007024 	stmdaeq	r0, {r2, r5, ip, sp, lr}
     5b8:	00000032 	andeq	r0, r0, r2, lsr r0
     5bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c4:	00000014 	andeq	r0, r0, r4, lsl r0
     5c8:	0000057c 	andeq	r0, r0, ip, ror r5
     5cc:	08007058 	stmdaeq	r0, {r3, r4, r6, ip, sp, lr}
     5d0:	00000010 	andeq	r0, r0, r0, lsl r0
     5d4:	83080e43 	movwhi	r0, #36419	; 0x8e43
     5d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5dc:	00000014 	andeq	r0, r0, r4, lsl r0
     5e0:	0000057c 	andeq	r0, r0, ip, ror r5
     5e4:	08007068 	stmdaeq	r0, {r3, r5, r6, ip, sp, lr}
     5e8:	0000012a 	andeq	r0, r0, sl, lsr #2
     5ec:	83080e44 	movwhi	r0, #36420	; 0x8e44
     5f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f4:	00000014 	andeq	r0, r0, r4, lsl r0
     5f8:	0000057c 	andeq	r0, r0, ip, ror r5
     5fc:	08007194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp, lr}
     600:	00000010 	andeq	r0, r0, r0, lsl r0
     604:	83080e43 	movwhi	r0, #36419	; 0x8e43
     608:	00018e02 	andeq	r8, r1, r2, lsl #28
     60c:	00000014 	andeq	r0, r0, r4, lsl r0
     610:	0000057c 	andeq	r0, r0, ip, ror r5
     614:	080071a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, sp, lr}
     618:	00000010 	andeq	r0, r0, r0, lsl r0
     61c:	83080e43 	movwhi	r0, #36419	; 0x8e43
     620:	00018e02 	andeq	r8, r1, r2, lsl #28
     624:	00000014 	andeq	r0, r0, r4, lsl r0
     628:	0000057c 	andeq	r0, r0, ip, ror r5
     62c:	080071b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp, lr}
     630:	00000010 	andeq	r0, r0, r0, lsl r0
     634:	83080e43 	movwhi	r0, #36419	; 0x8e43
     638:	00018e02 	andeq	r8, r1, r2, lsl #28
     63c:	00000014 	andeq	r0, r0, r4, lsl r0
     640:	0000057c 	andeq	r0, r0, ip, ror r5
     644:	080071c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp, lr}
     648:	00000010 	andeq	r0, r0, r0, lsl r0
     64c:	83080e43 	movwhi	r0, #36419	; 0x8e43
     650:	00018e02 	andeq	r8, r1, r2, lsl #28
     654:	00000014 	andeq	r0, r0, r4, lsl r0
     658:	0000057c 	andeq	r0, r0, ip, ror r5
     65c:	080071d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp, lr}
     660:	00000010 	andeq	r0, r0, r0, lsl r0
     664:	83080e43 	movwhi	r0, #36419	; 0x8e43
     668:	00018e02 	andeq	r8, r1, r2, lsl #28
     66c:	00000014 	andeq	r0, r0, r4, lsl r0
     670:	0000057c 	andeq	r0, r0, ip, ror r5
     674:	080071e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, ip, sp, lr}
     678:	00000010 	andeq	r0, r0, r0, lsl r0
     67c:	83080e43 	movwhi	r0, #36419	; 0x8e43
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	0000000c 	andeq	r0, r0, ip
     688:	0000057c 	andeq	r0, r0, ip, ror r5
     68c:	080071f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, sp, lr}
     690:	0000000e 	andeq	r0, r0, lr
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	0000057c 	andeq	r0, r0, ip, ror r5
     69c:	08007204 	stmdaeq	r0, {r2, r9, ip, sp, lr}
     6a0:	00000006 	andeq	r0, r0, r6
     6a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
     6b0:	0000057c 	andeq	r0, r0, ip, ror r5
     6b4:	0800720c 	stmdaeq	r0, {r2, r3, r9, ip, sp, lr}
     6b8:	00000006 	andeq	r0, r0, r6
     6bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c4:	00000014 	andeq	r0, r0, r4, lsl r0
     6c8:	0000057c 	andeq	r0, r0, ip, ror r5
     6cc:	08007214 	stmdaeq	r0, {r2, r4, r9, ip, sp, lr}
     6d0:	00000006 	andeq	r0, r0, r6
     6d4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6dc:	00000014 	andeq	r0, r0, r4, lsl r0
     6e0:	0000057c 	andeq	r0, r0, ip, ror r5
     6e4:	0800721c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp, lr}
     6e8:	00000006 	andeq	r0, r0, r6
     6ec:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6f4:	00000014 	andeq	r0, r0, r4, lsl r0
     6f8:	0000057c 	andeq	r0, r0, ip, ror r5
     6fc:	08007224 	stmdaeq	r0, {r2, r5, r9, ip, sp, lr}
     700:	00000006 	andeq	r0, r0, r6
     704:	83080e41 	movwhi	r0, #36417	; 0x8e41
     708:	00018e02 	andeq	r8, r1, r2, lsl #28
     70c:	00000014 	andeq	r0, r0, r4, lsl r0
     710:	0000057c 	andeq	r0, r0, ip, ror r5
     714:	0800722c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp, lr}
     718:	00000006 	andeq	r0, r0, r6
     71c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     720:	00018e02 	andeq	r8, r1, r2, lsl #28
     724:	00000014 	andeq	r0, r0, r4, lsl r0
     728:	0000057c 	andeq	r0, r0, ip, ror r5
     72c:	08007234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp, lr}
     730:	00000006 	andeq	r0, r0, r6
     734:	83080e41 	movwhi	r0, #36417	; 0x8e41
     738:	00018e02 	andeq	r8, r1, r2, lsl #28
     73c:	00000014 	andeq	r0, r0, r4, lsl r0
     740:	0000057c 	andeq	r0, r0, ip, ror r5
     744:	0800723c 	stmdaeq	r0, {r2, r3, r4, r5, r9, ip, sp, lr}
     748:	00000006 	andeq	r0, r0, r6
     74c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     750:	00018e02 	andeq	r8, r1, r2, lsl #28
     754:	00000014 	andeq	r0, r0, r4, lsl r0
     758:	0000057c 	andeq	r0, r0, ip, ror r5
     75c:	08007244 	stmdaeq	r0, {r2, r6, r9, ip, sp, lr}
     760:	00000006 	andeq	r0, r0, r6
     764:	83080e41 	movwhi	r0, #36417	; 0x8e41
     768:	00018e02 	andeq	r8, r1, r2, lsl #28
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
     770:	0000057c 	andeq	r0, r0, ip, ror r5
     774:	0800724c 	stmdaeq	r0, {r2, r3, r6, r9, ip, sp, lr}
     778:	00000032 	andeq	r0, r0, r2, lsr r0
     77c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     780:	86028503 	strhi	r8, [r2], -r3, lsl #10
     784:	00000001 	andeq	r0, r0, r1
     788:	00000014 	andeq	r0, r0, r4, lsl r0
     78c:	0000057c 	andeq	r0, r0, ip, ror r5
     790:	08007280 	stmdaeq	r0, {r7, r9, ip, sp, lr}
     794:	00000006 	andeq	r0, r0, r6
     798:	83080e41 	movwhi	r0, #36417	; 0x8e41
     79c:	00018e02 	andeq	r8, r1, r2, lsl #28
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
     7a4:	0000057c 	andeq	r0, r0, ip, ror r5
     7a8:	08007288 	stmdaeq	r0, {r3, r7, r9, ip, sp, lr}
     7ac:	00000006 	andeq	r0, r0, r6
     7b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7b8:	00000014 	andeq	r0, r0, r4, lsl r0
     7bc:	0000057c 	andeq	r0, r0, ip, ror r5
     7c0:	08007290 	stmdaeq	r0, {r4, r7, r9, ip, sp, lr}
     7c4:	00000006 	andeq	r0, r0, r6
     7c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     7d0:	00000014 	andeq	r0, r0, r4, lsl r0
     7d4:	0000057c 	andeq	r0, r0, ip, ror r5
     7d8:	08007298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp, lr}
     7dc:	00000006 	andeq	r0, r0, r6
     7e0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7e8:	00000014 	andeq	r0, r0, r4, lsl r0
     7ec:	0000057c 	andeq	r0, r0, ip, ror r5
     7f0:	080072a0 	stmdaeq	r0, {r5, r7, r9, ip, sp, lr}
     7f4:	00000006 	andeq	r0, r0, r6
     7f8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     7fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     800:	00000014 	andeq	r0, r0, r4, lsl r0
     804:	0000057c 	andeq	r0, r0, ip, ror r5
     808:	080072a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp, lr}
     80c:	00000006 	andeq	r0, r0, r6
     810:	83080e41 	movwhi	r0, #36417	; 0x8e41
     814:	00018e02 	andeq	r8, r1, r2, lsl #28
     818:	00000014 	andeq	r0, r0, r4, lsl r0
     81c:	0000057c 	andeq	r0, r0, ip, ror r5
     820:	080072b0 	stmdaeq	r0, {r4, r5, r7, r9, ip, sp, lr}
     824:	00000006 	andeq	r0, r0, r6
     828:	83080e41 	movwhi	r0, #36417	; 0x8e41
     82c:	00018e02 	andeq	r8, r1, r2, lsl #28
     830:	00000014 	andeq	r0, r0, r4, lsl r0
     834:	0000057c 	andeq	r0, r0, ip, ror r5
     838:	080072b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, sp, lr}
     83c:	00000006 	andeq	r0, r0, r6
     840:	83080e41 	movwhi	r0, #36417	; 0x8e41
     844:	00018e02 	andeq	r8, r1, r2, lsl #28
     848:	00000014 	andeq	r0, r0, r4, lsl r0
     84c:	0000057c 	andeq	r0, r0, ip, ror r5
     850:	080072c0 	stmdaeq	r0, {r6, r7, r9, ip, sp, lr}
     854:	00000006 	andeq	r0, r0, r6
     858:	83080e41 	movwhi	r0, #36417	; 0x8e41
     85c:	00018e02 	andeq	r8, r1, r2, lsl #28
     860:	00000014 	andeq	r0, r0, r4, lsl r0
     864:	0000057c 	andeq	r0, r0, ip, ror r5
     868:	080072c8 	stmdaeq	r0, {r3, r6, r7, r9, ip, sp, lr}
     86c:	00000006 	andeq	r0, r0, r6
     870:	83080e41 	movwhi	r0, #36417	; 0x8e41
     874:	00018e02 	andeq	r8, r1, r2, lsl #28
     878:	00000014 	andeq	r0, r0, r4, lsl r0
     87c:	0000057c 	andeq	r0, r0, ip, ror r5
     880:	080072d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, sp, lr}
     884:	00000006 	andeq	r0, r0, r6
     888:	83080e41 	movwhi	r0, #36417	; 0x8e41
     88c:	00018e02 	andeq	r8, r1, r2, lsl #28
     890:	00000014 	andeq	r0, r0, r4, lsl r0
     894:	0000057c 	andeq	r0, r0, ip, ror r5
     898:	080072d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp, lr}
     89c:	00000006 	andeq	r0, r0, r6
     8a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8a8:	00000014 	andeq	r0, r0, r4, lsl r0
     8ac:	0000057c 	andeq	r0, r0, ip, ror r5
     8b0:	080072e0 	stmdaeq	r0, {r5, r6, r7, r9, ip, sp, lr}
     8b4:	00000006 	andeq	r0, r0, r6
     8b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8c0:	00000018 	andeq	r0, r0, r8, lsl r0
     8c4:	0000057c 	andeq	r0, r0, ip, ror r5
     8c8:	080072e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, sp, lr}
     8cc:	00000044 	andeq	r0, r0, r4, asr #32
     8d0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     8d4:	86028503 	strhi	r8, [r2], -r3, lsl #10
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000014 	andeq	r0, r0, r4, lsl r0
     8e0:	0000057c 	andeq	r0, r0, ip, ror r5
     8e4:	0800732c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp, lr}
     8e8:	00000006 	andeq	r0, r0, r6
     8ec:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f4:	00000014 	andeq	r0, r0, r4, lsl r0
     8f8:	0000057c 	andeq	r0, r0, ip, ror r5
     8fc:	08007334 	stmdaeq	r0, {r2, r4, r5, r8, r9, ip, sp, lr}
     900:	00000006 	andeq	r0, r0, r6
     904:	83080e41 	movwhi	r0, #36417	; 0x8e41
     908:	00018e02 	andeq	r8, r1, r2, lsl #28
     90c:	00000014 	andeq	r0, r0, r4, lsl r0
     910:	0000057c 	andeq	r0, r0, ip, ror r5
     914:	0800733c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp, lr}
     918:	00000006 	andeq	r0, r0, r6
     91c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     920:	00018e02 	andeq	r8, r1, r2, lsl #28
     924:	00000014 	andeq	r0, r0, r4, lsl r0
     928:	0000057c 	andeq	r0, r0, ip, ror r5
     92c:	08007344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp, lr}
     930:	00000006 	andeq	r0, r0, r6
     934:	83080e41 	movwhi	r0, #36417	; 0x8e41
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	00000014 	andeq	r0, r0, r4, lsl r0
     940:	0000057c 	andeq	r0, r0, ip, ror r5
     944:	0800734c 	stmdaeq	r0, {r2, r3, r6, r8, r9, ip, sp, lr}
     948:	00000006 	andeq	r0, r0, r6
     94c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     950:	00018e02 	andeq	r8, r1, r2, lsl #28
     954:	00000014 	andeq	r0, r0, r4, lsl r0
     958:	0000057c 	andeq	r0, r0, ip, ror r5
     95c:	08007354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, sp, lr}
     960:	00000006 	andeq	r0, r0, r6
     964:	83080e41 	movwhi	r0, #36417	; 0x8e41
     968:	00018e02 	andeq	r8, r1, r2, lsl #28
     96c:	0000000c 	andeq	r0, r0, ip
     970:	0000057c 	andeq	r0, r0, ip, ror r5
     974:	0800735c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, ip, sp, lr}
     978:	00000022 	andeq	r0, r0, r2, lsr #32
     97c:	00000014 	andeq	r0, r0, r4, lsl r0
     980:	0000057c 	andeq	r0, r0, ip, ror r5
     984:	08007380 	stmdaeq	r0, {r7, r8, r9, ip, sp, lr}
     988:	00000006 	andeq	r0, r0, r6
     98c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     990:	00018e02 	andeq	r8, r1, r2, lsl #28
     994:	00000014 	andeq	r0, r0, r4, lsl r0
     998:	0000057c 	andeq	r0, r0, ip, ror r5
     99c:	08007388 	stmdaeq	r0, {r3, r7, r8, r9, ip, sp, lr}
     9a0:	00000006 	andeq	r0, r0, r6
     9a4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9ac:	00000014 	andeq	r0, r0, r4, lsl r0
     9b0:	0000057c 	andeq	r0, r0, ip, ror r5
     9b4:	08007390 	stmdaeq	r0, {r4, r7, r8, r9, ip, sp, lr}
     9b8:	00000006 	andeq	r0, r0, r6
     9bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9c4:	00000014 	andeq	r0, r0, r4, lsl r0
     9c8:	0000057c 	andeq	r0, r0, ip, ror r5
     9cc:	08007398 	stmdaeq	r0, {r3, r4, r7, r8, r9, ip, sp, lr}
     9d0:	00000006 	andeq	r0, r0, r6
     9d4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9dc:	00000014 	andeq	r0, r0, r4, lsl r0
     9e0:	0000057c 	andeq	r0, r0, ip, ror r5
     9e4:	080073a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp, lr}
     9e8:	00000006 	andeq	r0, r0, r6
     9ec:	83080e41 	movwhi	r0, #36417	; 0x8e41
     9f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9f4:	00000014 	andeq	r0, r0, r4, lsl r0
     9f8:	0000057c 	andeq	r0, r0, ip, ror r5
     9fc:	080073a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp, lr}
     a00:	00000006 	andeq	r0, r0, r6
     a04:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a08:	00018e02 	andeq	r8, r1, r2, lsl #28
     a0c:	00000014 	andeq	r0, r0, r4, lsl r0
     a10:	0000057c 	andeq	r0, r0, ip, ror r5
     a14:	080073b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, ip, sp, lr}
     a18:	00000016 	andeq	r0, r0, r6, lsl r0
     a1c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a20:	00018e02 	andeq	r8, r1, r2, lsl #28
     a24:	00000014 	andeq	r0, r0, r4, lsl r0
     a28:	0000057c 	andeq	r0, r0, ip, ror r5
     a2c:	080073c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp, lr}
     a30:	00000006 	andeq	r0, r0, r6
     a34:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a38:	00018e02 	andeq	r8, r1, r2, lsl #28
     a3c:	00000014 	andeq	r0, r0, r4, lsl r0
     a40:	0000057c 	andeq	r0, r0, ip, ror r5
     a44:	080073d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, sp, lr}
     a48:	00000006 	andeq	r0, r0, r6
     a4c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a50:	00018e02 	andeq	r8, r1, r2, lsl #28
     a54:	00000018 	andeq	r0, r0, r8, lsl r0
     a58:	0000057c 	andeq	r0, r0, ip, ror r5
     a5c:	080073d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, lr}
     a60:	00000046 	andeq	r0, r0, r6, asr #32
     a64:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     a68:	86028503 	strhi	r8, [r2], -r3, lsl #10
     a6c:	00000001 	andeq	r0, r0, r1
     a70:	00000014 	andeq	r0, r0, r4, lsl r0
     a74:	0000057c 	andeq	r0, r0, ip, ror r5
     a78:	08007420 	stmdaeq	r0, {r5, sl, ip, sp, lr}
     a7c:	00000006 	andeq	r0, r0, r6
     a80:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a84:	00018e02 	andeq	r8, r1, r2, lsl #28
     a88:	00000014 	andeq	r0, r0, r4, lsl r0
     a8c:	0000057c 	andeq	r0, r0, ip, ror r5
     a90:	08007428 	stmdaeq	r0, {r3, r5, sl, ip, sp, lr}
     a94:	00000006 	andeq	r0, r0, r6
     a98:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     aa0:	0000000c 	andeq	r0, r0, ip
     aa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     aa8:	7c020001 	stcvc	0, cr0, [r2], {1}
     aac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ab0:	00000014 	andeq	r0, r0, r4, lsl r0
     ab4:	00000aa0 	andeq	r0, r0, r0, lsr #21
     ab8:	08007430 	stmdaeq	r0, {r4, r5, sl, ip, sp, lr}
     abc:	00000048 	andeq	r0, r0, r8, asr #32
     ac0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     ac4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac8:	0000000c 	andeq	r0, r0, ip
     acc:	00000aa0 	andeq	r0, r0, r0, lsr #21
     ad0:	08007478 	stmdaeq	r0, {r3, r4, r5, r6, sl, ip, sp, lr}
     ad4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad8:	0000000c 	andeq	r0, r0, ip
     adc:	00000aa0 	andeq	r0, r0, r0, lsr #21
     ae0:	08007494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp, lr}
     ae4:	0000000e 	andeq	r0, r0, lr
     ae8:	0000000c 	andeq	r0, r0, ip
     aec:	00000aa0 	andeq	r0, r0, r0, lsr #21
     af0:	080074a4 	stmdaeq	r0, {r2, r5, r7, sl, ip, sp, lr}
     af4:	0000000c 	andeq	r0, r0, ip
     af8:	0000000c 	andeq	r0, r0, ip
     afc:	00000aa0 	andeq	r0, r0, r0, lsr #21
     b00:	080074b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, sp, lr}
     b04:	0000000c 	andeq	r0, r0, ip
     b08:	0000000c 	andeq	r0, r0, ip
     b0c:	00000aa0 	andeq	r0, r0, r0, lsr #21
     b10:	080074bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, ip, sp, lr}
     b14:	00000010 	andeq	r0, r0, r0, lsl r0
     b18:	0000000c 	andeq	r0, r0, ip
     b1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b20:	7c020001 	stcvc	0, cr0, [r2], {1}
     b24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b28:	00000018 	andeq	r0, r0, r8, lsl r0
     b2c:	00000b18 	andeq	r0, r0, r8, lsl fp
     b30:	080074d0 	stmdaeq	r0, {r4, r6, r7, sl, ip, sp, lr}
     b34:	000000f4 	strdeq	r0, [r0], -r4
     b38:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     b3c:	86028503 	strhi	r8, [r2], -r3, lsl #10
     b40:	00000001 	andeq	r0, r0, r1
     b44:	00000014 	andeq	r0, r0, r4, lsl r0
     b48:	00000b18 	andeq	r0, r0, r8, lsl fp
     b4c:	080075c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp, lr}
     b50:	000000b6 	strheq	r0, [r0], -r6
     b54:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b58:	00018502 	andeq	r8, r1, r2, lsl #10
     b5c:	0000000c 	andeq	r0, r0, ip
     b60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b64:	7c020001 	stcvc	0, cr0, [r2], {1}
     b68:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b6c:	00000018 	andeq	r0, r0, r8, lsl r0
     b70:	00000b5c 	andeq	r0, r0, ip, asr fp
     b74:	08007680 	stmdaeq	r0, {r7, r9, sl, ip, sp, lr}
     b78:	000000b8 	strheq	r0, [r0], -r8
     b7c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     b80:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b84:	00018e02 	andeq	r8, r1, r2, lsl #28
     b88:	0000000c 	andeq	r0, r0, ip
     b8c:	00000b5c 	andeq	r0, r0, ip, asr fp
     b90:	08007738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, ip, sp, lr}
     b94:	0000003a 	andeq	r0, r0, sl, lsr r0
     b98:	00000014 	andeq	r0, r0, r4, lsl r0
     b9c:	00000b5c 	andeq	r0, r0, ip, asr fp
     ba0:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
     ba4:	00000042 	andeq	r0, r0, r2, asr #32
     ba8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     bac:	00018502 	andeq	r8, r1, r2, lsl #10
     bb0:	00000024 	andeq	r0, r0, r4, lsr #32
     bb4:	00000b5c 	andeq	r0, r0, ip, asr fp
     bb8:	080077b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
     bbc:	00000060 	andeq	r0, r0, r0, rrx
     bc0:	80100e41 	andshi	r0, r0, r1, asr #28
     bc4:	82038104 	andhi	r8, r3, #4, 2
     bc8:	41018302 	tstmi	r1, r2, lsl #6
     bcc:	07841c0e 	streq	r1, [r4, lr, lsl #24]
     bd0:	058e0685 	streq	r0, [lr, #1669]	; 0x685
     bd4:	02a80e41 	adceq	r0, r8, #1040	; 0x410
     bd8:	0000000c 	andeq	r0, r0, ip
     bdc:	00000b5c 	andeq	r0, r0, ip, asr fp
     be0:	08007818 	stmdaeq	r0, {r3, r4, fp, ip, sp, lr}
     be4:	00000016 	andeq	r0, r0, r6, lsl r0
     be8:	0000000c 	andeq	r0, r0, ip
     bec:	00000b5c 	andeq	r0, r0, ip, asr fp
     bf0:	08007830 	stmdaeq	r0, {r4, r5, fp, ip, sp, lr}
     bf4:	00000018 	andeq	r0, r0, r8, lsl r0
     bf8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bfc:	00000b5c 	andeq	r0, r0, ip, asr fp
     c00:	08007848 	stmdaeq	r0, {r3, r6, fp, ip, sp, lr}
     c04:	0000009c 	muleq	r0, ip, r0
     c08:	83180e41 	tsthi	r8, #1040	; 0x410
     c0c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c10:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
     c18:	0000001c 	andeq	r0, r0, ip, lsl r0
     c1c:	00000b5c 	andeq	r0, r0, ip, asr fp
     c20:	080078e4 	stmdaeq	r0, {r2, r5, r6, r7, fp, ip, sp, lr}
     c24:	000000ba 	strheq	r0, [r0], -sl
     c28:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     c2c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     c30:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     c34:	380e4101 	stmdacc	lr, {r0, r8, lr}
     c38:	0000000c 	andeq	r0, r0, ip
     c3c:	00000b5c 	andeq	r0, r0, ip, asr fp
     c40:	080079a0 	stmdaeq	r0, {r5, r7, r8, fp, ip, sp, lr}
     c44:	00000042 	andeq	r0, r0, r2, asr #32
     c48:	0000000c 	andeq	r0, r0, ip
     c4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c50:	7c020001 	stcvc	0, cr0, [r2], {1}
     c54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c58:	0000000c 	andeq	r0, r0, ip
     c5c:	00000c48 	andeq	r0, r0, r8, asr #24
     c60:	080079e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip, sp, lr}
     c64:	00000008 	andeq	r0, r0, r8
     c68:	0000000c 	andeq	r0, r0, ip
     c6c:	00000c48 	andeq	r0, r0, r8, asr #24
     c70:	080079f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, sp, lr}
     c74:	00000008 	andeq	r0, r0, r8
     c78:	0000000c 	andeq	r0, r0, ip
     c7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c80:	7c020001 	stcvc	0, cr0, [r2], {1}
     c84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c88:	0000000c 	andeq	r0, r0, ip
     c8c:	00000c78 	andeq	r0, r0, r8, ror ip
     c90:	080079f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, sp, lr}
     c94:	0000005e 	andeq	r0, r0, lr, asr r0
     c98:	0000000c 	andeq	r0, r0, ip
     c9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ca0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ca4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ca8:	00000024 	andeq	r0, r0, r4, lsr #32
     cac:	00000c98 	muleq	r0, r8, ip
     cb0:	08007a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, sp, lr}
     cb4:	0000013c 	andeq	r0, r0, ip, lsr r1
     cb8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     cbc:	86088509 	strhi	r8, [r8], -r9, lsl #10
     cc0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     cc4:	8a048905 	bhi	1230e0 <__RW_SIZE__+0x122b58>
     cc8:	8e028b03 	vmlahi.f64	d8, d2, d3
     ccc:	380e4301 	stmdacc	lr, {r0, r8, r9, lr}
     cd0:	00000014 	andeq	r0, r0, r4, lsl r0
     cd4:	00000c98 	muleq	r0, r8, ip
     cd8:	08007b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip, sp, lr}
     cdc:	0000001a 	andeq	r0, r0, sl, lsl r0
     ce0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     ce4:	00018502 	andeq	r8, r1, r2, lsl #10
     ce8:	0000000c 	andeq	r0, r0, ip
     cec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cf0:	7c020001 	stcvc	0, cr0, [r2], {1}
     cf4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
     cfc:	00000ce8 	andeq	r0, r0, r8, ror #25
     d00:	08007bb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, fp, ip, sp, lr}
     d04:	00000032 	andeq	r0, r0, r2, lsr r0
     d08:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     d0c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     d10:	780e4101 	stmdavc	lr, {r0, r8, lr}
     d14:	00000014 	andeq	r0, r0, r4, lsl r0
     d18:	00000ce8 	andeq	r0, r0, r8, ror #25
     d1c:	08007be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp, lr}
     d20:	0000001a 	andeq	r0, r0, sl, lsl r0
     d24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d28:	00018502 	andeq	r8, r1, r2, lsl #10
     d2c:	0000000c 	andeq	r0, r0, ip
     d30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d34:	7c020001 	stcvc	0, cr0, [r2], {1}
     d38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d3c:	00000028 	andeq	r0, r0, r8, lsr #32
     d40:	00000d2c 	andeq	r0, r0, ip, lsr #26
     d44:	08007c00 	stmdaeq	r0, {sl, fp, ip, sp, lr}
     d48:	000014b4 			; <UNDEFINED> instruction: 0x000014b4
     d4c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     d50:	86088509 	strhi	r8, [r8], -r9, lsl #10
     d54:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     d58:	8a048905 	bhi	123174 <__RW_SIZE__+0x122bec>
     d5c:	8e028b03 	vmlahi.f64	d8, d2, d3
     d60:	c80e4101 	stmdagt	lr, {r0, r8, lr}
     d64:	00000002 	andeq	r0, r0, r2
     d68:	0000000c 	andeq	r0, r0, ip
     d6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d70:	7c020001 	stcvc	0, cr0, [r2], {1}
     d74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d78:	00000024 	andeq	r0, r0, r4, lsr #32
     d7c:	00000d68 	andeq	r0, r0, r8, ror #26
     d80:	080090b8 	stmdaeq	r0, {r3, r4, r5, r7, ip, pc}
     d84:	0000014a 	andeq	r0, r0, sl, asr #2
     d88:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     d8c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     d90:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     d94:	8a048905 	bhi	1231b0 <__RW_SIZE__+0x122c28>
     d98:	8e028b03 	vmlahi.f64	d8, d2, d3
     d9c:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     da0:	00000028 	andeq	r0, r0, r8, lsr #32
     da4:	00000d68 	andeq	r0, r0, r8, ror #26
     da8:	08009204 	stmdaeq	r0, {r2, r9, ip, pc}
     dac:	00000f8a 	andeq	r0, r0, sl, lsl #31
     db0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     db4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     db8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     dbc:	8a048905 	bhi	1231d8 <__RW_SIZE__+0x122c50>
     dc0:	8e028b03 	vmlahi.f64	d8, d2, d3
     dc4:	900e4101 	andls	r4, lr, r1, lsl #2
     dc8:	00000001 	andeq	r0, r0, r1
     dcc:	0000000c 	andeq	r0, r0, ip
     dd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dd4:	7c020001 	stcvc	0, cr0, [r2], {1}
     dd8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ddc:	00000014 	andeq	r0, r0, r4, lsl r0
     de0:	00000dcc 	andeq	r0, r0, ip, asr #27
     de4:	0800a190 	stmdaeq	r0, {r4, r7, r8, sp, pc}
     de8:	00000052 	andeq	r0, r0, r2, asr r0
     dec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     df0:	00018e02 	andeq	r8, r1, r2, lsl #28
     df4:	0000000c 	andeq	r0, r0, ip
     df8:	00000dcc 	andeq	r0, r0, ip, asr #27
     dfc:	0800a1e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, pc}
     e00:	0000000a 	andeq	r0, r0, sl
     e04:	0000000c 	andeq	r0, r0, ip
     e08:	00000dcc 	andeq	r0, r0, ip, asr #27
     e0c:	0800a1f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, pc}
     e10:	0000000c 	andeq	r0, r0, ip
     e14:	0000000c 	andeq	r0, r0, ip
     e18:	00000dcc 	andeq	r0, r0, ip, asr #27
     e1c:	0800a1fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sp, pc}
     e20:	00000008 	andeq	r0, r0, r8
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	00000dcc 	andeq	r0, r0, ip, asr #27
     e2c:	0800a204 	stmdaeq	r0, {r2, r9, sp, pc}
     e30:	00000004 	andeq	r0, r0, r4
     e34:	0000000c 	andeq	r0, r0, ip
     e38:	00000dcc 	andeq	r0, r0, ip, asr #27
     e3c:	0800a208 	stmdaeq	r0, {r3, r9, sp, pc}
     e40:	00000008 	andeq	r0, r0, r8
     e44:	0000000c 	andeq	r0, r0, ip
     e48:	00000dcc 	andeq	r0, r0, ip, asr #27
     e4c:	0800a210 	stmdaeq	r0, {r4, r9, sp, pc}
     e50:	00000012 	andeq	r0, r0, r2, lsl r0
     e54:	0000000c 	andeq	r0, r0, ip
     e58:	00000dcc 	andeq	r0, r0, ip, asr #27
     e5c:	0800a224 	stmdaeq	r0, {r2, r5, r9, sp, pc}
     e60:	00000008 	andeq	r0, r0, r8
     e64:	0000000c 	andeq	r0, r0, ip
     e68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e74:	0000000c 	andeq	r0, r0, ip
     e78:	00000e64 	andeq	r0, r0, r4, ror #28
     e7c:	0800a22c 	stmdaeq	r0, {r2, r3, r5, r9, sp, pc}
     e80:	00000010 	andeq	r0, r0, r0, lsl r0
     e84:	0000000c 	andeq	r0, r0, ip
     e88:	00000e64 	andeq	r0, r0, r4, ror #28
     e8c:	0800a23c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, pc}
     e90:	00000010 	andeq	r0, r0, r0, lsl r0
     e94:	0000000c 	andeq	r0, r0, ip
     e98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e9c:	7c020001 	stcvc	0, cr0, [r2], {1}
     ea0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ea4:	00000024 	andeq	r0, r0, r4, lsr #32
     ea8:	00000e94 	muleq	r0, r4, lr
     eac:	0800a24c 	stmdaeq	r0, {r2, r3, r6, r9, sp, pc}
     eb0:	0000056e 	andeq	r0, r0, lr, ror #10
     eb4:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     eb8:	86088509 	strhi	r8, [r8], -r9, lsl #10
     ebc:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     ec0:	8a048905 	bhi	1232dc <__RW_SIZE__+0x122d54>
     ec4:	8e028b03 	vmlahi.f64	d8, d2, d3
     ec8:	300e4401 	andcc	r4, lr, r1, lsl #8
     ecc:	0000000c 	andeq	r0, r0, ip
     ed0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ed4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ed8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     edc:	00000018 	andeq	r0, r0, r8, lsl r0
     ee0:	00000ecc 	andeq	r0, r0, ip, asr #29
     ee4:	0800a7bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, sp, pc}
     ee8:	00000090 	muleq	r0, r0, r0
     eec:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     ef0:	86028503 	strhi	r8, [r2], -r3, lsl #10
     ef4:	00000001 	andeq	r0, r0, r1
     ef8:	0000000c 	andeq	r0, r0, ip
     efc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f00:	7c020001 	stcvc	0, cr0, [r2], {1}
     f04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f08:	00000018 	andeq	r0, r0, r8, lsl r0
     f0c:	00000ef8 	strdeq	r0, [r0], -r8
     f10:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
     f14:	000000a6 	andeq	r0, r0, r6, lsr #1
     f18:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     f1c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f20:	00018702 	andeq	r8, r1, r2, lsl #14
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f2c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f34:	0000000c 	andeq	r0, r0, ip
     f38:	00000f24 	andeq	r0, r0, r4, lsr #30
     f3c:	0800a8f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, sp, pc}
     f40:	00000002 	andeq	r0, r0, r2
     f44:	0000000c 	andeq	r0, r0, ip
     f48:	00000f24 	andeq	r0, r0, r4, lsr #30
     f4c:	0800a8f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, fp, sp, pc}
     f50:	00000002 	andeq	r0, r0, r2
     f54:	0000000c 	andeq	r0, r0, ip
     f58:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f5c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f60:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f64:	00000018 	andeq	r0, r0, r8, lsl r0
     f68:	00000f54 	andeq	r0, r0, r4, asr pc
     f6c:	0800a8fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp, pc}
     f70:	0000006c 	andeq	r0, r0, ip, rrx
     f74:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f78:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f80:	00000018 	andeq	r0, r0, r8, lsl r0
     f84:	00000f54 	andeq	r0, r0, r4, asr pc
     f88:	0800a968 	stmdaeq	r0, {r3, r5, r6, r8, fp, sp, pc}
     f8c:	00000036 	andeq	r0, r0, r6, lsr r0
     f90:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     f94:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f98:	180e4301 	stmdane	lr, {r0, r8, r9, lr}
     f9c:	00000024 	andeq	r0, r0, r4, lsr #32
     fa0:	00000f54 	andeq	r0, r0, r4, asr pc
     fa4:	0800a9a0 	stmdaeq	r0, {r5, r7, r8, fp, sp, pc}
     fa8:	0000008c 	andeq	r0, r0, ip, lsl #1
     fac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     fb0:	86078508 	strhi	r8, [r7], -r8, lsl #10
     fb4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     fb8:	8a038904 	bhi	e33d0 <__RW_SIZE__+0xe2e48>
     fbc:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     fc0:	0000280e 	andeq	r2, r0, lr, lsl #16
     fc4:	00000020 	andeq	r0, r0, r0, lsr #32
     fc8:	00000f54 	andeq	r0, r0, r4, asr pc
     fcc:	0800aa2c 	stmdaeq	r0, {r2, r3, r5, r9, fp, sp, pc}
     fd0:	00000098 	muleq	r0, r8, r0
     fd4:	83200e42 	teqhi	r0, #1056	; 0x420
     fd8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     fdc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     fe0:	89038804 	stmdbhi	r3, {r2, fp, pc}
     fe4:	00018e02 	andeq	r8, r1, r2, lsl #28
     fe8:	0000000c 	andeq	r0, r0, ip
     fec:	00000f54 	andeq	r0, r0, r4, asr pc
     ff0:	0800aac4 	stmdaeq	r0, {r2, r6, r7, r9, fp, sp, pc}
     ff4:	0000003c 	andeq	r0, r0, ip, lsr r0
     ff8:	0000000c 	andeq	r0, r0, ip
     ffc:	00000f54 	andeq	r0, r0, r4, asr pc
    1000:	0800ab00 	stmdaeq	r0, {r8, r9, fp, sp, pc}
    1004:	00000056 	andeq	r0, r0, r6, asr r0
    1008:	00000014 	andeq	r0, r0, r4, lsl r0
    100c:	00000f54 	andeq	r0, r0, r4, asr pc
    1010:	0800ab58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp, pc}
    1014:	00000012 	andeq	r0, r0, r2, lsl r0
    1018:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    101c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1020:	00000024 	andeq	r0, r0, r4, lsr #32
    1024:	00000f54 	andeq	r0, r0, r4, asr pc
    1028:	0800ab6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, pc}
    102c:	00000140 	andeq	r0, r0, r0, asr #2
    1030:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1034:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1038:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    103c:	8a048905 	bhi	123458 <__RW_SIZE__+0x122ed0>
    1040:	8e028b03 	vmlahi.f64	d8, d2, d3
    1044:	380e4301 	stmdacc	lr, {r0, r8, r9, lr}
    1048:	00000020 	andeq	r0, r0, r0, lsr #32
    104c:	00000f54 	andeq	r0, r0, r4, asr pc
    1050:	0800acac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, sp, pc}
    1054:	000000b8 	strheq	r0, [r0], -r8
    1058:	841c0e44 	ldrhi	r0, [ip], #-3652	; 0xfffff1bc
    105c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1060:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1064:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1068:	280e4201 	stmdacs	lr, {r0, r9, lr}
    106c:	00000024 	andeq	r0, r0, r4, lsr #32
    1070:	00000f54 	andeq	r0, r0, r4, asr pc
    1074:	0800ad64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, sp, pc}
    1078:	000000b6 	strheq	r0, [r0], -r6
    107c:	83280e42 	teqhi	r8, #1056	; 0x420
    1080:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    1084:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    1088:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    108c:	8b038a04 	blhi	e38a4 <__RW_SIZE__+0xe331c>
    1090:	00018e02 	andeq	r8, r1, r2, lsl #28
    1094:	00000014 	andeq	r0, r0, r4, lsl r0
    1098:	00000f54 	andeq	r0, r0, r4, asr pc
    109c:	0800ae1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, pc}
    10a0:	00000042 	andeq	r0, r0, r2, asr #32
    10a4:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
    10a8:	00000001 	andeq	r0, r0, r1
    10ac:	00000024 	andeq	r0, r0, r4, lsr #32
    10b0:	00000f54 	andeq	r0, r0, r4, asr pc
    10b4:	0800ae60 	stmdaeq	r0, {r5, r6, r9, sl, fp, sp, pc}
    10b8:	000000ea 	andeq	r0, r0, sl, ror #1
    10bc:	83280e42 	teqhi	r8, #1056	; 0x420
    10c0:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    10c4:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    10c8:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    10cc:	8b038a04 	blhi	e38e4 <__RW_SIZE__+0xe335c>
    10d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00000f54 	andeq	r0, r0, r4, asr pc
    10dc:	0800af4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, sp, pc}
    10e0:	00000042 	andeq	r0, r0, r2, asr #32
    10e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e8:	00000f54 	andeq	r0, r0, r4, asr pc
    10ec:	0800af90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, sp, pc}
    10f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    10f4:	83180e41 	tsthi	r8, #1040	; 0x410
    10f8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    10fc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1100:	00018e02 	andeq	r8, r1, r2, lsl #28
    1104:	00000020 	andeq	r0, r0, r0, lsr #32
    1108:	00000f54 	andeq	r0, r0, r4, asr pc
    110c:	0800b03c 	stmdaeq	r0, {r2, r3, r4, r5, ip, sp, pc}
    1110:	000000ba 	strheq	r0, [r0], -sl
    1114:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    1118:	86058506 	strhi	r8, [r5], -r6, lsl #10
    111c:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1120:	41018e02 	tstmi	r1, r2, lsl #28
    1124:	0000200e 	andeq	r2, r0, lr
    1128:	00000020 	andeq	r0, r0, r0, lsr #32
    112c:	00000f54 	andeq	r0, r0, r4, asr pc
    1130:	0800b0f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp, pc}
    1134:	0000005e 	andeq	r0, r0, lr, asr r0
    1138:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xfffff1be
    113c:	86068507 	strhi	r8, [r6], -r7, lsl #10
    1140:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1144:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    1148:	280e4101 	stmdacs	lr, {r0, r8, lr}
    114c:	00000014 	andeq	r0, r0, r4, lsl r0
    1150:	00000f54 	andeq	r0, r0, r4, asr pc
    1154:	0800b158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, pc}
    1158:	00000034 	andeq	r0, r0, r4, lsr r0
    115c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1160:	00018e02 	andeq	r8, r1, r2, lsl #28
    1164:	00000018 	andeq	r0, r0, r8, lsl r0
    1168:	00000f54 	andeq	r0, r0, r4, asr pc
    116c:	0800b18c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp, pc}
    1170:	00000046 	andeq	r0, r0, r6, asr #32
    1174:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1178:	86028503 	strhi	r8, [r2], -r3, lsl #10
    117c:	00000001 	andeq	r0, r0, r1
    1180:	00000014 	andeq	r0, r0, r4, lsl r0
    1184:	00000f54 	andeq	r0, r0, r4, asr pc
    1188:	0800b1d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, ip, sp, pc}
    118c:	0000005e 	andeq	r0, r0, lr, asr r0
    1190:	84040e43 	strhi	r0, [r4], #-3651	; 0xfffff1bd
    1194:	00000001 	andeq	r0, r0, r1
    1198:	0000000c 	andeq	r0, r0, ip
    119c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    11a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a8:	0000000c 	andeq	r0, r0, ip
    11ac:	00001198 	muleq	r0, r8, r1
    11b0:	0800b234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp, pc}
    11b4:	00000050 	andeq	r0, r0, r0, asr r0
    11b8:	0000000c 	andeq	r0, r0, ip
    11bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    11c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11c8:	00000018 	andeq	r0, r0, r8, lsl r0
    11cc:	000011b8 			; <UNDEFINED> instruction: 0x000011b8
    11d0:	0800b284 	stmdaeq	r0, {r2, r7, r9, ip, sp, pc}
    11d4:	00000026 	andeq	r0, r0, r6, lsr #32
    11d8:	83100e41 	tsthi	r0, #1040	; 0x410
    11dc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    11e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    11e4:	0000000c 	andeq	r0, r0, ip
    11e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f4:	00000024 	andeq	r0, r0, r4, lsr #32
    11f8:	000011e4 	andeq	r1, r0, r4, ror #3
    11fc:	0800b4e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, sp, pc}
    1200:	00000104 	andeq	r0, r0, r4, lsl #2
    1204:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1208:	86088509 	strhi	r8, [r8], -r9, lsl #10
    120c:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1210:	8a048905 	bhi	12362c <__RW_SIZE__+0x1230a4>
    1214:	8e028b03 	vmlahi.f64	d8, d2, d3
    1218:	300e4301 	andcc	r4, lr, r1, lsl #6
    121c:	00000028 	andeq	r0, r0, r8, lsr #32
    1220:	000011e4 	andeq	r1, r0, r4, ror #3
    1224:	0800b5ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip, sp, pc}
    1228:	00000adc 	ldrdeq	r0, [r0], -ip
    122c:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1230:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1234:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1238:	8a048905 	bhi	123654 <__RW_SIZE__+0x1230cc>
    123c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1240:	f00e4101 			; <UNDEFINED> instruction: 0xf00e4101
    1244:	00000001 	andeq	r0, r0, r1
    1248:	0000000c 	andeq	r0, r0, ip
    124c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1250:	7c020001 	stcvc	0, cr0, [r2], {1}
    1254:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1258:	00000014 	andeq	r0, r0, r4, lsl r0
    125c:	00001248 	andeq	r1, r0, r8, asr #4
    1260:	0800c0c8 	stmdaeq	r0, {r3, r6, r7, lr, pc}
    1264:	00000062 	andeq	r0, r0, r2, rrx
    1268:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    126c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1270:	0000000c 	andeq	r0, r0, ip
    1274:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1278:	7c020001 	stcvc	0, cr0, [r2], {1}
    127c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1280:	0000001c 	andeq	r0, r0, ip, lsl r0
    1284:	00001270 	andeq	r1, r0, r0, ror r2
    1288:	0800c12c 	stmdaeq	r0, {r2, r3, r5, r8, lr, pc}
    128c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1290:	83180e41 	tsthi	r8, #1040	; 0x410
    1294:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1298:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    129c:	00018e02 	andeq	r8, r1, r2, lsl #28
    12a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12a4:	00001270 	andeq	r1, r0, r0, ror r2
    12a8:	0800c1d0 	stmdaeq	r0, {r4, r6, r7, r8, lr, pc}
    12ac:	00000198 	muleq	r0, r8, r1
    12b0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    12b4:	86058506 	strhi	r8, [r5], -r6, lsl #10
    12b8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    12bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    12c0:	0000000c 	andeq	r0, r0, ip
    12c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12c8:	7c020001 	stcvc	0, cr0, [r2], {1}
    12cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12d0:	00000018 	andeq	r0, r0, r8, lsl r0
    12d4:	000012c0 	andeq	r1, r0, r0, asr #5
    12d8:	0800c368 	stmdaeq	r0, {r3, r5, r6, r8, r9, lr, pc}
    12dc:	000000ce 	andeq	r0, r0, lr, asr #1
    12e0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    12e4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    12e8:	00018702 	andeq	r8, r1, r2, lsl #14
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12fc:	00000018 	andeq	r0, r0, r8, lsl r0
    1300:	000012ec 	andeq	r1, r0, ip, ror #5
    1304:	0800c438 	stmdaeq	r0, {r3, r4, r5, sl, lr, pc}
    1308:	0000009e 	muleq	r0, lr, r0
    130c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1310:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1314:	00018702 	andeq	r8, r1, r2, lsl #14
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1320:	7c020001 	stcvc	0, cr0, [r2], {1}
    1324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1328:	00000024 	andeq	r0, r0, r4, lsr #32
    132c:	00001318 	andeq	r1, r0, r8, lsl r3
    1330:	0800c4d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, lr, pc}
    1334:	000003ea 	andeq	r0, r0, sl, ror #7
    1338:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    133c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1340:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1344:	8a048905 	bhi	123760 <__RW_SIZE__+0x1231d8>
    1348:	8e028b03 	vmlahi.f64	d8, d2, d3
    134c:	300e4201 	andcc	r4, lr, r1, lsl #4
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1358:	7c020001 	stcvc	0, cr0, [r2], {1}
    135c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1360:	00000018 	andeq	r0, r0, r8, lsl r0
    1364:	00001350 	andeq	r1, r0, r0, asr r3
    1368:	0800c8c4 	stmdaeq	r0, {r2, r6, r7, fp, lr, pc}
    136c:	0000001a 	andeq	r0, r0, sl, lsl r0
    1370:	83100e41 	tsthi	r0, #1040	; 0x410
    1374:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1378:	00018e02 	andeq	r8, r1, r2, lsl #28
    137c:	00000018 	andeq	r0, r0, r8, lsl r0
    1380:	00001350 	andeq	r1, r0, r0, asr r3
    1384:	0800c8e0 	stmdaeq	r0, {r5, r6, r7, fp, lr, pc}
    1388:	000000d6 	ldrdeq	r0, [r0], -r6
    138c:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
    1390:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	0000000c 	andeq	r0, r0, ip
    139c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13a0:	7c010001 	stcvc	0, cr0, [r1], {1}
    13a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13a8:	0000000c 	andeq	r0, r0, ip
    13ac:	00001398 	muleq	r0, r8, r3
    13b0:	0800c9b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, lr, pc}
    13b4:	0000025c 	andeq	r0, r0, ip, asr r2
    13b8:	0000000c 	andeq	r0, r0, ip
    13bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13c0:	7c010001 	stcvc	0, cr0, [r1], {1}
    13c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
    13cc:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    13d0:	0800d569 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, ip, lr, pc}
    13d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    13d8:	0e038e5e 	mcreq	14, 0, r8, cr3, cr14, {2}
    13dc:	00000010 	andeq	r0, r0, r0, lsl r0
    13e0:	0000000c 	andeq	r0, r0, ip
    13e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    13ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13f0:	00000020 	andeq	r0, r0, r0, lsr #32
    13f4:	000013e0 	andeq	r1, r0, r0, ror #7
    13f8:	0800d594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, lr, pc}
    13fc:	00000030 	andeq	r0, r0, r0, lsr r0
    1400:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    1404:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1408:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    140c:	8a038904 	bhi	e3824 <__RW_SIZE__+0xe329c>
    1410:	00018e02 	andeq	r8, r1, r2, lsl #28
    1414:	00000020 	andeq	r0, r0, r0, lsr #32
    1418:	000013e0 	andeq	r1, r0, r0, ror #7
    141c:	0800d5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr, pc}
    1420:	00000030 	andeq	r0, r0, r0, lsr r0
    1424:	83200e42 	teqhi	r0, #1056	; 0x420
    1428:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
    142c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    1430:	89038804 	stmdbhi	r3, {r2, fp, pc}
    1434:	00018e02 	andeq	r8, r1, r2, lsl #28
    1438:	0000000c 	andeq	r0, r0, ip
    143c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1440:	7c020001 	stcvc	0, cr0, [r2], {1}
    1444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1448:	00000024 	andeq	r0, r0, r4, lsr #32
    144c:	00001438 	andeq	r1, r0, r8, lsr r4
    1450:	0800d5f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, ip, lr, pc}
    1454:	00000352 	andeq	r0, r0, r2, asr r3
    1458:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    145c:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1460:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    1464:	8a048905 	bhi	123880 <__RW_SIZE__+0x1232f8>
    1468:	8e028b03 	vmlahi.f64	d8, d2, d3
    146c:	380e4c01 	stmdacc	lr, {r0, sl, fp, lr}
    1470:	0000000c 	andeq	r0, r0, ip
    1474:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1478:	7c020001 	stcvc	0, cr0, [r2], {1}
    147c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1480:	00000024 	andeq	r0, r0, r4, lsr #32
    1484:	00001470 	andeq	r1, r0, r0, ror r4
    1488:	0800d948 	stmdaeq	r0, {r3, r6, r8, fp, ip, lr, pc}
    148c:	00000300 	andeq	r0, r0, r0, lsl #6
    1490:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
    1494:	86088509 	strhi	r8, [r8], -r9, lsl #10
    1498:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    149c:	8a048905 	bhi	1238b8 <__RW_SIZE__+0x123330>
    14a0:	8e028b03 	vmlahi.f64	d8, d2, d3
    14a4:	300e4201 	andcc	r4, lr, r1, lsl #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
       4:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
       8:	9f300002 	svcls	0x00300002
       c:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
      10:	0800325c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp}
      14:	00500001 	subseq	r0, r0, r1
      18:	00000000 	andeq	r0, r0, r0
      1c:	64000000 	strvs	r0, [r0], #-0
      20:	6c080032 	stcvs	0, cr0, [r8], {50}	; 0x32
      24:	02080032 	andeq	r0, r8, #50	; 0x32
      28:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
      2c:	6c080032 	stcvs	0, cr0, [r8], {50}	; 0x32
      30:	01080032 	tsteq	r8, r2, lsr r0
      34:	00005000 	andeq	r5, r0, r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	32740000 	rsbscc	r0, r4, #0
      40:	32780800 	rsbscc	r0, r8, #0, 16
      44:	00020800 	andeq	r0, r2, r0, lsl #16
      48:	32789f30 	rsbscc	r9, r8, #48, 30	; 0xc0
      4c:	327a0800 	rsbscc	r0, sl, #0, 16
      50:	00010800 	andeq	r0, r1, r0, lsl #16
      54:	00000050 	andeq	r0, r0, r0, asr r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	00328400 	eorseq	r8, r2, r0, lsl #8
      60:	00328808 	eorseq	r8, r2, r8, lsl #16
      64:	30000208 	andcc	r0, r0, r8, lsl #4
      68:	0032889f 	mlaseq	r2, pc, r8, r8	; <UNPREDICTABLE>
      6c:	00328a08 	eorseq	r8, r2, r8, lsl #20
      70:	50000108 	andpl	r0, r0, r8, lsl #2
	...
      7c:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
      80:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      84:	9f300002 	svcls	0x00300002
      88:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      8c:	0800329a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip, sp}
      90:	00500001 	subseq	r0, r0, r1
      94:	00000000 	andeq	r0, r0, r0
      98:	a4000000 	strge	r0, [r0], #-0
      9c:	a8080032 	stmdage	r8, {r1, r4, r5}
      a0:	02080032 	andeq	r0, r8, #50	; 0x32
      a4:	a89f3000 	ldmge	pc, {ip, sp}	; <UNPREDICTABLE>
      a8:	aa080032 	bge	200178 <__RW_SIZE__+0x1ffbf0>
      ac:	01080032 	tsteq	r8, r2, lsr r0
      b0:	00005000 	andeq	r5, r0, r0
      b4:	00000000 	andeq	r0, r0, r0
      b8:	32b40000 	adcscc	r0, r4, #0
      bc:	32b60800 	adcscc	r0, r6, #0, 16
      c0:	00010800 	andeq	r0, r1, r0, lsl #16
      c4:	0032b650 	eorseq	fp, r2, r0, asr r6
      c8:	0032b808 	eorseq	fp, r2, r8, lsl #16
      cc:	f3000408 	vshl.u8	d0, d8, d0
      d0:	009f5001 	addseq	r5, pc, r1
      d4:	00000000 	andeq	r0, r0, r0
      d8:	b4000000 	strlt	r0, [r0], #-0
      dc:	b6080032 			; <UNDEFINED> instruction: 0xb6080032
      e0:	02080032 	andeq	r0, r8, #50	; 0x32
      e4:	b69f3000 	ldrlt	r3, [pc], r0
      e8:	b8080032 	stmdalt	r8, {r1, r4, r5}
      ec:	01080032 	tsteq	r8, r2, lsr r0
      f0:	00005000 	andeq	r5, r0, r0
      f4:	00000000 	andeq	r0, r0, r0
      f8:	32b80000 	adcscc	r0, r8, #0
      fc:	32ba0800 	adcscc	r0, sl, #0, 16
     100:	00010800 	andeq	r0, r1, r0, lsl #16
     104:	0032ba50 	eorseq	fp, r2, r0, asr sl
     108:	0032bc08 	eorseq	fp, r2, r8, lsl #24
     10c:	f3000408 	vshl.u8	d0, d8, d0
     110:	009f5001 	addseq	r5, pc, r1
     114:	00000000 	andeq	r0, r0, r0
     118:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
     11c:	ba080032 	blt	2001ec <__RW_SIZE__+0x1ffc64>
     120:	02080032 	andeq	r0, r8, #50	; 0x32
     124:	ba9f3000 	blt	fe7cc12c <MSP_BASE+0xde7c712c>
     128:	bc080032 	stclt	0, cr0, [r8], {50}	; 0x32
     12c:	01080032 	tsteq	r8, r2, lsr r0
     130:	00005000 	andeq	r5, r0, r0
     134:	00000000 	andeq	r0, r0, r0
     138:	32bc0000 	adcscc	r0, ip, #0
     13c:	32be0800 	adcscc	r0, lr, #0, 16
     140:	00010800 	andeq	r0, r1, r0, lsl #16
     144:	0032be50 	eorseq	fp, r2, r0, asr lr
     148:	0032c008 	eorseq	ip, r2, r8
     14c:	f3000408 	vshl.u8	d0, d8, d0
     150:	009f5001 	addseq	r5, pc, r1
     154:	00000000 	andeq	r0, r0, r0
     158:	bc000000 	stclt	0, cr0, [r0], {-0}
     15c:	be080032 	mcrlt	0, 0, r0, cr8, cr2, {1}
     160:	02080032 	andeq	r0, r8, #50	; 0x32
     164:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
     168:	c0080032 	andgt	r0, r8, r2, lsr r0
     16c:	01080032 	tsteq	r8, r2, lsr r0
     170:	00005000 	andeq	r5, r0, r0
     174:	00000000 	andeq	r0, r0, r0
     178:	32c00000 	sbccc	r0, r0, #0
     17c:	32c40800 	sbccc	r0, r4, #0, 16
     180:	00010800 	andeq	r0, r1, r0, lsl #16
     184:	0032c450 	eorseq	ip, r2, r0, asr r4
     188:	0032c608 	eorseq	ip, r2, r8, lsl #12
     18c:	f3000408 	vshl.u8	d0, d8, d0
     190:	009f5001 	addseq	r5, pc, r1
     194:	00000000 	andeq	r0, r0, r0
     198:	c0000000 	andgt	r0, r0, r0
     19c:	c4080032 	strgt	r0, [r8], #-50	; 0xffffffce
     1a0:	02080032 	andeq	r0, r8, #50	; 0x32
     1a4:	c49f3000 	ldrgt	r3, [pc], #0	; 1ac <__ZI_SIZE__+0x13c>
     1a8:	c6080032 			; <UNDEFINED> instruction: 0xc6080032
     1ac:	01080032 	tsteq	r8, r2, lsr r0
     1b0:	00005000 	andeq	r5, r0, r0
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	32c80000 	sbccc	r0, r8, #0
     1bc:	32cc0800 	sbccc	r0, ip, #0, 16
     1c0:	00010800 	andeq	r0, r1, r0, lsl #16
     1c4:	0032cc50 	eorseq	ip, r2, r0, asr ip
     1c8:	0032d008 	eorseq	sp, r2, r8
     1cc:	f3000408 	vshl.u8	d0, d8, d0
     1d0:	009f5001 	addseq	r5, pc, r1
     1d4:	00000000 	andeq	r0, r0, r0
     1d8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     1dc:	cc080032 	stcgt	0, cr0, [r8], {50}	; 0x32
     1e0:	02080032 	andeq	r0, r8, #50	; 0x32
     1e4:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
     1e8:	d0080032 	andle	r0, r8, r2, lsr r0
     1ec:	01080032 	tsteq	r8, r2, lsr r0
     1f0:	00005000 	andeq	r5, r0, r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	32d00000 	sbcscc	r0, r0, #0
     1fc:	32d40800 	sbcscc	r0, r4, #0, 16
     200:	00010800 	andeq	r0, r1, r0, lsl #16
     204:	0032d450 	eorseq	sp, r2, r0, asr r4
     208:	0032d808 	eorseq	sp, r2, r8, lsl #16
     20c:	f3000408 	vshl.u8	d0, d8, d0
     210:	009f5001 	addseq	r5, pc, r1
     214:	00000000 	andeq	r0, r0, r0
     218:	d0000000 	andle	r0, r0, r0
     21c:	d4080032 	strle	r0, [r8], #-50	; 0xffffffce
     220:	02080032 	andeq	r0, r8, #50	; 0x32
     224:	d49f3000 	ldrle	r3, [pc], #0	; 22c <__ZI_SIZE__+0x1bc>
     228:	d8080032 	stmdale	r8, {r1, r4, r5}
     22c:	01080032 	tsteq	r8, r2, lsr r0
     230:	00005000 	andeq	r5, r0, r0
     234:	00000000 	andeq	r0, r0, r0
     238:	32d80000 	sbcscc	r0, r8, #0
     23c:	32dc0800 	sbcscc	r0, ip, #0, 16
     240:	00010800 	andeq	r0, r1, r0, lsl #16
     244:	0032dc50 	eorseq	sp, r2, r0, asr ip
     248:	0032de08 	eorseq	sp, r2, r8, lsl #28
     24c:	f3000408 	vshl.u8	d0, d8, d0
     250:	009f5001 	addseq	r5, pc, r1
     254:	00000000 	andeq	r0, r0, r0
     258:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     25c:	dc080032 	stcle	0, cr0, [r8], {50}	; 0x32
     260:	02080032 	andeq	r0, r8, #50	; 0x32
     264:	dc9f3000 	ldcle	0, cr3, [pc], {0}
     268:	de080032 	mcrle	0, 0, r0, cr8, cr2, {1}
     26c:	01080032 	tsteq	r8, r2, lsr r0
     270:	00005000 	andeq	r5, r0, r0
     274:	00000000 	andeq	r0, r0, r0
     278:	32e00000 	rsccc	r0, r0, #0
     27c:	32e60800 	rsccc	r0, r6, #0, 16
     280:	00010800 	andeq	r0, r1, r0, lsl #16
     284:	0032e650 	eorseq	lr, r2, r0, asr r6
     288:	0032e808 	eorseq	lr, r2, r8, lsl #16
     28c:	f3000408 	vshl.u8	d0, d8, d0
     290:	009f5001 	addseq	r5, pc, r1
     294:	00000000 	andeq	r0, r0, r0
     298:	e0000000 	and	r0, r0, r0
     29c:	e6080032 			; <UNDEFINED> instruction: 0xe6080032
     2a0:	02080032 	andeq	r0, r8, #50	; 0x32
     2a4:	e69f3000 	ldr	r3, [pc], r0
     2a8:	e8080032 	stmda	r8, {r1, r4, r5}
     2ac:	01080032 	tsteq	r8, r2, lsr r0
     2b0:	00005000 	andeq	r5, r0, r0
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	32e80000 	rsccc	r0, r8, #0
     2bc:	32ee0800 	rsccc	r0, lr, #0, 16
     2c0:	00010800 	andeq	r0, r1, r0, lsl #16
     2c4:	0032ee50 	eorseq	lr, r2, r0, asr lr
     2c8:	0032f008 	eorseq	pc, r2, r8
     2cc:	f3000408 	vshl.u8	d0, d8, d0
     2d0:	009f5001 	addseq	r5, pc, r1
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     2dc:	ee080032 	mcr	0, 0, r0, cr8, cr2, {1}
     2e0:	02080032 	andeq	r0, r8, #50	; 0x32
     2e4:	ee9f3000 	cdp	0, 9, cr3, cr15, cr0, {0}
     2e8:	f0080032 			; <UNDEFINED> instruction: 0xf0080032
     2ec:	01080032 	tsteq	r8, r2, lsr r0
     2f0:	00005000 	andeq	r5, r0, r0
     2f4:	00000000 	andeq	r0, r0, r0
     2f8:	32f00000 	rscscc	r0, r0, #0
     2fc:	32f40800 	rscscc	r0, r4, #0, 16
     300:	00010800 	andeq	r0, r1, r0, lsl #16
     304:	0032f450 	eorseq	pc, r2, r0, asr r4	; <UNPREDICTABLE>
     308:	0032f608 	eorseq	pc, r2, r8, lsl #12
     30c:	f3000408 	vshl.u8	d0, d8, d0
     310:	009f5001 	addseq	r5, pc, r1
     314:	00000000 	andeq	r0, r0, r0
     318:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     31c:	f4080032 	vst4.8	{d0-d3}, [r8 :256], r2
     320:	02080032 	andeq	r0, r8, #50	; 0x32
     324:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
     328:	f6080032 			; <UNDEFINED> instruction: 0xf6080032
     32c:	01080032 	tsteq	r8, r2, lsr r0
     330:	00005000 	andeq	r5, r0, r0
	...
     33c:	00140000 	andseq	r0, r4, r0
     340:	00010000 	andeq	r0, r1, r0
     344:	00001450 	andeq	r1, r0, r0, asr r4
     348:	00006400 	andeq	r6, r0, r0, lsl #8
     34c:	58000100 	stmdapl	r0, {r8}
     350:	00000064 	andeq	r0, r0, r4, rrx
     354:	000001fa 	strdeq	r0, [r0], -sl
     358:	01f30004 	mvnseq	r0, r4
     35c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     368:	00160000 	andseq	r0, r6, r0
     36c:	00010000 	andeq	r0, r1, r0
     370:	00001651 	andeq	r1, r0, r1, asr r6
     374:	00005c00 	andeq	r5, r0, r0, lsl #24
     378:	59000100 	stmdbpl	r0, {r8}
     37c:	0000005c 	andeq	r0, r0, ip, asr r0
     380:	000001fa 	strdeq	r0, [r0], -sl
     384:	01f30004 	mvnseq	r0, r4
     388:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     394:	002c0000 	eoreq	r0, ip, r0
     398:	00010000 	andeq	r0, r1, r0
     39c:	00002c52 	andeq	r2, r0, r2, asr ip
     3a0:	00008800 	andeq	r8, r0, r0, lsl #16
     3a4:	5c000100 	stfpls	f0, [r0], {-0}
     3a8:	00000088 	andeq	r0, r0, r8, lsl #1
     3ac:	000001fa 	strdeq	r0, [r0], -sl
     3b0:	01f30004 	mvnseq	r0, r4
     3b4:	00009f52 	andeq	r9, r0, r2, asr pc
	...
     3c0:	002e0000 	eoreq	r0, lr, r0
     3c4:	00010000 	andeq	r0, r1, r0
     3c8:	00002e53 	andeq	r2, r0, r3, asr lr
     3cc:	00007e00 	andeq	r7, r0, r0, lsl #28
     3d0:	5a000100 	bpl	7d8 <__RW_SIZE__+0x250>
     3d4:	0000007e 	andeq	r0, r0, lr, ror r0
     3d8:	000001fa 	strdeq	r0, [r0], -sl
     3dc:	01f30004 	mvnseq	r0, r4
     3e0:	00009f53 	andeq	r9, r0, r3, asr pc
	...
     3ec:	01440000 	mrseq	r0, (UNDEF: 68)
     3f0:	00020000 	andeq	r0, r2, r0
     3f4:	01440091 	swpbeq	r0, r1, [r4]
     3f8:	01fa0000 	mvnseq	r0, r0
     3fc:	00020000 	andeq	r0, r2, r0
     400:	00000091 	muleq	r0, r1, r0
	...
     40c:	01440000 	mrseq	r0, (UNDEF: 68)
     410:	00020000 	andeq	r0, r2, r0
     414:	01440491 			; <UNDEFINED> instruction: 0x01440491
     418:	01fa0000 	mvnseq	r0, r0
     41c:	00020000 	andeq	r0, r2, r0
     420:	00000491 	muleq	r0, r1, r4
	...
     42c:	01440000 	mrseq	r0, (UNDEF: 68)
     430:	00020000 	andeq	r0, r2, r0
     434:	01440891 			; <UNDEFINED> instruction: 0x01440891
     438:	01fa0000 	mvnseq	r0, r0
     43c:	00020000 	andeq	r0, r2, r0
     440:	00000891 	muleq	r0, r1, r8
     444:	00000000 	andeq	r0, r0, r0
     448:	001c0000 	andseq	r0, ip, r0
     44c:	00220000 	eoreq	r0, r2, r0
     450:	00050000 	andeq	r0, r5, r0
     454:	24340075 	ldrtcs	r0, [r4], #-117	; 0xffffff8b
     458:	0000229f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
     45c:	0001fa00 	andeq	pc, r1, r0, lsl #20
     460:	91000600 	tstls	r0, r0, lsl #12
     464:	24340600 	ldrtcs	r0, [r4], #-1536	; 0xfffffa00
     468:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     46c:	00000000 	andeq	r0, r0, r0
     470:	00008800 	andeq	r8, r0, r0, lsl #16
     474:	0000aa00 	andeq	sl, r0, r0, lsl #20
     478:	30000200 	andcc	r0, r0, r0, lsl #4
     47c:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     480:	0000c200 	andeq	ip, r0, r0, lsl #4
     484:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     488:	000000c2 	andeq	r0, r0, r2, asr #1
     48c:	000000c4 	andeq	r0, r0, r4, asr #1
     490:	01740003 	cmneq	r4, r3
     494:	0000c49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     498:	00012000 	andeq	r2, r1, r0
     49c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     4a0:	00000120 	andeq	r0, r0, r0, lsr #2
     4a4:	00000124 	andeq	r0, r0, r4, lsr #2
     4a8:	7f740003 	svcvc	0x00740003
     4ac:	0001449f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
     4b0:	0001fa00 	andeq	pc, r1, r0, lsl #20
     4b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     4c0:	00000088 	andeq	r0, r0, r8, lsl #1
     4c4:	0000012c 	andeq	r0, r0, ip, lsr #2
     4c8:	98910003 	ldmls	r1, {r0, r1}
     4cc:	00012c7f 	andeq	r2, r1, pc, ror ip
     4d0:	00013800 	andeq	r3, r1, r0, lsl #16
     4d4:	91000800 	tstls	r0, r0, lsl #16
     4d8:	01947f98 			; <UNDEFINED> instruction: 0x01947f98
     4dc:	449f0123 	ldrmi	r0, [pc], #291	; 4e4 <MSP_SIZE+0xe4>
     4e0:	fa000001 	blx	4ec <MSP_SIZE+0xec>
     4e4:	03000001 	movweq	r0, #1
     4e8:	7f989100 	svcvc	0x00989100
	...
     4f4:	000001fc 	strdeq	r0, [r0], -ip
     4f8:	0000020a 	andeq	r0, r0, sl, lsl #4
     4fc:	0a500001 	beq	1400508 <__RW_SIZE__+0x13fff80>
     500:	68000002 	stmdavs	r0, {r1}
     504:	03000003 	movweq	r0, #3
     508:	7fa49100 	svcvc	0x00a49100
     50c:	00000368 	andeq	r0, r0, r8, ror #6
     510:	0000036c 	andeq	r0, r0, ip, ror #6
     514:	6c520001 	mrrcvs	0, 0, r0, r2, cr1
     518:	28000003 	stmdacs	r0, {r0, r1}
     51c:	03000004 	movweq	r0, #4
     520:	7fa49100 	svcvc	0x00a49100
	...
     52c:	000001fc 	strdeq	r0, [r0], -ip
     530:	0000024c 	andeq	r0, r0, ip, asr #4
     534:	4c510001 	mrrcmi	0, 0, r0, r1, cr1
     538:	28000002 	stmdacs	r0, {r1}
     53c:	04000004 	streq	r0, [r0], #-4
     540:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     544:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     548:	00000000 	andeq	r0, r0, r0
     54c:	0001fc00 	andeq	pc, r1, r0, lsl #24
     550:	00024000 	andeq	r4, r2, r0
     554:	52000100 	andpl	r0, r0, #0, 2
     558:	00000240 	andeq	r0, r0, r0, asr #4
     55c:	00000428 	andeq	r0, r0, r8, lsr #8
     560:	01f30004 	mvnseq	r0, r4
     564:	00009f52 	andeq	r9, r0, r2, asr pc
     568:	00000000 	andeq	r0, r0, r0
     56c:	01fc0000 	mvnseq	r0, r0
     570:	02580000 	subseq	r0, r8, #0
     574:	00010000 	andeq	r0, r1, r0
     578:	00025853 	andeq	r5, r2, r3, asr r8
     57c:	00042800 	andeq	r2, r4, r0, lsl #16
     580:	f3000400 	vshl.u8	d0, d0, d0
     584:	009f5301 	addseq	r5, pc, r1, lsl #6
     588:	00000000 	andeq	r0, r0, r0
     58c:	fc000000 	stc2	0, cr0, [r0], {-0}
     590:	0a000001 	beq	59c <__RW_SIZE__+0x14>
     594:	02000002 	andeq	r0, r0, #2
     598:	0a009100 	beq	249a0 <__RW_SIZE__+0x24418>
     59c:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     5a0:	01000002 	tsteq	r0, r2
     5a4:	026e5400 	rsbeq	r5, lr, #0, 8
     5a8:	03620000 	cmneq	r2, #0
     5ac:	00070000 	andeq	r0, r7, r0
     5b0:	067fa891 			; <UNDEFINED> instruction: 0x067fa891
     5b4:	729f0123 	addsvc	r0, pc, #-1073741816	; 0xc0000008
     5b8:	28000003 	stmdacs	r0, {r0, r1}
     5bc:	07000004 	streq	r0, [r0, -r4]
     5c0:	7fa89100 	svcvc	0x00a89100
     5c4:	9f012306 	svcls	0x00012306
	...
     5d0:	000001fc 	strdeq	r0, [r0], -ip
     5d4:	00000372 	andeq	r0, r0, r2, ror r3
     5d8:	04910002 	ldreq	r0, [r1], #2
     5dc:	00000372 	andeq	r0, r0, r2, ror r3
     5e0:	00000428 	andeq	r0, r0, r8, lsr #8
     5e4:	04910002 	ldreq	r0, [r1], #2
	...
     5f0:	000001fc 	strdeq	r0, [r0], -ip
     5f4:	00000372 	andeq	r0, r0, r2, ror r3
     5f8:	08910002 	ldmeq	r1, {r1}
     5fc:	00000372 	andeq	r0, r0, r2, ror r3
     600:	00000428 	andeq	r0, r0, r8, lsr #8
     604:	08910002 	ldmeq	r1, {r1}
	...
     610:	0000026e 	andeq	r0, r0, lr, ror #4
     614:	0000027a 	andeq	r0, r0, sl, ror r2
     618:	00750006 	rsbseq	r0, r5, r6
     61c:	9f1aff08 	svcls	0x001aff08
	...
     628:	0000026e 	andeq	r0, r0, lr, ror #4
     62c:	0000036c 	andeq	r0, r0, ip, ror #6
     630:	08910002 	ldmeq	r1, {r1}
     634:	00000372 	andeq	r0, r0, r2, ror r3
     638:	00000428 	andeq	r0, r0, r8, lsr #8
     63c:	08910002 	ldmeq	r1, {r1}
	...
     648:	0000026e 	andeq	r0, r0, lr, ror #4
     64c:	0000036c 	andeq	r0, r0, ip, ror #6
     650:	04910002 	ldreq	r0, [r1], #2
     654:	00000372 	andeq	r0, r0, r2, ror r3
     658:	00000428 	andeq	r0, r0, r8, lsr #8
     65c:	04910002 	ldreq	r0, [r1], #2
	...
     668:	0000026e 	andeq	r0, r0, lr, ror #4
     66c:	0000036c 	andeq	r0, r0, ip, ror #6
     670:	01f30004 	mvnseq	r0, r4
     674:	03729f51 	cmneq	r2, #324	; 0x144
     678:	04280000 	strteq	r0, [r8], #-0
     67c:	00040000 	andeq	r0, r4, r0
     680:	9f5101f3 	svcls	0x005101f3
	...
     68c:	0000026e 	andeq	r0, r0, lr, ror #4
     690:	00000368 	andeq	r0, r0, r8, ror #6
     694:	a4910003 	ldrge	r0, [r1], #3
     698:	0003727f 	andeq	r7, r3, pc, ror r2
     69c:	00042800 	andeq	r2, r4, r0, lsl #16
     6a0:	91000300 	mrsls	r0, LR_irq
     6a4:	00007fa4 	andeq	r7, r0, r4, lsr #31
     6a8:	00000000 	andeq	r0, r0, r0
     6ac:	027e0000 	rsbseq	r0, lr, #0
     6b0:	036c0000 	cmneq	ip, #0
     6b4:	00020000 	andeq	r0, r2, r0
     6b8:	03729f30 	cmneq	r2, #48, 30	; 0xc0
     6bc:	04280000 	strteq	r0, [r8], #-0
     6c0:	00020000 	andeq	r0, r2, r0
     6c4:	00009f30 	andeq	r9, r0, r0, lsr pc
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	02a20000 	adceq	r0, r2, #0
     6d0:	02c20000 	sbceq	r0, r2, #0
     6d4:	00020000 	andeq	r0, r2, r0
     6d8:	02c29f30 	sbceq	r9, r2, #48, 30	; 0xc0
     6dc:	02dc0000 	sbcseq	r0, ip, #0
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	0002dc54 	andeq	sp, r2, r4, asr ip
     6e8:	0002de00 	andeq	sp, r2, r0, lsl #28
     6ec:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     6f0:	02de9f01 	sbcseq	r9, lr, #1, 30
     6f4:	033a0000 	teqeq	sl, #0
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	00033a54 	andeq	r3, r3, r4, asr sl
     700:	00033e00 	andeq	r3, r3, r0, lsl #28
     704:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
     708:	03729f7f 	cmneq	r2, #508	; 0x1fc
     70c:	04280000 	strteq	r0, [r8], #-0
     710:	00010000 	andeq	r0, r1, r0
     714:	00000054 	andeq	r0, r0, r4, asr r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	0002a200 	andeq	sl, r2, r0, lsl #4
     720:	00034600 	andeq	r4, r3, r0, lsl #12
     724:	91000300 	mrsls	r0, LR_irq
     728:	03467f88 	movteq	r7, #28552	; 0x6f88
     72c:	03520000 	cmpeq	r2, #0
     730:	00080000 	andeq	r0, r8, r0
     734:	947f8891 	ldrbtls	r8, [pc], #-2193	; 73c <__RW_SIZE__+0x1b4>
     738:	9f012301 	svcls	0x00012301
     73c:	00000372 	andeq	r0, r0, r2, ror r3
     740:	00000428 	andeq	r0, r0, r8, lsr #8
     744:	88910003 	ldmhi	r1, {r0, r1}
     748:	0000007f 	andeq	r0, r0, pc, ror r0
     74c:	00000000 	andeq	r0, r0, r0
     750:	00042800 	andeq	r2, r4, r0, lsl #16
     754:	00043800 	andeq	r3, r4, r0, lsl #16
     758:	50000100 	andpl	r0, r0, r0, lsl #2
     75c:	00000438 	andeq	r0, r0, r8, lsr r4
     760:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
     764:	9c910003 	ldcls	0, cr0, [r1], {3}
     768:	0004b47d 	andeq	fp, r4, sp, ror r4
     76c:	00067e00 	andeq	r7, r6, r0, lsl #28
     770:	f3000400 	vshl.u8	d0, d0, d0
     774:	009f5001 	addseq	r5, pc, r1
     778:	00000000 	andeq	r0, r0, r0
     77c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     780:	3c000004 	stccc	0, cr0, [r0], {4}
     784:	01000004 	tsteq	r0, r4
     788:	043c5100 	ldrteq	r5, [ip], #-256	; 0xffffff00
     78c:	04840000 	streq	r0, [r4], #0
     790:	00010000 	andeq	r0, r1, r0
     794:	00048459 	andeq	r8, r4, r9, asr r4
     798:	00067e00 	andeq	r7, r6, r0, lsl #28
     79c:	f3000400 	vshl.u8	d0, d0, d0
     7a0:	009f5101 	addseq	r5, pc, r1, lsl #2
     7a4:	00000000 	andeq	r0, r0, r0
     7a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7ac:	3a000004 	bcc	7c4 <__RW_SIZE__+0x23c>
     7b0:	01000004 	tsteq	r0, r4
     7b4:	043a5200 	ldrteq	r5, [sl], #-512	; 0xfffffe00
     7b8:	04b40000 	ldrteq	r0, [r4], #0
     7bc:	00010000 	andeq	r0, r1, r0
     7c0:	0004b458 	andeq	fp, r4, r8, asr r4
     7c4:	00067e00 	andeq	r7, r6, r0, lsl #28
     7c8:	f3000400 	vshl.u8	d0, d0, d0
     7cc:	009f5201 	addseq	r5, pc, r1, lsl #4
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     7d8:	49000004 	stmdbmi	r0, {r2}
     7dc:	01000004 	tsteq	r0, r4
     7e0:	04495300 	strbeq	r5, [r9], #-768	; 0xfffffd00
     7e4:	047a0000 	ldrbteq	r0, [sl], #-0
     7e8:	00010000 	andeq	r0, r1, r0
     7ec:	00047a5a 	andeq	r7, r4, sl, asr sl
     7f0:	00067e00 	andeq	r7, r6, r0, lsl #28
     7f4:	f3000400 	vshl.u8	d0, d0, d0
     7f8:	009f5301 	addseq	r5, pc, r1, lsl #6
     7fc:	00000000 	andeq	r0, r0, r0
     800:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     804:	c4000004 	strgt	r0, [r0], #-4
     808:	02000005 	andeq	r0, r0, #5
     80c:	c4009100 	strgt	r9, [r0], #-256	; 0xffffff00
     810:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     814:	02000006 	andeq	r0, r0, #6
     818:	00009100 	andeq	r9, r0, r0, lsl #2
     81c:	00000000 	andeq	r0, r0, r0
     820:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     824:	c4000004 	strgt	r0, [r0], #-4
     828:	02000005 	andeq	r0, r0, #5
     82c:	c4049100 	strgt	r9, [r4], #-256	; 0xffffff00
     830:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     834:	02000006 	andeq	r0, r0, #6
     838:	00049100 	andeq	r9, r4, r0, lsl #2
     83c:	00000000 	andeq	r0, r0, r0
     840:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     844:	c4000004 	strgt	r0, [r0], #-4
     848:	02000005 	andeq	r0, r0, #5
     84c:	c4089100 	strgt	r9, [r8], #-256	; 0xffffff00
     850:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     854:	02000006 	andeq	r0, r0, #6
     858:	00089100 	andeq	r9, r8, r0, lsl #2
     85c:	00000000 	andeq	r0, r0, r0
     860:	4a000000 	bmi	868 <__RW_SIZE__+0x2e0>
     864:	72000004 	andvc	r0, r0, #4
     868:	01000004 	tsteq	r0, r4
     86c:	04725400 	ldrbteq	r5, [r2], #-1024	; 0xfffffc00
     870:	067e0000 	ldrbteq	r0, [lr], -r0
     874:	00020000 	andeq	r0, r2, r0
     878:	00000491 	muleq	r0, r1, r4
     87c:	00000000 	andeq	r0, r0, r0
     880:	044a0000 	strbeq	r0, [sl], #-0
     884:	04960000 	ldreq	r0, [r6], #0
     888:	00010000 	andeq	r0, r1, r0
     88c:	0004965b 	andeq	r9, r4, fp, asr r6
     890:	00067e00 	andeq	r7, r6, r0, lsl #28
     894:	91000200 	mrsls	r0, R8_usr
	...
     8a0:	00044a00 	andeq	r4, r4, r0, lsl #20
     8a4:	00047400 	andeq	r7, r4, r0, lsl #8
     8a8:	91000400 	tstls	r0, r0, lsl #8
     8ac:	749f7dd8 	ldrvc	r7, [pc], #3544	; 8b4 <__RW_SIZE__+0x32c>
     8b0:	80000004 	andhi	r0, r0, r4
     8b4:	01000004 	tsteq	r0, r4
     8b8:	04805300 	streq	r5, [r0], #768	; 0x300
     8bc:	04b40000 	ldrteq	r0, [r4], #0
     8c0:	00030000 	andeq	r0, r3, r0
     8c4:	b47da091 	ldrbtlt	sl, [sp], #-145	; 0xffffff6f
     8c8:	b2000004 	andlt	r0, r0, #4
     8cc:	07000005 	streq	r0, [r0, -r5]
     8d0:	7da09100 	stfvcd	f1, [r0]
     8d4:	9f012306 	svcls	0x00012306
     8d8:	000005c4 	andeq	r0, r0, r4, asr #11
     8dc:	0000067e 	andeq	r0, r0, lr, ror r6
     8e0:	a0910007 	addsge	r0, r1, r7
     8e4:	0123067d 	teqeq	r3, sp, ror r6
     8e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8ec:	00000000 	andeq	r0, r0, r0
     8f0:	00044a00 	andeq	r4, r4, r0, lsl #20
     8f4:	00047a00 	andeq	r7, r4, r0, lsl #20
     8f8:	5a000100 	bpl	d00 <__RW_SIZE__+0x778>
     8fc:	0000047a 	andeq	r0, r0, sl, ror r4
     900:	0000067e 	andeq	r0, r0, lr, ror r6
     904:	01f30004 	mvnseq	r0, r4
     908:	00009f53 	andeq	r9, r0, r3, asr pc
     90c:	00000000 	andeq	r0, r0, r0
     910:	044a0000 	strbeq	r0, [sl], #-0
     914:	04b40000 	ldrteq	r0, [r4], #0
     918:	00010000 	andeq	r0, r1, r0
     91c:	0004b458 	andeq	fp, r4, r8, asr r4
     920:	00067e00 	andeq	r7, r6, r0, lsl #28
     924:	f3000400 	vshl.u8	d0, d0, d0
     928:	009f5201 	addseq	r5, pc, r1, lsl #4
     92c:	00000000 	andeq	r0, r0, r0
     930:	4a000000 	bmi	938 <__RW_SIZE__+0x3b0>
     934:	84000004 	strhi	r0, [r0], #-4
     938:	01000004 	tsteq	r0, r4
     93c:	04845900 	streq	r5, [r4], #2304	; 0x900
     940:	067e0000 	ldrbteq	r0, [lr], -r0
     944:	00040000 	andeq	r0, r4, r0
     948:	9f5101f3 	svcls	0x005101f3
	...
     954:	0000044a 	andeq	r0, r0, sl, asr #8
     958:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
     95c:	9c910003 	ldcls	0, cr0, [r1], {3}
     960:	0005b87d 	andeq	fp, r5, sp, ror r8
     964:	0005be00 	andeq	fp, r5, r0, lsl #28
     968:	52000100 	andpl	r0, r0, #0, 2
     96c:	000005be 			; <UNDEFINED> instruction: 0x000005be
     970:	0000067e 	andeq	r0, r0, lr, ror r6
     974:	9c910003 	ldcls	0, cr0, [r1], {3}
     978:	0000007d 	andeq	r0, r0, sp, ror r0
     97c:	00000000 	andeq	r0, r0, r0
     980:	0004b400 	andeq	fp, r4, r0, lsl #8
     984:	0004c000 	andeq	ip, r4, r0
     988:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
     98c:	1aff0800 	bne	fffc2994 <MSP_BASE+0xdffbd994>
     990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     994:	00000000 	andeq	r0, r0, r0
     998:	0004b400 	andeq	fp, r4, r0, lsl #8
     99c:	0005be00 	andeq	fp, r5, r0, lsl #28
     9a0:	91000200 	mrsls	r0, R8_usr
     9a4:	0005c404 	andeq	ip, r5, r4, lsl #8
     9a8:	00067e00 	andeq	r7, r6, r0, lsl #28
     9ac:	91000200 	mrsls	r0, R8_usr
     9b0:	00000004 	andeq	r0, r0, r4
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	0004b400 	andeq	fp, r4, r0, lsl #8
     9bc:	0005be00 	andeq	fp, r5, r0, lsl #28
     9c0:	91000200 	mrsls	r0, R8_usr
     9c4:	0005c400 	andeq	ip, r5, r0, lsl #8
     9c8:	00067e00 	andeq	r7, r6, r0, lsl #28
     9cc:	91000200 	mrsls	r0, R8_usr
	...
     9d8:	0004b400 	andeq	fp, r4, r0, lsl #8
     9dc:	0005be00 	andeq	fp, r5, r0, lsl #28
     9e0:	f3000400 	vshl.u8	d0, d0, d0
     9e4:	c49f5101 	ldrgt	r5, [pc], #257	; 9ec <__RW_SIZE__+0x464>
     9e8:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     9ec:	04000006 	streq	r0, [r0], #-6
     9f0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     9f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     9f8:	00000000 	andeq	r0, r0, r0
     9fc:	0004b400 	andeq	fp, r4, r0, lsl #8
     a00:	0005b800 	andeq	fp, r5, r0, lsl #16
     a04:	91000300 	mrsls	r0, LR_irq
     a08:	05c47d9c 	strbeq	r7, [r4, #3484]	; 0xd9c
     a0c:	067e0000 	ldrbteq	r0, [lr], -r0
     a10:	00030000 	andeq	r0, r3, r0
     a14:	007d9c91 			; <UNDEFINED> instruction: 0x007d9c91
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	c2000000 	andgt	r0, r0, #0
     a20:	be000004 	cdplt	0, 0, cr0, cr0, cr4, {0}
     a24:	02000005 	andeq	r0, r0, #5
     a28:	c49f3000 	ldrgt	r3, [pc], #0	; a30 <__RW_SIZE__+0x4a8>
     a2c:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     a30:	02000006 	andeq	r0, r0, #6
     a34:	009f3000 	addseq	r3, pc, r0
     a38:	00000000 	andeq	r0, r0, r0
     a3c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     a40:	0c000004 	stceq	0, cr0, [r0], {4}
     a44:	02000005 	andeq	r0, r0, #5
     a48:	0c9f3000 	ldceq	0, cr3, [pc], {0}
     a4c:	26000005 	strcs	r0, [r0], -r5
     a50:	01000005 	tsteq	r0, r5
     a54:	05265400 	streq	r5, [r6, #-1024]!	; 0xfffffc00
     a58:	05280000 	streq	r0, [r8, #-0]!
     a5c:	00030000 	andeq	r0, r3, r0
     a60:	289f0174 	ldmcs	pc, {r2, r4, r5, r6, r8}	; <UNPREDICTABLE>
     a64:	86000005 	strhi	r0, [r0], -r5
     a68:	01000005 	tsteq	r0, r5
     a6c:	05865400 	streq	r5, [r6, #1024]	; 0x400
     a70:	058a0000 	streq	r0, [sl]
     a74:	00030000 	andeq	r0, r3, r0
     a78:	c49f7f74 	ldrgt	r7, [pc], #3956	; a80 <__RW_SIZE__+0x4f8>
     a7c:	7e000005 	cdpvc	0, 0, cr0, cr0, cr5, {0}
     a80:	01000006 	tsteq	r0, r6
     a84:	00005400 	andeq	r5, r0, r0, lsl #8
     a88:	00000000 	andeq	r0, r0, r0
     a8c:	04e80000 	strbteq	r0, [r8], #0
     a90:	05960000 	ldreq	r0, [r6]
     a94:	00030000 	andeq	r0, r3, r0
     a98:	967d8091 			; <UNDEFINED> instruction: 0x967d8091
     a9c:	a2000005 	andge	r0, r0, #5
     aa0:	08000005 	stmdaeq	r0, {r0, r2}
     aa4:	7d809100 	stfvcd	f1, [r0]
     aa8:	01230194 			; <UNDEFINED> instruction: 0x01230194
     aac:	0005c49f 	muleq	r5, pc, r4	; <UNPREDICTABLE>
     ab0:	00067e00 	andeq	r7, r6, r0, lsl #28
     ab4:	91000300 	mrsls	r0, LR_irq
     ab8:	00007d80 	andeq	r7, r0, r0, lsl #27
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	00b00000 	adcseq	r0, r0, r0
     ac4:	00b40000 	adcseq	r0, r4, r0
     ac8:	00020000 	andeq	r0, r2, r0
     acc:	00009f30 	andeq	r9, r0, r0, lsr pc
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	008e0000 	addeq	r0, lr, r0
     ad8:	00900000 	addseq	r0, r0, r0
     adc:	00020000 	andeq	r0, r2, r0
     ae0:	00909f30 	addseq	r9, r0, r0, lsr pc
     ae4:	00920000 	addseq	r0, r2, r0
     ae8:	000a0000 	andeq	r0, sl, r0
     aec:	1a380073 	bne	e00cc0 <__RW_SIZE__+0xe00738>
     af0:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     af4:	00929f1a 	addseq	r9, r2, sl, lsl pc
     af8:	00960000 	addseq	r0, r6, r0
     afc:	00140000 	andseq	r0, r4, r0
     b00:	35200070 	strcc	r0, [r0, #-112]!	; 0xffffff90
     b04:	311a3725 	tstcc	sl, r5, lsr #14
     b08:	38007324 	stmdacc	r0, {r2, r5, r8, r9, ip, sp, lr}
     b0c:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     b10:	9f211aff 	svcls	0x00211aff
     b14:	00000096 	muleq	r0, r6, r0
     b18:	000000a0 	andeq	r0, r0, r0, lsr #1
     b1c:	00700013 	rsbseq	r0, r0, r3, lsl r0
     b20:	1a372535 	bne	dc9ffc <__RW_SIZE__+0xdc9a74>
     b24:	00732431 	rsbseq	r2, r3, r1, lsr r4
     b28:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     b2c:	211aff08 	tstcs	sl, r8, lsl #30
     b30:	0000a09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b34:	0000a400 	andeq	sl, r0, r0, lsl #8
     b38:	70001400 	andvc	r1, r0, r0, lsl #8
     b3c:	37253500 	strcc	r3, [r5, -r0, lsl #10]!
     b40:	7324311a 	teqvc	r4, #-2147483642	; 0x80000006
     b44:	1a382000 	bne	e08b4c <__RW_SIZE__+0xe085c4>
     b48:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     b4c:	b09f211a 	addslt	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
     b50:	e2000000 	and	r0, r0, #0
     b54:	01000000 	mrseq	r0, (UNDEF: 0)
     b58:	00005000 	andeq	r5, r0, r0
     b5c:	00000000 	andeq	r0, r0, r0
     b60:	00b40000 	adcseq	r0, r4, r0
     b64:	00b60000 	adcseq	r0, r6, r0
     b68:	00020000 	andeq	r0, r2, r0
     b6c:	00b69f30 	adcseq	r9, r6, r0, lsr pc
     b70:	00b80000 	adcseq	r0, r8, r0
     b74:	000a0000 	andeq	r0, sl, r0
     b78:	1a380074 	bne	e00d50 <__RW_SIZE__+0xe007c8>
     b7c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     b80:	00b89f1a 	adcseq	r9, r8, sl, lsl pc
     b84:	00ba0000 	adcseq	r0, sl, r0
     b88:	00140000 	andseq	r0, r4, r0
     b8c:	35200071 	strcc	r0, [r0, #-113]!	; 0xffffff8f
     b90:	311a3725 	tstcc	sl, r5, lsr #14
     b94:	38007424 	stmdacc	r0, {r2, r5, sl, ip, sp, lr}
     b98:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     b9c:	9f211aff 	svcls	0x00211aff
     ba0:	000000ba 	strheq	r0, [r0], -sl
     ba4:	000000bc 	strheq	r0, [r0], -ip
     ba8:	0071001e 	rsbseq	r0, r1, lr, lsl r0
     bac:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     bb0:	7524311a 	strvc	r3, [r4, #-282]!	; 0xfffffee6
     bb4:	253d2000 	ldrcs	r2, [sp, #-0]!
     bb8:	24341a33 	ldrtcs	r1, [r4], #-2611	; 0xfffff5cd
     bbc:	38007421 	stmdacc	r0, {r0, r5, sl, ip, sp, lr}
     bc0:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     bc4:	9f211aff 	svcls	0x00211aff
     bc8:	000000bc 	strheq	r0, [r0], -ip
     bcc:	000000be 	strheq	r0, [r0], -lr
     bd0:	0071001d 	rsbseq	r0, r1, sp, lsl r0
     bd4:	1a372535 	bne	dca0b0 <__RW_SIZE__+0xdc9b28>
     bd8:	00752431 	rsbseq	r2, r5, r1, lsr r4
     bdc:	33253d20 	teqcc	r5, #32, 26	; 0x800
     be0:	2124341a 	teqcs	r4, sl, lsl r4
     be4:	1a380074 	bne	e00dbc <__RW_SIZE__+0xe00834>
     be8:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     bec:	be9f211a 	mrclt	1, 4, r2, cr15, cr10, {0}
     bf0:	c2000000 	andgt	r0, r0, #0
     bf4:	1c000000 	stcne	0, cr0, [r0], {-0}
     bf8:	35007100 	strcc	r7, [r0, #-256]	; 0xffffff00
     bfc:	311a3725 	tstcc	sl, r5, lsr #14
     c00:	3d007524 	cfstr32cc	mvfx7, [r0, #-144]	; 0xffffff70
     c04:	341a3325 	ldrcc	r3, [sl], #-805	; 0xfffffcdb
     c08:	00742124 	rsbseq	r2, r4, r4, lsr #2
     c0c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     c10:	211aff08 	tstcs	sl, r8, lsl #30
     c14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c18:	00000000 	andeq	r0, r0, r0
     c1c:	0000e400 	andeq	lr, r0, r0, lsl #8
     c20:	0000f600 	andeq	pc, r0, r0, lsl #12
     c24:	30000200 	andcc	r0, r0, r0, lsl #4
     c28:	0000f69f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     c2c:	0000f800 	andeq	pc, r0, r0, lsl #16
     c30:	71000a00 	tstvc	r0, r0, lsl #20
     c34:	301a3800 	andscc	r3, sl, r0, lsl #16
     c38:	1aff0829 	bne	fffc2ce4 <MSP_BASE+0xdffbdce4>
     c3c:	0000f89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     c40:	0000fa00 	andeq	pc, r0, r0, lsl #20
     c44:	70001400 	andvc	r1, r0, r0, lsl #8
     c48:	25352000 	ldrcs	r2, [r5, #-0]!
     c4c:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     c50:	1a380071 	bne	e00e1c <__RW_SIZE__+0xe00894>
     c54:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     c58:	fa9f211a 	blx	fe7c90c8 <MSP_BASE+0xde7c40c8>
     c5c:	fc000000 	stc2	0, cr0, [r0], {-0}
     c60:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     c64:	20007000 	andcs	r7, r0, r0
     c68:	1a372535 	bne	dca144 <__RW_SIZE__+0xdc9bbc>
     c6c:	00722431 	rsbseq	r2, r2, r1, lsr r4
     c70:	33253d20 	teqcc	r5, #32, 26	; 0x800
     c74:	2124341a 	teqcs	r4, sl, lsl r4
     c78:	1a380071 	bne	e00e44 <__RW_SIZE__+0xe008bc>
     c7c:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     c80:	fc9f211a 	ldc2	1, cr2, [pc], {26}
     c84:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     c88:	1d000000 	stcne	0, cr0, [r0, #-0]
     c8c:	35007000 	strcc	r7, [r0, #-0]
     c90:	311a3725 	tstcc	sl, r5, lsr #14
     c94:	20007224 	andcs	r7, r0, r4, lsr #4
     c98:	1a33253d 	bne	cca194 <__RW_SIZE__+0xcc9c0c>
     c9c:	71212434 	teqvc	r1, r4, lsr r4
     ca0:	301a3800 	andscc	r3, sl, r0, lsl #16
     ca4:	1aff0829 	bne	fffc2d50 <MSP_BASE+0xdffbdd50>
     ca8:	00fe9f21 	rscseq	r9, lr, r1, lsr #30
     cac:	01020000 	mrseq	r0, (UNDEF: 2)
     cb0:	001c0000 	andseq	r0, ip, r0
     cb4:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     cb8:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     cbc:	253d0072 	ldrcs	r0, [sp, #-114]!	; 0xffffff8e
     cc0:	24341a33 	ldrtcs	r1, [r4], #-2611	; 0xfffff5cd
     cc4:	38007121 	stmdacc	r0, {r0, r5, r8, ip, sp, lr}
     cc8:	0829301a 	stmdaeq	r9!, {r1, r3, r4, ip, sp}
     ccc:	9f211aff 	svcls	0x00211aff
	...
     cd8:	00000118 	andeq	r0, r0, r8, lsl r1
     cdc:	0000012a 	andeq	r0, r0, sl, lsr #2
     ce0:	9f300002 	svcls	0x00300002
	...
     cec:	0000012a 	andeq	r0, r0, sl, lsr #2
     cf0:	0000012c 	andeq	r0, r0, ip, lsr #2
     cf4:	9f300002 	svcls	0x00300002
     cf8:	0000012c 	andeq	r0, r0, ip, lsr #2
     cfc:	0000012e 	andeq	r0, r0, lr, lsr #2
     d00:	0073000a 	rsbseq	r0, r3, sl
     d04:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     d08:	9f1aff08 	svcls	0x001aff08
     d0c:	0000012e 	andeq	r0, r0, lr, lsr #2
     d10:	00000132 	andeq	r0, r0, r2, lsr r1
     d14:	00700014 	rsbseq	r0, r0, r4, lsl r0
     d18:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     d1c:	7324311a 	teqvc	r4, #-2147483642	; 0x80000006
     d20:	301a3800 	andscc	r3, sl, r0, lsl #16
     d24:	1aff0829 	bne	fffc2dd0 <MSP_BASE+0xdffbddd0>
     d28:	01329f21 	teqeq	r2, r1, lsr #30
     d2c:	013c0000 	teqeq	ip, r0
     d30:	00130000 	andseq	r0, r3, r0
     d34:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     d38:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     d3c:	1a380073 	bne	e00f10 <__RW_SIZE__+0xe00988>
     d40:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     d44:	3c9f211a 	ldfccs	f2, [pc], {26}
     d48:	40000001 	andmi	r0, r0, r1
     d4c:	14000001 	strne	r0, [r0], #-1
     d50:	35007000 	strcc	r7, [r0, #-0]
     d54:	311a3725 	tstcc	sl, r5, lsr #14
     d58:	20007324 	andcs	r7, r0, r4, lsr #6
     d5c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     d60:	211aff08 	tstcs	sl, r8, lsl #30
     d64:	00014a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
     d68:	00014c00 	andeq	r4, r1, r0, lsl #24
     d6c:	70000600 	andvc	r0, r0, r0, lsl #12
     d70:	21007300 	mrscs	r7, LR_irq
     d74:	00014c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
     d78:	00015400 	andeq	r5, r1, r0, lsl #8
     d7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d88:	00000166 	andeq	r0, r0, r6, ror #2
     d8c:	00000168 	andeq	r0, r0, r8, ror #2
     d90:	9f300002 	svcls	0x00300002
     d94:	00000168 	andeq	r0, r0, r8, ror #2
     d98:	0000016a 	andeq	r0, r0, sl, ror #2
     d9c:	0072000a 	rsbseq	r0, r2, sl
     da0:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     da4:	9f1aff08 	svcls	0x001aff08
     da8:	0000016a 	andeq	r0, r0, sl, ror #2
     dac:	0000016c 	andeq	r0, r0, ip, ror #2
     db0:	00700014 	rsbseq	r0, r0, r4, lsl r0
     db4:	37253520 	strcc	r3, [r5, -r0, lsr #10]!
     db8:	7224311a 	eorvc	r3, r4, #-2147483642	; 0x80000006
     dbc:	301a3800 	andscc	r3, sl, r0, lsl #16
     dc0:	1aff0829 	bne	fffc2e6c <MSP_BASE+0xdffbde6c>
     dc4:	016c9f21 	cmneq	ip, r1, lsr #30
     dc8:	016e0000 	cmneq	lr, r0
     dcc:	001e0000 	andseq	r0, lr, r0
     dd0:	35200070 	strcc	r0, [r0, #-112]!	; 0xffffff90
     dd4:	311a3725 	tstcc	sl, r5, lsr #14
     dd8:	20007124 	andcs	r7, r0, r4, lsr #2
     ddc:	1a33253d 	bne	cca2d8 <__RW_SIZE__+0xcc9d50>
     de0:	72212434 	eorvc	r2, r1, #52, 8	; 0x34000000
     de4:	301a3800 	andscc	r3, sl, r0, lsl #16
     de8:	1aff0829 	bne	fffc2e94 <MSP_BASE+0xdffbde94>
     dec:	016e9f21 	cmneq	lr, r1, lsr #30
     df0:	01700000 	cmneq	r0, r0
     df4:	001d0000 	andseq	r0, sp, r0
     df8:	25350070 	ldrcs	r0, [r5, #-112]!	; 0xffffff90
     dfc:	24311a37 	ldrtcs	r1, [r1], #-2615	; 0xfffff5c9
     e00:	3d200071 	stccc	0, cr0, [r0, #-452]!	; 0xfffffe3c
     e04:	341a3325 	ldrcc	r3, [sl], #-805	; 0xfffffcdb
     e08:	00722124 	rsbseq	r2, r2, r4, lsr #2
     e0c:	29301a38 	ldmdbcs	r0!, {r3, r4, r5, r9, fp, ip}
     e10:	211aff08 	tstcs	sl, r8, lsl #30
     e14:	0001709f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
     e18:	00017400 	andeq	r7, r1, r0, lsl #8
     e1c:	70001c00 	andvc	r1, r0, r0, lsl #24
     e20:	37253500 	strcc	r3, [r5, -r0, lsl #10]!
     e24:	7124311a 	teqvc	r4, sl, lsl r1
     e28:	33253d00 	teqcc	r5, #0, 26
     e2c:	2124341a 	teqcs	r4, sl, lsl r4
     e30:	1a380072 	bne	e01000 <__RW_SIZE__+0xe00a78>
     e34:	ff082930 			; <UNDEFINED> instruction: 0xff082930
     e38:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
     e3c:	00000000 	andeq	r0, r0, r0
     e40:	90000000 	andls	r0, r0, r0
     e44:	a4000001 	strge	r0, [r0], #-1
     e48:	01000001 	tsteq	r0, r1
     e4c:	01a45000 			; <UNDEFINED> instruction: 0x01a45000
     e50:	01d20000 	bicseq	r0, r2, r0
     e54:	00040000 	andeq	r0, r4, r0
     e58:	9f5001f3 	svcls	0x005001f3
     e5c:	000001d2 	ldrdeq	r0, [r0], -r2
     e60:	000001f2 	strdeq	r0, [r0], -r2
     e64:	f2500001 	vhadd.s16	d16, d0, d1
     e68:	88000001 	stmdahi	r0, {r0}
     e6c:	04000002 	streq	r0, [r0], #-2
     e70:	5001f300 	andpl	pc, r1, r0, lsl #6
     e74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	00019400 	andeq	r9, r1, r0, lsl #8
     e80:	0001d200 	andeq	sp, r1, r0, lsl #4
     e84:	39000200 	stmdbcc	r0, {r9}
     e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	0001ae00 	andeq	sl, r1, r0, lsl #28
     e94:	0001d200 	andeq	sp, r1, r0, lsl #4
     e98:	47000200 	strmi	r0, [r0, -r0, lsl #4]
     e9c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	0001b400 	andeq	fp, r1, r0, lsl #8
     ea8:	0001d200 	andeq	sp, r1, r0, lsl #4
     eac:	08000300 	stmdaeq	r0, {r8, r9}
     eb0:	00009f28 	andeq	r9, r0, r8, lsr #30
     eb4:	00000000 	andeq	r0, r0, r0
     eb8:	00680000 	rsbeq	r0, r8, r0
     ebc:	00cc0000 	sbceq	r0, ip, r0
     ec0:	00010000 	andeq	r0, r1, r0
     ec4:	0000cc50 	andeq	ip, r0, r0, asr ip
     ec8:	0000f200 	andeq	pc, r0, r0, lsl #4
     ecc:	f3000400 	vshl.u8	d0, d0, d0
     ed0:	009f5001 	addseq	r5, pc, r1
     ed4:	00000000 	andeq	r0, r0, r0
     ed8:	6c000000 	stcvs	0, cr0, [r0], {-0}
     edc:	82000000 	andhi	r0, r0, #0
     ee0:	02000000 	andeq	r0, r0, #0
     ee4:	009f4700 	addseq	r4, pc, r0, lsl #14
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	44000000 	strmi	r0, [r0], #-0
     ef0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     ef4:	01000000 	mrseq	r0, (UNDEF: 0)
     ef8:	007c5000 	rsbseq	r5, ip, r0
     efc:	00e60000 	rsceq	r0, r6, r0
     f00:	00040000 	andeq	r0, r4, r0
     f04:	9f5001f3 	svcls	0x005001f3
	...
     f10:	00000044 	andeq	r0, r0, r4, asr #32
     f14:	000000b2 	strheq	r0, [r0], -r2
     f18:	b2510001 	subslt	r0, r1, #1
     f1c:	e6000000 	str	r0, [r0], -r0
     f20:	04000000 	streq	r0, [r0], #-0
     f24:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     f2c:	00000000 	andeq	r0, r0, r0
     f30:	00006400 	andeq	r6, r0, r0, lsl #8
     f34:	00007c00 	andeq	r7, r0, r0, lsl #24
     f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f44:	0000006e 	andeq	r0, r0, lr, rrx
     f48:	0000007c 	andeq	r0, r0, ip, ror r0
     f4c:	00500001 	subseq	r0, r0, r1
     f50:	00000000 	andeq	r0, r0, r0
     f54:	a2000000 	andge	r0, r0, #0
     f58:	b2000000 	andlt	r0, r0, #0
     f5c:	01000000 	mrseq	r0, (UNDEF: 0)
     f60:	00005100 	andeq	r5, r0, r0, lsl #2
     f64:	00000000 	andeq	r0, r0, r0
     f68:	00e80000 	rsceq	r0, r8, r0
     f6c:	01360000 	teqeq	r6, r0
     f70:	00010000 	andeq	r0, r1, r0
     f74:	00013650 	andeq	r3, r1, r0, asr r6
     f78:	00016200 	andeq	r6, r1, r0, lsl #4
     f7c:	f3000400 	vshl.u8	d0, d0, d0
     f80:	009f5001 	addseq	r5, pc, r1
     f84:	00000000 	andeq	r0, r0, r0
     f88:	12000000 	andne	r0, r0, #0
     f8c:	26000001 	strcs	r0, [r0], -r1
     f90:	01000001 	tsteq	r0, r1
     f94:	01265400 	teqeq	r6, r0, lsl #8
     f98:	01360000 	teqeq	r6, r0
     f9c:	00050000 	andeq	r0, r5, r0
     fa0:	25380070 	ldrcs	r0, [r8, #-112]!	; 0xffffff90
     fa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	00013400 	andeq	r3, r1, r0, lsl #8
     fb0:	00013600 	andeq	r3, r1, r0, lsl #12
     fb4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fc0:	000001c8 	andeq	r0, r0, r8, asr #3
     fc4:	000001f4 	strdeq	r0, [r0], -r4
     fc8:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
     fcc:	1a000001 	bne	fd8 <__RW_SIZE__+0xa50>
     fd0:	04000002 	streq	r0, [r0], #-2
     fd4:	5001f300 	andpl	pc, r1, r0, lsl #6
     fd8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fdc:	00000000 	andeq	r0, r0, r0
     fe0:	0001f000 	andeq	pc, r1, r0
     fe4:	0001f400 	andeq	pc, r1, r0, lsl #8
     fe8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ff4:	00000270 	andeq	r0, r0, r0, ror r2
     ff8:	0000029e 	muleq	r0, lr, r2
     ffc:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    1000:	46000002 	strmi	r0, [r0], -r2
    1004:	04000003 	streq	r0, [r0], #-3
    1008:	5001f300 	andpl	pc, r1, r0, lsl #6
    100c:	0003469f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    1010:	00034800 	andeq	r4, r3, r0, lsl #16
    1014:	50000100 	andpl	r0, r0, r0, lsl #2
    1018:	00000348 	andeq	r0, r0, r8, asr #6
    101c:	000003de 	ldrdeq	r0, [r0], -lr
    1020:	01f30004 	mvnseq	r0, r4
    1024:	03de9f50 	bicseq	r9, lr, #80, 30	; 0x140
    1028:	03e00000 	mvneq	r0, #0
    102c:	00010000 	andeq	r0, r1, r0
    1030:	0003e050 	andeq	lr, r3, r0, asr r0
    1034:	00047600 	andeq	r7, r4, r0, lsl #12
    1038:	f3000400 	vshl.u8	d0, d0, d0
    103c:	769f5001 	ldrvc	r5, [pc], r1
    1040:	7a000004 	bvc	1058 <__RW_SIZE__+0xad0>
    1044:	01000004 	tsteq	r0, r4
    1048:	047a5000 	ldrbteq	r5, [sl], #-0
    104c:	050e0000 	streq	r0, [lr, #-0]
    1050:	00040000 	andeq	r0, r4, r0
    1054:	9f5001f3 	svcls	0x005001f3
    1058:	0000050e 	andeq	r0, r0, lr, lsl #10
    105c:	00000512 	andeq	r0, r0, r2, lsl r5
    1060:	12500001 	subsne	r0, r0, #1
    1064:	a6000005 	strge	r0, [r0], -r5
    1068:	04000005 	streq	r0, [r0], #-5
    106c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1070:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1074:	00000000 	andeq	r0, r0, r0
    1078:	0002a600 	andeq	sl, r2, r0, lsl #12
    107c:	00033000 	andeq	r3, r3, r0
    1080:	08000300 	stmdaeq	r0, {r8, r9}
    1084:	00009fe8 	andeq	r9, r0, r8, ror #31
    1088:	00000000 	andeq	r0, r0, r0
    108c:	02a60000 	adceq	r0, r6, #0
    1090:	03300000 	teqeq	r0, #0
    1094:	00030000 	andeq	r0, r3, r0
    1098:	009f3608 	addseq	r3, pc, r8, lsl #12
    109c:	00000000 	andeq	r0, r0, r0
    10a0:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    10a4:	30000002 	andcc	r0, r0, r2
    10a8:	03000003 	movweq	r0, #3
    10ac:	9f360800 	svcls	0x00360800
	...
    10b8:	00000302 	andeq	r0, r0, r2, lsl #6
    10bc:	00000330 	andeq	r0, r0, r0, lsr r3
    10c0:	e8090003 	stmda	r9, {r0, r1}
    10c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	00031800 	andeq	r1, r3, r0, lsl #16
    10d0:	00033000 	andeq	r3, r3, r0
    10d4:	09000300 	stmdbeq	r0, {r8, r9}
    10d8:	00009fe8 	andeq	r9, r0, r8, ror #31
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	03520000 	cmpeq	r2, #0
    10e4:	03de0000 	bicseq	r0, lr, #0
    10e8:	00020000 	andeq	r0, r2, r0
    10ec:	00009f38 	andeq	r9, r0, r8, lsr pc
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	03520000 	cmpeq	r2, #0
    10f8:	03de0000 	bicseq	r0, lr, #0
    10fc:	00030000 	andeq	r0, r3, r0
    1100:	009f3608 	addseq	r3, pc, r8, lsl #12
    1104:	00000000 	andeq	r0, r0, r0
    1108:	7a000000 	bvc	1110 <__RW_SIZE__+0xb88>
    110c:	de000003 	cdple	0, 0, cr0, cr0, cr3, {0}
    1110:	03000003 	movweq	r0, #3
    1114:	9f360800 	svcls	0x00360800
	...
    1120:	000003ae 	andeq	r0, r0, lr, lsr #7
    1124:	000003de 	ldrdeq	r0, [r0], -lr
    1128:	9f380002 	svcls	0x00380002
	...
    1134:	000003c4 	andeq	r0, r0, r4, asr #7
    1138:	000003de 	ldrdeq	r0, [r0], -lr
    113c:	9f380002 	svcls	0x00380002
	...
    1148:	000003ea 	andeq	r0, r0, sl, ror #7
    114c:	00000476 	andeq	r0, r0, r6, ror r4
    1150:	c8080003 	stmdagt	r8, {r0, r1}
    1154:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0003ea00 	andeq	lr, r3, r0, lsl #20
    1160:	00047600 	andeq	r7, r4, r0, lsl #12
    1164:	08000300 	stmdaeq	r0, {r8, r9}
    1168:	00009f36 	andeq	r9, r0, r6, lsr pc
    116c:	00000000 	andeq	r0, r0, r0
    1170:	04120000 	ldreq	r0, [r2], #-0
    1174:	04760000 	ldrbteq	r0, [r6], #-0
    1178:	00030000 	andeq	r0, r3, r0
    117c:	009f3608 	addseq	r3, pc, r8, lsl #12
    1180:	00000000 	andeq	r0, r0, r0
    1184:	46000000 	strmi	r0, [r0], -r0
    1188:	76000004 	strvc	r0, [r0], -r4
    118c:	03000004 	movweq	r0, #4
    1190:	9fc80900 	svcls	0x00c80900
	...
    119c:	0000045c 	andeq	r0, r0, ip, asr r4
    11a0:	00000476 	andeq	r0, r0, r6, ror r4
    11a4:	c8090003 	stmdagt	r9, {r0, r1}
    11a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11ac:	00000000 	andeq	r0, r0, r0
    11b0:	00048200 	andeq	r8, r4, r0, lsl #4
    11b4:	00050e00 	andeq	r0, r5, r0, lsl #28
    11b8:	08000300 	stmdaeq	r0, {r8, r9}
    11bc:	00009f68 	andeq	r9, r0, r8, ror #30
    11c0:	00000000 	andeq	r0, r0, r0
    11c4:	04820000 	streq	r0, [r2], #0
    11c8:	050e0000 	streq	r0, [lr, #-0]
    11cc:	00030000 	andeq	r0, r3, r0
    11d0:	009f3608 	addseq	r3, pc, r8, lsl #12
    11d4:	00000000 	andeq	r0, r0, r0
    11d8:	aa000000 	bge	11e0 <__RW_SIZE__+0xc58>
    11dc:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    11e0:	03000005 	movweq	r0, #5
    11e4:	9f360800 	svcls	0x00360800
	...
    11f0:	000004de 	ldrdeq	r0, [r0], -lr
    11f4:	0000050e 	andeq	r0, r0, lr, lsl #10
    11f8:	68080003 	stmdavs	r8, {r0, r1}
    11fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1200:	00000000 	andeq	r0, r0, r0
    1204:	0004f400 	andeq	pc, r4, r0, lsl #8
    1208:	00050e00 	andeq	r0, r5, r0, lsl #28
    120c:	08000300 	stmdaeq	r0, {r8, r9}
    1210:	00009f68 	andeq	r9, r0, r8, ror #30
    1214:	00000000 	andeq	r0, r0, r0
    1218:	05c40000 	strbeq	r0, [r4]
    121c:	05d60000 	ldrbeq	r0, [r6]
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000051 	andeq	r0, r0, r1, asr r0
    1228:	00000000 	andeq	r0, r0, r0
    122c:	00060800 	andeq	r0, r6, r0, lsl #16
    1230:	0006e600 	andeq	lr, r6, r0, lsl #12
    1234:	50000100 	andpl	r0, r0, r0, lsl #2
    1238:	000006e6 	andeq	r0, r0, r6, ror #13
    123c:	0000096c 	andeq	r0, r0, ip, ror #18
    1240:	01f30004 	mvnseq	r0, r4
    1244:	00009f50 	andeq	r9, r0, r0, asr pc
    1248:	00000000 	andeq	r0, r0, r0
    124c:	06080000 	streq	r0, [r8], -r0
    1250:	085a0000 	ldmdaeq	sl, {}^	; <UNPREDICTABLE>
    1254:	00010000 	andeq	r0, r1, r0
    1258:	00085a51 	andeq	r5, r8, r1, asr sl
    125c:	00096c00 	andeq	r6, r9, r0, lsl #24
    1260:	f3000400 	vshl.u8	d0, d0, d0
    1264:	009f5101 	addseq	r5, pc, r1, lsl #2
    1268:	00000000 	andeq	r0, r0, r0
    126c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1270:	7a000006 	bvc	1290 <__RW_SIZE__+0xd08>
    1274:	01000007 	tsteq	r0, r7
    1278:	077a5200 	ldrbeq	r5, [sl, -r0, lsl #4]!
    127c:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    1280:	00040000 	andeq	r0, r4, r0
    1284:	9f5201f3 	svcls	0x005201f3
	...
    1290:	00000608 	andeq	r0, r0, r8, lsl #12
    1294:	000008ee 	andeq	r0, r0, lr, ror #17
    1298:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    129c:	6c000008 	stcvs	0, cr0, [r0], {8}
    12a0:	04000009 	streq	r0, [r0], #-9
    12a4:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    12a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	00062600 	andeq	r2, r6, r0, lsl #12
    12b4:	00063c00 	andeq	r3, r6, r0, lsl #24
    12b8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    12c4:	000006d2 	ldrdeq	r0, [r0], -r2
    12c8:	000006e6 	andeq	r0, r0, r6, ror #13
    12cc:	00500001 	subseq	r0, r0, r1
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	6a000000 	bvs	12dc <__RW_SIZE__+0xd54>
    12d8:	7a000007 	bvc	12fc <__RW_SIZE__+0xd74>
    12dc:	01000007 	tsteq	r0, r7
    12e0:	00005200 	andeq	r5, r0, r0, lsl #4
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	07b80000 	ldreq	r0, [r8, r0]!
    12ec:	07c60000 	strbeq	r0, [r6, r0]
    12f0:	00010000 	andeq	r0, r1, r0
    12f4:	00000056 	andeq	r0, r0, r6, asr r0
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	00084a00 	andeq	r4, r8, r0, lsl #20
    1300:	00085a00 	andeq	r5, r8, r0, lsl #20
    1304:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1310:	000008de 	ldrdeq	r0, [r0], -lr
    1314:	000008ee 	andeq	r0, r0, lr, ror #17
    1318:	00530001 	subseq	r0, r3, r1
    131c:	00000000 	andeq	r0, r0, r0
    1320:	2c000000 	stccs	0, cr0, [r0], {-0}
    1324:	3a000009 	bcc	1350 <__RW_SIZE__+0xdc8>
    1328:	01000009 	tsteq	r0, r9
    132c:	00005000 	andeq	r5, r0, r0
    1330:	00000000 	andeq	r0, r0, r0
    1334:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    1338:	09830000 	stmibeq	r3, {}	; <UNPREDICTABLE>
    133c:	00010000 	andeq	r0, r1, r0
    1340:	00098350 	andeq	r8, r9, r0, asr r3
    1344:	000a2400 	andeq	r2, sl, r0, lsl #8
    1348:	f3000400 	vshl.u8	d0, d0, d0
    134c:	009f5001 	addseq	r5, pc, r1
    1350:	00000000 	andeq	r0, r0, r0
    1354:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1358:	83000009 	movwhi	r0, #9
    135c:	01000009 	tsteq	r0, r9
    1360:	09835100 	stmibeq	r3, {r8, ip, lr}
    1364:	0a240000 	beq	90136c <__RW_SIZE__+0x900de4>
    1368:	00040000 	andeq	r0, r4, r0
    136c:	9f5101f3 	svcls	0x005101f3
	...
    1378:	0000096c 	andeq	r0, r0, ip, ror #18
    137c:	00000983 	andeq	r0, r0, r3, lsl #19
    1380:	83520001 	cmphi	r2, #1
    1384:	24000009 	strcs	r0, [r0], #-9
    1388:	0400000a 	streq	r0, [r0], #-10
    138c:	5201f300 	andpl	pc, r1, #0, 6
    1390:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1394:	00000000 	andeq	r0, r0, r0
    1398:	00096c00 	andeq	r6, r9, r0, lsl #24
    139c:	00098300 	andeq	r8, r9, r0, lsl #6
    13a0:	53000100 	movwpl	r0, #256	; 0x100
    13a4:	00000983 	andeq	r0, r0, r3, lsl #19
    13a8:	00000a24 	andeq	r0, r0, r4, lsr #20
    13ac:	01f30004 	mvnseq	r0, r4
    13b0:	00009f53 	andeq	r9, r0, r3, asr pc
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	096c0000 	stmdbeq	ip!, {}^	; <UNPREDICTABLE>
    13bc:	0a200000 	beq	8013c4 <__RW_SIZE__+0x800e3c>
    13c0:	00020000 	andeq	r0, r2, r0
    13c4:	0a200091 	beq	801610 <__RW_SIZE__+0x801088>
    13c8:	0a240000 	beq	9013d0 <__RW_SIZE__+0x900e48>
    13cc:	00020000 	andeq	r0, r2, r0
    13d0:	0000007d 	andeq	r0, r0, sp, ror r0
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    13dc:	09ac0000 	stmibeq	ip!, {}	; <UNPREDICTABLE>
    13e0:	00020000 	andeq	r0, r2, r0
    13e4:	09ac9f30 	stmibeq	ip!, {r4, r5, r8, r9, sl, fp, ip, pc}
    13e8:	09fc0000 	ldmibeq	ip!, {}^	; <UNPREDICTABLE>
    13ec:	00010000 	andeq	r0, r1, r0
    13f0:	0009fc59 	andeq	pc, r9, r9, asr ip	; <UNPREDICTABLE>
    13f4:	000a0000 	andeq	r0, sl, r0
    13f8:	79000300 	stmdbvc	r0, {r8, r9}
    13fc:	0a009f7f 	beq	29200 <__RW_SIZE__+0x28c78>
    1400:	0a040000 	beq	101408 <__RW_SIZE__+0x100e80>
    1404:	00010000 	andeq	r0, r1, r0
    1408:	00000059 	andeq	r0, r0, r9, asr r0
    140c:	00000000 	andeq	r0, r0, r0
    1410:	0009ac00 	andeq	sl, r9, r0, lsl #24
    1414:	0009b000 	andeq	fp, r9, r0
    1418:	30000200 	andcc	r0, r0, r0, lsl #4
    141c:	0009b09f 	muleq	r9, pc, r0	; <UNPREDICTABLE>
    1420:	0009ec00 	andeq	lr, r9, r0, lsl #24
    1424:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1428:	000009ec 	andeq	r0, r0, ip, ror #19
    142c:	000009ee 	andeq	r0, r0, lr, ror #19
    1430:	7f740003 	svcvc	0x00740003
    1434:	0009ee9f 	muleq	r9, pc, lr	; <UNPREDICTABLE>
    1438:	0009f800 	andeq	pc, r9, r0, lsl #16
    143c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1448:	0000097c 	andeq	r0, r0, ip, ror r9
    144c:	00000a20 	andeq	r0, r0, r0, lsr #20
    1450:	00550001 	subseq	r0, r5, r1
    1454:	00000000 	andeq	r0, r0, r0
    1458:	7c000000 	stcvc	0, cr0, [r0], {-0}
    145c:	20000009 	andcs	r0, r0, r9
    1460:	0100000a 	tsteq	r0, sl
    1464:	00005600 	andeq	r5, r0, r0, lsl #12
    1468:	00000000 	andeq	r0, r0, r0
    146c:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
    1470:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
    1474:	00010000 	andeq	r0, r1, r0
    1478:	00000058 	andeq	r0, r0, r8, asr r0
    147c:	00000000 	andeq	r0, r0, r0
    1480:	000a2400 	andeq	r2, sl, r0, lsl #8
    1484:	000ae800 	andeq	lr, sl, r0, lsl #16
    1488:	50000100 	andpl	r0, r0, r0, lsl #2
    148c:	00000ae8 	andeq	r0, r0, r8, ror #21
    1490:	00000d66 	andeq	r0, r0, r6, ror #26
    1494:	01f30004 	mvnseq	r0, r4
    1498:	00009f50 	andeq	r9, r0, r0, asr pc
    149c:	00000000 	andeq	r0, r0, r0
    14a0:	0a240000 	beq	9014a8 <__RW_SIZE__+0x900f20>
    14a4:	0c580000 	mraeq	r0, r8, acc0
    14a8:	00010000 	andeq	r0, r1, r0
    14ac:	000c5851 	andeq	r5, ip, r1, asr r8
    14b0:	000d6600 	andeq	r6, sp, r0, lsl #12
    14b4:	f3000400 	vshl.u8	d0, d0, d0
    14b8:	009f5101 	addseq	r5, pc, r1, lsl #2
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	52000000 	andpl	r0, r0, #0
    14c4:	5800000a 	stmdapl	r0, {r1, r3}
    14c8:	0100000c 	tsteq	r0, ip
    14cc:	00005100 	andeq	r5, r0, r0, lsl #2
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	0a520000 	beq	14814dc <__RW_SIZE__+0x1480f54>
    14d8:	0ae80000 	beq	ffa014e0 <MSP_BASE+0xdf9fc4e0>
    14dc:	00010000 	andeq	r0, r1, r0
    14e0:	00000050 	andeq	r0, r0, r0, asr r0
    14e4:	00000000 	andeq	r0, r0, r0
    14e8:	000a5200 	andeq	r5, sl, r0, lsl #4
    14ec:	000a5400 	andeq	r5, sl, r0, lsl #8
    14f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    14fc:	00000a9e 	muleq	r0, lr, sl
    1500:	00000b60 	andeq	r0, r0, r0, ror #22
    1504:	00560001 	subseq	r0, r6, r1
    1508:	00000000 	andeq	r0, r0, r0
    150c:	a4000000 	strge	r0, [r0], #-0
    1510:	6000000a 	andvs	r0, r0, sl
    1514:	0100000b 	tsteq	r0, fp
    1518:	00005600 	andeq	r5, r0, r0, lsl #12
    151c:	00000000 	andeq	r0, r0, r0
    1520:	0ad80000 	beq	ff601528 <MSP_BASE+0xdf5fc528>
    1524:	0ae80000 	beq	ffa0152c <MSP_BASE+0xdf9fc52c>
    1528:	00010000 	andeq	r0, r1, r0
    152c:	00000050 	andeq	r0, r0, r0, asr r0
    1530:	00000000 	andeq	r0, r0, r0
    1534:	000b2200 	andeq	r2, fp, r0, lsl #4
    1538:	000b6000 	andeq	r6, fp, r0
    153c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1548:	00000b38 	andeq	r0, r0, r8, lsr fp
    154c:	00000b60 	andeq	r0, r0, r0, ror #22
    1550:	00560001 	subseq	r0, r6, r1
    1554:	00000000 	andeq	r0, r0, r0
    1558:	b6000000 	strlt	r0, [r0], -r0
    155c:	c400000b 	strgt	r0, [r0], #-11
    1560:	0100000b 	tsteq	r0, fp
    1564:	00005500 	andeq	r5, r0, r0, lsl #10
    1568:	00000000 	andeq	r0, r0, r0
    156c:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    1570:	0cd00000 	ldcleq	0, cr0, [r0], {0}
    1574:	00010000 	andeq	r0, r1, r0
    1578:	00000055 	andeq	r0, r0, r5, asr r0
    157c:	00000000 	andeq	r0, r0, r0
    1580:	000c1400 	andeq	r1, ip, r0, lsl #8
    1584:	000cd000 	andeq	sp, ip, r0
    1588:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1594:	00000c48 	andeq	r0, r0, r8, asr #24
    1598:	00000c58 	andeq	r0, r0, r8, asr ip
    159c:	00510001 	subseq	r0, r1, r1
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	92000000 	andls	r0, r0, #0
    15a8:	d000000c 	andle	r0, r0, ip
    15ac:	0100000c 	tsteq	r0, ip
    15b0:	00005500 	andeq	r5, r0, r0, lsl #10
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	0ca80000 	stceq	0, cr0, [r8]
    15bc:	0cd00000 	ldcleq	0, cr0, [r0], {0}
    15c0:	00010000 	andeq	r0, r1, r0
    15c4:	00000055 	andeq	r0, r0, r5, asr r0
    15c8:	00000000 	andeq	r0, r0, r0
    15cc:	000d2600 	andeq	r2, sp, r0, lsl #12
    15d0:	000d6400 	andeq	r6, sp, r0, lsl #8
    15d4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    15e0:	00000d3a 	andeq	r0, r0, sl, lsr sp
    15e4:	00000d64 	andeq	r0, r0, r4, ror #26
    15e8:	00540001 	subseq	r0, r4, r1
    15ec:	00000000 	andeq	r0, r0, r0
    15f0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    15f4:	7c00000d 	stcvc	0, cr0, [r0], {13}
    15f8:	0100000d 	tsteq	r0, sp
    15fc:	0d7c5000 	ldcleq	0, cr5, [ip, #-0]
    1600:	0dfc0000 	ldcleq	0, cr0, [ip]
    1604:	00040000 	andeq	r0, r4, r0
    1608:	9f5001f3 	svcls	0x005001f3
	...
    1614:	00000daa 	andeq	r0, r0, sl, lsr #27
    1618:	00000dc0 	andeq	r0, r0, r0, asr #27
    161c:	9f300002 	svcls	0x00300002
    1620:	00000dc0 	andeq	r0, r0, r0, asr #27
    1624:	00000dea 	andeq	r0, r0, sl, ror #27
    1628:	00500001 	subseq	r0, r0, r1
    162c:	00000000 	andeq	r0, r0, r0
    1630:	a4000000 	strge	r0, [r0], #-0
    1634:	b000000d 	andlt	r0, r0, sp
    1638:	0100000d 	tsteq	r0, sp
    163c:	00005500 	andeq	r5, r0, r0, lsl #10
    1640:	00000000 	andeq	r0, r0, r0
    1644:	0dc00000 	stcleq	0, cr0, [r0]
    1648:	0dea0000 	stcleq	0, cr0, [sl]
    164c:	00010000 	andeq	r0, r1, r0
    1650:	00000056 	andeq	r0, r0, r6, asr r0
    1654:	00000000 	andeq	r0, r0, r0
    1658:	000e0400 	andeq	r0, lr, r0, lsl #8
    165c:	000e3c00 	andeq	r3, lr, r0, lsl #24
    1660:	50000100 	andpl	r0, r0, r0, lsl #2
    1664:	00000e3c 	andeq	r0, r0, ip, lsr lr
    1668:	00000e64 	andeq	r0, r0, r4, ror #28
    166c:	64580001 	ldrbvs	r0, [r8], #-1
    1670:	bc00000e 	stclt	0, cr0, [r0], {14}
    1674:	0400000e 	streq	r0, [r0], #-14
    1678:	5001f300 	andpl	pc, r1, r0, lsl #6
    167c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1680:	00000000 	andeq	r0, r0, r0
    1684:	000e0400 	andeq	r0, lr, r0, lsl #8
    1688:	000e3e00 	andeq	r3, lr, r0, lsl #28
    168c:	51000100 	mrspl	r0, (UNDEF: 16)
    1690:	00000e3e 	andeq	r0, r0, lr, lsr lr
    1694:	00000e50 	andeq	r0, r0, r0, asr lr
    1698:	50540001 	subspl	r0, r4, r1
    169c:	bc00000e 	stclt	0, cr0, [r0], {14}
    16a0:	0400000e 	streq	r0, [r0], #-14
    16a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    16a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	000e0400 	andeq	r0, lr, r0, lsl #8
    16b4:	000e1600 	andeq	r1, lr, r0, lsl #12
    16b8:	52000100 	andpl	r0, r0, #0, 2
    16bc:	00000e16 	andeq	r0, r0, r6, lsl lr
    16c0:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    16c4:	01f30004 	mvnseq	r0, r4
    16c8:	00009f52 	andeq	r9, r0, r2, asr pc
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    16d4:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    16d8:	00010000 	andeq	r0, r1, r0
    16dc:	000e0a53 	andeq	r0, lr, r3, asr sl
    16e0:	000ebc00 	andeq	fp, lr, r0, lsl #24
    16e4:	f3000400 	vshl.u8	d0, d0, d0
    16e8:	009f5301 	addseq	r5, pc, r1, lsl #6
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	70000000 	andvc	r0, r0, r0
    16f4:	7e00000e 	cdpvc	0, 0, cr0, cr0, cr14, {0}
    16f8:	0200000e 	andeq	r0, r0, #14
    16fc:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
    1700:	a800000e 	stmdage	r0, {r1, r2, r3}
    1704:	0100000e 	tsteq	r0, lr
    1708:	00005000 	andeq	r5, r0, r0
    170c:	00000000 	andeq	r0, r0, r0
    1710:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    1714:	0e760000 	cdpeq	0, 7, cr0, cr6, cr0, {0}
    1718:	00010000 	andeq	r0, r1, r0
    171c:	00000056 	andeq	r0, r0, r6, asr r0
    1720:	00000000 	andeq	r0, r0, r0
    1724:	000e3800 	andeq	r3, lr, r0, lsl #16
    1728:	000ebc00 	andeq	fp, lr, r0, lsl #24
    172c:	59000100 	stmdbpl	r0, {r8}
	...
    1738:	00000e1e 	andeq	r0, r0, lr, lsl lr
    173c:	00000e7e 	andeq	r0, r0, lr, ror lr
    1740:	7e570001 	cdpvc	0, 5, cr0, cr7, cr1, {0}
    1744:	bc00000e 	stclt	0, cr0, [r0], {14}
    1748:	0a00000e 	beq	1788 <__RW_SIZE__+0x1200>
    174c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1750:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    1754:	009f1c31 	addseq	r1, pc, r1, lsr ip	; <UNPREDICTABLE>
    1758:	00000000 	andeq	r0, r0, r0
    175c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    1760:	a800000e 	stmdage	r0, {r1, r2, r3}
    1764:	0100000e 	tsteq	r0, lr
    1768:	00005500 	andeq	r5, r0, r0, lsl #10
    176c:	00000000 	andeq	r0, r0, r0
    1770:	0ebc0000 	cdpeq	0, 11, cr0, cr12, cr0, {0}
    1774:	2cab0000 	stccs	0, cr0, [fp]
    1778:	00010000 	andeq	r0, r1, r0
    177c:	002cab50 	eoreq	sl, ip, r0, asr fp
    1780:	002ce200 	eoreq	lr, ip, r0, lsl #4
    1784:	f3000400 	vshl.u8	d0, d0, d0
    1788:	009f5001 	addseq	r5, pc, r1
    178c:	00000000 	andeq	r0, r0, r0
    1790:	e4000000 	str	r0, [r0], #-0
    1794:	b000002c 	andlt	r0, r0, ip, lsr #32
    1798:	0100002d 	tsteq	r0, sp, lsr #32
    179c:	2db05000 	ldccs	0, cr5, [r0]
    17a0:	30a40000 	adccc	r0, r4, r0
    17a4:	00040000 	andeq	r0, r4, r0
    17a8:	9f5001f3 	svcls	0x005001f3
	...
    17b4:	00002ce4 	andeq	r2, r0, r4, ror #25
    17b8:	00002f2c 	andeq	r2, r0, ip, lsr #30
    17bc:	2c510001 	mrrccs	0, 0, r0, r1, cr1
    17c0:	a400002f 	strge	r0, [r0], #-47	; 0xffffffd1
    17c4:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    17c8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    17cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    17d0:	00000000 	andeq	r0, r0, r0
    17d4:	002ce400 	eoreq	lr, ip, r0, lsl #8
    17d8:	00307a00 	eorseq	r7, r0, r0, lsl #20
    17dc:	52000100 	andpl	r0, r0, #0, 2
    17e0:	0000307a 	andeq	r3, r0, sl, ror r0
    17e4:	000030a4 	andeq	r3, r0, r4, lsr #1
    17e8:	01f30004 	mvnseq	r0, r4
    17ec:	00009f52 	andeq	r9, r0, r2, asr pc
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	2d120000 	ldccs	0, cr0, [r2, #-0]
    17f8:	2f2c0000 	svccs	0x002c0000
    17fc:	00010000 	andeq	r0, r1, r0
    1800:	00000051 	andeq	r0, r0, r1, asr r0
    1804:	00000000 	andeq	r0, r0, r0
    1808:	002d1200 	eoreq	r1, sp, r0, lsl #4
    180c:	002db000 	eoreq	fp, sp, r0
    1810:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    181c:	00002d12 	andeq	r2, r0, r2, lsl sp
    1820:	00002d14 	andeq	r2, r0, r4, lsl sp
    1824:	00560001 	subseq	r0, r6, r1
    1828:	00000000 	andeq	r0, r0, r0
    182c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    1830:	3400002d 	strcc	r0, [r0], #-45	; 0xffffffd3
    1834:	0100002e 	tsteq	r0, lr, lsr #32
    1838:	00005700 	andeq	r5, r0, r0, lsl #14
    183c:	00000000 	andeq	r0, r0, r0
    1840:	2d640000 	stclcs	0, cr0, [r4, #-0]
    1844:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1848:	00010000 	andeq	r0, r1, r0
    184c:	00000057 	andeq	r0, r0, r7, asr r0
    1850:	00000000 	andeq	r0, r0, r0
    1854:	002d9c00 	eoreq	r9, sp, r0, lsl #24
    1858:	002db000 	eoreq	fp, sp, r0
    185c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1868:	00002dee 	andeq	r2, r0, lr, ror #27
    186c:	00002e34 	andeq	r2, r0, r4, lsr lr
    1870:	00570001 	subseq	r0, r7, r1
    1874:	00000000 	andeq	r0, r0, r0
    1878:	0c000000 	stceq	0, cr0, [r0], {-0}
    187c:	3400002e 	strcc	r0, [r0], #-46	; 0xffffffd2
    1880:	0100002e 	tsteq	r0, lr, lsr #32
    1884:	00005700 	andeq	r5, r0, r0, lsl #14
    1888:	00000000 	andeq	r0, r0, r0
    188c:	2e8a0000 	cdpcs	0, 8, cr0, cr10, cr0, {0}
    1890:	2e980000 	cdpcs	0, 9, cr0, cr8, cr0, {0}
    1894:	00010000 	andeq	r0, r1, r0
    1898:	00000056 	andeq	r0, r0, r6, asr r0
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	002ee200 	eoreq	lr, lr, r0, lsl #4
    18a4:	002f8c00 	eoreq	r8, pc, r0, lsl #24
    18a8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    18b4:	00002ee8 	andeq	r2, r0, r8, ror #29
    18b8:	00002f8c 	andeq	r2, r0, ip, lsl #31
    18bc:	00560001 	subseq	r0, r6, r1
    18c0:	00000000 	andeq	r0, r0, r0
    18c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    18c8:	2c00002f 	stccs	0, cr0, [r0], {47}	; 0x2f
    18cc:	0100002f 	tsteq	r0, pc, lsr #32
    18d0:	00005100 	andeq	r5, r0, r0, lsl #2
    18d4:	00000000 	andeq	r0, r0, r0
    18d8:	2f660000 	svccs	0x00660000
    18dc:	2f8c0000 	svccs	0x008c0000
    18e0:	00010000 	andeq	r0, r1, r0
    18e4:	00000056 	andeq	r0, r0, r6, asr r0
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	002f7c00 	eoreq	r7, pc, r0, lsl #24
    18f0:	002f8c00 	eoreq	r8, pc, r0, lsl #24
    18f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1900:	00002ffa 	strdeq	r2, [r0], -sl
    1904:	00003008 	andeq	r3, r0, r8
    1908:	00540001 	subseq	r0, r4, r1
    190c:	00000000 	andeq	r0, r0, r0
    1910:	42000000 	andmi	r0, r0, #0
    1914:	7a000030 	bvc	19dc <__RW_SIZE__+0x1454>
    1918:	01000030 	tsteq	r0, r0, lsr r0
    191c:	00005200 	andeq	r5, r0, r0, lsl #4
    1920:	00000000 	andeq	r0, r0, r0
    1924:	30780000 	rsbscc	r0, r8, r0
    1928:	307a0000 	rsbscc	r0, sl, r0
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00000052 	andeq	r0, r0, r2, asr r0
    1934:	00000000 	andeq	r0, r0, r0
    1938:	00003000 	andeq	r3, r0, r0
    193c:	00003c00 	andeq	r3, r0, r0, lsl #24
    1940:	50000100 	andpl	r0, r0, r0, lsl #2
    1944:	0000003c 	andeq	r0, r0, ip, lsr r0
    1948:	00000040 	andeq	r0, r0, r0, asr #32
    194c:	00700004 	rsbseq	r0, r0, r4
    1950:	00409f20 	subeq	r9, r0, r0, lsr #30
    1954:	004c0000 	subeq	r0, ip, r0
    1958:	00040000 	andeq	r0, r4, r0
    195c:	9f5001f3 	svcls	0x005001f3
	...
    1968:	00000060 	andeq	r0, r0, r0, rrx
    196c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1970:	9f310002 	svcls	0x00310002
    1974:	0000016a 	andeq	r0, r0, sl, ror #2
    1978:	00000170 	andeq	r0, r0, r0, ror r1
    197c:	50910002 	addspl	r0, r1, r2
    1980:	0000019a 	muleq	r0, sl, r1
    1984:	0000019c 	muleq	r0, ip, r1
    1988:	00520001 	subseq	r0, r2, r1
    198c:	00000000 	andeq	r0, r0, r0
    1990:	60000000 	andvs	r0, r0, r0
    1994:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    1998:	02000000 	andeq	r0, r0, #0
    199c:	649f3000 	ldrvs	r3, [pc], #0	; 19a4 <__RW_SIZE__+0x141c>
    19a0:	68000001 	stmdavs	r0, {r0}
    19a4:	08000001 	stmdaeq	r0, {r0}
    19a8:	77007300 	strvc	r7, [r0, -r0, lsl #6]
    19ac:	1c243100 	stfnes	f3, [r4], #-0
    19b0:	0001689f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    19b4:	00019c00 	andeq	r9, r1, r0, lsl #24
    19b8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    19c8:	00000014 	andeq	r0, r0, r4, lsl r0
    19cc:	14500001 	ldrbne	r0, [r0], #-1
    19d0:	1a000000 	bne	19d8 <__RW_SIZE__+0x1450>
    19d4:	01000000 	mrseq	r0, (UNDEF: 0)
    19d8:	001a5200 	andseq	r5, sl, r0, lsl #4
    19dc:	001c0000 	andseq	r0, ip, r0
    19e0:	00030000 	andeq	r0, r3, r0
    19e4:	1c9f7972 	ldcne	9, cr7, [pc], {114}	; 0x72
    19e8:	32000000 	andcc	r0, r0, #0
    19ec:	04000000 	streq	r0, [r0], #-0
    19f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    19f4:	0000329f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    19f8:	00003c00 	andeq	r3, r0, r0, lsl #24
    19fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1a00:	0000003c 	andeq	r0, r0, ip, lsr r0
    1a04:	00000044 	andeq	r0, r0, r4, asr #32
    1a08:	00520001 	subseq	r0, r2, r1
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1a14:	2c000000 	stccs	0, cr0, [r0], {-0}
    1a18:	01000000 	mrseq	r0, (UNDEF: 0)
    1a1c:	00005000 	andeq	r5, r0, r0
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	00200000 	eoreq	r0, r0, r0
    1a28:	00320000 	eorseq	r0, r2, r0
    1a2c:	00010000 	andeq	r0, r1, r0
    1a30:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1a3c:	00000e00 	andeq	r0, r0, r0, lsl #28
    1a40:	50000100 	andpl	r0, r0, r0, lsl #2
    1a44:	0000000e 	andeq	r0, r0, lr
    1a48:	00000034 	andeq	r0, r0, r4, lsr r0
    1a4c:	34560001 	ldrbcc	r0, [r6], #-1
    1a50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1a54:	04000000 	streq	r0, [r0], #-0
    1a58:	5001f300 	andpl	pc, r1, r0, lsl #6
    1a5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1a68:	00000e00 	andeq	r0, r0, r0, lsl #28
    1a6c:	51000100 	mrspl	r0, (UNDEF: 16)
    1a70:	0000000e 	andeq	r0, r0, lr
    1a74:	00000034 	andeq	r0, r0, r4, lsr r0
    1a78:	34570001 	ldrbcc	r0, [r7], #-1
    1a7c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1a80:	04000000 	streq	r0, [r0], #-0
    1a84:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1a88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1a94:	00000e00 	andeq	r0, r0, r0, lsl #28
    1a98:	30000200 	andcc	r0, r0, r0, lsl #4
    1a9c:	00000e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    1aa0:	00002600 	andeq	r2, r0, r0, lsl #12
    1aa4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1aa8:	00000026 	andeq	r0, r0, r6, lsr #32
    1aac:	00000029 	andeq	r0, r0, r9, lsr #32
    1ab0:	29520001 	ldmdbcs	r2, {r0}^
    1ab4:	2a000000 	bcs	1abc <__RW_SIZE__+0x1534>
    1ab8:	03000000 	movweq	r0, #0
    1abc:	9f7f7400 	svcls	0x007f7400
    1ac0:	0000002a 	andeq	r0, r0, sl, lsr #32
    1ac4:	00000034 	andeq	r0, r0, r4, lsr r0
    1ac8:	34540001 	ldrbcc	r0, [r4], #-1
    1acc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad4:	00005300 	andeq	r5, r0, r0, lsl #6
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	007c0000 	rsbseq	r0, ip, r0
    1ae0:	00820000 	addeq	r0, r2, r0
    1ae4:	00010000 	andeq	r0, r1, r0
    1ae8:	00008250 	andeq	r8, r0, r0, asr r2
    1aec:	0000fe00 	andeq	pc, r0, r0, lsl #28
    1af0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1af4:	000000fe 	strdeq	r0, [r0], -lr
    1af8:	0000016e 	andeq	r0, r0, lr, ror #2
    1afc:	01f30004 	mvnseq	r0, r4
    1b00:	016e9f50 	cmneq	lr, r0, asr pc
    1b04:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    1b08:	00010000 	andeq	r0, r1, r0
    1b0c:	00000054 	andeq	r0, r0, r4, asr r0
    1b10:	00000000 	andeq	r0, r0, r0
    1b14:	00007c00 	andeq	r7, r0, r0, lsl #24
    1b18:	00008f00 	andeq	r8, r0, r0, lsl #30
    1b1c:	51000100 	mrspl	r0, (UNDEF: 16)
    1b20:	0000008f 	andeq	r0, r0, pc, lsl #1
    1b24:	000001a6 	andeq	r0, r0, r6, lsr #3
    1b28:	00550001 	subseq	r0, r5, r1
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1b34:	8f000000 	svchi	0x00000000
    1b38:	01000000 	mrseq	r0, (UNDEF: 0)
    1b3c:	008f5200 	addeq	r5, pc, r0, lsl #4
    1b40:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    1b44:	00010000 	andeq	r0, r1, r0
    1b48:	00000056 	andeq	r0, r0, r6, asr r0
    1b4c:	00000000 	andeq	r0, r0, r0
    1b50:	00009000 	andeq	r9, r0, r0
    1b54:	0000fe00 	andeq	pc, r0, r0, lsl #28
    1b58:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1b5c:	000000fe 	strdeq	r0, [r0], -lr
    1b60:	0000016e 	andeq	r0, r0, lr, ror #2
    1b64:	01f30004 	mvnseq	r0, r4
    1b68:	016e9f50 	cmneq	lr, r0, asr pc
    1b6c:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
    1b70:	00010000 	andeq	r0, r1, r0
    1b74:	00000054 	andeq	r0, r0, r4, asr r0
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	0001a800 	andeq	sl, r1, r0, lsl #16
    1b80:	0001ac00 	andeq	sl, r1, r0, lsl #24
    1b84:	50000100 	andpl	r0, r0, r0, lsl #2
    1b88:	000001ac 	andeq	r0, r0, ip, lsr #3
    1b8c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    1b90:	01f30004 	mvnseq	r0, r4
    1b94:	00009f50 	andeq	r9, r0, r0, asr pc
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    1ba0:	01b50000 			; <UNDEFINED> instruction: 0x01b50000
    1ba4:	00010000 	andeq	r0, r1, r0
    1ba8:	0001b551 	andeq	fp, r1, r1, asr r5
    1bac:	0001b800 	andeq	fp, r1, r0, lsl #16
    1bb0:	f3000400 	vshl.u8	d0, d0, d0
    1bb4:	009f5101 	addseq	r5, pc, r1, lsl #2
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1bc0:	b5000001 	strlt	r0, [r0, #-1]
    1bc4:	01000001 	tsteq	r0, r1
    1bc8:	01b55200 			; <UNDEFINED> instruction: 0x01b55200
    1bcc:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1bd0:	00040000 	andeq	r0, r4, r0
    1bd4:	9f5201f3 	svcls	0x005201f3
	...
    1be0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    1be4:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1be8:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1bec:	c8000001 	stmdagt	r0, {r0}
    1bf0:	04000001 	streq	r0, [r0], #-1
    1bf4:	5001f300 	andpl	pc, r1, r0, lsl #6
    1bf8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1bfc:	00000000 	andeq	r0, r0, r0
    1c00:	0001b800 	andeq	fp, r1, r0, lsl #16
    1c04:	0001c500 	andeq	ip, r1, r0, lsl #10
    1c08:	51000100 	mrspl	r0, (UNDEF: 16)
    1c0c:	000001c5 	andeq	r0, r0, r5, asr #3
    1c10:	000001c8 	andeq	r0, r0, r8, asr #3
    1c14:	01f30004 	mvnseq	r0, r4
    1c18:	00009f51 	andeq	r9, r0, r1, asr pc
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1c24:	01c50000 	biceq	r0, r5, r0
    1c28:	00010000 	andeq	r0, r1, r0
    1c2c:	0001c552 	andeq	ip, r1, r2, asr r5
    1c30:	0001c800 	andeq	ip, r1, r0, lsl #16
    1c34:	f3000400 	vshl.u8	d0, d0, d0
    1c38:	009f5201 	addseq	r5, pc, r1, lsl #4
    1c3c:	00000000 	andeq	r0, r0, r0
    1c40:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1c44:	cc000001 	stcgt	0, cr0, [r0], {1}
    1c48:	01000001 	tsteq	r0, r1
    1c4c:	01cc5000 	biceq	r5, ip, r0
    1c50:	01d80000 	bicseq	r0, r8, r0
    1c54:	00040000 	andeq	r0, r4, r0
    1c58:	9f5001f3 	svcls	0x005001f3
	...
    1c64:	000001c8 	andeq	r0, r0, r8, asr #3
    1c68:	000001d5 	ldrdeq	r0, [r0], -r5
    1c6c:	d5510001 	ldrble	r0, [r1, #-1]
    1c70:	d8000001 	stmdale	r0, {r0}
    1c74:	04000001 	streq	r0, [r0], #-1
    1c78:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1c7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c80:	00000000 	andeq	r0, r0, r0
    1c84:	0001c800 	andeq	ip, r1, r0, lsl #16
    1c88:	0001d500 	andeq	sp, r1, r0, lsl #10
    1c8c:	52000100 	andpl	r0, r0, #0, 2
    1c90:	000001d5 	ldrdeq	r0, [r0], -r5
    1c94:	000001d8 	ldrdeq	r0, [r0], -r8
    1c98:	01f30004 	mvnseq	r0, r4
    1c9c:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    1ca8:	00110000 	andseq	r0, r1, r0
    1cac:	00010000 	andeq	r0, r1, r0
    1cb0:	00001150 	andeq	r1, r0, r0, asr r1
    1cb4:	00004800 	andeq	r4, r0, r0, lsl #16
    1cb8:	f3000400 	vshl.u8	d0, d0, d0
    1cbc:	009f5001 	addseq	r5, pc, r1
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1cc8:	50000000 	andpl	r0, r0, r0
    1ccc:	01000000 	mrseq	r0, (UNDEF: 0)
    1cd0:	00505000 	subseq	r5, r0, r0
    1cd4:	00640000 	rsbeq	r0, r4, r0
    1cd8:	00040000 	andeq	r0, r4, r0
    1cdc:	9f5001f3 	svcls	0x005001f3
	...
    1cec:	0000002e 	andeq	r0, r0, lr, lsr #32
    1cf0:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    1cf4:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1cf8:	04000000 	streq	r0, [r0], #-0
    1cfc:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	00004e00 	andeq	r4, r0, r0, lsl #28
    1d0c:	00005400 	andeq	r5, r0, r0, lsl #8
    1d10:	30000200 	andcc	r0, r0, r0, lsl #4
    1d14:	0000549f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1d18:	00008000 	andeq	r8, r0, r0
    1d1c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1d28:	000000f4 	strdeq	r0, [r0], -r4
    1d2c:	00000164 	andeq	r0, r0, r4, ror #2
    1d30:	64500001 	ldrbvs	r0, [r0], #-1
    1d34:	aa000001 	bge	1d40 <__RW_SIZE__+0x17b8>
    1d38:	04000001 	streq	r0, [r0], #-1
    1d3c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d44:	00000000 	andeq	r0, r0, r0
    1d48:	0000f400 	andeq	pc, r0, r0, lsl #8
    1d4c:	00010400 	andeq	r0, r1, r0, lsl #8
    1d50:	51000100 	mrspl	r0, (UNDEF: 16)
    1d54:	00000104 	andeq	r0, r0, r4, lsl #2
    1d58:	0000013c 	andeq	r0, r0, ip, lsr r1
    1d5c:	01f30004 	mvnseq	r0, r4
    1d60:	013c9f51 	teqeq	ip, r1, asr pc
    1d64:	01480000 	mrseq	r0, (UNDEF: 72)
    1d68:	00010000 	andeq	r0, r1, r0
    1d6c:	00014851 	andeq	r4, r1, r1, asr r8
    1d70:	0001aa00 	andeq	sl, r1, r0, lsl #20
    1d74:	f3000400 	vshl.u8	d0, d0, d0
    1d78:	009f5101 	addseq	r5, pc, r1, lsl #2
    1d7c:	00000000 	andeq	r0, r0, r0
    1d80:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1d84:	3c000000 	stccc	0, cr0, [r0], {-0}
    1d88:	02000001 	andeq	r0, r0, #1
    1d8c:	009f4e00 	addseq	r4, pc, r0, lsl #28
	...
    1d98:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	00395000 	eorseq	r5, r9, r0
    1da4:	00b80000 	adcseq	r0, r8, r0
    1da8:	00040000 	andeq	r0, r4, r0
    1dac:	9f5001f3 	svcls	0x005001f3
	...
    1db8:	00000058 	andeq	r0, r0, r8, asr r0
    1dbc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1dc0:	93540006 	cmpls	r4, #6
    1dc4:	04935504 	ldreq	r5, [r3], #1284	; 0x504
	...
    1dd0:	0000005e 	andeq	r0, r0, lr, asr r0
    1dd4:	00000061 	andeq	r0, r0, r1, rrx
    1dd8:	61500001 	cmpvs	r0, r1
    1ddc:	8a000000 	bhi	1de4 <__RW_SIZE__+0x185c>
    1de0:	01000000 	mrseq	r0, (UNDEF: 0)
    1de4:	008a5600 	addeq	r5, sl, r0, lsl #12
    1de8:	008e0000 	addeq	r0, lr, r0
    1dec:	00080000 	andeq	r0, r8, r0
    1df0:	25340070 	ldrcs	r0, [r4, #-112]!	; 0xffffff90
    1df4:	9f220076 	svcls	0x00220076
    1df8:	0000008e 	andeq	r0, r0, lr, lsl #1
    1dfc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1e00:	00560001 	subseq	r0, r6, r1
    1e04:	00000000 	andeq	r0, r0, r0
    1e08:	8a000000 	bhi	1e10 <__RW_SIZE__+0x1888>
    1e0c:	92000000 	andls	r0, r0, #0
    1e10:	05000000 	streq	r0, [r0, #-0]
    1e14:	3f007000 	svccc	0x00007000
    1e18:	00929f1a 	addseq	r9, r2, sl, lsl pc
    1e1c:	00960000 	addseq	r0, r6, r0
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000050 	andeq	r0, r0, r0, asr r0
    1e28:	00000000 	andeq	r0, r0, r0
    1e2c:	0000f400 	andeq	pc, r0, r0, lsl #8
    1e30:	00010400 	andeq	r0, r1, r0, lsl #8
    1e34:	50000100 	andpl	r0, r0, r0, lsl #2
    1e38:	00000104 	andeq	r0, r0, r4, lsl #2
    1e3c:	0000011c 	andeq	r0, r0, ip, lsl r1
    1e40:	01700003 	cmneq	r0, r3
    1e44:	00011c9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    1e48:	00012000 	andeq	r2, r1, r0
    1e4c:	50000100 	andpl	r0, r0, r0, lsl #2
    1e50:	00000124 	andeq	r0, r0, r4, lsr #2
    1e54:	00000136 	andeq	r0, r0, r6, lsr r1
    1e58:	01700003 	cmneq	r0, r3
    1e5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e60:	00000000 	andeq	r0, r0, r0
    1e64:	00010400 	andeq	r0, r1, r0, lsl #8
    1e68:	00011c00 	andeq	r1, r1, r0, lsl #24
    1e6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1e70:	00000124 	andeq	r0, r0, r4, lsr #2
    1e74:	00000136 	andeq	r0, r0, r6, lsr r1
    1e78:	00540001 	subseq	r0, r4, r1
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    1e84:	5a000001 	bpl	1e90 <__RW_SIZE__+0x1908>
    1e88:	04000001 	streq	r0, [r0], #-1
    1e8c:	7dc09100 	stfvcp	f1, [r0]
    1e90:	00015a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    1e94:	00016000 	andeq	r6, r1, r0
    1e98:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1e9c:	00000160 	andeq	r0, r0, r0, ror #2
    1ea0:	00000178 	andeq	r0, r0, r8, ror r1
    1ea4:	01740003 	cmneq	r4, r3
    1ea8:	0001789f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    1eac:	00017c00 	andeq	r7, r1, r0, lsl #24
    1eb0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1eb4:	00000186 	andeq	r0, r0, r6, lsl #3
    1eb8:	00000198 	muleq	r0, r8, r1
    1ebc:	01740003 	cmneq	r4, r3
    1ec0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ec4:	00000000 	andeq	r0, r0, r0
    1ec8:	00016000 	andeq	r6, r1, r0
    1ecc:	00017800 	andeq	r7, r1, r0, lsl #16
    1ed0:	50000100 	andpl	r0, r0, r0, lsl #2
    1ed4:	00000186 	andeq	r0, r0, r6, lsl #3
    1ed8:	00000198 	muleq	r0, r8, r1
    1edc:	00500001 	subseq	r0, r0, r1
    1ee0:	00000000 	andeq	r0, r0, r0
    1ee4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    1ee8:	d8000001 	stmdale	r0, {r0}
    1eec:	01000001 	tsteq	r0, r1
    1ef0:	01d85000 	bicseq	r5, r8, r0
    1ef4:	01fc0000 	mvnseq	r0, r0
    1ef8:	00010000 	andeq	r0, r1, r0
    1efc:	0001fc56 	andeq	pc, r1, r6, asr ip	; <UNPREDICTABLE>
    1f00:	00020000 	andeq	r0, r2, r0
    1f04:	76000300 	strvc	r0, [r0], -r0, lsl #6
    1f08:	02009f01 	andeq	r9, r0, #1, 30
    1f0c:	02640000 	rsbeq	r0, r4, #0
    1f10:	00010000 	andeq	r0, r1, r0
    1f14:	00000056 	andeq	r0, r0, r6, asr r0
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	0001d000 	andeq	sp, r1, r0
    1f20:	0001d800 	andeq	sp, r1, r0, lsl #16
    1f24:	50000100 	andpl	r0, r0, r0, lsl #2
    1f28:	000001d8 	ldrdeq	r0, [r0], -r8
    1f2c:	00000264 	andeq	r0, r0, r4, ror #4
    1f30:	00570001 	subseq	r0, r7, r1
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	0a000000 	beq	1f40 <__RW_SIZE__+0x19b8>
    1f3c:	1c000002 	stcne	0, cr0, [r0], {2}
    1f40:	01000002 	tsteq	r0, r2
    1f44:	02205300 	eoreq	r5, r0, #0, 6
    1f48:	02320000 	eorseq	r0, r2, #0
    1f4c:	00010000 	andeq	r0, r1, r0
    1f50:	00000053 	andeq	r0, r0, r3, asr r0
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	00026800 	andeq	r6, r2, r0, lsl #16
    1f5c:	00027400 	andeq	r7, r2, r0, lsl #8
    1f60:	5d000100 	stfpls	f0, [r0, #-0]
    1f64:	00000274 	andeq	r0, r0, r4, ror r2
    1f68:	00000284 	andeq	r0, r0, r4, lsl #5
    1f6c:	49910003 	ldmibmi	r1, {r0, r1}
    1f70:	0002849f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    1f74:	00031e00 	andeq	r1, r3, r0, lsl #28
    1f78:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1f84:	00000268 	andeq	r0, r0, r8, ror #4
    1f88:	0000028a 	andeq	r0, r0, sl, lsl #5
    1f8c:	9f3a0002 	svcls	0x003a0002
    1f90:	0000028a 	andeq	r0, r0, sl, lsl #5
    1f94:	000002a6 	andeq	r0, r0, r6, lsr #5
    1f98:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
    1f9c:	0a000002 	beq	1fac <__RW_SIZE__+0x1a24>
    1fa0:	02000003 	andeq	r0, r0, #3
    1fa4:	0a9f3a00 	beq	fe7d07ac <MSP_BASE+0xde7cb7ac>
    1fa8:	1e000003 	cdpne	0, 0, cr0, cr0, cr3, {0}
    1fac:	01000003 	tsteq	r0, r3
    1fb0:	00005400 	andeq	r5, r0, r0, lsl #8
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	02680000 	rsbeq	r0, r8, #0
    1fbc:	02740000 	rsbseq	r0, r4, #0
    1fc0:	00020000 	andeq	r0, r2, r0
    1fc4:	02749f30 	rsbseq	r9, r4, #48, 30	; 0xc0
    1fc8:	02840000 	addeq	r0, r4, #0
    1fcc:	00020000 	andeq	r0, r2, r0
    1fd0:	02849f31 	addeq	r9, r4, #49, 30	; 0xc4
    1fd4:	031e0000 	tsteq	lr, #0
    1fd8:	00010000 	andeq	r0, r1, r0
    1fdc:	00000056 	andeq	r0, r0, r6, asr r0
    1fe0:	00000000 	andeq	r0, r0, r0
    1fe4:	00026800 	andeq	r6, r2, r0, lsl #16
    1fe8:	0002b600 	andeq	fp, r2, r0, lsl #12
    1fec:	30000200 	andcc	r0, r0, r0, lsl #4
    1ff0:	0002b69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    1ff4:	0002cc00 	andeq	ip, r2, r0, lsl #24
    1ff8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1ffc:	000002dc 	ldrdeq	r0, [r0], -ip
    2000:	000002e2 	andeq	r0, r0, r2, ror #5
    2004:	ec540001 	mrrc	0, 0, r0, r4, cr1
    2008:	10000002 	andne	r0, r0, r2
    200c:	02000003 	andeq	r0, r0, #3
    2010:	109f3000 	addsne	r3, pc, r0
    2014:	16000003 	strne	r0, [r0], -r3
    2018:	01000003 	tsteq	r0, r3
    201c:	03165000 	tsteq	r6, #0
    2020:	03180000 	tsteq	r8, #0
    2024:	00040000 	andeq	r0, r4, r0
    2028:	9f1f0070 	svcls	0x001f0070
    202c:	00000318 	andeq	r0, r0, r8, lsl r3
    2030:	0000031e 	andeq	r0, r0, lr, lsl r3
    2034:	9f300002 	svcls	0x00300002
	...
    2040:	00000296 	muleq	r0, r6, r2
    2044:	000002a2 	andeq	r0, r0, r2, lsr #5
    2048:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    204c:	f2000002 	vhadd.s8	d0, d0, d2
    2050:	03000002 	movweq	r0, #2
    2054:	9f7f7000 	svcls	0x007f7000
    2058:	000002f2 	strdeq	r0, [r0], -r2
    205c:	000002f8 	strdeq	r0, [r0], -r8
    2060:	18570001 	ldmdane	r7, {r0}^
    2064:	1c000003 	stcne	0, cr0, [r0], {3}
    2068:	01000003 	tsteq	r0, r3
    206c:	031c5000 	tsteq	ip, #0
    2070:	031e0000 	tsteq	lr, #0
    2074:	00010000 	andeq	r0, r1, r0
    2078:	00000057 	andeq	r0, r0, r7, asr r0
    207c:	00000000 	andeq	r0, r0, r0
    2080:	0002b600 	andeq	fp, r2, r0, lsl #12
    2084:	0002e200 	andeq	lr, r2, r0, lsl #4
    2088:	53000100 	movwpl	r0, #256	; 0x100
    208c:	000002ec 	andeq	r0, r0, ip, ror #5
    2090:	000002f8 	strdeq	r0, [r0], -r8
    2094:	9f300002 	svcls	0x00300002
	...
    20a0:	00000320 	andeq	r0, r0, r0, lsr #6
    20a4:	0000033e 	andeq	r0, r0, lr, lsr r3
    20a8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    20ac:	46000003 	strmi	r0, [r0], -r3
    20b0:	04000003 	streq	r0, [r0], #-3
    20b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    20b8:	0003469f 	muleq	r3, pc, r6	; <UNPREDICTABLE>
    20bc:	00034800 	andeq	r4, r3, r0, lsl #16
    20c0:	50000100 	andpl	r0, r0, r0, lsl #2
    20c4:	00000348 	andeq	r0, r0, r8, asr #6
    20c8:	00000362 	andeq	r0, r0, r2, ror #6
    20cc:	01f30004 	mvnseq	r0, r4
    20d0:	00009f50 	andeq	r9, r0, r0, asr pc
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	03400000 	movteq	r0, #0
    20dc:	03460000 	movteq	r0, #24576	; 0x6000
    20e0:	00030000 	andeq	r0, r3, r0
    20e4:	009f2508 	addseq	r2, pc, r8, lsl #10
    20e8:	00000000 	andeq	r0, r0, r0
    20ec:	Address 0x000020ec is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
       4:	080032f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, ip, sp}
	...
      10:	0000022a 	andeq	r0, r0, sl, lsr #4
      14:	00000358 	andeq	r0, r0, r8, asr r3
      18:	00000374 	andeq	r0, r0, r4, ror r3
      1c:	00000428 	andeq	r0, r0, r8, lsr #8
	...
      28:	0000044a 	andeq	r0, r0, sl, asr #8
      2c:	000005be 			; <UNDEFINED> instruction: 0x000005be
      30:	000005c6 	andeq	r0, r0, r6, asr #11
      34:	0000067e 	andeq	r0, r0, lr, ror r6
	...
      40:	00000466 	andeq	r0, r0, r6, ror #8
      44:	000005a8 	andeq	r0, r0, r8, lsr #11
      48:	000005c6 	andeq	r0, r0, r6, asr #11
      4c:	0000067e 	andeq	r0, r0, lr, ror r6
	...
      58:	00000194 	muleq	r0, r4, r1
      5c:	000001a0 	andeq	r0, r0, r0, lsr #3
      60:	000001ac 	andeq	r0, r0, ip, lsr #3
      64:	000001ae 	andeq	r0, r0, lr, lsr #3
	...
      70:	000001a0 	andeq	r0, r0, r0, lsr #3
      74:	000001a4 	andeq	r0, r0, r4, lsr #3
      78:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
      7c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
	...
      88:	000001a4 	andeq	r0, r0, r4, lsr #3
      8c:	000001a8 	andeq	r0, r0, r8, lsr #3
      90:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
      94:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
	...
      a0:	0000020e 	andeq	r0, r0, lr, lsl #4
      a4:	00000212 	andeq	r0, r0, r2, lsl r2
      a8:	00000226 	andeq	r0, r0, r6, lsr #4
      ac:	0000022a 	andeq	r0, r0, sl, lsr #4
      b0:	00000232 	andeq	r0, r0, r2, lsr r2
      b4:	00000236 	andeq	r0, r0, r6, lsr r2
      b8:	0000025a 	andeq	r0, r0, sl, asr r2
      bc:	0000025e 	andeq	r0, r0, lr, asr r2
	...
      c8:	0000024a 	andeq	r0, r0, sl, asr #4
      cc:	0000024e 	andeq	r0, r0, lr, asr #4
      d0:	0000025e 	andeq	r0, r0, lr, asr r2
      d4:	00000262 	andeq	r0, r0, r2, ror #4
	...
      e0:	00000252 	andeq	r0, r0, r2, asr r2
      e4:	00000256 	andeq	r0, r0, r6, asr r2
      e8:	00000262 	andeq	r0, r0, r2, ror #4
      ec:	00000266 	andeq	r0, r0, r6, ror #4
	...
      f8:	000000d4 	ldrdeq	r0, [r0], -r4
      fc:	000000d8 	ldrdeq	r0, [r0], -r8
     100:	000000da 	ldrdeq	r0, [r0], -sl
     104:	000000e2 	andeq	r0, r0, r2, ror #1
     108:	000000e6 	andeq	r0, r0, r6, ror #1
     10c:	000000ea 	andeq	r0, r0, sl, ror #1
	...
     118:	00000046 	andeq	r0, r0, r6, asr #32
     11c:	00000098 	muleq	r0, r8, r0
     120:	0000009c 	muleq	r0, ip, r0
     124:	000000a2 	andeq	r0, r0, r2, lsr #1
	...
     130:	00000060 	andeq	r0, r0, r0, rrx
     134:	00000068 	andeq	r0, r0, r8, rrx
     138:	0000006e 	andeq	r0, r0, lr, rrx
     13c:	0000008e 	andeq	r0, r0, lr, lsl #1
	...
     148:	00000098 	muleq	r0, r8, r0
     14c:	0000009c 	muleq	r0, ip, r0
     150:	000000a2 	andeq	r0, r0, r2, lsr #1
     154:	000000e0 	andeq	r0, r0, r0, ror #1
	...
     160:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     164:	000000b2 	strheq	r0, [r0], -r2
     168:	000000b8 	strheq	r0, [r0], -r8
     16c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
     178:	00000104 	andeq	r0, r0, r4, lsl #2
     17c:	00000108 	andeq	r0, r0, r8, lsl #2
     180:	0000010c 	andeq	r0, r0, ip, lsl #2
     184:	00000110 	andeq	r0, r0, r0, lsl r1
     188:	00000114 	andeq	r0, r0, r4, lsl r1
     18c:	00000134 	andeq	r0, r0, r4, lsr r1
	...
     198:	00000170 	andeq	r0, r0, r0, ror r1
     19c:	00000172 	andeq	r0, r0, r2, ror r1
     1a0:	00000178 	andeq	r0, r0, r8, ror r1
     1a4:	00000194 	muleq	r0, r4, r1
	...
     1b0:	0000019e 	muleq	r0, lr, r1
     1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
     1b8:	000001a6 	andeq	r0, r0, r6, lsr #3
     1bc:	000001c2 	andeq	r0, r0, r2, asr #3
	...
     1c8:	000001e2 	andeq	r0, r0, r2, ror #3
     1cc:	000001ea 	andeq	r0, r0, sl, ror #3
     1d0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d4:	00000208 	andeq	r0, r0, r8, lsl #4
	...
     1e0:	00000236 	andeq	r0, r0, r6, lsr r2
     1e4:	0000023e 	andeq	r0, r0, lr, lsr r2
     1e8:	00000244 	andeq	r0, r0, r4, asr #4
     1ec:	0000025c 	andeq	r0, r0, ip, asr r2
	...
     1f8:	000002a0 	andeq	r0, r0, r0, lsr #5
     1fc:	000002a4 	andeq	r0, r0, r4, lsr #5
     200:	000002a8 	andeq	r0, r0, r8, lsr #5
     204:	00000340 	andeq	r0, r0, r0, asr #6
	...
     210:	000002a0 	andeq	r0, r0, r0, lsr #5
     214:	000002a4 	andeq	r0, r0, r4, lsr #5
     218:	000002a8 	andeq	r0, r0, r8, lsr #5
     21c:	000002f8 	strdeq	r0, [r0], -r8
     220:	000002fc 	strdeq	r0, [r0], -ip
     224:	00000302 	andeq	r0, r0, r2, lsl #6
	...
     230:	000002be 			; <UNDEFINED> instruction: 0x000002be
     234:	000002c6 	andeq	r0, r0, r6, asr #5
     238:	000002ca 	andeq	r0, r0, sl, asr #5
     23c:	000002cc 	andeq	r0, r0, ip, asr #5
     240:	000002ce 	andeq	r0, r0, lr, asr #5
     244:	000002ee 	andeq	r0, r0, lr, ror #5
	...
     250:	000002f8 	strdeq	r0, [r0], -r8
     254:	000002fc 	strdeq	r0, [r0], -ip
     258:	00000302 	andeq	r0, r0, r2, lsl #6
     25c:	00000340 	andeq	r0, r0, r0, asr #6
	...
     268:	00000310 	andeq	r0, r0, r0, lsl r3
     26c:	00000312 	andeq	r0, r0, r2, lsl r3
     270:	00000318 	andeq	r0, r0, r8, lsl r3
     274:	00000330 	andeq	r0, r0, r0, lsr r3
	...
     280:	0000034c 	andeq	r0, r0, ip, asr #6
     284:	00000350 	andeq	r0, r0, r0, asr r3
     288:	00000354 	andeq	r0, r0, r4, asr r3
     28c:	000003de 	ldrdeq	r0, [r0], -lr
	...
     298:	0000034c 	andeq	r0, r0, ip, asr #6
     29c:	00000350 	andeq	r0, r0, r0, asr r3
     2a0:	00000354 	andeq	r0, r0, r4, asr r3
     2a4:	000003a4 	andeq	r0, r0, r4, lsr #7
     2a8:	000003a8 	andeq	r0, r0, r8, lsr #7
     2ac:	000003ae 	andeq	r0, r0, lr, lsr #7
	...
     2b8:	0000036a 	andeq	r0, r0, sl, ror #6
     2bc:	00000372 	andeq	r0, r0, r2, ror r3
     2c0:	00000376 	andeq	r0, r0, r6, ror r3
     2c4:	00000378 	andeq	r0, r0, r8, ror r3
     2c8:	0000037a 	andeq	r0, r0, sl, ror r3
     2cc:	0000039a 	muleq	r0, sl, r3
	...
     2d8:	000003a4 	andeq	r0, r0, r4, lsr #7
     2dc:	000003a8 	andeq	r0, r0, r8, lsr #7
     2e0:	000003ae 	andeq	r0, r0, lr, lsr #7
     2e4:	000003de 	ldrdeq	r0, [r0], -lr
	...
     2f0:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     2f4:	000003be 			; <UNDEFINED> instruction: 0x000003be
     2f8:	000003c4 	andeq	r0, r0, r4, asr #7
     2fc:	000003de 	ldrdeq	r0, [r0], -lr
	...
     308:	000003e4 	andeq	r0, r0, r4, ror #7
     30c:	000003e8 	andeq	r0, r0, r8, ror #7
     310:	000003ec 	andeq	r0, r0, ip, ror #7
     314:	00000476 	andeq	r0, r0, r6, ror r4
	...
     320:	000003e4 	andeq	r0, r0, r4, ror #7
     324:	000003e8 	andeq	r0, r0, r8, ror #7
     328:	000003ec 	andeq	r0, r0, ip, ror #7
     32c:	0000043c 	andeq	r0, r0, ip, lsr r4
     330:	00000440 	andeq	r0, r0, r0, asr #8
     334:	00000446 	andeq	r0, r0, r6, asr #8
	...
     340:	00000402 	andeq	r0, r0, r2, lsl #8
     344:	0000040a 	andeq	r0, r0, sl, lsl #8
     348:	0000040e 	andeq	r0, r0, lr, lsl #8
     34c:	00000410 	andeq	r0, r0, r0, lsl r4
     350:	00000412 	andeq	r0, r0, r2, lsl r4
     354:	00000432 	andeq	r0, r0, r2, lsr r4
	...
     360:	0000043c 	andeq	r0, r0, ip, lsr r4
     364:	00000440 	andeq	r0, r0, r0, asr #8
     368:	00000446 	andeq	r0, r0, r6, asr #8
     36c:	00000476 	andeq	r0, r0, r6, ror r4
	...
     378:	00000454 	andeq	r0, r0, r4, asr r4
     37c:	00000456 	andeq	r0, r0, r6, asr r4
     380:	0000045c 	andeq	r0, r0, ip, asr r4
     384:	00000476 	andeq	r0, r0, r6, ror r4
	...
     390:	0000047c 	andeq	r0, r0, ip, ror r4
     394:	00000480 	andeq	r0, r0, r0, lsl #9
     398:	00000484 	andeq	r0, r0, r4, lsl #9
     39c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     3a8:	0000047c 	andeq	r0, r0, ip, ror r4
     3ac:	00000480 	andeq	r0, r0, r0, lsl #9
     3b0:	00000484 	andeq	r0, r0, r4, lsl #9
     3b4:	000004d4 	ldrdeq	r0, [r0], -r4
     3b8:	000004d8 	ldrdeq	r0, [r0], -r8
     3bc:	000004de 	ldrdeq	r0, [r0], -lr
	...
     3c8:	0000049a 	muleq	r0, sl, r4
     3cc:	000004a2 	andeq	r0, r0, r2, lsr #9
     3d0:	000004a6 	andeq	r0, r0, r6, lsr #9
     3d4:	000004a8 	andeq	r0, r0, r8, lsr #9
     3d8:	000004aa 	andeq	r0, r0, sl, lsr #9
     3dc:	000004ca 	andeq	r0, r0, sl, asr #9
	...
     3e8:	000004d4 	ldrdeq	r0, [r0], -r4
     3ec:	000004d8 	ldrdeq	r0, [r0], -r8
     3f0:	000004de 	ldrdeq	r0, [r0], -lr
     3f4:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     400:	000004ec 	andeq	r0, r0, ip, ror #9
     404:	000004ee 	andeq	r0, r0, lr, ror #9
     408:	000004f4 	strdeq	r0, [r0], -r4
     40c:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
     418:	00000514 	andeq	r0, r0, r4, lsl r5
     41c:	00000518 	andeq	r0, r0, r8, lsl r5
     420:	0000051c 	andeq	r0, r0, ip, lsl r5
     424:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     430:	00000514 	andeq	r0, r0, r4, lsl r5
     434:	00000518 	andeq	r0, r0, r8, lsl r5
     438:	0000051c 	andeq	r0, r0, ip, lsl r5
     43c:	0000056c 	andeq	r0, r0, ip, ror #10
     440:	00000570 	andeq	r0, r0, r0, ror r5
     444:	00000576 	andeq	r0, r0, r6, ror r5
	...
     450:	00000532 	andeq	r0, r0, r2, lsr r5
     454:	0000053a 	andeq	r0, r0, sl, lsr r5
     458:	0000053e 	andeq	r0, r0, lr, lsr r5
     45c:	00000540 	andeq	r0, r0, r0, asr #10
     460:	00000542 	andeq	r0, r0, r2, asr #10
     464:	00000562 	andeq	r0, r0, r2, ror #10
	...
     470:	0000056c 	andeq	r0, r0, ip, ror #10
     474:	00000570 	andeq	r0, r0, r0, ror r5
     478:	00000576 	andeq	r0, r0, r6, ror r5
     47c:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     488:	00000584 	andeq	r0, r0, r4, lsl #11
     48c:	00000586 	andeq	r0, r0, r6, lsl #11
     490:	0000058c 	andeq	r0, r0, ip, lsl #11
     494:	000005a6 	andeq	r0, r0, r6, lsr #11
	...
     4a0:	000005a8 	andeq	r0, r0, r8, lsr #11
     4a4:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
     4a8:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     4ac:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     4b0:	000005be 			; <UNDEFINED> instruction: 0x000005be
     4b4:	000005c2 	andeq	r0, r0, r2, asr #11
     4b8:	000005c4 	andeq	r0, r0, r4, asr #11
     4bc:	00000606 	andeq	r0, r0, r6, lsl #12
	...
     4c8:	000005cc 	andeq	r0, r0, ip, asr #11
     4cc:	000005d6 	ldrdeq	r0, [r0], -r6
     4d0:	000005dc 	ldrdeq	r0, [r0], -ip
     4d4:	000005f4 	strdeq	r0, [r0], -r4
	...
     4e0:	0000060a 	andeq	r0, r0, sl, lsl #12
     4e4:	00000614 	andeq	r0, r0, r4, lsl r6
     4e8:	00000618 	andeq	r0, r0, r8, lsl r6
     4ec:	0000061c 	andeq	r0, r0, ip, lsl r6
     4f0:	00000620 	andeq	r0, r0, r0, lsr #12
     4f4:	00000624 	andeq	r0, r0, r4, lsr #12
     4f8:	00000626 	andeq	r0, r0, r6, lsr #12
     4fc:	00000670 	andeq	r0, r0, r0, ror r6
     500:	00000674 	andeq	r0, r0, r4, ror r6
     504:	0000067c 	andeq	r0, r0, ip, ror r6
	...
     510:	00000632 	andeq	r0, r0, r2, lsr r6
     514:	0000063c 	andeq	r0, r0, ip, lsr r6
     518:	00000644 	andeq	r0, r0, r4, asr #12
     51c:	00000664 	andeq	r0, r0, r4, ror #12
	...
     528:	00000670 	andeq	r0, r0, r0, ror r6
     52c:	00000674 	andeq	r0, r0, r4, ror r6
     530:	0000067c 	andeq	r0, r0, ip, ror r6
     534:	0000068e 	andeq	r0, r0, lr, lsl #13
     538:	00000692 	muleq	r0, r2, r6
     53c:	000006c6 	andeq	r0, r0, r6, asr #13
     540:	000006ca 	andeq	r0, r0, sl, asr #13
     544:	000006d2 	ldrdeq	r0, [r0], -r2
	...
     550:	000006c6 	andeq	r0, r0, r6, asr #13
     554:	000006ca 	andeq	r0, r0, sl, asr #13
     558:	000006d2 	ldrdeq	r0, [r0], -r2
     55c:	00000716 	andeq	r0, r0, r6, lsl r7
     560:	0000071a 	andeq	r0, r0, sl, lsl r7
     564:	00000720 	andeq	r0, r0, r0, lsr #14
	...
     570:	000006e4 	andeq	r0, r0, r4, ror #13
     574:	000006e6 	andeq	r0, r0, r6, ror #13
     578:	000006ec 	andeq	r0, r0, ip, ror #13
     57c:	0000070c 	andeq	r0, r0, ip, lsl #14
	...
     588:	00000716 	andeq	r0, r0, r6, lsl r7
     58c:	0000071a 	andeq	r0, r0, sl, lsl r7
     590:	00000720 	andeq	r0, r0, r0, lsr #14
     594:	0000072e 	andeq	r0, r0, lr, lsr #14
     598:	00000730 	andeq	r0, r0, r0, lsr r7
     59c:	00000760 	andeq	r0, r0, r0, ror #14
     5a0:	00000764 	andeq	r0, r0, r4, ror #14
     5a4:	0000076a 	andeq	r0, r0, sl, ror #14
	...
     5b0:	00000760 	andeq	r0, r0, r0, ror #14
     5b4:	00000764 	andeq	r0, r0, r4, ror #14
     5b8:	0000076a 	andeq	r0, r0, sl, ror #14
     5bc:	000007aa 	andeq	r0, r0, sl, lsr #15
     5c0:	000007ae 	andeq	r0, r0, lr, lsr #15
     5c4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
	...
     5d0:	00000778 	andeq	r0, r0, r8, ror r7
     5d4:	0000077a 	andeq	r0, r0, sl, ror r7
     5d8:	00000780 	andeq	r0, r0, r0, lsl #15
     5dc:	000007a0 	andeq	r0, r0, r0, lsr #15
	...
     5e8:	000007aa 	andeq	r0, r0, sl, lsr #15
     5ec:	000007ae 	andeq	r0, r0, lr, lsr #15
     5f0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     5f4:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
     5f8:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     5fc:	000007f6 	strdeq	r0, [r0], -r6
     600:	000007fa 	strdeq	r0, [r0], -sl
     604:	00000800 	andeq	r0, r0, r0, lsl #16
	...
     610:	000007c4 	andeq	r0, r0, r4, asr #15
     614:	000007c6 	andeq	r0, r0, r6, asr #15
     618:	000007cc 	andeq	r0, r0, ip, asr #15
     61c:	000007ec 	andeq	r0, r0, ip, ror #15
	...
     628:	000007f6 	strdeq	r0, [r0], -r6
     62c:	000007fa 	strdeq	r0, [r0], -sl
     630:	00000800 	andeq	r0, r0, r0, lsl #16
     634:	0000080e 	andeq	r0, r0, lr, lsl #16
     638:	00000810 	andeq	r0, r0, r0, lsl r8
     63c:	00000840 	andeq	r0, r0, r0, asr #16
     640:	00000844 	andeq	r0, r0, r4, asr #16
     644:	0000084a 	andeq	r0, r0, sl, asr #16
	...
     650:	00000840 	andeq	r0, r0, r0, asr #16
     654:	00000844 	andeq	r0, r0, r4, asr #16
     658:	0000084a 	andeq	r0, r0, sl, asr #16
     65c:	0000088a 	andeq	r0, r0, sl, lsl #17
     660:	0000088e 	andeq	r0, r0, lr, lsl #17
     664:	00000894 	muleq	r0, r4, r8
	...
     670:	00000858 	andeq	r0, r0, r8, asr r8
     674:	0000085a 	andeq	r0, r0, sl, asr r8
     678:	00000860 	andeq	r0, r0, r0, ror #16
     67c:	00000880 	andeq	r0, r0, r0, lsl #17
	...
     688:	0000088a 	andeq	r0, r0, sl, lsl #17
     68c:	0000088e 	andeq	r0, r0, lr, lsl #17
     690:	00000894 	muleq	r0, r4, r8
     694:	000008a2 	andeq	r0, r0, r2, lsr #17
     698:	000008a4 	andeq	r0, r0, r4, lsr #17
     69c:	000008d4 	ldrdeq	r0, [r0], -r4
     6a0:	000008d8 	ldrdeq	r0, [r0], -r8
     6a4:	000008de 	ldrdeq	r0, [r0], -lr
	...
     6b0:	000008d4 	ldrdeq	r0, [r0], -r4
     6b4:	000008d8 	ldrdeq	r0, [r0], -r8
     6b8:	000008de 	ldrdeq	r0, [r0], -lr
     6bc:	0000091e 	andeq	r0, r0, lr, lsl r9
     6c0:	00000922 	andeq	r0, r0, r2, lsr #18
     6c4:	00000928 	andeq	r0, r0, r8, lsr #18
	...
     6d0:	000008ec 	andeq	r0, r0, ip, ror #17
     6d4:	000008ee 	andeq	r0, r0, lr, ror #17
     6d8:	000008f4 	strdeq	r0, [r0], -r4
     6dc:	00000914 	andeq	r0, r0, r4, lsl r9
	...
     6e8:	0000091e 	andeq	r0, r0, lr, lsl r9
     6ec:	00000922 	andeq	r0, r0, r2, lsr #18
     6f0:	00000928 	andeq	r0, r0, r8, lsr #18
     6f4:	00000968 	andeq	r0, r0, r8, ror #18
	...
     700:	0000091e 	andeq	r0, r0, lr, lsl r9
     704:	00000922 	andeq	r0, r0, r2, lsr #18
     708:	00000928 	andeq	r0, r0, r8, lsr #18
     70c:	0000092a 	andeq	r0, r0, sl, lsr #18
     710:	0000092c 	andeq	r0, r0, ip, lsr #18
     714:	00000968 	andeq	r0, r0, r8, ror #18
	...
     720:	00000938 	andeq	r0, r0, r8, lsr r9
     724:	0000093a 	andeq	r0, r0, sl, lsr r9
     728:	00000940 	andeq	r0, r0, r0, asr #18
     72c:	00000958 	andeq	r0, r0, r8, asr r9
	...
     738:	00000988 	andeq	r0, r0, r8, lsl #19
     73c:	000009a8 	andeq	r0, r0, r8, lsr #19
     740:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     744:	000009ea 	andeq	r0, r0, sl, ror #19
     748:	000009ee 	andeq	r0, r0, lr, ror #19
     74c:	000009f2 	strdeq	r0, [r0], -r2
     750:	000009f4 	strdeq	r0, [r0], -r4
     754:	000009f6 	strdeq	r0, [r0], -r6
	...
     760:	00000990 	muleq	r0, r0, r9
     764:	00000994 	muleq	r0, r4, r9
     768:	0000099c 	muleq	r0, ip, r9
     76c:	000009a8 	andeq	r0, r0, r8, lsr #19
     770:	000009c0 	andeq	r0, r0, r0, asr #19
     774:	000009d8 	ldrdeq	r0, [r0], -r8
	...
     780:	00000a26 	andeq	r0, r0, r6, lsr #20
     784:	00000a30 	andeq	r0, r0, r0, lsr sl
     788:	00000a34 	andeq	r0, r0, r4, lsr sl
     78c:	00000a38 	andeq	r0, r0, r8, lsr sl
     790:	00000a3c 	andeq	r0, r0, ip, lsr sl
     794:	00000a40 	andeq	r0, r0, r0, asr #20
     798:	00000a42 	andeq	r0, r0, r2, asr #20
     79c:	00000a84 	andeq	r0, r0, r4, lsl #21
     7a0:	00000a88 	andeq	r0, r0, r8, lsl #21
     7a4:	00000a8e 	andeq	r0, r0, lr, lsl #21
	...
     7b0:	00000a4a 	andeq	r0, r0, sl, asr #20
     7b4:	00000a54 	andeq	r0, r0, r4, asr sl
     7b8:	00000a5a 	andeq	r0, r0, sl, asr sl
     7bc:	00000a7a 	andeq	r0, r0, sl, ror sl
	...
     7c8:	00000a84 	andeq	r0, r0, r4, lsl #21
     7cc:	00000a88 	andeq	r0, r0, r8, lsl #21
     7d0:	00000a8e 	andeq	r0, r0, lr, lsl #21
     7d4:	00000a9c 	muleq	r0, ip, sl
     7d8:	00000a9e 	muleq	r0, lr, sl
     7dc:	00000ace 	andeq	r0, r0, lr, asr #21
     7e0:	00000ad2 	ldrdeq	r0, [r0], -r2
     7e4:	00000ad8 	ldrdeq	r0, [r0], -r8
	...
     7f0:	00000ace 	andeq	r0, r0, lr, asr #21
     7f4:	00000ad2 	ldrdeq	r0, [r0], -r2
     7f8:	00000ad8 	ldrdeq	r0, [r0], -r8
     7fc:	00000b18 	andeq	r0, r0, r8, lsl fp
     800:	00000b1c 	andeq	r0, r0, ip, lsl fp
     804:	00000b22 	andeq	r0, r0, r2, lsr #22
	...
     810:	00000ae6 	andeq	r0, r0, r6, ror #21
     814:	00000ae8 	andeq	r0, r0, r8, ror #21
     818:	00000aee 	andeq	r0, r0, lr, ror #21
     81c:	00000b0e 	andeq	r0, r0, lr, lsl #22
	...
     828:	00000b18 	andeq	r0, r0, r8, lsl fp
     82c:	00000b1c 	andeq	r0, r0, ip, lsl fp
     830:	00000b22 	andeq	r0, r0, r2, lsr #22
     834:	00000b60 	andeq	r0, r0, r0, ror #22
     838:	00000b64 	andeq	r0, r0, r4, ror #22
     83c:	00000b6a 	andeq	r0, r0, sl, ror #22
	...
     848:	00000b30 	andeq	r0, r0, r0, lsr fp
     84c:	00000b32 	andeq	r0, r0, r2, lsr fp
     850:	00000b38 	andeq	r0, r0, r8, lsr fp
     854:	00000b56 	andeq	r0, r0, r6, asr fp
	...
     860:	00000b60 	andeq	r0, r0, r0, ror #22
     864:	00000b64 	andeq	r0, r0, r4, ror #22
     868:	00000b6a 	andeq	r0, r0, sl, ror #22
     86c:	00000ba8 	andeq	r0, r0, r8, lsr #23
     870:	00000bac 	andeq	r0, r0, ip, lsr #23
     874:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
	...
     880:	00000b78 	andeq	r0, r0, r8, ror fp
     884:	00000b7a 	andeq	r0, r0, sl, ror fp
     888:	00000b80 	andeq	r0, r0, r0, lsl #23
     88c:	00000b9e 	muleq	r0, lr, fp
	...
     898:	00000ba8 	andeq	r0, r0, r8, lsr #23
     89c:	00000bac 	andeq	r0, r0, ip, lsr #23
     8a0:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
     8a4:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
     8a8:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
     8ac:	00000bf4 	strdeq	r0, [r0], -r4
     8b0:	00000bf8 	strdeq	r0, [r0], -r8
     8b4:	00000bfe 	strdeq	r0, [r0], -lr
	...
     8c0:	00000bc2 	andeq	r0, r0, r2, asr #23
     8c4:	00000bc4 	andeq	r0, r0, r4, asr #23
     8c8:	00000bca 	andeq	r0, r0, sl, asr #23
     8cc:	00000bea 	andeq	r0, r0, sl, ror #23
	...
     8d8:	00000bf4 	strdeq	r0, [r0], -r4
     8dc:	00000bf8 	strdeq	r0, [r0], -r8
     8e0:	00000bfe 	strdeq	r0, [r0], -lr
     8e4:	00000c0c 	andeq	r0, r0, ip, lsl #24
     8e8:	00000c0e 	andeq	r0, r0, lr, lsl #24
     8ec:	00000c3e 	andeq	r0, r0, lr, lsr ip
     8f0:	00000c42 	andeq	r0, r0, r2, asr #24
     8f4:	00000c48 	andeq	r0, r0, r8, asr #24
	...
     900:	00000c3e 	andeq	r0, r0, lr, lsr ip
     904:	00000c42 	andeq	r0, r0, r2, asr #24
     908:	00000c48 	andeq	r0, r0, r8, asr #24
     90c:	00000c88 	andeq	r0, r0, r8, lsl #25
     910:	00000c8c 	andeq	r0, r0, ip, lsl #25
     914:	00000c92 	muleq	r0, r2, ip
	...
     920:	00000c56 	andeq	r0, r0, r6, asr ip
     924:	00000c58 	andeq	r0, r0, r8, asr ip
     928:	00000c5e 	andeq	r0, r0, lr, asr ip
     92c:	00000c7e 	andeq	r0, r0, lr, ror ip
	...
     938:	00000c88 	andeq	r0, r0, r8, lsl #25
     93c:	00000c8c 	andeq	r0, r0, ip, lsl #25
     940:	00000c92 	muleq	r0, r2, ip
     944:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     948:	00000cd4 	ldrdeq	r0, [r0], -r4
     94c:	00000cda 	ldrdeq	r0, [r0], -sl
	...
     958:	00000ca0 	andeq	r0, r0, r0, lsr #25
     95c:	00000ca2 	andeq	r0, r0, r2, lsr #25
     960:	00000ca8 	andeq	r0, r0, r8, lsr #25
     964:	00000cc6 	andeq	r0, r0, r6, asr #25
	...
     970:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     974:	00000cd4 	ldrdeq	r0, [r0], -r4
     978:	00000cda 	ldrdeq	r0, [r0], -sl
     97c:	00000d18 	andeq	r0, r0, r8, lsl sp
     980:	00000d1c 	andeq	r0, r0, ip, lsl sp
     984:	00000d22 	andeq	r0, r0, r2, lsr #26
	...
     990:	00000ce8 	andeq	r0, r0, r8, ror #25
     994:	00000cea 	andeq	r0, r0, sl, ror #25
     998:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     99c:	00000d0e 	andeq	r0, r0, lr, lsl #26
	...
     9a8:	00000d18 	andeq	r0, r0, r8, lsl sp
     9ac:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9b0:	00000d22 	andeq	r0, r0, r2, lsr #26
     9b4:	00000d62 	andeq	r0, r0, r2, ror #26
	...
     9c0:	00000d18 	andeq	r0, r0, r8, lsl sp
     9c4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9c8:	00000d22 	andeq	r0, r0, r2, lsr #26
     9cc:	00000d24 	andeq	r0, r0, r4, lsr #26
     9d0:	00000d26 	andeq	r0, r0, r6, lsr #26
     9d4:	00000d62 	andeq	r0, r0, r2, ror #26
	...
     9e0:	00000d32 	andeq	r0, r0, r2, lsr sp
     9e4:	00000d34 	andeq	r0, r0, r4, lsr sp
     9e8:	00000d3a 	andeq	r0, r0, sl, lsr sp
     9ec:	00000d52 	andeq	r0, r0, r2, asr sp
	...
     9f8:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
     9fc:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
     a00:	00000dc0 	andeq	r0, r0, r0, asr #27
     a04:	00000dd6 	ldrdeq	r0, [r0], -r6
	...
     a10:	00000e70 	andeq	r0, r0, r0, ror lr
     a14:	00000e7a 	andeq	r0, r0, sl, ror lr
     a18:	00000e7e 	andeq	r0, r0, lr, ror lr
     a1c:	00000e94 	muleq	r0, r4, lr
	...
     a28:	00000ebe 			; <UNDEFINED> instruction: 0x00000ebe
     a2c:	00000f04 	andeq	r0, r0, r4, lsl #30
     a30:	00000f08 	andeq	r0, r0, r8, lsl #30
     a34:	00000f10 	andeq	r0, r0, r0, lsl pc
	...
     a40:	00000f04 	andeq	r0, r0, r4, lsl #30
     a44:	00000f08 	andeq	r0, r0, r8, lsl #30
     a48:	00000f10 	andeq	r0, r0, r0, lsl pc
     a4c:	00000f22 	andeq	r0, r0, r2, lsr #30
     a50:	00000f24 	andeq	r0, r0, r4, lsr #30
     a54:	00000f30 	andeq	r0, r0, r0, lsr pc
     a58:	00000f32 	andeq	r0, r0, r2, lsr pc
     a5c:	00000f3e 	andeq	r0, r0, lr, lsr pc
     a60:	00000f42 	andeq	r0, r0, r2, asr #30
     a64:	00000f4c 	andeq	r0, r0, ip, asr #30
	...
     a70:	00000f30 	andeq	r0, r0, r0, lsr pc
     a74:	00000f32 	andeq	r0, r0, r2, lsr pc
     a78:	00000f3e 	andeq	r0, r0, lr, lsr pc
     a7c:	00000f42 	andeq	r0, r0, r2, asr #30
     a80:	00000f4e 	andeq	r0, r0, lr, asr #30
     a84:	00000f52 	andeq	r0, r0, r2, asr pc
     a88:	00000f58 	andeq	r0, r0, r8, asr pc
     a8c:	00000fa2 	andeq	r0, r0, r2, lsr #31
	...
     a98:	00000f30 	andeq	r0, r0, r0, lsr pc
     a9c:	00000f32 	andeq	r0, r0, r2, lsr pc
     aa0:	00000f3e 	andeq	r0, r0, lr, lsr pc
     aa4:	00000f42 	andeq	r0, r0, r2, asr #30
     aa8:	00000f4e 	andeq	r0, r0, lr, asr #30
     aac:	00000f52 	andeq	r0, r0, r2, asr pc
     ab0:	00000f60 	andeq	r0, r0, r0, ror #30
     ab4:	00000f74 	andeq	r0, r0, r4, ror pc
	...
     ac0:	00000f7e 	andeq	r0, r0, lr, ror pc
     ac4:	00000f80 	andeq	r0, r0, r0, lsl #31
     ac8:	00000f86 	andeq	r0, r0, r6, lsl #31
     acc:	00000fa2 	andeq	r0, r0, r2, lsr #31
	...
     ad8:	00000fa2 	andeq	r0, r0, r2, lsr #31
     adc:	00000ffc 	strdeq	r0, [r0], -ip
     ae0:	00001000 	andeq	r1, r0, r0
     ae4:	00001006 	andeq	r1, r0, r6
	...
     af0:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
     af4:	00000fc4 	andeq	r0, r0, r4, asr #31
     af8:	00000fc8 	andeq	r0, r0, r8, asr #31
     afc:	00000fca 	andeq	r0, r0, sl, asr #31
     b00:	00000fcc 	andeq	r0, r0, ip, asr #31
     b04:	00000ff2 	strdeq	r0, [r0], -r2
	...
     b10:	00000ffc 	strdeq	r0, [r0], -ip
     b14:	00001000 	andeq	r1, r0, r0
     b18:	00001006 	andeq	r1, r0, r6
     b1c:	00001044 	andeq	r1, r0, r4, asr #32
     b20:	00001048 	andeq	r1, r0, r8, asr #32
     b24:	0000104e 	andeq	r1, r0, lr, asr #32
	...
     b30:	00001014 	andeq	r1, r0, r4, lsl r0
     b34:	00001016 	andeq	r1, r0, r6, lsl r0
     b38:	0000101c 	andeq	r1, r0, ip, lsl r0
     b3c:	0000103a 	andeq	r1, r0, sl, lsr r0
	...
     b48:	00001044 	andeq	r1, r0, r4, asr #32
     b4c:	00001048 	andeq	r1, r0, r8, asr #32
     b50:	0000104e 	andeq	r1, r0, lr, asr #32
     b54:	0000108e 	andeq	r1, r0, lr, lsl #1
     b58:	00001092 	muleq	r0, r2, r0
     b5c:	00001098 	muleq	r0, r8, r0
	...
     b68:	0000105c 	andeq	r1, r0, ip, asr r0
     b6c:	0000105e 	andeq	r1, r0, lr, asr r0
     b70:	00001064 	andeq	r1, r0, r4, rrx
     b74:	00001084 	andeq	r1, r0, r4, lsl #1
	...
     b80:	0000108e 	andeq	r1, r0, lr, lsl #1
     b84:	00001092 	muleq	r0, r2, r0
     b88:	00001098 	muleq	r0, r8, r0
     b8c:	000010d8 	ldrdeq	r1, [r0], -r8
     b90:	000010dc 	ldrdeq	r1, [r0], -ip
     b94:	000010e2 	andeq	r1, r0, r2, ror #1
	...
     ba0:	000010a6 	andeq	r1, r0, r6, lsr #1
     ba4:	000010a8 	andeq	r1, r0, r8, lsr #1
     ba8:	000010ae 	andeq	r1, r0, lr, lsr #1
     bac:	000010ce 	andeq	r1, r0, lr, asr #1
	...
     bb8:	000010d8 	ldrdeq	r1, [r0], -r8
     bbc:	000010dc 	ldrdeq	r1, [r0], -ip
     bc0:	000010e2 	andeq	r1, r0, r2, ror #1
     bc4:	00001122 	andeq	r1, r0, r2, lsr #2
     bc8:	00001126 	andeq	r1, r0, r6, lsr #2
     bcc:	0000112c 	andeq	r1, r0, ip, lsr #2
	...
     bd8:	000010f0 	strdeq	r1, [r0], -r0
     bdc:	000010f2 	strdeq	r1, [r0], -r2
     be0:	000010f8 	strdeq	r1, [r0], -r8
     be4:	00001118 	andeq	r1, r0, r8, lsl r1
	...
     bf0:	00001122 	andeq	r1, r0, r2, lsr #2
     bf4:	00001126 	andeq	r1, r0, r6, lsr #2
     bf8:	0000112c 	andeq	r1, r0, ip, lsr #2
     bfc:	0000116c 	andeq	r1, r0, ip, ror #2
     c00:	00001170 	andeq	r1, r0, r0, ror r1
     c04:	00001176 	andeq	r1, r0, r6, ror r1
	...
     c10:	0000113a 	andeq	r1, r0, sl, lsr r1
     c14:	0000113c 	andeq	r1, r0, ip, lsr r1
     c18:	00001142 	andeq	r1, r0, r2, asr #2
     c1c:	00001162 	andeq	r1, r0, r2, ror #2
	...
     c28:	0000116c 	andeq	r1, r0, ip, ror #2
     c2c:	00001170 	andeq	r1, r0, r0, ror r1
     c30:	00001176 	andeq	r1, r0, r6, ror r1
     c34:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     c38:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
     c3c:	000011c0 	andeq	r1, r0, r0, asr #3
	...
     c48:	00001184 	andeq	r1, r0, r4, lsl #3
     c4c:	00001186 	andeq	r1, r0, r6, lsl #3
     c50:	0000118c 	andeq	r1, r0, ip, lsl #3
     c54:	000011ac 	andeq	r1, r0, ip, lsr #3
	...
     c60:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
     c64:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
     c68:	000011c0 	andeq	r1, r0, r0, asr #3
     c6c:	00001200 	andeq	r1, r0, r0, lsl #4
     c70:	00001204 	andeq	r1, r0, r4, lsl #4
     c74:	0000120a 	andeq	r1, r0, sl, lsl #4
	...
     c80:	000011ce 	andeq	r1, r0, lr, asr #3
     c84:	000011d0 	ldrdeq	r1, [r0], -r0
     c88:	000011d6 	ldrdeq	r1, [r0], -r6
     c8c:	000011f6 	strdeq	r1, [r0], -r6
	...
     c98:	00001200 	andeq	r1, r0, r0, lsl #4
     c9c:	00001204 	andeq	r1, r0, r4, lsl #4
     ca0:	0000120a 	andeq	r1, r0, sl, lsl #4
     ca4:	0000124a 	andeq	r1, r0, sl, asr #4
     ca8:	0000124e 	andeq	r1, r0, lr, asr #4
     cac:	00001254 	andeq	r1, r0, r4, asr r2
	...
     cb8:	00001218 	andeq	r1, r0, r8, lsl r2
     cbc:	0000121a 	andeq	r1, r0, sl, lsl r2
     cc0:	00001220 	andeq	r1, r0, r0, lsr #4
     cc4:	00001240 	andeq	r1, r0, r0, asr #4
	...
     cd0:	0000124a 	andeq	r1, r0, sl, asr #4
     cd4:	0000124e 	andeq	r1, r0, lr, asr #4
     cd8:	00001254 	andeq	r1, r0, r4, asr r2
     cdc:	00001294 	muleq	r0, r4, r2
     ce0:	00001298 	muleq	r0, r8, r2
     ce4:	0000129e 	muleq	r0, lr, r2
	...
     cf0:	00001262 	andeq	r1, r0, r2, ror #4
     cf4:	00001264 	andeq	r1, r0, r4, ror #4
     cf8:	0000126a 	andeq	r1, r0, sl, ror #4
     cfc:	0000128a 	andeq	r1, r0, sl, lsl #5
	...
     d08:	00001294 	muleq	r0, r4, r2
     d0c:	00001298 	muleq	r0, r8, r2
     d10:	0000129e 	muleq	r0, lr, r2
     d14:	000012de 	ldrdeq	r1, [r0], -lr
     d18:	000012e2 	andeq	r1, r0, r2, ror #5
     d1c:	000012e8 	andeq	r1, r0, r8, ror #5
	...
     d28:	000012ac 	andeq	r1, r0, ip, lsr #5
     d2c:	000012ae 	andeq	r1, r0, lr, lsr #5
     d30:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     d34:	000012d4 	ldrdeq	r1, [r0], -r4
	...
     d40:	000012de 	ldrdeq	r1, [r0], -lr
     d44:	000012e2 	andeq	r1, r0, r2, ror #5
     d48:	000012e8 	andeq	r1, r0, r8, ror #5
     d4c:	00001328 	andeq	r1, r0, r8, lsr #6
     d50:	0000132c 	andeq	r1, r0, ip, lsr #6
     d54:	00001332 	andeq	r1, r0, r2, lsr r3
	...
     d60:	000012f6 	strdeq	r1, [r0], -r6
     d64:	000012f8 	strdeq	r1, [r0], -r8
     d68:	000012fe 	strdeq	r1, [r0], -lr
     d6c:	0000131e 	andeq	r1, r0, lr, lsl r3
	...
     d78:	00001328 	andeq	r1, r0, r8, lsr #6
     d7c:	0000132c 	andeq	r1, r0, ip, lsr #6
     d80:	00001332 	andeq	r1, r0, r2, lsr r3
     d84:	00001372 	andeq	r1, r0, r2, ror r3
     d88:	00001376 	andeq	r1, r0, r6, ror r3
     d8c:	0000137c 	andeq	r1, r0, ip, ror r3
	...
     d98:	00001340 	andeq	r1, r0, r0, asr #6
     d9c:	00001342 	andeq	r1, r0, r2, asr #6
     da0:	00001348 	andeq	r1, r0, r8, asr #6
     da4:	00001368 	andeq	r1, r0, r8, ror #6
	...
     db0:	00001372 	andeq	r1, r0, r2, ror r3
     db4:	00001376 	andeq	r1, r0, r6, ror r3
     db8:	0000137c 	andeq	r1, r0, ip, ror r3
     dbc:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     dc0:	000013c0 	andeq	r1, r0, r0, asr #7
     dc4:	000013c6 	andeq	r1, r0, r6, asr #7
	...
     dd0:	0000138a 	andeq	r1, r0, sl, lsl #7
     dd4:	0000138c 	andeq	r1, r0, ip, lsl #7
     dd8:	00001392 	muleq	r0, r2, r3
     ddc:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
	...
     de8:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     dec:	000013c0 	andeq	r1, r0, r0, asr #7
     df0:	000013c6 	andeq	r1, r0, r6, asr #7
     df4:	00001406 	andeq	r1, r0, r6, lsl #8
     df8:	0000140a 	andeq	r1, r0, sl, lsl #8
     dfc:	00001410 	andeq	r1, r0, r0, lsl r4
	...
     e08:	000013d4 	ldrdeq	r1, [r0], -r4
     e0c:	000013d6 	ldrdeq	r1, [r0], -r6
     e10:	000013dc 	ldrdeq	r1, [r0], -ip
     e14:	000013fc 	strdeq	r1, [r0], -ip
	...
     e20:	00001406 	andeq	r1, r0, r6, lsl #8
     e24:	0000140a 	andeq	r1, r0, sl, lsl #8
     e28:	00001410 	andeq	r1, r0, r0, lsl r4
     e2c:	00001456 	andeq	r1, r0, r6, asr r4
     e30:	0000145a 	andeq	r1, r0, sl, asr r4
     e34:	00001460 	andeq	r1, r0, r0, ror #8
	...
     e40:	0000141e 	andeq	r1, r0, lr, lsl r4
     e44:	00001420 	andeq	r1, r0, r0, lsr #8
     e48:	00001426 	andeq	r1, r0, r6, lsr #8
     e4c:	0000144c 	andeq	r1, r0, ip, asr #8
	...
     e58:	00001456 	andeq	r1, r0, r6, asr r4
     e5c:	0000145a 	andeq	r1, r0, sl, asr r4
     e60:	00001460 	andeq	r1, r0, r0, ror #8
     e64:	0000149e 	muleq	r0, lr, r4
     e68:	000014a2 	andeq	r1, r0, r2, lsr #9
     e6c:	000014a8 	andeq	r1, r0, r8, lsr #9
	...
     e78:	0000146e 	andeq	r1, r0, lr, ror #8
     e7c:	00001470 	andeq	r1, r0, r0, ror r4
     e80:	00001476 	andeq	r1, r0, r6, ror r4
     e84:	00001494 	muleq	r0, r4, r4
	...
     e90:	0000149e 	muleq	r0, lr, r4
     e94:	000014a2 	andeq	r1, r0, r2, lsr #9
     e98:	000014a8 	andeq	r1, r0, r8, lsr #9
     e9c:	000014e8 	andeq	r1, r0, r8, ror #9
     ea0:	000014ec 	andeq	r1, r0, ip, ror #9
     ea4:	000014f2 	strdeq	r1, [r0], -r2
	...
     eb0:	000014b6 			; <UNDEFINED> instruction: 0x000014b6
     eb4:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
     eb8:	000014be 			; <UNDEFINED> instruction: 0x000014be
     ebc:	000014de 	ldrdeq	r1, [r0], -lr
	...
     ec8:	000014e8 	andeq	r1, r0, r8, ror #9
     ecc:	000014ec 	andeq	r1, r0, ip, ror #9
     ed0:	000014f2 	strdeq	r1, [r0], -r2
     ed4:	00001532 	andeq	r1, r0, r2, lsr r5
     ed8:	00001536 	andeq	r1, r0, r6, lsr r5
     edc:	0000153c 	andeq	r1, r0, ip, lsr r5
	...
     ee8:	00001500 	andeq	r1, r0, r0, lsl #10
     eec:	00001502 	andeq	r1, r0, r2, lsl #10
     ef0:	00001508 	andeq	r1, r0, r8, lsl #10
     ef4:	00001528 	andeq	r1, r0, r8, lsr #10
	...
     f00:	00001532 	andeq	r1, r0, r2, lsr r5
     f04:	00001536 	andeq	r1, r0, r6, lsr r5
     f08:	0000153c 	andeq	r1, r0, ip, lsr r5
     f0c:	0000157c 	andeq	r1, r0, ip, ror r5
     f10:	00001580 	andeq	r1, r0, r0, lsl #11
     f14:	00001586 	andeq	r1, r0, r6, lsl #11
	...
     f20:	0000154a 	andeq	r1, r0, sl, asr #10
     f24:	0000154c 	andeq	r1, r0, ip, asr #10
     f28:	00001552 	andeq	r1, r0, r2, asr r5
     f2c:	00001572 	andeq	r1, r0, r2, ror r5
	...
     f38:	0000157c 	andeq	r1, r0, ip, ror r5
     f3c:	00001580 	andeq	r1, r0, r0, lsl #11
     f40:	00001586 	andeq	r1, r0, r6, lsl #11
     f44:	000015c6 	andeq	r1, r0, r6, asr #11
     f48:	000015ca 	andeq	r1, r0, sl, asr #11
     f4c:	000015d0 	ldrdeq	r1, [r0], -r0
	...
     f58:	00001594 	muleq	r0, r4, r5
     f5c:	00001596 	muleq	r0, r6, r5
     f60:	0000159c 	muleq	r0, ip, r5
     f64:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
	...
     f70:	000015c6 	andeq	r1, r0, r6, asr #11
     f74:	000015ca 	andeq	r1, r0, sl, asr #11
     f78:	000015d0 	ldrdeq	r1, [r0], -r0
     f7c:	00001616 	andeq	r1, r0, r6, lsl r6
     f80:	0000161a 	andeq	r1, r0, sl, lsl r6
     f84:	00001620 	andeq	r1, r0, r0, lsr #12
	...
     f90:	000015de 	ldrdeq	r1, [r0], -lr
     f94:	000015e0 	andeq	r1, r0, r0, ror #11
     f98:	000015e6 	andeq	r1, r0, r6, ror #11
     f9c:	0000160c 	andeq	r1, r0, ip, lsl #12
	...
     fa8:	00001616 	andeq	r1, r0, r6, lsl r6
     fac:	0000161a 	andeq	r1, r0, sl, lsl r6
     fb0:	00001620 	andeq	r1, r0, r0, lsr #12
     fb4:	00001664 	andeq	r1, r0, r4, ror #12
     fb8:	00001668 	andeq	r1, r0, r8, ror #12
     fbc:	0000166e 	andeq	r1, r0, lr, ror #12
	...
     fc8:	0000162e 	andeq	r1, r0, lr, lsr #12
     fcc:	00001630 	andeq	r1, r0, r0, lsr r6
     fd0:	00001636 	andeq	r1, r0, r6, lsr r6
     fd4:	0000165a 	andeq	r1, r0, sl, asr r6
	...
     fe0:	00001664 	andeq	r1, r0, r4, ror #12
     fe4:	00001668 	andeq	r1, r0, r8, ror #12
     fe8:	0000166e 	andeq	r1, r0, lr, ror #12
     fec:	000016ac 	andeq	r1, r0, ip, lsr #13
     ff0:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     ff4:	000016b6 			; <UNDEFINED> instruction: 0x000016b6
	...
    1000:	0000167c 	andeq	r1, r0, ip, ror r6
    1004:	0000167e 	andeq	r1, r0, lr, ror r6
    1008:	00001684 	andeq	r1, r0, r4, lsl #13
    100c:	000016a2 	andeq	r1, r0, r2, lsr #13
	...
    1018:	000016ac 	andeq	r1, r0, ip, lsr #13
    101c:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
    1020:	000016b6 			; <UNDEFINED> instruction: 0x000016b6
    1024:	000016f6 	strdeq	r1, [r0], -r6
    1028:	000016fa 	strdeq	r1, [r0], -sl
    102c:	00001700 	andeq	r1, r0, r0, lsl #14
	...
    1038:	000016c4 	andeq	r1, r0, r4, asr #13
    103c:	000016c6 	andeq	r1, r0, r6, asr #13
    1040:	000016cc 	andeq	r1, r0, ip, asr #13
    1044:	000016ec 	andeq	r1, r0, ip, ror #13
	...
    1050:	000016f6 	strdeq	r1, [r0], -r6
    1054:	000016fa 	strdeq	r1, [r0], -sl
    1058:	00001700 	andeq	r1, r0, r0, lsl #14
    105c:	00001740 	andeq	r1, r0, r0, asr #14
    1060:	00001744 	andeq	r1, r0, r4, asr #14
    1064:	0000174a 	andeq	r1, r0, sl, asr #14
	...
    1070:	0000170e 	andeq	r1, r0, lr, lsl #14
    1074:	00001710 	andeq	r1, r0, r0, lsl r7
    1078:	00001716 	andeq	r1, r0, r6, lsl r7
    107c:	00001736 	andeq	r1, r0, r6, lsr r7
	...
    1088:	00001740 	andeq	r1, r0, r0, asr #14
    108c:	00001744 	andeq	r1, r0, r4, asr #14
    1090:	0000174a 	andeq	r1, r0, sl, asr #14
    1094:	0000178a 	andeq	r1, r0, sl, lsl #15
    1098:	0000178e 	andeq	r1, r0, lr, lsl #15
    109c:	00001794 	muleq	r0, r4, r7
	...
    10a8:	00001758 	andeq	r1, r0, r8, asr r7
    10ac:	0000175a 	andeq	r1, r0, sl, asr r7
    10b0:	00001760 	andeq	r1, r0, r0, ror #14
    10b4:	00001780 	andeq	r1, r0, r0, lsl #15
	...
    10c0:	0000178a 	andeq	r1, r0, sl, lsl #15
    10c4:	0000178e 	andeq	r1, r0, lr, lsl #15
    10c8:	00001794 	muleq	r0, r4, r7
    10cc:	000017d4 	ldrdeq	r1, [r0], -r4
    10d0:	000017d8 	ldrdeq	r1, [r0], -r8
    10d4:	000017de 	ldrdeq	r1, [r0], -lr
	...
    10e0:	000017a2 	andeq	r1, r0, r2, lsr #15
    10e4:	000017a4 	andeq	r1, r0, r4, lsr #15
    10e8:	000017aa 	andeq	r1, r0, sl, lsr #15
    10ec:	000017ca 	andeq	r1, r0, sl, asr #15
	...
    10f8:	000017d4 	ldrdeq	r1, [r0], -r4
    10fc:	000017d8 	ldrdeq	r1, [r0], -r8
    1100:	000017de 	ldrdeq	r1, [r0], -lr
    1104:	0000181e 	andeq	r1, r0, lr, lsl r8
    1108:	00001822 	andeq	r1, r0, r2, lsr #16
    110c:	00001828 	andeq	r1, r0, r8, lsr #16
	...
    1118:	000017ec 	andeq	r1, r0, ip, ror #15
    111c:	000017ee 	andeq	r1, r0, lr, ror #15
    1120:	000017f4 	strdeq	r1, [r0], -r4
    1124:	00001814 	andeq	r1, r0, r4, lsl r8
	...
    1130:	0000181e 	andeq	r1, r0, lr, lsl r8
    1134:	00001822 	andeq	r1, r0, r2, lsr #16
    1138:	00001828 	andeq	r1, r0, r8, lsr #16
    113c:	00001868 	andeq	r1, r0, r8, ror #16
    1140:	0000186c 	andeq	r1, r0, ip, ror #16
    1144:	00001872 	andeq	r1, r0, r2, ror r8
	...
    1150:	00001836 	andeq	r1, r0, r6, lsr r8
    1154:	00001838 	andeq	r1, r0, r8, lsr r8
    1158:	0000183e 	andeq	r1, r0, lr, lsr r8
    115c:	0000185e 	andeq	r1, r0, lr, asr r8
	...
    1168:	00001868 	andeq	r1, r0, r8, ror #16
    116c:	0000186c 	andeq	r1, r0, ip, ror #16
    1170:	00001872 	andeq	r1, r0, r2, ror r8
    1174:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    1178:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    117c:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
	...
    1188:	00001880 	andeq	r1, r0, r0, lsl #17
    118c:	00001882 	andeq	r1, r0, r2, lsl #17
    1190:	00001888 	andeq	r1, r0, r8, lsl #17
    1194:	000018a8 	andeq	r1, r0, r8, lsr #17
	...
    11a0:	000018b2 			; <UNDEFINED> instruction: 0x000018b2
    11a4:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    11a8:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    11ac:	000018fc 	strdeq	r1, [r0], -ip
    11b0:	00001900 	andeq	r1, r0, r0, lsl #18
    11b4:	00001906 	andeq	r1, r0, r6, lsl #18
	...
    11c0:	000018ca 	andeq	r1, r0, sl, asr #17
    11c4:	000018cc 	andeq	r1, r0, ip, asr #17
    11c8:	000018d2 	ldrdeq	r1, [r0], -r2
    11cc:	000018f2 	strdeq	r1, [r0], -r2
	...
    11d8:	000018fc 	strdeq	r1, [r0], -ip
    11dc:	00001900 	andeq	r1, r0, r0, lsl #18
    11e0:	00001906 	andeq	r1, r0, r6, lsl #18
    11e4:	00001946 	andeq	r1, r0, r6, asr #18
    11e8:	0000194a 	andeq	r1, r0, sl, asr #18
    11ec:	00001950 	andeq	r1, r0, r0, asr r9
	...
    11f8:	00001914 	andeq	r1, r0, r4, lsl r9
    11fc:	00001916 	andeq	r1, r0, r6, lsl r9
    1200:	0000191c 	andeq	r1, r0, ip, lsl r9
    1204:	0000193c 	andeq	r1, r0, ip, lsr r9
	...
    1210:	00001946 	andeq	r1, r0, r6, asr #18
    1214:	0000194a 	andeq	r1, r0, sl, asr #18
    1218:	00001950 	andeq	r1, r0, r0, asr r9
    121c:	00001990 	muleq	r0, r0, r9
    1220:	00001994 	muleq	r0, r4, r9
    1224:	0000199a 	muleq	r0, sl, r9
	...
    1230:	0000195e 	andeq	r1, r0, lr, asr r9
    1234:	00001960 	andeq	r1, r0, r0, ror #18
    1238:	00001966 	andeq	r1, r0, r6, ror #18
    123c:	00001986 	andeq	r1, r0, r6, lsl #19
	...
    1248:	00001990 	muleq	r0, r0, r9
    124c:	00001994 	muleq	r0, r4, r9
    1250:	0000199a 	muleq	r0, sl, r9
    1254:	000019da 	ldrdeq	r1, [r0], -sl
    1258:	000019de 	ldrdeq	r1, [r0], -lr
    125c:	000019e4 	andeq	r1, r0, r4, ror #19
	...
    1268:	000019a8 	andeq	r1, r0, r8, lsr #19
    126c:	000019aa 	andeq	r1, r0, sl, lsr #19
    1270:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    1274:	000019d0 	ldrdeq	r1, [r0], -r0
	...
    1280:	000019da 	ldrdeq	r1, [r0], -sl
    1284:	000019de 	ldrdeq	r1, [r0], -lr
    1288:	000019e4 	andeq	r1, r0, r4, ror #19
    128c:	00001a24 	andeq	r1, r0, r4, lsr #20
    1290:	00001a28 	andeq	r1, r0, r8, lsr #20
    1294:	00001a2e 	andeq	r1, r0, lr, lsr #20
	...
    12a0:	000019f2 	strdeq	r1, [r0], -r2
    12a4:	000019f4 	strdeq	r1, [r0], -r4
    12a8:	000019fa 	strdeq	r1, [r0], -sl
    12ac:	00001a1a 	andeq	r1, r0, sl, lsl sl
	...
    12b8:	00001a24 	andeq	r1, r0, r4, lsr #20
    12bc:	00001a28 	andeq	r1, r0, r8, lsr #20
    12c0:	00001a2e 	andeq	r1, r0, lr, lsr #20
    12c4:	00001a6e 	andeq	r1, r0, lr, ror #20
    12c8:	00001a72 	andeq	r1, r0, r2, ror sl
    12cc:	00001a78 	andeq	r1, r0, r8, ror sl
	...
    12d8:	00001a3c 	andeq	r1, r0, ip, lsr sl
    12dc:	00001a3e 	andeq	r1, r0, lr, lsr sl
    12e0:	00001a44 	andeq	r1, r0, r4, asr #20
    12e4:	00001a64 	andeq	r1, r0, r4, ror #20
	...
    12f0:	00001a6e 	andeq	r1, r0, lr, ror #20
    12f4:	00001a72 	andeq	r1, r0, r2, ror sl
    12f8:	00001a78 	andeq	r1, r0, r8, ror sl
    12fc:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    1300:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
    1304:	00001ac2 	andeq	r1, r0, r2, asr #21
	...
    1310:	00001a86 	andeq	r1, r0, r6, lsl #21
    1314:	00001a88 	andeq	r1, r0, r8, lsl #21
    1318:	00001a8e 	andeq	r1, r0, lr, lsl #21
    131c:	00001aae 	andeq	r1, r0, lr, lsr #21
	...
    1328:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    132c:	00001abc 			; <UNDEFINED> instruction: 0x00001abc
    1330:	00001ac2 	andeq	r1, r0, r2, asr #21
    1334:	00001b02 	andeq	r1, r0, r2, lsl #22
    1338:	00001b06 	andeq	r1, r0, r6, lsl #22
    133c:	00001b0c 	andeq	r1, r0, ip, lsl #22
	...
    1348:	00001ad0 	ldrdeq	r1, [r0], -r0
    134c:	00001ad2 	ldrdeq	r1, [r0], -r2
    1350:	00001ad8 	ldrdeq	r1, [r0], -r8
    1354:	00001af8 	strdeq	r1, [r0], -r8
	...
    1360:	00001b02 	andeq	r1, r0, r2, lsl #22
    1364:	00001b06 	andeq	r1, r0, r6, lsl #22
    1368:	00001b0c 	andeq	r1, r0, ip, lsl #22
    136c:	00001b4c 	andeq	r1, r0, ip, asr #22
    1370:	00001b50 	andeq	r1, r0, r0, asr fp
    1374:	00001b56 	andeq	r1, r0, r6, asr fp
	...
    1380:	00001b1a 	andeq	r1, r0, sl, lsl fp
    1384:	00001b1c 	andeq	r1, r0, ip, lsl fp
    1388:	00001b22 	andeq	r1, r0, r2, lsr #22
    138c:	00001b42 	andeq	r1, r0, r2, asr #22
	...
    1398:	00001b4c 	andeq	r1, r0, ip, asr #22
    139c:	00001b50 	andeq	r1, r0, r0, asr fp
    13a0:	00001b56 	andeq	r1, r0, r6, asr fp
    13a4:	00001b96 	muleq	r0, r6, fp
    13a8:	00001b9a 	muleq	r0, sl, fp
    13ac:	00001ba0 	andeq	r1, r0, r0, lsr #23
	...
    13b8:	00001b64 	andeq	r1, r0, r4, ror #22
    13bc:	00001b66 	andeq	r1, r0, r6, ror #22
    13c0:	00001b6c 	andeq	r1, r0, ip, ror #22
    13c4:	00001b8c 	andeq	r1, r0, ip, lsl #23
	...
    13d0:	00001b96 	muleq	r0, r6, fp
    13d4:	00001b9a 	muleq	r0, sl, fp
    13d8:	00001ba0 	andeq	r1, r0, r0, lsr #23
    13dc:	00001be0 	andeq	r1, r0, r0, ror #23
    13e0:	00001be4 	andeq	r1, r0, r4, ror #23
    13e4:	00001bea 	andeq	r1, r0, sl, ror #23
	...
    13f0:	00001bae 	andeq	r1, r0, lr, lsr #23
    13f4:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    13f8:	00001bb6 			; <UNDEFINED> instruction: 0x00001bb6
    13fc:	00001bd6 	ldrdeq	r1, [r0], -r6
	...
    1408:	00001be0 	andeq	r1, r0, r0, ror #23
    140c:	00001be4 	andeq	r1, r0, r4, ror #23
    1410:	00001bea 	andeq	r1, r0, sl, ror #23
    1414:	00001c2a 	andeq	r1, r0, sl, lsr #24
    1418:	00001c2e 	andeq	r1, r0, lr, lsr #24
    141c:	00001c34 	andeq	r1, r0, r4, lsr ip
	...
    1428:	00001bf8 	strdeq	r1, [r0], -r8
    142c:	00001bfa 	strdeq	r1, [r0], -sl
    1430:	00001c00 	andeq	r1, r0, r0, lsl #24
    1434:	00001c20 	andeq	r1, r0, r0, lsr #24
	...
    1440:	00001c2a 	andeq	r1, r0, sl, lsr #24
    1444:	00001c2e 	andeq	r1, r0, lr, lsr #24
    1448:	00001c34 	andeq	r1, r0, r4, lsr ip
    144c:	00001c74 	andeq	r1, r0, r4, ror ip
    1450:	00001c78 	andeq	r1, r0, r8, ror ip
    1454:	00001c7e 	andeq	r1, r0, lr, ror ip
	...
    1460:	00001c42 	andeq	r1, r0, r2, asr #24
    1464:	00001c44 	andeq	r1, r0, r4, asr #24
    1468:	00001c4a 	andeq	r1, r0, sl, asr #24
    146c:	00001c6a 	andeq	r1, r0, sl, ror #24
	...
    1478:	00001c74 	andeq	r1, r0, r4, ror ip
    147c:	00001c78 	andeq	r1, r0, r8, ror ip
    1480:	00001c7e 	andeq	r1, r0, lr, ror ip
    1484:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    1488:	00001cc2 	andeq	r1, r0, r2, asr #25
    148c:	00001cc8 	andeq	r1, r0, r8, asr #25
	...
    1498:	00001c8c 	andeq	r1, r0, ip, lsl #25
    149c:	00001c8e 	andeq	r1, r0, lr, lsl #25
    14a0:	00001c94 	muleq	r0, r4, ip
    14a4:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
	...
    14b0:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    14b4:	00001cc2 	andeq	r1, r0, r2, asr #25
    14b8:	00001cc8 	andeq	r1, r0, r8, asr #25
    14bc:	00001d0e 	andeq	r1, r0, lr, lsl #26
    14c0:	00001d12 	andeq	r1, r0, r2, lsl sp
    14c4:	00001d18 	andeq	r1, r0, r8, lsl sp
	...
    14d0:	00001cd6 	ldrdeq	r1, [r0], -r6
    14d4:	00001cd8 	ldrdeq	r1, [r0], -r8
    14d8:	00001cde 	ldrdeq	r1, [r0], -lr
    14dc:	00001d04 	andeq	r1, r0, r4, lsl #26
	...
    14e8:	00001d0e 	andeq	r1, r0, lr, lsl #26
    14ec:	00001d12 	andeq	r1, r0, r2, lsl sp
    14f0:	00001d18 	andeq	r1, r0, r8, lsl sp
    14f4:	00001d56 	andeq	r1, r0, r6, asr sp
    14f8:	00001d5a 	andeq	r1, r0, sl, asr sp
    14fc:	00001d60 	andeq	r1, r0, r0, ror #26
	...
    1508:	00001d26 	andeq	r1, r0, r6, lsr #26
    150c:	00001d28 	andeq	r1, r0, r8, lsr #26
    1510:	00001d2e 	andeq	r1, r0, lr, lsr #26
    1514:	00001d4c 	andeq	r1, r0, ip, asr #26
	...
    1520:	00001d56 	andeq	r1, r0, r6, asr sp
    1524:	00001d5a 	andeq	r1, r0, sl, asr sp
    1528:	00001d60 	andeq	r1, r0, r0, ror #26
    152c:	00001da0 	andeq	r1, r0, r0, lsr #27
    1530:	00001da4 	andeq	r1, r0, r4, lsr #27
    1534:	00001daa 	andeq	r1, r0, sl, lsr #27
	...
    1540:	00001d6e 	andeq	r1, r0, lr, ror #26
    1544:	00001d70 	andeq	r1, r0, r0, ror sp
    1548:	00001d76 	andeq	r1, r0, r6, ror sp
    154c:	00001d96 	muleq	r0, r6, sp
	...
    1558:	00001da0 	andeq	r1, r0, r0, lsr #27
    155c:	00001da4 	andeq	r1, r0, r4, lsr #27
    1560:	00001daa 	andeq	r1, r0, sl, lsr #27
    1564:	00001dea 	andeq	r1, r0, sl, ror #27
    1568:	00001dee 	andeq	r1, r0, lr, ror #27
    156c:	00001df4 	strdeq	r1, [r0], -r4
	...
    1578:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    157c:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
    1580:	00001dc0 	andeq	r1, r0, r0, asr #27
    1584:	00001de0 	andeq	r1, r0, r0, ror #27
	...
    1590:	00001dea 	andeq	r1, r0, sl, ror #27
    1594:	00001dee 	andeq	r1, r0, lr, ror #27
    1598:	00001df4 	strdeq	r1, [r0], -r4
    159c:	00001e34 	andeq	r1, r0, r4, lsr lr
    15a0:	00001e38 	andeq	r1, r0, r8, lsr lr
    15a4:	00001e3e 	andeq	r1, r0, lr, lsr lr
	...
    15b0:	00001e02 	andeq	r1, r0, r2, lsl #28
    15b4:	00001e04 	andeq	r1, r0, r4, lsl #28
    15b8:	00001e0a 	andeq	r1, r0, sl, lsl #28
    15bc:	00001e2a 	andeq	r1, r0, sl, lsr #28
	...
    15c8:	00001e34 	andeq	r1, r0, r4, lsr lr
    15cc:	00001e38 	andeq	r1, r0, r8, lsr lr
    15d0:	00001e3e 	andeq	r1, r0, lr, lsr lr
    15d4:	00001e7e 	andeq	r1, r0, lr, ror lr
    15d8:	00001e82 	andeq	r1, r0, r2, lsl #29
    15dc:	00001e88 	andeq	r1, r0, r8, lsl #29
	...
    15e8:	00001e4c 	andeq	r1, r0, ip, asr #28
    15ec:	00001e4e 	andeq	r1, r0, lr, asr #28
    15f0:	00001e54 	andeq	r1, r0, r4, asr lr
    15f4:	00001e74 	andeq	r1, r0, r4, ror lr
	...
    1600:	00001e7e 	andeq	r1, r0, lr, ror lr
    1604:	00001e82 	andeq	r1, r0, r2, lsl #29
    1608:	00001e88 	andeq	r1, r0, r8, lsl #29
    160c:	00001ece 	andeq	r1, r0, lr, asr #29
    1610:	00001ed2 	ldrdeq	r1, [r0], -r2
    1614:	00001ed8 	ldrdeq	r1, [r0], -r8
	...
    1620:	00001e96 	muleq	r0, r6, lr
    1624:	00001e98 	muleq	r0, r8, lr
    1628:	00001e9e 	muleq	r0, lr, lr
    162c:	00001ec4 	andeq	r1, r0, r4, asr #29
	...
    1638:	00001ece 	andeq	r1, r0, lr, asr #29
    163c:	00001ed2 	ldrdeq	r1, [r0], -r2
    1640:	00001ed8 	ldrdeq	r1, [r0], -r8
    1644:	00001f16 	andeq	r1, r0, r6, lsl pc
    1648:	00001f1a 	andeq	r1, r0, sl, lsl pc
    164c:	00001f20 	andeq	r1, r0, r0, lsr #30
	...
    1658:	00001ee6 	andeq	r1, r0, r6, ror #29
    165c:	00001ee8 	andeq	r1, r0, r8, ror #29
    1660:	00001eee 	andeq	r1, r0, lr, ror #29
    1664:	00001f0c 	andeq	r1, r0, ip, lsl #30
	...
    1670:	00001f16 	andeq	r1, r0, r6, lsl pc
    1674:	00001f1a 	andeq	r1, r0, sl, lsl pc
    1678:	00001f20 	andeq	r1, r0, r0, lsr #30
    167c:	00001f60 	andeq	r1, r0, r0, ror #30
    1680:	00001f64 	andeq	r1, r0, r4, ror #30
    1684:	00001f6a 	andeq	r1, r0, sl, ror #30
	...
    1690:	00001f2e 	andeq	r1, r0, lr, lsr #30
    1694:	00001f30 	andeq	r1, r0, r0, lsr pc
    1698:	00001f36 	andeq	r1, r0, r6, lsr pc
    169c:	00001f56 	andeq	r1, r0, r6, asr pc
	...
    16a8:	00001f60 	andeq	r1, r0, r0, ror #30
    16ac:	00001f64 	andeq	r1, r0, r4, ror #30
    16b0:	00001f6a 	andeq	r1, r0, sl, ror #30
    16b4:	00001faa 	andeq	r1, r0, sl, lsr #31
    16b8:	00001fae 	andeq	r1, r0, lr, lsr #31
    16bc:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	...
    16c8:	00001f78 	andeq	r1, r0, r8, ror pc
    16cc:	00001f7a 	andeq	r1, r0, sl, ror pc
    16d0:	00001f80 	andeq	r1, r0, r0, lsl #31
    16d4:	00001fa0 	andeq	r1, r0, r0, lsr #31
	...
    16e0:	00001faa 	andeq	r1, r0, sl, lsr #31
    16e4:	00001fae 	andeq	r1, r0, lr, lsr #31
    16e8:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
    16ec:	00001ff4 	strdeq	r1, [r0], -r4
    16f0:	00001ff8 	strdeq	r1, [r0], -r8
    16f4:	00001ffe 	strdeq	r1, [r0], -lr
	...
    1700:	00001fc2 	andeq	r1, r0, r2, asr #31
    1704:	00001fc4 	andeq	r1, r0, r4, asr #31
    1708:	00001fca 	andeq	r1, r0, sl, asr #31
    170c:	00001fea 	andeq	r1, r0, sl, ror #31
	...
    1718:	00001ff4 	strdeq	r1, [r0], -r4
    171c:	00001ff8 	strdeq	r1, [r0], -r8
    1720:	00001ffe 	strdeq	r1, [r0], -lr
    1724:	0000203e 	andeq	r2, r0, lr, lsr r0
    1728:	00002042 	andeq	r2, r0, r2, asr #32
    172c:	00002048 	andeq	r2, r0, r8, asr #32
	...
    1738:	0000200c 	andeq	r2, r0, ip
    173c:	0000200e 	andeq	r2, r0, lr
    1740:	00002014 	andeq	r2, r0, r4, lsl r0
    1744:	00002034 	andeq	r2, r0, r4, lsr r0
	...
    1750:	0000203e 	andeq	r2, r0, lr, lsr r0
    1754:	00002042 	andeq	r2, r0, r2, asr #32
    1758:	00002048 	andeq	r2, r0, r8, asr #32
    175c:	00002088 	andeq	r2, r0, r8, lsl #1
    1760:	0000208c 	andeq	r2, r0, ip, lsl #1
    1764:	00002092 	muleq	r0, r2, r0
	...
    1770:	00002056 	andeq	r2, r0, r6, asr r0
    1774:	00002058 	andeq	r2, r0, r8, asr r0
    1778:	0000205e 	andeq	r2, r0, lr, asr r0
    177c:	0000207e 	andeq	r2, r0, lr, ror r0
	...
    1788:	00002088 	andeq	r2, r0, r8, lsl #1
    178c:	0000208c 	andeq	r2, r0, ip, lsl #1
    1790:	00002092 	muleq	r0, r2, r0
    1794:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1798:	000020d6 	ldrdeq	r2, [r0], -r6
    179c:	000020dc 	ldrdeq	r2, [r0], -ip
	...
    17a8:	000020a0 	andeq	r2, r0, r0, lsr #1
    17ac:	000020a2 	andeq	r2, r0, r2, lsr #1
    17b0:	000020a8 	andeq	r2, r0, r8, lsr #1
    17b4:	000020c8 	andeq	r2, r0, r8, asr #1
	...
    17c0:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    17c4:	000020d6 	ldrdeq	r2, [r0], -r6
    17c8:	000020dc 	ldrdeq	r2, [r0], -ip
    17cc:	0000211c 	andeq	r2, r0, ip, lsl r1
    17d0:	00002120 	andeq	r2, r0, r0, lsr #2
    17d4:	00002126 	andeq	r2, r0, r6, lsr #2
	...
    17e0:	000020ea 	andeq	r2, r0, sl, ror #1
    17e4:	000020ec 	andeq	r2, r0, ip, ror #1
    17e8:	000020f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    17ec:	00002112 	andeq	r2, r0, r2, lsl r1
	...
    17f8:	0000211c 	andeq	r2, r0, ip, lsl r1
    17fc:	00002120 	andeq	r2, r0, r0, lsr #2
    1800:	00002126 	andeq	r2, r0, r6, lsr #2
    1804:	00002166 	andeq	r2, r0, r6, ror #2
    1808:	0000216a 	andeq	r2, r0, sl, ror #2
    180c:	00002170 	andeq	r2, r0, r0, ror r1
	...
    1818:	00002134 	andeq	r2, r0, r4, lsr r1
    181c:	00002136 	andeq	r2, r0, r6, lsr r1
    1820:	0000213c 	andeq	r2, r0, ip, lsr r1
    1824:	0000215c 	andeq	r2, r0, ip, asr r1
	...
    1830:	00002166 	andeq	r2, r0, r6, ror #2
    1834:	0000216a 	andeq	r2, r0, sl, ror #2
    1838:	00002170 	andeq	r2, r0, r0, ror r1
    183c:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    1840:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    1844:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
	...
    1850:	0000217e 	andeq	r2, r0, lr, ror r1
    1854:	00002180 	andeq	r2, r0, r0, lsl #3
    1858:	00002186 	andeq	r2, r0, r6, lsl #3
    185c:	000021a6 	andeq	r2, r0, r6, lsr #3
	...
    1868:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    186c:	000021b4 			; <UNDEFINED> instruction: 0x000021b4
    1870:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    1874:	000021fa 	strdeq	r2, [r0], -sl
    1878:	000021fe 	strdeq	r2, [r0], -lr
    187c:	00002204 	andeq	r2, r0, r4, lsl #4
	...
    1888:	000021c8 	andeq	r2, r0, r8, asr #3
    188c:	000021ca 	andeq	r2, r0, sl, asr #3
    1890:	000021d0 	ldrdeq	r2, [r0], -r0
    1894:	000021f0 	strdeq	r2, [r0], -r0
	...
    18a0:	000021fa 	strdeq	r2, [r0], -sl
    18a4:	000021fe 	strdeq	r2, [r0], -lr
    18a8:	00002204 	andeq	r2, r0, r4, lsl #4
    18ac:	00002244 	andeq	r2, r0, r4, asr #4
    18b0:	00002248 	andeq	r2, r0, r8, asr #4
    18b4:	0000224e 	andeq	r2, r0, lr, asr #4
	...
    18c0:	00002212 	andeq	r2, r0, r2, lsl r2
    18c4:	00002214 	andeq	r2, r0, r4, lsl r2
    18c8:	0000221a 	andeq	r2, r0, sl, lsl r2
    18cc:	0000223a 	andeq	r2, r0, sl, lsr r2
	...
    18d8:	00002244 	andeq	r2, r0, r4, asr #4
    18dc:	00002248 	andeq	r2, r0, r8, asr #4
    18e0:	0000224e 	andeq	r2, r0, lr, asr #4
    18e4:	0000228e 	andeq	r2, r0, lr, lsl #5
    18e8:	00002292 	muleq	r0, r2, r2
    18ec:	00002298 	muleq	r0, r8, r2
	...
    18f8:	0000225c 	andeq	r2, r0, ip, asr r2
    18fc:	0000225e 	andeq	r2, r0, lr, asr r2
    1900:	00002264 	andeq	r2, r0, r4, ror #4
    1904:	00002284 	andeq	r2, r0, r4, lsl #5
	...
    1910:	0000228e 	andeq	r2, r0, lr, lsl #5
    1914:	00002292 	muleq	r0, r2, r2
    1918:	00002298 	muleq	r0, r8, r2
    191c:	000022d8 	ldrdeq	r2, [r0], -r8
    1920:	000022dc 	ldrdeq	r2, [r0], -ip
    1924:	000022e2 	andeq	r2, r0, r2, ror #5
	...
    1930:	000022a6 	andeq	r2, r0, r6, lsr #5
    1934:	000022a8 	andeq	r2, r0, r8, lsr #5
    1938:	000022ae 	andeq	r2, r0, lr, lsr #5
    193c:	000022ce 	andeq	r2, r0, lr, asr #5
	...
    1948:	000022d8 	ldrdeq	r2, [r0], -r8
    194c:	000022dc 	ldrdeq	r2, [r0], -ip
    1950:	000022e2 	andeq	r2, r0, r2, ror #5
    1954:	00002322 	andeq	r2, r0, r2, lsr #6
    1958:	00002326 	andeq	r2, r0, r6, lsr #6
    195c:	0000232c 	andeq	r2, r0, ip, lsr #6
	...
    1968:	000022f0 	strdeq	r2, [r0], -r0
    196c:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1970:	000022f8 	strdeq	r2, [r0], -r8
    1974:	00002318 	andeq	r2, r0, r8, lsl r3
	...
    1980:	00002322 	andeq	r2, r0, r2, lsr #6
    1984:	00002326 	andeq	r2, r0, r6, lsr #6
    1988:	0000232c 	andeq	r2, r0, ip, lsr #6
    198c:	0000236c 	andeq	r2, r0, ip, ror #6
    1990:	00002370 	andeq	r2, r0, r0, ror r3
    1994:	00002376 	andeq	r2, r0, r6, ror r3
	...
    19a0:	0000233a 	andeq	r2, r0, sl, lsr r3
    19a4:	0000233c 	andeq	r2, r0, ip, lsr r3
    19a8:	00002342 	andeq	r2, r0, r2, asr #6
    19ac:	00002362 	andeq	r2, r0, r2, ror #6
	...
    19b8:	0000236c 	andeq	r2, r0, ip, ror #6
    19bc:	00002370 	andeq	r2, r0, r0, ror r3
    19c0:	00002376 	andeq	r2, r0, r6, ror r3
    19c4:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    19c8:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    19cc:	000023c0 	andeq	r2, r0, r0, asr #7
	...
    19d8:	00002384 	andeq	r2, r0, r4, lsl #7
    19dc:	00002386 	andeq	r2, r0, r6, lsl #7
    19e0:	0000238c 	andeq	r2, r0, ip, lsl #7
    19e4:	000023ac 	andeq	r2, r0, ip, lsr #7
	...
    19f0:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    19f4:	000023ba 			; <UNDEFINED> instruction: 0x000023ba
    19f8:	000023c0 	andeq	r2, r0, r0, asr #7
    19fc:	00002400 	andeq	r2, r0, r0, lsl #8
    1a00:	00002404 	andeq	r2, r0, r4, lsl #8
    1a04:	0000240a 	andeq	r2, r0, sl, lsl #8
	...
    1a10:	000023ce 	andeq	r2, r0, lr, asr #7
    1a14:	000023d0 	ldrdeq	r2, [r0], -r0
    1a18:	000023d6 	ldrdeq	r2, [r0], -r6
    1a1c:	000023f6 	strdeq	r2, [r0], -r6
	...
    1a28:	00002400 	andeq	r2, r0, r0, lsl #8
    1a2c:	00002404 	andeq	r2, r0, r4, lsl #8
    1a30:	0000240a 	andeq	r2, r0, sl, lsl #8
    1a34:	0000244a 	andeq	r2, r0, sl, asr #8
    1a38:	0000244e 	andeq	r2, r0, lr, asr #8
    1a3c:	00002454 	andeq	r2, r0, r4, asr r4
	...
    1a48:	00002418 	andeq	r2, r0, r8, lsl r4
    1a4c:	0000241a 	andeq	r2, r0, sl, lsl r4
    1a50:	00002420 	andeq	r2, r0, r0, lsr #8
    1a54:	00002440 	andeq	r2, r0, r0, asr #8
	...
    1a60:	0000244a 	andeq	r2, r0, sl, asr #8
    1a64:	0000244e 	andeq	r2, r0, lr, asr #8
    1a68:	00002454 	andeq	r2, r0, r4, asr r4
    1a6c:	0000249a 	muleq	r0, sl, r4
    1a70:	0000249e 	muleq	r0, lr, r4
    1a74:	000024a4 	andeq	r2, r0, r4, lsr #9
	...
    1a80:	00002462 	andeq	r2, r0, r2, ror #8
    1a84:	00002464 	andeq	r2, r0, r4, ror #8
    1a88:	0000246a 	andeq	r2, r0, sl, ror #8
    1a8c:	00002490 	muleq	r0, r0, r4
	...
    1a98:	0000249a 	muleq	r0, sl, r4
    1a9c:	0000249e 	muleq	r0, lr, r4
    1aa0:	000024a4 	andeq	r2, r0, r4, lsr #9
    1aa4:	000024e2 	andeq	r2, r0, r2, ror #9
    1aa8:	000024e6 	andeq	r2, r0, r6, ror #9
    1aac:	000024ec 	andeq	r2, r0, ip, ror #9
	...
    1ab8:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    1abc:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    1ac0:	000024ba 			; <UNDEFINED> instruction: 0x000024ba
    1ac4:	000024d8 	ldrdeq	r2, [r0], -r8
	...
    1ad0:	000024e2 	andeq	r2, r0, r2, ror #9
    1ad4:	000024e6 	andeq	r2, r0, r6, ror #9
    1ad8:	000024ec 	andeq	r2, r0, ip, ror #9
    1adc:	0000252c 	andeq	r2, r0, ip, lsr #10
    1ae0:	00002530 	andeq	r2, r0, r0, lsr r5
    1ae4:	00002536 	andeq	r2, r0, r6, lsr r5
	...
    1af0:	000024fa 	strdeq	r2, [r0], -sl
    1af4:	000024fc 	strdeq	r2, [r0], -ip
    1af8:	00002502 	andeq	r2, r0, r2, lsl #10
    1afc:	00002522 	andeq	r2, r0, r2, lsr #10
	...
    1b08:	0000252c 	andeq	r2, r0, ip, lsr #10
    1b0c:	00002530 	andeq	r2, r0, r0, lsr r5
    1b10:	00002536 	andeq	r2, r0, r6, lsr r5
    1b14:	00002576 	andeq	r2, r0, r6, ror r5
    1b18:	0000257a 	andeq	r2, r0, sl, ror r5
    1b1c:	00002580 	andeq	r2, r0, r0, lsl #11
	...
    1b28:	00002544 	andeq	r2, r0, r4, asr #10
    1b2c:	00002546 	andeq	r2, r0, r6, asr #10
    1b30:	0000254c 	andeq	r2, r0, ip, asr #10
    1b34:	0000256c 	andeq	r2, r0, ip, ror #10
	...
    1b40:	00002576 	andeq	r2, r0, r6, ror r5
    1b44:	0000257a 	andeq	r2, r0, sl, ror r5
    1b48:	00002580 	andeq	r2, r0, r0, lsl #11
    1b4c:	000025c0 	andeq	r2, r0, r0, asr #11
    1b50:	000025c4 	andeq	r2, r0, r4, asr #11
    1b54:	000025ca 	andeq	r2, r0, sl, asr #11
	...
    1b60:	0000258e 	andeq	r2, r0, lr, lsl #11
    1b64:	00002590 	muleq	r0, r0, r5
    1b68:	00002596 	muleq	r0, r6, r5
    1b6c:	000025b6 			; <UNDEFINED> instruction: 0x000025b6
	...
    1b78:	000025c0 	andeq	r2, r0, r0, asr #11
    1b7c:	000025c4 	andeq	r2, r0, r4, asr #11
    1b80:	000025ca 	andeq	r2, r0, sl, asr #11
    1b84:	0000260a 	andeq	r2, r0, sl, lsl #12
    1b88:	0000260e 	andeq	r2, r0, lr, lsl #12
    1b8c:	00002614 	andeq	r2, r0, r4, lsl r6
	...
    1b98:	000025d8 	ldrdeq	r2, [r0], -r8
    1b9c:	000025da 	ldrdeq	r2, [r0], -sl
    1ba0:	000025e0 	andeq	r2, r0, r0, ror #11
    1ba4:	00002600 	andeq	r2, r0, r0, lsl #12
	...
    1bb0:	0000260a 	andeq	r2, r0, sl, lsl #12
    1bb4:	0000260e 	andeq	r2, r0, lr, lsl #12
    1bb8:	00002614 	andeq	r2, r0, r4, lsl r6
    1bbc:	00002654 	andeq	r2, r0, r4, asr r6
    1bc0:	00002658 	andeq	r2, r0, r8, asr r6
    1bc4:	0000265e 	andeq	r2, r0, lr, asr r6
	...
    1bd0:	00002622 	andeq	r2, r0, r2, lsr #12
    1bd4:	00002624 	andeq	r2, r0, r4, lsr #12
    1bd8:	0000262a 	andeq	r2, r0, sl, lsr #12
    1bdc:	0000264a 	andeq	r2, r0, sl, asr #12
	...
    1be8:	00002654 	andeq	r2, r0, r4, asr r6
    1bec:	00002658 	andeq	r2, r0, r8, asr r6
    1bf0:	0000265e 	andeq	r2, r0, lr, asr r6
    1bf4:	0000269e 	muleq	r0, lr, r6
    1bf8:	000026a2 	andeq	r2, r0, r2, lsr #13
    1bfc:	000026a8 	andeq	r2, r0, r8, lsr #13
	...
    1c08:	0000266c 	andeq	r2, r0, ip, ror #12
    1c0c:	0000266e 	andeq	r2, r0, lr, ror #12
    1c10:	00002674 	andeq	r2, r0, r4, ror r6
    1c14:	00002694 	muleq	r0, r4, r6
	...
    1c20:	0000269e 	muleq	r0, lr, r6
    1c24:	000026a2 	andeq	r2, r0, r2, lsr #13
    1c28:	000026a8 	andeq	r2, r0, r8, lsr #13
    1c2c:	000026e8 	andeq	r2, r0, r8, ror #13
    1c30:	000026ec 	andeq	r2, r0, ip, ror #13
    1c34:	000026f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    1c40:	000026b6 			; <UNDEFINED> instruction: 0x000026b6
    1c44:	000026b8 			; <UNDEFINED> instruction: 0x000026b8
    1c48:	000026be 			; <UNDEFINED> instruction: 0x000026be
    1c4c:	000026de 	ldrdeq	r2, [r0], -lr
	...
    1c58:	000026e8 	andeq	r2, r0, r8, ror #13
    1c5c:	000026ec 	andeq	r2, r0, ip, ror #13
    1c60:	000026f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1c64:	00002732 	andeq	r2, r0, r2, lsr r7
    1c68:	00002736 	andeq	r2, r0, r6, lsr r7
    1c6c:	0000273c 	andeq	r2, r0, ip, lsr r7
	...
    1c78:	00002700 	andeq	r2, r0, r0, lsl #14
    1c7c:	00002702 	andeq	r2, r0, r2, lsl #14
    1c80:	00002708 	andeq	r2, r0, r8, lsl #14
    1c84:	00002728 	andeq	r2, r0, r8, lsr #14
	...
    1c90:	00002732 	andeq	r2, r0, r2, lsr r7
    1c94:	00002736 	andeq	r2, r0, r6, lsr r7
    1c98:	0000273c 	andeq	r2, r0, ip, lsr r7
    1c9c:	0000277c 	andeq	r2, r0, ip, ror r7
    1ca0:	00002780 	andeq	r2, r0, r0, lsl #15
    1ca4:	00002786 	andeq	r2, r0, r6, lsl #15
	...
    1cb0:	0000274a 	andeq	r2, r0, sl, asr #14
    1cb4:	0000274c 	andeq	r2, r0, ip, asr #14
    1cb8:	00002752 	andeq	r2, r0, r2, asr r7
    1cbc:	00002772 	andeq	r2, r0, r2, ror r7
	...
    1cc8:	0000277c 	andeq	r2, r0, ip, ror r7
    1ccc:	00002780 	andeq	r2, r0, r0, lsl #15
    1cd0:	00002786 	andeq	r2, r0, r6, lsl #15
    1cd4:	000027c6 	andeq	r2, r0, r6, asr #15
    1cd8:	000027ca 	andeq	r2, r0, sl, asr #15
    1cdc:	000027d0 	ldrdeq	r2, [r0], -r0
	...
    1ce8:	00002794 	muleq	r0, r4, r7
    1cec:	00002796 	muleq	r0, r6, r7
    1cf0:	0000279c 	muleq	r0, ip, r7
    1cf4:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
	...
    1d00:	000027c6 	andeq	r2, r0, r6, asr #15
    1d04:	000027ca 	andeq	r2, r0, sl, asr #15
    1d08:	000027d0 	ldrdeq	r2, [r0], -r0
    1d0c:	00002810 	andeq	r2, r0, r0, lsl r8
    1d10:	00002814 	andeq	r2, r0, r4, lsl r8
    1d14:	0000281a 	andeq	r2, r0, sl, lsl r8
	...
    1d20:	000027de 	ldrdeq	r2, [r0], -lr
    1d24:	000027e0 	andeq	r2, r0, r0, ror #15
    1d28:	000027e6 	andeq	r2, r0, r6, ror #15
    1d2c:	00002806 	andeq	r2, r0, r6, lsl #16
	...
    1d38:	00002810 	andeq	r2, r0, r0, lsl r8
    1d3c:	00002814 	andeq	r2, r0, r4, lsl r8
    1d40:	0000281a 	andeq	r2, r0, sl, lsl r8
    1d44:	0000285a 	andeq	r2, r0, sl, asr r8
    1d48:	0000285e 	andeq	r2, r0, lr, asr r8
    1d4c:	00002864 	andeq	r2, r0, r4, ror #16
	...
    1d58:	00002828 	andeq	r2, r0, r8, lsr #16
    1d5c:	0000282a 	andeq	r2, r0, sl, lsr #16
    1d60:	00002830 	andeq	r2, r0, r0, lsr r8
    1d64:	00002850 	andeq	r2, r0, r0, asr r8
	...
    1d70:	0000285a 	andeq	r2, r0, sl, asr r8
    1d74:	0000285e 	andeq	r2, r0, lr, asr r8
    1d78:	00002864 	andeq	r2, r0, r4, ror #16
    1d7c:	000028a4 	andeq	r2, r0, r4, lsr #17
    1d80:	000028a8 	andeq	r2, r0, r8, lsr #17
    1d84:	000028ae 	andeq	r2, r0, lr, lsr #17
	...
    1d90:	00002872 	andeq	r2, r0, r2, ror r8
    1d94:	00002874 	andeq	r2, r0, r4, ror r8
    1d98:	0000287a 	andeq	r2, r0, sl, ror r8
    1d9c:	0000289a 	muleq	r0, sl, r8
	...
    1da8:	000028a4 	andeq	r2, r0, r4, lsr #17
    1dac:	000028a8 	andeq	r2, r0, r8, lsr #17
    1db0:	000028ae 	andeq	r2, r0, lr, lsr #17
    1db4:	000028ee 	andeq	r2, r0, lr, ror #17
    1db8:	000028f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1dbc:	000028f8 	strdeq	r2, [r0], -r8
	...
    1dc8:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
    1dcc:	000028be 			; <UNDEFINED> instruction: 0x000028be
    1dd0:	000028c4 	andeq	r2, r0, r4, asr #17
    1dd4:	000028e4 	andeq	r2, r0, r4, ror #17
	...
    1de0:	000028ee 	andeq	r2, r0, lr, ror #17
    1de4:	000028f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1de8:	000028f8 	strdeq	r2, [r0], -r8
    1dec:	0000293e 	andeq	r2, r0, lr, lsr r9
    1df0:	00002942 	andeq	r2, r0, r2, asr #18
    1df4:	00002948 	andeq	r2, r0, r8, asr #18
	...
    1e00:	00002906 	andeq	r2, r0, r6, lsl #18
    1e04:	00002908 	andeq	r2, r0, r8, lsl #18
    1e08:	0000290e 	andeq	r2, r0, lr, lsl #18
    1e0c:	00002934 	andeq	r2, r0, r4, lsr r9
	...
    1e18:	0000293e 	andeq	r2, r0, lr, lsr r9
    1e1c:	00002942 	andeq	r2, r0, r2, asr #18
    1e20:	00002948 	andeq	r2, r0, r8, asr #18
    1e24:	0000298c 	andeq	r2, r0, ip, lsl #19
    1e28:	00002990 	muleq	r0, r0, r9
    1e2c:	00002996 	muleq	r0, r6, r9
	...
    1e38:	00002956 	andeq	r2, r0, r6, asr r9
    1e3c:	00002958 	andeq	r2, r0, r8, asr r9
    1e40:	0000295e 	andeq	r2, r0, lr, asr r9
    1e44:	00002982 	andeq	r2, r0, r2, lsl #19
	...
    1e50:	0000298c 	andeq	r2, r0, ip, lsl #19
    1e54:	00002990 	muleq	r0, r0, r9
    1e58:	00002996 	muleq	r0, r6, r9
    1e5c:	000029d4 	ldrdeq	r2, [r0], -r4
    1e60:	000029d8 	ldrdeq	r2, [r0], -r8
    1e64:	000029de 	ldrdeq	r2, [r0], -lr
	...
    1e70:	000029a4 	andeq	r2, r0, r4, lsr #19
    1e74:	000029a6 	andeq	r2, r0, r6, lsr #19
    1e78:	000029ac 	andeq	r2, r0, ip, lsr #19
    1e7c:	000029ca 	andeq	r2, r0, sl, asr #19
	...
    1e88:	000029d4 	ldrdeq	r2, [r0], -r4
    1e8c:	000029d8 	ldrdeq	r2, [r0], -r8
    1e90:	000029de 	ldrdeq	r2, [r0], -lr
    1e94:	00002a1e 	andeq	r2, r0, lr, lsl sl
    1e98:	00002a22 	andeq	r2, r0, r2, lsr #20
    1e9c:	00002a28 	andeq	r2, r0, r8, lsr #20
	...
    1ea8:	000029ec 	andeq	r2, r0, ip, ror #19
    1eac:	000029ee 	andeq	r2, r0, lr, ror #19
    1eb0:	000029f4 	strdeq	r2, [r0], -r4
    1eb4:	00002a14 	andeq	r2, r0, r4, lsl sl
	...
    1ec0:	00002a1e 	andeq	r2, r0, lr, lsl sl
    1ec4:	00002a22 	andeq	r2, r0, r2, lsr #20
    1ec8:	00002a28 	andeq	r2, r0, r8, lsr #20
    1ecc:	00002a68 	andeq	r2, r0, r8, ror #20
    1ed0:	00002a6c 	andeq	r2, r0, ip, ror #20
    1ed4:	00002a72 	andeq	r2, r0, r2, ror sl
	...
    1ee0:	00002a36 	andeq	r2, r0, r6, lsr sl
    1ee4:	00002a38 	andeq	r2, r0, r8, lsr sl
    1ee8:	00002a3e 	andeq	r2, r0, lr, lsr sl
    1eec:	00002a5e 	andeq	r2, r0, lr, asr sl
	...
    1ef8:	00002a68 	andeq	r2, r0, r8, ror #20
    1efc:	00002a6c 	andeq	r2, r0, ip, ror #20
    1f00:	00002a72 	andeq	r2, r0, r2, ror sl
    1f04:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    1f08:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
    1f0c:	00002ac2 	andeq	r2, r0, r2, asr #21
	...
    1f18:	00002a80 	andeq	r2, r0, r0, lsl #21
    1f1c:	00002a82 	andeq	r2, r0, r2, lsl #21
    1f20:	00002a88 	andeq	r2, r0, r8, lsl #21
    1f24:	00002aae 	andeq	r2, r0, lr, lsr #21
	...
    1f30:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    1f34:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
    1f38:	00002ac2 	andeq	r2, r0, r2, asr #21
    1f3c:	00002b06 	andeq	r2, r0, r6, lsl #22
    1f40:	00002b0a 	andeq	r2, r0, sl, lsl #22
    1f44:	00002b10 	andeq	r2, r0, r0, lsl fp
	...
    1f50:	00002ad0 	ldrdeq	r2, [r0], -r0
    1f54:	00002ad2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    1f58:	00002ad8 	ldrdeq	r2, [r0], -r8
    1f5c:	00002afc 	strdeq	r2, [r0], -ip
	...
    1f68:	00002b06 	andeq	r2, r0, r6, lsl #22
    1f6c:	00002b0a 	andeq	r2, r0, sl, lsl #22
    1f70:	00002b10 	andeq	r2, r0, r0, lsl fp
    1f74:	00002b54 	andeq	r2, r0, r4, asr fp
    1f78:	00002b58 	andeq	r2, r0, r8, asr fp
    1f7c:	00002b5e 	andeq	r2, r0, lr, asr fp
	...
    1f88:	00002b1e 	andeq	r2, r0, lr, lsl fp
    1f8c:	00002b20 	andeq	r2, r0, r0, lsr #22
    1f90:	00002b26 	andeq	r2, r0, r6, lsr #22
    1f94:	00002b4a 	andeq	r2, r0, sl, asr #22
	...
    1fa0:	00002b54 	andeq	r2, r0, r4, asr fp
    1fa4:	00002b58 	andeq	r2, r0, r8, asr fp
    1fa8:	00002b5e 	andeq	r2, r0, lr, asr fp
    1fac:	00002b9c 	muleq	r0, ip, fp
    1fb0:	00002ba0 	andeq	r2, r0, r0, lsr #23
    1fb4:	00002ba6 	andeq	r2, r0, r6, lsr #23
	...
    1fc0:	00002b6c 	andeq	r2, r0, ip, ror #22
    1fc4:	00002b6e 	andeq	r2, r0, lr, ror #22
    1fc8:	00002b74 	andeq	r2, r0, r4, ror fp
    1fcc:	00002b92 	muleq	r0, r2, fp
	...
    1fd8:	00002b9c 	muleq	r0, ip, fp
    1fdc:	00002ba0 	andeq	r2, r0, r0, lsr #23
    1fe0:	00002ba6 	andeq	r2, r0, r6, lsr #23
    1fe4:	00002be6 	andeq	r2, r0, r6, ror #23
    1fe8:	00002bea 	andeq	r2, r0, sl, ror #23
    1fec:	00002bf0 	strdeq	r2, [r0], -r0
	...
    1ff8:	00002bb4 			; <UNDEFINED> instruction: 0x00002bb4
    1ffc:	00002bb6 			; <UNDEFINED> instruction: 0x00002bb6
    2000:	00002bbc 			; <UNDEFINED> instruction: 0x00002bbc
    2004:	00002bdc 	ldrdeq	r2, [r0], -ip
	...
    2010:	00002be6 	andeq	r2, r0, r6, ror #23
    2014:	00002bea 	andeq	r2, r0, sl, ror #23
    2018:	00002bf0 	strdeq	r2, [r0], -r0
    201c:	00002c2e 	andeq	r2, r0, lr, lsr #24
    2020:	00002c32 	andeq	r2, r0, r2, lsr ip
    2024:	00002c38 	andeq	r2, r0, r8, lsr ip
	...
    2030:	00002bfe 	strdeq	r2, [r0], -lr
    2034:	00002c00 	andeq	r2, r0, r0, lsl #24
    2038:	00002c06 	andeq	r2, r0, r6, lsl #24
    203c:	00002c24 	andeq	r2, r0, r4, lsr #24
	...
    2048:	00002c2e 	andeq	r2, r0, lr, lsr #24
    204c:	00002c32 	andeq	r2, r0, r2, lsr ip
    2050:	00002c38 	andeq	r2, r0, r8, lsr ip
    2054:	00002c50 	andeq	r2, r0, r0, asr ip
	...
    2060:	00002c6a 	andeq	r2, r0, sl, ror #24
    2064:	00002c72 	andeq	r2, r0, r2, ror ip
    2068:	00002c76 	andeq	r2, r0, r6, ror ip
    206c:	00002c78 	andeq	r2, r0, r8, ror ip
    2070:	00002c7a 	andeq	r2, r0, sl, ror ip
    2074:	00002c98 	muleq	r0, r8, ip
	...
    2080:	00002ce6 	andeq	r2, r0, r6, ror #25
    2084:	00003038 	andeq	r3, r0, r8, lsr r0
    2088:	0000303c 	andeq	r3, r0, ip, lsr r0
    208c:	00003042 	andeq	r3, r0, r2, asr #32
	...
    2098:	00002ce6 	andeq	r2, r0, r6, ror #25
    209c:	00002cf0 	strdeq	r2, [r0], -r0
    20a0:	00002cf4 	strdeq	r2, [r0], -r4
    20a4:	00002cf8 	strdeq	r2, [r0], -r8
    20a8:	00002cfc 	strdeq	r2, [r0], -ip
    20ac:	00002d00 	andeq	r2, r0, r0, lsl #26
    20b0:	00002d02 	andeq	r2, r0, r2, lsl #26
    20b4:	00002d44 	andeq	r2, r0, r4, asr #26
    20b8:	00002d48 	andeq	r2, r0, r8, asr #26
    20bc:	00002d4e 	andeq	r2, r0, lr, asr #26
	...
    20c8:	00002d0a 	andeq	r2, r0, sl, lsl #26
    20cc:	00002d14 	andeq	r2, r0, r4, lsl sp
    20d0:	00002d1a 	andeq	r2, r0, sl, lsl sp
    20d4:	00002d3a 	andeq	r2, r0, sl, lsr sp
	...
    20e0:	00002d44 	andeq	r2, r0, r4, asr #26
    20e4:	00002d48 	andeq	r2, r0, r8, asr #26
    20e8:	00002d4e 	andeq	r2, r0, lr, asr #26
    20ec:	00002d5c 	andeq	r2, r0, ip, asr sp
    20f0:	00002d5e 	andeq	r2, r0, lr, asr sp
    20f4:	00002d90 	muleq	r0, r0, sp
    20f8:	00002d94 	muleq	r0, r4, sp
    20fc:	00002d9c 	muleq	r0, ip, sp
	...
    2108:	00002d90 	muleq	r0, r0, sp
    210c:	00002d94 	muleq	r0, r4, sp
    2110:	00002d9c 	muleq	r0, ip, sp
    2114:	00002de2 	andeq	r2, r0, r2, ror #27
    2118:	00002de6 	andeq	r2, r0, r6, ror #27
    211c:	00002dee 	andeq	r2, r0, lr, ror #27
	...
    2128:	00002dae 	andeq	r2, r0, lr, lsr #27
    212c:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
    2130:	00002db6 			; <UNDEFINED> instruction: 0x00002db6
    2134:	00002dd6 	ldrdeq	r2, [r0], -r6
	...
    2140:	00002de2 	andeq	r2, r0, r2, ror #27
    2144:	00002de6 	andeq	r2, r0, r6, ror #27
    2148:	00002dee 	andeq	r2, r0, lr, ror #27
    214c:	00002e34 	andeq	r2, r0, r4, lsr lr
    2150:	00002e38 	andeq	r2, r0, r8, lsr lr
    2154:	00002e3e 	andeq	r2, r0, lr, lsr lr
	...
    2160:	00002e02 	andeq	r2, r0, r2, lsl #28
    2164:	00002e04 	andeq	r2, r0, r4, lsl #28
    2168:	00002e0c 	andeq	r2, r0, ip, lsl #28
    216c:	00002e2a 	andeq	r2, r0, sl, lsr #28
	...
    2178:	00002e34 	andeq	r2, r0, r4, lsr lr
    217c:	00002e38 	andeq	r2, r0, r8, lsr lr
    2180:	00002e3e 	andeq	r2, r0, lr, lsr lr
    2184:	00002e7c 	andeq	r2, r0, ip, ror lr
    2188:	00002e80 	andeq	r2, r0, r0, lsl #29
    218c:	00002e86 	andeq	r2, r0, r6, lsl #29
	...
    2198:	00002e4c 	andeq	r2, r0, ip, asr #28
    219c:	00002e4e 	andeq	r2, r0, lr, asr #28
    21a0:	00002e54 	andeq	r2, r0, r4, asr lr
    21a4:	00002e72 	andeq	r2, r0, r2, ror lr
	...
    21b0:	00002e7c 	andeq	r2, r0, ip, ror lr
    21b4:	00002e80 	andeq	r2, r0, r0, lsl #29
    21b8:	00002e86 	andeq	r2, r0, r6, lsl #29
    21bc:	00002e88 	andeq	r2, r0, r8, lsl #29
    21c0:	00002e8a 	andeq	r2, r0, sl, lsl #29
    21c4:	00002ec8 	andeq	r2, r0, r8, asr #29
    21c8:	00002ecc 	andeq	r2, r0, ip, asr #29
    21cc:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    21d8:	00002e96 	muleq	r0, r6, lr
    21dc:	00002e98 	muleq	r0, r8, lr
    21e0:	00002e9e 	muleq	r0, lr, lr
    21e4:	00002ebe 			; <UNDEFINED> instruction: 0x00002ebe
	...
    21f0:	00002ec8 	andeq	r2, r0, r8, asr #29
    21f4:	00002ecc 	andeq	r2, r0, ip, asr #29
    21f8:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    21fc:	00002ee0 	andeq	r2, r0, r0, ror #29
    2200:	00002ee2 	andeq	r2, r0, r2, ror #29
    2204:	00002f12 	andeq	r2, r0, r2, lsl pc
    2208:	00002f16 	andeq	r2, r0, r6, lsl pc
    220c:	00002f1c 	andeq	r2, r0, ip, lsl pc
	...
    2218:	00002f12 	andeq	r2, r0, r2, lsl pc
    221c:	00002f16 	andeq	r2, r0, r6, lsl pc
    2220:	00002f1c 	andeq	r2, r0, ip, lsl pc
    2224:	00002f5c 	andeq	r2, r0, ip, asr pc
    2228:	00002f60 	andeq	r2, r0, r0, ror #30
    222c:	00002f66 	andeq	r2, r0, r6, ror #30
	...
    2238:	00002f2a 	andeq	r2, r0, sl, lsr #30
    223c:	00002f2c 	andeq	r2, r0, ip, lsr #30
    2240:	00002f32 	andeq	r2, r0, r2, lsr pc
    2244:	00002f52 	andeq	r2, r0, r2, asr pc
	...
    2250:	00002f5c 	andeq	r2, r0, ip, asr pc
    2254:	00002f60 	andeq	r2, r0, r0, ror #30
    2258:	00002f66 	andeq	r2, r0, r6, ror #30
    225c:	00002fa4 	andeq	r2, r0, r4, lsr #31
    2260:	00002fa8 	andeq	r2, r0, r8, lsr #31
    2264:	00002fae 	andeq	r2, r0, lr, lsr #31
	...
    2270:	00002f74 	andeq	r2, r0, r4, ror pc
    2274:	00002f76 	andeq	r2, r0, r6, ror pc
    2278:	00002f7c 	andeq	r2, r0, ip, ror pc
    227c:	00002f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
	...
    2288:	00002fa4 	andeq	r2, r0, r4, lsr #31
    228c:	00002fa8 	andeq	r2, r0, r8, lsr #31
    2290:	00002fae 	andeq	r2, r0, lr, lsr #31
    2294:	00002fec 	andeq	r2, r0, ip, ror #31
    2298:	00002ff0 	strdeq	r2, [r0], -r0
    229c:	00002ff6 	strdeq	r2, [r0], -r6
	...
    22a8:	00002fbc 			; <UNDEFINED> instruction: 0x00002fbc
    22ac:	00002fbe 			; <UNDEFINED> instruction: 0x00002fbe
    22b0:	00002fc4 	andeq	r2, r0, r4, asr #31
    22b4:	00002fe2 	andeq	r2, r0, r2, ror #31
	...
    22c0:	00002fec 	andeq	r2, r0, ip, ror #31
    22c4:	00002ff0 	strdeq	r2, [r0], -r0
    22c8:	00002ff6 	strdeq	r2, [r0], -r6
    22cc:	00003038 	andeq	r3, r0, r8, lsr r0
    22d0:	0000303c 	andeq	r3, r0, ip, lsr r0
    22d4:	00003042 	andeq	r3, r0, r2, asr #32
	...
    22e0:	00002fec 	andeq	r2, r0, ip, ror #31
    22e4:	00002ff0 	strdeq	r2, [r0], -r0
    22e8:	00002ff6 	strdeq	r2, [r0], -r6
    22ec:	00002ff8 	strdeq	r2, [r0], -r8
    22f0:	00002ffa 	strdeq	r2, [r0], -sl
    22f4:	00003038 	andeq	r3, r0, r8, lsr r0
    22f8:	0000303c 	andeq	r3, r0, ip, lsr r0
    22fc:	00003042 	andeq	r3, r0, r2, asr #32
	...
    2308:	00003006 	andeq	r3, r0, r6
    230c:	00003008 	andeq	r3, r0, r8
    2310:	0000300e 	andeq	r3, r0, lr
    2314:	0000302e 	andeq	r3, r0, lr, lsr #32
	...
    2320:	00003038 	andeq	r3, r0, r8, lsr r0
    2324:	0000303c 	andeq	r3, r0, ip, lsr r0
    2328:	00003042 	andeq	r3, r0, r2, asr #32
    232c:	000030a0 	andeq	r3, r0, r0, lsr #1
	...
    2338:	00000090 	muleq	r0, r0, r0
    233c:	0000011e 	andeq	r0, r0, lr, lsl r1
    2340:	0000016e 	andeq	r0, r0, lr, ror #2
    2344:	000001a6 	andeq	r0, r0, r6, lsr #3
	...
    2350:	0000026a 	andeq	r0, r0, sl, ror #4
    2354:	0000026e 	andeq	r0, r0, lr, ror #4
    2358:	0000027c 	andeq	r0, r0, ip, ror r2
    235c:	00000284 	andeq	r0, r0, r4, lsl #5
    2360:	0000028a 	andeq	r0, r0, sl, lsl #5
    2364:	0000028e 	andeq	r0, r0, lr, lsl #5
	...
    2370:	0000031a 	andeq	r0, r0, sl, lsl r3
    2374:	0000031e 	andeq	r0, r0, lr, lsl r3
    2378:	0000032a 	andeq	r0, r0, sl, lsr #6
    237c:	00000332 	andeq	r0, r0, r2, lsr r3
    2380:	00000338 	andeq	r0, r0, r8, lsr r3
    2384:	0000033c 	andeq	r0, r0, ip, lsr r3
	...
    2390:	0000040a 	andeq	r0, r0, sl, lsl #8
    2394:	0000040e 	andeq	r0, r0, lr, lsl #8
    2398:	0000041c 	andeq	r0, r0, ip, lsl r4
    239c:	00000424 	andeq	r0, r0, r4, lsr #8
    23a0:	0000042a 	andeq	r0, r0, sl, lsr #8
    23a4:	0000042e 	andeq	r0, r0, lr, lsr #8
	...
    23b0:	000000f8 	strdeq	r0, [r0], -r8
    23b4:	00000104 	andeq	r0, r0, r4, lsl #2
    23b8:	00000108 	andeq	r0, r0, r8, lsl #2
    23bc:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
    23c8:	0000016e 	andeq	r0, r0, lr, ror #2
    23cc:	00000172 	andeq	r0, r0, r2, ror r1
    23d0:	0000017c 	andeq	r0, r0, ip, ror r1
    23d4:	00000180 	andeq	r0, r0, r0, lsl #3
    23d8:	00000186 	andeq	r0, r0, r6, lsl #3
    23dc:	0000018a 	andeq	r0, r0, sl, lsl #3
    23e0:	0000018c 	andeq	r0, r0, ip, lsl #3
    23e4:	00000190 	muleq	r0, r0, r1
	...
    23f0:	000000fa 	strdeq	r0, [r0], -sl
    23f4:	00000118 	andeq	r0, r0, r8, lsl r1
    23f8:	00000124 	andeq	r0, r0, r4, lsr #2
    23fc:	00000136 	andeq	r0, r0, r6, lsr r1
	...
    2408:	0000014e 	andeq	r0, r0, lr, asr #2
    240c:	0000017c 	andeq	r0, r0, ip, ror r1
    2410:	00000186 	andeq	r0, r0, r6, lsl #3
    2414:	00000198 	muleq	r0, r8, r1
	...
    2420:	00000154 	andeq	r0, r0, r4, asr r1
    2424:	00000174 	andeq	r0, r0, r4, ror r1
    2428:	00000186 	andeq	r0, r0, r6, lsl #3
    242c:	00000198 	muleq	r0, r8, r1
	...
    2438:	000001ca 	andeq	r0, r0, sl, asr #3
    243c:	000001ce 	andeq	r0, r0, lr, asr #3
    2440:	000001d2 	ldrdeq	r0, [r0], -r2
    2444:	000001d6 	ldrdeq	r0, [r0], -r6
    2448:	000001d8 	ldrdeq	r0, [r0], -r8
    244c:	000001e6 	andeq	r0, r0, r6, ror #3
	...
    2458:	000001ca 	andeq	r0, r0, sl, asr #3
    245c:	000001ce 	andeq	r0, r0, lr, asr #3
    2460:	000001d2 	ldrdeq	r0, [r0], -r2
    2464:	000001d6 	ldrdeq	r0, [r0], -r6
    2468:	000001d8 	ldrdeq	r0, [r0], -r8
    246c:	000001e2 	andeq	r0, r0, r2, ror #3
	...
    2478:	000001d6 	ldrdeq	r0, [r0], -r6
    247c:	000001d8 	ldrdeq	r0, [r0], -r8
    2480:	00000202 	andeq	r0, r0, r2, lsl #4
    2484:	00000204 	andeq	r0, r0, r4, lsl #4
    2488:	0000020a 	andeq	r0, r0, sl, lsl #4
    248c:	00000232 	andeq	r0, r0, r2, lsr r2
	...
    2498:	00000234 	andeq	r0, r0, r4, lsr r2
    249c:	00000238 	andeq	r0, r0, r8, lsr r2
    24a0:	0000023a 	andeq	r0, r0, sl, lsr r2
    24a4:	00000264 	andeq	r0, r0, r4, ror #4
	...
    24b0:	0000032c 	andeq	r0, r0, ip, lsr #6
    24b4:	00000330 	andeq	r0, r0, r0, lsr r3
    24b8:	00000338 	andeq	r0, r0, r8, lsr r3
    24bc:	0000033e 	andeq	r0, r0, lr, lsr r3
    24c0:	00000340 	andeq	r0, r0, r0, asr #6
    24c4:	00000346 	andeq	r0, r0, r6, asr #6
	...
    24d0:	00000348 	andeq	r0, r0, r8, asr #6
    24d4:	0000034c 	andeq	r0, r0, ip, asr #6
    24d8:	0000034e 	andeq	r0, r0, lr, asr #6
    24dc:	00000354 	andeq	r0, r0, r4, asr r3
    24e0:	0000035a 	andeq	r0, r0, sl, asr r3
    24e4:	0000035e 	andeq	r0, r0, lr, asr r3
	...
